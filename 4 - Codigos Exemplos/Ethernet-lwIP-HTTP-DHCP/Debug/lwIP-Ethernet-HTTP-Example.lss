
lwIP-Ethernet-HTTP-Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000178d0  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  004178d0  004178d0  000278d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009dc  20400000  004178d8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00003ffc  204009e0  004182b8  000309dc  2**3
                  ALLOC
  4 .stack        00000404  204049dc  0041c2b4  000309dc  2**0
                  ALLOC
  5 .heap         00000200  20404de0  0041c6b8  000309dc  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000309dc  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00030a0a  2**0
                  CONTENTS, READONLY
  8 .debug_info   0001d74e  00000000  00000000  00030a63  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000047fd  00000000  00000000  0004e1b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000c5b5  00000000  00000000  000529ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000016b8  00000000  00000000  0005ef63  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001528  00000000  00000000  0006061b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002bfd5  00000000  00000000  00061b43  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000204a0  00000000  00000000  0008db18  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00096401  00000000  00000000  000adfb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00006f8c  00000000  00000000  001443bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20404de0 	.word	0x20404de0
  400004:	00401f71 	.word	0x00401f71
  400008:	00402021 	.word	0x00402021
  40000c:	00402021 	.word	0x00402021
  400010:	00402021 	.word	0x00402021
  400014:	00402021 	.word	0x00402021
  400018:	00402021 	.word	0x00402021
	...
  40002c:	00402021 	.word	0x00402021
  400030:	00402021 	.word	0x00402021
  400034:	00000000 	.word	0x00000000
  400038:	00402021 	.word	0x00402021
  40003c:	00402021 	.word	0x00402021
  400040:	00402021 	.word	0x00402021
  400044:	00402021 	.word	0x00402021
  400048:	00402021 	.word	0x00402021
  40004c:	00402021 	.word	0x00402021
  400050:	00402021 	.word	0x00402021
  400054:	00402021 	.word	0x00402021
  400058:	00402021 	.word	0x00402021
  40005c:	00402021 	.word	0x00402021
  400060:	00402021 	.word	0x00402021
  400064:	00000000 	.word	0x00000000
  400068:	00401681 	.word	0x00401681
  40006c:	00401699 	.word	0x00401699
  400070:	004016b1 	.word	0x004016b1
  400074:	00402021 	.word	0x00402021
  400078:	00402021 	.word	0x00402021
  40007c:	00402021 	.word	0x00402021
  400080:	004016c9 	.word	0x004016c9
  400084:	004016e1 	.word	0x004016e1
  400088:	00402021 	.word	0x00402021
  40008c:	00402021 	.word	0x00402021
  400090:	00402021 	.word	0x00402021
  400094:	00402021 	.word	0x00402021
  400098:	00402021 	.word	0x00402021
  40009c:	0040d145 	.word	0x0040d145
  4000a0:	00402021 	.word	0x00402021
  4000a4:	00402021 	.word	0x00402021
  4000a8:	00402021 	.word	0x00402021
  4000ac:	00402021 	.word	0x00402021
  4000b0:	00402021 	.word	0x00402021
  4000b4:	00402021 	.word	0x00402021
  4000b8:	00402021 	.word	0x00402021
  4000bc:	00402021 	.word	0x00402021
  4000c0:	00402021 	.word	0x00402021
  4000c4:	00402021 	.word	0x00402021
  4000c8:	00402021 	.word	0x00402021
  4000cc:	00402021 	.word	0x00402021
  4000d0:	00000000 	.word	0x00000000
  4000d4:	00402021 	.word	0x00402021
  4000d8:	00000000 	.word	0x00000000
  4000dc:	0040c379 	.word	0x0040c379
  4000e0:	00402021 	.word	0x00402021
  4000e4:	00402021 	.word	0x00402021
  4000e8:	00402021 	.word	0x00402021
  4000ec:	00402021 	.word	0x00402021
  4000f0:	00402021 	.word	0x00402021
  4000f4:	00402021 	.word	0x00402021
  4000f8:	00402021 	.word	0x00402021
  4000fc:	00402021 	.word	0x00402021
  400100:	00402021 	.word	0x00402021
  400104:	00402021 	.word	0x00402021
  400108:	00402021 	.word	0x00402021
  40010c:	00402021 	.word	0x00402021
  400110:	00402021 	.word	0x00402021
	...
  400120:	00402021 	.word	0x00402021
  400124:	00402021 	.word	0x00402021
  400128:	00402021 	.word	0x00402021
  40012c:	00402021 	.word	0x00402021
  400130:	00402021 	.word	0x00402021
  400134:	00000000 	.word	0x00000000
  400138:	00402021 	.word	0x00402021
  40013c:	00402021 	.word	0x00402021

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009e0 	.word	0x204009e0
  40015c:	00000000 	.word	0x00000000
  400160:	004178d8 	.word	0x004178d8

00400164 <frame_dummy>:
  400164:	4b08      	ldr	r3, [pc, #32]	; (400188 <frame_dummy+0x24>)
  400166:	b510      	push	{r4, lr}
  400168:	b11b      	cbz	r3, 400172 <frame_dummy+0xe>
  40016a:	4908      	ldr	r1, [pc, #32]	; (40018c <frame_dummy+0x28>)
  40016c:	4808      	ldr	r0, [pc, #32]	; (400190 <frame_dummy+0x2c>)
  40016e:	f3af 8000 	nop.w
  400172:	4808      	ldr	r0, [pc, #32]	; (400194 <frame_dummy+0x30>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b903      	cbnz	r3, 40017a <frame_dummy+0x16>
  400178:	bd10      	pop	{r4, pc}
  40017a:	4b07      	ldr	r3, [pc, #28]	; (400198 <frame_dummy+0x34>)
  40017c:	2b00      	cmp	r3, #0
  40017e:	d0fb      	beq.n	400178 <frame_dummy+0x14>
  400180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400184:	4718      	bx	r3
  400186:	bf00      	nop
  400188:	00000000 	.word	0x00000000
  40018c:	204009e4 	.word	0x204009e4
  400190:	004178d8 	.word	0x004178d8
  400194:	004178d8 	.word	0x004178d8
  400198:	00000000 	.word	0x00000000

0040019c <osc_enable>:
#define OSC_MAINCK_XTAL_HZ      BOARD_FREQ_MAINCK_XTAL    //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ    BOARD_FREQ_MAINCK_BYPASS  //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
  40019c:	b580      	push	{r7, lr}
  40019e:	b082      	sub	sp, #8
  4001a0:	af00      	add	r7, sp, #0
  4001a2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4001a4:	687b      	ldr	r3, [r7, #4]
  4001a6:	2b07      	cmp	r3, #7
  4001a8:	d831      	bhi.n	40020e <osc_enable+0x72>
  4001aa:	a201      	add	r2, pc, #4	; (adr r2, 4001b0 <osc_enable+0x14>)
  4001ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4001b0:	0040020d 	.word	0x0040020d
  4001b4:	004001d1 	.word	0x004001d1
  4001b8:	004001d9 	.word	0x004001d9
  4001bc:	004001e1 	.word	0x004001e1
  4001c0:	004001e9 	.word	0x004001e9
  4001c4:	004001f1 	.word	0x004001f1
  4001c8:	004001f9 	.word	0x004001f9
  4001cc:	00400203 	.word	0x00400203
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  4001d0:	2000      	movs	r0, #0
  4001d2:	4b11      	ldr	r3, [pc, #68]	; (400218 <osc_enable+0x7c>)
  4001d4:	4798      	blx	r3
		break;
  4001d6:	e01a      	b.n	40020e <osc_enable+0x72>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  4001d8:	2001      	movs	r0, #1
  4001da:	4b0f      	ldr	r3, [pc, #60]	; (400218 <osc_enable+0x7c>)
  4001dc:	4798      	blx	r3
		break;
  4001de:	e016      	b.n	40020e <osc_enable+0x72>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  4001e0:	2000      	movs	r0, #0
  4001e2:	4b0e      	ldr	r3, [pc, #56]	; (40021c <osc_enable+0x80>)
  4001e4:	4798      	blx	r3
		break;
  4001e6:	e012      	b.n	40020e <osc_enable+0x72>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  4001e8:	2010      	movs	r0, #16
  4001ea:	4b0c      	ldr	r3, [pc, #48]	; (40021c <osc_enable+0x80>)
  4001ec:	4798      	blx	r3
		break;
  4001ee:	e00e      	b.n	40020e <osc_enable+0x72>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  4001f0:	2020      	movs	r0, #32
  4001f2:	4b0a      	ldr	r3, [pc, #40]	; (40021c <osc_enable+0x80>)
  4001f4:	4798      	blx	r3
		break;
  4001f6:	e00a      	b.n	40020e <osc_enable+0x72>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4001f8:	213e      	movs	r1, #62	; 0x3e
  4001fa:	2000      	movs	r0, #0
  4001fc:	4b08      	ldr	r3, [pc, #32]	; (400220 <osc_enable+0x84>)
  4001fe:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  400200:	e005      	b.n	40020e <osc_enable+0x72>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  400202:	213e      	movs	r1, #62	; 0x3e
  400204:	2001      	movs	r0, #1
  400206:	4b06      	ldr	r3, [pc, #24]	; (400220 <osc_enable+0x84>)
  400208:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  40020a:	e000      	b.n	40020e <osc_enable+0x72>

static inline void osc_enable(uint32_t ul_id)
{
	switch (ul_id) {
	case OSC_SLCK_32K_RC:
		break;
  40020c:	bf00      	nop
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
	}
}
  40020e:	bf00      	nop
  400210:	3708      	adds	r7, #8
  400212:	46bd      	mov	sp, r7
  400214:	bd80      	pop	{r7, pc}
  400216:	bf00      	nop
  400218:	004017f9 	.word	0x004017f9
  40021c:	00401865 	.word	0x00401865
  400220:	004018d5 	.word	0x004018d5

00400224 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
  400224:	b580      	push	{r7, lr}
  400226:	b082      	sub	sp, #8
  400228:	af00      	add	r7, sp, #0
  40022a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40022c:	687b      	ldr	r3, [r7, #4]
  40022e:	2b07      	cmp	r3, #7
  400230:	d826      	bhi.n	400280 <osc_is_ready+0x5c>
  400232:	a201      	add	r2, pc, #4	; (adr r2, 400238 <osc_is_ready+0x14>)
  400234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400238:	00400259 	.word	0x00400259
  40023c:	0040025d 	.word	0x0040025d
  400240:	0040025d 	.word	0x0040025d
  400244:	0040026f 	.word	0x0040026f
  400248:	0040026f 	.word	0x0040026f
  40024c:	0040026f 	.word	0x0040026f
  400250:	0040026f 	.word	0x0040026f
  400254:	0040026f 	.word	0x0040026f
	case OSC_SLCK_32K_RC:
		return 1;
  400258:	2301      	movs	r3, #1
  40025a:	e012      	b.n	400282 <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  40025c:	4b0b      	ldr	r3, [pc, #44]	; (40028c <osc_is_ready+0x68>)
  40025e:	4798      	blx	r3
  400260:	4603      	mov	r3, r0
  400262:	2b00      	cmp	r3, #0
  400264:	bf14      	ite	ne
  400266:	2301      	movne	r3, #1
  400268:	2300      	moveq	r3, #0
  40026a:	b2db      	uxtb	r3, r3
  40026c:	e009      	b.n	400282 <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  40026e:	4b08      	ldr	r3, [pc, #32]	; (400290 <osc_is_ready+0x6c>)
  400270:	4798      	blx	r3
  400272:	4603      	mov	r3, r0
  400274:	2b00      	cmp	r3, #0
  400276:	bf14      	ite	ne
  400278:	2301      	movne	r3, #1
  40027a:	2300      	moveq	r3, #0
  40027c:	b2db      	uxtb	r3, r3
  40027e:	e000      	b.n	400282 <osc_is_ready+0x5e>
	}

	return 0;
  400280:	2300      	movs	r3, #0
}
  400282:	4618      	mov	r0, r3
  400284:	3708      	adds	r7, #8
  400286:	46bd      	mov	sp, r7
  400288:	bd80      	pop	{r7, pc}
  40028a:	bf00      	nop
  40028c:	00401831 	.word	0x00401831
  400290:	0040194d 	.word	0x0040194d

00400294 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400294:	b480      	push	{r7}
  400296:	b083      	sub	sp, #12
  400298:	af00      	add	r7, sp, #0
  40029a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40029c:	687b      	ldr	r3, [r7, #4]
  40029e:	2b07      	cmp	r3, #7
  4002a0:	d825      	bhi.n	4002ee <osc_get_rate+0x5a>
  4002a2:	a201      	add	r2, pc, #4	; (adr r2, 4002a8 <osc_get_rate+0x14>)
  4002a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4002a8:	004002c9 	.word	0x004002c9
  4002ac:	004002cf 	.word	0x004002cf
  4002b0:	004002d5 	.word	0x004002d5
  4002b4:	004002db 	.word	0x004002db
  4002b8:	004002df 	.word	0x004002df
  4002bc:	004002e3 	.word	0x004002e3
  4002c0:	004002e7 	.word	0x004002e7
  4002c4:	004002eb 	.word	0x004002eb
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  4002c8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4002cc:	e010      	b.n	4002f0 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  4002ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4002d2:	e00d      	b.n	4002f0 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  4002d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4002d8:	e00a      	b.n	4002f0 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  4002da:	4b08      	ldr	r3, [pc, #32]	; (4002fc <osc_get_rate+0x68>)
  4002dc:	e008      	b.n	4002f0 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  4002de:	4b08      	ldr	r3, [pc, #32]	; (400300 <osc_get_rate+0x6c>)
  4002e0:	e006      	b.n	4002f0 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  4002e2:	4b08      	ldr	r3, [pc, #32]	; (400304 <osc_get_rate+0x70>)
  4002e4:	e004      	b.n	4002f0 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  4002e6:	4b07      	ldr	r3, [pc, #28]	; (400304 <osc_get_rate+0x70>)
  4002e8:	e002      	b.n	4002f0 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  4002ea:	4b06      	ldr	r3, [pc, #24]	; (400304 <osc_get_rate+0x70>)
  4002ec:	e000      	b.n	4002f0 <osc_get_rate+0x5c>
	}

	return 0;
  4002ee:	2300      	movs	r3, #0
}
  4002f0:	4618      	mov	r0, r3
  4002f2:	370c      	adds	r7, #12
  4002f4:	46bd      	mov	sp, r7
  4002f6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4002fa:	4770      	bx	lr
  4002fc:	003d0900 	.word	0x003d0900
  400300:	007a1200 	.word	0x007a1200
  400304:	00b71b00 	.word	0x00b71b00

00400308 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  400308:	b580      	push	{r7, lr}
  40030a:	b082      	sub	sp, #8
  40030c:	af00      	add	r7, sp, #0
  40030e:	4603      	mov	r3, r0
  400310:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  400312:	bf00      	nop
  400314:	79fb      	ldrb	r3, [r7, #7]
  400316:	4618      	mov	r0, r3
  400318:	4b05      	ldr	r3, [pc, #20]	; (400330 <osc_wait_ready+0x28>)
  40031a:	4798      	blx	r3
  40031c:	4603      	mov	r3, r0
  40031e:	f083 0301 	eor.w	r3, r3, #1
  400322:	b2db      	uxtb	r3, r3
  400324:	2b00      	cmp	r3, #0
  400326:	d1f5      	bne.n	400314 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  400328:	bf00      	nop
  40032a:	3708      	adds	r7, #8
  40032c:	46bd      	mov	sp, r7
  40032e:	bd80      	pop	{r7, pc}
  400330:	00400225 	.word	0x00400225

00400334 <pll_config_init>:
 * hardware mul+1 is hidden in this implementation. Use mul as mul effective
 * value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  400334:	b580      	push	{r7, lr}
  400336:	b086      	sub	sp, #24
  400338:	af00      	add	r7, sp, #0
  40033a:	60f8      	str	r0, [r7, #12]
  40033c:	607a      	str	r2, [r7, #4]
  40033e:	603b      	str	r3, [r7, #0]
  400340:	460b      	mov	r3, r1
  400342:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
  400344:	687b      	ldr	r3, [r7, #4]
  400346:	2b00      	cmp	r3, #0
  400348:	d107      	bne.n	40035a <pll_config_init+0x26>
  40034a:	683b      	ldr	r3, [r7, #0]
  40034c:	2b00      	cmp	r3, #0
  40034e:	d104      	bne.n	40035a <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
  400350:	68fb      	ldr	r3, [r7, #12]
  400352:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
  400356:	601a      	str	r2, [r3, #0]
  400358:	e019      	b.n	40038e <pll_config_init+0x5a>
	} else { /* PLLA */
	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  40035a:	7afb      	ldrb	r3, [r7, #11]
  40035c:	4618      	mov	r0, r3
  40035e:	4b0e      	ldr	r3, [pc, #56]	; (400398 <pll_config_init+0x64>)
  400360:	4798      	blx	r3
  400362:	4602      	mov	r2, r0
  400364:	687b      	ldr	r3, [r7, #4]
  400366:	fbb2 f3f3 	udiv	r3, r2, r3
  40036a:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  40036c:	697b      	ldr	r3, [r7, #20]
  40036e:	683a      	ldr	r2, [r7, #0]
  400370:	fb02 f303 	mul.w	r3, r2, r3
  400374:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  400376:	683b      	ldr	r3, [r7, #0]
  400378:	3b01      	subs	r3, #1
  40037a:	041a      	lsls	r2, r3, #16
  40037c:	4b07      	ldr	r3, [pc, #28]	; (40039c <pll_config_init+0x68>)
  40037e:	4013      	ands	r3, r2
  400380:	687a      	ldr	r2, [r7, #4]
  400382:	b2d2      	uxtb	r2, r2
  400384:	4313      	orrs	r3, r2
		| CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  400386:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
	vco_hz *= ul_mul;
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  40038a:	68fb      	ldr	r3, [r7, #12]
  40038c:	601a      	str	r2, [r3, #0]
		| CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	}
}
  40038e:	bf00      	nop
  400390:	3718      	adds	r7, #24
  400392:	46bd      	mov	sp, r7
  400394:	bd80      	pop	{r7, pc}
  400396:	bf00      	nop
  400398:	00400295 	.word	0x00400295
  40039c:	07ff0000 	.word	0x07ff0000

004003a0 <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  4003a0:	b580      	push	{r7, lr}
  4003a2:	b082      	sub	sp, #8
  4003a4:	af00      	add	r7, sp, #0
  4003a6:	6078      	str	r0, [r7, #4]
  4003a8:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4003aa:	683b      	ldr	r3, [r7, #0]
  4003ac:	2b00      	cmp	r3, #0
  4003ae:	d108      	bne.n	4003c2 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  4003b0:	4b09      	ldr	r3, [pc, #36]	; (4003d8 <pll_enable+0x38>)
  4003b2:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4003b4:	4a09      	ldr	r2, [pc, #36]	; (4003dc <pll_enable+0x3c>)
  4003b6:	687b      	ldr	r3, [r7, #4]
  4003b8:	681b      	ldr	r3, [r3, #0]
  4003ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  4003be:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
  4003c0:	e005      	b.n	4003ce <pll_enable+0x2e>

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
  4003c2:	4a06      	ldr	r2, [pc, #24]	; (4003dc <pll_enable+0x3c>)
  4003c4:	687b      	ldr	r3, [r7, #4]
  4003c6:	681b      	ldr	r3, [r3, #0]
  4003c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4003cc:	61d3      	str	r3, [r2, #28]
	}
}
  4003ce:	bf00      	nop
  4003d0:	3708      	adds	r7, #8
  4003d2:	46bd      	mov	sp, r7
  4003d4:	bd80      	pop	{r7, pc}
  4003d6:	bf00      	nop
  4003d8:	00401969 	.word	0x00401969
  4003dc:	400e0600 	.word	0x400e0600

004003e0 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  4003e0:	b580      	push	{r7, lr}
  4003e2:	b082      	sub	sp, #8
  4003e4:	af00      	add	r7, sp, #0
  4003e6:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4003e8:	687b      	ldr	r3, [r7, #4]
  4003ea:	2b00      	cmp	r3, #0
  4003ec:	d103      	bne.n	4003f6 <pll_is_locked+0x16>
	return pmc_is_locked_pllack();
  4003ee:	4b05      	ldr	r3, [pc, #20]	; (400404 <pll_is_locked+0x24>)
  4003f0:	4798      	blx	r3
  4003f2:	4603      	mov	r3, r0
  4003f4:	e002      	b.n	4003fc <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
  4003f6:	4b04      	ldr	r3, [pc, #16]	; (400408 <pll_is_locked+0x28>)
  4003f8:	4798      	blx	r3
  4003fa:	4603      	mov	r3, r0
	}
}
  4003fc:	4618      	mov	r0, r3
  4003fe:	3708      	adds	r7, #8
  400400:	46bd      	mov	sp, r7
  400402:	bd80      	pop	{r7, pc}
  400404:	00401985 	.word	0x00401985
  400408:	004019a1 	.word	0x004019a1

0040040c <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  40040c:	b580      	push	{r7, lr}
  40040e:	b082      	sub	sp, #8
  400410:	af00      	add	r7, sp, #0
  400412:	4603      	mov	r3, r0
  400414:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  400416:	79fb      	ldrb	r3, [r7, #7]
  400418:	3b03      	subs	r3, #3
  40041a:	2b04      	cmp	r3, #4
  40041c:	d808      	bhi.n	400430 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  40041e:	79fb      	ldrb	r3, [r7, #7]
  400420:	4618      	mov	r0, r3
  400422:	4b06      	ldr	r3, [pc, #24]	; (40043c <pll_enable_source+0x30>)
  400424:	4798      	blx	r3
		osc_wait_ready(e_src);
  400426:	79fb      	ldrb	r3, [r7, #7]
  400428:	4618      	mov	r0, r3
  40042a:	4b05      	ldr	r3, [pc, #20]	; (400440 <pll_enable_source+0x34>)
  40042c:	4798      	blx	r3
		break;
  40042e:	e000      	b.n	400432 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  400430:	bf00      	nop
	}
}
  400432:	bf00      	nop
  400434:	3708      	adds	r7, #8
  400436:	46bd      	mov	sp, r7
  400438:	bd80      	pop	{r7, pc}
  40043a:	bf00      	nop
  40043c:	0040019d 	.word	0x0040019d
  400440:	00400309 	.word	0x00400309

00400444 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  400444:	b580      	push	{r7, lr}
  400446:	b082      	sub	sp, #8
  400448:	af00      	add	r7, sp, #0
  40044a:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40044c:	bf00      	nop
  40044e:	6878      	ldr	r0, [r7, #4]
  400450:	4b04      	ldr	r3, [pc, #16]	; (400464 <pll_wait_for_lock+0x20>)
  400452:	4798      	blx	r3
  400454:	4603      	mov	r3, r0
  400456:	2b00      	cmp	r3, #0
  400458:	d0f9      	beq.n	40044e <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  40045a:	2300      	movs	r3, #0
}
  40045c:	4618      	mov	r0, r3
  40045e:	3708      	adds	r7, #8
  400460:	46bd      	mov	sp, r7
  400462:	bd80      	pop	{r7, pc}
  400464:	004003e1 	.word	0x004003e1

00400468 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  400468:	b580      	push	{r7, lr}
  40046a:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  40046c:	2006      	movs	r0, #6
  40046e:	4b05      	ldr	r3, [pc, #20]	; (400484 <sysclk_get_main_hz+0x1c>)
  400470:	4798      	blx	r3
  400472:	4602      	mov	r2, r0
  400474:	4613      	mov	r3, r2
  400476:	009b      	lsls	r3, r3, #2
  400478:	4413      	add	r3, r2
  40047a:	009a      	lsls	r2, r3, #2
  40047c:	4413      	add	r3, r2
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  40047e:	4618      	mov	r0, r3
  400480:	bd80      	pop	{r7, pc}
  400482:	bf00      	nop
  400484:	00400295 	.word	0x00400295

00400488 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  400488:	b580      	push	{r7, lr}
  40048a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  40048c:	4b02      	ldr	r3, [pc, #8]	; (400498 <sysclk_get_cpu_hz+0x10>)
  40048e:	4798      	blx	r3
  400490:	4603      	mov	r3, r0
  400492:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  400494:	4618      	mov	r0, r3
  400496:	bd80      	pop	{r7, pc}
  400498:	00400469 	.word	0x00400469

0040049c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  40049c:	b590      	push	{r4, r7, lr}
  40049e:	b083      	sub	sp, #12
  4004a0:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4004a2:	4813      	ldr	r0, [pc, #76]	; (4004f0 <sysclk_init+0x54>)
  4004a4:	4b13      	ldr	r3, [pc, #76]	; (4004f4 <sysclk_init+0x58>)
  4004a6:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
  4004a8:	2006      	movs	r0, #6
  4004aa:	4b13      	ldr	r3, [pc, #76]	; (4004f8 <sysclk_init+0x5c>)
  4004ac:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  4004ae:	1d38      	adds	r0, r7, #4
  4004b0:	2319      	movs	r3, #25
  4004b2:	2201      	movs	r2, #1
  4004b4:	2106      	movs	r1, #6
  4004b6:	4c11      	ldr	r4, [pc, #68]	; (4004fc <sysclk_init+0x60>)
  4004b8:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  4004ba:	1d3b      	adds	r3, r7, #4
  4004bc:	2100      	movs	r1, #0
  4004be:	4618      	mov	r0, r3
  4004c0:	4b0f      	ldr	r3, [pc, #60]	; (400500 <sysclk_init+0x64>)
  4004c2:	4798      	blx	r3
		pll_wait_for_lock(0);
  4004c4:	2000      	movs	r0, #0
  4004c6:	4b0f      	ldr	r3, [pc, #60]	; (400504 <sysclk_init+0x68>)
  4004c8:	4798      	blx	r3
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4004ca:	2002      	movs	r0, #2
  4004cc:	4b0e      	ldr	r3, [pc, #56]	; (400508 <sysclk_init+0x6c>)
  4004ce:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4004d0:	2010      	movs	r0, #16
  4004d2:	4b0e      	ldr	r3, [pc, #56]	; (40050c <sysclk_init+0x70>)
  4004d4:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4004d6:	4b0e      	ldr	r3, [pc, #56]	; (400510 <sysclk_init+0x74>)
  4004d8:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4004da:	4b0e      	ldr	r3, [pc, #56]	; (400514 <sysclk_init+0x78>)
  4004dc:	4798      	blx	r3
  4004de:	4603      	mov	r3, r0
  4004e0:	4618      	mov	r0, r3
  4004e2:	4b04      	ldr	r3, [pc, #16]	; (4004f4 <sysclk_init+0x58>)
  4004e4:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  4004e6:	bf00      	nop
  4004e8:	370c      	adds	r7, #12
  4004ea:	46bd      	mov	sp, r7
  4004ec:	bd90      	pop	{r4, r7, pc}
  4004ee:	bf00      	nop
  4004f0:	11e1a300 	.word	0x11e1a300
  4004f4:	00402195 	.word	0x00402195
  4004f8:	0040040d 	.word	0x0040040d
  4004fc:	00400335 	.word	0x00400335
  400500:	004003a1 	.word	0x004003a1
  400504:	00400445 	.word	0x00400445
  400508:	004016f9 	.word	0x004016f9
  40050c:	00401775 	.word	0x00401775
  400510:	00402029 	.word	0x00402029
  400514:	00400489 	.word	0x00400489

00400518 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400518:	b580      	push	{r7, lr}
  40051a:	b086      	sub	sp, #24
  40051c:	af00      	add	r7, sp, #0
  40051e:	60f8      	str	r0, [r7, #12]
  400520:	60b9      	str	r1, [r7, #8]
  400522:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  400524:	2300      	movs	r3, #0
  400526:	617b      	str	r3, [r7, #20]

	if (file != 0) {
  400528:	68fb      	ldr	r3, [r7, #12]
  40052a:	2b00      	cmp	r3, #0
  40052c:	d012      	beq.n	400554 <_read+0x3c>
		return -1;
  40052e:	f04f 33ff 	mov.w	r3, #4294967295
  400532:	e013      	b.n	40055c <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
  400534:	4b0b      	ldr	r3, [pc, #44]	; (400564 <_read+0x4c>)
  400536:	681b      	ldr	r3, [r3, #0]
  400538:	4a0b      	ldr	r2, [pc, #44]	; (400568 <_read+0x50>)
  40053a:	6812      	ldr	r2, [r2, #0]
  40053c:	68b9      	ldr	r1, [r7, #8]
  40053e:	4610      	mov	r0, r2
  400540:	4798      	blx	r3
		ptr++;
  400542:	68bb      	ldr	r3, [r7, #8]
  400544:	3301      	adds	r3, #1
  400546:	60bb      	str	r3, [r7, #8]
		nChars++;
  400548:	697b      	ldr	r3, [r7, #20]
  40054a:	3301      	adds	r3, #1
  40054c:	617b      	str	r3, [r7, #20]

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  40054e:	687b      	ldr	r3, [r7, #4]
  400550:	3b01      	subs	r3, #1
  400552:	607b      	str	r3, [r7, #4]
  400554:	687b      	ldr	r3, [r7, #4]
  400556:	2b00      	cmp	r3, #0
  400558:	dcec      	bgt.n	400534 <_read+0x1c>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
  40055a:	697b      	ldr	r3, [r7, #20]
}
  40055c:	4618      	mov	r0, r3
  40055e:	3718      	adds	r7, #24
  400560:	46bd      	mov	sp, r7
  400562:	bd80      	pop	{r7, pc}
  400564:	2040390c 	.word	0x2040390c
  400568:	20403914 	.word	0x20403914

0040056c <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  40056c:	b580      	push	{r7, lr}
  40056e:	b086      	sub	sp, #24
  400570:	af00      	add	r7, sp, #0
  400572:	60f8      	str	r0, [r7, #12]
  400574:	60b9      	str	r1, [r7, #8]
  400576:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  400578:	2300      	movs	r3, #0
  40057a:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
  40057c:	68fb      	ldr	r3, [r7, #12]
  40057e:	2b01      	cmp	r3, #1
  400580:	d01e      	beq.n	4005c0 <_write+0x54>
  400582:	68fb      	ldr	r3, [r7, #12]
  400584:	2b02      	cmp	r3, #2
  400586:	d01b      	beq.n	4005c0 <_write+0x54>
  400588:	68fb      	ldr	r3, [r7, #12]
  40058a:	2b03      	cmp	r3, #3
  40058c:	d018      	beq.n	4005c0 <_write+0x54>
		return -1;
  40058e:	f04f 33ff 	mov.w	r3, #4294967295
  400592:	e019      	b.n	4005c8 <_write+0x5c>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
  400594:	4b0e      	ldr	r3, [pc, #56]	; (4005d0 <_write+0x64>)
  400596:	681a      	ldr	r2, [r3, #0]
  400598:	4b0e      	ldr	r3, [pc, #56]	; (4005d4 <_write+0x68>)
  40059a:	6818      	ldr	r0, [r3, #0]
  40059c:	68bb      	ldr	r3, [r7, #8]
  40059e:	1c59      	adds	r1, r3, #1
  4005a0:	60b9      	str	r1, [r7, #8]
  4005a2:	781b      	ldrb	r3, [r3, #0]
  4005a4:	4619      	mov	r1, r3
  4005a6:	4790      	blx	r2
  4005a8:	4603      	mov	r3, r0
  4005aa:	2b00      	cmp	r3, #0
  4005ac:	da02      	bge.n	4005b4 <_write+0x48>
			return -1;
  4005ae:	f04f 33ff 	mov.w	r3, #4294967295
  4005b2:	e009      	b.n	4005c8 <_write+0x5c>
		}
		++nChars;
  4005b4:	697b      	ldr	r3, [r7, #20]
  4005b6:	3301      	adds	r3, #1
  4005b8:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4005ba:	687b      	ldr	r3, [r7, #4]
  4005bc:	3b01      	subs	r3, #1
  4005be:	607b      	str	r3, [r7, #4]
  4005c0:	687b      	ldr	r3, [r7, #4]
  4005c2:	2b00      	cmp	r3, #0
  4005c4:	d1e6      	bne.n	400594 <_write+0x28>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
  4005c6:	697b      	ldr	r3, [r7, #20]
}
  4005c8:	4618      	mov	r0, r3
  4005ca:	3718      	adds	r7, #24
  4005cc:	46bd      	mov	sp, r7
  4005ce:	bd80      	pop	{r7, pc}
  4005d0:	20403910 	.word	0x20403910
  4005d4:	20403914 	.word	0x20403914

004005d8 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  4005d8:	b580      	push	{r7, lr}
  4005da:	b082      	sub	sp, #8
  4005dc:	af00      	add	r7, sp, #0
  4005de:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  4005e0:	6878      	ldr	r0, [r7, #4]
  4005e2:	4b03      	ldr	r3, [pc, #12]	; (4005f0 <sysclk_enable_peripheral_clock+0x18>)
  4005e4:	4798      	blx	r3
}
  4005e6:	bf00      	nop
  4005e8:	3708      	adds	r7, #8
  4005ea:	46bd      	mov	sp, r7
  4005ec:	bd80      	pop	{r7, pc}
  4005ee:	bf00      	nop
  4005f0:	004019bd 	.word	0x004019bd

004005f4 <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
  4005f4:	b580      	push	{r7, lr}
  4005f6:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
  4005f8:	200a      	movs	r0, #10
  4005fa:	4b08      	ldr	r3, [pc, #32]	; (40061c <ioport_init+0x28>)
  4005fc:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
  4005fe:	200b      	movs	r0, #11
  400600:	4b06      	ldr	r3, [pc, #24]	; (40061c <ioport_init+0x28>)
  400602:	4798      	blx	r3
#endif
#ifdef ID_PIOC
	sysclk_enable_peripheral_clock(ID_PIOC);
  400604:	200c      	movs	r0, #12
  400606:	4b05      	ldr	r3, [pc, #20]	; (40061c <ioport_init+0x28>)
  400608:	4798      	blx	r3
#endif
#ifdef ID_PIOD
	sysclk_enable_peripheral_clock(ID_PIOD);
  40060a:	2010      	movs	r0, #16
  40060c:	4b03      	ldr	r3, [pc, #12]	; (40061c <ioport_init+0x28>)
  40060e:	4798      	blx	r3
#endif
#ifdef ID_PIOE
	sysclk_enable_peripheral_clock(ID_PIOE);
  400610:	2011      	movs	r0, #17
  400612:	4b02      	ldr	r3, [pc, #8]	; (40061c <ioport_init+0x28>)
  400614:	4798      	blx	r3
	arch_ioport_init();
}
  400616:	bf00      	nop
  400618:	bd80      	pop	{r7, pc}
  40061a:	bf00      	nop
  40061c:	004005d9 	.word	0x004005d9

00400620 <ioport_disable_pin>:
 *        IOPORT_CREATE_PIN().
 *
 * \param pin IOPORT pin to disable
 */
static inline void ioport_disable_pin(ioport_pin_t pin)
{
  400620:	b480      	push	{r7}
  400622:	b089      	sub	sp, #36	; 0x24
  400624:	af00      	add	r7, sp, #0
  400626:	6078      	str	r0, [r7, #4]
  400628:	687b      	ldr	r3, [r7, #4]
  40062a:	61fb      	str	r3, [r7, #28]
  40062c:	69fb      	ldr	r3, [r7, #28]
  40062e:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  400630:	69bb      	ldr	r3, [r7, #24]
  400632:	095a      	lsrs	r2, r3, #5
  400634:	69fb      	ldr	r3, [r7, #28]
  400636:	617b      	str	r3, [r7, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  400638:	697b      	ldr	r3, [r7, #20]
  40063a:	f003 031f 	and.w	r3, r3, #31
  40063e:	2101      	movs	r1, #1
  400640:	fa01 f303 	lsl.w	r3, r1, r3
  400644:	613a      	str	r2, [r7, #16]
  400646:	60fb      	str	r3, [r7, #12]
  400648:	693b      	ldr	r3, [r7, #16]
  40064a:	60bb      	str	r3, [r7, #8]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40064c:	68ba      	ldr	r2, [r7, #8]
  40064e:	4b06      	ldr	r3, [pc, #24]	; (400668 <ioport_disable_pin+0x48>)
  400650:	4413      	add	r3, r2
  400652:	025b      	lsls	r3, r3, #9
  400654:	461a      	mov	r2, r3
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400656:	68fb      	ldr	r3, [r7, #12]
  400658:	6053      	str	r3, [r2, #4]
	arch_ioport_disable_pin(pin);
}
  40065a:	bf00      	nop
  40065c:	3724      	adds	r7, #36	; 0x24
  40065e:	46bd      	mov	sp, r7
  400660:	f85d 7b04 	ldr.w	r7, [sp], #4
  400664:	4770      	bx	lr
  400666:	bf00      	nop
  400668:	00200707 	.word	0x00200707

0040066c <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
  40066c:	b480      	push	{r7}
  40066e:	b08d      	sub	sp, #52	; 0x34
  400670:	af00      	add	r7, sp, #0
  400672:	6078      	str	r0, [r7, #4]
  400674:	6039      	str	r1, [r7, #0]
  400676:	687b      	ldr	r3, [r7, #4]
  400678:	62fb      	str	r3, [r7, #44]	; 0x2c
  40067a:	683b      	ldr	r3, [r7, #0]
  40067c:	62bb      	str	r3, [r7, #40]	; 0x28
  40067e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400680:	627b      	str	r3, [r7, #36]	; 0x24
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  400682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400684:	095a      	lsrs	r2, r3, #5
  400686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400688:	623b      	str	r3, [r7, #32]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40068a:	6a3b      	ldr	r3, [r7, #32]
  40068c:	f003 031f 	and.w	r3, r3, #31
  400690:	2101      	movs	r1, #1
  400692:	fa01 f303 	lsl.w	r3, r1, r3
  400696:	61fa      	str	r2, [r7, #28]
  400698:	61bb      	str	r3, [r7, #24]
  40069a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40069c:	617b      	str	r3, [r7, #20]
  40069e:	69fb      	ldr	r3, [r7, #28]
  4006a0:	613b      	str	r3, [r7, #16]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4006a2:	693a      	ldr	r2, [r7, #16]
  4006a4:	4b37      	ldr	r3, [pc, #220]	; (400784 <ioport_set_pin_mode+0x118>)
  4006a6:	4413      	add	r3, r2
  4006a8:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
  4006aa:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
  4006ac:	697b      	ldr	r3, [r7, #20]
  4006ae:	f003 0308 	and.w	r3, r3, #8
  4006b2:	2b00      	cmp	r3, #0
  4006b4:	d003      	beq.n	4006be <ioport_set_pin_mode+0x52>
		base->PIO_PUER = mask;
  4006b6:	68fb      	ldr	r3, [r7, #12]
  4006b8:	69ba      	ldr	r2, [r7, #24]
  4006ba:	665a      	str	r2, [r3, #100]	; 0x64
  4006bc:	e002      	b.n	4006c4 <ioport_set_pin_mode+0x58>
	} else {
		base->PIO_PUDR = mask;
  4006be:	68fb      	ldr	r3, [r7, #12]
  4006c0:	69ba      	ldr	r2, [r7, #24]
  4006c2:	661a      	str	r2, [r3, #96]	; 0x60
	}

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
  4006c4:	697b      	ldr	r3, [r7, #20]
  4006c6:	f003 0310 	and.w	r3, r3, #16
  4006ca:	2b00      	cmp	r3, #0
  4006cc:	d004      	beq.n	4006d8 <ioport_set_pin_mode+0x6c>
		base->PIO_PPDER = mask;
  4006ce:	68fb      	ldr	r3, [r7, #12]
  4006d0:	69ba      	ldr	r2, [r7, #24]
  4006d2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  4006d6:	e003      	b.n	4006e0 <ioport_set_pin_mode+0x74>
	} else {
		base->PIO_PPDDR = mask;
  4006d8:	68fb      	ldr	r3, [r7, #12]
  4006da:	69ba      	ldr	r2, [r7, #24]
  4006dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  4006e0:	697b      	ldr	r3, [r7, #20]
  4006e2:	f003 0320 	and.w	r3, r3, #32
  4006e6:	2b00      	cmp	r3, #0
  4006e8:	d003      	beq.n	4006f2 <ioport_set_pin_mode+0x86>
		base->PIO_MDER = mask;
  4006ea:	68fb      	ldr	r3, [r7, #12]
  4006ec:	69ba      	ldr	r2, [r7, #24]
  4006ee:	651a      	str	r2, [r3, #80]	; 0x50
  4006f0:	e002      	b.n	4006f8 <ioport_set_pin_mode+0x8c>
	} else {
		base->PIO_MDDR = mask;
  4006f2:	68fb      	ldr	r3, [r7, #12]
  4006f4:	69ba      	ldr	r2, [r7, #24]
  4006f6:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  4006f8:	697b      	ldr	r3, [r7, #20]
  4006fa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  4006fe:	2b00      	cmp	r3, #0
  400700:	d003      	beq.n	40070a <ioport_set_pin_mode+0x9e>
		base->PIO_IFER = mask;
  400702:	68fb      	ldr	r3, [r7, #12]
  400704:	69ba      	ldr	r2, [r7, #24]
  400706:	621a      	str	r2, [r3, #32]
  400708:	e002      	b.n	400710 <ioport_set_pin_mode+0xa4>
	} else {
		base->PIO_IFDR = mask;
  40070a:	68fb      	ldr	r3, [r7, #12]
  40070c:	69ba      	ldr	r2, [r7, #24]
  40070e:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
  400710:	697b      	ldr	r3, [r7, #20]
  400712:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400716:	2b00      	cmp	r3, #0
  400718:	d004      	beq.n	400724 <ioport_set_pin_mode+0xb8>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  40071a:	68fb      	ldr	r3, [r7, #12]
  40071c:	69ba      	ldr	r2, [r7, #24]
  40071e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  400722:	e003      	b.n	40072c <ioport_set_pin_mode+0xc0>
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400724:	68fb      	ldr	r3, [r7, #12]
  400726:	69ba      	ldr	r2, [r7, #24]
  400728:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
  40072c:	697b      	ldr	r3, [r7, #20]
  40072e:	f003 0301 	and.w	r3, r3, #1
  400732:	2b00      	cmp	r3, #0
  400734:	d006      	beq.n	400744 <ioport_set_pin_mode+0xd8>
		base->PIO_ABCDSR[0] |= mask;
  400736:	68fb      	ldr	r3, [r7, #12]
  400738:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40073a:	69bb      	ldr	r3, [r7, #24]
  40073c:	431a      	orrs	r2, r3
  40073e:	68fb      	ldr	r3, [r7, #12]
  400740:	671a      	str	r2, [r3, #112]	; 0x70
  400742:	e006      	b.n	400752 <ioport_set_pin_mode+0xe6>
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400744:	68fb      	ldr	r3, [r7, #12]
  400746:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400748:	69bb      	ldr	r3, [r7, #24]
  40074a:	43db      	mvns	r3, r3
  40074c:	401a      	ands	r2, r3
  40074e:	68fb      	ldr	r3, [r7, #12]
  400750:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
  400752:	697b      	ldr	r3, [r7, #20]
  400754:	f003 0302 	and.w	r3, r3, #2
  400758:	2b00      	cmp	r3, #0
  40075a:	d006      	beq.n	40076a <ioport_set_pin_mode+0xfe>
		base->PIO_ABCDSR[1] |= mask;
  40075c:	68fb      	ldr	r3, [r7, #12]
  40075e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400760:	69bb      	ldr	r3, [r7, #24]
  400762:	431a      	orrs	r2, r3
  400764:	68fb      	ldr	r3, [r7, #12]
  400766:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_set_pin_mode(pin, mode);
}
  400768:	e006      	b.n	400778 <ioport_set_pin_mode+0x10c>
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  40076a:	68fb      	ldr	r3, [r7, #12]
  40076c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40076e:	69bb      	ldr	r3, [r7, #24]
  400770:	43db      	mvns	r3, r3
  400772:	401a      	ands	r2, r3
  400774:	68fb      	ldr	r3, [r7, #12]
  400776:	675a      	str	r2, [r3, #116]	; 0x74
  400778:	bf00      	nop
  40077a:	3734      	adds	r7, #52	; 0x34
  40077c:	46bd      	mov	sp, r7
  40077e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400782:	4770      	bx	lr
  400784:	00200707 	.word	0x00200707

00400788 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  400788:	b480      	push	{r7}
  40078a:	b08d      	sub	sp, #52	; 0x34
  40078c:	af00      	add	r7, sp, #0
  40078e:	6078      	str	r0, [r7, #4]
  400790:	460b      	mov	r3, r1
  400792:	70fb      	strb	r3, [r7, #3]
  400794:	687b      	ldr	r3, [r7, #4]
  400796:	62fb      	str	r3, [r7, #44]	; 0x2c
  400798:	78fb      	ldrb	r3, [r7, #3]
  40079a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  40079e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4007a0:	627b      	str	r3, [r7, #36]	; 0x24
  4007a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4007a4:	623b      	str	r3, [r7, #32]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  4007a6:	6a3b      	ldr	r3, [r7, #32]
  4007a8:	095b      	lsrs	r3, r3, #5
  4007aa:	61fb      	str	r3, [r7, #28]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4007ac:	69fa      	ldr	r2, [r7, #28]
  4007ae:	4b17      	ldr	r3, [pc, #92]	; (40080c <ioport_set_pin_dir+0x84>)
  4007b0:	4413      	add	r3, r2
  4007b2:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  4007b4:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  4007b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4007ba:	2b01      	cmp	r3, #1
  4007bc:	d109      	bne.n	4007d2 <ioport_set_pin_dir+0x4a>
  4007be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4007c0:	617b      	str	r3, [r7, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4007c2:	697b      	ldr	r3, [r7, #20]
  4007c4:	f003 031f 	and.w	r3, r3, #31
  4007c8:	2201      	movs	r2, #1
  4007ca:	409a      	lsls	r2, r3
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4007cc:	69bb      	ldr	r3, [r7, #24]
  4007ce:	611a      	str	r2, [r3, #16]
  4007d0:	e00c      	b.n	4007ec <ioport_set_pin_dir+0x64>
	} else if (dir == IOPORT_DIR_INPUT) {
  4007d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4007d6:	2b00      	cmp	r3, #0
  4007d8:	d108      	bne.n	4007ec <ioport_set_pin_dir+0x64>
  4007da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4007dc:	613b      	str	r3, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4007de:	693b      	ldr	r3, [r7, #16]
  4007e0:	f003 031f 	and.w	r3, r3, #31
  4007e4:	2201      	movs	r2, #1
  4007e6:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4007e8:	69bb      	ldr	r3, [r7, #24]
  4007ea:	615a      	str	r2, [r3, #20]
  4007ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4007ee:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4007f0:	68fb      	ldr	r3, [r7, #12]
  4007f2:	f003 031f 	and.w	r3, r3, #31
  4007f6:	2201      	movs	r2, #1
  4007f8:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4007fa:	69bb      	ldr	r3, [r7, #24]
  4007fc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  400800:	bf00      	nop
  400802:	3734      	adds	r7, #52	; 0x34
  400804:	46bd      	mov	sp, r7
  400806:	f85d 7b04 	ldr.w	r7, [sp], #4
  40080a:	4770      	bx	lr
  40080c:	00200707 	.word	0x00200707

00400810 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  400810:	b480      	push	{r7}
  400812:	b08b      	sub	sp, #44	; 0x2c
  400814:	af00      	add	r7, sp, #0
  400816:	6078      	str	r0, [r7, #4]
  400818:	460b      	mov	r3, r1
  40081a:	70fb      	strb	r3, [r7, #3]
  40081c:	687b      	ldr	r3, [r7, #4]
  40081e:	627b      	str	r3, [r7, #36]	; 0x24
  400820:	78fb      	ldrb	r3, [r7, #3]
  400822:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  400826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400828:	61fb      	str	r3, [r7, #28]
  40082a:	69fb      	ldr	r3, [r7, #28]
  40082c:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  40082e:	69bb      	ldr	r3, [r7, #24]
  400830:	095b      	lsrs	r3, r3, #5
  400832:	617b      	str	r3, [r7, #20]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400834:	697a      	ldr	r2, [r7, #20]
  400836:	4b10      	ldr	r3, [pc, #64]	; (400878 <ioport_set_pin_level+0x68>)
  400838:	4413      	add	r3, r2
  40083a:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  40083c:	613b      	str	r3, [r7, #16]

	if (level) {
  40083e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  400842:	2b00      	cmp	r3, #0
  400844:	d009      	beq.n	40085a <ioport_set_pin_level+0x4a>
  400846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400848:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40084a:	68fb      	ldr	r3, [r7, #12]
  40084c:	f003 031f 	and.w	r3, r3, #31
  400850:	2201      	movs	r2, #1
  400852:	409a      	lsls	r2, r3
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400854:	693b      	ldr	r3, [r7, #16]
  400856:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
  400858:	e008      	b.n	40086c <ioport_set_pin_level+0x5c>
  40085a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40085c:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40085e:	68bb      	ldr	r3, [r7, #8]
  400860:	f003 031f 	and.w	r3, r3, #31
  400864:	2201      	movs	r2, #1
  400866:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400868:	693b      	ldr	r3, [r7, #16]
  40086a:	635a      	str	r2, [r3, #52]	; 0x34
  40086c:	bf00      	nop
  40086e:	372c      	adds	r7, #44	; 0x2c
  400870:	46bd      	mov	sp, r7
  400872:	f85d 7b04 	ldr.w	r7, [sp], #4
  400876:	4770      	bx	lr
  400878:	00200707 	.word	0x00200707

0040087c <ioport_set_pin_sense_mode>:
 * \param pin IOPORT pin to configure
 * \param pin_sense Edge to sense for the pin (\ref ioport_sense)
 */
static inline void ioport_set_pin_sense_mode(ioport_pin_t pin,
		enum ioport_sense pin_sense)
{
  40087c:	b480      	push	{r7}
  40087e:	b08d      	sub	sp, #52	; 0x34
  400880:	af00      	add	r7, sp, #0
  400882:	6078      	str	r0, [r7, #4]
  400884:	460b      	mov	r3, r1
  400886:	70fb      	strb	r3, [r7, #3]
  400888:	687b      	ldr	r3, [r7, #4]
  40088a:	62fb      	str	r3, [r7, #44]	; 0x2c
  40088c:	78fb      	ldrb	r3, [r7, #3]
  40088e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  400892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400894:	627b      	str	r3, [r7, #36]	; 0x24
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  400896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400898:	095a      	lsrs	r2, r3, #5
  40089a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40089c:	623b      	str	r3, [r7, #32]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40089e:	6a3b      	ldr	r3, [r7, #32]
  4008a0:	f003 031f 	and.w	r3, r3, #31
  4008a4:	2101      	movs	r1, #1
  4008a6:	fa01 f303 	lsl.w	r3, r1, r3
  4008aa:	61fa      	str	r2, [r7, #28]
  4008ac:	61bb      	str	r3, [r7, #24]
  4008ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4008b2:	75fb      	strb	r3, [r7, #23]
  4008b4:	69fb      	ldr	r3, [r7, #28]
  4008b6:	613b      	str	r3, [r7, #16]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4008b8:	693a      	ldr	r2, [r7, #16]
  4008ba:	4b23      	ldr	r3, [pc, #140]	; (400948 <ioport_set_pin_sense_mode+0xcc>)
  4008bc:	4413      	add	r3, r2
  4008be:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_sense_mode(ioport_port_t port,
		ioport_port_mask_t mask, enum ioport_sense pin_sense)
{
	Pio *base = arch_ioport_port_to_base(port);
  4008c0:	60fb      	str	r3, [r7, #12]
	 *       1       0         0    IOPORT_SENSE_FALLING
	 *       1       0         1    IOPORT_SENSE_RISING
	 *       1       1         0    IOPORT_SENSE_LEVEL_LOW
	 *       1       1         1    IOPORT_SENSE_LEVEL_HIGH
	 */
	switch(pin_sense) {
  4008c2:	7dfb      	ldrb	r3, [r7, #23]
  4008c4:	3b01      	subs	r3, #1
  4008c6:	2b03      	cmp	r3, #3
  4008c8:	d82e      	bhi.n	400928 <ioport_set_pin_sense_mode+0xac>
  4008ca:	a201      	add	r2, pc, #4	; (adr r2, 4008d0 <ioport_set_pin_sense_mode+0x54>)
  4008cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4008d0:	00400905 	.word	0x00400905
  4008d4:	00400917 	.word	0x00400917
  4008d8:	004008e1 	.word	0x004008e1
  4008dc:	004008f3 	.word	0x004008f3
	case IOPORT_SENSE_LEVEL_LOW:
		base->PIO_LSR = mask;
  4008e0:	68fb      	ldr	r3, [r7, #12]
  4008e2:	69ba      	ldr	r2, [r7, #24]
  4008e4:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_FELLSR = mask;
  4008e8:	68fb      	ldr	r3, [r7, #12]
  4008ea:	69ba      	ldr	r2, [r7, #24]
  4008ec:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  4008f0:	e01f      	b.n	400932 <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_LEVEL_HIGH:
		base->PIO_LSR = mask;
  4008f2:	68fb      	ldr	r3, [r7, #12]
  4008f4:	69ba      	ldr	r2, [r7, #24]
  4008f6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_REHLSR = mask;
  4008fa:	68fb      	ldr	r3, [r7, #12]
  4008fc:	69ba      	ldr	r2, [r7, #24]
  4008fe:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  400902:	e016      	b.n	400932 <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
  400904:	68fb      	ldr	r3, [r7, #12]
  400906:	69ba      	ldr	r2, [r7, #24]
  400908:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_FELLSR = mask;
  40090c:	68fb      	ldr	r3, [r7, #12]
  40090e:	69ba      	ldr	r2, [r7, #24]
  400910:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  400914:	e00d      	b.n	400932 <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400916:	68fb      	ldr	r3, [r7, #12]
  400918:	69ba      	ldr	r2, [r7, #24]
  40091a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  40091e:	68fb      	ldr	r3, [r7, #12]
  400920:	69ba      	ldr	r2, [r7, #24]
  400922:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  400926:	e004      	b.n	400932 <ioport_set_pin_sense_mode+0xb6>
		break;
	default:
		base->PIO_AIMDR = mask;
  400928:	68fb      	ldr	r3, [r7, #12]
  40092a:	69ba      	ldr	r2, [r7, #24]
  40092c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	arch_ioport_set_pin_sense_mode(pin, pin_sense);
}
  400930:	e003      	b.n	40093a <ioport_set_pin_sense_mode+0xbe>
		return;
	}
	base->PIO_AIMER = mask;
  400932:	68fb      	ldr	r3, [r7, #12]
  400934:	69ba      	ldr	r2, [r7, #24]
  400936:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  40093a:	bf00      	nop
  40093c:	3734      	adds	r7, #52	; 0x34
  40093e:	46bd      	mov	sp, r7
  400940:	f85d 7b04 	ldr.w	r7, [sp], #4
  400944:	4770      	bx	lr
  400946:	bf00      	nop
  400948:	00200707 	.word	0x00200707

0040094c <tcm_disable>:
/** \brief  TCM memory Disable

	The function enables TCM memories
 */
static inline void tcm_disable(void) 
{
  40094c:	b480      	push	{r7}
  40094e:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  400950:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  400954:	f3bf 8f6f 	isb	sy

	__DSB();
	__ISB();
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400958:	4a0c      	ldr	r2, [pc, #48]	; (40098c <tcm_disable+0x40>)
  40095a:	4b0c      	ldr	r3, [pc, #48]	; (40098c <tcm_disable+0x40>)
  40095c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
  400960:	f023 0301 	bic.w	r3, r3, #1
  400964:	f8c2 3290 	str.w	r3, [r2, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400968:	4a08      	ldr	r2, [pc, #32]	; (40098c <tcm_disable+0x40>)
  40096a:	4b08      	ldr	r3, [pc, #32]	; (40098c <tcm_disable+0x40>)
  40096c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
  400970:	f023 0301 	bic.w	r3, r3, #1
  400974:	f8c2 3294 	str.w	r3, [r2, #660]	; 0x294
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  400978:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  40097c:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
}
  400980:	bf00      	nop
  400982:	46bd      	mov	sp, r7
  400984:	f85d 7b04 	ldr.w	r7, [sp], #4
  400988:	4770      	bx	lr
  40098a:	bf00      	nop
  40098c:	e000ed00 	.word	0xe000ed00

00400990 <board_init>:
#endif

void board_init(void)
{
  400990:	b580      	push	{r7, lr}
  400992:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400994:	4b1c      	ldr	r3, [pc, #112]	; (400a08 <board_init+0x78>)
  400996:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40099a:	605a      	str	r2, [r3, #4]
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  40099c:	4b1b      	ldr	r3, [pc, #108]	; (400a0c <board_init+0x7c>)
  40099e:	4a1c      	ldr	r2, [pc, #112]	; (400a10 <board_init+0x80>)
  4009a0:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4009a2:	4b1a      	ldr	r3, [pc, #104]	; (400a0c <board_init+0x7c>)
  4009a4:	4a1b      	ldr	r2, [pc, #108]	; (400a14 <board_init+0x84>)
  4009a6:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(7));
	
	tcm_disable();
  4009a8:	4b1b      	ldr	r3, [pc, #108]	; (400a18 <board_init+0x88>)
  4009aa:	4798      	blx	r3
#endif

	/* Initialize IOPORTs */
	ioport_init();
  4009ac:	4b1b      	ldr	r3, [pc, #108]	; (400a1c <board_init+0x8c>)
  4009ae:	4798      	blx	r3

	/* Configure the pins connected to LED as output and set their
	 * default initial state to high (LED off).
	 */
	ioport_set_pin_dir(LED0_GPIO, IOPORT_DIR_OUTPUT);
  4009b0:	2101      	movs	r1, #1
  4009b2:	2048      	movs	r0, #72	; 0x48
  4009b4:	4b1a      	ldr	r3, [pc, #104]	; (400a20 <board_init+0x90>)
  4009b6:	4798      	blx	r3
	ioport_set_pin_level(LED0_GPIO, LED0_INACTIVE_LEVEL);
  4009b8:	2101      	movs	r1, #1
  4009ba:	2048      	movs	r0, #72	; 0x48
  4009bc:	4b19      	ldr	r3, [pc, #100]	; (400a24 <board_init+0x94>)
  4009be:	4798      	blx	r3

	/* Configure Push Button pins */
	ioport_set_pin_input_mode(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS,
  4009c0:	2100      	movs	r1, #0
  4009c2:	200b      	movs	r0, #11
  4009c4:	4b16      	ldr	r3, [pc, #88]	; (400a20 <board_init+0x90>)
  4009c6:	4798      	blx	r3
  4009c8:	2188      	movs	r1, #136	; 0x88
  4009ca:	200b      	movs	r0, #11
  4009cc:	4b16      	ldr	r3, [pc, #88]	; (400a28 <board_init+0x98>)
  4009ce:	4798      	blx	r3
  4009d0:	2102      	movs	r1, #2
  4009d2:	200b      	movs	r0, #11
  4009d4:	4b15      	ldr	r3, [pc, #84]	; (400a2c <board_init+0x9c>)
  4009d6:	4798      	blx	r3
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
  4009d8:	2100      	movs	r1, #0
  4009da:	2015      	movs	r0, #21
  4009dc:	4b12      	ldr	r3, [pc, #72]	; (400a28 <board_init+0x98>)
  4009de:	4798      	blx	r3
  4009e0:	2015      	movs	r0, #21
  4009e2:	4b13      	ldr	r3, [pc, #76]	; (400a30 <board_init+0xa0>)
  4009e4:	4798      	blx	r3
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  4009e6:	4a13      	ldr	r2, [pc, #76]	; (400a34 <board_init+0xa4>)
  4009e8:	4b12      	ldr	r3, [pc, #72]	; (400a34 <board_init+0xa4>)
  4009ea:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
  4009ee:	f043 0310 	orr.w	r3, r3, #16
  4009f2:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
	ioport_set_pin_peripheral_mode(USART1_TXD_GPIO, USART1_TXD_FLAGS);
  4009f6:	2103      	movs	r1, #3
  4009f8:	2024      	movs	r0, #36	; 0x24
  4009fa:	4b0b      	ldr	r3, [pc, #44]	; (400a28 <board_init+0x98>)
  4009fc:	4798      	blx	r3
  4009fe:	2024      	movs	r0, #36	; 0x24
  400a00:	4b0b      	ldr	r3, [pc, #44]	; (400a30 <board_init+0xa0>)
  400a02:	4798      	blx	r3
	pio_configure_pin(LCD_SPI_CDS_PIO, LCD_SPI_CDS_FLAGS);
	pio_configure_pin(LCD_SPI_BACKLIGHT_PIO, LCD_SPI_BACKLIGHT_FLAGS);
	pio_set_pin_high(LCD_SPI_BACKLIGHT_PIO);

#endif
}
  400a04:	bf00      	nop
  400a06:	bd80      	pop	{r7, pc}
  400a08:	400e1850 	.word	0x400e1850
  400a0c:	400e0c00 	.word	0x400e0c00
  400a10:	5a00080c 	.word	0x5a00080c
  400a14:	5a00070c 	.word	0x5a00070c
  400a18:	0040094d 	.word	0x0040094d
  400a1c:	004005f5 	.word	0x004005f5
  400a20:	00400789 	.word	0x00400789
  400a24:	00400811 	.word	0x00400811
  400a28:	0040066d 	.word	0x0040066d
  400a2c:	0040087d 	.word	0x0040087d
  400a30:	00400621 	.word	0x00400621
  400a34:	40088000 	.word	0x40088000

00400a38 <gmac_enable_receive>:
 *
 * \param p_gmac   Pointer to the GMAC instance.
 * \param uc_enable   0 to disable GMAC receiver, else to enable it.
 */
static inline void gmac_enable_receive(Gmac* p_gmac, uint8_t uc_enable)
{
  400a38:	b480      	push	{r7}
  400a3a:	b083      	sub	sp, #12
  400a3c:	af00      	add	r7, sp, #0
  400a3e:	6078      	str	r0, [r7, #4]
  400a40:	460b      	mov	r3, r1
  400a42:	70fb      	strb	r3, [r7, #3]
	if (uc_enable) {
  400a44:	78fb      	ldrb	r3, [r7, #3]
  400a46:	2b00      	cmp	r3, #0
  400a48:	d006      	beq.n	400a58 <gmac_enable_receive+0x20>
		p_gmac->GMAC_NCR |= GMAC_NCR_RXEN;
  400a4a:	687b      	ldr	r3, [r7, #4]
  400a4c:	681b      	ldr	r3, [r3, #0]
  400a4e:	f043 0204 	orr.w	r2, r3, #4
  400a52:	687b      	ldr	r3, [r7, #4]
  400a54:	601a      	str	r2, [r3, #0]
	} else {
		p_gmac->GMAC_NCR &= ~GMAC_NCR_RXEN;
	}
}
  400a56:	e005      	b.n	400a64 <gmac_enable_receive+0x2c>
static inline void gmac_enable_receive(Gmac* p_gmac, uint8_t uc_enable)
{
	if (uc_enable) {
		p_gmac->GMAC_NCR |= GMAC_NCR_RXEN;
	} else {
		p_gmac->GMAC_NCR &= ~GMAC_NCR_RXEN;
  400a58:	687b      	ldr	r3, [r7, #4]
  400a5a:	681b      	ldr	r3, [r3, #0]
  400a5c:	f023 0204 	bic.w	r2, r3, #4
  400a60:	687b      	ldr	r3, [r7, #4]
  400a62:	601a      	str	r2, [r3, #0]
	}
}
  400a64:	bf00      	nop
  400a66:	370c      	adds	r7, #12
  400a68:	46bd      	mov	sp, r7
  400a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
  400a6e:	4770      	bx	lr

00400a70 <gmac_enable_transmit>:
 *
 * \param p_gmac   Pointer to the GMAC instance.
 * \param uc_enable   0 to disable GMAC transmit, else to enable it.
 */
static inline void gmac_enable_transmit(Gmac* p_gmac, uint8_t uc_enable)
{
  400a70:	b480      	push	{r7}
  400a72:	b083      	sub	sp, #12
  400a74:	af00      	add	r7, sp, #0
  400a76:	6078      	str	r0, [r7, #4]
  400a78:	460b      	mov	r3, r1
  400a7a:	70fb      	strb	r3, [r7, #3]
	if (uc_enable) {
  400a7c:	78fb      	ldrb	r3, [r7, #3]
  400a7e:	2b00      	cmp	r3, #0
  400a80:	d006      	beq.n	400a90 <gmac_enable_transmit+0x20>
		p_gmac->GMAC_NCR |= GMAC_NCR_TXEN;
  400a82:	687b      	ldr	r3, [r7, #4]
  400a84:	681b      	ldr	r3, [r3, #0]
  400a86:	f043 0208 	orr.w	r2, r3, #8
  400a8a:	687b      	ldr	r3, [r7, #4]
  400a8c:	601a      	str	r2, [r3, #0]
	} else {
		p_gmac->GMAC_NCR &= ~GMAC_NCR_TXEN;
	}
}
  400a8e:	e005      	b.n	400a9c <gmac_enable_transmit+0x2c>
static inline void gmac_enable_transmit(Gmac* p_gmac, uint8_t uc_enable)
{
	if (uc_enable) {
		p_gmac->GMAC_NCR |= GMAC_NCR_TXEN;
	} else {
		p_gmac->GMAC_NCR &= ~GMAC_NCR_TXEN;
  400a90:	687b      	ldr	r3, [r7, #4]
  400a92:	681b      	ldr	r3, [r3, #0]
  400a94:	f023 0208 	bic.w	r2, r3, #8
  400a98:	687b      	ldr	r3, [r7, #4]
  400a9a:	601a      	str	r2, [r3, #0]
	}
}
  400a9c:	bf00      	nop
  400a9e:	370c      	adds	r7, #12
  400aa0:	46bd      	mov	sp, r7
  400aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
  400aa6:	4770      	bx	lr

00400aa8 <gmac_enable_management>:
 *
 * \param p_gmac   Pointer to the GMAC instance.
 * \param uc_enable   0 to disable GMAC management, else to enable it.
 */
static inline void gmac_enable_management(Gmac* p_gmac, uint8_t uc_enable)
{
  400aa8:	b480      	push	{r7}
  400aaa:	b083      	sub	sp, #12
  400aac:	af00      	add	r7, sp, #0
  400aae:	6078      	str	r0, [r7, #4]
  400ab0:	460b      	mov	r3, r1
  400ab2:	70fb      	strb	r3, [r7, #3]
	if (uc_enable) {
  400ab4:	78fb      	ldrb	r3, [r7, #3]
  400ab6:	2b00      	cmp	r3, #0
  400ab8:	d006      	beq.n	400ac8 <gmac_enable_management+0x20>
		p_gmac->GMAC_NCR |= GMAC_NCR_MPE;
  400aba:	687b      	ldr	r3, [r7, #4]
  400abc:	681b      	ldr	r3, [r3, #0]
  400abe:	f043 0210 	orr.w	r2, r3, #16
  400ac2:	687b      	ldr	r3, [r7, #4]
  400ac4:	601a      	str	r2, [r3, #0]
	} else {
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
	}
}
  400ac6:	e005      	b.n	400ad4 <gmac_enable_management+0x2c>
static inline void gmac_enable_management(Gmac* p_gmac, uint8_t uc_enable)
{
	if (uc_enable) {
		p_gmac->GMAC_NCR |= GMAC_NCR_MPE;
	} else {
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
  400ac8:	687b      	ldr	r3, [r7, #4]
  400aca:	681b      	ldr	r3, [r3, #0]
  400acc:	f023 0210 	bic.w	r2, r3, #16
  400ad0:	687b      	ldr	r3, [r7, #4]
  400ad2:	601a      	str	r2, [r3, #0]
	}
}
  400ad4:	bf00      	nop
  400ad6:	370c      	adds	r7, #12
  400ad8:	46bd      	mov	sp, r7
  400ada:	f85d 7b04 	ldr.w	r7, [sp], #4
  400ade:	4770      	bx	lr

00400ae0 <gmac_set_speed>:
 *
 * \param p_gmac   Pointer to the GMAC instance.
 * \param uc_speed 1 to indicate 100Mbps, 0 to 10Mbps.
 */
static inline void gmac_set_speed(Gmac* p_gmac, uint8_t uc_speed)
{
  400ae0:	b480      	push	{r7}
  400ae2:	b083      	sub	sp, #12
  400ae4:	af00      	add	r7, sp, #0
  400ae6:	6078      	str	r0, [r7, #4]
  400ae8:	460b      	mov	r3, r1
  400aea:	70fb      	strb	r3, [r7, #3]
	if (uc_speed) {
  400aec:	78fb      	ldrb	r3, [r7, #3]
  400aee:	2b00      	cmp	r3, #0
  400af0:	d006      	beq.n	400b00 <gmac_set_speed+0x20>
		p_gmac->GMAC_NCFGR |= GMAC_NCFGR_SPD;
  400af2:	687b      	ldr	r3, [r7, #4]
  400af4:	685b      	ldr	r3, [r3, #4]
  400af6:	f043 0201 	orr.w	r2, r3, #1
  400afa:	687b      	ldr	r3, [r7, #4]
  400afc:	605a      	str	r2, [r3, #4]
	} else {
		p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_SPD;
	}
}
  400afe:	e005      	b.n	400b0c <gmac_set_speed+0x2c>
static inline void gmac_set_speed(Gmac* p_gmac, uint8_t uc_speed)
{
	if (uc_speed) {
		p_gmac->GMAC_NCFGR |= GMAC_NCFGR_SPD;
	} else {
		p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_SPD;
  400b00:	687b      	ldr	r3, [r7, #4]
  400b02:	685b      	ldr	r3, [r3, #4]
  400b04:	f023 0201 	bic.w	r2, r3, #1
  400b08:	687b      	ldr	r3, [r7, #4]
  400b0a:	605a      	str	r2, [r3, #4]
	}
}
  400b0c:	bf00      	nop
  400b0e:	370c      	adds	r7, #12
  400b10:	46bd      	mov	sp, r7
  400b12:	f85d 7b04 	ldr.w	r7, [sp], #4
  400b16:	4770      	bx	lr

00400b18 <gmac_enable_full_duplex>:
 *
 * \param p_gmac   Pointer to the GMAC instance.
 * \param uc_enable   0 to disable the Full-Duplex mode, else to enable it.
 */
static inline void gmac_enable_full_duplex(Gmac* p_gmac, uint8_t uc_enable)
{
  400b18:	b480      	push	{r7}
  400b1a:	b083      	sub	sp, #12
  400b1c:	af00      	add	r7, sp, #0
  400b1e:	6078      	str	r0, [r7, #4]
  400b20:	460b      	mov	r3, r1
  400b22:	70fb      	strb	r3, [r7, #3]
	if (uc_enable) {
  400b24:	78fb      	ldrb	r3, [r7, #3]
  400b26:	2b00      	cmp	r3, #0
  400b28:	d006      	beq.n	400b38 <gmac_enable_full_duplex+0x20>
		p_gmac->GMAC_NCFGR |= GMAC_NCFGR_FD;
  400b2a:	687b      	ldr	r3, [r7, #4]
  400b2c:	685b      	ldr	r3, [r3, #4]
  400b2e:	f043 0202 	orr.w	r2, r3, #2
  400b32:	687b      	ldr	r3, [r7, #4]
  400b34:	605a      	str	r2, [r3, #4]
	} else {
		p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_FD;
	}
}
  400b36:	e005      	b.n	400b44 <gmac_enable_full_duplex+0x2c>
static inline void gmac_enable_full_duplex(Gmac* p_gmac, uint8_t uc_enable)
{
	if (uc_enable) {
		p_gmac->GMAC_NCFGR |= GMAC_NCFGR_FD;
	} else {
		p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_FD;
  400b38:	687b      	ldr	r3, [r7, #4]
  400b3a:	685b      	ldr	r3, [r3, #4]
  400b3c:	f023 0202 	bic.w	r2, r3, #2
  400b40:	687b      	ldr	r3, [r7, #4]
  400b42:	605a      	str	r2, [r3, #4]
	}
}
  400b44:	bf00      	nop
  400b46:	370c      	adds	r7, #12
  400b48:	46bd      	mov	sp, r7
  400b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
  400b4e:	4770      	bx	lr

00400b50 <gmac_set_mdc_clock>:
 * \param ul_mck   GMAC MCK.
 *
 * \return GMAC_OK if successfully.
 */
static inline uint8_t gmac_set_mdc_clock(Gmac* p_gmac, uint32_t ul_mck)
{
  400b50:	b480      	push	{r7}
  400b52:	b085      	sub	sp, #20
  400b54:	af00      	add	r7, sp, #0
  400b56:	6078      	str	r0, [r7, #4]
  400b58:	6039      	str	r1, [r7, #0]
	uint32_t ul_clk;

	if (ul_mck > GMAC_MCK_SPEED_240MHZ) {
  400b5a:	683b      	ldr	r3, [r7, #0]
  400b5c:	4a20      	ldr	r2, [pc, #128]	; (400be0 <gmac_set_mdc_clock+0x90>)
  400b5e:	4293      	cmp	r3, r2
  400b60:	d901      	bls.n	400b66 <gmac_set_mdc_clock+0x16>
		return GMAC_INVALID;
  400b62:	23ff      	movs	r3, #255	; 0xff
  400b64:	e036      	b.n	400bd4 <gmac_set_mdc_clock+0x84>
	} else if (ul_mck > GMAC_MCK_SPEED_160MHZ) {
  400b66:	683b      	ldr	r3, [r7, #0]
  400b68:	4a1e      	ldr	r2, [pc, #120]	; (400be4 <gmac_set_mdc_clock+0x94>)
  400b6a:	4293      	cmp	r3, r2
  400b6c:	d903      	bls.n	400b76 <gmac_set_mdc_clock+0x26>
		ul_clk = GMAC_NCFGR_CLK_MCK_96;
  400b6e:	f44f 13a0 	mov.w	r3, #1310720	; 0x140000
  400b72:	60fb      	str	r3, [r7, #12]
  400b74:	e021      	b.n	400bba <gmac_set_mdc_clock+0x6a>
	} else if (ul_mck > GMAC_MCK_SPEED_120MHZ) {
  400b76:	683b      	ldr	r3, [r7, #0]
  400b78:	4a1b      	ldr	r2, [pc, #108]	; (400be8 <gmac_set_mdc_clock+0x98>)
  400b7a:	4293      	cmp	r3, r2
  400b7c:	d903      	bls.n	400b86 <gmac_set_mdc_clock+0x36>
		ul_clk = GMAC_NCFGR_CLK_MCK_64;
  400b7e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  400b82:	60fb      	str	r3, [r7, #12]
  400b84:	e019      	b.n	400bba <gmac_set_mdc_clock+0x6a>
	} else if (ul_mck > GMAC_MCK_SPEED_80MHZ) {
  400b86:	683b      	ldr	r3, [r7, #0]
  400b88:	4a18      	ldr	r2, [pc, #96]	; (400bec <gmac_set_mdc_clock+0x9c>)
  400b8a:	4293      	cmp	r3, r2
  400b8c:	d903      	bls.n	400b96 <gmac_set_mdc_clock+0x46>
		ul_clk = GMAC_NCFGR_CLK_MCK_48;
  400b8e:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
  400b92:	60fb      	str	r3, [r7, #12]
  400b94:	e011      	b.n	400bba <gmac_set_mdc_clock+0x6a>
	} else if (ul_mck > GMAC_MCK_SPEED_40MHZ) {
  400b96:	683b      	ldr	r3, [r7, #0]
  400b98:	4a15      	ldr	r2, [pc, #84]	; (400bf0 <gmac_set_mdc_clock+0xa0>)
  400b9a:	4293      	cmp	r3, r2
  400b9c:	d903      	bls.n	400ba6 <gmac_set_mdc_clock+0x56>
		ul_clk = GMAC_NCFGR_CLK_MCK_32;
  400b9e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  400ba2:	60fb      	str	r3, [r7, #12]
  400ba4:	e009      	b.n	400bba <gmac_set_mdc_clock+0x6a>
	} else if (ul_mck > GMAC_MCK_SPEED_20MHZ) {
  400ba6:	683b      	ldr	r3, [r7, #0]
  400ba8:	4a12      	ldr	r2, [pc, #72]	; (400bf4 <gmac_set_mdc_clock+0xa4>)
  400baa:	4293      	cmp	r3, r2
  400bac:	d903      	bls.n	400bb6 <gmac_set_mdc_clock+0x66>
		ul_clk = GMAC_NCFGR_CLK_MCK_16;
  400bae:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  400bb2:	60fb      	str	r3, [r7, #12]
  400bb4:	e001      	b.n	400bba <gmac_set_mdc_clock+0x6a>
	} else {
		ul_clk = GMAC_NCFGR_CLK_MCK_8;
  400bb6:	2300      	movs	r3, #0
  400bb8:	60fb      	str	r3, [r7, #12]
	}
	p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_CLK_Msk;
  400bba:	687b      	ldr	r3, [r7, #4]
  400bbc:	685b      	ldr	r3, [r3, #4]
  400bbe:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
  400bc2:	687b      	ldr	r3, [r7, #4]
  400bc4:	605a      	str	r2, [r3, #4]
	p_gmac->GMAC_NCFGR |= ul_clk;
  400bc6:	687b      	ldr	r3, [r7, #4]
  400bc8:	685a      	ldr	r2, [r3, #4]
  400bca:	68fb      	ldr	r3, [r7, #12]
  400bcc:	431a      	orrs	r2, r3
  400bce:	687b      	ldr	r3, [r7, #4]
  400bd0:	605a      	str	r2, [r3, #4]
	return GMAC_OK;
  400bd2:	2300      	movs	r3, #0
}
  400bd4:	4618      	mov	r0, r3
  400bd6:	3714      	adds	r7, #20
  400bd8:	46bd      	mov	sp, r7
  400bda:	f85d 7b04 	ldr.w	r7, [sp], #4
  400bde:	4770      	bx	lr
  400be0:	0e4e1c00 	.word	0x0e4e1c00
  400be4:	09896800 	.word	0x09896800
  400be8:	07270e00 	.word	0x07270e00
  400bec:	04c4b400 	.word	0x04c4b400
  400bf0:	02625a00 	.word	0x02625a00
  400bf4:	01312d00 	.word	0x01312d00

00400bf8 <gmac_select_mii_mode>:
		break;
	}
}
#else
static inline void gmac_select_mii_mode(Gmac* p_gmac, gmac_mii_mode_t mode)
{
  400bf8:	b480      	push	{r7}
  400bfa:	b083      	sub	sp, #12
  400bfc:	af00      	add	r7, sp, #0
  400bfe:	6078      	str	r0, [r7, #4]
  400c00:	460b      	mov	r3, r1
  400c02:	70fb      	strb	r3, [r7, #3]
	switch (mode) {
  400c04:	78fb      	ldrb	r3, [r7, #3]
  400c06:	2b00      	cmp	r3, #0
  400c08:	d106      	bne.n	400c18 <gmac_select_mii_mode+0x20>
		case GMAC_PHY_MII:
			p_gmac->GMAC_UR |= GMAC_UR_RMII;
  400c0a:	687b      	ldr	r3, [r7, #4]
  400c0c:	68db      	ldr	r3, [r3, #12]
  400c0e:	f043 0201 	orr.w	r2, r3, #1
  400c12:	687b      	ldr	r3, [r7, #4]
  400c14:	60da      	str	r2, [r3, #12]
			break;
  400c16:	e006      	b.n	400c26 <gmac_select_mii_mode+0x2e>

		case GMAC_PHY_RMII:
		default:
			p_gmac->GMAC_UR &= ~GMAC_UR_RMII;
  400c18:	687b      	ldr	r3, [r7, #4]
  400c1a:	68db      	ldr	r3, [r3, #12]
  400c1c:	f023 0201 	bic.w	r2, r3, #1
  400c20:	687b      	ldr	r3, [r7, #4]
  400c22:	60da      	str	r2, [r3, #12]
			break;
  400c24:	bf00      	nop
	}
}
  400c26:	bf00      	nop
  400c28:	370c      	adds	r7, #12
  400c2a:	46bd      	mov	sp, r7
  400c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c30:	4770      	bx	lr
  400c32:	bf00      	nop

00400c34 <ethernet_phy_find_valid>:
 *
 * \return 0xFF when no valid PHY address is found.
 */
static uint8_t ethernet_phy_find_valid(Gmac *p_gmac, uint8_t uc_phy_addr,
		uint8_t uc_start_addr)
{
  400c34:	b590      	push	{r4, r7, lr}
  400c36:	b085      	sub	sp, #20
  400c38:	af00      	add	r7, sp, #0
  400c3a:	6078      	str	r0, [r7, #4]
  400c3c:	460b      	mov	r3, r1
  400c3e:	70fb      	strb	r3, [r7, #3]
  400c40:	4613      	mov	r3, r2
  400c42:	70bb      	strb	r3, [r7, #2]
	uint32_t ul_value = 0;
  400c44:	2300      	movs	r3, #0
  400c46:	60bb      	str	r3, [r7, #8]
	uint8_t uc_rc = 0;
  400c48:	2300      	movs	r3, #0
  400c4a:	73fb      	strb	r3, [r7, #15]
	uint8_t uc_cnt;
	uint8_t uc_phy_address = uc_phy_addr;
  400c4c:	78fb      	ldrb	r3, [r7, #3]
  400c4e:	737b      	strb	r3, [r7, #13]

	gmac_enable_management(p_gmac, true);
  400c50:	2101      	movs	r1, #1
  400c52:	6878      	ldr	r0, [r7, #4]
  400c54:	4b1f      	ldr	r3, [pc, #124]	; (400cd4 <ethernet_phy_find_valid+0xa0>)
  400c56:	4798      	blx	r3
    uc_rc = uc_phy_address;
  400c58:	7b7b      	ldrb	r3, [r7, #13]
  400c5a:	73fb      	strb	r3, [r7, #15]
	/* Check the current PHY address */
	gmac_phy_read(p_gmac, uc_phy_addr, GMII_PHYID1, &ul_value);
  400c5c:	f107 0308 	add.w	r3, r7, #8
  400c60:	78f9      	ldrb	r1, [r7, #3]
  400c62:	2202      	movs	r2, #2
  400c64:	6878      	ldr	r0, [r7, #4]
  400c66:	4c1c      	ldr	r4, [pc, #112]	; (400cd8 <ethernet_phy_find_valid+0xa4>)
  400c68:	47a0      	blx	r4

	/* Find another one */
	if (ul_value != GMII_OUI_MSB) {
  400c6a:	68bb      	ldr	r3, [r7, #8]
  400c6c:	2b22      	cmp	r3, #34	; 0x22
  400c6e:	d01d      	beq.n	400cac <ethernet_phy_find_valid+0x78>
		uc_rc = 0xFF;
  400c70:	23ff      	movs	r3, #255	; 0xff
  400c72:	73fb      	strb	r3, [r7, #15]
		for (uc_cnt = uc_start_addr; uc_cnt <= ETH_PHY_MAX_ADDR; uc_cnt++) {
  400c74:	78bb      	ldrb	r3, [r7, #2]
  400c76:	73bb      	strb	r3, [r7, #14]
  400c78:	e015      	b.n	400ca6 <ethernet_phy_find_valid+0x72>
			uc_phy_address = (uc_phy_address + 1) & 0x1F;
  400c7a:	7b7b      	ldrb	r3, [r7, #13]
  400c7c:	3301      	adds	r3, #1
  400c7e:	b2db      	uxtb	r3, r3
  400c80:	f003 031f 	and.w	r3, r3, #31
  400c84:	737b      	strb	r3, [r7, #13]
			gmac_phy_read(p_gmac, uc_phy_address, GMII_PHYID1, &ul_value);
  400c86:	f107 0308 	add.w	r3, r7, #8
  400c8a:	7b79      	ldrb	r1, [r7, #13]
  400c8c:	2202      	movs	r2, #2
  400c8e:	6878      	ldr	r0, [r7, #4]
  400c90:	4c11      	ldr	r4, [pc, #68]	; (400cd8 <ethernet_phy_find_valid+0xa4>)
  400c92:	47a0      	blx	r4
			if (ul_value == GMII_OUI_MSB) {
  400c94:	68bb      	ldr	r3, [r7, #8]
  400c96:	2b22      	cmp	r3, #34	; 0x22
  400c98:	d102      	bne.n	400ca0 <ethernet_phy_find_valid+0x6c>
				uc_rc = uc_phy_address;
  400c9a:	7b7b      	ldrb	r3, [r7, #13]
  400c9c:	73fb      	strb	r3, [r7, #15]
				break;
  400c9e:	e005      	b.n	400cac <ethernet_phy_find_valid+0x78>
	gmac_phy_read(p_gmac, uc_phy_addr, GMII_PHYID1, &ul_value);

	/* Find another one */
	if (ul_value != GMII_OUI_MSB) {
		uc_rc = 0xFF;
		for (uc_cnt = uc_start_addr; uc_cnt <= ETH_PHY_MAX_ADDR; uc_cnt++) {
  400ca0:	7bbb      	ldrb	r3, [r7, #14]
  400ca2:	3301      	adds	r3, #1
  400ca4:	73bb      	strb	r3, [r7, #14]
  400ca6:	7bbb      	ldrb	r3, [r7, #14]
  400ca8:	2b1f      	cmp	r3, #31
  400caa:	d9e6      	bls.n	400c7a <ethernet_phy_find_valid+0x46>
				break;
			}
		}
	}

	gmac_enable_management(p_gmac, false);
  400cac:	2100      	movs	r1, #0
  400cae:	6878      	ldr	r0, [r7, #4]
  400cb0:	4b08      	ldr	r3, [pc, #32]	; (400cd4 <ethernet_phy_find_valid+0xa0>)
  400cb2:	4798      	blx	r3

	if (uc_rc != 0xFF) {
  400cb4:	7bfb      	ldrb	r3, [r7, #15]
  400cb6:	2bff      	cmp	r3, #255	; 0xff
  400cb8:	d006      	beq.n	400cc8 <ethernet_phy_find_valid+0x94>
		gmac_phy_read(p_gmac, uc_phy_address, GMII_BMSR, &ul_value);
  400cba:	f107 0308 	add.w	r3, r7, #8
  400cbe:	7b79      	ldrb	r1, [r7, #13]
  400cc0:	2201      	movs	r2, #1
  400cc2:	6878      	ldr	r0, [r7, #4]
  400cc4:	4c04      	ldr	r4, [pc, #16]	; (400cd8 <ethernet_phy_find_valid+0xa4>)
  400cc6:	47a0      	blx	r4
	}
	return uc_rc;
  400cc8:	7bfb      	ldrb	r3, [r7, #15]
}
  400cca:	4618      	mov	r0, r3
  400ccc:	3714      	adds	r7, #20
  400cce:	46bd      	mov	sp, r7
  400cd0:	bd90      	pop	{r4, r7, pc}
  400cd2:	bf00      	nop
  400cd4:	00400aa9 	.word	0x00400aa9
  400cd8:	004012b9 	.word	0x004012b9

00400cdc <ethernet_phy_init>:
 * \param ul_mck GMAC MCK.
 *
 * Return GMAC_OK if successfully, GMAC_TIMEOUT if timeout.
 */
uint8_t ethernet_phy_init(Gmac *p_gmac, uint8_t uc_phy_addr, uint32_t mck)
{
  400cdc:	b590      	push	{r4, r7, lr}
  400cde:	b089      	sub	sp, #36	; 0x24
  400ce0:	af02      	add	r7, sp, #8
  400ce2:	60f8      	str	r0, [r7, #12]
  400ce4:	460b      	mov	r3, r1
  400ce6:	607a      	str	r2, [r7, #4]
  400ce8:	72fb      	strb	r3, [r7, #11]
	uint8_t uc_rc;
	uint8_t uc_phy;

	pio_set_output(PIN_GMAC_RESET_PIO, PIN_GMAC_RESET_MASK, 1,  false, true);
  400cea:	2301      	movs	r3, #1
  400cec:	9300      	str	r3, [sp, #0]
  400cee:	2300      	movs	r3, #0
  400cf0:	2201      	movs	r2, #1
  400cf2:	f44f 6180 	mov.w	r1, #1024	; 0x400
  400cf6:	481d      	ldr	r0, [pc, #116]	; (400d6c <ethernet_phy_init+0x90>)
  400cf8:	4c1d      	ldr	r4, [pc, #116]	; (400d70 <ethernet_phy_init+0x94>)
  400cfa:	47a0      	blx	r4
	pio_set_input(PIN_GMAC_INT_PIO, PIN_GMAC_INT_MASK, PIO_PULLUP);
  400cfc:	2201      	movs	r2, #1
  400cfe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  400d02:	481c      	ldr	r0, [pc, #112]	; (400d74 <ethernet_phy_init+0x98>)
  400d04:	4b1c      	ldr	r3, [pc, #112]	; (400d78 <ethernet_phy_init+0x9c>)
  400d06:	4798      	blx	r3
	pio_set_peripheral(PIN_GMAC_PIO, PIN_GMAC_PERIPH, PIN_GMAC_MASK);
  400d08:	f240 32ff 	movw	r2, #1023	; 0x3ff
  400d0c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400d10:	481a      	ldr	r0, [pc, #104]	; (400d7c <ethernet_phy_init+0xa0>)
  400d12:	4b1b      	ldr	r3, [pc, #108]	; (400d80 <ethernet_phy_init+0xa4>)
  400d14:	4798      	blx	r3

	ethernet_phy_reset(GMAC,uc_phy_addr);
  400d16:	7afb      	ldrb	r3, [r7, #11]
  400d18:	4619      	mov	r1, r3
  400d1a:	481a      	ldr	r0, [pc, #104]	; (400d84 <ethernet_phy_init+0xa8>)
  400d1c:	4b1a      	ldr	r3, [pc, #104]	; (400d88 <ethernet_phy_init+0xac>)
  400d1e:	4798      	blx	r3

	/* Configure GMAC runtime clock */
	uc_rc = gmac_set_mdc_clock(p_gmac, mck);
  400d20:	6879      	ldr	r1, [r7, #4]
  400d22:	68f8      	ldr	r0, [r7, #12]
  400d24:	4b19      	ldr	r3, [pc, #100]	; (400d8c <ethernet_phy_init+0xb0>)
  400d26:	4798      	blx	r3
  400d28:	4603      	mov	r3, r0
  400d2a:	75fb      	strb	r3, [r7, #23]
	if (uc_rc != GMAC_OK) {
  400d2c:	7dfb      	ldrb	r3, [r7, #23]
  400d2e:	2b00      	cmp	r3, #0
  400d30:	d001      	beq.n	400d36 <ethernet_phy_init+0x5a>
		return 0;
  400d32:	2300      	movs	r3, #0
  400d34:	e016      	b.n	400d64 <ethernet_phy_init+0x88>
	}

	/* Check PHY Address */
	uc_phy = ethernet_phy_find_valid(p_gmac, uc_phy_addr, 0);
  400d36:	7afb      	ldrb	r3, [r7, #11]
  400d38:	2200      	movs	r2, #0
  400d3a:	4619      	mov	r1, r3
  400d3c:	68f8      	ldr	r0, [r7, #12]
  400d3e:	4b14      	ldr	r3, [pc, #80]	; (400d90 <ethernet_phy_init+0xb4>)
  400d40:	4798      	blx	r3
  400d42:	4603      	mov	r3, r0
  400d44:	75bb      	strb	r3, [r7, #22]
	if (uc_phy == 0xFF) {
  400d46:	7dbb      	ldrb	r3, [r7, #22]
  400d48:	2bff      	cmp	r3, #255	; 0xff
  400d4a:	d101      	bne.n	400d50 <ethernet_phy_init+0x74>
		return 0;
  400d4c:	2300      	movs	r3, #0
  400d4e:	e009      	b.n	400d64 <ethernet_phy_init+0x88>
	}
	if (uc_phy != uc_phy_addr) {
  400d50:	7dba      	ldrb	r2, [r7, #22]
  400d52:	7afb      	ldrb	r3, [r7, #11]
  400d54:	429a      	cmp	r2, r3
  400d56:	d004      	beq.n	400d62 <ethernet_phy_init+0x86>
		ethernet_phy_reset(p_gmac, uc_phy_addr);
  400d58:	7afb      	ldrb	r3, [r7, #11]
  400d5a:	4619      	mov	r1, r3
  400d5c:	68f8      	ldr	r0, [r7, #12]
  400d5e:	4b0a      	ldr	r3, [pc, #40]	; (400d88 <ethernet_phy_init+0xac>)
  400d60:	4798      	blx	r3
	}

	return uc_rc;
  400d62:	7dfb      	ldrb	r3, [r7, #23]
}
  400d64:	4618      	mov	r0, r3
  400d66:	371c      	adds	r7, #28
  400d68:	46bd      	mov	sp, r7
  400d6a:	bd90      	pop	{r4, r7, pc}
  400d6c:	400e1200 	.word	0x400e1200
  400d70:	0040151d 	.word	0x0040151d
  400d74:	400e0e00 	.word	0x400e0e00
  400d78:	0040149d 	.word	0x0040149d
  400d7c:	400e1400 	.word	0x400e1400
  400d80:	0040138d 	.word	0x0040138d
  400d84:	40050000 	.word	0x40050000
  400d88:	00401145 	.word	0x00401145
  400d8c:	00400b51 	.word	0x00400b51
  400d90:	00400c35 	.word	0x00400c35

00400d94 <ethernet_phy_set_link>:
 *
 * Return GMAC_OK if successfully, GMAC_TIMEOUT if timeout.
 */
uint8_t ethernet_phy_set_link(Gmac *p_gmac, uint8_t uc_phy_addr,
		uint8_t uc_apply_setting_flag)
{
  400d94:	b590      	push	{r4, r7, lr}
  400d96:	b087      	sub	sp, #28
  400d98:	af00      	add	r7, sp, #0
  400d9a:	6078      	str	r0, [r7, #4]
  400d9c:	460b      	mov	r3, r1
  400d9e:	70fb      	strb	r3, [r7, #3]
  400da0:	4613      	mov	r3, r2
  400da2:	70bb      	strb	r3, [r7, #2]
	uint32_t ul_stat1;
	uint32_t ul_stat2;
	uint8_t uc_phy_address, uc_speed, uc_fd;
	uint8_t uc_rc;

	gmac_enable_management(p_gmac, true);
  400da4:	2101      	movs	r1, #1
  400da6:	6878      	ldr	r0, [r7, #4]
  400da8:	4b43      	ldr	r3, [pc, #268]	; (400eb8 <ethernet_phy_set_link+0x124>)
  400daa:	4798      	blx	r3

	uc_phy_address = uc_phy_addr;
  400dac:	78fb      	ldrb	r3, [r7, #3]
  400dae:	757b      	strb	r3, [r7, #21]

	uc_rc = gmac_phy_read(p_gmac, uc_phy_address, GMII_BMSR, &ul_stat1);
  400db0:	f107 0310 	add.w	r3, r7, #16
  400db4:	7d79      	ldrb	r1, [r7, #21]
  400db6:	2201      	movs	r2, #1
  400db8:	6878      	ldr	r0, [r7, #4]
  400dba:	4c40      	ldr	r4, [pc, #256]	; (400ebc <ethernet_phy_set_link+0x128>)
  400dbc:	47a0      	blx	r4
  400dbe:	4603      	mov	r3, r0
  400dc0:	753b      	strb	r3, [r7, #20]
	if (uc_rc != GMAC_OK) {
  400dc2:	7d3b      	ldrb	r3, [r7, #20]
  400dc4:	2b00      	cmp	r3, #0
  400dc6:	d005      	beq.n	400dd4 <ethernet_phy_set_link+0x40>
		/* Disable PHY management and start the GMAC transfer */
		gmac_enable_management(p_gmac, false);
  400dc8:	2100      	movs	r1, #0
  400dca:	6878      	ldr	r0, [r7, #4]
  400dcc:	4b3a      	ldr	r3, [pc, #232]	; (400eb8 <ethernet_phy_set_link+0x124>)
  400dce:	4798      	blx	r3

		return uc_rc;
  400dd0:	7d3b      	ldrb	r3, [r7, #20]
  400dd2:	e06c      	b.n	400eae <ethernet_phy_set_link+0x11a>
	}

	if ((ul_stat1 & GMII_LINK_STATUS) == 0) {
  400dd4:	693b      	ldr	r3, [r7, #16]
  400dd6:	f003 0304 	and.w	r3, r3, #4
  400dda:	2b00      	cmp	r3, #0
  400ddc:	d105      	bne.n	400dea <ethernet_phy_set_link+0x56>
		/* Disable PHY management and start the GMAC transfer */
		gmac_enable_management(p_gmac, false);
  400dde:	2100      	movs	r1, #0
  400de0:	6878      	ldr	r0, [r7, #4]
  400de2:	4b35      	ldr	r3, [pc, #212]	; (400eb8 <ethernet_phy_set_link+0x124>)
  400de4:	4798      	blx	r3

		return GMAC_INVALID;
  400de6:	23ff      	movs	r3, #255	; 0xff
  400de8:	e061      	b.n	400eae <ethernet_phy_set_link+0x11a>
	}

	if (uc_apply_setting_flag == 0) {
  400dea:	78bb      	ldrb	r3, [r7, #2]
  400dec:	2b00      	cmp	r3, #0
  400dee:	d105      	bne.n	400dfc <ethernet_phy_set_link+0x68>
		/* Disable PHY management and start the GMAC transfer */
		gmac_enable_management(p_gmac, false);
  400df0:	2100      	movs	r1, #0
  400df2:	6878      	ldr	r0, [r7, #4]
  400df4:	4b30      	ldr	r3, [pc, #192]	; (400eb8 <ethernet_phy_set_link+0x124>)
  400df6:	4798      	blx	r3

		return uc_rc;
  400df8:	7d3b      	ldrb	r3, [r7, #20]
  400dfa:	e058      	b.n	400eae <ethernet_phy_set_link+0x11a>
	}

	/* Read advertisement */
	uc_rc = gmac_phy_read(p_gmac, uc_phy_address, GMII_PCR1, &ul_stat2);
  400dfc:	f107 030c 	add.w	r3, r7, #12
  400e00:	7d79      	ldrb	r1, [r7, #21]
  400e02:	221e      	movs	r2, #30
  400e04:	6878      	ldr	r0, [r7, #4]
  400e06:	4c2d      	ldr	r4, [pc, #180]	; (400ebc <ethernet_phy_set_link+0x128>)
  400e08:	47a0      	blx	r4
  400e0a:	4603      	mov	r3, r0
  400e0c:	753b      	strb	r3, [r7, #20]
	if (uc_rc != GMAC_OK) {
  400e0e:	7d3b      	ldrb	r3, [r7, #20]
  400e10:	2b00      	cmp	r3, #0
  400e12:	d005      	beq.n	400e20 <ethernet_phy_set_link+0x8c>
		/* Disable PHY management and start the GMAC transfer */
		gmac_enable_management(p_gmac, false);
  400e14:	2100      	movs	r1, #0
  400e16:	6878      	ldr	r0, [r7, #4]
  400e18:	4b27      	ldr	r3, [pc, #156]	; (400eb8 <ethernet_phy_set_link+0x124>)
  400e1a:	4798      	blx	r3

		return uc_rc;
  400e1c:	7d3b      	ldrb	r3, [r7, #20]
  400e1e:	e046      	b.n	400eae <ethernet_phy_set_link+0x11a>
	}

	if ((ul_stat1 & GMII_100BASE_TX_FD) && (ul_stat2 & GMII_OMI_100BASE_TX_FD)) {
  400e20:	693b      	ldr	r3, [r7, #16]
  400e22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
  400e26:	2b00      	cmp	r3, #0
  400e28:	d008      	beq.n	400e3c <ethernet_phy_set_link+0xa8>
  400e2a:	68fb      	ldr	r3, [r7, #12]
  400e2c:	f003 0306 	and.w	r3, r3, #6
  400e30:	2b00      	cmp	r3, #0
  400e32:	d003      	beq.n	400e3c <ethernet_phy_set_link+0xa8>
		/* Set GMAC for 100BaseTX and Full Duplex */
		uc_speed = true;
  400e34:	2301      	movs	r3, #1
  400e36:	75fb      	strb	r3, [r7, #23]
		uc_fd = true;
  400e38:	2301      	movs	r3, #1
  400e3a:	75bb      	strb	r3, [r7, #22]
	}

	if ((ul_stat1 & GMII_10BASE_T_FD) && (ul_stat2 & GMII_OMI_10BASE_T_FD)) {
  400e3c:	693b      	ldr	r3, [r7, #16]
  400e3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  400e42:	2b00      	cmp	r3, #0
  400e44:	d008      	beq.n	400e58 <ethernet_phy_set_link+0xc4>
  400e46:	68fb      	ldr	r3, [r7, #12]
  400e48:	f003 0305 	and.w	r3, r3, #5
  400e4c:	2b00      	cmp	r3, #0
  400e4e:	d003      	beq.n	400e58 <ethernet_phy_set_link+0xc4>
		/* Set MII for 10BaseT and Full Duplex */
		uc_speed = false;
  400e50:	2300      	movs	r3, #0
  400e52:	75fb      	strb	r3, [r7, #23]
		uc_fd = true;
  400e54:	2301      	movs	r3, #1
  400e56:	75bb      	strb	r3, [r7, #22]
	}

	if ((ul_stat1 & GMII_100BASE_TX_HD) && (ul_stat2 & GMII_OMI_100BASE_TX_HD)) {
  400e58:	693b      	ldr	r3, [r7, #16]
  400e5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  400e5e:	2b00      	cmp	r3, #0
  400e60:	d008      	beq.n	400e74 <ethernet_phy_set_link+0xe0>
  400e62:	68fb      	ldr	r3, [r7, #12]
  400e64:	f003 0302 	and.w	r3, r3, #2
  400e68:	2b00      	cmp	r3, #0
  400e6a:	d003      	beq.n	400e74 <ethernet_phy_set_link+0xe0>
		/* Set MII for 100BaseTX and Half Duplex */
		uc_speed = true;
  400e6c:	2301      	movs	r3, #1
  400e6e:	75fb      	strb	r3, [r7, #23]
		uc_fd = false;
  400e70:	2300      	movs	r3, #0
  400e72:	75bb      	strb	r3, [r7, #22]
	}

	if ((ul_stat1 & GMII_10BASE_T_HD) && (ul_stat2 & GMII_OMI_10BASE_T_HD)) {
  400e74:	693b      	ldr	r3, [r7, #16]
  400e76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  400e7a:	2b00      	cmp	r3, #0
  400e7c:	d008      	beq.n	400e90 <ethernet_phy_set_link+0xfc>
  400e7e:	68fb      	ldr	r3, [r7, #12]
  400e80:	f003 0301 	and.w	r3, r3, #1
  400e84:	2b00      	cmp	r3, #0
  400e86:	d003      	beq.n	400e90 <ethernet_phy_set_link+0xfc>
		/* Set MII for 10BaseT and Half Duplex */
		uc_speed = false;
  400e88:	2300      	movs	r3, #0
  400e8a:	75fb      	strb	r3, [r7, #23]
		uc_fd = false;
  400e8c:	2300      	movs	r3, #0
  400e8e:	75bb      	strb	r3, [r7, #22]
	}

	gmac_set_speed(p_gmac, uc_speed);
  400e90:	7dfb      	ldrb	r3, [r7, #23]
  400e92:	4619      	mov	r1, r3
  400e94:	6878      	ldr	r0, [r7, #4]
  400e96:	4b0a      	ldr	r3, [pc, #40]	; (400ec0 <ethernet_phy_set_link+0x12c>)
  400e98:	4798      	blx	r3
	gmac_enable_full_duplex(p_gmac, uc_fd);
  400e9a:	7dbb      	ldrb	r3, [r7, #22]
  400e9c:	4619      	mov	r1, r3
  400e9e:	6878      	ldr	r0, [r7, #4]
  400ea0:	4b08      	ldr	r3, [pc, #32]	; (400ec4 <ethernet_phy_set_link+0x130>)
  400ea2:	4798      	blx	r3

	/* Start the GMAC transfers */
	gmac_enable_management(p_gmac, false);
  400ea4:	2100      	movs	r1, #0
  400ea6:	6878      	ldr	r0, [r7, #4]
  400ea8:	4b03      	ldr	r3, [pc, #12]	; (400eb8 <ethernet_phy_set_link+0x124>)
  400eaa:	4798      	blx	r3
	return uc_rc;
  400eac:	7d3b      	ldrb	r3, [r7, #20]
}
  400eae:	4618      	mov	r0, r3
  400eb0:	371c      	adds	r7, #28
  400eb2:	46bd      	mov	sp, r7
  400eb4:	bd90      	pop	{r4, r7, pc}
  400eb6:	bf00      	nop
  400eb8:	00400aa9 	.word	0x00400aa9
  400ebc:	004012b9 	.word	0x004012b9
  400ec0:	00400ae1 	.word	0x00400ae1
  400ec4:	00400b19 	.word	0x00400b19

00400ec8 <ethernet_phy_auto_negotiate>:
 * \param uc_phy_addr PHY address.
 *
 * Return GMAC_OK if successfully, GMAC_TIMEOUT if timeout.
 */
uint8_t ethernet_phy_auto_negotiate(Gmac *p_gmac, uint8_t uc_phy_addr)
{
  400ec8:	b590      	push	{r4, r7, lr}
  400eca:	b08b      	sub	sp, #44	; 0x2c
  400ecc:	af00      	add	r7, sp, #0
  400ece:	6078      	str	r0, [r7, #4]
  400ed0:	460b      	mov	r3, r1
  400ed2:	70fb      	strb	r3, [r7, #3]
	uint32_t ul_retry_max = ETH_PHY_RETRY_MAX;
  400ed4:	4b91      	ldr	r3, [pc, #580]	; (40111c <ethernet_phy_auto_negotiate+0x254>)
  400ed6:	61fb      	str	r3, [r7, #28]
	uint32_t ul_value;
	uint32_t ul_phy_anar;
	uint32_t ul_phy_analpar;
	uint32_t ul_retry_count = 0;
  400ed8:	2300      	movs	r3, #0
  400eda:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t uc_speed = 0;
  400edc:	2300      	movs	r3, #0
  400ede:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t uc_fd=0;
  400ee2:	2300      	movs	r3, #0
  400ee4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	uint8_t uc_rc;

	gmac_enable_management(p_gmac, true);
  400ee8:	2101      	movs	r1, #1
  400eea:	6878      	ldr	r0, [r7, #4]
  400eec:	4b8c      	ldr	r3, [pc, #560]	; (401120 <ethernet_phy_auto_negotiate+0x258>)
  400eee:	4798      	blx	r3

	/* Set up control register */
	uc_rc = gmac_phy_read(p_gmac, uc_phy_addr, GMII_BMCR, &ul_value);
  400ef0:	f107 0310 	add.w	r3, r7, #16
  400ef4:	78f9      	ldrb	r1, [r7, #3]
  400ef6:	2200      	movs	r2, #0
  400ef8:	6878      	ldr	r0, [r7, #4]
  400efa:	4c8a      	ldr	r4, [pc, #552]	; (401124 <ethernet_phy_auto_negotiate+0x25c>)
  400efc:	47a0      	blx	r4
  400efe:	4603      	mov	r3, r0
  400f00:	76fb      	strb	r3, [r7, #27]
	if (uc_rc != GMAC_OK) {
  400f02:	7efb      	ldrb	r3, [r7, #27]
  400f04:	2b00      	cmp	r3, #0
  400f06:	d005      	beq.n	400f14 <ethernet_phy_auto_negotiate+0x4c>
		gmac_enable_management(p_gmac, false);
  400f08:	2100      	movs	r1, #0
  400f0a:	6878      	ldr	r0, [r7, #4]
  400f0c:	4b84      	ldr	r3, [pc, #528]	; (401120 <ethernet_phy_auto_negotiate+0x258>)
  400f0e:	4798      	blx	r3
		return uc_rc;
  400f10:	7efb      	ldrb	r3, [r7, #27]
  400f12:	e0fe      	b.n	401112 <ethernet_phy_auto_negotiate+0x24a>
	}

	ul_value &= ~(uint32_t)GMII_AUTONEG; /* Remove auto-negotiation enable */
  400f14:	693b      	ldr	r3, [r7, #16]
  400f16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  400f1a:	613b      	str	r3, [r7, #16]
	ul_value &= ~(uint32_t)(GMII_LOOPBACK | GMII_POWER_DOWN);
  400f1c:	693b      	ldr	r3, [r7, #16]
  400f1e:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
  400f22:	613b      	str	r3, [r7, #16]
	ul_value |= (uint32_t)GMII_ISOLATE; /* Electrically isolate PHY */
  400f24:	693b      	ldr	r3, [r7, #16]
  400f26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  400f2a:	613b      	str	r3, [r7, #16]
	uc_rc = gmac_phy_write(p_gmac, uc_phy_addr, GMII_BMCR, ul_value);
  400f2c:	693b      	ldr	r3, [r7, #16]
  400f2e:	78f9      	ldrb	r1, [r7, #3]
  400f30:	2200      	movs	r2, #0
  400f32:	6878      	ldr	r0, [r7, #4]
  400f34:	4c7c      	ldr	r4, [pc, #496]	; (401128 <ethernet_phy_auto_negotiate+0x260>)
  400f36:	47a0      	blx	r4
  400f38:	4603      	mov	r3, r0
  400f3a:	76fb      	strb	r3, [r7, #27]
	if (uc_rc != GMAC_OK) {
  400f3c:	7efb      	ldrb	r3, [r7, #27]
  400f3e:	2b00      	cmp	r3, #0
  400f40:	d005      	beq.n	400f4e <ethernet_phy_auto_negotiate+0x86>
		gmac_enable_management(p_gmac, false);
  400f42:	2100      	movs	r1, #0
  400f44:	6878      	ldr	r0, [r7, #4]
  400f46:	4b76      	ldr	r3, [pc, #472]	; (401120 <ethernet_phy_auto_negotiate+0x258>)
  400f48:	4798      	blx	r3
		return uc_rc;
  400f4a:	7efb      	ldrb	r3, [r7, #27]
  400f4c:	e0e1      	b.n	401112 <ethernet_phy_auto_negotiate+0x24a>
	/*
	 * Set the Auto_negotiation Advertisement Register.
	 * MII advertising for Next page.
	 * 100BaseTxFD and HD, 10BaseTFD and HD, IEEE 802.3.
	 */
	ul_phy_anar = GMII_100TX_FDX | GMII_100TX_HDX | GMII_10_FDX | GMII_10_HDX |
  400f4e:	f240 13e1 	movw	r3, #481	; 0x1e1
  400f52:	617b      	str	r3, [r7, #20]
			GMII_AN_IEEE_802_3;
	uc_rc = gmac_phy_write(p_gmac, uc_phy_addr, GMII_ANAR, ul_phy_anar);
  400f54:	78f9      	ldrb	r1, [r7, #3]
  400f56:	697b      	ldr	r3, [r7, #20]
  400f58:	2204      	movs	r2, #4
  400f5a:	6878      	ldr	r0, [r7, #4]
  400f5c:	4c72      	ldr	r4, [pc, #456]	; (401128 <ethernet_phy_auto_negotiate+0x260>)
  400f5e:	47a0      	blx	r4
  400f60:	4603      	mov	r3, r0
  400f62:	76fb      	strb	r3, [r7, #27]
	if (uc_rc != GMAC_OK) {
  400f64:	7efb      	ldrb	r3, [r7, #27]
  400f66:	2b00      	cmp	r3, #0
  400f68:	d005      	beq.n	400f76 <ethernet_phy_auto_negotiate+0xae>
		gmac_enable_management(p_gmac, false);
  400f6a:	2100      	movs	r1, #0
  400f6c:	6878      	ldr	r0, [r7, #4]
  400f6e:	4b6c      	ldr	r3, [pc, #432]	; (401120 <ethernet_phy_auto_negotiate+0x258>)
  400f70:	4798      	blx	r3
		return uc_rc;
  400f72:	7efb      	ldrb	r3, [r7, #27]
  400f74:	e0cd      	b.n	401112 <ethernet_phy_auto_negotiate+0x24a>
	}

	/* Read & modify control register */
	uc_rc = gmac_phy_read(p_gmac, uc_phy_addr, GMII_BMCR, &ul_value);
  400f76:	f107 0310 	add.w	r3, r7, #16
  400f7a:	78f9      	ldrb	r1, [r7, #3]
  400f7c:	2200      	movs	r2, #0
  400f7e:	6878      	ldr	r0, [r7, #4]
  400f80:	4c68      	ldr	r4, [pc, #416]	; (401124 <ethernet_phy_auto_negotiate+0x25c>)
  400f82:	47a0      	blx	r4
  400f84:	4603      	mov	r3, r0
  400f86:	76fb      	strb	r3, [r7, #27]
	if (uc_rc != GMAC_OK) {
  400f88:	7efb      	ldrb	r3, [r7, #27]
  400f8a:	2b00      	cmp	r3, #0
  400f8c:	d005      	beq.n	400f9a <ethernet_phy_auto_negotiate+0xd2>
		gmac_enable_management(p_gmac, false);
  400f8e:	2100      	movs	r1, #0
  400f90:	6878      	ldr	r0, [r7, #4]
  400f92:	4b63      	ldr	r3, [pc, #396]	; (401120 <ethernet_phy_auto_negotiate+0x258>)
  400f94:	4798      	blx	r3
		return uc_rc;
  400f96:	7efb      	ldrb	r3, [r7, #27]
  400f98:	e0bb      	b.n	401112 <ethernet_phy_auto_negotiate+0x24a>
	}

	ul_value |= GMII_SPEED_SELECT | GMII_AUTONEG | GMII_DUPLEX_MODE;
  400f9a:	693b      	ldr	r3, [r7, #16]
  400f9c:	f443 5344 	orr.w	r3, r3, #12544	; 0x3100
  400fa0:	613b      	str	r3, [r7, #16]
	uc_rc = gmac_phy_write(p_gmac, uc_phy_addr, GMII_BMCR, ul_value);
  400fa2:	693b      	ldr	r3, [r7, #16]
  400fa4:	78f9      	ldrb	r1, [r7, #3]
  400fa6:	2200      	movs	r2, #0
  400fa8:	6878      	ldr	r0, [r7, #4]
  400faa:	4c5f      	ldr	r4, [pc, #380]	; (401128 <ethernet_phy_auto_negotiate+0x260>)
  400fac:	47a0      	blx	r4
  400fae:	4603      	mov	r3, r0
  400fb0:	76fb      	strb	r3, [r7, #27]
	if (uc_rc != GMAC_OK) {
  400fb2:	7efb      	ldrb	r3, [r7, #27]
  400fb4:	2b00      	cmp	r3, #0
  400fb6:	d005      	beq.n	400fc4 <ethernet_phy_auto_negotiate+0xfc>
		gmac_enable_management(p_gmac, false);
  400fb8:	2100      	movs	r1, #0
  400fba:	6878      	ldr	r0, [r7, #4]
  400fbc:	4b58      	ldr	r3, [pc, #352]	; (401120 <ethernet_phy_auto_negotiate+0x258>)
  400fbe:	4798      	blx	r3
		return uc_rc;
  400fc0:	7efb      	ldrb	r3, [r7, #27]
  400fc2:	e0a6      	b.n	401112 <ethernet_phy_auto_negotiate+0x24a>
	}

	/* Restart auto negotiation */
	ul_value |= (uint32_t)GMII_RESTART_AUTONEG;
  400fc4:	693b      	ldr	r3, [r7, #16]
  400fc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  400fca:	613b      	str	r3, [r7, #16]
	ul_value &= ~(uint32_t)GMII_ISOLATE;
  400fcc:	693b      	ldr	r3, [r7, #16]
  400fce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  400fd2:	613b      	str	r3, [r7, #16]
	uc_rc = gmac_phy_write(p_gmac, uc_phy_addr, GMII_BMCR, ul_value);
  400fd4:	693b      	ldr	r3, [r7, #16]
  400fd6:	78f9      	ldrb	r1, [r7, #3]
  400fd8:	2200      	movs	r2, #0
  400fda:	6878      	ldr	r0, [r7, #4]
  400fdc:	4c52      	ldr	r4, [pc, #328]	; (401128 <ethernet_phy_auto_negotiate+0x260>)
  400fde:	47a0      	blx	r4
  400fe0:	4603      	mov	r3, r0
  400fe2:	76fb      	strb	r3, [r7, #27]
	if (uc_rc != GMAC_OK) {
  400fe4:	7efb      	ldrb	r3, [r7, #27]
  400fe6:	2b00      	cmp	r3, #0
  400fe8:	d005      	beq.n	400ff6 <ethernet_phy_auto_negotiate+0x12e>
		gmac_enable_management(p_gmac, false);
  400fea:	2100      	movs	r1, #0
  400fec:	6878      	ldr	r0, [r7, #4]
  400fee:	4b4c      	ldr	r3, [pc, #304]	; (401120 <ethernet_phy_auto_negotiate+0x258>)
  400ff0:	4798      	blx	r3
		return uc_rc;
  400ff2:	7efb      	ldrb	r3, [r7, #27]
  400ff4:	e08d      	b.n	401112 <ethernet_phy_auto_negotiate+0x24a>
	}

	/* Check if auto negotiation is completed */
	while (1) {
		uc_rc = gmac_phy_read(p_gmac, uc_phy_addr, GMII_BMSR, &ul_value);
  400ff6:	f107 0310 	add.w	r3, r7, #16
  400ffa:	78f9      	ldrb	r1, [r7, #3]
  400ffc:	2201      	movs	r2, #1
  400ffe:	6878      	ldr	r0, [r7, #4]
  401000:	4c48      	ldr	r4, [pc, #288]	; (401124 <ethernet_phy_auto_negotiate+0x25c>)
  401002:	47a0      	blx	r4
  401004:	4603      	mov	r3, r0
  401006:	76fb      	strb	r3, [r7, #27]
		if (uc_rc != GMAC_OK) {
  401008:	7efb      	ldrb	r3, [r7, #27]
  40100a:	2b00      	cmp	r3, #0
  40100c:	d005      	beq.n	40101a <ethernet_phy_auto_negotiate+0x152>
			gmac_enable_management(p_gmac, false);
  40100e:	2100      	movs	r1, #0
  401010:	6878      	ldr	r0, [r7, #4]
  401012:	4b43      	ldr	r3, [pc, #268]	; (401120 <ethernet_phy_auto_negotiate+0x258>)
  401014:	4798      	blx	r3
			return uc_rc;
  401016:	7efb      	ldrb	r3, [r7, #27]
  401018:	e07b      	b.n	401112 <ethernet_phy_auto_negotiate+0x24a>
		}
		/* Done successfully */
		if (ul_value & GMII_AUTONEG_COMP) {
  40101a:	693b      	ldr	r3, [r7, #16]
  40101c:	f003 0320 	and.w	r3, r3, #32
  401020:	2b00      	cmp	r3, #0
  401022:	d10f      	bne.n	401044 <ethernet_phy_auto_negotiate+0x17c>
			break;
		}

		/* Timeout check */
		if (ul_retry_max) {
  401024:	69fb      	ldr	r3, [r7, #28]
  401026:	2b00      	cmp	r3, #0
  401028:	d0e5      	beq.n	400ff6 <ethernet_phy_auto_negotiate+0x12e>
			if (++ul_retry_count >= ul_retry_max) {
  40102a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40102c:	3301      	adds	r3, #1
  40102e:	627b      	str	r3, [r7, #36]	; 0x24
  401030:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  401032:	69fb      	ldr	r3, [r7, #28]
  401034:	429a      	cmp	r2, r3
  401036:	d3de      	bcc.n	400ff6 <ethernet_phy_auto_negotiate+0x12e>
				gmac_enable_management(p_gmac, false);
  401038:	2100      	movs	r1, #0
  40103a:	6878      	ldr	r0, [r7, #4]
  40103c:	4b38      	ldr	r3, [pc, #224]	; (401120 <ethernet_phy_auto_negotiate+0x258>)
  40103e:	4798      	blx	r3
				return GMAC_TIMEOUT;
  401040:	2301      	movs	r3, #1
  401042:	e066      	b.n	401112 <ethernet_phy_auto_negotiate+0x24a>
			gmac_enable_management(p_gmac, false);
			return uc_rc;
		}
		/* Done successfully */
		if (ul_value & GMII_AUTONEG_COMP) {
			break;
  401044:	bf00      	nop
			}
		}
	}

	/* Get the auto negotiate link partner base page */
	uc_rc = gmac_phy_read(p_gmac, uc_phy_addr, GMII_ANLPAR, &ul_phy_analpar);
  401046:	f107 030c 	add.w	r3, r7, #12
  40104a:	78f9      	ldrb	r1, [r7, #3]
  40104c:	2205      	movs	r2, #5
  40104e:	6878      	ldr	r0, [r7, #4]
  401050:	4c34      	ldr	r4, [pc, #208]	; (401124 <ethernet_phy_auto_negotiate+0x25c>)
  401052:	47a0      	blx	r4
  401054:	4603      	mov	r3, r0
  401056:	76fb      	strb	r3, [r7, #27]
	if (uc_rc != GMAC_OK) {
  401058:	7efb      	ldrb	r3, [r7, #27]
  40105a:	2b00      	cmp	r3, #0
  40105c:	d005      	beq.n	40106a <ethernet_phy_auto_negotiate+0x1a2>
		gmac_enable_management(p_gmac, false);
  40105e:	2100      	movs	r1, #0
  401060:	6878      	ldr	r0, [r7, #4]
  401062:	4b2f      	ldr	r3, [pc, #188]	; (401120 <ethernet_phy_auto_negotiate+0x258>)
  401064:	4798      	blx	r3
		return uc_rc;
  401066:	7efb      	ldrb	r3, [r7, #27]
  401068:	e053      	b.n	401112 <ethernet_phy_auto_negotiate+0x24a>
	}


	/* Set up the GMAC link speed */
	if ((ul_phy_anar & ul_phy_analpar) & GMII_100TX_FDX) {
  40106a:	68fa      	ldr	r2, [r7, #12]
  40106c:	697b      	ldr	r3, [r7, #20]
  40106e:	4013      	ands	r3, r2
  401070:	f403 7380 	and.w	r3, r3, #256	; 0x100
  401074:	2b00      	cmp	r3, #0
  401076:	d006      	beq.n	401086 <ethernet_phy_auto_negotiate+0x1be>
		/* Set MII for 100BaseTX and Full Duplex */
		uc_speed = true;
  401078:	2301      	movs	r3, #1
  40107a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		uc_fd = true;
  40107e:	2301      	movs	r3, #1
  401080:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  401084:	e028      	b.n	4010d8 <ethernet_phy_auto_negotiate+0x210>
	} else if ((ul_phy_anar & ul_phy_analpar) & GMII_10_FDX) {
  401086:	68fa      	ldr	r2, [r7, #12]
  401088:	697b      	ldr	r3, [r7, #20]
  40108a:	4013      	ands	r3, r2
  40108c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  401090:	2b00      	cmp	r3, #0
  401092:	d006      	beq.n	4010a2 <ethernet_phy_auto_negotiate+0x1da>
		/* Set MII for 10BaseT and Full Duplex */
		uc_speed = false;
  401094:	2300      	movs	r3, #0
  401096:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		uc_fd = true;
  40109a:	2301      	movs	r3, #1
  40109c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  4010a0:	e01a      	b.n	4010d8 <ethernet_phy_auto_negotiate+0x210>
	} else if ((ul_phy_anar & ul_phy_analpar) & GMII_100TX_HDX) {
  4010a2:	68fa      	ldr	r2, [r7, #12]
  4010a4:	697b      	ldr	r3, [r7, #20]
  4010a6:	4013      	ands	r3, r2
  4010a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4010ac:	2b00      	cmp	r3, #0
  4010ae:	d006      	beq.n	4010be <ethernet_phy_auto_negotiate+0x1f6>
		/* Set MII for 100BaseTX and half Duplex */
		uc_speed = true;
  4010b0:	2301      	movs	r3, #1
  4010b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		uc_fd = false;
  4010b6:	2300      	movs	r3, #0
  4010b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  4010bc:	e00c      	b.n	4010d8 <ethernet_phy_auto_negotiate+0x210>
	} else if ((ul_phy_anar & ul_phy_analpar) & GMII_10_HDX) {
  4010be:	68fa      	ldr	r2, [r7, #12]
  4010c0:	697b      	ldr	r3, [r7, #20]
  4010c2:	4013      	ands	r3, r2
  4010c4:	f003 0320 	and.w	r3, r3, #32
  4010c8:	2b00      	cmp	r3, #0
  4010ca:	d005      	beq.n	4010d8 <ethernet_phy_auto_negotiate+0x210>
		/* Set MII for 10BaseT and half Duplex */
		uc_speed = false;
  4010cc:	2300      	movs	r3, #0
  4010ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		uc_fd = false;
  4010d2:	2300      	movs	r3, #0
  4010d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	}

	gmac_set_speed(p_gmac, uc_speed);
  4010d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  4010dc:	4619      	mov	r1, r3
  4010de:	6878      	ldr	r0, [r7, #4]
  4010e0:	4b12      	ldr	r3, [pc, #72]	; (40112c <ethernet_phy_auto_negotiate+0x264>)
  4010e2:	4798      	blx	r3
	gmac_enable_full_duplex(p_gmac, uc_fd);
  4010e4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
  4010e8:	4619      	mov	r1, r3
  4010ea:	6878      	ldr	r0, [r7, #4]
  4010ec:	4b10      	ldr	r3, [pc, #64]	; (401130 <ethernet_phy_auto_negotiate+0x268>)
  4010ee:	4798      	blx	r3

	/* Select Media Independent Interface type */
	gmac_select_mii_mode(p_gmac, ETH_PHY_MODE);
  4010f0:	2101      	movs	r1, #1
  4010f2:	6878      	ldr	r0, [r7, #4]
  4010f4:	4b0f      	ldr	r3, [pc, #60]	; (401134 <ethernet_phy_auto_negotiate+0x26c>)
  4010f6:	4798      	blx	r3

	gmac_enable_transmit(GMAC, true);
  4010f8:	2101      	movs	r1, #1
  4010fa:	480f      	ldr	r0, [pc, #60]	; (401138 <ethernet_phy_auto_negotiate+0x270>)
  4010fc:	4b0f      	ldr	r3, [pc, #60]	; (40113c <ethernet_phy_auto_negotiate+0x274>)
  4010fe:	4798      	blx	r3
	gmac_enable_receive(GMAC, true);
  401100:	2101      	movs	r1, #1
  401102:	480d      	ldr	r0, [pc, #52]	; (401138 <ethernet_phy_auto_negotiate+0x270>)
  401104:	4b0e      	ldr	r3, [pc, #56]	; (401140 <ethernet_phy_auto_negotiate+0x278>)
  401106:	4798      	blx	r3

	gmac_enable_management(p_gmac, false);
  401108:	2100      	movs	r1, #0
  40110a:	6878      	ldr	r0, [r7, #4]
  40110c:	4b04      	ldr	r3, [pc, #16]	; (401120 <ethernet_phy_auto_negotiate+0x258>)
  40110e:	4798      	blx	r3
	return uc_rc;
  401110:	7efb      	ldrb	r3, [r7, #27]
}
  401112:	4618      	mov	r0, r3
  401114:	372c      	adds	r7, #44	; 0x2c
  401116:	46bd      	mov	sp, r7
  401118:	bd90      	pop	{r4, r7, pc}
  40111a:	bf00      	nop
  40111c:	000f4240 	.word	0x000f4240
  401120:	00400aa9 	.word	0x00400aa9
  401124:	004012b9 	.word	0x004012b9
  401128:	00401315 	.word	0x00401315
  40112c:	00400ae1 	.word	0x00400ae1
  401130:	00400b19 	.word	0x00400b19
  401134:	00400bf9 	.word	0x00400bf9
  401138:	40050000 	.word	0x40050000
  40113c:	00400a71 	.word	0x00400a71
  401140:	00400a39 	.word	0x00400a39

00401144 <ethernet_phy_reset>:
 * \param uc_phy_addr PHY address.
 *
 * \Return GMAC_OK if successfully, GMAC_TIMEOUT if timeout.
 */
uint8_t ethernet_phy_reset(Gmac *p_gmac, uint8_t uc_phy_addr)
{
  401144:	b590      	push	{r4, r7, lr}
  401146:	b087      	sub	sp, #28
  401148:	af00      	add	r7, sp, #0
  40114a:	6078      	str	r0, [r7, #4]
  40114c:	460b      	mov	r3, r1
  40114e:	70fb      	strb	r3, [r7, #3]
	uint32_t ul_bmcr;
	uint8_t uc_phy_address = uc_phy_addr;
  401150:	78fb      	ldrb	r3, [r7, #3]
  401152:	74bb      	strb	r3, [r7, #18]
	uint32_t ul_timeout = ETH_PHY_TIMEOUT;
  401154:	230a      	movs	r3, #10
  401156:	617b      	str	r3, [r7, #20]
	uint8_t uc_rc = GMAC_TIMEOUT;
  401158:	2301      	movs	r3, #1
  40115a:	74fb      	strb	r3, [r7, #19]

	gmac_enable_management(p_gmac, true);
  40115c:	2101      	movs	r1, #1
  40115e:	6878      	ldr	r0, [r7, #4]
  401160:	4b15      	ldr	r3, [pc, #84]	; (4011b8 <ethernet_phy_reset+0x74>)
  401162:	4798      	blx	r3

	ul_bmcr = GMII_RESET;
  401164:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401168:	60fb      	str	r3, [r7, #12]
	gmac_phy_write(p_gmac, uc_phy_address, GMII_BMCR, ul_bmcr);
  40116a:	68fb      	ldr	r3, [r7, #12]
  40116c:	7cb9      	ldrb	r1, [r7, #18]
  40116e:	2200      	movs	r2, #0
  401170:	6878      	ldr	r0, [r7, #4]
  401172:	4c12      	ldr	r4, [pc, #72]	; (4011bc <ethernet_phy_reset+0x78>)
  401174:	47a0      	blx	r4

	do {
		gmac_phy_read(p_gmac, uc_phy_address, GMII_BMCR, &ul_bmcr);
  401176:	f107 030c 	add.w	r3, r7, #12
  40117a:	7cb9      	ldrb	r1, [r7, #18]
  40117c:	2200      	movs	r2, #0
  40117e:	6878      	ldr	r0, [r7, #4]
  401180:	4c0f      	ldr	r4, [pc, #60]	; (4011c0 <ethernet_phy_reset+0x7c>)
  401182:	47a0      	blx	r4
		ul_timeout--;
  401184:	697b      	ldr	r3, [r7, #20]
  401186:	3b01      	subs	r3, #1
  401188:	617b      	str	r3, [r7, #20]
	} while ((ul_bmcr & GMII_RESET) && ul_timeout);
  40118a:	68fb      	ldr	r3, [r7, #12]
  40118c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  401190:	2b00      	cmp	r3, #0
  401192:	d002      	beq.n	40119a <ethernet_phy_reset+0x56>
  401194:	697b      	ldr	r3, [r7, #20]
  401196:	2b00      	cmp	r3, #0
  401198:	d1ed      	bne.n	401176 <ethernet_phy_reset+0x32>

	gmac_enable_management(p_gmac, false);
  40119a:	2100      	movs	r1, #0
  40119c:	6878      	ldr	r0, [r7, #4]
  40119e:	4b06      	ldr	r3, [pc, #24]	; (4011b8 <ethernet_phy_reset+0x74>)
  4011a0:	4798      	blx	r3

	if (ul_timeout) {
  4011a2:	697b      	ldr	r3, [r7, #20]
  4011a4:	2b00      	cmp	r3, #0
  4011a6:	d001      	beq.n	4011ac <ethernet_phy_reset+0x68>
		uc_rc = GMAC_OK;
  4011a8:	2300      	movs	r3, #0
  4011aa:	74fb      	strb	r3, [r7, #19]
	}

	return (uc_rc);
  4011ac:	7cfb      	ldrb	r3, [r7, #19]
}
  4011ae:	4618      	mov	r0, r3
  4011b0:	371c      	adds	r7, #28
  4011b2:	46bd      	mov	sp, r7
  4011b4:	bd90      	pop	{r4, r7, pc}
  4011b6:	bf00      	nop
  4011b8:	00400aa9 	.word	0x00400aa9
  4011bc:	00401315 	.word	0x00401315
  4011c0:	004012b9 	.word	0x004012b9

004011c4 <gmac_is_phy_idle>:
 * \param p_gmac   Pointer to the GMAC instance.
 *
 * \return  1 if PHY is idle.
 */
static inline uint8_t gmac_is_phy_idle(Gmac* p_gmac)
{
  4011c4:	b480      	push	{r7}
  4011c6:	b083      	sub	sp, #12
  4011c8:	af00      	add	r7, sp, #0
  4011ca:	6078      	str	r0, [r7, #4]
	return ((p_gmac->GMAC_NSR & GMAC_NSR_IDLE) > 0);
  4011cc:	687b      	ldr	r3, [r7, #4]
  4011ce:	689b      	ldr	r3, [r3, #8]
  4011d0:	f003 0304 	and.w	r3, r3, #4
  4011d4:	2b00      	cmp	r3, #0
  4011d6:	bf14      	ite	ne
  4011d8:	2301      	movne	r3, #1
  4011da:	2300      	moveq	r3, #0
  4011dc:	b2db      	uxtb	r3, r3
}
  4011de:	4618      	mov	r0, r3
  4011e0:	370c      	adds	r7, #12
  4011e2:	46bd      	mov	sp, r7
  4011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4011e8:	4770      	bx	lr
  4011ea:	bf00      	nop

004011ec <gmac_maintain_phy>:
 * \param us_data   Data to be performed, write only.
 */
static inline void gmac_maintain_phy(Gmac* p_gmac,
		uint8_t uc_phy_addr, uint8_t uc_reg_addr, uint8_t uc_rw,
		uint16_t us_data)
{
  4011ec:	b480      	push	{r7}
  4011ee:	b083      	sub	sp, #12
  4011f0:	af00      	add	r7, sp, #0
  4011f2:	6078      	str	r0, [r7, #4]
  4011f4:	4608      	mov	r0, r1
  4011f6:	4611      	mov	r1, r2
  4011f8:	461a      	mov	r2, r3
  4011fa:	4603      	mov	r3, r0
  4011fc:	70fb      	strb	r3, [r7, #3]
  4011fe:	460b      	mov	r3, r1
  401200:	70bb      	strb	r3, [r7, #2]
  401202:	4613      	mov	r3, r2
  401204:	707b      	strb	r3, [r7, #1]
	/* Wait until bus idle */
	while ((p_gmac->GMAC_NSR & GMAC_NSR_IDLE) == 0);
  401206:	bf00      	nop
  401208:	687b      	ldr	r3, [r7, #4]
  40120a:	689b      	ldr	r3, [r3, #8]
  40120c:	f003 0304 	and.w	r3, r3, #4
  401210:	2b00      	cmp	r3, #0
  401212:	d0f9      	beq.n	401208 <gmac_maintain_phy+0x1c>
	/* Write maintain register */
	p_gmac->GMAC_MAN = GMAC_MAN_WTN(GMAC_MAN_CODE_VALUE)
			| GMAC_MAN_CLTTO
			| GMAC_MAN_PHYA(uc_phy_addr)
  401214:	78fb      	ldrb	r3, [r7, #3]
  401216:	05db      	lsls	r3, r3, #23
  401218:	f003 6278 	and.w	r2, r3, #260046848	; 0xf800000
			| GMAC_MAN_REGA(uc_reg_addr)
  40121c:	78bb      	ldrb	r3, [r7, #2]
  40121e:	049b      	lsls	r3, r3, #18
  401220:	f403 03f8 	and.w	r3, r3, #8126464	; 0x7c0000
  401224:	431a      	orrs	r2, r3
			| GMAC_MAN_OP((uc_rw ? GMAC_MAN_RW_TYPE : GMAC_MAN_READ_ONLY))
  401226:	787b      	ldrb	r3, [r7, #1]
  401228:	2b00      	cmp	r3, #0
  40122a:	d002      	beq.n	401232 <gmac_maintain_phy+0x46>
  40122c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
  401230:	e001      	b.n	401236 <gmac_maintain_phy+0x4a>
  401232:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401236:	431a      	orrs	r2, r3
			| GMAC_MAN_DATA(us_data);
  401238:	8a3b      	ldrh	r3, [r7, #16]
  40123a:	431a      	orrs	r2, r3
  40123c:	4b04      	ldr	r3, [pc, #16]	; (401250 <gmac_maintain_phy+0x64>)
  40123e:	4313      	orrs	r3, r2
		uint16_t us_data)
{
	/* Wait until bus idle */
	while ((p_gmac->GMAC_NSR & GMAC_NSR_IDLE) == 0);
	/* Write maintain register */
	p_gmac->GMAC_MAN = GMAC_MAN_WTN(GMAC_MAN_CODE_VALUE)
  401240:	687a      	ldr	r2, [r7, #4]
  401242:	6353      	str	r3, [r2, #52]	; 0x34
			| GMAC_MAN_CLTTO
			| GMAC_MAN_PHYA(uc_phy_addr)
			| GMAC_MAN_REGA(uc_reg_addr)
			| GMAC_MAN_OP((uc_rw ? GMAC_MAN_RW_TYPE : GMAC_MAN_READ_ONLY))
			| GMAC_MAN_DATA(us_data);
}
  401244:	bf00      	nop
  401246:	370c      	adds	r7, #12
  401248:	46bd      	mov	sp, r7
  40124a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40124e:	4770      	bx	lr
  401250:	40020000 	.word	0x40020000

00401254 <gmac_get_phy_data>:
 * \param p_gmac   Pointer to the GMAC instance.
 *
 * \return Get PHY data.
 */
static inline uint16_t gmac_get_phy_data(Gmac* p_gmac)
{
  401254:	b480      	push	{r7}
  401256:	b083      	sub	sp, #12
  401258:	af00      	add	r7, sp, #0
  40125a:	6078      	str	r0, [r7, #4]
	/* Wait until bus idle */
	while ((p_gmac->GMAC_NSR & GMAC_NSR_IDLE) == 0);
  40125c:	bf00      	nop
  40125e:	687b      	ldr	r3, [r7, #4]
  401260:	689b      	ldr	r3, [r3, #8]
  401262:	f003 0304 	and.w	r3, r3, #4
  401266:	2b00      	cmp	r3, #0
  401268:	d0f9      	beq.n	40125e <gmac_get_phy_data+0xa>
	/* Return data */
	return (uint16_t) (p_gmac->GMAC_MAN & GMAC_MAN_DATA_Msk);
  40126a:	687b      	ldr	r3, [r7, #4]
  40126c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  40126e:	b29b      	uxth	r3, r3
}
  401270:	4618      	mov	r0, r3
  401272:	370c      	adds	r7, #12
  401274:	46bd      	mov	sp, r7
  401276:	f85d 7b04 	ldr.w	r7, [sp], #4
  40127a:	4770      	bx	lr

0040127c <gmac_phy_wait>:
 * \param ul_retry The retry times.
 *
 * Return GMAC_OK if the operation is completed successfully.
 */
static uint8_t gmac_phy_wait(Gmac* p_gmac, const uint32_t ul_retry)
{
  40127c:	b580      	push	{r7, lr}
  40127e:	b084      	sub	sp, #16
  401280:	af00      	add	r7, sp, #0
  401282:	6078      	str	r0, [r7, #4]
  401284:	6039      	str	r1, [r7, #0]
	volatile uint32_t ul_retry_count = 0;
  401286:	2300      	movs	r3, #0
  401288:	60fb      	str	r3, [r7, #12]

	while (!gmac_is_phy_idle(p_gmac)) {
  40128a:	e008      	b.n	40129e <gmac_phy_wait+0x22>
		ul_retry_count++;
  40128c:	68fb      	ldr	r3, [r7, #12]
  40128e:	3301      	adds	r3, #1
  401290:	60fb      	str	r3, [r7, #12]

		if (ul_retry_count >= ul_retry) {
  401292:	68fa      	ldr	r2, [r7, #12]
  401294:	683b      	ldr	r3, [r7, #0]
  401296:	429a      	cmp	r2, r3
  401298:	d301      	bcc.n	40129e <gmac_phy_wait+0x22>
			return GMAC_TIMEOUT;
  40129a:	2301      	movs	r3, #1
  40129c:	e006      	b.n	4012ac <gmac_phy_wait+0x30>
 */
static uint8_t gmac_phy_wait(Gmac* p_gmac, const uint32_t ul_retry)
{
	volatile uint32_t ul_retry_count = 0;

	while (!gmac_is_phy_idle(p_gmac)) {
  40129e:	6878      	ldr	r0, [r7, #4]
  4012a0:	4b04      	ldr	r3, [pc, #16]	; (4012b4 <gmac_phy_wait+0x38>)
  4012a2:	4798      	blx	r3
  4012a4:	4603      	mov	r3, r0
  4012a6:	2b00      	cmp	r3, #0
  4012a8:	d0f0      	beq.n	40128c <gmac_phy_wait+0x10>

		if (ul_retry_count >= ul_retry) {
			return GMAC_TIMEOUT;
		}
	}
	return GMAC_OK;
  4012aa:	2300      	movs	r3, #0
}
  4012ac:	4618      	mov	r0, r3
  4012ae:	3710      	adds	r7, #16
  4012b0:	46bd      	mov	sp, r7
  4012b2:	bd80      	pop	{r7, pc}
  4012b4:	004011c5 	.word	0x004011c5

004012b8 <gmac_phy_read>:
 *
 * \Return GMAC_OK if successfully, GMAC_TIMEOUT if timeout.
 */
uint8_t gmac_phy_read(Gmac* p_gmac, uint8_t uc_phy_address, uint8_t uc_address,
		uint32_t* p_value)
{
  4012b8:	b590      	push	{r4, r7, lr}
  4012ba:	b087      	sub	sp, #28
  4012bc:	af02      	add	r7, sp, #8
  4012be:	60f8      	str	r0, [r7, #12]
  4012c0:	607b      	str	r3, [r7, #4]
  4012c2:	460b      	mov	r3, r1
  4012c4:	72fb      	strb	r3, [r7, #11]
  4012c6:	4613      	mov	r3, r2
  4012c8:	72bb      	strb	r3, [r7, #10]
	gmac_maintain_phy(p_gmac, uc_phy_address, uc_address, 1, 0);
  4012ca:	7aba      	ldrb	r2, [r7, #10]
  4012cc:	7af9      	ldrb	r1, [r7, #11]
  4012ce:	2300      	movs	r3, #0
  4012d0:	9300      	str	r3, [sp, #0]
  4012d2:	2301      	movs	r3, #1
  4012d4:	68f8      	ldr	r0, [r7, #12]
  4012d6:	4c0b      	ldr	r4, [pc, #44]	; (401304 <gmac_phy_read+0x4c>)
  4012d8:	47a0      	blx	r4

	if (gmac_phy_wait(p_gmac, MAC_PHY_RETRY_MAX) == GMAC_TIMEOUT) {
  4012da:	490b      	ldr	r1, [pc, #44]	; (401308 <gmac_phy_read+0x50>)
  4012dc:	68f8      	ldr	r0, [r7, #12]
  4012de:	4b0b      	ldr	r3, [pc, #44]	; (40130c <gmac_phy_read+0x54>)
  4012e0:	4798      	blx	r3
  4012e2:	4603      	mov	r3, r0
  4012e4:	2b01      	cmp	r3, #1
  4012e6:	d101      	bne.n	4012ec <gmac_phy_read+0x34>
		return GMAC_TIMEOUT;
  4012e8:	2301      	movs	r3, #1
  4012ea:	e007      	b.n	4012fc <gmac_phy_read+0x44>
	}
	*p_value = gmac_get_phy_data(p_gmac);
  4012ec:	68f8      	ldr	r0, [r7, #12]
  4012ee:	4b08      	ldr	r3, [pc, #32]	; (401310 <gmac_phy_read+0x58>)
  4012f0:	4798      	blx	r3
  4012f2:	4603      	mov	r3, r0
  4012f4:	461a      	mov	r2, r3
  4012f6:	687b      	ldr	r3, [r7, #4]
  4012f8:	601a      	str	r2, [r3, #0]
	return GMAC_OK;
  4012fa:	2300      	movs	r3, #0
}
  4012fc:	4618      	mov	r0, r3
  4012fe:	3714      	adds	r7, #20
  401300:	46bd      	mov	sp, r7
  401302:	bd90      	pop	{r4, r7, pc}
  401304:	004011ed 	.word	0x004011ed
  401308:	000f4240 	.word	0x000f4240
  40130c:	0040127d 	.word	0x0040127d
  401310:	00401255 	.word	0x00401255

00401314 <gmac_phy_write>:
 *
 * \Return GMAC_OK if successfully, GMAC_TIMEOUT if timeout.
 */
uint8_t gmac_phy_write(Gmac* p_gmac, uint8_t uc_phy_address,
		uint8_t uc_address, uint32_t ul_value)
{
  401314:	b590      	push	{r4, r7, lr}
  401316:	b087      	sub	sp, #28
  401318:	af02      	add	r7, sp, #8
  40131a:	60f8      	str	r0, [r7, #12]
  40131c:	607b      	str	r3, [r7, #4]
  40131e:	460b      	mov	r3, r1
  401320:	72fb      	strb	r3, [r7, #11]
  401322:	4613      	mov	r3, r2
  401324:	72bb      	strb	r3, [r7, #10]
	gmac_maintain_phy(p_gmac, uc_phy_address, uc_address, 0, ul_value);
  401326:	687b      	ldr	r3, [r7, #4]
  401328:	b29b      	uxth	r3, r3
  40132a:	7aba      	ldrb	r2, [r7, #10]
  40132c:	7af9      	ldrb	r1, [r7, #11]
  40132e:	9300      	str	r3, [sp, #0]
  401330:	2300      	movs	r3, #0
  401332:	68f8      	ldr	r0, [r7, #12]
  401334:	4c07      	ldr	r4, [pc, #28]	; (401354 <gmac_phy_write+0x40>)
  401336:	47a0      	blx	r4

	if (gmac_phy_wait(p_gmac, MAC_PHY_RETRY_MAX) == GMAC_TIMEOUT) {
  401338:	4907      	ldr	r1, [pc, #28]	; (401358 <gmac_phy_write+0x44>)
  40133a:	68f8      	ldr	r0, [r7, #12]
  40133c:	4b07      	ldr	r3, [pc, #28]	; (40135c <gmac_phy_write+0x48>)
  40133e:	4798      	blx	r3
  401340:	4603      	mov	r3, r0
  401342:	2b01      	cmp	r3, #1
  401344:	d101      	bne.n	40134a <gmac_phy_write+0x36>
		return GMAC_TIMEOUT;
  401346:	2301      	movs	r3, #1
  401348:	e000      	b.n	40134c <gmac_phy_write+0x38>
	}
	return GMAC_OK;
  40134a:	2300      	movs	r3, #0
}
  40134c:	4618      	mov	r0, r3
  40134e:	3714      	adds	r7, #20
  401350:	46bd      	mov	sp, r7
  401352:	bd90      	pop	{r4, r7, pc}
  401354:	004011ed 	.word	0x004011ed
  401358:	000f4240 	.word	0x000f4240
  40135c:	0040127d 	.word	0x0040127d

00401360 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  401360:	b480      	push	{r7}
  401362:	b085      	sub	sp, #20
  401364:	af00      	add	r7, sp, #0
  401366:	60f8      	str	r0, [r7, #12]
  401368:	60b9      	str	r1, [r7, #8]
  40136a:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40136c:	687b      	ldr	r3, [r7, #4]
  40136e:	2b00      	cmp	r3, #0
  401370:	d003      	beq.n	40137a <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  401372:	68fb      	ldr	r3, [r7, #12]
  401374:	68ba      	ldr	r2, [r7, #8]
  401376:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  401378:	e002      	b.n	401380 <pio_pull_up+0x20>
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40137a:	68fb      	ldr	r3, [r7, #12]
  40137c:	68ba      	ldr	r2, [r7, #8]
  40137e:	661a      	str	r2, [r3, #96]	; 0x60
	}
}
  401380:	bf00      	nop
  401382:	3714      	adds	r7, #20
  401384:	46bd      	mov	sp, r7
  401386:	f85d 7b04 	ldr.w	r7, [sp], #4
  40138a:	4770      	bx	lr

0040138c <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  40138c:	b480      	push	{r7}
  40138e:	b087      	sub	sp, #28
  401390:	af00      	add	r7, sp, #0
  401392:	60f8      	str	r0, [r7, #12]
  401394:	60b9      	str	r1, [r7, #8]
  401396:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  401398:	68fb      	ldr	r3, [r7, #12]
  40139a:	687a      	ldr	r2, [r7, #4]
  40139c:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  40139e:	68bb      	ldr	r3, [r7, #8]
  4013a0:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4013a4:	d04a      	beq.n	40143c <pio_set_peripheral+0xb0>
  4013a6:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4013aa:	d808      	bhi.n	4013be <pio_set_peripheral+0x32>
  4013ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4013b0:	d016      	beq.n	4013e0 <pio_set_peripheral+0x54>
  4013b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4013b6:	d02c      	beq.n	401412 <pio_set_peripheral+0x86>
  4013b8:	2b00      	cmp	r3, #0
  4013ba:	d069      	beq.n	401490 <pio_set_peripheral+0x104>
  4013bc:	e064      	b.n	401488 <pio_set_peripheral+0xfc>
  4013be:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4013c2:	d065      	beq.n	401490 <pio_set_peripheral+0x104>
  4013c4:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4013c8:	d803      	bhi.n	4013d2 <pio_set_peripheral+0x46>
  4013ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4013ce:	d04a      	beq.n	401466 <pio_set_peripheral+0xda>
  4013d0:	e05a      	b.n	401488 <pio_set_peripheral+0xfc>
  4013d2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4013d6:	d05b      	beq.n	401490 <pio_set_peripheral+0x104>
  4013d8:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4013dc:	d058      	beq.n	401490 <pio_set_peripheral+0x104>
  4013de:	e053      	b.n	401488 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4013e0:	68fb      	ldr	r3, [r7, #12]
  4013e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  4013e4:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4013e6:	68fb      	ldr	r3, [r7, #12]
  4013e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4013ea:	687b      	ldr	r3, [r7, #4]
  4013ec:	43d9      	mvns	r1, r3
  4013ee:	697b      	ldr	r3, [r7, #20]
  4013f0:	400b      	ands	r3, r1
  4013f2:	401a      	ands	r2, r3
  4013f4:	68fb      	ldr	r3, [r7, #12]
  4013f6:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4013f8:	68fb      	ldr	r3, [r7, #12]
  4013fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  4013fc:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4013fe:	68fb      	ldr	r3, [r7, #12]
  401400:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401402:	687b      	ldr	r3, [r7, #4]
  401404:	43d9      	mvns	r1, r3
  401406:	697b      	ldr	r3, [r7, #20]
  401408:	400b      	ands	r3, r1
  40140a:	401a      	ands	r2, r3
  40140c:	68fb      	ldr	r3, [r7, #12]
  40140e:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401410:	e03a      	b.n	401488 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401412:	68fb      	ldr	r3, [r7, #12]
  401414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401416:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401418:	687a      	ldr	r2, [r7, #4]
  40141a:	697b      	ldr	r3, [r7, #20]
  40141c:	431a      	orrs	r2, r3
  40141e:	68fb      	ldr	r3, [r7, #12]
  401420:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401422:	68fb      	ldr	r3, [r7, #12]
  401424:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401426:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401428:	68fb      	ldr	r3, [r7, #12]
  40142a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40142c:	687b      	ldr	r3, [r7, #4]
  40142e:	43d9      	mvns	r1, r3
  401430:	697b      	ldr	r3, [r7, #20]
  401432:	400b      	ands	r3, r1
  401434:	401a      	ands	r2, r3
  401436:	68fb      	ldr	r3, [r7, #12]
  401438:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  40143a:	e025      	b.n	401488 <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40143c:	68fb      	ldr	r3, [r7, #12]
  40143e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401440:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401442:	68fb      	ldr	r3, [r7, #12]
  401444:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401446:	687b      	ldr	r3, [r7, #4]
  401448:	43d9      	mvns	r1, r3
  40144a:	697b      	ldr	r3, [r7, #20]
  40144c:	400b      	ands	r3, r1
  40144e:	401a      	ands	r2, r3
  401450:	68fb      	ldr	r3, [r7, #12]
  401452:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401454:	68fb      	ldr	r3, [r7, #12]
  401456:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401458:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40145a:	687a      	ldr	r2, [r7, #4]
  40145c:	697b      	ldr	r3, [r7, #20]
  40145e:	431a      	orrs	r2, r3
  401460:	68fb      	ldr	r3, [r7, #12]
  401462:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401464:	e010      	b.n	401488 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401466:	68fb      	ldr	r3, [r7, #12]
  401468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40146a:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40146c:	687a      	ldr	r2, [r7, #4]
  40146e:	697b      	ldr	r3, [r7, #20]
  401470:	431a      	orrs	r2, r3
  401472:	68fb      	ldr	r3, [r7, #12]
  401474:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401476:	68fb      	ldr	r3, [r7, #12]
  401478:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  40147a:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40147c:	687a      	ldr	r2, [r7, #4]
  40147e:	697b      	ldr	r3, [r7, #20]
  401480:	431a      	orrs	r2, r3
  401482:	68fb      	ldr	r3, [r7, #12]
  401484:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401486:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  401488:	68fb      	ldr	r3, [r7, #12]
  40148a:	687a      	ldr	r2, [r7, #4]
  40148c:	605a      	str	r2, [r3, #4]
  40148e:	e000      	b.n	401492 <pio_set_peripheral+0x106>
		/* Other types are invalid in this function */
	case PIO_INPUT:
	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
  401490:	bf00      	nop
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
}
  401492:	371c      	adds	r7, #28
  401494:	46bd      	mov	sp, r7
  401496:	f85d 7b04 	ldr.w	r7, [sp], #4
  40149a:	4770      	bx	lr

0040149c <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  40149c:	b580      	push	{r7, lr}
  40149e:	b084      	sub	sp, #16
  4014a0:	af00      	add	r7, sp, #0
  4014a2:	60f8      	str	r0, [r7, #12]
  4014a4:	60b9      	str	r1, [r7, #8]
  4014a6:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  4014a8:	68b9      	ldr	r1, [r7, #8]
  4014aa:	68f8      	ldr	r0, [r7, #12]
  4014ac:	4b19      	ldr	r3, [pc, #100]	; (401514 <pio_set_input+0x78>)
  4014ae:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  4014b0:	687b      	ldr	r3, [r7, #4]
  4014b2:	f003 0301 	and.w	r3, r3, #1
  4014b6:	461a      	mov	r2, r3
  4014b8:	68b9      	ldr	r1, [r7, #8]
  4014ba:	68f8      	ldr	r0, [r7, #12]
  4014bc:	4b16      	ldr	r3, [pc, #88]	; (401518 <pio_set_input+0x7c>)
  4014be:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  4014c0:	687b      	ldr	r3, [r7, #4]
  4014c2:	f003 030a 	and.w	r3, r3, #10
  4014c6:	2b00      	cmp	r3, #0
  4014c8:	d003      	beq.n	4014d2 <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  4014ca:	68fb      	ldr	r3, [r7, #12]
  4014cc:	68ba      	ldr	r2, [r7, #8]
  4014ce:	621a      	str	r2, [r3, #32]
  4014d0:	e002      	b.n	4014d8 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  4014d2:	68fb      	ldr	r3, [r7, #12]
  4014d4:	68ba      	ldr	r2, [r7, #8]
  4014d6:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  4014d8:	687b      	ldr	r3, [r7, #4]
  4014da:	f003 0302 	and.w	r3, r3, #2
  4014de:	2b00      	cmp	r3, #0
  4014e0:	d004      	beq.n	4014ec <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  4014e2:	68fb      	ldr	r3, [r7, #12]
  4014e4:	68ba      	ldr	r2, [r7, #8]
  4014e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  4014ea:	e008      	b.n	4014fe <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  4014ec:	687b      	ldr	r3, [r7, #4]
  4014ee:	f003 0308 	and.w	r3, r3, #8
  4014f2:	2b00      	cmp	r3, #0
  4014f4:	d003      	beq.n	4014fe <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  4014f6:	68fb      	ldr	r3, [r7, #12]
  4014f8:	68ba      	ldr	r2, [r7, #8]
  4014fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  4014fe:	68fb      	ldr	r3, [r7, #12]
  401500:	68ba      	ldr	r2, [r7, #8]
  401502:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  401504:	68fb      	ldr	r3, [r7, #12]
  401506:	68ba      	ldr	r2, [r7, #8]
  401508:	601a      	str	r2, [r3, #0]
}
  40150a:	bf00      	nop
  40150c:	3710      	adds	r7, #16
  40150e:	46bd      	mov	sp, r7
  401510:	bd80      	pop	{r7, pc}
  401512:	bf00      	nop
  401514:	00401581 	.word	0x00401581
  401518:	00401361 	.word	0x00401361

0040151c <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  40151c:	b580      	push	{r7, lr}
  40151e:	b084      	sub	sp, #16
  401520:	af00      	add	r7, sp, #0
  401522:	60f8      	str	r0, [r7, #12]
  401524:	60b9      	str	r1, [r7, #8]
  401526:	607a      	str	r2, [r7, #4]
  401528:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  40152a:	68b9      	ldr	r1, [r7, #8]
  40152c:	68f8      	ldr	r0, [r7, #12]
  40152e:	4b12      	ldr	r3, [pc, #72]	; (401578 <pio_set_output+0x5c>)
  401530:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  401532:	69ba      	ldr	r2, [r7, #24]
  401534:	68b9      	ldr	r1, [r7, #8]
  401536:	68f8      	ldr	r0, [r7, #12]
  401538:	4b10      	ldr	r3, [pc, #64]	; (40157c <pio_set_output+0x60>)
  40153a:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  40153c:	683b      	ldr	r3, [r7, #0]
  40153e:	2b00      	cmp	r3, #0
  401540:	d003      	beq.n	40154a <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  401542:	68fb      	ldr	r3, [r7, #12]
  401544:	68ba      	ldr	r2, [r7, #8]
  401546:	651a      	str	r2, [r3, #80]	; 0x50
  401548:	e002      	b.n	401550 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  40154a:	68fb      	ldr	r3, [r7, #12]
  40154c:	68ba      	ldr	r2, [r7, #8]
  40154e:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  401550:	687b      	ldr	r3, [r7, #4]
  401552:	2b00      	cmp	r3, #0
  401554:	d003      	beq.n	40155e <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  401556:	68fb      	ldr	r3, [r7, #12]
  401558:	68ba      	ldr	r2, [r7, #8]
  40155a:	631a      	str	r2, [r3, #48]	; 0x30
  40155c:	e002      	b.n	401564 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  40155e:	68fb      	ldr	r3, [r7, #12]
  401560:	68ba      	ldr	r2, [r7, #8]
  401562:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  401564:	68fb      	ldr	r3, [r7, #12]
  401566:	68ba      	ldr	r2, [r7, #8]
  401568:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  40156a:	68fb      	ldr	r3, [r7, #12]
  40156c:	68ba      	ldr	r2, [r7, #8]
  40156e:	601a      	str	r2, [r3, #0]
}
  401570:	bf00      	nop
  401572:	3710      	adds	r7, #16
  401574:	46bd      	mov	sp, r7
  401576:	bd80      	pop	{r7, pc}
  401578:	00401581 	.word	0x00401581
  40157c:	00401361 	.word	0x00401361

00401580 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  401580:	b480      	push	{r7}
  401582:	b083      	sub	sp, #12
  401584:	af00      	add	r7, sp, #0
  401586:	6078      	str	r0, [r7, #4]
  401588:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  40158a:	687b      	ldr	r3, [r7, #4]
  40158c:	683a      	ldr	r2, [r7, #0]
  40158e:	645a      	str	r2, [r3, #68]	; 0x44
}
  401590:	bf00      	nop
  401592:	370c      	adds	r7, #12
  401594:	46bd      	mov	sp, r7
  401596:	f85d 7b04 	ldr.w	r7, [sp], #4
  40159a:	4770      	bx	lr

0040159c <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  40159c:	b480      	push	{r7}
  40159e:	b083      	sub	sp, #12
  4015a0:	af00      	add	r7, sp, #0
  4015a2:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  4015a4:	687b      	ldr	r3, [r7, #4]
  4015a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  4015a8:	4618      	mov	r0, r3
  4015aa:	370c      	adds	r7, #12
  4015ac:	46bd      	mov	sp, r7
  4015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
  4015b2:	4770      	bx	lr

004015b4 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  4015b4:	b480      	push	{r7}
  4015b6:	b083      	sub	sp, #12
  4015b8:	af00      	add	r7, sp, #0
  4015ba:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  4015bc:	687b      	ldr	r3, [r7, #4]
  4015be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  4015c0:	4618      	mov	r0, r3
  4015c2:	370c      	adds	r7, #12
  4015c4:	46bd      	mov	sp, r7
  4015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4015ca:	4770      	bx	lr

004015cc <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4015cc:	b580      	push	{r7, lr}
  4015ce:	b084      	sub	sp, #16
  4015d0:	af00      	add	r7, sp, #0
  4015d2:	6078      	str	r0, [r7, #4]
  4015d4:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4015d6:	6878      	ldr	r0, [r7, #4]
  4015d8:	4b26      	ldr	r3, [pc, #152]	; (401674 <pio_handler_process+0xa8>)
  4015da:	4798      	blx	r3
  4015dc:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  4015de:	6878      	ldr	r0, [r7, #4]
  4015e0:	4b25      	ldr	r3, [pc, #148]	; (401678 <pio_handler_process+0xac>)
  4015e2:	4798      	blx	r3
  4015e4:	4602      	mov	r2, r0
  4015e6:	68fb      	ldr	r3, [r7, #12]
  4015e8:	4013      	ands	r3, r2
  4015ea:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  4015ec:	68fb      	ldr	r3, [r7, #12]
  4015ee:	2b00      	cmp	r3, #0
  4015f0:	d03c      	beq.n	40166c <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  4015f2:	2300      	movs	r3, #0
  4015f4:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  4015f6:	e034      	b.n	401662 <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  4015f8:	4a20      	ldr	r2, [pc, #128]	; (40167c <pio_handler_process+0xb0>)
  4015fa:	68bb      	ldr	r3, [r7, #8]
  4015fc:	011b      	lsls	r3, r3, #4
  4015fe:	4413      	add	r3, r2
  401600:	681a      	ldr	r2, [r3, #0]
  401602:	683b      	ldr	r3, [r7, #0]
  401604:	429a      	cmp	r2, r3
  401606:	d126      	bne.n	401656 <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401608:	4a1c      	ldr	r2, [pc, #112]	; (40167c <pio_handler_process+0xb0>)
  40160a:	68bb      	ldr	r3, [r7, #8]
  40160c:	011b      	lsls	r3, r3, #4
  40160e:	4413      	add	r3, r2
  401610:	3304      	adds	r3, #4
  401612:	681a      	ldr	r2, [r3, #0]
  401614:	68fb      	ldr	r3, [r7, #12]
  401616:	4013      	ands	r3, r2
  401618:	2b00      	cmp	r3, #0
  40161a:	d01c      	beq.n	401656 <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40161c:	4a17      	ldr	r2, [pc, #92]	; (40167c <pio_handler_process+0xb0>)
  40161e:	68bb      	ldr	r3, [r7, #8]
  401620:	011b      	lsls	r3, r3, #4
  401622:	4413      	add	r3, r2
  401624:	330c      	adds	r3, #12
  401626:	681b      	ldr	r3, [r3, #0]
  401628:	4914      	ldr	r1, [pc, #80]	; (40167c <pio_handler_process+0xb0>)
  40162a:	68ba      	ldr	r2, [r7, #8]
  40162c:	0112      	lsls	r2, r2, #4
  40162e:	440a      	add	r2, r1
  401630:	6810      	ldr	r0, [r2, #0]
  401632:	4912      	ldr	r1, [pc, #72]	; (40167c <pio_handler_process+0xb0>)
  401634:	68ba      	ldr	r2, [r7, #8]
  401636:	0112      	lsls	r2, r2, #4
  401638:	440a      	add	r2, r1
  40163a:	3204      	adds	r2, #4
  40163c:	6812      	ldr	r2, [r2, #0]
  40163e:	4611      	mov	r1, r2
  401640:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  401642:	4a0e      	ldr	r2, [pc, #56]	; (40167c <pio_handler_process+0xb0>)
  401644:	68bb      	ldr	r3, [r7, #8]
  401646:	011b      	lsls	r3, r3, #4
  401648:	4413      	add	r3, r2
  40164a:	3304      	adds	r3, #4
  40164c:	681b      	ldr	r3, [r3, #0]
  40164e:	43db      	mvns	r3, r3
  401650:	68fa      	ldr	r2, [r7, #12]
  401652:	4013      	ands	r3, r2
  401654:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  401656:	68bb      	ldr	r3, [r7, #8]
  401658:	3301      	adds	r3, #1
  40165a:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  40165c:	68bb      	ldr	r3, [r7, #8]
  40165e:	2b06      	cmp	r3, #6
  401660:	d803      	bhi.n	40166a <pio_handler_process+0x9e>

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  401662:	68fb      	ldr	r3, [r7, #12]
  401664:	2b00      	cmp	r3, #0
  401666:	d1c7      	bne.n	4015f8 <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
  401668:	e000      	b.n	40166c <pio_handler_process+0xa0>
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
				break;
  40166a:	bf00      	nop
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
  40166c:	bf00      	nop
  40166e:	3710      	adds	r7, #16
  401670:	46bd      	mov	sp, r7
  401672:	bd80      	pop	{r7, pc}
  401674:	0040159d 	.word	0x0040159d
  401678:	004015b5 	.word	0x004015b5
  40167c:	204009fc 	.word	0x204009fc

00401680 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  401680:	b580      	push	{r7, lr}
  401682:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  401684:	210a      	movs	r1, #10
  401686:	4802      	ldr	r0, [pc, #8]	; (401690 <PIOA_Handler+0x10>)
  401688:	4b02      	ldr	r3, [pc, #8]	; (401694 <PIOA_Handler+0x14>)
  40168a:	4798      	blx	r3
}
  40168c:	bf00      	nop
  40168e:	bd80      	pop	{r7, pc}
  401690:	400e0e00 	.word	0x400e0e00
  401694:	004015cd 	.word	0x004015cd

00401698 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  401698:	b580      	push	{r7, lr}
  40169a:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  40169c:	210b      	movs	r1, #11
  40169e:	4802      	ldr	r0, [pc, #8]	; (4016a8 <PIOB_Handler+0x10>)
  4016a0:	4b02      	ldr	r3, [pc, #8]	; (4016ac <PIOB_Handler+0x14>)
  4016a2:	4798      	blx	r3
}
  4016a4:	bf00      	nop
  4016a6:	bd80      	pop	{r7, pc}
  4016a8:	400e1000 	.word	0x400e1000
  4016ac:	004015cd 	.word	0x004015cd

004016b0 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4016b0:	b580      	push	{r7, lr}
  4016b2:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
  4016b4:	210c      	movs	r1, #12
  4016b6:	4802      	ldr	r0, [pc, #8]	; (4016c0 <PIOC_Handler+0x10>)
  4016b8:	4b02      	ldr	r3, [pc, #8]	; (4016c4 <PIOC_Handler+0x14>)
  4016ba:	4798      	blx	r3
}
  4016bc:	bf00      	nop
  4016be:	bd80      	pop	{r7, pc}
  4016c0:	400e1200 	.word	0x400e1200
  4016c4:	004015cd 	.word	0x004015cd

004016c8 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  4016c8:	b580      	push	{r7, lr}
  4016ca:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
  4016cc:	2110      	movs	r1, #16
  4016ce:	4802      	ldr	r0, [pc, #8]	; (4016d8 <PIOD_Handler+0x10>)
  4016d0:	4b02      	ldr	r3, [pc, #8]	; (4016dc <PIOD_Handler+0x14>)
  4016d2:	4798      	blx	r3
}
  4016d4:	bf00      	nop
  4016d6:	bd80      	pop	{r7, pc}
  4016d8:	400e1400 	.word	0x400e1400
  4016dc:	004015cd 	.word	0x004015cd

004016e0 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  4016e0:	b580      	push	{r7, lr}
  4016e2:	af00      	add	r7, sp, #0
	pio_handler_process(PIOE, ID_PIOE);
  4016e4:	2111      	movs	r1, #17
  4016e6:	4802      	ldr	r0, [pc, #8]	; (4016f0 <PIOE_Handler+0x10>)
  4016e8:	4b02      	ldr	r3, [pc, #8]	; (4016f4 <PIOE_Handler+0x14>)
  4016ea:	4798      	blx	r3
}
  4016ec:	bf00      	nop
  4016ee:	bd80      	pop	{r7, pc}
  4016f0:	400e1600 	.word	0x400e1600
  4016f4:	004015cd 	.word	0x004015cd

004016f8 <pmc_mck_set_division>:
 * \brief Set the division of the MCK.
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
  4016f8:	b480      	push	{r7}
  4016fa:	b083      	sub	sp, #12
  4016fc:	af00      	add	r7, sp, #0
  4016fe:	6078      	str	r0, [r7, #4]
	switch (ul_div) {
  401700:	687b      	ldr	r3, [r7, #4]
  401702:	3b01      	subs	r3, #1
  401704:	2b03      	cmp	r3, #3
  401706:	d81a      	bhi.n	40173e <pmc_mck_set_division+0x46>
  401708:	a201      	add	r2, pc, #4	; (adr r2, 401710 <pmc_mck_set_division+0x18>)
  40170a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40170e:	bf00      	nop
  401710:	00401721 	.word	0x00401721
  401714:	00401727 	.word	0x00401727
  401718:	0040172f 	.word	0x0040172f
  40171c:	00401737 	.word	0x00401737
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  401720:	2300      	movs	r3, #0
  401722:	607b      	str	r3, [r7, #4]
			break;
  401724:	e00e      	b.n	401744 <pmc_mck_set_division+0x4c>
		case 2:
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
  401726:	f44f 7380 	mov.w	r3, #256	; 0x100
  40172a:	607b      	str	r3, [r7, #4]
			break;
  40172c:	e00a      	b.n	401744 <pmc_mck_set_division+0x4c>
		case 3:
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  40172e:	f44f 7340 	mov.w	r3, #768	; 0x300
  401732:	607b      	str	r3, [r7, #4]
			break;
  401734:	e006      	b.n	401744 <pmc_mck_set_division+0x4c>
		case 4:
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  401736:	f44f 7300 	mov.w	r3, #512	; 0x200
  40173a:	607b      	str	r3, [r7, #4]
			break;
  40173c:	e002      	b.n	401744 <pmc_mck_set_division+0x4c>
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  40173e:	2300      	movs	r3, #0
  401740:	607b      	str	r3, [r7, #4]
			break;
  401742:	bf00      	nop
	}
	PMC->PMC_MCKR =
  401744:	490a      	ldr	r1, [pc, #40]	; (401770 <pmc_mck_set_division+0x78>)
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  401746:	4b0a      	ldr	r3, [pc, #40]	; (401770 <pmc_mck_set_division+0x78>)
  401748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40174a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  40174e:	687b      	ldr	r3, [r7, #4]
  401750:	4313      	orrs	r3, r2
			break;
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
  401752:	630b      	str	r3, [r1, #48]	; 0x30
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  401754:	bf00      	nop
  401756:	4b06      	ldr	r3, [pc, #24]	; (401770 <pmc_mck_set_division+0x78>)
  401758:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40175a:	f003 0308 	and.w	r3, r3, #8
  40175e:	2b00      	cmp	r3, #0
  401760:	d0f9      	beq.n	401756 <pmc_mck_set_division+0x5e>
}
  401762:	bf00      	nop
  401764:	370c      	adds	r7, #12
  401766:	46bd      	mov	sp, r7
  401768:	f85d 7b04 	ldr.w	r7, [sp], #4
  40176c:	4770      	bx	lr
  40176e:	bf00      	nop
  401770:	400e0600 	.word	0x400e0600

00401774 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  401774:	b480      	push	{r7}
  401776:	b085      	sub	sp, #20
  401778:	af00      	add	r7, sp, #0
  40177a:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  40177c:	491d      	ldr	r1, [pc, #116]	; (4017f4 <pmc_switch_mck_to_pllack+0x80>)
  40177e:	4b1d      	ldr	r3, [pc, #116]	; (4017f4 <pmc_switch_mck_to_pllack+0x80>)
  401780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401782:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  401786:	687b      	ldr	r3, [r7, #4]
  401788:	4313      	orrs	r3, r2
  40178a:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40178c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401790:	60fb      	str	r3, [r7, #12]
  401792:	e007      	b.n	4017a4 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401794:	68fb      	ldr	r3, [r7, #12]
  401796:	2b00      	cmp	r3, #0
  401798:	d101      	bne.n	40179e <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  40179a:	2301      	movs	r3, #1
  40179c:	e023      	b.n	4017e6 <pmc_switch_mck_to_pllack+0x72>
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  40179e:	68fb      	ldr	r3, [r7, #12]
  4017a0:	3b01      	subs	r3, #1
  4017a2:	60fb      	str	r3, [r7, #12]
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4017a4:	4b13      	ldr	r3, [pc, #76]	; (4017f4 <pmc_switch_mck_to_pllack+0x80>)
  4017a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4017a8:	f003 0308 	and.w	r3, r3, #8
  4017ac:	2b00      	cmp	r3, #0
  4017ae:	d0f1      	beq.n	401794 <pmc_switch_mck_to_pllack+0x20>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4017b0:	4a10      	ldr	r2, [pc, #64]	; (4017f4 <pmc_switch_mck_to_pllack+0x80>)
  4017b2:	4b10      	ldr	r3, [pc, #64]	; (4017f4 <pmc_switch_mck_to_pllack+0x80>)
  4017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4017b6:	f023 0303 	bic.w	r3, r3, #3
  4017ba:	f043 0302 	orr.w	r3, r3, #2
  4017be:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4017c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4017c4:	60fb      	str	r3, [r7, #12]
  4017c6:	e007      	b.n	4017d8 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4017c8:	68fb      	ldr	r3, [r7, #12]
  4017ca:	2b00      	cmp	r3, #0
  4017cc:	d101      	bne.n	4017d2 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  4017ce:	2301      	movs	r3, #1
  4017d0:	e009      	b.n	4017e6 <pmc_switch_mck_to_pllack+0x72>

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  4017d2:	68fb      	ldr	r3, [r7, #12]
  4017d4:	3b01      	subs	r3, #1
  4017d6:	60fb      	str	r3, [r7, #12]
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4017d8:	4b06      	ldr	r3, [pc, #24]	; (4017f4 <pmc_switch_mck_to_pllack+0x80>)
  4017da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4017dc:	f003 0308 	and.w	r3, r3, #8
  4017e0:	2b00      	cmp	r3, #0
  4017e2:	d0f1      	beq.n	4017c8 <pmc_switch_mck_to_pllack+0x54>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  4017e4:	2300      	movs	r3, #0
}
  4017e6:	4618      	mov	r0, r3
  4017e8:	3714      	adds	r7, #20
  4017ea:	46bd      	mov	sp, r7
  4017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
  4017f0:	4770      	bx	lr
  4017f2:	bf00      	nop
  4017f4:	400e0600 	.word	0x400e0600

004017f8 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  4017f8:	b480      	push	{r7}
  4017fa:	b083      	sub	sp, #12
  4017fc:	af00      	add	r7, sp, #0
  4017fe:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  401800:	687b      	ldr	r3, [r7, #4]
  401802:	2b01      	cmp	r3, #1
  401804:	d105      	bne.n	401812 <pmc_switch_sclk_to_32kxtal+0x1a>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  401806:	4907      	ldr	r1, [pc, #28]	; (401824 <pmc_switch_sclk_to_32kxtal+0x2c>)
  401808:	4b06      	ldr	r3, [pc, #24]	; (401824 <pmc_switch_sclk_to_32kxtal+0x2c>)
  40180a:	689a      	ldr	r2, [r3, #8]
  40180c:	4b06      	ldr	r3, [pc, #24]	; (401828 <pmc_switch_sclk_to_32kxtal+0x30>)
  40180e:	4313      	orrs	r3, r2
  401810:	608b      	str	r3, [r1, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  401812:	4b04      	ldr	r3, [pc, #16]	; (401824 <pmc_switch_sclk_to_32kxtal+0x2c>)
  401814:	4a05      	ldr	r2, [pc, #20]	; (40182c <pmc_switch_sclk_to_32kxtal+0x34>)
  401816:	601a      	str	r2, [r3, #0]
}
  401818:	bf00      	nop
  40181a:	370c      	adds	r7, #12
  40181c:	46bd      	mov	sp, r7
  40181e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401822:	4770      	bx	lr
  401824:	400e1810 	.word	0x400e1810
  401828:	a5100000 	.word	0xa5100000
  40182c:	a5000008 	.word	0xa5000008

00401830 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  401830:	b480      	push	{r7}
  401832:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  401834:	4b09      	ldr	r3, [pc, #36]	; (40185c <pmc_osc_is_ready_32kxtal+0x2c>)
  401836:	695b      	ldr	r3, [r3, #20]
  401838:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  40183c:	2b00      	cmp	r3, #0
  40183e:	d007      	beq.n	401850 <pmc_osc_is_ready_32kxtal+0x20>
  401840:	4b07      	ldr	r3, [pc, #28]	; (401860 <pmc_osc_is_ready_32kxtal+0x30>)
  401842:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401844:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401848:	2b00      	cmp	r3, #0
  40184a:	d001      	beq.n	401850 <pmc_osc_is_ready_32kxtal+0x20>
  40184c:	2301      	movs	r3, #1
  40184e:	e000      	b.n	401852 <pmc_osc_is_ready_32kxtal+0x22>
  401850:	2300      	movs	r3, #0
}
  401852:	4618      	mov	r0, r3
  401854:	46bd      	mov	sp, r7
  401856:	f85d 7b04 	ldr.w	r7, [sp], #4
  40185a:	4770      	bx	lr
  40185c:	400e1810 	.word	0x400e1810
  401860:	400e0600 	.word	0x400e0600

00401864 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  401864:	b480      	push	{r7}
  401866:	b083      	sub	sp, #12
  401868:	af00      	add	r7, sp, #0
  40186a:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  40186c:	4915      	ldr	r1, [pc, #84]	; (4018c4 <pmc_switch_mainck_to_fastrc+0x60>)
  40186e:	4b15      	ldr	r3, [pc, #84]	; (4018c4 <pmc_switch_mainck_to_fastrc+0x60>)
  401870:	6a1a      	ldr	r2, [r3, #32]
  401872:	4b15      	ldr	r3, [pc, #84]	; (4018c8 <pmc_switch_mainck_to_fastrc+0x64>)
  401874:	4313      	orrs	r3, r2
  401876:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  401878:	bf00      	nop
  40187a:	4b12      	ldr	r3, [pc, #72]	; (4018c4 <pmc_switch_mainck_to_fastrc+0x60>)
  40187c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40187e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  401882:	2b00      	cmp	r3, #0
  401884:	d0f9      	beq.n	40187a <pmc_switch_mainck_to_fastrc+0x16>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  401886:	490f      	ldr	r1, [pc, #60]	; (4018c4 <pmc_switch_mainck_to_fastrc+0x60>)
  401888:	4b0e      	ldr	r3, [pc, #56]	; (4018c4 <pmc_switch_mainck_to_fastrc+0x60>)
  40188a:	6a1a      	ldr	r2, [r3, #32]
  40188c:	4b0f      	ldr	r3, [pc, #60]	; (4018cc <pmc_switch_mainck_to_fastrc+0x68>)
  40188e:	4013      	ands	r3, r2
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  401890:	687a      	ldr	r2, [r7, #4]
  401892:	4313      	orrs	r3, r2
  401894:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  401898:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  40189a:	bf00      	nop
  40189c:	4b09      	ldr	r3, [pc, #36]	; (4018c4 <pmc_switch_mainck_to_fastrc+0x60>)
  40189e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4018a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  4018a4:	2b00      	cmp	r3, #0
  4018a6:	d0f9      	beq.n	40189c <pmc_switch_mainck_to_fastrc+0x38>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  4018a8:	4906      	ldr	r1, [pc, #24]	; (4018c4 <pmc_switch_mainck_to_fastrc+0x60>)
  4018aa:	4b06      	ldr	r3, [pc, #24]	; (4018c4 <pmc_switch_mainck_to_fastrc+0x60>)
  4018ac:	6a1a      	ldr	r2, [r3, #32]
  4018ae:	4b08      	ldr	r3, [pc, #32]	; (4018d0 <pmc_switch_mainck_to_fastrc+0x6c>)
  4018b0:	4013      	ands	r3, r2
  4018b2:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4018b6:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD;
}
  4018b8:	bf00      	nop
  4018ba:	370c      	adds	r7, #12
  4018bc:	46bd      	mov	sp, r7
  4018be:	f85d 7b04 	ldr.w	r7, [sp], #4
  4018c2:	4770      	bx	lr
  4018c4:	400e0600 	.word	0x400e0600
  4018c8:	00370008 	.word	0x00370008
  4018cc:	ffc8ff8f 	.word	0xffc8ff8f
  4018d0:	fec8ffff 	.word	0xfec8ffff

004018d4 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  4018d4:	b480      	push	{r7}
  4018d6:	b083      	sub	sp, #12
  4018d8:	af00      	add	r7, sp, #0
  4018da:	6078      	str	r0, [r7, #4]
  4018dc:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4018de:	687b      	ldr	r3, [r7, #4]
  4018e0:	2b00      	cmp	r3, #0
  4018e2:	d008      	beq.n	4018f6 <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4018e4:	4913      	ldr	r1, [pc, #76]	; (401934 <pmc_switch_mainck_to_xtal+0x60>)
  4018e6:	4b13      	ldr	r3, [pc, #76]	; (401934 <pmc_switch_mainck_to_xtal+0x60>)
  4018e8:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4018ea:	4a13      	ldr	r2, [pc, #76]	; (401938 <pmc_switch_mainck_to_xtal+0x64>)
  4018ec:	401a      	ands	r2, r3
  4018ee:	4b13      	ldr	r3, [pc, #76]	; (40193c <pmc_switch_mainck_to_xtal+0x68>)
  4018f0:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4018f2:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  4018f4:	e018      	b.n	401928 <pmc_switch_mainck_to_xtal+0x54>
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4018f6:	490f      	ldr	r1, [pc, #60]	; (401934 <pmc_switch_mainck_to_xtal+0x60>)
  4018f8:	4b0e      	ldr	r3, [pc, #56]	; (401934 <pmc_switch_mainck_to_xtal+0x60>)
  4018fa:	6a1a      	ldr	r2, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4018fc:	4b10      	ldr	r3, [pc, #64]	; (401940 <pmc_switch_mainck_to_xtal+0x6c>)
  4018fe:	4013      	ands	r3, r2
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  401900:	683a      	ldr	r2, [r7, #0]
  401902:	0212      	lsls	r2, r2, #8
  401904:	b292      	uxth	r2, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401906:	431a      	orrs	r2, r3
  401908:	4b0e      	ldr	r3, [pc, #56]	; (401944 <pmc_switch_mainck_to_xtal+0x70>)
  40190a:	4313      	orrs	r3, r2
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40190c:	620b      	str	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40190e:	bf00      	nop
  401910:	4b08      	ldr	r3, [pc, #32]	; (401934 <pmc_switch_mainck_to_xtal+0x60>)
  401912:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401914:	f003 0301 	and.w	r3, r3, #1
  401918:	2b00      	cmp	r3, #0
  40191a:	d0f9      	beq.n	401910 <pmc_switch_mainck_to_xtal+0x3c>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  40191c:	4905      	ldr	r1, [pc, #20]	; (401934 <pmc_switch_mainck_to_xtal+0x60>)
  40191e:	4b05      	ldr	r3, [pc, #20]	; (401934 <pmc_switch_mainck_to_xtal+0x60>)
  401920:	6a1a      	ldr	r2, [r3, #32]
  401922:	4b09      	ldr	r3, [pc, #36]	; (401948 <pmc_switch_mainck_to_xtal+0x74>)
  401924:	4313      	orrs	r3, r2
  401926:	620b      	str	r3, [r1, #32]
	}
}
  401928:	bf00      	nop
  40192a:	370c      	adds	r7, #12
  40192c:	46bd      	mov	sp, r7
  40192e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401932:	4770      	bx	lr
  401934:	400e0600 	.word	0x400e0600
  401938:	fec8fffc 	.word	0xfec8fffc
  40193c:	01370002 	.word	0x01370002
  401940:	ffc8fffc 	.word	0xffc8fffc
  401944:	00370001 	.word	0x00370001
  401948:	01370000 	.word	0x01370000

0040194c <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  40194c:	b480      	push	{r7}
  40194e:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401950:	4b04      	ldr	r3, [pc, #16]	; (401964 <pmc_osc_is_ready_mainck+0x18>)
  401952:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401954:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  401958:	4618      	mov	r0, r3
  40195a:	46bd      	mov	sp, r7
  40195c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401960:	4770      	bx	lr
  401962:	bf00      	nop
  401964:	400e0600 	.word	0x400e0600

00401968 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  401968:	b480      	push	{r7}
  40196a:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  40196c:	4b04      	ldr	r3, [pc, #16]	; (401980 <pmc_disable_pllack+0x18>)
  40196e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401972:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  401974:	bf00      	nop
  401976:	46bd      	mov	sp, r7
  401978:	f85d 7b04 	ldr.w	r7, [sp], #4
  40197c:	4770      	bx	lr
  40197e:	bf00      	nop
  401980:	400e0600 	.word	0x400e0600

00401984 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  401984:	b480      	push	{r7}
  401986:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  401988:	4b04      	ldr	r3, [pc, #16]	; (40199c <pmc_is_locked_pllack+0x18>)
  40198a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40198c:	f003 0302 	and.w	r3, r3, #2
}
  401990:	4618      	mov	r0, r3
  401992:	46bd      	mov	sp, r7
  401994:	f85d 7b04 	ldr.w	r7, [sp], #4
  401998:	4770      	bx	lr
  40199a:	bf00      	nop
  40199c:	400e0600 	.word	0x400e0600

004019a0 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
  4019a0:	b480      	push	{r7}
  4019a2:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
  4019a4:	4b04      	ldr	r3, [pc, #16]	; (4019b8 <pmc_is_locked_upll+0x18>)
  4019a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4019a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
  4019ac:	4618      	mov	r0, r3
  4019ae:	46bd      	mov	sp, r7
  4019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4019b4:	4770      	bx	lr
  4019b6:	bf00      	nop
  4019b8:	400e0600 	.word	0x400e0600

004019bc <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  4019bc:	b480      	push	{r7}
  4019be:	b083      	sub	sp, #12
  4019c0:	af00      	add	r7, sp, #0
  4019c2:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  4019c4:	687b      	ldr	r3, [r7, #4]
  4019c6:	2b3f      	cmp	r3, #63	; 0x3f
  4019c8:	d901      	bls.n	4019ce <pmc_enable_periph_clk+0x12>
		return 1;
  4019ca:	2301      	movs	r3, #1
  4019cc:	e02f      	b.n	401a2e <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  4019ce:	687b      	ldr	r3, [r7, #4]
  4019d0:	2b1f      	cmp	r3, #31
  4019d2:	d813      	bhi.n	4019fc <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4019d4:	4b19      	ldr	r3, [pc, #100]	; (401a3c <pmc_enable_periph_clk+0x80>)
  4019d6:	699a      	ldr	r2, [r3, #24]
  4019d8:	2101      	movs	r1, #1
  4019da:	687b      	ldr	r3, [r7, #4]
  4019dc:	fa01 f303 	lsl.w	r3, r1, r3
  4019e0:	401a      	ands	r2, r3
  4019e2:	2101      	movs	r1, #1
  4019e4:	687b      	ldr	r3, [r7, #4]
  4019e6:	fa01 f303 	lsl.w	r3, r1, r3
  4019ea:	429a      	cmp	r2, r3
  4019ec:	d01e      	beq.n	401a2c <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  4019ee:	4a13      	ldr	r2, [pc, #76]	; (401a3c <pmc_enable_periph_clk+0x80>)
  4019f0:	2101      	movs	r1, #1
  4019f2:	687b      	ldr	r3, [r7, #4]
  4019f4:	fa01 f303 	lsl.w	r3, r1, r3
  4019f8:	6113      	str	r3, [r2, #16]
  4019fa:	e017      	b.n	401a2c <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  4019fc:	687b      	ldr	r3, [r7, #4]
  4019fe:	3b20      	subs	r3, #32
  401a00:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  401a02:	4b0e      	ldr	r3, [pc, #56]	; (401a3c <pmc_enable_periph_clk+0x80>)
  401a04:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  401a08:	2101      	movs	r1, #1
  401a0a:	687b      	ldr	r3, [r7, #4]
  401a0c:	fa01 f303 	lsl.w	r3, r1, r3
  401a10:	401a      	ands	r2, r3
  401a12:	2101      	movs	r1, #1
  401a14:	687b      	ldr	r3, [r7, #4]
  401a16:	fa01 f303 	lsl.w	r3, r1, r3
  401a1a:	429a      	cmp	r2, r3
  401a1c:	d006      	beq.n	401a2c <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  401a1e:	4a07      	ldr	r2, [pc, #28]	; (401a3c <pmc_enable_periph_clk+0x80>)
  401a20:	2101      	movs	r1, #1
  401a22:	687b      	ldr	r3, [r7, #4]
  401a24:	fa01 f303 	lsl.w	r3, r1, r3
  401a28:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  401a2c:	2300      	movs	r3, #0
}
  401a2e:	4618      	mov	r0, r3
  401a30:	370c      	adds	r7, #12
  401a32:	46bd      	mov	sp, r7
  401a34:	f85d 7b04 	ldr.w	r7, [sp], #4
  401a38:	4770      	bx	lr
  401a3a:	bf00      	nop
  401a3c:	400e0600 	.word	0x400e0600

00401a40 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  401a40:	b480      	push	{r7}
  401a42:	b087      	sub	sp, #28
  401a44:	af00      	add	r7, sp, #0
  401a46:	60f8      	str	r0, [r7, #12]
  401a48:	60b9      	str	r1, [r7, #8]
  401a4a:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  401a4c:	68fa      	ldr	r2, [r7, #12]
  401a4e:	68bb      	ldr	r3, [r7, #8]
  401a50:	019b      	lsls	r3, r3, #6
  401a52:	4413      	add	r3, r2
  401a54:	617b      	str	r3, [r7, #20]

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  401a56:	697b      	ldr	r3, [r7, #20]
  401a58:	2202      	movs	r2, #2
  401a5a:	601a      	str	r2, [r3, #0]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  401a5c:	697b      	ldr	r3, [r7, #20]
  401a5e:	f04f 32ff 	mov.w	r2, #4294967295
  401a62:	629a      	str	r2, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  401a64:	697b      	ldr	r3, [r7, #20]
  401a66:	6a1b      	ldr	r3, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  401a68:	697b      	ldr	r3, [r7, #20]
  401a6a:	687a      	ldr	r2, [r7, #4]
  401a6c:	605a      	str	r2, [r3, #4]
}
  401a6e:	bf00      	nop
  401a70:	371c      	adds	r7, #28
  401a72:	46bd      	mov	sp, r7
  401a74:	f85d 7b04 	ldr.w	r7, [sp], #4
  401a78:	4770      	bx	lr
  401a7a:	bf00      	nop

00401a7c <tc_start>:
 * \param[in] ul_channel Channel to configure
 */
void tc_start(
		Tc *p_tc,
		uint32_t ul_channel)
{
  401a7c:	b480      	push	{r7}
  401a7e:	b083      	sub	sp, #12
  401a80:	af00      	add	r7, sp, #0
  401a82:	6078      	str	r0, [r7, #4]
  401a84:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  401a86:	687a      	ldr	r2, [r7, #4]
  401a88:	683b      	ldr	r3, [r7, #0]
  401a8a:	019b      	lsls	r3, r3, #6
  401a8c:	4413      	add	r3, r2
  401a8e:	2205      	movs	r2, #5
  401a90:	601a      	str	r2, [r3, #0]
}
  401a92:	bf00      	nop
  401a94:	370c      	adds	r7, #12
  401a96:	46bd      	mov	sp, r7
  401a98:	f85d 7b04 	ldr.w	r7, [sp], #4
  401a9c:	4770      	bx	lr
  401a9e:	bf00      	nop

00401aa0 <tc_write_rc>:
 */
void tc_write_rc(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_value)
{
  401aa0:	b480      	push	{r7}
  401aa2:	b085      	sub	sp, #20
  401aa4:	af00      	add	r7, sp, #0
  401aa6:	60f8      	str	r0, [r7, #12]
  401aa8:	60b9      	str	r1, [r7, #8]
  401aaa:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  401aac:	68fa      	ldr	r2, [r7, #12]
  401aae:	68bb      	ldr	r3, [r7, #8]
  401ab0:	019b      	lsls	r3, r3, #6
  401ab2:	4413      	add	r3, r2
  401ab4:	331c      	adds	r3, #28
  401ab6:	687a      	ldr	r2, [r7, #4]
  401ab8:	601a      	str	r2, [r3, #0]
}
  401aba:	bf00      	nop
  401abc:	3714      	adds	r7, #20
  401abe:	46bd      	mov	sp, r7
  401ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
  401ac4:	4770      	bx	lr
  401ac6:	bf00      	nop

00401ac8 <tc_enable_interrupt>:
 */
void tc_enable_interrupt(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_sources)
{
  401ac8:	b480      	push	{r7}
  401aca:	b087      	sub	sp, #28
  401acc:	af00      	add	r7, sp, #0
  401ace:	60f8      	str	r0, [r7, #12]
  401ad0:	60b9      	str	r1, [r7, #8]
  401ad2:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  401ad4:	68fa      	ldr	r2, [r7, #12]
  401ad6:	68bb      	ldr	r3, [r7, #8]
  401ad8:	019b      	lsls	r3, r3, #6
  401ada:	4413      	add	r3, r2
  401adc:	617b      	str	r3, [r7, #20]
	tc_channel->TC_IER = ul_sources;
  401ade:	697b      	ldr	r3, [r7, #20]
  401ae0:	687a      	ldr	r2, [r7, #4]
  401ae2:	625a      	str	r2, [r3, #36]	; 0x24
}
  401ae4:	bf00      	nop
  401ae6:	371c      	adds	r7, #28
  401ae8:	46bd      	mov	sp, r7
  401aea:	f85d 7b04 	ldr.w	r7, [sp], #4
  401aee:	4770      	bx	lr

00401af0 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  401af0:	b480      	push	{r7}
  401af2:	b08d      	sub	sp, #52	; 0x34
  401af4:	af00      	add	r7, sp, #0
  401af6:	60f8      	str	r0, [r7, #12]
  401af8:	60b9      	str	r1, [r7, #8]
  401afa:	607a      	str	r2, [r7, #4]
  401afc:	603b      	str	r3, [r7, #0]
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  401afe:	2302      	movs	r3, #2
  401b00:	613b      	str	r3, [r7, #16]
  401b02:	2308      	movs	r3, #8
  401b04:	617b      	str	r3, [r7, #20]
  401b06:	2320      	movs	r3, #32
  401b08:	61bb      	str	r3, [r7, #24]
  401b0a:	2380      	movs	r3, #128	; 0x80
  401b0c:	61fb      	str	r3, [r7, #28]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  401b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  401b10:	0bdb      	lsrs	r3, r3, #15
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  401b12:	623b      	str	r3, [r7, #32]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
	uint32_t ul_index;
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
  401b14:	2300      	movs	r3, #0
  401b16:	62fb      	str	r3, [r7, #44]	; 0x2c
  401b18:	e01a      	b.n	401b50 <tc_find_mck_divisor+0x60>
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
  401b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401b1c:	009b      	lsls	r3, r3, #2
  401b1e:	f107 0230 	add.w	r2, r7, #48	; 0x30
  401b22:	4413      	add	r3, r2
  401b24:	f853 3c20 	ldr.w	r3, [r3, #-32]
  401b28:	68ba      	ldr	r2, [r7, #8]
  401b2a:	fbb2 f3f3 	udiv	r3, r2, r3
  401b2e:	62bb      	str	r3, [r7, #40]	; 0x28
		ul_low  = ul_high / TC_DIV_FACTOR;
  401b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
  401b32:	0c1b      	lsrs	r3, r3, #16
  401b34:	627b      	str	r3, [r7, #36]	; 0x24
		if (ul_freq > ul_high) {
  401b36:	68fa      	ldr	r2, [r7, #12]
  401b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
  401b3a:	429a      	cmp	r2, r3
  401b3c:	d901      	bls.n	401b42 <tc_find_mck_divisor+0x52>
			return 0;
  401b3e:	2300      	movs	r3, #0
  401b40:	e023      	b.n	401b8a <tc_find_mck_divisor+0x9a>
		} else if (ul_freq >= ul_low) {
  401b42:	68fa      	ldr	r2, [r7, #12]
  401b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401b46:	429a      	cmp	r2, r3
  401b48:	d206      	bcs.n	401b58 <tc_find_mck_divisor+0x68>
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
  401b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401b4c:	3301      	adds	r3, #1
  401b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
	uint32_t ul_index;
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
  401b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401b52:	2b04      	cmp	r3, #4
  401b54:	d9e1      	bls.n	401b1a <tc_find_mck_divisor+0x2a>
  401b56:	e000      	b.n	401b5a <tc_find_mck_divisor+0x6a>
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
			return 0;
		} else if (ul_freq >= ul_low) {
			break;
  401b58:	bf00      	nop
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
  401b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401b5c:	2b04      	cmp	r3, #4
  401b5e:	d901      	bls.n	401b64 <tc_find_mck_divisor+0x74>
		return 0;
  401b60:	2300      	movs	r3, #0
  401b62:	e012      	b.n	401b8a <tc_find_mck_divisor+0x9a>
	}

	/*  Store results. */
	if (p_uldiv) {
  401b64:	687b      	ldr	r3, [r7, #4]
  401b66:	2b00      	cmp	r3, #0
  401b68:	d008      	beq.n	401b7c <tc_find_mck_divisor+0x8c>
		*p_uldiv = divisors[ul_index];
  401b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401b6c:	009b      	lsls	r3, r3, #2
  401b6e:	f107 0230 	add.w	r2, r7, #48	; 0x30
  401b72:	4413      	add	r3, r2
  401b74:	f853 2c20 	ldr.w	r2, [r3, #-32]
  401b78:	687b      	ldr	r3, [r7, #4]
  401b7a:	601a      	str	r2, [r3, #0]
	}

	if (p_ultcclks) {
  401b7c:	683b      	ldr	r3, [r7, #0]
  401b7e:	2b00      	cmp	r3, #0
  401b80:	d002      	beq.n	401b88 <tc_find_mck_divisor+0x98>
		*p_ultcclks = ul_index;
  401b82:	683b      	ldr	r3, [r7, #0]
  401b84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
  401b86:	601a      	str	r2, [r3, #0]
	}

	return 1;
  401b88:	2301      	movs	r3, #1
}
  401b8a:	4618      	mov	r0, r3
  401b8c:	3734      	adds	r7, #52	; 0x34
  401b8e:	46bd      	mov	sp, r7
  401b90:	f85d 7b04 	ldr.w	r7, [sp], #4
  401b94:	4770      	bx	lr
  401b96:	bf00      	nop

00401b98 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  401b98:	b480      	push	{r7}
  401b9a:	b085      	sub	sp, #20
  401b9c:	af00      	add	r7, sp, #0
  401b9e:	6078      	str	r0, [r7, #4]
  401ba0:	6039      	str	r1, [r7, #0]
	uint32_t cd = 0;
  401ba2:	2300      	movs	r3, #0
  401ba4:	60fb      	str	r3, [r7, #12]

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  401ba6:	687b      	ldr	r3, [r7, #4]
  401ba8:	22ac      	movs	r2, #172	; 0xac
  401baa:	601a      	str	r2, [r3, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  401bac:	683b      	ldr	r3, [r7, #0]
  401bae:	681a      	ldr	r2, [r3, #0]
  401bb0:	683b      	ldr	r3, [r7, #0]
  401bb2:	685b      	ldr	r3, [r3, #4]
  401bb4:	fbb2 f3f3 	udiv	r3, r2, r3
  401bb8:	091b      	lsrs	r3, r3, #4
  401bba:	60fb      	str	r3, [r7, #12]
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  401bbc:	68fb      	ldr	r3, [r7, #12]
  401bbe:	2b00      	cmp	r3, #0
  401bc0:	d003      	beq.n	401bca <uart_init+0x32>
  401bc2:	68fb      	ldr	r3, [r7, #12]
  401bc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  401bc8:	d301      	bcc.n	401bce <uart_init+0x36>
		return 1;
  401bca:	2301      	movs	r3, #1
  401bcc:	e00a      	b.n	401be4 <uart_init+0x4c>

	p_uart->UART_BRGR = cd;
  401bce:	687b      	ldr	r3, [r7, #4]
  401bd0:	68fa      	ldr	r2, [r7, #12]
  401bd2:	621a      	str	r2, [r3, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  401bd4:	683b      	ldr	r3, [r7, #0]
  401bd6:	689a      	ldr	r2, [r3, #8]
  401bd8:	687b      	ldr	r3, [r7, #4]
  401bda:	605a      	str	r2, [r3, #4]
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  401bdc:	687b      	ldr	r3, [r7, #4]
  401bde:	2250      	movs	r2, #80	; 0x50
  401be0:	601a      	str	r2, [r3, #0]

	return 0;
  401be2:	2300      	movs	r3, #0
}
  401be4:	4618      	mov	r0, r3
  401be6:	3714      	adds	r7, #20
  401be8:	46bd      	mov	sp, r7
  401bea:	f85d 7b04 	ldr.w	r7, [sp], #4
  401bee:	4770      	bx	lr

00401bf0 <uart_write>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
  401bf0:	b480      	push	{r7}
  401bf2:	b083      	sub	sp, #12
  401bf4:	af00      	add	r7, sp, #0
  401bf6:	6078      	str	r0, [r7, #4]
  401bf8:	460b      	mov	r3, r1
  401bfa:	70fb      	strb	r3, [r7, #3]
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  401bfc:	687b      	ldr	r3, [r7, #4]
  401bfe:	695b      	ldr	r3, [r3, #20]
  401c00:	f003 0302 	and.w	r3, r3, #2
  401c04:	2b00      	cmp	r3, #0
  401c06:	d101      	bne.n	401c0c <uart_write+0x1c>
		return 1;
  401c08:	2301      	movs	r3, #1
  401c0a:	e003      	b.n	401c14 <uart_write+0x24>

	/* Send character */
	p_uart->UART_THR = uc_data;
  401c0c:	78fa      	ldrb	r2, [r7, #3]
  401c0e:	687b      	ldr	r3, [r7, #4]
  401c10:	61da      	str	r2, [r3, #28]
	return 0;
  401c12:	2300      	movs	r3, #0
}
  401c14:	4618      	mov	r0, r3
  401c16:	370c      	adds	r7, #12
  401c18:	46bd      	mov	sp, r7
  401c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
  401c1e:	4770      	bx	lr

00401c20 <uart_read>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
  401c20:	b480      	push	{r7}
  401c22:	b083      	sub	sp, #12
  401c24:	af00      	add	r7, sp, #0
  401c26:	6078      	str	r0, [r7, #4]
  401c28:	6039      	str	r1, [r7, #0]
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  401c2a:	687b      	ldr	r3, [r7, #4]
  401c2c:	695b      	ldr	r3, [r3, #20]
  401c2e:	f003 0301 	and.w	r3, r3, #1
  401c32:	2b00      	cmp	r3, #0
  401c34:	d101      	bne.n	401c3a <uart_read+0x1a>
		return 1;
  401c36:	2301      	movs	r3, #1
  401c38:	e005      	b.n	401c46 <uart_read+0x26>

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  401c3a:	687b      	ldr	r3, [r7, #4]
  401c3c:	699b      	ldr	r3, [r3, #24]
  401c3e:	b2da      	uxtb	r2, r3
  401c40:	683b      	ldr	r3, [r7, #0]
  401c42:	701a      	strb	r2, [r3, #0]
	return 0;
  401c44:	2300      	movs	r3, #0
}
  401c46:	4618      	mov	r0, r3
  401c48:	370c      	adds	r7, #12
  401c4a:	46bd      	mov	sp, r7
  401c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401c50:	4770      	bx	lr
  401c52:	bf00      	nop

00401c54 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  401c54:	b480      	push	{r7}
  401c56:	b089      	sub	sp, #36	; 0x24
  401c58:	af00      	add	r7, sp, #0
  401c5a:	60f8      	str	r0, [r7, #12]
  401c5c:	60b9      	str	r1, [r7, #8]
  401c5e:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  401c60:	68bb      	ldr	r3, [r7, #8]
  401c62:	011a      	lsls	r2, r3, #4
  401c64:	687b      	ldr	r3, [r7, #4]
  401c66:	429a      	cmp	r2, r3
  401c68:	d802      	bhi.n	401c70 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  401c6a:	2310      	movs	r3, #16
  401c6c:	61fb      	str	r3, [r7, #28]
  401c6e:	e001      	b.n	401c74 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  401c70:	2308      	movs	r3, #8
  401c72:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  401c74:	687b      	ldr	r3, [r7, #4]
  401c76:	00da      	lsls	r2, r3, #3
  401c78:	69fb      	ldr	r3, [r7, #28]
  401c7a:	68b9      	ldr	r1, [r7, #8]
  401c7c:	fb01 f303 	mul.w	r3, r1, r3
  401c80:	085b      	lsrs	r3, r3, #1
  401c82:	441a      	add	r2, r3
  401c84:	69fb      	ldr	r3, [r7, #28]
  401c86:	68b9      	ldr	r1, [r7, #8]
  401c88:	fb01 f303 	mul.w	r3, r1, r3
  401c8c:	fbb2 f3f3 	udiv	r3, r2, r3
  401c90:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  401c92:	69bb      	ldr	r3, [r7, #24]
  401c94:	08db      	lsrs	r3, r3, #3
  401c96:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  401c98:	69bb      	ldr	r3, [r7, #24]
  401c9a:	f003 0307 	and.w	r3, r3, #7
  401c9e:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  401ca0:	697b      	ldr	r3, [r7, #20]
  401ca2:	2b00      	cmp	r3, #0
  401ca4:	d003      	beq.n	401cae <usart_set_async_baudrate+0x5a>
  401ca6:	697b      	ldr	r3, [r7, #20]
  401ca8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  401cac:	d301      	bcc.n	401cb2 <usart_set_async_baudrate+0x5e>
		return 1;
  401cae:	2301      	movs	r3, #1
  401cb0:	e00f      	b.n	401cd2 <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  401cb2:	69fb      	ldr	r3, [r7, #28]
  401cb4:	2b08      	cmp	r3, #8
  401cb6:	d105      	bne.n	401cc4 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  401cb8:	68fb      	ldr	r3, [r7, #12]
  401cba:	685b      	ldr	r3, [r3, #4]
  401cbc:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  401cc0:	68fb      	ldr	r3, [r7, #12]
  401cc2:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  401cc4:	693b      	ldr	r3, [r7, #16]
  401cc6:	041a      	lsls	r2, r3, #16
  401cc8:	697b      	ldr	r3, [r7, #20]
  401cca:	431a      	orrs	r2, r3
  401ccc:	68fb      	ldr	r3, [r7, #12]
  401cce:	621a      	str	r2, [r3, #32]

	return 0;
  401cd0:	2300      	movs	r3, #0
}
  401cd2:	4618      	mov	r0, r3
  401cd4:	3724      	adds	r7, #36	; 0x24
  401cd6:	46bd      	mov	sp, r7
  401cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
  401cdc:	4770      	bx	lr
  401cde:	bf00      	nop

00401ce0 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  401ce0:	b580      	push	{r7, lr}
  401ce2:	b082      	sub	sp, #8
  401ce4:	af00      	add	r7, sp, #0
  401ce6:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  401ce8:	6878      	ldr	r0, [r7, #4]
  401cea:	4b0d      	ldr	r3, [pc, #52]	; (401d20 <usart_reset+0x40>)
  401cec:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  401cee:	687b      	ldr	r3, [r7, #4]
  401cf0:	2200      	movs	r2, #0
  401cf2:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  401cf4:	687b      	ldr	r3, [r7, #4]
  401cf6:	2200      	movs	r2, #0
  401cf8:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  401cfa:	687b      	ldr	r3, [r7, #4]
  401cfc:	2200      	movs	r2, #0
  401cfe:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  401d00:	6878      	ldr	r0, [r7, #4]
  401d02:	4b08      	ldr	r3, [pc, #32]	; (401d24 <usart_reset+0x44>)
  401d04:	4798      	blx	r3
	usart_reset_rx(p_usart);
  401d06:	6878      	ldr	r0, [r7, #4]
  401d08:	4b07      	ldr	r3, [pc, #28]	; (401d28 <usart_reset+0x48>)
  401d0a:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  401d0c:	6878      	ldr	r0, [r7, #4]
  401d0e:	4b07      	ldr	r3, [pc, #28]	; (401d2c <usart_reset+0x4c>)
  401d10:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  401d12:	6878      	ldr	r0, [r7, #4]
  401d14:	4b06      	ldr	r3, [pc, #24]	; (401d30 <usart_reset+0x50>)
  401d16:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
#endif
}
  401d18:	bf00      	nop
  401d1a:	3708      	adds	r7, #8
  401d1c:	46bd      	mov	sp, r7
  401d1e:	bd80      	pop	{r7, pc}
  401d20:	00401ec9 	.word	0x00401ec9
  401d24:	00401dd5 	.word	0x00401dd5
  401d28:	00401e0d 	.word	0x00401e0d
  401d2c:	00401e29 	.word	0x00401e29
  401d30:	00401e45 	.word	0x00401e45

00401d34 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  401d34:	b580      	push	{r7, lr}
  401d36:	b084      	sub	sp, #16
  401d38:	af00      	add	r7, sp, #0
  401d3a:	60f8      	str	r0, [r7, #12]
  401d3c:	60b9      	str	r1, [r7, #8]
  401d3e:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  401d40:	68f8      	ldr	r0, [r7, #12]
  401d42:	4b1a      	ldr	r3, [pc, #104]	; (401dac <usart_init_rs232+0x78>)
  401d44:	4798      	blx	r3

	ul_reg_val = 0;
  401d46:	4b1a      	ldr	r3, [pc, #104]	; (401db0 <usart_init_rs232+0x7c>)
  401d48:	2200      	movs	r2, #0
  401d4a:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  401d4c:	68bb      	ldr	r3, [r7, #8]
  401d4e:	2b00      	cmp	r3, #0
  401d50:	d009      	beq.n	401d66 <usart_init_rs232+0x32>
  401d52:	68bb      	ldr	r3, [r7, #8]
  401d54:	681b      	ldr	r3, [r3, #0]
  401d56:	687a      	ldr	r2, [r7, #4]
  401d58:	4619      	mov	r1, r3
  401d5a:	68f8      	ldr	r0, [r7, #12]
  401d5c:	4b15      	ldr	r3, [pc, #84]	; (401db4 <usart_init_rs232+0x80>)
  401d5e:	4798      	blx	r3
  401d60:	4603      	mov	r3, r0
  401d62:	2b00      	cmp	r3, #0
  401d64:	d001      	beq.n	401d6a <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  401d66:	2301      	movs	r3, #1
  401d68:	e01b      	b.n	401da2 <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401d6a:	68bb      	ldr	r3, [r7, #8]
  401d6c:	685a      	ldr	r2, [r3, #4]
  401d6e:	68bb      	ldr	r3, [r7, #8]
  401d70:	689b      	ldr	r3, [r3, #8]
  401d72:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  401d74:	68bb      	ldr	r3, [r7, #8]
  401d76:	691b      	ldr	r3, [r3, #16]
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401d78:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  401d7a:	68bb      	ldr	r3, [r7, #8]
  401d7c:	68db      	ldr	r3, [r3, #12]
  401d7e:	431a      	orrs	r2, r3
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401d80:	4b0b      	ldr	r3, [pc, #44]	; (401db0 <usart_init_rs232+0x7c>)
  401d82:	681b      	ldr	r3, [r3, #0]
  401d84:	4313      	orrs	r3, r2
  401d86:	4a0a      	ldr	r2, [pc, #40]	; (401db0 <usart_init_rs232+0x7c>)
  401d88:	6013      	str	r3, [r2, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  401d8a:	4b09      	ldr	r3, [pc, #36]	; (401db0 <usart_init_rs232+0x7c>)
  401d8c:	681b      	ldr	r3, [r3, #0]
  401d8e:	4a08      	ldr	r2, [pc, #32]	; (401db0 <usart_init_rs232+0x7c>)
  401d90:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
  401d92:	68fb      	ldr	r3, [r7, #12]
  401d94:	685a      	ldr	r2, [r3, #4]
  401d96:	4b06      	ldr	r3, [pc, #24]	; (401db0 <usart_init_rs232+0x7c>)
  401d98:	681b      	ldr	r3, [r3, #0]
  401d9a:	431a      	orrs	r2, r3
  401d9c:	68fb      	ldr	r3, [r7, #12]
  401d9e:	605a      	str	r2, [r3, #4]

	return 0;
  401da0:	2300      	movs	r3, #0
}
  401da2:	4618      	mov	r0, r3
  401da4:	3710      	adds	r7, #16
  401da6:	46bd      	mov	sp, r7
  401da8:	bd80      	pop	{r7, pc}
  401daa:	bf00      	nop
  401dac:	00401ce1 	.word	0x00401ce1
  401db0:	20400a6c 	.word	0x20400a6c
  401db4:	00401c55 	.word	0x00401c55

00401db8 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  401db8:	b480      	push	{r7}
  401dba:	b083      	sub	sp, #12
  401dbc:	af00      	add	r7, sp, #0
  401dbe:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  401dc0:	687b      	ldr	r3, [r7, #4]
  401dc2:	2240      	movs	r2, #64	; 0x40
  401dc4:	601a      	str	r2, [r3, #0]
}
  401dc6:	bf00      	nop
  401dc8:	370c      	adds	r7, #12
  401dca:	46bd      	mov	sp, r7
  401dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
  401dd0:	4770      	bx	lr
  401dd2:	bf00      	nop

00401dd4 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  401dd4:	b480      	push	{r7}
  401dd6:	b083      	sub	sp, #12
  401dd8:	af00      	add	r7, sp, #0
  401dda:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  401ddc:	687b      	ldr	r3, [r7, #4]
  401dde:	2288      	movs	r2, #136	; 0x88
  401de0:	601a      	str	r2, [r3, #0]
}
  401de2:	bf00      	nop
  401de4:	370c      	adds	r7, #12
  401de6:	46bd      	mov	sp, r7
  401de8:	f85d 7b04 	ldr.w	r7, [sp], #4
  401dec:	4770      	bx	lr
  401dee:	bf00      	nop

00401df0 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  401df0:	b480      	push	{r7}
  401df2:	b083      	sub	sp, #12
  401df4:	af00      	add	r7, sp, #0
  401df6:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  401df8:	687b      	ldr	r3, [r7, #4]
  401dfa:	2210      	movs	r2, #16
  401dfc:	601a      	str	r2, [r3, #0]
}
  401dfe:	bf00      	nop
  401e00:	370c      	adds	r7, #12
  401e02:	46bd      	mov	sp, r7
  401e04:	f85d 7b04 	ldr.w	r7, [sp], #4
  401e08:	4770      	bx	lr
  401e0a:	bf00      	nop

00401e0c <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  401e0c:	b480      	push	{r7}
  401e0e:	b083      	sub	sp, #12
  401e10:	af00      	add	r7, sp, #0
  401e12:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  401e14:	687b      	ldr	r3, [r7, #4]
  401e16:	2224      	movs	r2, #36	; 0x24
  401e18:	601a      	str	r2, [r3, #0]
}
  401e1a:	bf00      	nop
  401e1c:	370c      	adds	r7, #12
  401e1e:	46bd      	mov	sp, r7
  401e20:	f85d 7b04 	ldr.w	r7, [sp], #4
  401e24:	4770      	bx	lr
  401e26:	bf00      	nop

00401e28 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  401e28:	b480      	push	{r7}
  401e2a:	b083      	sub	sp, #12
  401e2c:	af00      	add	r7, sp, #0
  401e2e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  401e30:	687b      	ldr	r3, [r7, #4]
  401e32:	f44f 7280 	mov.w	r2, #256	; 0x100
  401e36:	601a      	str	r2, [r3, #0]
}
  401e38:	bf00      	nop
  401e3a:	370c      	adds	r7, #12
  401e3c:	46bd      	mov	sp, r7
  401e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401e42:	4770      	bx	lr

00401e44 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  401e44:	b480      	push	{r7}
  401e46:	b083      	sub	sp, #12
  401e48:	af00      	add	r7, sp, #0
  401e4a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  401e4c:	687b      	ldr	r3, [r7, #4]
  401e4e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  401e52:	601a      	str	r2, [r3, #0]
}
  401e54:	bf00      	nop
  401e56:	370c      	adds	r7, #12
  401e58:	46bd      	mov	sp, r7
  401e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
  401e5e:	4770      	bx	lr

00401e60 <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
  401e60:	b480      	push	{r7}
  401e62:	b083      	sub	sp, #12
  401e64:	af00      	add	r7, sp, #0
  401e66:	6078      	str	r0, [r7, #4]
  401e68:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  401e6a:	687b      	ldr	r3, [r7, #4]
  401e6c:	695b      	ldr	r3, [r3, #20]
  401e6e:	f003 0302 	and.w	r3, r3, #2
  401e72:	2b00      	cmp	r3, #0
  401e74:	d101      	bne.n	401e7a <usart_write+0x1a>
		return 1;
  401e76:	2301      	movs	r3, #1
  401e78:	e005      	b.n	401e86 <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  401e7a:	683b      	ldr	r3, [r7, #0]
  401e7c:	f3c3 0208 	ubfx	r2, r3, #0, #9
  401e80:	687b      	ldr	r3, [r7, #4]
  401e82:	61da      	str	r2, [r3, #28]
	return 0;
  401e84:	2300      	movs	r3, #0
}
  401e86:	4618      	mov	r0, r3
  401e88:	370c      	adds	r7, #12
  401e8a:	46bd      	mov	sp, r7
  401e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401e90:	4770      	bx	lr
  401e92:	bf00      	nop

00401e94 <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
  401e94:	b480      	push	{r7}
  401e96:	b083      	sub	sp, #12
  401e98:	af00      	add	r7, sp, #0
  401e9a:	6078      	str	r0, [r7, #4]
  401e9c:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  401e9e:	687b      	ldr	r3, [r7, #4]
  401ea0:	695b      	ldr	r3, [r3, #20]
  401ea2:	f003 0301 	and.w	r3, r3, #1
  401ea6:	2b00      	cmp	r3, #0
  401ea8:	d101      	bne.n	401eae <usart_read+0x1a>
		return 1;
  401eaa:	2301      	movs	r3, #1
  401eac:	e006      	b.n	401ebc <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  401eae:	687b      	ldr	r3, [r7, #4]
  401eb0:	699b      	ldr	r3, [r3, #24]
  401eb2:	f3c3 0208 	ubfx	r2, r3, #0, #9
  401eb6:	683b      	ldr	r3, [r7, #0]
  401eb8:	601a      	str	r2, [r3, #0]

	return 0;
  401eba:	2300      	movs	r3, #0
}
  401ebc:	4618      	mov	r0, r3
  401ebe:	370c      	adds	r7, #12
  401ec0:	46bd      	mov	sp, r7
  401ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
  401ec6:	4770      	bx	lr

00401ec8 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  401ec8:	b480      	push	{r7}
  401eca:	b083      	sub	sp, #12
  401ecc:	af00      	add	r7, sp, #0
  401ece:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  401ed0:	687b      	ldr	r3, [r7, #4]
  401ed2:	4a04      	ldr	r2, [pc, #16]	; (401ee4 <usart_disable_writeprotect+0x1c>)
  401ed4:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  401ed8:	bf00      	nop
  401eda:	370c      	adds	r7, #12
  401edc:	46bd      	mov	sp, r7
  401ede:	f85d 7b04 	ldr.w	r7, [sp], #4
  401ee2:	4770      	bx	lr
  401ee4:	55534100 	.word	0x55534100

00401ee8 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
  401ee8:	b480      	push	{r7}
  401eea:	b083      	sub	sp, #12
  401eec:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401eee:	f3ef 8310 	mrs	r3, PRIMASK
  401ef2:	607b      	str	r3, [r7, #4]
  return(result);
  401ef4:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401ef6:	2b00      	cmp	r3, #0
  401ef8:	bf0c      	ite	eq
  401efa:	2301      	moveq	r3, #1
  401efc:	2300      	movne	r3, #0
  401efe:	b2db      	uxtb	r3, r3
  401f00:	603b      	str	r3, [r7, #0]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  401f02:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  401f04:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401f08:	4b04      	ldr	r3, [pc, #16]	; (401f1c <cpu_irq_save+0x34>)
  401f0a:	2200      	movs	r2, #0
  401f0c:	701a      	strb	r2, [r3, #0]
	return flags;
  401f0e:	683b      	ldr	r3, [r7, #0]
}
  401f10:	4618      	mov	r0, r3
  401f12:	370c      	adds	r7, #12
  401f14:	46bd      	mov	sp, r7
  401f16:	f85d 7b04 	ldr.w	r7, [sp], #4
  401f1a:	4770      	bx	lr
  401f1c:	20400000 	.word	0x20400000

00401f20 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
  401f20:	b480      	push	{r7}
  401f22:	b083      	sub	sp, #12
  401f24:	af00      	add	r7, sp, #0
  401f26:	6078      	str	r0, [r7, #4]
	return (flags);
  401f28:	687b      	ldr	r3, [r7, #4]
  401f2a:	2b00      	cmp	r3, #0
  401f2c:	bf14      	ite	ne
  401f2e:	2301      	movne	r3, #1
  401f30:	2300      	moveq	r3, #0
  401f32:	b2db      	uxtb	r3, r3
}
  401f34:	4618      	mov	r0, r3
  401f36:	370c      	adds	r7, #12
  401f38:	46bd      	mov	sp, r7
  401f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
  401f3e:	4770      	bx	lr

00401f40 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
  401f40:	b580      	push	{r7, lr}
  401f42:	b082      	sub	sp, #8
  401f44:	af00      	add	r7, sp, #0
  401f46:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  401f48:	6878      	ldr	r0, [r7, #4]
  401f4a:	4b07      	ldr	r3, [pc, #28]	; (401f68 <cpu_irq_restore+0x28>)
  401f4c:	4798      	blx	r3
  401f4e:	4603      	mov	r3, r0
  401f50:	2b00      	cmp	r3, #0
  401f52:	d005      	beq.n	401f60 <cpu_irq_restore+0x20>
		cpu_irq_enable();
  401f54:	4b05      	ldr	r3, [pc, #20]	; (401f6c <cpu_irq_restore+0x2c>)
  401f56:	2201      	movs	r2, #1
  401f58:	701a      	strb	r2, [r3, #0]
  401f5a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  401f5e:	b662      	cpsie	i
}
  401f60:	bf00      	nop
  401f62:	3708      	adds	r7, #8
  401f64:	46bd      	mov	sp, r7
  401f66:	bd80      	pop	{r7, pc}
  401f68:	00401f21 	.word	0x00401f21
  401f6c:	20400000 	.word	0x20400000

00401f70 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  401f70:	b580      	push	{r7, lr}
  401f72:	b084      	sub	sp, #16
  401f74:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
  401f76:	4b1e      	ldr	r3, [pc, #120]	; (401ff0 <Reset_Handler+0x80>)
  401f78:	60fb      	str	r3, [r7, #12]
        pDest = &_srelocate;
  401f7a:	4b1e      	ldr	r3, [pc, #120]	; (401ff4 <Reset_Handler+0x84>)
  401f7c:	60bb      	str	r3, [r7, #8]

        if (pSrc != pDest) {
  401f7e:	68fa      	ldr	r2, [r7, #12]
  401f80:	68bb      	ldr	r3, [r7, #8]
  401f82:	429a      	cmp	r2, r3
  401f84:	d00c      	beq.n	401fa0 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
  401f86:	e007      	b.n	401f98 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
  401f88:	68bb      	ldr	r3, [r7, #8]
  401f8a:	1d1a      	adds	r2, r3, #4
  401f8c:	60ba      	str	r2, [r7, #8]
  401f8e:	68fa      	ldr	r2, [r7, #12]
  401f90:	1d11      	adds	r1, r2, #4
  401f92:	60f9      	str	r1, [r7, #12]
  401f94:	6812      	ldr	r2, [r2, #0]
  401f96:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
  401f98:	68bb      	ldr	r3, [r7, #8]
  401f9a:	4a17      	ldr	r2, [pc, #92]	; (401ff8 <Reset_Handler+0x88>)
  401f9c:	4293      	cmp	r3, r2
  401f9e:	d3f3      	bcc.n	401f88 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  401fa0:	4b16      	ldr	r3, [pc, #88]	; (401ffc <Reset_Handler+0x8c>)
  401fa2:	60bb      	str	r3, [r7, #8]
  401fa4:	e004      	b.n	401fb0 <Reset_Handler+0x40>
                *pDest++ = 0;
  401fa6:	68bb      	ldr	r3, [r7, #8]
  401fa8:	1d1a      	adds	r2, r3, #4
  401faa:	60ba      	str	r2, [r7, #8]
  401fac:	2200      	movs	r2, #0
  401fae:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  401fb0:	68bb      	ldr	r3, [r7, #8]
  401fb2:	4a13      	ldr	r2, [pc, #76]	; (402000 <Reset_Handler+0x90>)
  401fb4:	4293      	cmp	r3, r2
  401fb6:	d3f6      	bcc.n	401fa6 <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
  401fb8:	4b12      	ldr	r3, [pc, #72]	; (402004 <Reset_Handler+0x94>)
  401fba:	60fb      	str	r3, [r7, #12]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  401fbc:	4a12      	ldr	r2, [pc, #72]	; (402008 <Reset_Handler+0x98>)
  401fbe:	68fb      	ldr	r3, [r7, #12]
  401fc0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  401fc4:	6093      	str	r3, [r2, #8]
 * \brief Enable FPU
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
  401fc6:	4b11      	ldr	r3, [pc, #68]	; (40200c <Reset_Handler+0x9c>)
  401fc8:	4798      	blx	r3
  401fca:	6078      	str	r0, [r7, #4]
	REG_CPACR |=  (0xFu << 20);
  401fcc:	4a10      	ldr	r2, [pc, #64]	; (402010 <Reset_Handler+0xa0>)
  401fce:	4b10      	ldr	r3, [pc, #64]	; (402010 <Reset_Handler+0xa0>)
  401fd0:	681b      	ldr	r3, [r3, #0]
  401fd2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  401fd6:	6013      	str	r3, [r2, #0]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  401fd8:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  401fdc:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	cpu_irq_restore(flags);
  401fe0:	6878      	ldr	r0, [r7, #4]
  401fe2:	4b0c      	ldr	r3, [pc, #48]	; (402014 <Reset_Handler+0xa4>)
  401fe4:	4798      	blx	r3
#if __FPU_USED
	fpu_enable();
#endif

        /* Initialize the C library */
        __libc_init_array();
  401fe6:	4b0c      	ldr	r3, [pc, #48]	; (402018 <Reset_Handler+0xa8>)
  401fe8:	4798      	blx	r3

        /* Branch to main function */
        main();
  401fea:	4b0c      	ldr	r3, [pc, #48]	; (40201c <Reset_Handler+0xac>)
  401fec:	4798      	blx	r3

        /* Infinite loop */
        while (1);
  401fee:	e7fe      	b.n	401fee <Reset_Handler+0x7e>
  401ff0:	004178d8 	.word	0x004178d8
  401ff4:	20400000 	.word	0x20400000
  401ff8:	204009dc 	.word	0x204009dc
  401ffc:	204009e0 	.word	0x204009e0
  402000:	204049dc 	.word	0x204049dc
  402004:	00400000 	.word	0x00400000
  402008:	e000ed00 	.word	0xe000ed00
  40200c:	00401ee9 	.word	0x00401ee9
  402010:	e000ed88 	.word	0xe000ed88
  402014:	00401f41 	.word	0x00401f41
  402018:	0040d77d 	.word	0x0040d77d
  40201c:	0040d739 	.word	0x0040d739

00402020 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  402020:	b480      	push	{r7}
  402022:	af00      	add	r7, sp, #0
        while (1) {
        }
  402024:	e7fe      	b.n	402024 <Dummy_Handler+0x4>
  402026:	bf00      	nop

00402028 <SystemCoreClockUpdate>:

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate( void )
{
  402028:	b480      	push	{r7}
  40202a:	af00      	add	r7, sp, #0
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  40202c:	4b52      	ldr	r3, [pc, #328]	; (402178 <SystemCoreClockUpdate+0x150>)
  40202e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402030:	f003 0303 	and.w	r3, r3, #3
  402034:	2b01      	cmp	r3, #1
  402036:	d014      	beq.n	402062 <SystemCoreClockUpdate+0x3a>
  402038:	2b01      	cmp	r3, #1
  40203a:	d302      	bcc.n	402042 <SystemCoreClockUpdate+0x1a>
  40203c:	2b02      	cmp	r3, #2
  40203e:	d038      	beq.n	4020b2 <SystemCoreClockUpdate+0x8a>
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
      }
    break;

    default:
    break;
  402040:	e07a      	b.n	402138 <SystemCoreClockUpdate+0x110>
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  {
    case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  402042:	4b4e      	ldr	r3, [pc, #312]	; (40217c <SystemCoreClockUpdate+0x154>)
  402044:	695b      	ldr	r3, [r3, #20]
  402046:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40204a:	2b00      	cmp	r3, #0
  40204c:	d004      	beq.n	402058 <SystemCoreClockUpdate+0x30>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  40204e:	4b4c      	ldr	r3, [pc, #304]	; (402180 <SystemCoreClockUpdate+0x158>)
  402050:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  402054:	601a      	str	r2, [r3, #0]
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
      }
    break;
  402056:	e06f      	b.n	402138 <SystemCoreClockUpdate+0x110>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  402058:	4b49      	ldr	r3, [pc, #292]	; (402180 <SystemCoreClockUpdate+0x158>)
  40205a:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  40205e:	601a      	str	r2, [r3, #0]
      }
    break;
  402060:	e06a      	b.n	402138 <SystemCoreClockUpdate+0x110>

    case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  402062:	4b45      	ldr	r3, [pc, #276]	; (402178 <SystemCoreClockUpdate+0x150>)
  402064:	6a1b      	ldr	r3, [r3, #32]
  402066:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  40206a:	2b00      	cmp	r3, #0
  40206c:	d003      	beq.n	402076 <SystemCoreClockUpdate+0x4e>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  40206e:	4b44      	ldr	r3, [pc, #272]	; (402180 <SystemCoreClockUpdate+0x158>)
  402070:	4a44      	ldr	r2, [pc, #272]	; (402184 <SystemCoreClockUpdate+0x15c>)
  402072:	601a      	str	r2, [r3, #0]

          default:
          break;
        }
      }
    break;
  402074:	e060      	b.n	402138 <SystemCoreClockUpdate+0x110>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402076:	4b42      	ldr	r3, [pc, #264]	; (402180 <SystemCoreClockUpdate+0x158>)
  402078:	4a43      	ldr	r2, [pc, #268]	; (402188 <SystemCoreClockUpdate+0x160>)
  40207a:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  40207c:	4b3e      	ldr	r3, [pc, #248]	; (402178 <SystemCoreClockUpdate+0x150>)
  40207e:	6a1b      	ldr	r3, [r3, #32]
  402080:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402084:	2b10      	cmp	r3, #16
  402086:	d004      	beq.n	402092 <SystemCoreClockUpdate+0x6a>
  402088:	2b20      	cmp	r3, #32
  40208a:	d008      	beq.n	40209e <SystemCoreClockUpdate+0x76>
  40208c:	2b00      	cmp	r3, #0
  40208e:	d00e      	beq.n	4020ae <SystemCoreClockUpdate+0x86>
          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
          break;

          default:
          break;
  402090:	e00e      	b.n	4020b0 <SystemCoreClockUpdate+0x88>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  402092:	4b3b      	ldr	r3, [pc, #236]	; (402180 <SystemCoreClockUpdate+0x158>)
  402094:	681b      	ldr	r3, [r3, #0]
  402096:	005b      	lsls	r3, r3, #1
  402098:	4a39      	ldr	r2, [pc, #228]	; (402180 <SystemCoreClockUpdate+0x158>)
  40209a:	6013      	str	r3, [r2, #0]
          break;
  40209c:	e008      	b.n	4020b0 <SystemCoreClockUpdate+0x88>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  40209e:	4b38      	ldr	r3, [pc, #224]	; (402180 <SystemCoreClockUpdate+0x158>)
  4020a0:	681a      	ldr	r2, [r3, #0]
  4020a2:	4613      	mov	r3, r2
  4020a4:	005b      	lsls	r3, r3, #1
  4020a6:	4413      	add	r3, r2
  4020a8:	4a35      	ldr	r2, [pc, #212]	; (402180 <SystemCoreClockUpdate+0x158>)
  4020aa:	6013      	str	r3, [r2, #0]
          break;
  4020ac:	e000      	b.n	4020b0 <SystemCoreClockUpdate+0x88>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;
  4020ae:	bf00      	nop

          default:
          break;
        }
      }
    break;
  4020b0:	e042      	b.n	402138 <SystemCoreClockUpdate+0x110>

    case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4020b2:	4b31      	ldr	r3, [pc, #196]	; (402178 <SystemCoreClockUpdate+0x150>)
  4020b4:	6a1b      	ldr	r3, [r3, #32]
  4020b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  4020ba:	2b00      	cmp	r3, #0
  4020bc:	d003      	beq.n	4020c6 <SystemCoreClockUpdate+0x9e>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  4020be:	4b30      	ldr	r3, [pc, #192]	; (402180 <SystemCoreClockUpdate+0x158>)
  4020c0:	4a30      	ldr	r2, [pc, #192]	; (402184 <SystemCoreClockUpdate+0x15c>)
  4020c2:	601a      	str	r2, [r3, #0]
  4020c4:	e01c      	b.n	402100 <SystemCoreClockUpdate+0xd8>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4020c6:	4b2e      	ldr	r3, [pc, #184]	; (402180 <SystemCoreClockUpdate+0x158>)
  4020c8:	4a2f      	ldr	r2, [pc, #188]	; (402188 <SystemCoreClockUpdate+0x160>)
  4020ca:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4020cc:	4b2a      	ldr	r3, [pc, #168]	; (402178 <SystemCoreClockUpdate+0x150>)
  4020ce:	6a1b      	ldr	r3, [r3, #32]
  4020d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4020d4:	2b10      	cmp	r3, #16
  4020d6:	d004      	beq.n	4020e2 <SystemCoreClockUpdate+0xba>
  4020d8:	2b20      	cmp	r3, #32
  4020da:	d008      	beq.n	4020ee <SystemCoreClockUpdate+0xc6>
  4020dc:	2b00      	cmp	r3, #0
  4020de:	d00e      	beq.n	4020fe <SystemCoreClockUpdate+0xd6>
          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
          break;

          default:
          break;
  4020e0:	e00e      	b.n	402100 <SystemCoreClockUpdate+0xd8>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  4020e2:	4b27      	ldr	r3, [pc, #156]	; (402180 <SystemCoreClockUpdate+0x158>)
  4020e4:	681b      	ldr	r3, [r3, #0]
  4020e6:	005b      	lsls	r3, r3, #1
  4020e8:	4a25      	ldr	r2, [pc, #148]	; (402180 <SystemCoreClockUpdate+0x158>)
  4020ea:	6013      	str	r3, [r2, #0]
          break;
  4020ec:	e008      	b.n	402100 <SystemCoreClockUpdate+0xd8>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  4020ee:	4b24      	ldr	r3, [pc, #144]	; (402180 <SystemCoreClockUpdate+0x158>)
  4020f0:	681a      	ldr	r2, [r3, #0]
  4020f2:	4613      	mov	r3, r2
  4020f4:	005b      	lsls	r3, r3, #1
  4020f6:	4413      	add	r3, r2
  4020f8:	4a21      	ldr	r2, [pc, #132]	; (402180 <SystemCoreClockUpdate+0x158>)
  4020fa:	6013      	str	r3, [r2, #0]
          break;
  4020fc:	e000      	b.n	402100 <SystemCoreClockUpdate+0xd8>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;
  4020fe:	bf00      	nop
          default:
          break;
        }
      }

      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  402100:	4b1d      	ldr	r3, [pc, #116]	; (402178 <SystemCoreClockUpdate+0x150>)
  402102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402104:	f003 0303 	and.w	r3, r3, #3
  402108:	2b02      	cmp	r3, #2
  40210a:	d114      	bne.n	402136 <SystemCoreClockUpdate+0x10e>
      {
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  40210c:	4b1a      	ldr	r3, [pc, #104]	; (402178 <SystemCoreClockUpdate+0x150>)
  40210e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  402110:	4b1e      	ldr	r3, [pc, #120]	; (40218c <SystemCoreClockUpdate+0x164>)
  402112:	4013      	ands	r3, r2
  402114:	0c1b      	lsrs	r3, r3, #16
  402116:	3301      	adds	r3, #1
  402118:	4a19      	ldr	r2, [pc, #100]	; (402180 <SystemCoreClockUpdate+0x158>)
  40211a:	6812      	ldr	r2, [r2, #0]
  40211c:	fb02 f303 	mul.w	r3, r2, r3
  402120:	4a17      	ldr	r2, [pc, #92]	; (402180 <SystemCoreClockUpdate+0x158>)
  402122:	6013      	str	r3, [r2, #0]
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  402124:	4b14      	ldr	r3, [pc, #80]	; (402178 <SystemCoreClockUpdate+0x150>)
  402126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  402128:	b2db      	uxtb	r3, r3
  40212a:	4a15      	ldr	r2, [pc, #84]	; (402180 <SystemCoreClockUpdate+0x158>)
  40212c:	6812      	ldr	r2, [r2, #0]
  40212e:	fbb2 f3f3 	udiv	r3, r2, r3
  402132:	4a13      	ldr	r2, [pc, #76]	; (402180 <SystemCoreClockUpdate+0x158>)
  402134:	6013      	str	r3, [r2, #0]
      }
    break;
  402136:	bf00      	nop

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  402138:	4b0f      	ldr	r3, [pc, #60]	; (402178 <SystemCoreClockUpdate+0x150>)
  40213a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40213c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402140:	2b70      	cmp	r3, #112	; 0x70
  402142:	d108      	bne.n	402156 <SystemCoreClockUpdate+0x12e>
  {
    SystemCoreClock /= 3U;
  402144:	4b0e      	ldr	r3, [pc, #56]	; (402180 <SystemCoreClockUpdate+0x158>)
  402146:	681b      	ldr	r3, [r3, #0]
  402148:	4a11      	ldr	r2, [pc, #68]	; (402190 <SystemCoreClockUpdate+0x168>)
  40214a:	fba2 2303 	umull	r2, r3, r2, r3
  40214e:	085b      	lsrs	r3, r3, #1
  402150:	4a0b      	ldr	r2, [pc, #44]	; (402180 <SystemCoreClockUpdate+0x158>)
  402152:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  }
}
  402154:	e00a      	b.n	40216c <SystemCoreClockUpdate+0x144>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  402156:	4b08      	ldr	r3, [pc, #32]	; (402178 <SystemCoreClockUpdate+0x150>)
  402158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40215a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40215e:	091b      	lsrs	r3, r3, #4
  402160:	4a07      	ldr	r2, [pc, #28]	; (402180 <SystemCoreClockUpdate+0x158>)
  402162:	6812      	ldr	r2, [r2, #0]
  402164:	fa22 f303 	lsr.w	r3, r2, r3
  402168:	4a05      	ldr	r2, [pc, #20]	; (402180 <SystemCoreClockUpdate+0x158>)
  40216a:	6013      	str	r3, [r2, #0]
  }
}
  40216c:	bf00      	nop
  40216e:	46bd      	mov	sp, r7
  402170:	f85d 7b04 	ldr.w	r7, [sp], #4
  402174:	4770      	bx	lr
  402176:	bf00      	nop
  402178:	400e0600 	.word	0x400e0600
  40217c:	400e1810 	.word	0x400e1810
  402180:	20400004 	.word	0x20400004
  402184:	00b71b00 	.word	0x00b71b00
  402188:	003d0900 	.word	0x003d0900
  40218c:	07ff0000 	.word	0x07ff0000
  402190:	aaaaaaab 	.word	0xaaaaaaab

00402194 <system_init_flash>:
/**
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  402194:	b480      	push	{r7}
  402196:	b083      	sub	sp, #12
  402198:	af00      	add	r7, sp, #0
  40219a:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  40219c:	687b      	ldr	r3, [r7, #4]
  40219e:	4a1d      	ldr	r2, [pc, #116]	; (402214 <system_init_flash+0x80>)
  4021a0:	4293      	cmp	r3, r2
  4021a2:	d804      	bhi.n	4021ae <system_init_flash+0x1a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4021a4:	4b1c      	ldr	r3, [pc, #112]	; (402218 <system_init_flash+0x84>)
  4021a6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4021aa:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  4021ac:	e02b      	b.n	402206 <system_init_flash+0x72>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  4021ae:	687b      	ldr	r3, [r7, #4]
  4021b0:	4a1a      	ldr	r2, [pc, #104]	; (40221c <system_init_flash+0x88>)
  4021b2:	4293      	cmp	r3, r2
  4021b4:	d803      	bhi.n	4021be <system_init_flash+0x2a>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4021b6:	4b18      	ldr	r3, [pc, #96]	; (402218 <system_init_flash+0x84>)
  4021b8:	4a19      	ldr	r2, [pc, #100]	; (402220 <system_init_flash+0x8c>)
  4021ba:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  4021bc:	e023      	b.n	402206 <system_init_flash+0x72>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  4021be:	687b      	ldr	r3, [r7, #4]
  4021c0:	4a18      	ldr	r2, [pc, #96]	; (402224 <system_init_flash+0x90>)
  4021c2:	4293      	cmp	r3, r2
  4021c4:	d803      	bhi.n	4021ce <system_init_flash+0x3a>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4021c6:	4b14      	ldr	r3, [pc, #80]	; (402218 <system_init_flash+0x84>)
  4021c8:	4a17      	ldr	r2, [pc, #92]	; (402228 <system_init_flash+0x94>)
  4021ca:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  4021cc:	e01b      	b.n	402206 <system_init_flash+0x72>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  4021ce:	687b      	ldr	r3, [r7, #4]
  4021d0:	4a16      	ldr	r2, [pc, #88]	; (40222c <system_init_flash+0x98>)
  4021d2:	4293      	cmp	r3, r2
  4021d4:	d803      	bhi.n	4021de <system_init_flash+0x4a>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4021d6:	4b10      	ldr	r3, [pc, #64]	; (402218 <system_init_flash+0x84>)
  4021d8:	4a15      	ldr	r2, [pc, #84]	; (402230 <system_init_flash+0x9c>)
  4021da:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  4021dc:	e013      	b.n	402206 <system_init_flash+0x72>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  4021de:	687b      	ldr	r3, [r7, #4]
  4021e0:	4a14      	ldr	r2, [pc, #80]	; (402234 <system_init_flash+0xa0>)
  4021e2:	4293      	cmp	r3, r2
  4021e4:	d804      	bhi.n	4021f0 <system_init_flash+0x5c>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4021e6:	4b0c      	ldr	r3, [pc, #48]	; (402218 <system_init_flash+0x84>)
  4021e8:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  4021ec:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  4021ee:	e00a      	b.n	402206 <system_init_flash+0x72>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  4021f0:	687b      	ldr	r3, [r7, #4]
  4021f2:	4a11      	ldr	r2, [pc, #68]	; (402238 <system_init_flash+0xa4>)
  4021f4:	4293      	cmp	r3, r2
  4021f6:	d803      	bhi.n	402200 <system_init_flash+0x6c>
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4021f8:	4b07      	ldr	r3, [pc, #28]	; (402218 <system_init_flash+0x84>)
  4021fa:	4a10      	ldr	r2, [pc, #64]	; (40223c <system_init_flash+0xa8>)
  4021fc:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  4021fe:	e002      	b.n	402206 <system_init_flash+0x72>
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  402200:	4b05      	ldr	r3, [pc, #20]	; (402218 <system_init_flash+0x84>)
  402202:	4a0f      	ldr	r2, [pc, #60]	; (402240 <system_init_flash+0xac>)
  402204:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  402206:	bf00      	nop
  402208:	370c      	adds	r7, #12
  40220a:	46bd      	mov	sp, r7
  40220c:	f85d 7b04 	ldr.w	r7, [sp], #4
  402210:	4770      	bx	lr
  402212:	bf00      	nop
  402214:	015ef3bf 	.word	0x015ef3bf
  402218:	400e0c00 	.word	0x400e0c00
  40221c:	02bde77f 	.word	0x02bde77f
  402220:	04000100 	.word	0x04000100
  402224:	041cdb3f 	.word	0x041cdb3f
  402228:	04000200 	.word	0x04000200
  40222c:	057bceff 	.word	0x057bceff
  402230:	04000300 	.word	0x04000300
  402234:	06dac2bf 	.word	0x06dac2bf
  402238:	0839b67f 	.word	0x0839b67f
  40223c:	04000500 	.word	0x04000500
  402240:	04000600 	.word	0x04000600

00402244 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
  402244:	b480      	push	{r7}
  402246:	b085      	sub	sp, #20
  402248:	af00      	add	r7, sp, #0
  40224a:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
  40224c:	4b10      	ldr	r3, [pc, #64]	; (402290 <_sbrk+0x4c>)
  40224e:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
  402250:	4b10      	ldr	r3, [pc, #64]	; (402294 <_sbrk+0x50>)
  402252:	681b      	ldr	r3, [r3, #0]
  402254:	2b00      	cmp	r3, #0
  402256:	d102      	bne.n	40225e <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
  402258:	4b0e      	ldr	r3, [pc, #56]	; (402294 <_sbrk+0x50>)
  40225a:	4a0f      	ldr	r2, [pc, #60]	; (402298 <_sbrk+0x54>)
  40225c:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  40225e:	4b0d      	ldr	r3, [pc, #52]	; (402294 <_sbrk+0x50>)
  402260:	681b      	ldr	r3, [r3, #0]
  402262:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
  402264:	68ba      	ldr	r2, [r7, #8]
  402266:	687b      	ldr	r3, [r7, #4]
  402268:	441a      	add	r2, r3
  40226a:	68fb      	ldr	r3, [r7, #12]
  40226c:	429a      	cmp	r2, r3
  40226e:	dd02      	ble.n	402276 <_sbrk+0x32>
		return (caddr_t) -1;	
  402270:	f04f 33ff 	mov.w	r3, #4294967295
  402274:	e006      	b.n	402284 <_sbrk+0x40>
	}

	heap += incr;
  402276:	4b07      	ldr	r3, [pc, #28]	; (402294 <_sbrk+0x50>)
  402278:	681a      	ldr	r2, [r3, #0]
  40227a:	687b      	ldr	r3, [r7, #4]
  40227c:	4413      	add	r3, r2
  40227e:	4a05      	ldr	r2, [pc, #20]	; (402294 <_sbrk+0x50>)
  402280:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
  402282:	68bb      	ldr	r3, [r7, #8]
}
  402284:	4618      	mov	r0, r3
  402286:	3714      	adds	r7, #20
  402288:	46bd      	mov	sp, r7
  40228a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40228e:	4770      	bx	lr
  402290:	2045fffc 	.word	0x2045fffc
  402294:	20400a70 	.word	0x20400a70
  402298:	20404fe0 	.word	0x20404fe0

0040229c <_close>:
{
	return -1;
}

extern int _close(int file)
{
  40229c:	b480      	push	{r7}
  40229e:	b083      	sub	sp, #12
  4022a0:	af00      	add	r7, sp, #0
  4022a2:	6078      	str	r0, [r7, #4]
	return -1;
  4022a4:	f04f 33ff 	mov.w	r3, #4294967295
}
  4022a8:	4618      	mov	r0, r3
  4022aa:	370c      	adds	r7, #12
  4022ac:	46bd      	mov	sp, r7
  4022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
  4022b2:	4770      	bx	lr

004022b4 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
  4022b4:	b480      	push	{r7}
  4022b6:	b083      	sub	sp, #12
  4022b8:	af00      	add	r7, sp, #0
  4022ba:	6078      	str	r0, [r7, #4]
  4022bc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
  4022be:	683b      	ldr	r3, [r7, #0]
  4022c0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  4022c4:	605a      	str	r2, [r3, #4]

	return 0;
  4022c6:	2300      	movs	r3, #0
}
  4022c8:	4618      	mov	r0, r3
  4022ca:	370c      	adds	r7, #12
  4022cc:	46bd      	mov	sp, r7
  4022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
  4022d2:	4770      	bx	lr

004022d4 <_isatty>:

extern int _isatty(int file)
{
  4022d4:	b480      	push	{r7}
  4022d6:	b083      	sub	sp, #12
  4022d8:	af00      	add	r7, sp, #0
  4022da:	6078      	str	r0, [r7, #4]
	return 1;
  4022dc:	2301      	movs	r3, #1
}
  4022de:	4618      	mov	r0, r3
  4022e0:	370c      	adds	r7, #12
  4022e2:	46bd      	mov	sp, r7
  4022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4022e8:	4770      	bx	lr
  4022ea:	bf00      	nop

004022ec <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
  4022ec:	b480      	push	{r7}
  4022ee:	b085      	sub	sp, #20
  4022f0:	af00      	add	r7, sp, #0
  4022f2:	60f8      	str	r0, [r7, #12]
  4022f4:	60b9      	str	r1, [r7, #8]
  4022f6:	607a      	str	r2, [r7, #4]
	return 0;
  4022f8:	2300      	movs	r3, #0
}
  4022fa:	4618      	mov	r0, r3
  4022fc:	3714      	adds	r7, #20
  4022fe:	46bd      	mov	sp, r7
  402300:	f85d 7b04 	ldr.w	r7, [sp], #4
  402304:	4770      	bx	lr
  402306:	bf00      	nop

00402308 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  402308:	b480      	push	{r7}
  40230a:	b083      	sub	sp, #12
  40230c:	af00      	add	r7, sp, #0
  40230e:	4603      	mov	r3, r0
  402310:	80fb      	strh	r3, [r7, #6]
  return ((n & 0xff) << 8) | ((n & 0xff00) >> 8);
  402312:	88fb      	ldrh	r3, [r7, #6]
  402314:	021b      	lsls	r3, r3, #8
  402316:	b21a      	sxth	r2, r3
  402318:	88fb      	ldrh	r3, [r7, #6]
  40231a:	0a1b      	lsrs	r3, r3, #8
  40231c:	b29b      	uxth	r3, r3
  40231e:	b21b      	sxth	r3, r3
  402320:	4313      	orrs	r3, r2
  402322:	b21b      	sxth	r3, r3
  402324:	b29b      	uxth	r3, r3
}
  402326:	4618      	mov	r0, r3
  402328:	370c      	adds	r7, #12
  40232a:	46bd      	mov	sp, r7
  40232c:	f85d 7b04 	ldr.w	r7, [sp], #4
  402330:	4770      	bx	lr
  402332:	bf00      	nop

00402334 <lwip_ntohs>:
 * @param n u16_t in network byte order
 * @return n in host byte order
 */
u16_t
lwip_ntohs(u16_t n)
{
  402334:	b580      	push	{r7, lr}
  402336:	b082      	sub	sp, #8
  402338:	af00      	add	r7, sp, #0
  40233a:	4603      	mov	r3, r0
  40233c:	80fb      	strh	r3, [r7, #6]
  return lwip_htons(n);
  40233e:	88fb      	ldrh	r3, [r7, #6]
  402340:	4618      	mov	r0, r3
  402342:	4b03      	ldr	r3, [pc, #12]	; (402350 <lwip_ntohs+0x1c>)
  402344:	4798      	blx	r3
  402346:	4603      	mov	r3, r0
}
  402348:	4618      	mov	r0, r3
  40234a:	3708      	adds	r7, #8
  40234c:	46bd      	mov	sp, r7
  40234e:	bd80      	pop	{r7, pc}
  402350:	00402309 	.word	0x00402309

00402354 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
  402354:	b480      	push	{r7}
  402356:	b083      	sub	sp, #12
  402358:	af00      	add	r7, sp, #0
  40235a:	6078      	str	r0, [r7, #4]
  return ((n & 0xff) << 24) |
  40235c:	687b      	ldr	r3, [r7, #4]
  40235e:	061a      	lsls	r2, r3, #24
    ((n & 0xff00) << 8) |
  402360:	687b      	ldr	r3, [r7, #4]
  402362:	021b      	lsls	r3, r3, #8
  402364:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
  return ((n & 0xff) << 24) |
  402368:	431a      	orrs	r2, r3
    ((n & 0xff00) << 8) |
    ((n & 0xff0000UL) >> 8) |
  40236a:	687b      	ldr	r3, [r7, #4]
  40236c:	0a1b      	lsrs	r3, r3, #8
  40236e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 */
u32_t
lwip_htonl(u32_t n)
{
  return ((n & 0xff) << 24) |
    ((n & 0xff00) << 8) |
  402372:	431a      	orrs	r2, r3
    ((n & 0xff0000UL) >> 8) |
    ((n & 0xff000000UL) >> 24);
  402374:	687b      	ldr	r3, [r7, #4]
  402376:	0e1b      	lsrs	r3, r3, #24
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
  return ((n & 0xff) << 24) |
  402378:	4313      	orrs	r3, r2
    ((n & 0xff00) << 8) |
    ((n & 0xff0000UL) >> 8) |
    ((n & 0xff000000UL) >> 24);
}
  40237a:	4618      	mov	r0, r3
  40237c:	370c      	adds	r7, #12
  40237e:	46bd      	mov	sp, r7
  402380:	f85d 7b04 	ldr.w	r7, [sp], #4
  402384:	4770      	bx	lr
  402386:	bf00      	nop

00402388 <lwip_ntohl>:
 * @param n u32_t in network byte order
 * @return n in host byte order
 */
u32_t
lwip_ntohl(u32_t n)
{
  402388:	b580      	push	{r7, lr}
  40238a:	b082      	sub	sp, #8
  40238c:	af00      	add	r7, sp, #0
  40238e:	6078      	str	r0, [r7, #4]
  return lwip_htonl(n);
  402390:	6878      	ldr	r0, [r7, #4]
  402392:	4b03      	ldr	r3, [pc, #12]	; (4023a0 <lwip_ntohl+0x18>)
  402394:	4798      	blx	r3
  402396:	4603      	mov	r3, r0
}
  402398:	4618      	mov	r0, r3
  40239a:	3708      	adds	r7, #8
  40239c:	46bd      	mov	sp, r7
  40239e:	bd80      	pop	{r7, pc}
  4023a0:	00402355 	.word	0x00402355

004023a4 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
  4023a4:	b580      	push	{r7, lr}
  4023a6:	b084      	sub	sp, #16
  4023a8:	af00      	add	r7, sp, #0
  4023aa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif->dhcp;
  4023ac:	687b      	ldr	r3, [r7, #4]
  4023ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  4023b0:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n", 
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Set the interface down since the address must no longer be used, as per RFC2131 */
  netif_set_down(netif);
  4023b2:	6878      	ldr	r0, [r7, #4]
  4023b4:	4b0c      	ldr	r3, [pc, #48]	; (4023e8 <dhcp_handle_nak+0x44>)
  4023b6:	4798      	blx	r3
  /* remove IP address from interface */
  netif_set_ipaddr(netif, IP_ADDR_ANY);
  4023b8:	490c      	ldr	r1, [pc, #48]	; (4023ec <dhcp_handle_nak+0x48>)
  4023ba:	6878      	ldr	r0, [r7, #4]
  4023bc:	4b0c      	ldr	r3, [pc, #48]	; (4023f0 <dhcp_handle_nak+0x4c>)
  4023be:	4798      	blx	r3
  netif_set_gw(netif, IP_ADDR_ANY);
  4023c0:	490a      	ldr	r1, [pc, #40]	; (4023ec <dhcp_handle_nak+0x48>)
  4023c2:	6878      	ldr	r0, [r7, #4]
  4023c4:	4b0b      	ldr	r3, [pc, #44]	; (4023f4 <dhcp_handle_nak+0x50>)
  4023c6:	4798      	blx	r3
  netif_set_netmask(netif, IP_ADDR_ANY); 
  4023c8:	4908      	ldr	r1, [pc, #32]	; (4023ec <dhcp_handle_nak+0x48>)
  4023ca:	6878      	ldr	r0, [r7, #4]
  4023cc:	4b0a      	ldr	r3, [pc, #40]	; (4023f8 <dhcp_handle_nak+0x54>)
  4023ce:	4798      	blx	r3
  /* Change to a defined state */
  dhcp_set_state(dhcp, DHCP_BACKING_OFF);
  4023d0:	210c      	movs	r1, #12
  4023d2:	68f8      	ldr	r0, [r7, #12]
  4023d4:	4b09      	ldr	r3, [pc, #36]	; (4023fc <dhcp_handle_nak+0x58>)
  4023d6:	4798      	blx	r3
  /* We can immediately restart discovery */
  dhcp_discover(netif);
  4023d8:	6878      	ldr	r0, [r7, #4]
  4023da:	4b09      	ldr	r3, [pc, #36]	; (402400 <dhcp_handle_nak+0x5c>)
  4023dc:	4798      	blx	r3
}
  4023de:	bf00      	nop
  4023e0:	3710      	adds	r7, #16
  4023e2:	46bd      	mov	sp, r7
  4023e4:	bd80      	pop	{r7, pc}
  4023e6:	bf00      	nop
  4023e8:	00405c31 	.word	0x00405c31
  4023ec:	00414a28 	.word	0x00414a28
  4023f0:	00405aa1 	.word	0x00405aa1
  4023f4:	00405b55 	.word	0x00405b55
  4023f8:	00405b7d 	.word	0x00405b7d
  4023fc:	00403289 	.word	0x00403289
  402400:	00402b71 	.word	0x00402b71

00402404 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
  402404:	b580      	push	{r7, lr}
  402406:	b084      	sub	sp, #16
  402408:	af00      	add	r7, sp, #0
  40240a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif->dhcp;
  40240c:	687b      	ldr	r3, [r7, #4]
  40240e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  402410:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
    (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_CHECKING);
  402412:	2108      	movs	r1, #8
  402414:	68f8      	ldr	r0, [r7, #12]
  402416:	4b12      	ldr	r3, [pc, #72]	; (402460 <dhcp_check+0x5c>)
  402418:	4798      	blx	r3
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
  40241a:	68fb      	ldr	r3, [r7, #12]
  40241c:	3324      	adds	r3, #36	; 0x24
  40241e:	2200      	movs	r2, #0
  402420:	4619      	mov	r1, r3
  402422:	6878      	ldr	r0, [r7, #4]
  402424:	4b0f      	ldr	r3, [pc, #60]	; (402464 <dhcp_check+0x60>)
  402426:	4798      	blx	r3
  402428:	4603      	mov	r3, r0
  40242a:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  dhcp->tries++;
  40242c:	68fb      	ldr	r3, [r7, #12]
  40242e:	7b5b      	ldrb	r3, [r3, #13]
  402430:	3301      	adds	r3, #1
  402432:	b2da      	uxtb	r2, r3
  402434:	68fb      	ldr	r3, [r7, #12]
  402436:	735a      	strb	r2, [r3, #13]
  msecs = 500;
  402438:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
  40243c:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  40243e:	893b      	ldrh	r3, [r7, #8]
  402440:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
  402444:	4a08      	ldr	r2, [pc, #32]	; (402468 <dhcp_check+0x64>)
  402446:	fb82 1203 	smull	r1, r2, r2, r3
  40244a:	1152      	asrs	r2, r2, #5
  40244c:	17db      	asrs	r3, r3, #31
  40244e:	1ad3      	subs	r3, r2, r3
  402450:	b29a      	uxth	r2, r3
  402452:	68fb      	ldr	r3, [r7, #12]
  402454:	835a      	strh	r2, [r3, #26]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
  402456:	bf00      	nop
  402458:	3710      	adds	r7, #16
  40245a:	46bd      	mov	sp, r7
  40245c:	bd80      	pop	{r7, pc}
  40245e:	bf00      	nop
  402460:	00403289 	.word	0x00403289
  402464:	0040ba15 	.word	0x0040ba15
  402468:	10624dd3 	.word	0x10624dd3

0040246c <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif)
{
  40246c:	b580      	push	{r7, lr}
  40246e:	b084      	sub	sp, #16
  402470:	af00      	add	r7, sp, #0
  402472:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif->dhcp;
  402474:	687b      	ldr	r3, [r7, #4]
  402476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  402478:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
  40247a:	4b0c      	ldr	r3, [pc, #48]	; (4024ac <dhcp_handle_offer+0x40>)
  40247c:	789b      	ldrb	r3, [r3, #2]
  40247e:	2b00      	cmp	r3, #0
  402480:	d00f      	beq.n	4024a2 <dhcp_handle_offer+0x36>
    ip4_addr_set_u32(&dhcp->server_ip_addr, htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
  402482:	4b0b      	ldr	r3, [pc, #44]	; (4024b0 <dhcp_handle_offer+0x44>)
  402484:	689b      	ldr	r3, [r3, #8]
  402486:	4618      	mov	r0, r3
  402488:	4b0a      	ldr	r3, [pc, #40]	; (4024b4 <dhcp_handle_offer+0x48>)
  40248a:	4798      	blx	r3
  40248c:	4602      	mov	r2, r0
  40248e:	68fb      	ldr	r3, [r7, #12]
  402490:	621a      	str	r2, [r3, #32]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
      ip4_addr_get_u32(&dhcp->server_ip_addr)));
    /* remember offered address */
    ip_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
  402492:	68fb      	ldr	r3, [r7, #12]
  402494:	689b      	ldr	r3, [r3, #8]
  402496:	691a      	ldr	r2, [r3, #16]
  402498:	68fb      	ldr	r3, [r7, #12]
  40249a:	625a      	str	r2, [r3, #36]	; 0x24
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
      ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
  40249c:	6878      	ldr	r0, [r7, #4]
  40249e:	4b06      	ldr	r3, [pc, #24]	; (4024b8 <dhcp_handle_offer+0x4c>)
  4024a0:	4798      	blx	r3
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void*)netif));
  }
}
  4024a2:	bf00      	nop
  4024a4:	3710      	adds	r7, #16
  4024a6:	46bd      	mov	sp, r7
  4024a8:	bd80      	pop	{r7, pc}
  4024aa:	bf00      	nop
  4024ac:	20403918 	.word	0x20403918
  4024b0:	20403924 	.word	0x20403924
  4024b4:	00402355 	.word	0x00402355
  4024b8:	004024bd 	.word	0x004024bd

004024bc <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
  4024bc:	b590      	push	{r4, r7, lr}
  4024be:	b087      	sub	sp, #28
  4024c0:	af02      	add	r7, sp, #8
  4024c2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif->dhcp;
  4024c4:	687b      	ldr	r3, [r7, #4]
  4024c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  4024c8:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_REQUESTING);
  4024ca:	2101      	movs	r1, #1
  4024cc:	68f8      	ldr	r0, [r7, #12]
  4024ce:	4b46      	ldr	r3, [pc, #280]	; (4025e8 <dhcp_select+0x12c>)
  4024d0:	4798      	blx	r3

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
  4024d2:	2203      	movs	r2, #3
  4024d4:	68f9      	ldr	r1, [r7, #12]
  4024d6:	6878      	ldr	r0, [r7, #4]
  4024d8:	4b44      	ldr	r3, [pc, #272]	; (4025ec <dhcp_select+0x130>)
  4024da:	4798      	blx	r3
  4024dc:	4603      	mov	r3, r0
  4024de:	72fb      	strb	r3, [r7, #11]
  if (result == ERR_OK) {
  4024e0:	f997 300b 	ldrsb.w	r3, [r7, #11]
  4024e4:	2b00      	cmp	r3, #0
  4024e6:	d157      	bne.n	402598 <dhcp_select+0xdc>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
  4024e8:	2202      	movs	r2, #2
  4024ea:	2139      	movs	r1, #57	; 0x39
  4024ec:	68f8      	ldr	r0, [r7, #12]
  4024ee:	4b40      	ldr	r3, [pc, #256]	; (4025f0 <dhcp_select+0x134>)
  4024f0:	4798      	blx	r3
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
  4024f2:	687b      	ldr	r3, [r7, #4]
  4024f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
  4024f6:	4619      	mov	r1, r3
  4024f8:	68f8      	ldr	r0, [r7, #12]
  4024fa:	4b3e      	ldr	r3, [pc, #248]	; (4025f4 <dhcp_select+0x138>)
  4024fc:	4798      	blx	r3

    /* MUST request the offered IP address */
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
  4024fe:	2204      	movs	r2, #4
  402500:	2132      	movs	r1, #50	; 0x32
  402502:	68f8      	ldr	r0, [r7, #12]
  402504:	4b3a      	ldr	r3, [pc, #232]	; (4025f0 <dhcp_select+0x134>)
  402506:	4798      	blx	r3
    dhcp_option_long(dhcp, ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
  402508:	68fb      	ldr	r3, [r7, #12]
  40250a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  40250c:	4618      	mov	r0, r3
  40250e:	4b3a      	ldr	r3, [pc, #232]	; (4025f8 <dhcp_select+0x13c>)
  402510:	4798      	blx	r3
  402512:	4603      	mov	r3, r0
  402514:	4619      	mov	r1, r3
  402516:	68f8      	ldr	r0, [r7, #12]
  402518:	4b38      	ldr	r3, [pc, #224]	; (4025fc <dhcp_select+0x140>)
  40251a:	4798      	blx	r3

    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
  40251c:	2204      	movs	r2, #4
  40251e:	2136      	movs	r1, #54	; 0x36
  402520:	68f8      	ldr	r0, [r7, #12]
  402522:	4b33      	ldr	r3, [pc, #204]	; (4025f0 <dhcp_select+0x134>)
  402524:	4798      	blx	r3
    dhcp_option_long(dhcp, ntohl(ip4_addr_get_u32(&dhcp->server_ip_addr)));
  402526:	68fb      	ldr	r3, [r7, #12]
  402528:	6a1b      	ldr	r3, [r3, #32]
  40252a:	4618      	mov	r0, r3
  40252c:	4b32      	ldr	r3, [pc, #200]	; (4025f8 <dhcp_select+0x13c>)
  40252e:	4798      	blx	r3
  402530:	4603      	mov	r3, r0
  402532:	4619      	mov	r1, r3
  402534:	68f8      	ldr	r0, [r7, #12]
  402536:	4b31      	ldr	r3, [pc, #196]	; (4025fc <dhcp_select+0x140>)
  402538:	4798      	blx	r3

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, 4/*num options*/);
  40253a:	2204      	movs	r2, #4
  40253c:	2137      	movs	r1, #55	; 0x37
  40253e:	68f8      	ldr	r0, [r7, #12]
  402540:	4b2b      	ldr	r3, [pc, #172]	; (4025f0 <dhcp_select+0x134>)
  402542:	4798      	blx	r3
    dhcp_option_byte(dhcp, DHCP_OPTION_SUBNET_MASK);
  402544:	2101      	movs	r1, #1
  402546:	68f8      	ldr	r0, [r7, #12]
  402548:	4b2d      	ldr	r3, [pc, #180]	; (402600 <dhcp_select+0x144>)
  40254a:	4798      	blx	r3
    dhcp_option_byte(dhcp, DHCP_OPTION_ROUTER);
  40254c:	2103      	movs	r1, #3
  40254e:	68f8      	ldr	r0, [r7, #12]
  402550:	4b2b      	ldr	r3, [pc, #172]	; (402600 <dhcp_select+0x144>)
  402552:	4798      	blx	r3
    dhcp_option_byte(dhcp, DHCP_OPTION_BROADCAST);
  402554:	211c      	movs	r1, #28
  402556:	68f8      	ldr	r0, [r7, #12]
  402558:	4b29      	ldr	r3, [pc, #164]	; (402600 <dhcp_select+0x144>)
  40255a:	4798      	blx	r3
    dhcp_option_byte(dhcp, DHCP_OPTION_DNS_SERVER);
  40255c:	2106      	movs	r1, #6
  40255e:	68f8      	ldr	r0, [r7, #12]
  402560:	4b27      	ldr	r3, [pc, #156]	; (402600 <dhcp_select+0x144>)
  402562:	4798      	blx	r3

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
  402564:	68f8      	ldr	r0, [r7, #12]
  402566:	4b27      	ldr	r3, [pc, #156]	; (402604 <dhcp_select+0x148>)
  402568:	4798      	blx	r3
    /* shrink the pbuf to the actual content length */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  40256a:	68fb      	ldr	r3, [r7, #12]
  40256c:	691a      	ldr	r2, [r3, #16]
  40256e:	68fb      	ldr	r3, [r7, #12]
  402570:	8b1b      	ldrh	r3, [r3, #24]
  402572:	33f0      	adds	r3, #240	; 0xf0
  402574:	b29b      	uxth	r3, r3
  402576:	4619      	mov	r1, r3
  402578:	4610      	mov	r0, r2
  40257a:	4b23      	ldr	r3, [pc, #140]	; (402608 <dhcp_select+0x14c>)
  40257c:	4798      	blx	r3

    /* send broadcast to any DHCP server */
    udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
  40257e:	68fb      	ldr	r3, [r7, #12]
  402580:	6858      	ldr	r0, [r3, #4]
  402582:	68fb      	ldr	r3, [r7, #12]
  402584:	6919      	ldr	r1, [r3, #16]
  402586:	687b      	ldr	r3, [r7, #4]
  402588:	9300      	str	r3, [sp, #0]
  40258a:	2343      	movs	r3, #67	; 0x43
  40258c:	4a1f      	ldr	r2, [pc, #124]	; (40260c <dhcp_select+0x150>)
  40258e:	4c20      	ldr	r4, [pc, #128]	; (402610 <dhcp_select+0x154>)
  402590:	47a0      	blx	r4
    dhcp_delete_msg(dhcp);
  402592:	68f8      	ldr	r0, [r7, #12]
  402594:	4b1f      	ldr	r3, [pc, #124]	; (402614 <dhcp_select+0x158>)
  402596:	4798      	blx	r3
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
  }
  dhcp->tries++;
  402598:	68fb      	ldr	r3, [r7, #12]
  40259a:	7b5b      	ldrb	r3, [r3, #13]
  40259c:	3301      	adds	r3, #1
  40259e:	b2da      	uxtb	r2, r3
  4025a0:	68fb      	ldr	r3, [r7, #12]
  4025a2:	735a      	strb	r2, [r3, #13]
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
  4025a4:	68fb      	ldr	r3, [r7, #12]
  4025a6:	7b5b      	ldrb	r3, [r3, #13]
  4025a8:	2b05      	cmp	r3, #5
  4025aa:	d807      	bhi.n	4025bc <dhcp_select+0x100>
  4025ac:	68fb      	ldr	r3, [r7, #12]
  4025ae:	7b5b      	ldrb	r3, [r3, #13]
  4025b0:	461a      	mov	r2, r3
  4025b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  4025b6:	4093      	lsls	r3, r2
  4025b8:	b29b      	uxth	r3, r3
  4025ba:	e001      	b.n	4025c0 <dhcp_select+0x104>
  4025bc:	f64e 2360 	movw	r3, #60000	; 0xea60
  4025c0:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  4025c2:	893b      	ldrh	r3, [r7, #8]
  4025c4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
  4025c8:	4a13      	ldr	r2, [pc, #76]	; (402618 <dhcp_select+0x15c>)
  4025ca:	fb82 1203 	smull	r1, r2, r2, r3
  4025ce:	1152      	asrs	r2, r2, #5
  4025d0:	17db      	asrs	r3, r3, #31
  4025d2:	1ad3      	subs	r3, r2, r3
  4025d4:	b29a      	uxth	r2, r3
  4025d6:	68fb      	ldr	r3, [r7, #12]
  4025d8:	835a      	strh	r2, [r3, #26]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
  4025da:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
  4025de:	4618      	mov	r0, r3
  4025e0:	3714      	adds	r7, #20
  4025e2:	46bd      	mov	sp, r7
  4025e4:	bd90      	pop	{r4, r7, pc}
  4025e6:	bf00      	nop
  4025e8:	00403289 	.word	0x00403289
  4025ec:	004039b9 	.word	0x004039b9
  4025f0:	004032bd 	.word	0x004032bd
  4025f4:	00403339 	.word	0x00403339
  4025f8:	00402389 	.word	0x00402389
  4025fc:	00403391 	.word	0x00403391
  402600:	00403309 	.word	0x00403309
  402604:	00403c25 	.word	0x00403c25
  402608:	00405ed1 	.word	0x00405ed1
  40260c:	00414a2c 	.word	0x00414a2c
  402610:	0040ad5d 	.word	0x0040ad5d
  402614:	00403be9 	.word	0x00403be9
  402618:	10624dd3 	.word	0x10624dd3

0040261c <dhcp_coarse_tmr>:
/**
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 */
void
dhcp_coarse_tmr()
{
  40261c:	b580      	push	{r7, lr}
  40261e:	b082      	sub	sp, #8
  402620:	af00      	add	r7, sp, #0
  struct netif *netif = netif_list;
  402622:	4b14      	ldr	r3, [pc, #80]	; (402674 <dhcp_coarse_tmr+0x58>)
  402624:	681b      	ldr	r3, [r3, #0]
  402626:	607b      	str	r3, [r7, #4]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  while (netif != NULL) {
  402628:	e01d      	b.n	402666 <dhcp_coarse_tmr+0x4a>
    /* only act on DHCP configured interfaces */
    if (netif->dhcp != NULL) {
  40262a:	687b      	ldr	r3, [r7, #4]
  40262c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  40262e:	2b00      	cmp	r3, #0
  402630:	d016      	beq.n	402660 <dhcp_coarse_tmr+0x44>
      /* timer is active (non zero), and triggers (zeroes) now? */
      if (netif->dhcp->t2_timeout-- == 1) {
  402632:	687b      	ldr	r3, [r7, #4]
  402634:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  402636:	8bd3      	ldrh	r3, [r2, #30]
  402638:	1e59      	subs	r1, r3, #1
  40263a:	b289      	uxth	r1, r1
  40263c:	83d1      	strh	r1, [r2, #30]
  40263e:	2b01      	cmp	r3, #1
  402640:	d103      	bne.n	40264a <dhcp_coarse_tmr+0x2e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
  402642:	6878      	ldr	r0, [r7, #4]
  402644:	4b0c      	ldr	r3, [pc, #48]	; (402678 <dhcp_coarse_tmr+0x5c>)
  402646:	4798      	blx	r3
  402648:	e00a      	b.n	402660 <dhcp_coarse_tmr+0x44>
      /* timer is active (non zero), and triggers (zeroes) now */
      } else if (netif->dhcp->t1_timeout-- == 1) {
  40264a:	687b      	ldr	r3, [r7, #4]
  40264c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  40264e:	8b93      	ldrh	r3, [r2, #28]
  402650:	1e59      	subs	r1, r3, #1
  402652:	b289      	uxth	r1, r1
  402654:	8391      	strh	r1, [r2, #28]
  402656:	2b01      	cmp	r3, #1
  402658:	d102      	bne.n	402660 <dhcp_coarse_tmr+0x44>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
  40265a:	6878      	ldr	r0, [r7, #4]
  40265c:	4b07      	ldr	r3, [pc, #28]	; (40267c <dhcp_coarse_tmr+0x60>)
  40265e:	4798      	blx	r3
      }
    }
    /* proceed to next netif */
    netif = netif->next;
  402660:	687b      	ldr	r3, [r7, #4]
  402662:	681b      	ldr	r3, [r3, #0]
  402664:	607b      	str	r3, [r7, #4]
dhcp_coarse_tmr()
{
  struct netif *netif = netif_list;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  while (netif != NULL) {
  402666:	687b      	ldr	r3, [r7, #4]
  402668:	2b00      	cmp	r3, #0
  40266a:	d1de      	bne.n	40262a <dhcp_coarse_tmr+0xe>
      }
    }
    /* proceed to next netif */
    netif = netif->next;
  }
}
  40266c:	bf00      	nop
  40266e:	3708      	adds	r7, #8
  402670:	46bd      	mov	sp, r7
  402672:	bd80      	pop	{r7, pc}
  402674:	20404970 	.word	0x20404970
  402678:	00402809 	.word	0x00402809
  40267c:	004027d1 	.word	0x004027d1

00402680 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr()
{
  402680:	b580      	push	{r7, lr}
  402682:	b082      	sub	sp, #8
  402684:	af00      	add	r7, sp, #0
  struct netif *netif = netif_list;
  402686:	4b16      	ldr	r3, [pc, #88]	; (4026e0 <dhcp_fine_tmr+0x60>)
  402688:	681b      	ldr	r3, [r3, #0]
  40268a:	607b      	str	r3, [r7, #4]
  /* loop through netif's */
  while (netif != NULL) {
  40268c:	e020      	b.n	4026d0 <dhcp_fine_tmr+0x50>
    /* only act on DHCP configured interfaces */
    if (netif->dhcp != NULL) {
  40268e:	687b      	ldr	r3, [r7, #4]
  402690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  402692:	2b00      	cmp	r3, #0
  402694:	d019      	beq.n	4026ca <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */      
      if (netif->dhcp->request_timeout > 1) {
  402696:	687b      	ldr	r3, [r7, #4]
  402698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  40269a:	8b5b      	ldrh	r3, [r3, #26]
  40269c:	2b01      	cmp	r3, #1
  40269e:	d906      	bls.n	4026ae <dhcp_fine_tmr+0x2e>
        netif->dhcp->request_timeout--;
  4026a0:	687b      	ldr	r3, [r7, #4]
  4026a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  4026a4:	8b5a      	ldrh	r2, [r3, #26]
  4026a6:	3a01      	subs	r2, #1
  4026a8:	b292      	uxth	r2, r2
  4026aa:	835a      	strh	r2, [r3, #26]
  4026ac:	e00d      	b.n	4026ca <dhcp_fine_tmr+0x4a>
      }
      else if (netif->dhcp->request_timeout == 1) {
  4026ae:	687b      	ldr	r3, [r7, #4]
  4026b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  4026b2:	8b5b      	ldrh	r3, [r3, #26]
  4026b4:	2b01      	cmp	r3, #1
  4026b6:	d108      	bne.n	4026ca <dhcp_fine_tmr+0x4a>
        netif->dhcp->request_timeout--;
  4026b8:	687b      	ldr	r3, [r7, #4]
  4026ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  4026bc:	8b5a      	ldrh	r2, [r3, #26]
  4026be:	3a01      	subs	r2, #1
  4026c0:	b292      	uxth	r2, r2
  4026c2:	835a      	strh	r2, [r3, #26]
        /* { netif->dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
  4026c4:	6878      	ldr	r0, [r7, #4]
  4026c6:	4b07      	ldr	r3, [pc, #28]	; (4026e4 <dhcp_fine_tmr+0x64>)
  4026c8:	4798      	blx	r3
      }
    }
    /* proceed to next network interface */
    netif = netif->next;
  4026ca:	687b      	ldr	r3, [r7, #4]
  4026cc:	681b      	ldr	r3, [r3, #0]
  4026ce:	607b      	str	r3, [r7, #4]
void
dhcp_fine_tmr()
{
  struct netif *netif = netif_list;
  /* loop through netif's */
  while (netif != NULL) {
  4026d0:	687b      	ldr	r3, [r7, #4]
  4026d2:	2b00      	cmp	r3, #0
  4026d4:	d1db      	bne.n	40268e <dhcp_fine_tmr+0xe>
      }
    }
    /* proceed to next network interface */
    netif = netif->next;
  }
}
  4026d6:	bf00      	nop
  4026d8:	3708      	adds	r7, #8
  4026da:	46bd      	mov	sp, r7
  4026dc:	bd80      	pop	{r7, pc}
  4026de:	bf00      	nop
  4026e0:	20404970 	.word	0x20404970
  4026e4:	004026e9 	.word	0x004026e9

004026e8 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
  4026e8:	b580      	push	{r7, lr}
  4026ea:	b084      	sub	sp, #16
  4026ec:	af00      	add	r7, sp, #0
  4026ee:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif->dhcp;
  4026f0:	687b      	ldr	r3, [r7, #4]
  4026f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  4026f4:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_BACKING_OFF) || (dhcp->state == DHCP_SELECTING)) {
  4026f6:	68fb      	ldr	r3, [r7, #12]
  4026f8:	7b1b      	ldrb	r3, [r3, #12]
  4026fa:	2b0c      	cmp	r3, #12
  4026fc:	d003      	beq.n	402706 <dhcp_timeout+0x1e>
  4026fe:	68fb      	ldr	r3, [r7, #12]
  402700:	7b1b      	ldrb	r3, [r3, #12]
  402702:	2b06      	cmp	r3, #6
  402704:	d103      	bne.n	40270e <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
  402706:	6878      	ldr	r0, [r7, #4]
  402708:	4b29      	ldr	r3, [pc, #164]	; (4027b0 <dhcp_timeout+0xc8>)
  40270a:	4798      	blx	r3
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
  40270c:	e04c      	b.n	4027a8 <dhcp_timeout+0xc0>
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_BACKING_OFF) || (dhcp->state == DHCP_SELECTING)) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
  /* receiving the requested lease timed out */
  } else if (dhcp->state == DHCP_REQUESTING) {
  40270e:	68fb      	ldr	r3, [r7, #12]
  402710:	7b1b      	ldrb	r3, [r3, #12]
  402712:	2b01      	cmp	r3, #1
  402714:	d10e      	bne.n	402734 <dhcp_timeout+0x4c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): REQUESTING, DHCP request timed out\n"));
    if (dhcp->tries <= 5) {
  402716:	68fb      	ldr	r3, [r7, #12]
  402718:	7b5b      	ldrb	r3, [r3, #13]
  40271a:	2b05      	cmp	r3, #5
  40271c:	d803      	bhi.n	402726 <dhcp_timeout+0x3e>
      dhcp_select(netif);
  40271e:	6878      	ldr	r0, [r7, #4]
  402720:	4b24      	ldr	r3, [pc, #144]	; (4027b4 <dhcp_timeout+0xcc>)
  402722:	4798      	blx	r3
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
  402724:	e040      	b.n	4027a8 <dhcp_timeout+0xc0>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): REQUESTING, DHCP request timed out\n"));
    if (dhcp->tries <= 5) {
      dhcp_select(netif);
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): REQUESTING, releasing, restarting\n"));
      dhcp_release(netif);
  402726:	6878      	ldr	r0, [r7, #4]
  402728:	4b23      	ldr	r3, [pc, #140]	; (4027b8 <dhcp_timeout+0xd0>)
  40272a:	4798      	blx	r3
      dhcp_discover(netif);
  40272c:	6878      	ldr	r0, [r7, #4]
  40272e:	4b20      	ldr	r3, [pc, #128]	; (4027b0 <dhcp_timeout+0xc8>)
  402730:	4798      	blx	r3
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
  402732:	e039      	b.n	4027a8 <dhcp_timeout+0xc0>
      dhcp_release(netif);
      dhcp_discover(netif);
    }
#if DHCP_DOES_ARP_CHECK
  /* received no ARP reply for the offered address (which is good) */
  } else if (dhcp->state == DHCP_CHECKING) {
  402734:	68fb      	ldr	r3, [r7, #12]
  402736:	7b1b      	ldrb	r3, [r3, #12]
  402738:	2b08      	cmp	r3, #8
  40273a:	d10b      	bne.n	402754 <dhcp_timeout+0x6c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): CHECKING, ARP request timed out\n"));
    if (dhcp->tries <= 1) {
  40273c:	68fb      	ldr	r3, [r7, #12]
  40273e:	7b5b      	ldrb	r3, [r3, #13]
  402740:	2b01      	cmp	r3, #1
  402742:	d803      	bhi.n	40274c <dhcp_timeout+0x64>
      dhcp_check(netif);
  402744:	6878      	ldr	r0, [r7, #4]
  402746:	4b1d      	ldr	r3, [pc, #116]	; (4027bc <dhcp_timeout+0xd4>)
  402748:	4798      	blx	r3
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
  40274a:	e02d      	b.n	4027a8 <dhcp_timeout+0xc0>
      dhcp_check(netif);
    /* no ARP replies on the offered address,
       looks like the IP address is indeed free */
    } else {
      /* bind the interface to the offered address */
      dhcp_bind(netif);
  40274c:	6878      	ldr	r0, [r7, #4]
  40274e:	4b1c      	ldr	r3, [pc, #112]	; (4027c0 <dhcp_timeout+0xd8>)
  402750:	4798      	blx	r3
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
  402752:	e029      	b.n	4027a8 <dhcp_timeout+0xc0>
      dhcp_bind(netif);
    }
#endif /* DHCP_DOES_ARP_CHECK */
  }
  /* did not get response to renew request? */
  else if (dhcp->state == DHCP_RENEWING) {
  402754:	68fb      	ldr	r3, [r7, #12]
  402756:	7b1b      	ldrb	r3, [r3, #12]
  402758:	2b05      	cmp	r3, #5
  40275a:	d103      	bne.n	402764 <dhcp_timeout+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): RENEWING, DHCP request timed out\n"));
    /* just retry renewal */
    /* note that the rebind timer will eventually time-out if renew does not work */
    dhcp_renew(netif);
  40275c:	6878      	ldr	r0, [r7, #4]
  40275e:	4b19      	ldr	r3, [pc, #100]	; (4027c4 <dhcp_timeout+0xdc>)
  402760:	4798      	blx	r3
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
  402762:	e021      	b.n	4027a8 <dhcp_timeout+0xc0>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): RENEWING, DHCP request timed out\n"));
    /* just retry renewal */
    /* note that the rebind timer will eventually time-out if renew does not work */
    dhcp_renew(netif);
  /* did not get response to rebind request? */
  } else if (dhcp->state == DHCP_REBINDING) {
  402764:	68fb      	ldr	r3, [r7, #12]
  402766:	7b1b      	ldrb	r3, [r3, #12]
  402768:	2b04      	cmp	r3, #4
  40276a:	d10e      	bne.n	40278a <dhcp_timeout+0xa2>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): REBINDING, DHCP request timed out\n"));
    if (dhcp->tries <= 8) {
  40276c:	68fb      	ldr	r3, [r7, #12]
  40276e:	7b5b      	ldrb	r3, [r3, #13]
  402770:	2b08      	cmp	r3, #8
  402772:	d803      	bhi.n	40277c <dhcp_timeout+0x94>
      dhcp_rebind(netif);
  402774:	6878      	ldr	r0, [r7, #4]
  402776:	4b14      	ldr	r3, [pc, #80]	; (4027c8 <dhcp_timeout+0xe0>)
  402778:	4798      	blx	r3
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
  40277a:	e015      	b.n	4027a8 <dhcp_timeout+0xc0>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): REBINDING, DHCP request timed out\n"));
    if (dhcp->tries <= 8) {
      dhcp_rebind(netif);
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): RELEASING, DISCOVERING\n"));
      dhcp_release(netif);
  40277c:	6878      	ldr	r0, [r7, #4]
  40277e:	4b0e      	ldr	r3, [pc, #56]	; (4027b8 <dhcp_timeout+0xd0>)
  402780:	4798      	blx	r3
      dhcp_discover(netif);
  402782:	6878      	ldr	r0, [r7, #4]
  402784:	4b0a      	ldr	r3, [pc, #40]	; (4027b0 <dhcp_timeout+0xc8>)
  402786:	4798      	blx	r3
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
  402788:	e00e      	b.n	4027a8 <dhcp_timeout+0xc0>
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): RELEASING, DISCOVERING\n"));
      dhcp_release(netif);
      dhcp_discover(netif);
    }
  } else if (dhcp->state == DHCP_REBOOTING) {
  40278a:	68fb      	ldr	r3, [r7, #12]
  40278c:	7b1b      	ldrb	r3, [r3, #12]
  40278e:	2b03      	cmp	r3, #3
  402790:	d10a      	bne.n	4027a8 <dhcp_timeout+0xc0>
    if (dhcp->tries < REBOOT_TRIES) {
  402792:	68fb      	ldr	r3, [r7, #12]
  402794:	7b5b      	ldrb	r3, [r3, #13]
  402796:	2b01      	cmp	r3, #1
  402798:	d803      	bhi.n	4027a2 <dhcp_timeout+0xba>
      dhcp_reboot(netif);
  40279a:	6878      	ldr	r0, [r7, #4]
  40279c:	4b0b      	ldr	r3, [pc, #44]	; (4027cc <dhcp_timeout+0xe4>)
  40279e:	4798      	blx	r3
    } else {
      dhcp_discover(netif);
    }
  }
}
  4027a0:	e002      	b.n	4027a8 <dhcp_timeout+0xc0>
    }
  } else if (dhcp->state == DHCP_REBOOTING) {
    if (dhcp->tries < REBOOT_TRIES) {
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
  4027a2:	6878      	ldr	r0, [r7, #4]
  4027a4:	4b02      	ldr	r3, [pc, #8]	; (4027b0 <dhcp_timeout+0xc8>)
  4027a6:	4798      	blx	r3
    }
  }
}
  4027a8:	bf00      	nop
  4027aa:	3710      	adds	r7, #16
  4027ac:	46bd      	mov	sp, r7
  4027ae:	bd80      	pop	{r7, pc}
  4027b0:	00402b71 	.word	0x00402b71
  4027b4:	004024bd 	.word	0x004024bd
  4027b8:	004030f5 	.word	0x004030f5
  4027bc:	00402405 	.word	0x00402405
  4027c0:	00402c95 	.word	0x00402c95
  4027c4:	00402df5 	.word	0x00402df5
  4027c8:	00402ee9 	.word	0x00402ee9
  4027cc:	00402fdd 	.word	0x00402fdd

004027d0 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
  4027d0:	b580      	push	{r7, lr}
  4027d2:	b084      	sub	sp, #16
  4027d4:	af00      	add	r7, sp, #0
  4027d6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif->dhcp;
  4027d8:	687b      	ldr	r3, [r7, #4]
  4027da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  4027dc:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_REQUESTING) || (dhcp->state == DHCP_BOUND) ||
  4027de:	68fb      	ldr	r3, [r7, #12]
  4027e0:	7b1b      	ldrb	r3, [r3, #12]
  4027e2:	2b01      	cmp	r3, #1
  4027e4:	d007      	beq.n	4027f6 <dhcp_t1_timeout+0x26>
  4027e6:	68fb      	ldr	r3, [r7, #12]
  4027e8:	7b1b      	ldrb	r3, [r3, #12]
  4027ea:	2b0a      	cmp	r3, #10
  4027ec:	d003      	beq.n	4027f6 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_RENEWING)) {
  4027ee:	68fb      	ldr	r3, [r7, #12]
  4027f0:	7b1b      	ldrb	r3, [r3, #12]
static void
dhcp_t1_timeout(struct netif *netif)
{
  struct dhcp *dhcp = netif->dhcp;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_REQUESTING) || (dhcp->state == DHCP_BOUND) ||
  4027f2:	2b05      	cmp	r3, #5
  4027f4:	d102      	bne.n	4027fc <dhcp_t1_timeout+0x2c>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_RENEWING, not DHCP_BOUND */
    dhcp_renew(netif);
  4027f6:	6878      	ldr	r0, [r7, #4]
  4027f8:	4b02      	ldr	r3, [pc, #8]	; (402804 <dhcp_t1_timeout+0x34>)
  4027fa:	4798      	blx	r3
  }
}
  4027fc:	bf00      	nop
  4027fe:	3710      	adds	r7, #16
  402800:	46bd      	mov	sp, r7
  402802:	bd80      	pop	{r7, pc}
  402804:	00402df5 	.word	0x00402df5

00402808 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
  402808:	b580      	push	{r7, lr}
  40280a:	b084      	sub	sp, #16
  40280c:	af00      	add	r7, sp, #0
  40280e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif->dhcp;
  402810:	687b      	ldr	r3, [r7, #4]
  402812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  402814:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_REQUESTING) || (dhcp->state == DHCP_BOUND) ||
  402816:	68fb      	ldr	r3, [r7, #12]
  402818:	7b1b      	ldrb	r3, [r3, #12]
  40281a:	2b01      	cmp	r3, #1
  40281c:	d007      	beq.n	40282e <dhcp_t2_timeout+0x26>
  40281e:	68fb      	ldr	r3, [r7, #12]
  402820:	7b1b      	ldrb	r3, [r3, #12]
  402822:	2b0a      	cmp	r3, #10
  402824:	d003      	beq.n	40282e <dhcp_t2_timeout+0x26>
      (dhcp->state == DHCP_RENEWING)) {
  402826:	68fb      	ldr	r3, [r7, #12]
  402828:	7b1b      	ldrb	r3, [r3, #12]
static void
dhcp_t2_timeout(struct netif *netif)
{
  struct dhcp *dhcp = netif->dhcp;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_REQUESTING) || (dhcp->state == DHCP_BOUND) ||
  40282a:	2b05      	cmp	r3, #5
  40282c:	d102      	bne.n	402834 <dhcp_t2_timeout+0x2c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_REBINDING, not DHCP_BOUND */
    dhcp_rebind(netif);
  40282e:	6878      	ldr	r0, [r7, #4]
  402830:	4b02      	ldr	r3, [pc, #8]	; (40283c <dhcp_t2_timeout+0x34>)
  402832:	4798      	blx	r3
  }
}
  402834:	bf00      	nop
  402836:	3710      	adds	r7, #16
  402838:	46bd      	mov	sp, r7
  40283a:	bd80      	pop	{r7, pc}
  40283c:	00402ee9 	.word	0x00402ee9

00402840 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif)
{
  402840:	b580      	push	{r7, lr}
  402842:	b084      	sub	sp, #16
  402844:	af00      	add	r7, sp, #0
  402846:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif->dhcp;
  402848:	687b      	ldr	r3, [r7, #4]
  40284a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  40284c:	60fb      	str	r3, [r7, #12]
#if LWIP_DNS
  u8_t n;
#endif /* LWIP_DNS */

  /* clear options we might not get from the ACK */
  ip_addr_set_zero(&dhcp->offered_sn_mask);
  40284e:	68fb      	ldr	r3, [r7, #12]
  402850:	2200      	movs	r2, #0
  402852:	629a      	str	r2, [r3, #40]	; 0x28
  ip_addr_set_zero(&dhcp->offered_gw_addr);
  402854:	68fb      	ldr	r3, [r7, #12]
  402856:	2200      	movs	r2, #0
  402858:	62da      	str	r2, [r3, #44]	; 0x2c
#if LWIP_DHCP_BOOTP_FILE
  ip_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
  40285a:	4b25      	ldr	r3, [pc, #148]	; (4028f0 <dhcp_handle_ack+0xb0>)
  40285c:	78db      	ldrb	r3, [r3, #3]
  40285e:	2b00      	cmp	r3, #0
  402860:	d003      	beq.n	40286a <dhcp_handle_ack+0x2a>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
  402862:	4b24      	ldr	r3, [pc, #144]	; (4028f4 <dhcp_handle_ack+0xb4>)
  402864:	68da      	ldr	r2, [r3, #12]
  402866:	68fb      	ldr	r3, [r7, #12]
  402868:	631a      	str	r2, [r3, #48]	; 0x30
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
  40286a:	4b21      	ldr	r3, [pc, #132]	; (4028f0 <dhcp_handle_ack+0xb0>)
  40286c:	791b      	ldrb	r3, [r3, #4]
  40286e:	2b00      	cmp	r3, #0
  402870:	d004      	beq.n	40287c <dhcp_handle_ack+0x3c>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
  402872:	4b20      	ldr	r3, [pc, #128]	; (4028f4 <dhcp_handle_ack+0xb4>)
  402874:	691a      	ldr	r2, [r3, #16]
  402876:	68fb      	ldr	r3, [r7, #12]
  402878:	635a      	str	r2, [r3, #52]	; 0x34
  40287a:	e004      	b.n	402886 <dhcp_handle_ack+0x46>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
  40287c:	68fb      	ldr	r3, [r7, #12]
  40287e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402880:	085a      	lsrs	r2, r3, #1
  402882:	68fb      	ldr	r3, [r7, #12]
  402884:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
  402886:	4b1a      	ldr	r3, [pc, #104]	; (4028f0 <dhcp_handle_ack+0xb0>)
  402888:	795b      	ldrb	r3, [r3, #5]
  40288a:	2b00      	cmp	r3, #0
  40288c:	d004      	beq.n	402898 <dhcp_handle_ack+0x58>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
  40288e:	4b19      	ldr	r3, [pc, #100]	; (4028f4 <dhcp_handle_ack+0xb4>)
  402890:	695a      	ldr	r2, [r3, #20]
  402892:	68fb      	ldr	r3, [r7, #12]
  402894:	639a      	str	r2, [r3, #56]	; 0x38
  402896:	e003      	b.n	4028a0 <dhcp_handle_ack+0x60>
  } else {
    /* calculate safe periods for rebinding */
    dhcp->offered_t2_rebind = dhcp->offered_t0_lease;
  402898:	68fb      	ldr	r3, [r7, #12]
  40289a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40289c:	68fb      	ldr	r3, [r7, #12]
  40289e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* (y)our internet address */
  ip_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
  4028a0:	68fb      	ldr	r3, [r7, #12]
  4028a2:	689b      	ldr	r3, [r3, #8]
  4028a4:	691a      	ldr	r2, [r3, #16]
  4028a6:	68fb      	ldr	r3, [r7, #12]
  4028a8:	625a      	str	r2, [r3, #36]	; 0x24
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip_addr_copy(dhcp->offered_si_addr, dhcp->msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
  4028aa:	4b11      	ldr	r3, [pc, #68]	; (4028f0 <dhcp_handle_ack+0xb0>)
  4028ac:	799b      	ldrb	r3, [r3, #6]
  4028ae:	2b00      	cmp	r3, #0
  4028b0:	d00b      	beq.n	4028ca <dhcp_handle_ack+0x8a>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
  4028b2:	4b10      	ldr	r3, [pc, #64]	; (4028f4 <dhcp_handle_ack+0xb4>)
  4028b4:	699b      	ldr	r3, [r3, #24]
  4028b6:	4618      	mov	r0, r3
  4028b8:	4b0f      	ldr	r3, [pc, #60]	; (4028f8 <dhcp_handle_ack+0xb8>)
  4028ba:	4798      	blx	r3
  4028bc:	4602      	mov	r2, r0
  4028be:	68fb      	ldr	r3, [r7, #12]
  4028c0:	629a      	str	r2, [r3, #40]	; 0x28
    dhcp->subnet_mask_given = 1;
  4028c2:	68fb      	ldr	r3, [r7, #12]
  4028c4:	2201      	movs	r2, #1
  4028c6:	739a      	strb	r2, [r3, #14]
  4028c8:	e002      	b.n	4028d0 <dhcp_handle_ack+0x90>
  } else {
    dhcp->subnet_mask_given = 0;
  4028ca:	68fb      	ldr	r3, [r7, #12]
  4028cc:	2200      	movs	r2, #0
  4028ce:	739a      	strb	r2, [r3, #14]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
  4028d0:	4b07      	ldr	r3, [pc, #28]	; (4028f0 <dhcp_handle_ack+0xb0>)
  4028d2:	79db      	ldrb	r3, [r3, #7]
  4028d4:	2b00      	cmp	r3, #0
  4028d6:	d007      	beq.n	4028e8 <dhcp_handle_ack+0xa8>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
  4028d8:	4b06      	ldr	r3, [pc, #24]	; (4028f4 <dhcp_handle_ack+0xb4>)
  4028da:	69db      	ldr	r3, [r3, #28]
  4028dc:	4618      	mov	r0, r3
  4028de:	4b06      	ldr	r3, [pc, #24]	; (4028f8 <dhcp_handle_ack+0xb8>)
  4028e0:	4798      	blx	r3
  4028e2:	4602      	mov	r2, r0
  4028e4:	68fb      	ldr	r3, [r7, #12]
  4028e6:	62da      	str	r2, [r3, #44]	; 0x2c
    ip4_addr_set_u32(&dns_addr, htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
    n++;
  }
#endif /* LWIP_DNS */
}
  4028e8:	bf00      	nop
  4028ea:	3710      	adds	r7, #16
  4028ec:	46bd      	mov	sp, r7
  4028ee:	bd80      	pop	{r7, pc}
  4028f0:	20403918 	.word	0x20403918
  4028f4:	20403924 	.word	0x20403924
  4028f8:	00402355 	.word	0x00402355

004028fc <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
  4028fc:	b580      	push	{r7, lr}
  4028fe:	b084      	sub	sp, #16
  402900:	af00      	add	r7, sp, #0
  402902:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result = ERR_OK;
  402904:	2300      	movs	r3, #0
  402906:	72fb      	strb	r3, [r7, #11]

  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
  402908:	687b      	ldr	r3, [r7, #4]
  40290a:	2b00      	cmp	r3, #0
  40290c:	d100      	bne.n	402910 <dhcp_start+0x14>
  40290e:	e7fe      	b.n	40290e <dhcp_start+0x12>
  dhcp = netif->dhcp;
  402910:	687b      	ldr	r3, [r7, #4]
  402912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  402914:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Remove the flag that says this netif is handled by DHCP,
     it is set when we succeeded starting. */
  netif->flags &= ~NETIF_FLAG_DHCP;
  402916:	687b      	ldr	r3, [r7, #4]
  402918:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
  40291c:	f023 0308 	bic.w	r3, r3, #8
  402920:	b2da      	uxtb	r2, r3
  402922:	687b      	ldr	r3, [r7, #4]
  402924:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  /* check hwtype of the netif */
  if ((netif->flags & NETIF_FLAG_ETHARP) == 0) {
  402928:	687b      	ldr	r3, [r7, #4]
  40292a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
  40292e:	f003 0320 	and.w	r3, r3, #32
  402932:	2b00      	cmp	r3, #0
  402934:	d102      	bne.n	40293c <dhcp_start+0x40>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): No ETHARP netif\n"));
    return ERR_ARG;
  402936:	f06f 030d 	mvn.w	r3, #13
  40293a:	e06a      	b.n	402a12 <dhcp_start+0x116>
  }

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
  40293c:	687b      	ldr	r3, [r7, #4]
  40293e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
  402940:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
  402944:	d202      	bcs.n	40294c <dhcp_start+0x50>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
  402946:	f04f 33ff 	mov.w	r3, #4294967295
  40294a:	e062      	b.n	402a12 <dhcp_start+0x116>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
  40294c:	68fb      	ldr	r3, [r7, #12]
  40294e:	2b00      	cmp	r3, #0
  402950:	d10d      	bne.n	40296e <dhcp_start+0x72>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
  402952:	203c      	movs	r0, #60	; 0x3c
  402954:	4b31      	ldr	r3, [pc, #196]	; (402a1c <dhcp_start+0x120>)
  402956:	4798      	blx	r3
  402958:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
  40295a:	68fb      	ldr	r3, [r7, #12]
  40295c:	2b00      	cmp	r3, #0
  40295e:	d102      	bne.n	402966 <dhcp_start+0x6a>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
  402960:	f04f 33ff 	mov.w	r3, #4294967295
  402964:	e055      	b.n	402a12 <dhcp_start+0x116>
    }
    /* store this dhcp client in the netif */
    netif->dhcp = dhcp;
  402966:	687b      	ldr	r3, [r7, #4]
  402968:	68fa      	ldr	r2, [r7, #12]
  40296a:	625a      	str	r2, [r3, #36]	; 0x24
  40296c:	e008      	b.n	402980 <dhcp_start+0x84>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
  /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));
    if (dhcp->pcb != NULL) {
  40296e:	68fb      	ldr	r3, [r7, #12]
  402970:	685b      	ldr	r3, [r3, #4]
  402972:	2b00      	cmp	r3, #0
  402974:	d004      	beq.n	402980 <dhcp_start+0x84>
      udp_remove(dhcp->pcb);
  402976:	68fb      	ldr	r3, [r7, #12]
  402978:	685b      	ldr	r3, [r3, #4]
  40297a:	4618      	mov	r0, r3
  40297c:	4b28      	ldr	r3, [pc, #160]	; (402a20 <dhcp_start+0x124>)
  40297e:	4798      	blx	r3
    LWIP_ASSERT("pbuf p_out wasn't freed", dhcp->p_out == NULL);
    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL );
  }
    
  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
  402980:	223c      	movs	r2, #60	; 0x3c
  402982:	2100      	movs	r1, #0
  402984:	68f8      	ldr	r0, [r7, #12]
  402986:	4b27      	ldr	r3, [pc, #156]	; (402a24 <dhcp_start+0x128>)
  402988:	4798      	blx	r3
  /* dhcp_set_state(&dhcp, DHCP_OFF); */
  /* allocate UDP PCB */
  dhcp->pcb = udp_new();
  40298a:	4b27      	ldr	r3, [pc, #156]	; (402a28 <dhcp_start+0x12c>)
  40298c:	4798      	blx	r3
  40298e:	4602      	mov	r2, r0
  402990:	68fb      	ldr	r3, [r7, #12]
  402992:	605a      	str	r2, [r3, #4]
  if (dhcp->pcb == NULL) {
  402994:	68fb      	ldr	r3, [r7, #12]
  402996:	685b      	ldr	r3, [r3, #4]
  402998:	2b00      	cmp	r3, #0
  40299a:	d102      	bne.n	4029a2 <dhcp_start+0xa6>
    LWIP_DEBUGF(DHCP_DEBUG  | LWIP_DBG_TRACE, ("dhcp_start(): could not obtain pcb\n"));
    return ERR_MEM;
  40299c:	f04f 33ff 	mov.w	r3, #4294967295
  4029a0:	e037      	b.n	402a12 <dhcp_start+0x116>
  }
  ip_set_option(dhcp->pcb, SOF_BROADCAST);
  4029a2:	68fb      	ldr	r3, [r7, #12]
  4029a4:	685b      	ldr	r3, [r3, #4]
  4029a6:	68fa      	ldr	r2, [r7, #12]
  4029a8:	6852      	ldr	r2, [r2, #4]
  4029aa:	7a12      	ldrb	r2, [r2, #8]
  4029ac:	f042 0220 	orr.w	r2, r2, #32
  4029b0:	b2d2      	uxtb	r2, r2
  4029b2:	721a      	strb	r2, [r3, #8]
  /* set up local and remote port for the pcb */
  udp_bind(dhcp->pcb, IP_ADDR_ANY, DHCP_CLIENT_PORT);
  4029b4:	68fb      	ldr	r3, [r7, #12]
  4029b6:	685b      	ldr	r3, [r3, #4]
  4029b8:	2244      	movs	r2, #68	; 0x44
  4029ba:	491c      	ldr	r1, [pc, #112]	; (402a2c <dhcp_start+0x130>)
  4029bc:	4618      	mov	r0, r3
  4029be:	4b1c      	ldr	r3, [pc, #112]	; (402a30 <dhcp_start+0x134>)
  4029c0:	4798      	blx	r3
  udp_connect(dhcp->pcb, IP_ADDR_ANY, DHCP_SERVER_PORT);
  4029c2:	68fb      	ldr	r3, [r7, #12]
  4029c4:	685b      	ldr	r3, [r3, #4]
  4029c6:	2243      	movs	r2, #67	; 0x43
  4029c8:	4918      	ldr	r1, [pc, #96]	; (402a2c <dhcp_start+0x130>)
  4029ca:	4618      	mov	r0, r3
  4029cc:	4b19      	ldr	r3, [pc, #100]	; (402a34 <dhcp_start+0x138>)
  4029ce:	4798      	blx	r3
  /* set up the recv callback and argument */
  udp_recv(dhcp->pcb, dhcp_recv, netif);
  4029d0:	68fb      	ldr	r3, [r7, #12]
  4029d2:	685b      	ldr	r3, [r3, #4]
  4029d4:	687a      	ldr	r2, [r7, #4]
  4029d6:	4918      	ldr	r1, [pc, #96]	; (402a38 <dhcp_start+0x13c>)
  4029d8:	4618      	mov	r0, r3
  4029da:	4b18      	ldr	r3, [pc, #96]	; (402a3c <dhcp_start+0x140>)
  4029dc:	4798      	blx	r3
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));
  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
  4029de:	6878      	ldr	r0, [r7, #4]
  4029e0:	4b17      	ldr	r3, [pc, #92]	; (402a40 <dhcp_start+0x144>)
  4029e2:	4798      	blx	r3
  4029e4:	4603      	mov	r3, r0
  4029e6:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
  4029e8:	f997 300b 	ldrsb.w	r3, [r7, #11]
  4029ec:	2b00      	cmp	r3, #0
  4029ee:	d005      	beq.n	4029fc <dhcp_start+0x100>
    /* free resources allocated above */
    dhcp_stop(netif);
  4029f0:	6878      	ldr	r0, [r7, #4]
  4029f2:	4b14      	ldr	r3, [pc, #80]	; (402a44 <dhcp_start+0x148>)
  4029f4:	4798      	blx	r3
    return ERR_MEM;
  4029f6:	f04f 33ff 	mov.w	r3, #4294967295
  4029fa:	e00a      	b.n	402a12 <dhcp_start+0x116>
  }
  /* Set the flag that says this netif is handled by DHCP. */
  netif->flags |= NETIF_FLAG_DHCP;
  4029fc:	687b      	ldr	r3, [r7, #4]
  4029fe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
  402a02:	f043 0308 	orr.w	r3, r3, #8
  402a06:	b2da      	uxtb	r2, r3
  402a08:	687b      	ldr	r3, [r7, #4]
  402a0a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  return result;
  402a0e:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
  402a12:	4618      	mov	r0, r3
  402a14:	3710      	adds	r7, #16
  402a16:	46bd      	mov	sp, r7
  402a18:	bd80      	pop	{r7, pc}
  402a1a:	bf00      	nop
  402a1c:	0040575d 	.word	0x0040575d
  402a20:	0040b069 	.word	0x0040b069
  402a24:	0040d98d 	.word	0x0040d98d
  402a28:	0040b0cd 	.word	0x0040b0cd
  402a2c:	00414a28 	.word	0x00414a28
  402a30:	0040aee5 	.word	0x0040aee5
  402a34:	0040afa9 	.word	0x0040afa9
  402a38:	00403849 	.word	0x00403849
  402a3c:	0040b045 	.word	0x0040b045
  402a40:	00402b71 	.word	0x00402b71
  402a44:	00403229 	.word	0x00403229

00402a48 <dhcp_arp_reply>:
 *
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void dhcp_arp_reply(struct netif *netif, ip_addr_t *addr)
{
  402a48:	b580      	push	{r7, lr}
  402a4a:	b082      	sub	sp, #8
  402a4c:	af00      	add	r7, sp, #0
  402a4e:	6078      	str	r0, [r7, #4]
  402a50:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
  402a52:	687b      	ldr	r3, [r7, #4]
  402a54:	2b00      	cmp	r3, #0
  402a56:	d100      	bne.n	402a5a <dhcp_arp_reply+0x12>
  402a58:	e7fe      	b.n	402a58 <dhcp_arp_reply+0x10>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((netif->dhcp != NULL) && (netif->dhcp->state == DHCP_CHECKING)) {
  402a5a:	687b      	ldr	r3, [r7, #4]
  402a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  402a5e:	2b00      	cmp	r3, #0
  402a60:	d00e      	beq.n	402a80 <dhcp_arp_reply+0x38>
  402a62:	687b      	ldr	r3, [r7, #4]
  402a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  402a66:	7b1b      	ldrb	r3, [r3, #12]
  402a68:	2b08      	cmp	r3, #8
  402a6a:	d109      	bne.n	402a80 <dhcp_arp_reply+0x38>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
      ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip_addr_cmp(addr, &netif->dhcp->offered_ip_addr)) {
  402a6c:	683b      	ldr	r3, [r7, #0]
  402a6e:	681a      	ldr	r2, [r3, #0]
  402a70:	687b      	ldr	r3, [r7, #4]
  402a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  402a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  402a76:	429a      	cmp	r2, r3
  402a78:	d102      	bne.n	402a80 <dhcp_arp_reply+0x38>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
        ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
  402a7a:	6878      	ldr	r0, [r7, #4]
  402a7c:	4b02      	ldr	r3, [pc, #8]	; (402a88 <dhcp_arp_reply+0x40>)
  402a7e:	4798      	blx	r3
    }
  }
}
  402a80:	bf00      	nop
  402a82:	3708      	adds	r7, #8
  402a84:	46bd      	mov	sp, r7
  402a86:	bd80      	pop	{r7, pc}
  402a88:	00402a8d 	.word	0x00402a8d

00402a8c <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
  402a8c:	b590      	push	{r4, r7, lr}
  402a8e:	b087      	sub	sp, #28
  402a90:	af02      	add	r7, sp, #8
  402a92:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif->dhcp;
  402a94:	687b      	ldr	r3, [r7, #4]
  402a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  402a98:	60fb      	str	r3, [r7, #12]
  err_t result = ERR_OK;
  402a9a:	2300      	movs	r3, #0
  402a9c:	72fb      	strb	r3, [r7, #11]
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_BACKING_OFF);
  402a9e:	210c      	movs	r1, #12
  402aa0:	68f8      	ldr	r0, [r7, #12]
  402aa2:	4b28      	ldr	r3, [pc, #160]	; (402b44 <dhcp_decline+0xb8>)
  402aa4:	4798      	blx	r3
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DECLINE);
  402aa6:	2204      	movs	r2, #4
  402aa8:	68f9      	ldr	r1, [r7, #12]
  402aaa:	6878      	ldr	r0, [r7, #4]
  402aac:	4b26      	ldr	r3, [pc, #152]	; (402b48 <dhcp_decline+0xbc>)
  402aae:	4798      	blx	r3
  402ab0:	4603      	mov	r3, r0
  402ab2:	72fb      	strb	r3, [r7, #11]
  if (result == ERR_OK) {
  402ab4:	f997 300b 	ldrsb.w	r3, [r7, #11]
  402ab8:	2b00      	cmp	r3, #0
  402aba:	d128      	bne.n	402b0e <dhcp_decline+0x82>
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
  402abc:	2204      	movs	r2, #4
  402abe:	2132      	movs	r1, #50	; 0x32
  402ac0:	68f8      	ldr	r0, [r7, #12]
  402ac2:	4b22      	ldr	r3, [pc, #136]	; (402b4c <dhcp_decline+0xc0>)
  402ac4:	4798      	blx	r3
    dhcp_option_long(dhcp, ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
  402ac6:	68fb      	ldr	r3, [r7, #12]
  402ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  402aca:	4618      	mov	r0, r3
  402acc:	4b20      	ldr	r3, [pc, #128]	; (402b50 <dhcp_decline+0xc4>)
  402ace:	4798      	blx	r3
  402ad0:	4603      	mov	r3, r0
  402ad2:	4619      	mov	r1, r3
  402ad4:	68f8      	ldr	r0, [r7, #12]
  402ad6:	4b1f      	ldr	r3, [pc, #124]	; (402b54 <dhcp_decline+0xc8>)
  402ad8:	4798      	blx	r3

    dhcp_option_trailer(dhcp);
  402ada:	68f8      	ldr	r0, [r7, #12]
  402adc:	4b1e      	ldr	r3, [pc, #120]	; (402b58 <dhcp_decline+0xcc>)
  402ade:	4798      	blx	r3
    /* resize pbuf to reflect true size of options */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  402ae0:	68fb      	ldr	r3, [r7, #12]
  402ae2:	691a      	ldr	r2, [r3, #16]
  402ae4:	68fb      	ldr	r3, [r7, #12]
  402ae6:	8b1b      	ldrh	r3, [r3, #24]
  402ae8:	33f0      	adds	r3, #240	; 0xf0
  402aea:	b29b      	uxth	r3, r3
  402aec:	4619      	mov	r1, r3
  402aee:	4610      	mov	r0, r2
  402af0:	4b1a      	ldr	r3, [pc, #104]	; (402b5c <dhcp_decline+0xd0>)
  402af2:	4798      	blx	r3

    /* per section 4.4.4, broadcast DECLINE messages */
    udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
  402af4:	68fb      	ldr	r3, [r7, #12]
  402af6:	6858      	ldr	r0, [r3, #4]
  402af8:	68fb      	ldr	r3, [r7, #12]
  402afa:	6919      	ldr	r1, [r3, #16]
  402afc:	687b      	ldr	r3, [r7, #4]
  402afe:	9300      	str	r3, [sp, #0]
  402b00:	2343      	movs	r3, #67	; 0x43
  402b02:	4a17      	ldr	r2, [pc, #92]	; (402b60 <dhcp_decline+0xd4>)
  402b04:	4c17      	ldr	r4, [pc, #92]	; (402b64 <dhcp_decline+0xd8>)
  402b06:	47a0      	blx	r4
    dhcp_delete_msg(dhcp);
  402b08:	68f8      	ldr	r0, [r7, #12]
  402b0a:	4b17      	ldr	r3, [pc, #92]	; (402b68 <dhcp_decline+0xdc>)
  402b0c:	4798      	blx	r3
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_decline: could not allocate DHCP request\n"));
  }
  dhcp->tries++;
  402b0e:	68fb      	ldr	r3, [r7, #12]
  402b10:	7b5b      	ldrb	r3, [r3, #13]
  402b12:	3301      	adds	r3, #1
  402b14:	b2da      	uxtb	r2, r3
  402b16:	68fb      	ldr	r3, [r7, #12]
  402b18:	735a      	strb	r2, [r3, #13]
  msecs = 10*1000;
  402b1a:	f242 7310 	movw	r3, #10000	; 0x2710
  402b1e:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  402b20:	893b      	ldrh	r3, [r7, #8]
  402b22:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
  402b26:	4a11      	ldr	r2, [pc, #68]	; (402b6c <dhcp_decline+0xe0>)
  402b28:	fb82 1203 	smull	r1, r2, r2, r3
  402b2c:	1152      	asrs	r2, r2, #5
  402b2e:	17db      	asrs	r3, r3, #31
  402b30:	1ad3      	subs	r3, r2, r3
  402b32:	b29a      	uxth	r2, r3
  402b34:	68fb      	ldr	r3, [r7, #12]
  402b36:	835a      	strh	r2, [r3, #26]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
  402b38:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
  402b3c:	4618      	mov	r0, r3
  402b3e:	3714      	adds	r7, #20
  402b40:	46bd      	mov	sp, r7
  402b42:	bd90      	pop	{r4, r7, pc}
  402b44:	00403289 	.word	0x00403289
  402b48:	004039b9 	.word	0x004039b9
  402b4c:	004032bd 	.word	0x004032bd
  402b50:	00402389 	.word	0x00402389
  402b54:	00403391 	.word	0x00403391
  402b58:	00403c25 	.word	0x00403c25
  402b5c:	00405ed1 	.word	0x00405ed1
  402b60:	00414a2c 	.word	0x00414a2c
  402b64:	0040ad5d 	.word	0x0040ad5d
  402b68:	00403be9 	.word	0x00403be9
  402b6c:	10624dd3 	.word	0x10624dd3

00402b70 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
  402b70:	b590      	push	{r4, r7, lr}
  402b72:	b087      	sub	sp, #28
  402b74:	af02      	add	r7, sp, #8
  402b76:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif->dhcp;
  402b78:	687b      	ldr	r3, [r7, #4]
  402b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  402b7c:	60fb      	str	r3, [r7, #12]
  err_t result = ERR_OK;
  402b7e:	2300      	movs	r3, #0
  402b80:	72fb      	strb	r3, [r7, #11]
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));
  ip_addr_set_any(&dhcp->offered_ip_addr);
  402b82:	68fb      	ldr	r3, [r7, #12]
  402b84:	2200      	movs	r2, #0
  402b86:	625a      	str	r2, [r3, #36]	; 0x24
  dhcp_set_state(dhcp, DHCP_SELECTING);
  402b88:	2106      	movs	r1, #6
  402b8a:	68f8      	ldr	r0, [r7, #12]
  402b8c:	4b36      	ldr	r3, [pc, #216]	; (402c68 <dhcp_discover+0xf8>)
  402b8e:	4798      	blx	r3
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER);
  402b90:	2201      	movs	r2, #1
  402b92:	68f9      	ldr	r1, [r7, #12]
  402b94:	6878      	ldr	r0, [r7, #4]
  402b96:	4b35      	ldr	r3, [pc, #212]	; (402c6c <dhcp_discover+0xfc>)
  402b98:	4798      	blx	r3
  402b9a:	4603      	mov	r3, r0
  402b9c:	72fb      	strb	r3, [r7, #11]
  if (result == ERR_OK) {
  402b9e:	f997 300b 	ldrsb.w	r3, [r7, #11]
  402ba2:	2b00      	cmp	r3, #0
  402ba4:	d139      	bne.n	402c1a <dhcp_discover+0xaa>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
  402ba6:	2202      	movs	r2, #2
  402ba8:	2139      	movs	r1, #57	; 0x39
  402baa:	68f8      	ldr	r0, [r7, #12]
  402bac:	4b30      	ldr	r3, [pc, #192]	; (402c70 <dhcp_discover+0x100>)
  402bae:	4798      	blx	r3
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
  402bb0:	687b      	ldr	r3, [r7, #4]
  402bb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
  402bb4:	4619      	mov	r1, r3
  402bb6:	68f8      	ldr	r0, [r7, #12]
  402bb8:	4b2e      	ldr	r3, [pc, #184]	; (402c74 <dhcp_discover+0x104>)
  402bba:	4798      	blx	r3

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, 4/*num options*/);
  402bbc:	2204      	movs	r2, #4
  402bbe:	2137      	movs	r1, #55	; 0x37
  402bc0:	68f8      	ldr	r0, [r7, #12]
  402bc2:	4b2b      	ldr	r3, [pc, #172]	; (402c70 <dhcp_discover+0x100>)
  402bc4:	4798      	blx	r3
    dhcp_option_byte(dhcp, DHCP_OPTION_SUBNET_MASK);
  402bc6:	2101      	movs	r1, #1
  402bc8:	68f8      	ldr	r0, [r7, #12]
  402bca:	4b2b      	ldr	r3, [pc, #172]	; (402c78 <dhcp_discover+0x108>)
  402bcc:	4798      	blx	r3
    dhcp_option_byte(dhcp, DHCP_OPTION_ROUTER);
  402bce:	2103      	movs	r1, #3
  402bd0:	68f8      	ldr	r0, [r7, #12]
  402bd2:	4b29      	ldr	r3, [pc, #164]	; (402c78 <dhcp_discover+0x108>)
  402bd4:	4798      	blx	r3
    dhcp_option_byte(dhcp, DHCP_OPTION_BROADCAST);
  402bd6:	211c      	movs	r1, #28
  402bd8:	68f8      	ldr	r0, [r7, #12]
  402bda:	4b27      	ldr	r3, [pc, #156]	; (402c78 <dhcp_discover+0x108>)
  402bdc:	4798      	blx	r3
    dhcp_option_byte(dhcp, DHCP_OPTION_DNS_SERVER);
  402bde:	2106      	movs	r1, #6
  402be0:	68f8      	ldr	r0, [r7, #12]
  402be2:	4b25      	ldr	r3, [pc, #148]	; (402c78 <dhcp_discover+0x108>)
  402be4:	4798      	blx	r3

    dhcp_option_trailer(dhcp);
  402be6:	68f8      	ldr	r0, [r7, #12]
  402be8:	4b24      	ldr	r3, [pc, #144]	; (402c7c <dhcp_discover+0x10c>)
  402bea:	4798      	blx	r3

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: realloc()ing\n"));
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  402bec:	68fb      	ldr	r3, [r7, #12]
  402bee:	691a      	ldr	r2, [r3, #16]
  402bf0:	68fb      	ldr	r3, [r7, #12]
  402bf2:	8b1b      	ldrh	r3, [r3, #24]
  402bf4:	33f0      	adds	r3, #240	; 0xf0
  402bf6:	b29b      	uxth	r3, r3
  402bf8:	4619      	mov	r1, r3
  402bfa:	4610      	mov	r0, r2
  402bfc:	4b20      	ldr	r3, [pc, #128]	; (402c80 <dhcp_discover+0x110>)
  402bfe:	4798      	blx	r3

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, DHCP_SERVER_PORT)\n"));
    udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
  402c00:	68fb      	ldr	r3, [r7, #12]
  402c02:	6858      	ldr	r0, [r3, #4]
  402c04:	68fb      	ldr	r3, [r7, #12]
  402c06:	6919      	ldr	r1, [r3, #16]
  402c08:	687b      	ldr	r3, [r7, #4]
  402c0a:	9300      	str	r3, [sp, #0]
  402c0c:	2343      	movs	r3, #67	; 0x43
  402c0e:	4a1d      	ldr	r2, [pc, #116]	; (402c84 <dhcp_discover+0x114>)
  402c10:	4c1d      	ldr	r4, [pc, #116]	; (402c88 <dhcp_discover+0x118>)
  402c12:	47a0      	blx	r4
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    dhcp_delete_msg(dhcp);
  402c14:	68f8      	ldr	r0, [r7, #12]
  402c16:	4b1d      	ldr	r3, [pc, #116]	; (402c8c <dhcp_discover+0x11c>)
  402c18:	4798      	blx	r3
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  dhcp->tries++;
  402c1a:	68fb      	ldr	r3, [r7, #12]
  402c1c:	7b5b      	ldrb	r3, [r3, #13]
  402c1e:	3301      	adds	r3, #1
  402c20:	b2da      	uxtb	r2, r3
  402c22:	68fb      	ldr	r3, [r7, #12]
  402c24:	735a      	strb	r2, [r3, #13]
  if(dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
  402c26:	68fb      	ldr	r3, [r7, #12]
  402c28:	7b5b      	ldrb	r3, [r3, #13]
  402c2a:	2b05      	cmp	r3, #5
  402c2c:	d807      	bhi.n	402c3e <dhcp_discover+0xce>
  402c2e:	68fb      	ldr	r3, [r7, #12]
  402c30:	7b5b      	ldrb	r3, [r3, #13]
  402c32:	461a      	mov	r2, r3
  402c34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  402c38:	4093      	lsls	r3, r2
  402c3a:	b29b      	uxth	r3, r3
  402c3c:	e001      	b.n	402c42 <dhcp_discover+0xd2>
  402c3e:	f64e 2360 	movw	r3, #60000	; 0xea60
  402c42:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  402c44:	893b      	ldrh	r3, [r7, #8]
  402c46:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
  402c4a:	4a11      	ldr	r2, [pc, #68]	; (402c90 <dhcp_discover+0x120>)
  402c4c:	fb82 1203 	smull	r1, r2, r2, r3
  402c50:	1152      	asrs	r2, r2, #5
  402c52:	17db      	asrs	r3, r3, #31
  402c54:	1ad3      	subs	r3, r2, r3
  402c56:	b29a      	uxth	r2, r3
  402c58:	68fb      	ldr	r3, [r7, #12]
  402c5a:	835a      	strh	r2, [r3, #26]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
  402c5c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
  402c60:	4618      	mov	r0, r3
  402c62:	3714      	adds	r7, #20
  402c64:	46bd      	mov	sp, r7
  402c66:	bd90      	pop	{r4, r7, pc}
  402c68:	00403289 	.word	0x00403289
  402c6c:	004039b9 	.word	0x004039b9
  402c70:	004032bd 	.word	0x004032bd
  402c74:	00403339 	.word	0x00403339
  402c78:	00403309 	.word	0x00403309
  402c7c:	00403c25 	.word	0x00403c25
  402c80:	00405ed1 	.word	0x00405ed1
  402c84:	00414a2c 	.word	0x00414a2c
  402c88:	0040ad5d 	.word	0x0040ad5d
  402c8c:	00403be9 	.word	0x00403be9
  402c90:	10624dd3 	.word	0x10624dd3

00402c94 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
  402c94:	b580      	push	{r7, lr}
  402c96:	b088      	sub	sp, #32
  402c98:	af00      	add	r7, sp, #0
  402c9a:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
  402c9c:	687b      	ldr	r3, [r7, #4]
  402c9e:	2b00      	cmp	r3, #0
  402ca0:	d100      	bne.n	402ca4 <dhcp_bind+0x10>
  402ca2:	e7fe      	b.n	402ca2 <dhcp_bind+0xe>
  dhcp = netif->dhcp;
  402ca4:	687b      	ldr	r3, [r7, #4]
  402ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  402ca8:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
  402caa:	69bb      	ldr	r3, [r7, #24]
  402cac:	2b00      	cmp	r3, #0
  402cae:	d100      	bne.n	402cb2 <dhcp_bind+0x1e>
  402cb0:	e7fe      	b.n	402cb0 <dhcp_bind+0x1c>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
  402cb2:	69bb      	ldr	r3, [r7, #24]
  402cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  402cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
  402cba:	d019      	beq.n	402cf0 <dhcp_bind+0x5c>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
  402cbc:	69bb      	ldr	r3, [r7, #24]
  402cbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  402cc0:	331e      	adds	r3, #30
  402cc2:	4a46      	ldr	r2, [pc, #280]	; (402ddc <dhcp_bind+0x148>)
  402cc4:	fba2 2303 	umull	r2, r3, r2, r3
  402cc8:	095b      	lsrs	r3, r3, #5
  402cca:	61fb      	str	r3, [r7, #28]
    if(timeout > 0xffff) {
  402ccc:	69fb      	ldr	r3, [r7, #28]
  402cce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  402cd2:	d302      	bcc.n	402cda <dhcp_bind+0x46>
      timeout = 0xffff;
  402cd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
  402cd8:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
  402cda:	69fb      	ldr	r3, [r7, #28]
  402cdc:	b29a      	uxth	r2, r3
  402cde:	69bb      	ldr	r3, [r7, #24]
  402ce0:	839a      	strh	r2, [r3, #28]
    if (dhcp->t1_timeout == 0) {
  402ce2:	69bb      	ldr	r3, [r7, #24]
  402ce4:	8b9b      	ldrh	r3, [r3, #28]
  402ce6:	2b00      	cmp	r3, #0
  402ce8:	d102      	bne.n	402cf0 <dhcp_bind+0x5c>
      dhcp->t1_timeout = 1;
  402cea:	69bb      	ldr	r3, [r7, #24]
  402cec:	2201      	movs	r2, #1
  402cee:	839a      	strh	r2, [r3, #28]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew*1000));
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
  402cf0:	69bb      	ldr	r3, [r7, #24]
  402cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  402cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
  402cf8:	d019      	beq.n	402d2e <dhcp_bind+0x9a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
  402cfa:	69bb      	ldr	r3, [r7, #24]
  402cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  402cfe:	331e      	adds	r3, #30
  402d00:	4a36      	ldr	r2, [pc, #216]	; (402ddc <dhcp_bind+0x148>)
  402d02:	fba2 2303 	umull	r2, r3, r2, r3
  402d06:	095b      	lsrs	r3, r3, #5
  402d08:	61fb      	str	r3, [r7, #28]
    if(timeout > 0xffff) {
  402d0a:	69fb      	ldr	r3, [r7, #28]
  402d0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  402d10:	d302      	bcc.n	402d18 <dhcp_bind+0x84>
      timeout = 0xffff;
  402d12:	f64f 73ff 	movw	r3, #65535	; 0xffff
  402d16:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
  402d18:	69fb      	ldr	r3, [r7, #28]
  402d1a:	b29a      	uxth	r2, r3
  402d1c:	69bb      	ldr	r3, [r7, #24]
  402d1e:	83da      	strh	r2, [r3, #30]
    if (dhcp->t2_timeout == 0) {
  402d20:	69bb      	ldr	r3, [r7, #24]
  402d22:	8bdb      	ldrh	r3, [r3, #30]
  402d24:	2b00      	cmp	r3, #0
  402d26:	d102      	bne.n	402d2e <dhcp_bind+0x9a>
      dhcp->t2_timeout = 1;
  402d28:	69bb      	ldr	r3, [r7, #24]
  402d2a:	2201      	movs	r2, #1
  402d2c:	83da      	strh	r2, [r3, #30]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind*1000));
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
  402d2e:	69bb      	ldr	r3, [r7, #24]
  402d30:	8b9a      	ldrh	r2, [r3, #28]
  402d32:	69bb      	ldr	r3, [r7, #24]
  402d34:	8bdb      	ldrh	r3, [r3, #30]
  402d36:	429a      	cmp	r2, r3
  402d38:	d306      	bcc.n	402d48 <dhcp_bind+0xb4>
  402d3a:	69bb      	ldr	r3, [r7, #24]
  402d3c:	8bdb      	ldrh	r3, [r3, #30]
  402d3e:	2b00      	cmp	r3, #0
  402d40:	d002      	beq.n	402d48 <dhcp_bind+0xb4>
    dhcp->t1_timeout = 0;
  402d42:	69bb      	ldr	r3, [r7, #24]
  402d44:	2200      	movs	r2, #0
  402d46:	839a      	strh	r2, [r3, #28]
  }

  if (dhcp->subnet_mask_given) {
  402d48:	69bb      	ldr	r3, [r7, #24]
  402d4a:	7b9b      	ldrb	r3, [r3, #14]
  402d4c:	2b00      	cmp	r3, #0
  402d4e:	d003      	beq.n	402d58 <dhcp_bind+0xc4>
    /* copy offered network mask */
    ip_addr_copy(sn_mask, dhcp->offered_sn_mask);
  402d50:	69bb      	ldr	r3, [r7, #24]
  402d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  402d54:	613b      	str	r3, [r7, #16]
  402d56:	e014      	b.n	402d82 <dhcp_bind+0xee>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
  402d58:	69bb      	ldr	r3, [r7, #24]
  402d5a:	3324      	adds	r3, #36	; 0x24
  402d5c:	781b      	ldrb	r3, [r3, #0]
  402d5e:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
  402d60:	f997 3017 	ldrsb.w	r3, [r7, #23]
  402d64:	2b00      	cmp	r3, #0
  402d66:	db02      	blt.n	402d6e <dhcp_bind+0xda>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
  402d68:	23ff      	movs	r3, #255	; 0xff
  402d6a:	613b      	str	r3, [r7, #16]
  402d6c:	e009      	b.n	402d82 <dhcp_bind+0xee>
    } else if (first_octet >= 192) {
  402d6e:	7dfb      	ldrb	r3, [r7, #23]
  402d70:	2bbf      	cmp	r3, #191	; 0xbf
  402d72:	d903      	bls.n	402d7c <dhcp_bind+0xe8>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
  402d74:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
  402d78:	613b      	str	r3, [r7, #16]
  402d7a:	e002      	b.n	402d82 <dhcp_bind+0xee>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
  402d7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
  402d80:	613b      	str	r3, [r7, #16]
    }
  }

  ip_addr_copy(gw_addr, dhcp->offered_gw_addr);
  402d82:	69bb      	ldr	r3, [r7, #24]
  402d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402d86:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip_addr_isany(&gw_addr)) {
  402d88:	68fb      	ldr	r3, [r7, #12]
  402d8a:	2b00      	cmp	r3, #0
  402d8c:	d108      	bne.n	402da0 <dhcp_bind+0x10c>
    /* copy network address */
    ip_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
  402d8e:	69bb      	ldr	r3, [r7, #24]
  402d90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  402d92:	693b      	ldr	r3, [r7, #16]
  402d94:	4013      	ands	r3, r2
  402d96:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
  402d98:	68fb      	ldr	r3, [r7, #12]
  402d9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  402d9e:	60fb      	str	r3, [r7, #12]
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F"\n",
    ip4_addr_get_u32(&dhcp->offered_ip_addr)));
  netif_set_ipaddr(netif, &dhcp->offered_ip_addr);
  402da0:	69bb      	ldr	r3, [r7, #24]
  402da2:	3324      	adds	r3, #36	; 0x24
  402da4:	4619      	mov	r1, r3
  402da6:	6878      	ldr	r0, [r7, #4]
  402da8:	4b0d      	ldr	r3, [pc, #52]	; (402de0 <dhcp_bind+0x14c>)
  402daa:	4798      	blx	r3
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): SN: 0x%08"X32_F"\n",
    ip4_addr_get_u32(&sn_mask)));
  netif_set_netmask(netif, &sn_mask);
  402dac:	f107 0310 	add.w	r3, r7, #16
  402db0:	4619      	mov	r1, r3
  402db2:	6878      	ldr	r0, [r7, #4]
  402db4:	4b0b      	ldr	r3, [pc, #44]	; (402de4 <dhcp_bind+0x150>)
  402db6:	4798      	blx	r3
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): GW: 0x%08"X32_F"\n",
    ip4_addr_get_u32(&gw_addr)));
  netif_set_gw(netif, &gw_addr);
  402db8:	f107 030c 	add.w	r3, r7, #12
  402dbc:	4619      	mov	r1, r3
  402dbe:	6878      	ldr	r0, [r7, #4]
  402dc0:	4b09      	ldr	r3, [pc, #36]	; (402de8 <dhcp_bind+0x154>)
  402dc2:	4798      	blx	r3
  /* bring the interface up */
  netif_set_up(netif);
  402dc4:	6878      	ldr	r0, [r7, #4]
  402dc6:	4b09      	ldr	r3, [pc, #36]	; (402dec <dhcp_bind+0x158>)
  402dc8:	4798      	blx	r3
  /* netif is now bound to DHCP leased address */
  dhcp_set_state(dhcp, DHCP_BOUND);
  402dca:	210a      	movs	r1, #10
  402dcc:	69b8      	ldr	r0, [r7, #24]
  402dce:	4b08      	ldr	r3, [pc, #32]	; (402df0 <dhcp_bind+0x15c>)
  402dd0:	4798      	blx	r3
}
  402dd2:	bf00      	nop
  402dd4:	3720      	adds	r7, #32
  402dd6:	46bd      	mov	sp, r7
  402dd8:	bd80      	pop	{r7, pc}
  402dda:	bf00      	nop
  402ddc:	88888889 	.word	0x88888889
  402de0:	00405aa1 	.word	0x00405aa1
  402de4:	00405b7d 	.word	0x00405b7d
  402de8:	00405b55 	.word	0x00405b55
  402dec:	00405bc5 	.word	0x00405bc5
  402df0:	00403289 	.word	0x00403289

00402df4 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
  402df4:	b590      	push	{r4, r7, lr}
  402df6:	b087      	sub	sp, #28
  402df8:	af02      	add	r7, sp, #8
  402dfa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif->dhcp;
  402dfc:	687b      	ldr	r3, [r7, #4]
  402dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  402e00:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_RENEWING);
  402e02:	2105      	movs	r1, #5
  402e04:	68f8      	ldr	r0, [r7, #12]
  402e06:	4b2f      	ldr	r3, [pc, #188]	; (402ec4 <dhcp_renew+0xd0>)
  402e08:	4798      	blx	r3

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
  402e0a:	2203      	movs	r2, #3
  402e0c:	68f9      	ldr	r1, [r7, #12]
  402e0e:	6878      	ldr	r0, [r7, #4]
  402e10:	4b2d      	ldr	r3, [pc, #180]	; (402ec8 <dhcp_renew+0xd4>)
  402e12:	4798      	blx	r3
  402e14:	4603      	mov	r3, r0
  402e16:	72fb      	strb	r3, [r7, #11]
  if (result == ERR_OK) {
  402e18:	f997 300b 	ldrsb.w	r3, [r7, #11]
  402e1c:	2b00      	cmp	r3, #0
  402e1e:	d126      	bne.n	402e6e <dhcp_renew+0x7a>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
  402e20:	2202      	movs	r2, #2
  402e22:	2139      	movs	r1, #57	; 0x39
  402e24:	68f8      	ldr	r0, [r7, #12]
  402e26:	4b29      	ldr	r3, [pc, #164]	; (402ecc <dhcp_renew+0xd8>)
  402e28:	4798      	blx	r3
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
  402e2a:	687b      	ldr	r3, [r7, #4]
  402e2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
  402e2e:	4619      	mov	r1, r3
  402e30:	68f8      	ldr	r0, [r7, #12]
  402e32:	4b27      	ldr	r3, [pc, #156]	; (402ed0 <dhcp_renew+0xdc>)
  402e34:	4798      	blx	r3
#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    /* append DHCP message trailer */
    dhcp_option_trailer(dhcp);
  402e36:	68f8      	ldr	r0, [r7, #12]
  402e38:	4b26      	ldr	r3, [pc, #152]	; (402ed4 <dhcp_renew+0xe0>)
  402e3a:	4798      	blx	r3

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  402e3c:	68fb      	ldr	r3, [r7, #12]
  402e3e:	691a      	ldr	r2, [r3, #16]
  402e40:	68fb      	ldr	r3, [r7, #12]
  402e42:	8b1b      	ldrh	r3, [r3, #24]
  402e44:	33f0      	adds	r3, #240	; 0xf0
  402e46:	b29b      	uxth	r3, r3
  402e48:	4619      	mov	r1, r3
  402e4a:	4610      	mov	r0, r2
  402e4c:	4b22      	ldr	r3, [pc, #136]	; (402ed8 <dhcp_renew+0xe4>)
  402e4e:	4798      	blx	r3

    udp_sendto_if(dhcp->pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
  402e50:	68fb      	ldr	r3, [r7, #12]
  402e52:	6858      	ldr	r0, [r3, #4]
  402e54:	68fb      	ldr	r3, [r7, #12]
  402e56:	6919      	ldr	r1, [r3, #16]
  402e58:	68fb      	ldr	r3, [r7, #12]
  402e5a:	f103 0220 	add.w	r2, r3, #32
  402e5e:	687b      	ldr	r3, [r7, #4]
  402e60:	9300      	str	r3, [sp, #0]
  402e62:	2343      	movs	r3, #67	; 0x43
  402e64:	4c1d      	ldr	r4, [pc, #116]	; (402edc <dhcp_renew+0xe8>)
  402e66:	47a0      	blx	r4
    dhcp_delete_msg(dhcp);
  402e68:	68f8      	ldr	r0, [r7, #12]
  402e6a:	4b1d      	ldr	r3, [pc, #116]	; (402ee0 <dhcp_renew+0xec>)
  402e6c:	4798      	blx	r3

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
  }
  dhcp->tries++;
  402e6e:	68fb      	ldr	r3, [r7, #12]
  402e70:	7b5b      	ldrb	r3, [r3, #13]
  402e72:	3301      	adds	r3, #1
  402e74:	b2da      	uxtb	r2, r3
  402e76:	68fb      	ldr	r3, [r7, #12]
  402e78:	735a      	strb	r2, [r3, #13]
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
  402e7a:	68fb      	ldr	r3, [r7, #12]
  402e7c:	7b5b      	ldrb	r3, [r3, #13]
  402e7e:	2b09      	cmp	r3, #9
  402e80:	d80a      	bhi.n	402e98 <dhcp_renew+0xa4>
  402e82:	68fb      	ldr	r3, [r7, #12]
  402e84:	7b5b      	ldrb	r3, [r3, #13]
  402e86:	b29b      	uxth	r3, r3
  402e88:	461a      	mov	r2, r3
  402e8a:	0152      	lsls	r2, r2, #5
  402e8c:	1ad2      	subs	r2, r2, r3
  402e8e:	0092      	lsls	r2, r2, #2
  402e90:	4413      	add	r3, r2
  402e92:	011b      	lsls	r3, r3, #4
  402e94:	b29b      	uxth	r3, r3
  402e96:	e001      	b.n	402e9c <dhcp_renew+0xa8>
  402e98:	f644 6320 	movw	r3, #20000	; 0x4e20
  402e9c:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  402e9e:	893b      	ldrh	r3, [r7, #8]
  402ea0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
  402ea4:	4a0f      	ldr	r2, [pc, #60]	; (402ee4 <dhcp_renew+0xf0>)
  402ea6:	fb82 1203 	smull	r1, r2, r2, r3
  402eaa:	1152      	asrs	r2, r2, #5
  402eac:	17db      	asrs	r3, r3, #31
  402eae:	1ad3      	subs	r3, r2, r3
  402eb0:	b29a      	uxth	r2, r3
  402eb2:	68fb      	ldr	r3, [r7, #12]
  402eb4:	835a      	strh	r2, [r3, #26]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
  402eb6:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
  402eba:	4618      	mov	r0, r3
  402ebc:	3714      	adds	r7, #20
  402ebe:	46bd      	mov	sp, r7
  402ec0:	bd90      	pop	{r4, r7, pc}
  402ec2:	bf00      	nop
  402ec4:	00403289 	.word	0x00403289
  402ec8:	004039b9 	.word	0x004039b9
  402ecc:	004032bd 	.word	0x004032bd
  402ed0:	00403339 	.word	0x00403339
  402ed4:	00403c25 	.word	0x00403c25
  402ed8:	00405ed1 	.word	0x00405ed1
  402edc:	0040ad5d 	.word	0x0040ad5d
  402ee0:	00403be9 	.word	0x00403be9
  402ee4:	10624dd3 	.word	0x10624dd3

00402ee8 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
  402ee8:	b590      	push	{r4, r7, lr}
  402eea:	b087      	sub	sp, #28
  402eec:	af02      	add	r7, sp, #8
  402eee:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif->dhcp;
  402ef0:	687b      	ldr	r3, [r7, #4]
  402ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  402ef4:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_REBINDING);
  402ef6:	2104      	movs	r1, #4
  402ef8:	68f8      	ldr	r0, [r7, #12]
  402efa:	4b2e      	ldr	r3, [pc, #184]	; (402fb4 <dhcp_rebind+0xcc>)
  402efc:	4798      	blx	r3

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
  402efe:	2203      	movs	r2, #3
  402f00:	68f9      	ldr	r1, [r7, #12]
  402f02:	6878      	ldr	r0, [r7, #4]
  402f04:	4b2c      	ldr	r3, [pc, #176]	; (402fb8 <dhcp_rebind+0xd0>)
  402f06:	4798      	blx	r3
  402f08:	4603      	mov	r3, r0
  402f0a:	72fb      	strb	r3, [r7, #11]
  if (result == ERR_OK) {
  402f0c:	f997 300b 	ldrsb.w	r3, [r7, #11]
  402f10:	2b00      	cmp	r3, #0
  402f12:	d124      	bne.n	402f5e <dhcp_rebind+0x76>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
  402f14:	2202      	movs	r2, #2
  402f16:	2139      	movs	r1, #57	; 0x39
  402f18:	68f8      	ldr	r0, [r7, #12]
  402f1a:	4b28      	ldr	r3, [pc, #160]	; (402fbc <dhcp_rebind+0xd4>)
  402f1c:	4798      	blx	r3
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
  402f1e:	687b      	ldr	r3, [r7, #4]
  402f20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
  402f22:	4619      	mov	r1, r3
  402f24:	68f8      	ldr	r0, [r7, #12]
  402f26:	4b26      	ldr	r3, [pc, #152]	; (402fc0 <dhcp_rebind+0xd8>)
  402f28:	4798      	blx	r3

    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
    dhcp_option_long(dhcp, ntohl(dhcp->server_ip_addr.addr));
#endif

    dhcp_option_trailer(dhcp);
  402f2a:	68f8      	ldr	r0, [r7, #12]
  402f2c:	4b25      	ldr	r3, [pc, #148]	; (402fc4 <dhcp_rebind+0xdc>)
  402f2e:	4798      	blx	r3

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  402f30:	68fb      	ldr	r3, [r7, #12]
  402f32:	691a      	ldr	r2, [r3, #16]
  402f34:	68fb      	ldr	r3, [r7, #12]
  402f36:	8b1b      	ldrh	r3, [r3, #24]
  402f38:	33f0      	adds	r3, #240	; 0xf0
  402f3a:	b29b      	uxth	r3, r3
  402f3c:	4619      	mov	r1, r3
  402f3e:	4610      	mov	r0, r2
  402f40:	4b21      	ldr	r3, [pc, #132]	; (402fc8 <dhcp_rebind+0xe0>)
  402f42:	4798      	blx	r3

    /* broadcast to server */
    udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
  402f44:	68fb      	ldr	r3, [r7, #12]
  402f46:	6858      	ldr	r0, [r3, #4]
  402f48:	68fb      	ldr	r3, [r7, #12]
  402f4a:	6919      	ldr	r1, [r3, #16]
  402f4c:	687b      	ldr	r3, [r7, #4]
  402f4e:	9300      	str	r3, [sp, #0]
  402f50:	2343      	movs	r3, #67	; 0x43
  402f52:	4a1e      	ldr	r2, [pc, #120]	; (402fcc <dhcp_rebind+0xe4>)
  402f54:	4c1e      	ldr	r4, [pc, #120]	; (402fd0 <dhcp_rebind+0xe8>)
  402f56:	47a0      	blx	r4
    dhcp_delete_msg(dhcp);
  402f58:	68f8      	ldr	r0, [r7, #12]
  402f5a:	4b1e      	ldr	r3, [pc, #120]	; (402fd4 <dhcp_rebind+0xec>)
  402f5c:	4798      	blx	r3
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
  }
  dhcp->tries++;
  402f5e:	68fb      	ldr	r3, [r7, #12]
  402f60:	7b5b      	ldrb	r3, [r3, #13]
  402f62:	3301      	adds	r3, #1
  402f64:	b2da      	uxtb	r2, r3
  402f66:	68fb      	ldr	r3, [r7, #12]
  402f68:	735a      	strb	r2, [r3, #13]
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
  402f6a:	68fb      	ldr	r3, [r7, #12]
  402f6c:	7b5b      	ldrb	r3, [r3, #13]
  402f6e:	2b09      	cmp	r3, #9
  402f70:	d80a      	bhi.n	402f88 <dhcp_rebind+0xa0>
  402f72:	68fb      	ldr	r3, [r7, #12]
  402f74:	7b5b      	ldrb	r3, [r3, #13]
  402f76:	b29b      	uxth	r3, r3
  402f78:	461a      	mov	r2, r3
  402f7a:	0152      	lsls	r2, r2, #5
  402f7c:	1ad2      	subs	r2, r2, r3
  402f7e:	0092      	lsls	r2, r2, #2
  402f80:	4413      	add	r3, r2
  402f82:	00db      	lsls	r3, r3, #3
  402f84:	b29b      	uxth	r3, r3
  402f86:	e001      	b.n	402f8c <dhcp_rebind+0xa4>
  402f88:	f242 7310 	movw	r3, #10000	; 0x2710
  402f8c:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  402f8e:	893b      	ldrh	r3, [r7, #8]
  402f90:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
  402f94:	4a10      	ldr	r2, [pc, #64]	; (402fd8 <dhcp_rebind+0xf0>)
  402f96:	fb82 1203 	smull	r1, r2, r2, r3
  402f9a:	1152      	asrs	r2, r2, #5
  402f9c:	17db      	asrs	r3, r3, #31
  402f9e:	1ad3      	subs	r3, r2, r3
  402fa0:	b29a      	uxth	r2, r3
  402fa2:	68fb      	ldr	r3, [r7, #12]
  402fa4:	835a      	strh	r2, [r3, #26]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
  402fa6:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
  402faa:	4618      	mov	r0, r3
  402fac:	3714      	adds	r7, #20
  402fae:	46bd      	mov	sp, r7
  402fb0:	bd90      	pop	{r4, r7, pc}
  402fb2:	bf00      	nop
  402fb4:	00403289 	.word	0x00403289
  402fb8:	004039b9 	.word	0x004039b9
  402fbc:	004032bd 	.word	0x004032bd
  402fc0:	00403339 	.word	0x00403339
  402fc4:	00403c25 	.word	0x00403c25
  402fc8:	00405ed1 	.word	0x00405ed1
  402fcc:	00414a2c 	.word	0x00414a2c
  402fd0:	0040ad5d 	.word	0x0040ad5d
  402fd4:	00403be9 	.word	0x00403be9
  402fd8:	10624dd3 	.word	0x10624dd3

00402fdc <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
  402fdc:	b590      	push	{r4, r7, lr}
  402fde:	b087      	sub	sp, #28
  402fe0:	af02      	add	r7, sp, #8
  402fe2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif->dhcp;
  402fe4:	687b      	ldr	r3, [r7, #4]
  402fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  402fe8:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_REBOOTING);
  402fea:	2103      	movs	r1, #3
  402fec:	68f8      	ldr	r0, [r7, #12]
  402fee:	4b35      	ldr	r3, [pc, #212]	; (4030c4 <dhcp_reboot+0xe8>)
  402ff0:	4798      	blx	r3

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
  402ff2:	2203      	movs	r2, #3
  402ff4:	68f9      	ldr	r1, [r7, #12]
  402ff6:	6878      	ldr	r0, [r7, #4]
  402ff8:	4b33      	ldr	r3, [pc, #204]	; (4030c8 <dhcp_reboot+0xec>)
  402ffa:	4798      	blx	r3
  402ffc:	4603      	mov	r3, r0
  402ffe:	72fb      	strb	r3, [r7, #11]
  if (result == ERR_OK) {
  403000:	f997 300b 	ldrsb.w	r3, [r7, #11]
  403004:	2b00      	cmp	r3, #0
  403006:	d132      	bne.n	40306e <dhcp_reboot+0x92>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
  403008:	2202      	movs	r2, #2
  40300a:	2139      	movs	r1, #57	; 0x39
  40300c:	68f8      	ldr	r0, [r7, #12]
  40300e:	4b2f      	ldr	r3, [pc, #188]	; (4030cc <dhcp_reboot+0xf0>)
  403010:	4798      	blx	r3
    dhcp_option_short(dhcp, 576);
  403012:	f44f 7110 	mov.w	r1, #576	; 0x240
  403016:	68f8      	ldr	r0, [r7, #12]
  403018:	4b2d      	ldr	r3, [pc, #180]	; (4030d0 <dhcp_reboot+0xf4>)
  40301a:	4798      	blx	r3

    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
  40301c:	2204      	movs	r2, #4
  40301e:	2132      	movs	r1, #50	; 0x32
  403020:	68f8      	ldr	r0, [r7, #12]
  403022:	4b2a      	ldr	r3, [pc, #168]	; (4030cc <dhcp_reboot+0xf0>)
  403024:	4798      	blx	r3
    dhcp_option_long(dhcp, ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
  403026:	68fb      	ldr	r3, [r7, #12]
  403028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  40302a:	4618      	mov	r0, r3
  40302c:	4b29      	ldr	r3, [pc, #164]	; (4030d4 <dhcp_reboot+0xf8>)
  40302e:	4798      	blx	r3
  403030:	4603      	mov	r3, r0
  403032:	4619      	mov	r1, r3
  403034:	68f8      	ldr	r0, [r7, #12]
  403036:	4b28      	ldr	r3, [pc, #160]	; (4030d8 <dhcp_reboot+0xfc>)
  403038:	4798      	blx	r3

    dhcp_option_trailer(dhcp);
  40303a:	68f8      	ldr	r0, [r7, #12]
  40303c:	4b27      	ldr	r3, [pc, #156]	; (4030dc <dhcp_reboot+0x100>)
  40303e:	4798      	blx	r3

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  403040:	68fb      	ldr	r3, [r7, #12]
  403042:	691a      	ldr	r2, [r3, #16]
  403044:	68fb      	ldr	r3, [r7, #12]
  403046:	8b1b      	ldrh	r3, [r3, #24]
  403048:	33f0      	adds	r3, #240	; 0xf0
  40304a:	b29b      	uxth	r3, r3
  40304c:	4619      	mov	r1, r3
  40304e:	4610      	mov	r0, r2
  403050:	4b23      	ldr	r3, [pc, #140]	; (4030e0 <dhcp_reboot+0x104>)
  403052:	4798      	blx	r3

    /* broadcast to server */
    udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
  403054:	68fb      	ldr	r3, [r7, #12]
  403056:	6858      	ldr	r0, [r3, #4]
  403058:	68fb      	ldr	r3, [r7, #12]
  40305a:	6919      	ldr	r1, [r3, #16]
  40305c:	687b      	ldr	r3, [r7, #4]
  40305e:	9300      	str	r3, [sp, #0]
  403060:	2343      	movs	r3, #67	; 0x43
  403062:	4a20      	ldr	r2, [pc, #128]	; (4030e4 <dhcp_reboot+0x108>)
  403064:	4c20      	ldr	r4, [pc, #128]	; (4030e8 <dhcp_reboot+0x10c>)
  403066:	47a0      	blx	r4
    dhcp_delete_msg(dhcp);
  403068:	68f8      	ldr	r0, [r7, #12]
  40306a:	4b20      	ldr	r3, [pc, #128]	; (4030ec <dhcp_reboot+0x110>)
  40306c:	4798      	blx	r3
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
  }
  dhcp->tries++;
  40306e:	68fb      	ldr	r3, [r7, #12]
  403070:	7b5b      	ldrb	r3, [r3, #13]
  403072:	3301      	adds	r3, #1
  403074:	b2da      	uxtb	r2, r3
  403076:	68fb      	ldr	r3, [r7, #12]
  403078:	735a      	strb	r2, [r3, #13]
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
  40307a:	68fb      	ldr	r3, [r7, #12]
  40307c:	7b5b      	ldrb	r3, [r3, #13]
  40307e:	2b09      	cmp	r3, #9
  403080:	d80a      	bhi.n	403098 <dhcp_reboot+0xbc>
  403082:	68fb      	ldr	r3, [r7, #12]
  403084:	7b5b      	ldrb	r3, [r3, #13]
  403086:	b29b      	uxth	r3, r3
  403088:	461a      	mov	r2, r3
  40308a:	0152      	lsls	r2, r2, #5
  40308c:	1ad2      	subs	r2, r2, r3
  40308e:	0092      	lsls	r2, r2, #2
  403090:	4413      	add	r3, r2
  403092:	00db      	lsls	r3, r3, #3
  403094:	b29b      	uxth	r3, r3
  403096:	e001      	b.n	40309c <dhcp_reboot+0xc0>
  403098:	f242 7310 	movw	r3, #10000	; 0x2710
  40309c:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  40309e:	893b      	ldrh	r3, [r7, #8]
  4030a0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
  4030a4:	4a12      	ldr	r2, [pc, #72]	; (4030f0 <dhcp_reboot+0x114>)
  4030a6:	fb82 1203 	smull	r1, r2, r2, r3
  4030aa:	1152      	asrs	r2, r2, #5
  4030ac:	17db      	asrs	r3, r3, #31
  4030ae:	1ad3      	subs	r3, r2, r3
  4030b0:	b29a      	uxth	r2, r3
  4030b2:	68fb      	ldr	r3, [r7, #12]
  4030b4:	835a      	strh	r2, [r3, #26]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
  4030b6:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
  4030ba:	4618      	mov	r0, r3
  4030bc:	3714      	adds	r7, #20
  4030be:	46bd      	mov	sp, r7
  4030c0:	bd90      	pop	{r4, r7, pc}
  4030c2:	bf00      	nop
  4030c4:	00403289 	.word	0x00403289
  4030c8:	004039b9 	.word	0x004039b9
  4030cc:	004032bd 	.word	0x004032bd
  4030d0:	00403339 	.word	0x00403339
  4030d4:	00402389 	.word	0x00402389
  4030d8:	00403391 	.word	0x00403391
  4030dc:	00403c25 	.word	0x00403c25
  4030e0:	00405ed1 	.word	0x00405ed1
  4030e4:	00414a2c 	.word	0x00414a2c
  4030e8:	0040ad5d 	.word	0x0040ad5d
  4030ec:	00403be9 	.word	0x00403be9
  4030f0:	10624dd3 	.word	0x10624dd3

004030f4 <dhcp_release>:
 *
 * @param netif network interface which must release its lease
 */
err_t
dhcp_release(struct netif *netif)
{
  4030f4:	b590      	push	{r4, r7, lr}
  4030f6:	b087      	sub	sp, #28
  4030f8:	af02      	add	r7, sp, #8
  4030fa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif->dhcp;
  4030fc:	687b      	ldr	r3, [r7, #4]
  4030fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  403100:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release()\n"));

  /* idle DHCP client */
  dhcp_set_state(dhcp, DHCP_OFF);
  403102:	2100      	movs	r1, #0
  403104:	68f8      	ldr	r0, [r7, #12]
  403106:	4b3c      	ldr	r3, [pc, #240]	; (4031f8 <dhcp_release+0x104>)
  403108:	4798      	blx	r3
  /* clean old DHCP offer */
  ip_addr_set_zero(&dhcp->server_ip_addr);
  40310a:	68fb      	ldr	r3, [r7, #12]
  40310c:	2200      	movs	r2, #0
  40310e:	621a      	str	r2, [r3, #32]
  ip_addr_set_zero(&dhcp->offered_ip_addr);
  403110:	68fb      	ldr	r3, [r7, #12]
  403112:	2200      	movs	r2, #0
  403114:	625a      	str	r2, [r3, #36]	; 0x24
  ip_addr_set_zero(&dhcp->offered_sn_mask);
  403116:	68fb      	ldr	r3, [r7, #12]
  403118:	2200      	movs	r2, #0
  40311a:	629a      	str	r2, [r3, #40]	; 0x28
  ip_addr_set_zero(&dhcp->offered_gw_addr);
  40311c:	68fb      	ldr	r3, [r7, #12]
  40311e:	2200      	movs	r2, #0
  403120:	62da      	str	r2, [r3, #44]	; 0x2c
#if LWIP_DHCP_BOOTP_FILE
  ip_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
  403122:	68fb      	ldr	r3, [r7, #12]
  403124:	2200      	movs	r2, #0
  403126:	639a      	str	r2, [r3, #56]	; 0x38
  403128:	68fb      	ldr	r3, [r7, #12]
  40312a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  40312c:	68fb      	ldr	r3, [r7, #12]
  40312e:	635a      	str	r2, [r3, #52]	; 0x34
  403130:	68fb      	ldr	r3, [r7, #12]
  403132:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  403134:	68fb      	ldr	r3, [r7, #12]
  403136:	631a      	str	r2, [r3, #48]	; 0x30
  
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_RELEASE);
  403138:	2207      	movs	r2, #7
  40313a:	68f9      	ldr	r1, [r7, #12]
  40313c:	6878      	ldr	r0, [r7, #4]
  40313e:	4b2f      	ldr	r3, [pc, #188]	; (4031fc <dhcp_release+0x108>)
  403140:	4798      	blx	r3
  403142:	4603      	mov	r3, r0
  403144:	72fb      	strb	r3, [r7, #11]
  if (result == ERR_OK) {
  403146:	f997 300b 	ldrsb.w	r3, [r7, #11]
  40314a:	2b00      	cmp	r3, #0
  40314c:	d11b      	bne.n	403186 <dhcp_release+0x92>
    dhcp_option_trailer(dhcp);
  40314e:	68f8      	ldr	r0, [r7, #12]
  403150:	4b2b      	ldr	r3, [pc, #172]	; (403200 <dhcp_release+0x10c>)
  403152:	4798      	blx	r3

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  403154:	68fb      	ldr	r3, [r7, #12]
  403156:	691a      	ldr	r2, [r3, #16]
  403158:	68fb      	ldr	r3, [r7, #12]
  40315a:	8b1b      	ldrh	r3, [r3, #24]
  40315c:	33f0      	adds	r3, #240	; 0xf0
  40315e:	b29b      	uxth	r3, r3
  403160:	4619      	mov	r1, r3
  403162:	4610      	mov	r0, r2
  403164:	4b27      	ldr	r3, [pc, #156]	; (403204 <dhcp_release+0x110>)
  403166:	4798      	blx	r3

    udp_sendto_if(dhcp->pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
  403168:	68fb      	ldr	r3, [r7, #12]
  40316a:	6858      	ldr	r0, [r3, #4]
  40316c:	68fb      	ldr	r3, [r7, #12]
  40316e:	6919      	ldr	r1, [r3, #16]
  403170:	68fb      	ldr	r3, [r7, #12]
  403172:	f103 0220 	add.w	r2, r3, #32
  403176:	687b      	ldr	r3, [r7, #4]
  403178:	9300      	str	r3, [sp, #0]
  40317a:	2343      	movs	r3, #67	; 0x43
  40317c:	4c22      	ldr	r4, [pc, #136]	; (403208 <dhcp_release+0x114>)
  40317e:	47a0      	blx	r4
    dhcp_delete_msg(dhcp);
  403180:	68f8      	ldr	r0, [r7, #12]
  403182:	4b22      	ldr	r3, [pc, #136]	; (40320c <dhcp_release+0x118>)
  403184:	4798      	blx	r3
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_release: RELEASED, DHCP_OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
  }
  dhcp->tries++;
  403186:	68fb      	ldr	r3, [r7, #12]
  403188:	7b5b      	ldrb	r3, [r3, #13]
  40318a:	3301      	adds	r3, #1
  40318c:	b2da      	uxtb	r2, r3
  40318e:	68fb      	ldr	r3, [r7, #12]
  403190:	735a      	strb	r2, [r3, #13]
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
  403192:	68fb      	ldr	r3, [r7, #12]
  403194:	7b5b      	ldrb	r3, [r3, #13]
  403196:	2b09      	cmp	r3, #9
  403198:	d80a      	bhi.n	4031b0 <dhcp_release+0xbc>
  40319a:	68fb      	ldr	r3, [r7, #12]
  40319c:	7b5b      	ldrb	r3, [r3, #13]
  40319e:	b29b      	uxth	r3, r3
  4031a0:	461a      	mov	r2, r3
  4031a2:	0152      	lsls	r2, r2, #5
  4031a4:	1ad2      	subs	r2, r2, r3
  4031a6:	0092      	lsls	r2, r2, #2
  4031a8:	4413      	add	r3, r2
  4031aa:	00db      	lsls	r3, r3, #3
  4031ac:	b29b      	uxth	r3, r3
  4031ae:	e001      	b.n	4031b4 <dhcp_release+0xc0>
  4031b0:	f242 7310 	movw	r3, #10000	; 0x2710
  4031b4:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  4031b6:	893b      	ldrh	r3, [r7, #8]
  4031b8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
  4031bc:	4a14      	ldr	r2, [pc, #80]	; (403210 <dhcp_release+0x11c>)
  4031be:	fb82 1203 	smull	r1, r2, r2, r3
  4031c2:	1152      	asrs	r2, r2, #5
  4031c4:	17db      	asrs	r3, r3, #31
  4031c6:	1ad3      	subs	r3, r2, r3
  4031c8:	b29a      	uxth	r2, r3
  4031ca:	68fb      	ldr	r3, [r7, #12]
  4031cc:	835a      	strh	r2, [r3, #26]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_release(): set request timeout %"U16_F" msecs\n", msecs));
  /* bring the interface down */
  netif_set_down(netif);
  4031ce:	6878      	ldr	r0, [r7, #4]
  4031d0:	4b10      	ldr	r3, [pc, #64]	; (403214 <dhcp_release+0x120>)
  4031d2:	4798      	blx	r3
  /* remove IP address from interface */
  netif_set_ipaddr(netif, IP_ADDR_ANY);
  4031d4:	4910      	ldr	r1, [pc, #64]	; (403218 <dhcp_release+0x124>)
  4031d6:	6878      	ldr	r0, [r7, #4]
  4031d8:	4b10      	ldr	r3, [pc, #64]	; (40321c <dhcp_release+0x128>)
  4031da:	4798      	blx	r3
  netif_set_gw(netif, IP_ADDR_ANY);
  4031dc:	490e      	ldr	r1, [pc, #56]	; (403218 <dhcp_release+0x124>)
  4031de:	6878      	ldr	r0, [r7, #4]
  4031e0:	4b0f      	ldr	r3, [pc, #60]	; (403220 <dhcp_release+0x12c>)
  4031e2:	4798      	blx	r3
  netif_set_netmask(netif, IP_ADDR_ANY);
  4031e4:	490c      	ldr	r1, [pc, #48]	; (403218 <dhcp_release+0x124>)
  4031e6:	6878      	ldr	r0, [r7, #4]
  4031e8:	4b0e      	ldr	r3, [pc, #56]	; (403224 <dhcp_release+0x130>)
  4031ea:	4798      	blx	r3
  
  return result;
  4031ec:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
  4031f0:	4618      	mov	r0, r3
  4031f2:	3714      	adds	r7, #20
  4031f4:	46bd      	mov	sp, r7
  4031f6:	bd90      	pop	{r4, r7, pc}
  4031f8:	00403289 	.word	0x00403289
  4031fc:	004039b9 	.word	0x004039b9
  403200:	00403c25 	.word	0x00403c25
  403204:	00405ed1 	.word	0x00405ed1
  403208:	0040ad5d 	.word	0x0040ad5d
  40320c:	00403be9 	.word	0x00403be9
  403210:	10624dd3 	.word	0x10624dd3
  403214:	00405c31 	.word	0x00405c31
  403218:	00414a28 	.word	0x00414a28
  40321c:	00405aa1 	.word	0x00405aa1
  403220:	00405b55 	.word	0x00405b55
  403224:	00405b7d 	.word	0x00405b7d

00403228 <dhcp_stop>:
 *
 * @param netif The network interface to stop DHCP on
 */
void
dhcp_stop(struct netif *netif)
{
  403228:	b580      	push	{r7, lr}
  40322a:	b084      	sub	sp, #16
  40322c:	af00      	add	r7, sp, #0
  40322e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  LWIP_ERROR("dhcp_stop: netif != NULL", (netif != NULL), return;);
  403230:	687b      	ldr	r3, [r7, #4]
  403232:	2b00      	cmp	r3, #0
  403234:	d100      	bne.n	403238 <dhcp_stop+0x10>
  403236:	e7fe      	b.n	403236 <dhcp_stop+0xe>
  dhcp = netif->dhcp;
  403238:	687b      	ldr	r3, [r7, #4]
  40323a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  40323c:	60fb      	str	r3, [r7, #12]
  /* Remove the flag that says this netif is handled by DHCP. */
  netif->flags &= ~NETIF_FLAG_DHCP;
  40323e:	687b      	ldr	r3, [r7, #4]
  403240:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
  403244:	f023 0308 	bic.w	r3, r3, #8
  403248:	b2da      	uxtb	r2, r3
  40324a:	687b      	ldr	r3, [r7, #4]
  40324c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_stop()\n"));
  /* netif is DHCP configured? */
  if (dhcp != NULL) {
  403250:	68fb      	ldr	r3, [r7, #12]
  403252:	2b00      	cmp	r3, #0
  403254:	d00f      	beq.n	403276 <dhcp_stop+0x4e>
      autoip_stop(netif);
      dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
    }
#endif /* LWIP_DHCP_AUTOIP_COOP */

    if (dhcp->pcb != NULL) {
  403256:	68fb      	ldr	r3, [r7, #12]
  403258:	685b      	ldr	r3, [r3, #4]
  40325a:	2b00      	cmp	r3, #0
  40325c:	d007      	beq.n	40326e <dhcp_stop+0x46>
      udp_remove(dhcp->pcb);
  40325e:	68fb      	ldr	r3, [r7, #12]
  403260:	685b      	ldr	r3, [r3, #4]
  403262:	4618      	mov	r0, r3
  403264:	4b06      	ldr	r3, [pc, #24]	; (403280 <dhcp_stop+0x58>)
  403266:	4798      	blx	r3
      dhcp->pcb = NULL;
  403268:	68fb      	ldr	r3, [r7, #12]
  40326a:	2200      	movs	r2, #0
  40326c:	605a      	str	r2, [r3, #4]
    }
    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
    dhcp_set_state(dhcp, DHCP_OFF);
  40326e:	2100      	movs	r1, #0
  403270:	68f8      	ldr	r0, [r7, #12]
  403272:	4b04      	ldr	r3, [pc, #16]	; (403284 <dhcp_stop+0x5c>)
  403274:	4798      	blx	r3
  }
}
  403276:	bf00      	nop
  403278:	3710      	adds	r7, #16
  40327a:	46bd      	mov	sp, r7
  40327c:	bd80      	pop	{r7, pc}
  40327e:	bf00      	nop
  403280:	0040b069 	.word	0x0040b069
  403284:	00403289 	.word	0x00403289

00403288 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
  403288:	b480      	push	{r7}
  40328a:	b083      	sub	sp, #12
  40328c:	af00      	add	r7, sp, #0
  40328e:	6078      	str	r0, [r7, #4]
  403290:	460b      	mov	r3, r1
  403292:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
  403294:	687b      	ldr	r3, [r7, #4]
  403296:	7b1b      	ldrb	r3, [r3, #12]
  403298:	78fa      	ldrb	r2, [r7, #3]
  40329a:	429a      	cmp	r2, r3
  40329c:	d008      	beq.n	4032b0 <dhcp_set_state+0x28>
    dhcp->state = new_state;
  40329e:	687b      	ldr	r3, [r7, #4]
  4032a0:	78fa      	ldrb	r2, [r7, #3]
  4032a2:	731a      	strb	r2, [r3, #12]
    dhcp->tries = 0;
  4032a4:	687b      	ldr	r3, [r7, #4]
  4032a6:	2200      	movs	r2, #0
  4032a8:	735a      	strb	r2, [r3, #13]
    dhcp->request_timeout = 0;
  4032aa:	687b      	ldr	r3, [r7, #4]
  4032ac:	2200      	movs	r2, #0
  4032ae:	835a      	strh	r2, [r3, #26]
  }
}
  4032b0:	bf00      	nop
  4032b2:	370c      	adds	r7, #12
  4032b4:	46bd      	mov	sp, r7
  4032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4032ba:	4770      	bx	lr

004032bc <dhcp_option>:
 * DHCP message.
 *
 */
static void
dhcp_option(struct dhcp *dhcp, u8_t option_type, u8_t option_len)
{
  4032bc:	b480      	push	{r7}
  4032be:	b083      	sub	sp, #12
  4032c0:	af00      	add	r7, sp, #0
  4032c2:	6078      	str	r0, [r7, #4]
  4032c4:	460b      	mov	r3, r1
  4032c6:	70fb      	strb	r3, [r7, #3]
  4032c8:	4613      	mov	r3, r2
  4032ca:	70bb      	strb	r3, [r7, #2]
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
  dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
  4032cc:	687b      	ldr	r3, [r7, #4]
  4032ce:	695a      	ldr	r2, [r3, #20]
  4032d0:	687b      	ldr	r3, [r7, #4]
  4032d2:	8b1b      	ldrh	r3, [r3, #24]
  4032d4:	1c59      	adds	r1, r3, #1
  4032d6:	b288      	uxth	r0, r1
  4032d8:	6879      	ldr	r1, [r7, #4]
  4032da:	8308      	strh	r0, [r1, #24]
  4032dc:	4413      	add	r3, r2
  4032de:	78fa      	ldrb	r2, [r7, #3]
  4032e0:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
  4032e4:	687b      	ldr	r3, [r7, #4]
  4032e6:	695a      	ldr	r2, [r3, #20]
  4032e8:	687b      	ldr	r3, [r7, #4]
  4032ea:	8b1b      	ldrh	r3, [r3, #24]
  4032ec:	1c59      	adds	r1, r3, #1
  4032ee:	b288      	uxth	r0, r1
  4032f0:	6879      	ldr	r1, [r7, #4]
  4032f2:	8308      	strh	r0, [r1, #24]
  4032f4:	4413      	add	r3, r2
  4032f6:	78ba      	ldrb	r2, [r7, #2]
  4032f8:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
  4032fc:	bf00      	nop
  4032fe:	370c      	adds	r7, #12
  403300:	46bd      	mov	sp, r7
  403302:	f85d 7b04 	ldr.w	r7, [sp], #4
  403306:	4770      	bx	lr

00403308 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static void
dhcp_option_byte(struct dhcp *dhcp, u8_t value)
{
  403308:	b480      	push	{r7}
  40330a:	b083      	sub	sp, #12
  40330c:	af00      	add	r7, sp, #0
  40330e:	6078      	str	r0, [r7, #4]
  403310:	460b      	mov	r3, r1
  403312:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
  403314:	687b      	ldr	r3, [r7, #4]
  403316:	695a      	ldr	r2, [r3, #20]
  403318:	687b      	ldr	r3, [r7, #4]
  40331a:	8b1b      	ldrh	r3, [r3, #24]
  40331c:	1c59      	adds	r1, r3, #1
  40331e:	b288      	uxth	r0, r1
  403320:	6879      	ldr	r1, [r7, #4]
  403322:	8308      	strh	r0, [r1, #24]
  403324:	4413      	add	r3, r2
  403326:	78fa      	ldrb	r2, [r7, #3]
  403328:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
  40332c:	bf00      	nop
  40332e:	370c      	adds	r7, #12
  403330:	46bd      	mov	sp, r7
  403332:	f85d 7b04 	ldr.w	r7, [sp], #4
  403336:	4770      	bx	lr

00403338 <dhcp_option_short>:

static void
dhcp_option_short(struct dhcp *dhcp, u16_t value)
{
  403338:	b480      	push	{r7}
  40333a:	b083      	sub	sp, #12
  40333c:	af00      	add	r7, sp, #0
  40333e:	6078      	str	r0, [r7, #4]
  403340:	460b      	mov	r3, r1
  403342:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
  403344:	687b      	ldr	r3, [r7, #4]
  403346:	695a      	ldr	r2, [r3, #20]
  403348:	687b      	ldr	r3, [r7, #4]
  40334a:	8b1b      	ldrh	r3, [r3, #24]
  40334c:	1c59      	adds	r1, r3, #1
  40334e:	b288      	uxth	r0, r1
  403350:	6879      	ldr	r1, [r7, #4]
  403352:	8308      	strh	r0, [r1, #24]
  403354:	4618      	mov	r0, r3
  403356:	887b      	ldrh	r3, [r7, #2]
  403358:	0a1b      	lsrs	r3, r3, #8
  40335a:	b29b      	uxth	r3, r3
  40335c:	b2d9      	uxtb	r1, r3
  40335e:	1813      	adds	r3, r2, r0
  403360:	460a      	mov	r2, r1
  403362:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
  403366:	687b      	ldr	r3, [r7, #4]
  403368:	695a      	ldr	r2, [r3, #20]
  40336a:	687b      	ldr	r3, [r7, #4]
  40336c:	8b1b      	ldrh	r3, [r3, #24]
  40336e:	1c59      	adds	r1, r3, #1
  403370:	b288      	uxth	r0, r1
  403372:	6879      	ldr	r1, [r7, #4]
  403374:	8308      	strh	r0, [r1, #24]
  403376:	8879      	ldrh	r1, [r7, #2]
  403378:	b2c9      	uxtb	r1, r1
  40337a:	4413      	add	r3, r2
  40337c:	460a      	mov	r2, r1
  40337e:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
  403382:	bf00      	nop
  403384:	370c      	adds	r7, #12
  403386:	46bd      	mov	sp, r7
  403388:	f85d 7b04 	ldr.w	r7, [sp], #4
  40338c:	4770      	bx	lr
  40338e:	bf00      	nop

00403390 <dhcp_option_long>:

static void
dhcp_option_long(struct dhcp *dhcp, u32_t value)
{
  403390:	b480      	push	{r7}
  403392:	b083      	sub	sp, #12
  403394:	af00      	add	r7, sp, #0
  403396:	6078      	str	r0, [r7, #4]
  403398:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
  40339a:	687b      	ldr	r3, [r7, #4]
  40339c:	695a      	ldr	r2, [r3, #20]
  40339e:	687b      	ldr	r3, [r7, #4]
  4033a0:	8b1b      	ldrh	r3, [r3, #24]
  4033a2:	1c59      	adds	r1, r3, #1
  4033a4:	b288      	uxth	r0, r1
  4033a6:	6879      	ldr	r1, [r7, #4]
  4033a8:	8308      	strh	r0, [r1, #24]
  4033aa:	4618      	mov	r0, r3
  4033ac:	683b      	ldr	r3, [r7, #0]
  4033ae:	0e1b      	lsrs	r3, r3, #24
  4033b0:	b2d9      	uxtb	r1, r3
  4033b2:	1813      	adds	r3, r2, r0
  4033b4:	460a      	mov	r2, r1
  4033b6:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
  4033ba:	687b      	ldr	r3, [r7, #4]
  4033bc:	695a      	ldr	r2, [r3, #20]
  4033be:	687b      	ldr	r3, [r7, #4]
  4033c0:	8b1b      	ldrh	r3, [r3, #24]
  4033c2:	1c59      	adds	r1, r3, #1
  4033c4:	b288      	uxth	r0, r1
  4033c6:	6879      	ldr	r1, [r7, #4]
  4033c8:	8308      	strh	r0, [r1, #24]
  4033ca:	4618      	mov	r0, r3
  4033cc:	683b      	ldr	r3, [r7, #0]
  4033ce:	0c1b      	lsrs	r3, r3, #16
  4033d0:	b2d9      	uxtb	r1, r3
  4033d2:	1813      	adds	r3, r2, r0
  4033d4:	460a      	mov	r2, r1
  4033d6:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
  4033da:	687b      	ldr	r3, [r7, #4]
  4033dc:	695a      	ldr	r2, [r3, #20]
  4033de:	687b      	ldr	r3, [r7, #4]
  4033e0:	8b1b      	ldrh	r3, [r3, #24]
  4033e2:	1c59      	adds	r1, r3, #1
  4033e4:	b288      	uxth	r0, r1
  4033e6:	6879      	ldr	r1, [r7, #4]
  4033e8:	8308      	strh	r0, [r1, #24]
  4033ea:	4618      	mov	r0, r3
  4033ec:	683b      	ldr	r3, [r7, #0]
  4033ee:	0a1b      	lsrs	r3, r3, #8
  4033f0:	b2d9      	uxtb	r1, r3
  4033f2:	1813      	adds	r3, r2, r0
  4033f4:	460a      	mov	r2, r1
  4033f6:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
  4033fa:	687b      	ldr	r3, [r7, #4]
  4033fc:	695a      	ldr	r2, [r3, #20]
  4033fe:	687b      	ldr	r3, [r7, #4]
  403400:	8b1b      	ldrh	r3, [r3, #24]
  403402:	1c59      	adds	r1, r3, #1
  403404:	b288      	uxth	r0, r1
  403406:	6879      	ldr	r1, [r7, #4]
  403408:	8308      	strh	r0, [r1, #24]
  40340a:	6839      	ldr	r1, [r7, #0]
  40340c:	b2c9      	uxtb	r1, r1
  40340e:	4413      	add	r3, r2
  403410:	460a      	mov	r2, r1
  403412:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
  403416:	bf00      	nop
  403418:	370c      	adds	r7, #12
  40341a:	46bd      	mov	sp, r7
  40341c:	f85d 7b04 	ldr.w	r7, [sp], #4
  403420:	4770      	bx	lr
  403422:	bf00      	nop

00403424 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct dhcp *dhcp, struct pbuf *p)
{
  403424:	b590      	push	{r4, r7, lr}
  403426:	b08f      	sub	sp, #60	; 0x3c
  403428:	af00      	add	r7, sp, #0
  40342a:	6078      	str	r0, [r7, #4]
  40342c:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
  40342e:	2300      	movs	r3, #0
  403430:	627b      	str	r3, [r7, #36]	; 0x24
  int parse_sname_as_options = 0;
  403432:	2300      	movs	r3, #0
  403434:	623b      	str	r3, [r7, #32]

  /* clear received options */
  dhcp_clear_all_options(dhcp);
  403436:	220a      	movs	r2, #10
  403438:	2100      	movs	r1, #0
  40343a:	48a8      	ldr	r0, [pc, #672]	; (4036dc <dhcp_parse_reply+0x2b8>)
  40343c:	4ba8      	ldr	r3, [pc, #672]	; (4036e0 <dhcp_parse_reply+0x2bc>)
  40343e:	4798      	blx	r3
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
  403440:	683b      	ldr	r3, [r7, #0]
  403442:	895b      	ldrh	r3, [r3, #10]
  403444:	2b2b      	cmp	r3, #43	; 0x2b
  403446:	d802      	bhi.n	40344e <dhcp_parse_reply+0x2a>
    return ERR_BUF;
  403448:	f06f 0301 	mvn.w	r3, #1
  40344c:	e1ed      	b.n	40382a <dhcp_parse_reply+0x406>
  }
  dhcp->msg_in = (struct dhcp_msg *)p->payload;
  40344e:	683b      	ldr	r3, [r7, #0]
  403450:	685a      	ldr	r2, [r3, #4]
  403452:	687b      	ldr	r3, [r7, #4]
  403454:	609a      	str	r2, [r3, #8]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
  403456:	23f0      	movs	r3, #240	; 0xf0
  403458:	85fb      	strh	r3, [r7, #46]	; 0x2e
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
  40345a:	683b      	ldr	r3, [r7, #0]
  40345c:	891b      	ldrh	r3, [r3, #8]
  40345e:	85bb      	strh	r3, [r7, #44]	; 0x2c
again:
  q = p;
  403460:	683b      	ldr	r3, [r7, #0]
  403462:	62bb      	str	r3, [r7, #40]	; 0x28
  while((q != NULL) && (options_idx >= q->len)) {
  403464:	e00c      	b.n	403480 <dhcp_parse_reply+0x5c>
    options_idx -= q->len;
  403466:	6abb      	ldr	r3, [r7, #40]	; 0x28
  403468:	895b      	ldrh	r3, [r3, #10]
  40346a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
  40346c:	1ad3      	subs	r3, r2, r3
  40346e:	85fb      	strh	r3, [r7, #46]	; 0x2e
    options_idx_max -= q->len;
  403470:	6abb      	ldr	r3, [r7, #40]	; 0x28
  403472:	895b      	ldrh	r3, [r3, #10]
  403474:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
  403476:	1ad3      	subs	r3, r2, r3
  403478:	85bb      	strh	r3, [r7, #44]	; 0x2c
    q = q->next;
  40347a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40347c:	681b      	ldr	r3, [r3, #0]
  40347e:	62bb      	str	r3, [r7, #40]	; 0x28
  options_idx = DHCP_OPTIONS_OFS;
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
again:
  q = p;
  while((q != NULL) && (options_idx >= q->len)) {
  403480:	6abb      	ldr	r3, [r7, #40]	; 0x28
  403482:	2b00      	cmp	r3, #0
  403484:	d004      	beq.n	403490 <dhcp_parse_reply+0x6c>
  403486:	6abb      	ldr	r3, [r7, #40]	; 0x28
  403488:	895b      	ldrh	r3, [r3, #10]
  40348a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
  40348c:	429a      	cmp	r2, r3
  40348e:	d2ea      	bcs.n	403466 <dhcp_parse_reply+0x42>
    options_idx -= q->len;
    options_idx_max -= q->len;
    q = q->next;
  }
  if (q == NULL) {
  403490:	6abb      	ldr	r3, [r7, #40]	; 0x28
  403492:	2b00      	cmp	r3, #0
  403494:	d102      	bne.n	40349c <dhcp_parse_reply+0x78>
    return ERR_BUF;
  403496:	f06f 0301 	mvn.w	r3, #1
  40349a:	e1c6      	b.n	40382a <dhcp_parse_reply+0x406>
  }
  offset = options_idx;
  40349c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
  40349e:	867b      	strh	r3, [r7, #50]	; 0x32
  offset_max = options_idx_max;
  4034a0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
  4034a2:	863b      	strh	r3, [r7, #48]	; 0x30
  options = (u8_t*)q->payload;
  4034a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4034a6:	685b      	ldr	r3, [r3, #4]
  4034a8:	637b      	str	r3, [r7, #52]	; 0x34
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while((q != NULL) && (options[offset] != DHCP_OPTION_END) && (offset < offset_max)) {
  4034aa:	e17e      	b.n	4037aa <dhcp_parse_reply+0x386>
    u8_t op = options[offset];
  4034ac:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
  4034ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
  4034b0:	4413      	add	r3, r2
  4034b2:	781b      	ldrb	r3, [r3, #0]
  4034b4:	757b      	strb	r3, [r7, #21]
    u8_t len;
    u8_t decode_len = 0;
  4034b6:	2300      	movs	r3, #0
  4034b8:	77bb      	strb	r3, [r7, #30]
    int decode_idx = -1;
  4034ba:	f04f 33ff 	mov.w	r3, #4294967295
  4034be:	61bb      	str	r3, [r7, #24]
    u16_t val_offset = offset + 2;
  4034c0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
  4034c2:	3302      	adds	r3, #2
  4034c4:	82fb      	strh	r3, [r7, #22]
    /* len byte might be in the next pbuf */
    if (offset + 1 < q->len) {
  4034c6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
  4034c8:	3301      	adds	r3, #1
  4034ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
  4034cc:	8952      	ldrh	r2, [r2, #10]
  4034ce:	4293      	cmp	r3, r2
  4034d0:	da06      	bge.n	4034e0 <dhcp_parse_reply+0xbc>
      len = options[offset + 1];
  4034d2:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
  4034d4:	3301      	adds	r3, #1
  4034d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
  4034d8:	4413      	add	r3, r2
  4034da:	781b      	ldrb	r3, [r3, #0]
  4034dc:	77fb      	strb	r3, [r7, #31]
  4034de:	e00a      	b.n	4034f6 <dhcp_parse_reply+0xd2>
    } else {
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
  4034e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4034e2:	681b      	ldr	r3, [r3, #0]
  4034e4:	2b00      	cmp	r3, #0
  4034e6:	d004      	beq.n	4034f2 <dhcp_parse_reply+0xce>
  4034e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4034ea:	681b      	ldr	r3, [r3, #0]
  4034ec:	685b      	ldr	r3, [r3, #4]
  4034ee:	781b      	ldrb	r3, [r3, #0]
  4034f0:	e000      	b.n	4034f4 <dhcp_parse_reply+0xd0>
  4034f2:	2300      	movs	r3, #0
  4034f4:	77fb      	strb	r3, [r7, #31]
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
  4034f6:	7ffb      	ldrb	r3, [r7, #31]
  4034f8:	77bb      	strb	r3, [r7, #30]
    switch(op) {
  4034fa:	7d7b      	ldrb	r3, [r7, #21]
  4034fc:	2b3b      	cmp	r3, #59	; 0x3b
  4034fe:	f200 80d2 	bhi.w	4036a6 <dhcp_parse_reply+0x282>
  403502:	a201      	add	r2, pc, #4	; (adr r2, 403508 <dhcp_parse_reply+0xe4>)
  403504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  403508:	004035f9 	.word	0x004035f9
  40350c:	00403609 	.word	0x00403609
  403510:	004036a7 	.word	0x004036a7
  403514:	00403617 	.word	0x00403617
  403518:	004036a7 	.word	0x004036a7
  40351c:	004036a7 	.word	0x004036a7
  403520:	0040362b 	.word	0x0040362b
  403524:	004036a7 	.word	0x004036a7
  403528:	004036a7 	.word	0x004036a7
  40352c:	004036a7 	.word	0x004036a7
  403530:	004036a7 	.word	0x004036a7
  403534:	004036a7 	.word	0x004036a7
  403538:	004036a7 	.word	0x004036a7
  40353c:	004036a7 	.word	0x004036a7
  403540:	004036a7 	.word	0x004036a7
  403544:	004036a7 	.word	0x004036a7
  403548:	004036a7 	.word	0x004036a7
  40354c:	004036a7 	.word	0x004036a7
  403550:	004036a7 	.word	0x004036a7
  403554:	004036a7 	.word	0x004036a7
  403558:	004036a7 	.word	0x004036a7
  40355c:	004036a7 	.word	0x004036a7
  403560:	004036a7 	.word	0x004036a7
  403564:	004036a7 	.word	0x004036a7
  403568:	004036a7 	.word	0x004036a7
  40356c:	004036a7 	.word	0x004036a7
  403570:	004036a7 	.word	0x004036a7
  403574:	004036a7 	.word	0x004036a7
  403578:	004036a7 	.word	0x004036a7
  40357c:	004036a7 	.word	0x004036a7
  403580:	004036a7 	.word	0x004036a7
  403584:	004036a7 	.word	0x004036a7
  403588:	004036a7 	.word	0x004036a7
  40358c:	004036a7 	.word	0x004036a7
  403590:	004036a7 	.word	0x004036a7
  403594:	004036a7 	.word	0x004036a7
  403598:	004036a7 	.word	0x004036a7
  40359c:	004036a7 	.word	0x004036a7
  4035a0:	004036a7 	.word	0x004036a7
  4035a4:	004036a7 	.word	0x004036a7
  4035a8:	004036a7 	.word	0x004036a7
  4035ac:	004036a7 	.word	0x004036a7
  4035b0:	004036a7 	.word	0x004036a7
  4035b4:	004036a7 	.word	0x004036a7
  4035b8:	004036a7 	.word	0x004036a7
  4035bc:	004036a7 	.word	0x004036a7
  4035c0:	004036a7 	.word	0x004036a7
  4035c4:	004036a7 	.word	0x004036a7
  4035c8:	004036a7 	.word	0x004036a7
  4035cc:	004036a7 	.word	0x004036a7
  4035d0:	004036a7 	.word	0x004036a7
  4035d4:	00403653 	.word	0x00403653
  4035d8:	00403661 	.word	0x00403661
  4035dc:	0040366f 	.word	0x0040366f
  4035e0:	0040367d 	.word	0x0040367d
  4035e4:	004036a7 	.word	0x004036a7
  4035e8:	004036a7 	.word	0x004036a7
  4035ec:	004036a7 	.word	0x004036a7
  4035f0:	0040368b 	.word	0x0040368b
  4035f4:	00403699 	.word	0x00403699
      /* case(DHCP_OPTION_END): handled above */
      case(DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
  4035f8:	2300      	movs	r3, #0
  4035fa:	77fb      	strb	r3, [r7, #31]
  4035fc:	7ffb      	ldrb	r3, [r7, #31]
  4035fe:	77bb      	strb	r3, [r7, #30]
        /* will be increased below */
        offset--;
  403600:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
  403602:	3b01      	subs	r3, #1
  403604:	867b      	strh	r3, [r7, #50]	; 0x32
        break;
  403606:	e051      	b.n	4036ac <dhcp_parse_reply+0x288>
      case(DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
  403608:	7ffb      	ldrb	r3, [r7, #31]
  40360a:	2b04      	cmp	r3, #4
  40360c:	d000      	beq.n	403610 <dhcp_parse_reply+0x1ec>
  40360e:	e7fe      	b.n	40360e <dhcp_parse_reply+0x1ea>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
  403610:	2306      	movs	r3, #6
  403612:	61bb      	str	r3, [r7, #24]
        break;
  403614:	e04a      	b.n	4036ac <dhcp_parse_reply+0x288>
      case(DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
  403616:	2304      	movs	r3, #4
  403618:	77bb      	strb	r3, [r7, #30]
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
  40361a:	7ffa      	ldrb	r2, [r7, #31]
  40361c:	7fbb      	ldrb	r3, [r7, #30]
  40361e:	429a      	cmp	r2, r3
  403620:	d200      	bcs.n	403624 <dhcp_parse_reply+0x200>
  403622:	e7fe      	b.n	403622 <dhcp_parse_reply+0x1fe>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
  403624:	2307      	movs	r3, #7
  403626:	61bb      	str	r3, [r7, #24]
        break;
  403628:	e040      	b.n	4036ac <dhcp_parse_reply+0x288>
      case(DHCP_OPTION_DNS_SERVER):
        /* special case: there might be more than one server */
        LWIP_ERROR("len % 4 == 0", len % 4 == 0, return ERR_VAL;);
  40362a:	7ffb      	ldrb	r3, [r7, #31]
  40362c:	f003 0303 	and.w	r3, r3, #3
  403630:	b2db      	uxtb	r3, r3
  403632:	2b00      	cmp	r3, #0
  403634:	d000      	beq.n	403638 <dhcp_parse_reply+0x214>
  403636:	e7fe      	b.n	403636 <dhcp_parse_reply+0x212>
        /* limit number of DNS servers */
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
  403638:	7ffb      	ldrb	r3, [r7, #31]
  40363a:	2b08      	cmp	r3, #8
  40363c:	bf28      	it	cs
  40363e:	2308      	movcs	r3, #8
  403640:	77bb      	strb	r3, [r7, #30]
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
  403642:	7ffa      	ldrb	r2, [r7, #31]
  403644:	7fbb      	ldrb	r3, [r7, #30]
  403646:	429a      	cmp	r2, r3
  403648:	d200      	bcs.n	40364c <dhcp_parse_reply+0x228>
  40364a:	e7fe      	b.n	40364a <dhcp_parse_reply+0x226>
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
  40364c:	2308      	movs	r3, #8
  40364e:	61bb      	str	r3, [r7, #24]
        break;
  403650:	e02c      	b.n	4036ac <dhcp_parse_reply+0x288>
      case(DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
  403652:	7ffb      	ldrb	r3, [r7, #31]
  403654:	2b04      	cmp	r3, #4
  403656:	d000      	beq.n	40365a <dhcp_parse_reply+0x236>
  403658:	e7fe      	b.n	403658 <dhcp_parse_reply+0x234>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
  40365a:	2303      	movs	r3, #3
  40365c:	61bb      	str	r3, [r7, #24]
        break;
  40365e:	e025      	b.n	4036ac <dhcp_parse_reply+0x288>
      case(DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
  403660:	7ffb      	ldrb	r3, [r7, #31]
  403662:	2b01      	cmp	r3, #1
  403664:	d000      	beq.n	403668 <dhcp_parse_reply+0x244>
  403666:	e7fe      	b.n	403666 <dhcp_parse_reply+0x242>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
  403668:	2300      	movs	r3, #0
  40366a:	61bb      	str	r3, [r7, #24]
        break;
  40366c:	e01e      	b.n	4036ac <dhcp_parse_reply+0x288>
      case(DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
  40366e:	7ffb      	ldrb	r3, [r7, #31]
  403670:	2b01      	cmp	r3, #1
  403672:	d000      	beq.n	403676 <dhcp_parse_reply+0x252>
  403674:	e7fe      	b.n	403674 <dhcp_parse_reply+0x250>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
  403676:	2301      	movs	r3, #1
  403678:	61bb      	str	r3, [r7, #24]
        break;
  40367a:	e017      	b.n	4036ac <dhcp_parse_reply+0x288>
      case(DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
  40367c:	7ffb      	ldrb	r3, [r7, #31]
  40367e:	2b04      	cmp	r3, #4
  403680:	d000      	beq.n	403684 <dhcp_parse_reply+0x260>
  403682:	e7fe      	b.n	403682 <dhcp_parse_reply+0x25e>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
  403684:	2302      	movs	r3, #2
  403686:	61bb      	str	r3, [r7, #24]
        break;
  403688:	e010      	b.n	4036ac <dhcp_parse_reply+0x288>
      case(DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
  40368a:	7ffb      	ldrb	r3, [r7, #31]
  40368c:	2b04      	cmp	r3, #4
  40368e:	d000      	beq.n	403692 <dhcp_parse_reply+0x26e>
  403690:	e7fe      	b.n	403690 <dhcp_parse_reply+0x26c>
        decode_idx = DHCP_OPTION_IDX_T1;
  403692:	2304      	movs	r3, #4
  403694:	61bb      	str	r3, [r7, #24]
        break;
  403696:	e009      	b.n	4036ac <dhcp_parse_reply+0x288>
      case(DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
  403698:	7ffb      	ldrb	r3, [r7, #31]
  40369a:	2b04      	cmp	r3, #4
  40369c:	d000      	beq.n	4036a0 <dhcp_parse_reply+0x27c>
  40369e:	e7fe      	b.n	40369e <dhcp_parse_reply+0x27a>
        decode_idx = DHCP_OPTION_IDX_T2;
  4036a0:	2305      	movs	r3, #5
  4036a2:	61bb      	str	r3, [r7, #24]
        break;
  4036a4:	e002      	b.n	4036ac <dhcp_parse_reply+0x288>
      default:
        decode_len = 0;
  4036a6:	2300      	movs	r3, #0
  4036a8:	77bb      	strb	r3, [r7, #30]
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", op));
        break;
  4036aa:	bf00      	nop
    }
    offset += len + 2;
  4036ac:	7ffb      	ldrb	r3, [r7, #31]
  4036ae:	b29a      	uxth	r2, r3
  4036b0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
  4036b2:	4413      	add	r3, r2
  4036b4:	b29b      	uxth	r3, r3
  4036b6:	3302      	adds	r3, #2
  4036b8:	867b      	strh	r3, [r7, #50]	; 0x32
    if (decode_len > 0) {
  4036ba:	7fbb      	ldrb	r3, [r7, #30]
  4036bc:	2b00      	cmp	r3, #0
  4036be:	d058      	beq.n	403772 <dhcp_parse_reply+0x34e>
      u32_t value = 0;
  4036c0:	2300      	movs	r3, #0
  4036c2:	60bb      	str	r3, [r7, #8]
      u16_t copy_len;
decode_next:
      LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
      if (!dhcp_option_given(dhcp, decode_idx)) {
  4036c4:	4a05      	ldr	r2, [pc, #20]	; (4036dc <dhcp_parse_reply+0x2b8>)
  4036c6:	69bb      	ldr	r3, [r7, #24]
  4036c8:	4413      	add	r3, r2
  4036ca:	781b      	ldrb	r3, [r3, #0]
  4036cc:	2b00      	cmp	r3, #0
  4036ce:	d150      	bne.n	403772 <dhcp_parse_reply+0x34e>
        copy_len = LWIP_MIN(decode_len, 4);
  4036d0:	7fbb      	ldrb	r3, [r7, #30]
  4036d2:	2b03      	cmp	r3, #3
  4036d4:	d806      	bhi.n	4036e4 <dhcp_parse_reply+0x2c0>
  4036d6:	7fbb      	ldrb	r3, [r7, #30]
  4036d8:	b29b      	uxth	r3, r3
  4036da:	e004      	b.n	4036e6 <dhcp_parse_reply+0x2c2>
  4036dc:	20403918 	.word	0x20403918
  4036e0:	0040d98d 	.word	0x0040d98d
  4036e4:	2304      	movs	r3, #4
  4036e6:	827b      	strh	r3, [r7, #18]
        pbuf_copy_partial(q, &value, copy_len, val_offset);
  4036e8:	8afb      	ldrh	r3, [r7, #22]
  4036ea:	8a7a      	ldrh	r2, [r7, #18]
  4036ec:	f107 0108 	add.w	r1, r7, #8
  4036f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
  4036f2:	4c50      	ldr	r4, [pc, #320]	; (403834 <dhcp_parse_reply+0x410>)
  4036f4:	47a0      	blx	r4
        if (decode_len > 4) {
  4036f6:	7fbb      	ldrb	r3, [r7, #30]
  4036f8:	2b04      	cmp	r3, #4
  4036fa:	d91e      	bls.n	40373a <dhcp_parse_reply+0x316>
          /* decode more than one u32_t */
          LWIP_ERROR("decode_len % 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
  4036fc:	7fbb      	ldrb	r3, [r7, #30]
  4036fe:	f003 0303 	and.w	r3, r3, #3
  403702:	b2db      	uxtb	r3, r3
  403704:	2b00      	cmp	r3, #0
  403706:	d000      	beq.n	40370a <dhcp_parse_reply+0x2e6>
  403708:	e7fe      	b.n	403708 <dhcp_parse_reply+0x2e4>
          dhcp_got_option(dhcp, decode_idx);
  40370a:	4a4b      	ldr	r2, [pc, #300]	; (403838 <dhcp_parse_reply+0x414>)
  40370c:	69bb      	ldr	r3, [r7, #24]
  40370e:	4413      	add	r3, r2
  403710:	2201      	movs	r2, #1
  403712:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, htonl(value));
  403714:	68bb      	ldr	r3, [r7, #8]
  403716:	4618      	mov	r0, r3
  403718:	4b48      	ldr	r3, [pc, #288]	; (40383c <dhcp_parse_reply+0x418>)
  40371a:	4798      	blx	r3
  40371c:	4601      	mov	r1, r0
  40371e:	4a48      	ldr	r2, [pc, #288]	; (403840 <dhcp_parse_reply+0x41c>)
  403720:	69bb      	ldr	r3, [r7, #24]
  403722:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
          decode_len -= 4;
  403726:	7fbb      	ldrb	r3, [r7, #30]
  403728:	3b04      	subs	r3, #4
  40372a:	77bb      	strb	r3, [r7, #30]
          val_offset += 4;
  40372c:	8afb      	ldrh	r3, [r7, #22]
  40372e:	3304      	adds	r3, #4
  403730:	82fb      	strh	r3, [r7, #22]
          decode_idx++;
  403732:	69bb      	ldr	r3, [r7, #24]
  403734:	3301      	adds	r3, #1
  403736:	61bb      	str	r3, [r7, #24]
          goto decode_next;
  403738:	e7c4      	b.n	4036c4 <dhcp_parse_reply+0x2a0>
        } else if (decode_len == 4) {
  40373a:	7fbb      	ldrb	r3, [r7, #30]
  40373c:	2b04      	cmp	r3, #4
  40373e:	d106      	bne.n	40374e <dhcp_parse_reply+0x32a>
          value = ntohl(value);
  403740:	68bb      	ldr	r3, [r7, #8]
  403742:	4618      	mov	r0, r3
  403744:	4b3f      	ldr	r3, [pc, #252]	; (403844 <dhcp_parse_reply+0x420>)
  403746:	4798      	blx	r3
  403748:	4603      	mov	r3, r0
  40374a:	60bb      	str	r3, [r7, #8]
  40374c:	e007      	b.n	40375e <dhcp_parse_reply+0x33a>
        } else {
          LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
  40374e:	7fbb      	ldrb	r3, [r7, #30]
  403750:	2b01      	cmp	r3, #1
  403752:	d000      	beq.n	403756 <dhcp_parse_reply+0x332>
  403754:	e7fe      	b.n	403754 <dhcp_parse_reply+0x330>
          value = ((u8_t*)&value)[0];
  403756:	f107 0308 	add.w	r3, r7, #8
  40375a:	781b      	ldrb	r3, [r3, #0]
  40375c:	60bb      	str	r3, [r7, #8]
        }
        dhcp_got_option(dhcp, decode_idx);
  40375e:	4a36      	ldr	r2, [pc, #216]	; (403838 <dhcp_parse_reply+0x414>)
  403760:	69bb      	ldr	r3, [r7, #24]
  403762:	4413      	add	r3, r2
  403764:	2201      	movs	r2, #1
  403766:	701a      	strb	r2, [r3, #0]
        dhcp_set_option_value(dhcp, decode_idx, value);
  403768:	68ba      	ldr	r2, [r7, #8]
  40376a:	4935      	ldr	r1, [pc, #212]	; (403840 <dhcp_parse_reply+0x41c>)
  40376c:	69bb      	ldr	r3, [r7, #24]
  40376e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      }
    }
    if (offset >= q->len) {
  403772:	6abb      	ldr	r3, [r7, #40]	; 0x28
  403774:	895b      	ldrh	r3, [r3, #10]
  403776:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
  403778:	429a      	cmp	r2, r3
  40377a:	d316      	bcc.n	4037aa <dhcp_parse_reply+0x386>
      offset -= q->len;
  40377c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40377e:	895b      	ldrh	r3, [r3, #10]
  403780:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
  403782:	1ad3      	subs	r3, r2, r3
  403784:	867b      	strh	r3, [r7, #50]	; 0x32
      offset_max -= q->len;
  403786:	6abb      	ldr	r3, [r7, #40]	; 0x28
  403788:	895b      	ldrh	r3, [r3, #10]
  40378a:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
  40378c:	1ad3      	subs	r3, r2, r3
  40378e:	863b      	strh	r3, [r7, #48]	; 0x30
      if ((offset < offset_max) && offset_max) {
  403790:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
  403792:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
  403794:	429a      	cmp	r2, r3
  403796:	d216      	bcs.n	4037c6 <dhcp_parse_reply+0x3a2>
  403798:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
  40379a:	2b00      	cmp	r3, #0
  40379c:	d013      	beq.n	4037c6 <dhcp_parse_reply+0x3a2>
        q = q->next;
  40379e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4037a0:	681b      	ldr	r3, [r3, #0]
  4037a2:	62bb      	str	r3, [r7, #40]	; 0x28
        LWIP_ASSERT("next pbuf was null", q);
        options = (u8_t*)q->payload;
  4037a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4037a6:	685b      	ldr	r3, [r3, #4]
  4037a8:	637b      	str	r3, [r7, #52]	; 0x34
  }
  offset = options_idx;
  offset_max = options_idx_max;
  options = (u8_t*)q->payload;
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while((q != NULL) && (options[offset] != DHCP_OPTION_END) && (offset < offset_max)) {
  4037aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4037ac:	2b00      	cmp	r3, #0
  4037ae:	d00a      	beq.n	4037c6 <dhcp_parse_reply+0x3a2>
  4037b0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
  4037b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
  4037b4:	4413      	add	r3, r2
  4037b6:	781b      	ldrb	r3, [r3, #0]
  4037b8:	2bff      	cmp	r3, #255	; 0xff
  4037ba:	d004      	beq.n	4037c6 <dhcp_parse_reply+0x3a2>
  4037bc:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
  4037be:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
  4037c0:	429a      	cmp	r2, r3
  4037c2:	f4ff ae73 	bcc.w	4034ac <dhcp_parse_reply+0x88>
        break;
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
  4037c6:	4b1c      	ldr	r3, [pc, #112]	; (403838 <dhcp_parse_reply+0x414>)
  4037c8:	781b      	ldrb	r3, [r3, #0]
  4037ca:	2b00      	cmp	r3, #0
  4037cc:	d018      	beq.n	403800 <dhcp_parse_reply+0x3dc>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
  4037ce:	4b1c      	ldr	r3, [pc, #112]	; (403840 <dhcp_parse_reply+0x41c>)
  4037d0:	681b      	ldr	r3, [r3, #0]
  4037d2:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
  4037d4:	4b18      	ldr	r3, [pc, #96]	; (403838 <dhcp_parse_reply+0x414>)
  4037d6:	2200      	movs	r2, #0
  4037d8:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
  4037da:	68fb      	ldr	r3, [r7, #12]
  4037dc:	2b01      	cmp	r3, #1
  4037de:	d102      	bne.n	4037e6 <dhcp_parse_reply+0x3c2>
      parse_file_as_options = 1;
  4037e0:	2301      	movs	r3, #1
  4037e2:	627b      	str	r3, [r7, #36]	; 0x24
  4037e4:	e00c      	b.n	403800 <dhcp_parse_reply+0x3dc>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
  4037e6:	68fb      	ldr	r3, [r7, #12]
  4037e8:	2b02      	cmp	r3, #2
  4037ea:	d102      	bne.n	4037f2 <dhcp_parse_reply+0x3ce>
      parse_sname_as_options = 1;
  4037ec:	2301      	movs	r3, #1
  4037ee:	623b      	str	r3, [r7, #32]
  4037f0:	e006      	b.n	403800 <dhcp_parse_reply+0x3dc>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
  4037f2:	68fb      	ldr	r3, [r7, #12]
  4037f4:	2b03      	cmp	r3, #3
  4037f6:	d103      	bne.n	403800 <dhcp_parse_reply+0x3dc>
      parse_sname_as_options = 1;
  4037f8:	2301      	movs	r3, #1
  4037fa:	623b      	str	r3, [r7, #32]
      parse_file_as_options = 1;
  4037fc:	2301      	movs	r3, #1
  4037fe:	627b      	str	r3, [r7, #36]	; 0x24
      /* make sure the string is really NULL-terminated */
      dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
    }
#endif /* LWIP_DHCP_BOOTP_FILE */
  }
  if (parse_file_as_options) {
  403800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403802:	2b00      	cmp	r3, #0
  403804:	d006      	beq.n	403814 <dhcp_parse_reply+0x3f0>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
  403806:	2300      	movs	r3, #0
  403808:	627b      	str	r3, [r7, #36]	; 0x24
    options_idx = DHCP_FILE_OFS;
  40380a:	236c      	movs	r3, #108	; 0x6c
  40380c:	85fb      	strh	r3, [r7, #46]	; 0x2e
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
  40380e:	23ec      	movs	r3, #236	; 0xec
  403810:	85bb      	strh	r3, [r7, #44]	; 0x2c
    goto again;
  403812:	e625      	b.n	403460 <dhcp_parse_reply+0x3c>
  } else if (parse_sname_as_options) {
  403814:	6a3b      	ldr	r3, [r7, #32]
  403816:	2b00      	cmp	r3, #0
  403818:	d006      	beq.n	403828 <dhcp_parse_reply+0x404>
    parse_sname_as_options = 0;
  40381a:	2300      	movs	r3, #0
  40381c:	623b      	str	r3, [r7, #32]
    options_idx = DHCP_SNAME_OFS;
  40381e:	232c      	movs	r3, #44	; 0x2c
  403820:	85fb      	strh	r3, [r7, #46]	; 0x2e
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
  403822:	236c      	movs	r3, #108	; 0x6c
  403824:	85bb      	strh	r3, [r7, #44]	; 0x2c
    goto again;
  403826:	e61b      	b.n	403460 <dhcp_parse_reply+0x3c>
  }
  return ERR_OK;
  403828:	2300      	movs	r3, #0
}
  40382a:	4618      	mov	r0, r3
  40382c:	373c      	adds	r7, #60	; 0x3c
  40382e:	46bd      	mov	sp, r7
  403830:	bd90      	pop	{r4, r7, pc}
  403832:	bf00      	nop
  403834:	004062dd 	.word	0x004062dd
  403838:	20403918 	.word	0x20403918
  40383c:	00402355 	.word	0x00402355
  403840:	20403924 	.word	0x20403924
  403844:	00402389 	.word	0x00402389

00403848 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, ip_addr_t *addr, u16_t port)
{
  403848:	b580      	push	{r7, lr}
  40384a:	b08a      	sub	sp, #40	; 0x28
  40384c:	af00      	add	r7, sp, #0
  40384e:	60f8      	str	r0, [r7, #12]
  403850:	60b9      	str	r1, [r7, #8]
  403852:	607a      	str	r2, [r7, #4]
  403854:	603b      	str	r3, [r7, #0]
  struct netif *netif = (struct netif *)arg;
  403856:	68fb      	ldr	r3, [r7, #12]
  403858:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif->dhcp;
  40385a:	6a3b      	ldr	r3, [r7, #32]
  40385c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  40385e:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
  403860:	687b      	ldr	r3, [r7, #4]
  403862:	685b      	ldr	r3, [r3, #4]
  403864:	61bb      	str	r3, [r7, #24]
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);

  if (p->len < DHCP_MIN_REPLY_LEN) {
  403866:	687b      	ldr	r3, [r7, #4]
  403868:	895b      	ldrh	r3, [r3, #10]
  40386a:	2b2b      	cmp	r3, #43	; 0x2b
  40386c:	d97b      	bls.n	403966 <dhcp_recv+0x11e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
  40386e:	69bb      	ldr	r3, [r7, #24]
  403870:	781b      	ldrb	r3, [r3, #0]
  403872:	2b02      	cmp	r3, #2
  403874:	d179      	bne.n	40396a <dhcp_recv+0x122>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len; i++) {
  403876:	2300      	movs	r3, #0
  403878:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  40387c:	e011      	b.n	4038a2 <dhcp_recv+0x5a>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
  40387e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  403882:	6a3a      	ldr	r2, [r7, #32]
  403884:	4413      	add	r3, r2
  403886:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
  40388a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  40388e:	69b9      	ldr	r1, [r7, #24]
  403890:	440b      	add	r3, r1
  403892:	7f1b      	ldrb	r3, [r3, #28]
  403894:	429a      	cmp	r2, r3
  403896:	d16a      	bne.n	40396e <dhcp_recv+0x126>
  if (reply_msg->op != DHCP_BOOTREPLY) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len; i++) {
  403898:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  40389c:	3301      	adds	r3, #1
  40389e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  4038a2:	6a3b      	ldr	r3, [r7, #32]
  4038a4:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
  4038a8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
  4038ac:	429a      	cmp	r2, r3
  4038ae:	d3e6      	bcc.n	40387e <dhcp_recv+0x36>
        (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (ntohl(reply_msg->xid) != dhcp->xid) {
  4038b0:	69bb      	ldr	r3, [r7, #24]
  4038b2:	685b      	ldr	r3, [r3, #4]
  4038b4:	4618      	mov	r0, r3
  4038b6:	4b36      	ldr	r3, [pc, #216]	; (403990 <dhcp_recv+0x148>)
  4038b8:	4798      	blx	r3
  4038ba:	4602      	mov	r2, r0
  4038bc:	69fb      	ldr	r3, [r7, #28]
  4038be:	681b      	ldr	r3, [r3, #0]
  4038c0:	429a      	cmp	r2, r3
  4038c2:	d156      	bne.n	403972 <dhcp_recv+0x12a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n",ntohl(reply_msg->xid),dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(dhcp, p) != ERR_OK) {
  4038c4:	6879      	ldr	r1, [r7, #4]
  4038c6:	69f8      	ldr	r0, [r7, #28]
  4038c8:	4b32      	ldr	r3, [pc, #200]	; (403994 <dhcp_recv+0x14c>)
  4038ca:	4798      	blx	r3
  4038cc:	4603      	mov	r3, r0
  4038ce:	2b00      	cmp	r3, #0
  4038d0:	d151      	bne.n	403976 <dhcp_recv+0x12e>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
  4038d2:	4b31      	ldr	r3, [pc, #196]	; (403998 <dhcp_recv+0x150>)
  4038d4:	785b      	ldrb	r3, [r3, #1]
  4038d6:	2b00      	cmp	r3, #0
  4038d8:	d04f      	beq.n	40397a <dhcp_recv+0x132>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
  4038da:	4b30      	ldr	r3, [pc, #192]	; (40399c <dhcp_recv+0x154>)
  4038dc:	685b      	ldr	r3, [r3, #4]
  4038de:	75fb      	strb	r3, [r7, #23]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
  4038e0:	7dfb      	ldrb	r3, [r7, #23]
  4038e2:	2b05      	cmp	r3, #5
  4038e4:	d11a      	bne.n	40391c <dhcp_recv+0xd4>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_REQUESTING) {
  4038e6:	69fb      	ldr	r3, [r7, #28]
  4038e8:	7b1b      	ldrb	r3, [r3, #12]
  4038ea:	2b01      	cmp	r3, #1
  4038ec:	d106      	bne.n	4038fc <dhcp_recv+0xb4>
      dhcp_handle_ack(netif);
  4038ee:	6a38      	ldr	r0, [r7, #32]
  4038f0:	4b2b      	ldr	r3, [pc, #172]	; (4039a0 <dhcp_recv+0x158>)
  4038f2:	4798      	blx	r3
#if DHCP_DOES_ARP_CHECK
      /* check if the acknowledged lease address is already in use */
      dhcp_check(netif);
  4038f4:	6a38      	ldr	r0, [r7, #32]
  4038f6:	4b2b      	ldr	r3, [pc, #172]	; (4039a4 <dhcp_recv+0x15c>)
  4038f8:	4798      	blx	r3
  4038fa:	e03f      	b.n	40397c <dhcp_recv+0x134>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_REBOOTING) || (dhcp->state == DHCP_REBINDING) || (dhcp->state == DHCP_RENEWING)) {
  4038fc:	69fb      	ldr	r3, [r7, #28]
  4038fe:	7b1b      	ldrb	r3, [r3, #12]
  403900:	2b03      	cmp	r3, #3
  403902:	d007      	beq.n	403914 <dhcp_recv+0xcc>
  403904:	69fb      	ldr	r3, [r7, #28]
  403906:	7b1b      	ldrb	r3, [r3, #12]
  403908:	2b04      	cmp	r3, #4
  40390a:	d003      	beq.n	403914 <dhcp_recv+0xcc>
  40390c:	69fb      	ldr	r3, [r7, #28]
  40390e:	7b1b      	ldrb	r3, [r3, #12]
  403910:	2b05      	cmp	r3, #5
  403912:	d133      	bne.n	40397c <dhcp_recv+0x134>
      dhcp_bind(netif);
  403914:	6a38      	ldr	r0, [r7, #32]
  403916:	4b24      	ldr	r3, [pc, #144]	; (4039a8 <dhcp_recv+0x160>)
  403918:	4798      	blx	r3
  40391a:	e02f      	b.n	40397c <dhcp_recv+0x134>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
  40391c:	7dfb      	ldrb	r3, [r7, #23]
  40391e:	2b06      	cmp	r3, #6
  403920:	d113      	bne.n	40394a <dhcp_recv+0x102>
    ((dhcp->state == DHCP_REBOOTING) || (dhcp->state == DHCP_REQUESTING) ||
  403922:	69fb      	ldr	r3, [r7, #28]
  403924:	7b1b      	ldrb	r3, [r3, #12]
    else if ((dhcp->state == DHCP_REBOOTING) || (dhcp->state == DHCP_REBINDING) || (dhcp->state == DHCP_RENEWING)) {
      dhcp_bind(netif);
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
  403926:	2b03      	cmp	r3, #3
  403928:	d00b      	beq.n	403942 <dhcp_recv+0xfa>
    ((dhcp->state == DHCP_REBOOTING) || (dhcp->state == DHCP_REQUESTING) ||
  40392a:	69fb      	ldr	r3, [r7, #28]
  40392c:	7b1b      	ldrb	r3, [r3, #12]
  40392e:	2b01      	cmp	r3, #1
  403930:	d007      	beq.n	403942 <dhcp_recv+0xfa>
     (dhcp->state == DHCP_REBINDING) || (dhcp->state == DHCP_RENEWING  ))) {
  403932:	69fb      	ldr	r3, [r7, #28]
  403934:	7b1b      	ldrb	r3, [r3, #12]
      dhcp_bind(netif);
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
    ((dhcp->state == DHCP_REBOOTING) || (dhcp->state == DHCP_REQUESTING) ||
  403936:	2b04      	cmp	r3, #4
  403938:	d003      	beq.n	403942 <dhcp_recv+0xfa>
     (dhcp->state == DHCP_REBINDING) || (dhcp->state == DHCP_RENEWING  ))) {
  40393a:	69fb      	ldr	r3, [r7, #28]
  40393c:	7b1b      	ldrb	r3, [r3, #12]
  40393e:	2b05      	cmp	r3, #5
  403940:	d103      	bne.n	40394a <dhcp_recv+0x102>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
  403942:	6a38      	ldr	r0, [r7, #32]
  403944:	4b19      	ldr	r3, [pc, #100]	; (4039ac <dhcp_recv+0x164>)
  403946:	4798      	blx	r3
  403948:	e018      	b.n	40397c <dhcp_recv+0x134>
  }
  /* received a DHCP_OFFER in DHCP_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_SELECTING)) {
  40394a:	7dfb      	ldrb	r3, [r7, #23]
  40394c:	2b02      	cmp	r3, #2
  40394e:	d115      	bne.n	40397c <dhcp_recv+0x134>
  403950:	69fb      	ldr	r3, [r7, #28]
  403952:	7b1b      	ldrb	r3, [r3, #12]
  403954:	2b06      	cmp	r3, #6
  403956:	d111      	bne.n	40397c <dhcp_recv+0x134>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_SELECTING state\n"));
    dhcp->request_timeout = 0;
  403958:	69fb      	ldr	r3, [r7, #28]
  40395a:	2200      	movs	r2, #0
  40395c:	835a      	strh	r2, [r3, #26]
    /* remember offered lease */
    dhcp_handle_offer(netif);
  40395e:	6a38      	ldr	r0, [r7, #32]
  403960:	4b13      	ldr	r3, [pc, #76]	; (4039b0 <dhcp_recv+0x168>)
  403962:	4798      	blx	r3
  403964:	e00a      	b.n	40397c <dhcp_recv+0x134>

  LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);

  if (p->len < DHCP_MIN_REPLY_LEN) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  403966:	bf00      	nop
  403968:	e008      	b.n	40397c <dhcp_recv+0x134>
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  40396a:	bf00      	nop
  40396c:	e006      	b.n	40397c <dhcp_recv+0x134>
  for (i = 0; i < netif->hwaddr_len; i++) {
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
        ("netif->hwaddr[%"U16_F"]==%02"X16_F" != reply_msg->chaddr[%"U16_F"]==%02"X16_F"\n",
        (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
  40396e:	bf00      	nop
  403970:	e004      	b.n	40397c <dhcp_recv+0x134>
  }
  /* match transaction ID against what we expected */
  if (ntohl(reply_msg->xid) != dhcp->xid) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n",ntohl(reply_msg->xid),dhcp->xid));
    goto free_pbuf_and_return;
  403972:	bf00      	nop
  403974:	e002      	b.n	40397c <dhcp_recv+0x134>
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(dhcp, p) != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("problem unfolding DHCP message - too short on memory?\n"));
    goto free_pbuf_and_return;
  403976:	bf00      	nop
  403978:	e000      	b.n	40397c <dhcp_recv+0x134>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  40397a:	bf00      	nop
    dhcp->request_timeout = 0;
    /* remember offered lease */
    dhcp_handle_offer(netif);
  }
free_pbuf_and_return:
  dhcp->msg_in = NULL;
  40397c:	69fb      	ldr	r3, [r7, #28]
  40397e:	2200      	movs	r2, #0
  403980:	609a      	str	r2, [r3, #8]
  pbuf_free(p);
  403982:	6878      	ldr	r0, [r7, #4]
  403984:	4b0b      	ldr	r3, [pc, #44]	; (4039b4 <dhcp_recv+0x16c>)
  403986:	4798      	blx	r3
}
  403988:	bf00      	nop
  40398a:	3728      	adds	r7, #40	; 0x28
  40398c:	46bd      	mov	sp, r7
  40398e:	bd80      	pop	{r7, pc}
  403990:	00402389 	.word	0x00402389
  403994:	00403425 	.word	0x00403425
  403998:	20403918 	.word	0x20403918
  40399c:	20403924 	.word	0x20403924
  4039a0:	00402841 	.word	0x00402841
  4039a4:	00402405 	.word	0x00402405
  4039a8:	00402c95 	.word	0x00402c95
  4039ac:	004023a5 	.word	0x004023a5
  4039b0:	0040246d 	.word	0x0040246d
  4039b4:	00406069 	.word	0x00406069

004039b8 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static err_t
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type)
{
  4039b8:	b590      	push	{r4, r7, lr}
  4039ba:	b087      	sub	sp, #28
  4039bc:	af00      	add	r7, sp, #0
  4039be:	60f8      	str	r0, [r7, #12]
  4039c0:	60b9      	str	r1, [r7, #8]
  4039c2:	4613      	mov	r3, r2
  4039c4:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return ERR_ARG;);
  4039c6:	68fb      	ldr	r3, [r7, #12]
  4039c8:	2b00      	cmp	r3, #0
  4039ca:	d100      	bne.n	4039ce <dhcp_create_msg+0x16>
  4039cc:	e7fe      	b.n	4039cc <dhcp_create_msg+0x14>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
  4039ce:	68bb      	ldr	r3, [r7, #8]
  4039d0:	2b00      	cmp	r3, #0
  4039d2:	d100      	bne.n	4039d6 <dhcp_create_msg+0x1e>
  4039d4:	e7fe      	b.n	4039d4 <dhcp_create_msg+0x1c>
  LWIP_ASSERT("dhcp_create_msg: dhcp->p_out == NULL", dhcp->p_out == NULL);
  LWIP_ASSERT("dhcp_create_msg: dhcp->msg_out == NULL", dhcp->msg_out == NULL);
  dhcp->p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
  4039d6:	2200      	movs	r2, #0
  4039d8:	f44f 719a 	mov.w	r1, #308	; 0x134
  4039dc:	2000      	movs	r0, #0
  4039de:	4b7d      	ldr	r3, [pc, #500]	; (403bd4 <dhcp_create_msg+0x21c>)
  4039e0:	4798      	blx	r3
  4039e2:	4602      	mov	r2, r0
  4039e4:	68bb      	ldr	r3, [r7, #8]
  4039e6:	611a      	str	r2, [r3, #16]
  if (dhcp->p_out == NULL) {
  4039e8:	68bb      	ldr	r3, [r7, #8]
  4039ea:	691b      	ldr	r3, [r3, #16]
  4039ec:	2b00      	cmp	r3, #0
  4039ee:	d102      	bne.n	4039f6 <dhcp_create_msg+0x3e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_create_msg(): could not allocate pbuf\n"));
    return ERR_MEM;
  4039f0:	f04f 33ff 	mov.w	r3, #4294967295
  4039f4:	e0e9      	b.n	403bca <dhcp_create_msg+0x212>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
           (dhcp->p_out->len >= sizeof(struct dhcp_msg)));

  /* reuse transaction identifier in retransmissions */
  if (dhcp->tries == 0) {
  4039f6:	68bb      	ldr	r3, [r7, #8]
  4039f8:	7b5b      	ldrb	r3, [r3, #13]
  4039fa:	2b00      	cmp	r3, #0
  4039fc:	d104      	bne.n	403a08 <dhcp_create_msg+0x50>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
    xid = LWIP_RAND();
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    xid++;
  4039fe:	4b76      	ldr	r3, [pc, #472]	; (403bd8 <dhcp_create_msg+0x220>)
  403a00:	681b      	ldr	r3, [r3, #0]
  403a02:	3301      	adds	r3, #1
  403a04:	4a74      	ldr	r2, [pc, #464]	; (403bd8 <dhcp_create_msg+0x220>)
  403a06:	6013      	str	r3, [r2, #0]
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
  }
  dhcp->xid = xid;
  403a08:	4b73      	ldr	r3, [pc, #460]	; (403bd8 <dhcp_create_msg+0x220>)
  403a0a:	681a      	ldr	r2, [r3, #0]
  403a0c:	68bb      	ldr	r3, [r7, #8]
  403a0e:	601a      	str	r2, [r3, #0]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
  403a10:	68bb      	ldr	r3, [r7, #8]
  403a12:	691b      	ldr	r3, [r3, #16]
  403a14:	685a      	ldr	r2, [r3, #4]
  403a16:	68bb      	ldr	r3, [r7, #8]
  403a18:	615a      	str	r2, [r3, #20]

  dhcp->msg_out->op = DHCP_BOOTREQUEST;
  403a1a:	68bb      	ldr	r3, [r7, #8]
  403a1c:	695b      	ldr	r3, [r3, #20]
  403a1e:	2201      	movs	r2, #1
  403a20:	701a      	strb	r2, [r3, #0]
  /* TODO: make link layer independent */
  dhcp->msg_out->htype = DHCP_HTYPE_ETH;
  403a22:	68bb      	ldr	r3, [r7, #8]
  403a24:	695b      	ldr	r3, [r3, #20]
  403a26:	2201      	movs	r2, #1
  403a28:	705a      	strb	r2, [r3, #1]
  dhcp->msg_out->hlen = netif->hwaddr_len;
  403a2a:	68bb      	ldr	r3, [r7, #8]
  403a2c:	695b      	ldr	r3, [r3, #20]
  403a2e:	68fa      	ldr	r2, [r7, #12]
  403a30:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
  403a34:	709a      	strb	r2, [r3, #2]
  dhcp->msg_out->hops = 0;
  403a36:	68bb      	ldr	r3, [r7, #8]
  403a38:	695b      	ldr	r3, [r3, #20]
  403a3a:	2200      	movs	r2, #0
  403a3c:	70da      	strb	r2, [r3, #3]
  dhcp->msg_out->xid = htonl(dhcp->xid);
  403a3e:	68bb      	ldr	r3, [r7, #8]
  403a40:	695c      	ldr	r4, [r3, #20]
  403a42:	68bb      	ldr	r3, [r7, #8]
  403a44:	681b      	ldr	r3, [r3, #0]
  403a46:	4618      	mov	r0, r3
  403a48:	4b64      	ldr	r3, [pc, #400]	; (403bdc <dhcp_create_msg+0x224>)
  403a4a:	4798      	blx	r3
  403a4c:	4603      	mov	r3, r0
  403a4e:	6063      	str	r3, [r4, #4]
  dhcp->msg_out->secs = 0;
  403a50:	68bb      	ldr	r3, [r7, #8]
  403a52:	695b      	ldr	r3, [r3, #20]
  403a54:	2200      	movs	r2, #0
  403a56:	721a      	strb	r2, [r3, #8]
  403a58:	2200      	movs	r2, #0
  403a5a:	725a      	strb	r2, [r3, #9]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  dhcp->msg_out->flags = 0;
  403a5c:	68bb      	ldr	r3, [r7, #8]
  403a5e:	695b      	ldr	r3, [r3, #20]
  403a60:	2200      	movs	r2, #0
  403a62:	729a      	strb	r2, [r3, #10]
  403a64:	2200      	movs	r2, #0
  403a66:	72da      	strb	r2, [r3, #11]
  ip_addr_set_zero(&dhcp->msg_out->ciaddr);
  403a68:	68bb      	ldr	r3, [r7, #8]
  403a6a:	695b      	ldr	r3, [r3, #20]
  403a6c:	2200      	movs	r2, #0
  403a6e:	731a      	strb	r2, [r3, #12]
  403a70:	2200      	movs	r2, #0
  403a72:	735a      	strb	r2, [r3, #13]
  403a74:	2200      	movs	r2, #0
  403a76:	739a      	strb	r2, [r3, #14]
  403a78:	2200      	movs	r2, #0
  403a7a:	73da      	strb	r2, [r3, #15]
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) ||
  403a7c:	79fb      	ldrb	r3, [r7, #7]
  403a7e:	2b08      	cmp	r3, #8
  403a80:	d00d      	beq.n	403a9e <dhcp_create_msg+0xe6>
  403a82:	79fb      	ldrb	r3, [r7, #7]
  403a84:	2b04      	cmp	r3, #4
  403a86:	d00a      	beq.n	403a9e <dhcp_create_msg+0xe6>
  403a88:	79fb      	ldrb	r3, [r7, #7]
  403a8a:	2b03      	cmp	r3, #3
  403a8c:	d10c      	bne.n	403aa8 <dhcp_create_msg+0xf0>
      ((message_type == DHCP_REQUEST) && /* DHCP_BOUND not used for sending! */
       ((dhcp->state==DHCP_RENEWING) || dhcp->state==DHCP_REBINDING))) {
  403a8e:	68bb      	ldr	r3, [r7, #8]
  403a90:	7b1b      	ldrb	r3, [r3, #12]
     before being fully configured! */
  dhcp->msg_out->flags = 0;
  ip_addr_set_zero(&dhcp->msg_out->ciaddr);
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) ||
      ((message_type == DHCP_REQUEST) && /* DHCP_BOUND not used for sending! */
  403a92:	2b05      	cmp	r3, #5
  403a94:	d003      	beq.n	403a9e <dhcp_create_msg+0xe6>
       ((dhcp->state==DHCP_RENEWING) || dhcp->state==DHCP_REBINDING))) {
  403a96:	68bb      	ldr	r3, [r7, #8]
  403a98:	7b1b      	ldrb	r3, [r3, #12]
  403a9a:	2b04      	cmp	r3, #4
  403a9c:	d104      	bne.n	403aa8 <dhcp_create_msg+0xf0>
    ip_addr_copy(dhcp->msg_out->ciaddr, netif->ip_addr);
  403a9e:	68bb      	ldr	r3, [r7, #8]
  403aa0:	695b      	ldr	r3, [r3, #20]
  403aa2:	68fa      	ldr	r2, [r7, #12]
  403aa4:	6852      	ldr	r2, [r2, #4]
  403aa6:	60da      	str	r2, [r3, #12]
  }
  ip_addr_set_zero(&dhcp->msg_out->yiaddr);
  403aa8:	68bb      	ldr	r3, [r7, #8]
  403aaa:	695b      	ldr	r3, [r3, #20]
  403aac:	2200      	movs	r2, #0
  403aae:	741a      	strb	r2, [r3, #16]
  403ab0:	2200      	movs	r2, #0
  403ab2:	745a      	strb	r2, [r3, #17]
  403ab4:	2200      	movs	r2, #0
  403ab6:	749a      	strb	r2, [r3, #18]
  403ab8:	2200      	movs	r2, #0
  403aba:	74da      	strb	r2, [r3, #19]
  ip_addr_set_zero(&dhcp->msg_out->siaddr);
  403abc:	68bb      	ldr	r3, [r7, #8]
  403abe:	695b      	ldr	r3, [r3, #20]
  403ac0:	2200      	movs	r2, #0
  403ac2:	751a      	strb	r2, [r3, #20]
  403ac4:	2200      	movs	r2, #0
  403ac6:	755a      	strb	r2, [r3, #21]
  403ac8:	2200      	movs	r2, #0
  403aca:	759a      	strb	r2, [r3, #22]
  403acc:	2200      	movs	r2, #0
  403ace:	75da      	strb	r2, [r3, #23]
  ip_addr_set_zero(&dhcp->msg_out->giaddr);
  403ad0:	68bb      	ldr	r3, [r7, #8]
  403ad2:	695b      	ldr	r3, [r3, #20]
  403ad4:	2200      	movs	r2, #0
  403ad6:	761a      	strb	r2, [r3, #24]
  403ad8:	2200      	movs	r2, #0
  403ada:	765a      	strb	r2, [r3, #25]
  403adc:	2200      	movs	r2, #0
  403ade:	769a      	strb	r2, [r3, #26]
  403ae0:	2200      	movs	r2, #0
  403ae2:	76da      	strb	r2, [r3, #27]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
  403ae4:	2300      	movs	r3, #0
  403ae6:	82fb      	strh	r3, [r7, #22]
  403ae8:	e016      	b.n	403b18 <dhcp_create_msg+0x160>
    /* copy netif hardware address, pad with zeroes */
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len) ? netif->hwaddr[i] : 0/* pad byte*/;
  403aea:	68bb      	ldr	r3, [r7, #8]
  403aec:	695a      	ldr	r2, [r3, #20]
  403aee:	8afb      	ldrh	r3, [r7, #22]
  403af0:	68f9      	ldr	r1, [r7, #12]
  403af2:	f891 102a 	ldrb.w	r1, [r1, #42]	; 0x2a
  403af6:	b289      	uxth	r1, r1
  403af8:	8af8      	ldrh	r0, [r7, #22]
  403afa:	4288      	cmp	r0, r1
  403afc:	d205      	bcs.n	403b0a <dhcp_create_msg+0x152>
  403afe:	8af9      	ldrh	r1, [r7, #22]
  403b00:	68f8      	ldr	r0, [r7, #12]
  403b02:	4401      	add	r1, r0
  403b04:	f891 102b 	ldrb.w	r1, [r1, #43]	; 0x2b
  403b08:	e000      	b.n	403b0c <dhcp_create_msg+0x154>
  403b0a:	2100      	movs	r1, #0
  403b0c:	4413      	add	r3, r2
  403b0e:	460a      	mov	r2, r1
  403b10:	771a      	strb	r2, [r3, #28]
    ip_addr_copy(dhcp->msg_out->ciaddr, netif->ip_addr);
  }
  ip_addr_set_zero(&dhcp->msg_out->yiaddr);
  ip_addr_set_zero(&dhcp->msg_out->siaddr);
  ip_addr_set_zero(&dhcp->msg_out->giaddr);
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
  403b12:	8afb      	ldrh	r3, [r7, #22]
  403b14:	3301      	adds	r3, #1
  403b16:	82fb      	strh	r3, [r7, #22]
  403b18:	8afb      	ldrh	r3, [r7, #22]
  403b1a:	2b0f      	cmp	r3, #15
  403b1c:	d9e5      	bls.n	403aea <dhcp_create_msg+0x132>
    /* copy netif hardware address, pad with zeroes */
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len) ? netif->hwaddr[i] : 0/* pad byte*/;
  }
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
  403b1e:	2300      	movs	r3, #0
  403b20:	82fb      	strh	r3, [r7, #22]
  403b22:	e009      	b.n	403b38 <dhcp_create_msg+0x180>
    dhcp->msg_out->sname[i] = 0;
  403b24:	68bb      	ldr	r3, [r7, #8]
  403b26:	695a      	ldr	r2, [r3, #20]
  403b28:	8afb      	ldrh	r3, [r7, #22]
  403b2a:	4413      	add	r3, r2
  403b2c:	2200      	movs	r2, #0
  403b2e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  ip_addr_set_zero(&dhcp->msg_out->giaddr);
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
    /* copy netif hardware address, pad with zeroes */
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len) ? netif->hwaddr[i] : 0/* pad byte*/;
  }
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
  403b32:	8afb      	ldrh	r3, [r7, #22]
  403b34:	3301      	adds	r3, #1
  403b36:	82fb      	strh	r3, [r7, #22]
  403b38:	8afb      	ldrh	r3, [r7, #22]
  403b3a:	2b3f      	cmp	r3, #63	; 0x3f
  403b3c:	d9f2      	bls.n	403b24 <dhcp_create_msg+0x16c>
    dhcp->msg_out->sname[i] = 0;
  }
  for (i = 0; i < DHCP_FILE_LEN; i++) {
  403b3e:	2300      	movs	r3, #0
  403b40:	82fb      	strh	r3, [r7, #22]
  403b42:	e009      	b.n	403b58 <dhcp_create_msg+0x1a0>
    dhcp->msg_out->file[i] = 0;
  403b44:	68bb      	ldr	r3, [r7, #8]
  403b46:	695a      	ldr	r2, [r3, #20]
  403b48:	8afb      	ldrh	r3, [r7, #22]
  403b4a:	4413      	add	r3, r2
  403b4c:	2200      	movs	r2, #0
  403b4e:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len) ? netif->hwaddr[i] : 0/* pad byte*/;
  }
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
    dhcp->msg_out->sname[i] = 0;
  }
  for (i = 0; i < DHCP_FILE_LEN; i++) {
  403b52:	8afb      	ldrh	r3, [r7, #22]
  403b54:	3301      	adds	r3, #1
  403b56:	82fb      	strh	r3, [r7, #22]
  403b58:	8afb      	ldrh	r3, [r7, #22]
  403b5a:	2b7f      	cmp	r3, #127	; 0x7f
  403b5c:	d9f2      	bls.n	403b44 <dhcp_create_msg+0x18c>
    dhcp->msg_out->file[i] = 0;
  }
  dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
  403b5e:	68bb      	ldr	r3, [r7, #8]
  403b60:	695b      	ldr	r3, [r3, #20]
  403b62:	2200      	movs	r2, #0
  403b64:	f042 0263 	orr.w	r2, r2, #99	; 0x63
  403b68:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
  403b6c:	2200      	movs	r2, #0
  403b6e:	f062 027d 	orn	r2, r2, #125	; 0x7d
  403b72:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
  403b76:	2200      	movs	r2, #0
  403b78:	f042 0253 	orr.w	r2, r2, #83	; 0x53
  403b7c:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
  403b80:	2200      	movs	r2, #0
  403b82:	f042 0263 	orr.w	r2, r2, #99	; 0x63
  403b86:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  dhcp->options_out_len = 0;
  403b8a:	68bb      	ldr	r3, [r7, #8]
  403b8c:	2200      	movs	r2, #0
  403b8e:	831a      	strh	r2, [r3, #24]
  /* fill options field with an incrementing array (for debugging purposes) */
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
  403b90:	2300      	movs	r3, #0
  403b92:	82fb      	strh	r3, [r7, #22]
  403b94:	e00b      	b.n	403bae <dhcp_create_msg+0x1f6>
    dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
  403b96:	68bb      	ldr	r3, [r7, #8]
  403b98:	695a      	ldr	r2, [r3, #20]
  403b9a:	8afb      	ldrh	r3, [r7, #22]
  403b9c:	8af9      	ldrh	r1, [r7, #22]
  403b9e:	b2c9      	uxtb	r1, r1
  403ba0:	4413      	add	r3, r2
  403ba2:	460a      	mov	r2, r1
  403ba4:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
    dhcp->msg_out->file[i] = 0;
  }
  dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
  dhcp->options_out_len = 0;
  /* fill options field with an incrementing array (for debugging purposes) */
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
  403ba8:	8afb      	ldrh	r3, [r7, #22]
  403baa:	3301      	adds	r3, #1
  403bac:	82fb      	strh	r3, [r7, #22]
  403bae:	8afb      	ldrh	r3, [r7, #22]
  403bb0:	2b43      	cmp	r3, #67	; 0x43
  403bb2:	d9f0      	bls.n	403b96 <dhcp_create_msg+0x1de>
    dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
  }
  /* Add option MESSAGE_TYPE */
  dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
  403bb4:	2201      	movs	r2, #1
  403bb6:	2135      	movs	r1, #53	; 0x35
  403bb8:	68b8      	ldr	r0, [r7, #8]
  403bba:	4b09      	ldr	r3, [pc, #36]	; (403be0 <dhcp_create_msg+0x228>)
  403bbc:	4798      	blx	r3
  dhcp_option_byte(dhcp, message_type);
  403bbe:	79fb      	ldrb	r3, [r7, #7]
  403bc0:	4619      	mov	r1, r3
  403bc2:	68b8      	ldr	r0, [r7, #8]
  403bc4:	4b07      	ldr	r3, [pc, #28]	; (403be4 <dhcp_create_msg+0x22c>)
  403bc6:	4798      	blx	r3
  return ERR_OK;
  403bc8:	2300      	movs	r3, #0
}
  403bca:	4618      	mov	r0, r3
  403bcc:	371c      	adds	r7, #28
  403bce:	46bd      	mov	sp, r7
  403bd0:	bd90      	pop	{r4, r7, pc}
  403bd2:	bf00      	nop
  403bd4:	00405cc5 	.word	0x00405cc5
  403bd8:	20400008 	.word	0x20400008
  403bdc:	00402355 	.word	0x00402355
  403be0:	004032bd 	.word	0x004032bd
  403be4:	00403309 	.word	0x00403309

00403be8 <dhcp_delete_msg>:
 *
 * @param dhcp the dhcp struct to free the request from
 */
static void
dhcp_delete_msg(struct dhcp *dhcp)
{
  403be8:	b580      	push	{r7, lr}
  403bea:	b082      	sub	sp, #8
  403bec:	af00      	add	r7, sp, #0
  403bee:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
  403bf0:	687b      	ldr	r3, [r7, #4]
  403bf2:	2b00      	cmp	r3, #0
  403bf4:	d100      	bne.n	403bf8 <dhcp_delete_msg+0x10>
  403bf6:	e7fe      	b.n	403bf6 <dhcp_delete_msg+0xe>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->p_out != NULL", dhcp->p_out != NULL);
  LWIP_ASSERT("dhcp_delete_msg: dhcp->msg_out != NULL", dhcp->msg_out != NULL);
  if (dhcp->p_out != NULL) {
  403bf8:	687b      	ldr	r3, [r7, #4]
  403bfa:	691b      	ldr	r3, [r3, #16]
  403bfc:	2b00      	cmp	r3, #0
  403bfe:	d004      	beq.n	403c0a <dhcp_delete_msg+0x22>
    pbuf_free(dhcp->p_out);
  403c00:	687b      	ldr	r3, [r7, #4]
  403c02:	691b      	ldr	r3, [r3, #16]
  403c04:	4618      	mov	r0, r3
  403c06:	4b06      	ldr	r3, [pc, #24]	; (403c20 <dhcp_delete_msg+0x38>)
  403c08:	4798      	blx	r3
  }
  dhcp->p_out = NULL;
  403c0a:	687b      	ldr	r3, [r7, #4]
  403c0c:	2200      	movs	r2, #0
  403c0e:	611a      	str	r2, [r3, #16]
  dhcp->msg_out = NULL;
  403c10:	687b      	ldr	r3, [r7, #4]
  403c12:	2200      	movs	r2, #0
  403c14:	615a      	str	r2, [r3, #20]
}
  403c16:	bf00      	nop
  403c18:	3708      	adds	r7, #8
  403c1a:	46bd      	mov	sp, r7
  403c1c:	bd80      	pop	{r7, pc}
  403c1e:	bf00      	nop
  403c20:	00406069 	.word	0x00406069

00403c24 <dhcp_option_trailer>:
 *
 * @param dhcp DHCP state structure
 */
static void
dhcp_option_trailer(struct dhcp *dhcp)
{
  403c24:	b480      	push	{r7}
  403c26:	b083      	sub	sp, #12
  403c28:	af00      	add	r7, sp, #0
  403c2a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
  403c2c:	687b      	ldr	r3, [r7, #4]
  403c2e:	2b00      	cmp	r3, #0
  403c30:	d100      	bne.n	403c34 <dhcp_option_trailer+0x10>
  403c32:	e7fe      	b.n	403c32 <dhcp_option_trailer+0xe>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
  403c34:	687b      	ldr	r3, [r7, #4]
  403c36:	695a      	ldr	r2, [r3, #20]
  403c38:	687b      	ldr	r3, [r7, #4]
  403c3a:	8b1b      	ldrh	r3, [r3, #24]
  403c3c:	1c59      	adds	r1, r3, #1
  403c3e:	b288      	uxth	r0, r1
  403c40:	6879      	ldr	r1, [r7, #4]
  403c42:	8308      	strh	r0, [r1, #24]
  403c44:	4413      	add	r3, r2
  403c46:	22ff      	movs	r2, #255	; 0xff
  403c48:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  /* packet is too small, or not 4 byte aligned? */
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
  403c4c:	e00b      	b.n	403c66 <dhcp_option_trailer+0x42>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
  403c4e:	687b      	ldr	r3, [r7, #4]
  403c50:	695a      	ldr	r2, [r3, #20]
  403c52:	687b      	ldr	r3, [r7, #4]
  403c54:	8b1b      	ldrh	r3, [r3, #24]
  403c56:	1c59      	adds	r1, r3, #1
  403c58:	b288      	uxth	r0, r1
  403c5a:	6879      	ldr	r1, [r7, #4]
  403c5c:	8308      	strh	r0, [r1, #24]
  403c5e:	4413      	add	r3, r2
  403c60:	2200      	movs	r2, #0
  403c62:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
  /* packet is too small, or not 4 byte aligned? */
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
  403c66:	687b      	ldr	r3, [r7, #4]
  403c68:	8b1b      	ldrh	r3, [r3, #24]
  403c6a:	2b43      	cmp	r3, #67	; 0x43
  403c6c:	d905      	bls.n	403c7a <dhcp_option_trailer+0x56>
  403c6e:	687b      	ldr	r3, [r7, #4]
  403c70:	8b1b      	ldrh	r3, [r3, #24]
  403c72:	f003 0303 	and.w	r3, r3, #3
  403c76:	2b00      	cmp	r3, #0
  403c78:	d003      	beq.n	403c82 <dhcp_option_trailer+0x5e>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
  403c7a:	687b      	ldr	r3, [r7, #4]
  403c7c:	8b1b      	ldrh	r3, [r3, #24]
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
  /* packet is too small, or not 4 byte aligned? */
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
  403c7e:	2b43      	cmp	r3, #67	; 0x43
  403c80:	d9e5      	bls.n	403c4e <dhcp_option_trailer+0x2a>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
  }
}
  403c82:	bf00      	nop
  403c84:	370c      	adds	r7, #12
  403c86:	46bd      	mov	sp, r7
  403c88:	f85d 7b04 	ldr.w	r7, [sp], #4
  403c8c:	4770      	bx	lr
  403c8e:	bf00      	nop

00403c90 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the ip header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
  403c90:	b590      	push	{r4, r7, lr}
  403c92:	b08d      	sub	sp, #52	; 0x34
  403c94:	af04      	add	r7, sp, #16
  403c96:	6078      	str	r0, [r7, #4]
  403c98:	6039      	str	r1, [r7, #0]

  ICMP_STATS_INC(icmp.recv);
  snmp_inc_icmpinmsgs();


  iphdr = (struct ip_hdr *)p->payload;
  403c9a:	687b      	ldr	r3, [r7, #4]
  403c9c:	685b      	ldr	r3, [r3, #4]
  403c9e:	61fb      	str	r3, [r7, #28]
  hlen = IPH_HL(iphdr) * 4;
  403ca0:	69fb      	ldr	r3, [r7, #28]
  403ca2:	781b      	ldrb	r3, [r3, #0]
  403ca4:	b29b      	uxth	r3, r3
  403ca6:	f003 030f 	and.w	r3, r3, #15
  403caa:	b29b      	uxth	r3, r3
  403cac:	009b      	lsls	r3, r3, #2
  403cae:	b29b      	uxth	r3, r3
  403cb0:	82fb      	strh	r3, [r7, #22]
  if (pbuf_header(p, -hlen) || (p->tot_len < sizeof(u16_t)*2)) {
  403cb2:	8afb      	ldrh	r3, [r7, #22]
  403cb4:	425b      	negs	r3, r3
  403cb6:	b29b      	uxth	r3, r3
  403cb8:	b21b      	sxth	r3, r3
  403cba:	4619      	mov	r1, r3
  403cbc:	6878      	ldr	r0, [r7, #4]
  403cbe:	4b74      	ldr	r3, [pc, #464]	; (403e90 <icmp_input+0x200>)
  403cc0:	4798      	blx	r3
  403cc2:	4603      	mov	r3, r0
  403cc4:	2b00      	cmp	r3, #0
  403cc6:	f040 80ce 	bne.w	403e66 <icmp_input+0x1d6>
  403cca:	687b      	ldr	r3, [r7, #4]
  403ccc:	891b      	ldrh	r3, [r3, #8]
  403cce:	2b03      	cmp	r3, #3
  403cd0:	f240 80c9 	bls.w	403e66 <icmp_input+0x1d6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
  403cd4:	687b      	ldr	r3, [r7, #4]
  403cd6:	685b      	ldr	r3, [r3, #4]
  403cd8:	781b      	ldrb	r3, [r3, #0]
  403cda:	757b      	strb	r3, [r7, #21]
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
  403cdc:	7d7b      	ldrb	r3, [r7, #21]
  403cde:	2b00      	cmp	r3, #0
  403ce0:	f000 80b9 	beq.w	403e56 <icmp_input+0x1c6>
  403ce4:	2b08      	cmp	r3, #8
  403ce6:	f040 80b9 	bne.w	403e5c <icmp_input+0x1cc>
       (as obviously, an echo request has been sent, too). */
    break; 
  case ICMP_ECHO:
#if !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
    {
      int accepted = 1;
  403cea:	2301      	movs	r3, #1
  403cec:	61bb      	str	r3, [r7, #24]
#if !LWIP_MULTICAST_PING
      /* multicast destination address? */
      if (ip_addr_ismulticast(&current_iphdr_dest)) {
  403cee:	4b69      	ldr	r3, [pc, #420]	; (403e94 <icmp_input+0x204>)
  403cf0:	681b      	ldr	r3, [r3, #0]
  403cf2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  403cf6:	2be0      	cmp	r3, #224	; 0xe0
  403cf8:	d101      	bne.n	403cfe <icmp_input+0x6e>
        accepted = 0;
  403cfa:	2300      	movs	r3, #0
  403cfc:	61bb      	str	r3, [r7, #24]
      }
#endif /* LWIP_MULTICAST_PING */
#if !LWIP_BROADCAST_PING
      /* broadcast destination address? */
      if (ip_addr_isbroadcast(&current_iphdr_dest, inp)) {
  403cfe:	4b65      	ldr	r3, [pc, #404]	; (403e94 <icmp_input+0x204>)
  403d00:	681b      	ldr	r3, [r3, #0]
  403d02:	6839      	ldr	r1, [r7, #0]
  403d04:	4618      	mov	r0, r3
  403d06:	4b64      	ldr	r3, [pc, #400]	; (403e98 <icmp_input+0x208>)
  403d08:	4798      	blx	r3
  403d0a:	4603      	mov	r3, r0
  403d0c:	2b00      	cmp	r3, #0
  403d0e:	d001      	beq.n	403d14 <icmp_input+0x84>
        accepted = 0;
  403d10:	2300      	movs	r3, #0
  403d12:	61bb      	str	r3, [r7, #24]
      }
#endif /* LWIP_BROADCAST_PING */
      /* broadcast or multicast destination address not acceptd? */
      if (!accepted) {
  403d14:	69bb      	ldr	r3, [r7, #24]
  403d16:	2b00      	cmp	r3, #0
  403d18:	d103      	bne.n	403d22 <icmp_input+0x92>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast or broadcast pings\n"));
        ICMP_STATS_INC(icmp.err);
        pbuf_free(p);
  403d1a:	6878      	ldr	r0, [r7, #4]
  403d1c:	4b5f      	ldr	r3, [pc, #380]	; (403e9c <icmp_input+0x20c>)
  403d1e:	4798      	blx	r3
        return;
  403d20:	e0b2      	b.n	403e88 <icmp_input+0x1f8>
      }
    }
#endif /* !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
  403d22:	687b      	ldr	r3, [r7, #4]
  403d24:	891b      	ldrh	r3, [r3, #8]
  403d26:	2b07      	cmp	r3, #7
  403d28:	f240 809c 	bls.w	403e64 <icmp_input+0x1d4>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
      goto lenerr;
    }
    if (inet_chksum_pbuf(p) != 0) {
  403d2c:	6878      	ldr	r0, [r7, #4]
  403d2e:	4b5c      	ldr	r3, [pc, #368]	; (403ea0 <icmp_input+0x210>)
  403d30:	4798      	blx	r3
  403d32:	4603      	mov	r3, r0
  403d34:	2b00      	cmp	r3, #0
  403d36:	d003      	beq.n	403d40 <icmp_input+0xb0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
      pbuf_free(p);
  403d38:	6878      	ldr	r0, [r7, #4]
  403d3a:	4b58      	ldr	r3, [pc, #352]	; (403e9c <icmp_input+0x20c>)
  403d3c:	4798      	blx	r3
      ICMP_STATS_INC(icmp.chkerr);
      snmp_inc_icmpinerrors();
      return;
  403d3e:	e0a3      	b.n	403e88 <icmp_input+0x1f8>
    }
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (PBUF_IP_HLEN + PBUF_LINK_HLEN))) {
  403d40:	2122      	movs	r1, #34	; 0x22
  403d42:	6878      	ldr	r0, [r7, #4]
  403d44:	4b52      	ldr	r3, [pc, #328]	; (403e90 <icmp_input+0x200>)
  403d46:	4798      	blx	r3
  403d48:	4603      	mov	r3, r0
  403d4a:	2b00      	cmp	r3, #0
  403d4c:	d02f      	beq.n	403dae <icmp_input+0x11e>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* switch p->payload to ip header */
      if (pbuf_header(p, hlen)) {
  403d4e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
  403d52:	4619      	mov	r1, r3
  403d54:	6878      	ldr	r0, [r7, #4]
  403d56:	4b4e      	ldr	r3, [pc, #312]	; (403e90 <icmp_input+0x200>)
  403d58:	4798      	blx	r3
  403d5a:	4603      	mov	r3, r0
  403d5c:	2b00      	cmp	r3, #0
  403d5e:	f040 8086 	bne.w	403e6e <icmp_input+0x1de>
        LWIP_ASSERT("icmp_input: moving p->payload to ip header failed\n", 0);
        goto memerr;
      }
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
  403d62:	687b      	ldr	r3, [r7, #4]
  403d64:	891b      	ldrh	r3, [r3, #8]
  403d66:	2200      	movs	r2, #0
  403d68:	4619      	mov	r1, r3
  403d6a:	2002      	movs	r0, #2
  403d6c:	4b4d      	ldr	r3, [pc, #308]	; (403ea4 <icmp_input+0x214>)
  403d6e:	4798      	blx	r3
  403d70:	6138      	str	r0, [r7, #16]
      if (r == NULL) {
  403d72:	693b      	ldr	r3, [r7, #16]
  403d74:	2b00      	cmp	r3, #0
  403d76:	d07c      	beq.n	403e72 <icmp_input+0x1e2>
        goto memerr;
      }
      LWIP_ASSERT("check that first pbuf can hold struct the ICMP header",
                  (r->len >= hlen + sizeof(struct icmp_echo_hdr)));
      /* copy the whole packet including ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
  403d78:	6879      	ldr	r1, [r7, #4]
  403d7a:	6938      	ldr	r0, [r7, #16]
  403d7c:	4b4a      	ldr	r3, [pc, #296]	; (403ea8 <icmp_input+0x218>)
  403d7e:	4798      	blx	r3
  403d80:	4603      	mov	r3, r0
  403d82:	2b00      	cmp	r3, #0
  403d84:	d177      	bne.n	403e76 <icmp_input+0x1e6>
        LWIP_ASSERT("icmp_input: copying to new pbuf failed\n", 0);
        goto memerr;
      }
      iphdr = (struct ip_hdr *)r->payload;
  403d86:	693b      	ldr	r3, [r7, #16]
  403d88:	685b      	ldr	r3, [r3, #4]
  403d8a:	61fb      	str	r3, [r7, #28]
      /* switch r->payload back to icmp header */
      if (pbuf_header(r, -hlen)) {
  403d8c:	8afb      	ldrh	r3, [r7, #22]
  403d8e:	425b      	negs	r3, r3
  403d90:	b29b      	uxth	r3, r3
  403d92:	b21b      	sxth	r3, r3
  403d94:	4619      	mov	r1, r3
  403d96:	6938      	ldr	r0, [r7, #16]
  403d98:	4b3d      	ldr	r3, [pc, #244]	; (403e90 <icmp_input+0x200>)
  403d9a:	4798      	blx	r3
  403d9c:	4603      	mov	r3, r0
  403d9e:	2b00      	cmp	r3, #0
  403da0:	d16b      	bne.n	403e7a <icmp_input+0x1ea>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
        goto memerr;
      }
      /* free the original p */
      pbuf_free(p);
  403da2:	6878      	ldr	r0, [r7, #4]
  403da4:	4b3d      	ldr	r3, [pc, #244]	; (403e9c <icmp_input+0x20c>)
  403da6:	4798      	blx	r3
      /* we now have an identical copy of p that has room for link headers */
      p = r;
  403da8:	693b      	ldr	r3, [r7, #16]
  403daa:	607b      	str	r3, [r7, #4]
  403dac:	e007      	b.n	403dbe <icmp_input+0x12e>
    } else {
      /* restore p->payload to point to icmp header */
      if (pbuf_header(p, -(s16_t)(PBUF_IP_HLEN + PBUF_LINK_HLEN))) {
  403dae:	f06f 0121 	mvn.w	r1, #33	; 0x21
  403db2:	6878      	ldr	r0, [r7, #4]
  403db4:	4b36      	ldr	r3, [pc, #216]	; (403e90 <icmp_input+0x200>)
  403db6:	4798      	blx	r3
  403db8:	4603      	mov	r3, r0
  403dba:	2b00      	cmp	r3, #0
  403dbc:	d15f      	bne.n	403e7e <icmp_input+0x1ee>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
  403dbe:	687b      	ldr	r3, [r7, #4]
  403dc0:	685b      	ldr	r3, [r3, #4]
  403dc2:	60fb      	str	r3, [r7, #12]
    ip_addr_copy(iphdr->src, *ip_current_dest_addr());
  403dc4:	4b33      	ldr	r3, [pc, #204]	; (403e94 <icmp_input+0x204>)
  403dc6:	681a      	ldr	r2, [r3, #0]
  403dc8:	69fb      	ldr	r3, [r7, #28]
  403dca:	60da      	str	r2, [r3, #12]
    ip_addr_copy(iphdr->dest, *ip_current_src_addr());
  403dcc:	4b37      	ldr	r3, [pc, #220]	; (403eac <icmp_input+0x21c>)
  403dce:	681a      	ldr	r2, [r3, #0]
  403dd0:	69fb      	ldr	r3, [r7, #28]
  403dd2:	611a      	str	r2, [r3, #16]
    ICMPH_TYPE_SET(iecho, ICMP_ER);
  403dd4:	68fb      	ldr	r3, [r7, #12]
  403dd6:	2200      	movs	r2, #0
  403dd8:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
    /* adjust the checksum */
    if (iecho->chksum >= PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
  403dda:	68fb      	ldr	r3, [r7, #12]
  403ddc:	885b      	ldrh	r3, [r3, #2]
  403dde:	b29b      	uxth	r3, r3
  403de0:	f64f 72f6 	movw	r2, #65526	; 0xfff6
  403de4:	4293      	cmp	r3, r2
  403de6:	d907      	bls.n	403df8 <icmp_input+0x168>
      iecho->chksum += PP_HTONS(ICMP_ECHO << 8) + 1;
  403de8:	68fb      	ldr	r3, [r7, #12]
  403dea:	885b      	ldrh	r3, [r3, #2]
  403dec:	b29b      	uxth	r3, r3
  403dee:	3309      	adds	r3, #9
  403df0:	b29a      	uxth	r2, r3
  403df2:	68fb      	ldr	r3, [r7, #12]
  403df4:	805a      	strh	r2, [r3, #2]
  403df6:	e006      	b.n	403e06 <icmp_input+0x176>
    } else {
      iecho->chksum += PP_HTONS(ICMP_ECHO << 8);
  403df8:	68fb      	ldr	r3, [r7, #12]
  403dfa:	885b      	ldrh	r3, [r3, #2]
  403dfc:	b29b      	uxth	r3, r3
  403dfe:	3308      	adds	r3, #8
  403e00:	b29a      	uxth	r2, r3
  403e02:	68fb      	ldr	r3, [r7, #12]
  403e04:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
    iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

    /* Set the correct TTL and recalculate the header checksum. */
    IPH_TTL_SET(iphdr, ICMP_TTL);
  403e06:	69fb      	ldr	r3, [r7, #28]
  403e08:	22ff      	movs	r2, #255	; 0xff
  403e0a:	721a      	strb	r2, [r3, #8]
    IPH_CHKSUM_SET(iphdr, 0);
  403e0c:	69fb      	ldr	r3, [r7, #28]
  403e0e:	2200      	movs	r2, #0
  403e10:	729a      	strb	r2, [r3, #10]
  403e12:	2200      	movs	r2, #0
  403e14:	72da      	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
    IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
  403e16:	2114      	movs	r1, #20
  403e18:	69f8      	ldr	r0, [r7, #28]
  403e1a:	4b25      	ldr	r3, [pc, #148]	; (403eb0 <icmp_input+0x220>)
  403e1c:	4798      	blx	r3
  403e1e:	4603      	mov	r3, r0
  403e20:	461a      	mov	r2, r3
  403e22:	69fb      	ldr	r3, [r7, #28]
  403e24:	815a      	strh	r2, [r3, #10]
    /* increase number of messages attempted to send */
    snmp_inc_icmpoutmsgs();
    /* increase number of echo replies attempted to send */
    snmp_inc_icmpoutechoreps();

    if(pbuf_header(p, hlen)) {
  403e26:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
  403e2a:	4619      	mov	r1, r3
  403e2c:	6878      	ldr	r0, [r7, #4]
  403e2e:	4b18      	ldr	r3, [pc, #96]	; (403e90 <icmp_input+0x200>)
  403e30:	4798      	blx	r3
  403e32:	4603      	mov	r3, r0
  403e34:	2b00      	cmp	r3, #0
  403e36:	d110      	bne.n	403e5a <icmp_input+0x1ca>
      LWIP_ASSERT("Can't move over header in packet", 0);
    } else {
      err_t ret;
      /* send an ICMP packet, src addr is the dest addr of the curren packet */
      ret = ip_output_if(p, ip_current_dest_addr(), IP_HDRINCL,
  403e38:	683b      	ldr	r3, [r7, #0]
  403e3a:	9302      	str	r3, [sp, #8]
  403e3c:	2301      	movs	r3, #1
  403e3e:	9301      	str	r3, [sp, #4]
  403e40:	2300      	movs	r3, #0
  403e42:	9300      	str	r3, [sp, #0]
  403e44:	23ff      	movs	r3, #255	; 0xff
  403e46:	2200      	movs	r2, #0
  403e48:	4912      	ldr	r1, [pc, #72]	; (403e94 <icmp_input+0x204>)
  403e4a:	6878      	ldr	r0, [r7, #4]
  403e4c:	4c19      	ldr	r4, [pc, #100]	; (403eb4 <icmp_input+0x224>)
  403e4e:	47a0      	blx	r4
  403e50:	4603      	mov	r3, r0
  403e52:	72fb      	strb	r3, [r7, #11]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %c.\n", ret));
      }
    }
    break;
  403e54:	e001      	b.n	403e5a <icmp_input+0x1ca>
#endif /* LWIP_DEBUG */
  switch (type) {
  case ICMP_ER:
    /* This is OK, echo reply might have been parsed by a raw PCB
       (as obviously, an echo request has been sent, too). */
    break; 
  403e56:	bf00      	nop
  403e58:	e000      	b.n	403e5c <icmp_input+0x1cc>
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %c.\n", ret));
      }
    }
    break;
  403e5a:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n", 
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
  403e5c:	6878      	ldr	r0, [r7, #4]
  403e5e:	4b0f      	ldr	r3, [pc, #60]	; (403e9c <icmp_input+0x20c>)
  403e60:	4798      	blx	r3
  return;
  403e62:	e011      	b.n	403e88 <icmp_input+0x1f8>
    }
#endif /* !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
      goto lenerr;
  403e64:	bf00      	nop
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
  return;
lenerr:
  pbuf_free(p);
  403e66:	6878      	ldr	r0, [r7, #4]
  403e68:	4b0c      	ldr	r3, [pc, #48]	; (403e9c <icmp_input+0x20c>)
  403e6a:	4798      	blx	r3
  ICMP_STATS_INC(icmp.lenerr);
  snmp_inc_icmpinerrors();
  return;
  403e6c:	e00c      	b.n	403e88 <icmp_input+0x1f8>
       */
      struct pbuf *r;
      /* switch p->payload to ip header */
      if (pbuf_header(p, hlen)) {
        LWIP_ASSERT("icmp_input: moving p->payload to ip header failed\n", 0);
        goto memerr;
  403e6e:	bf00      	nop
  403e70:	e006      	b.n	403e80 <icmp_input+0x1f0>
      }
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
      if (r == NULL) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto memerr;
  403e72:	bf00      	nop
  403e74:	e004      	b.n	403e80 <icmp_input+0x1f0>
      LWIP_ASSERT("check that first pbuf can hold struct the ICMP header",
                  (r->len >= hlen + sizeof(struct icmp_echo_hdr)));
      /* copy the whole packet including ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
        LWIP_ASSERT("icmp_input: copying to new pbuf failed\n", 0);
        goto memerr;
  403e76:	bf00      	nop
  403e78:	e002      	b.n	403e80 <icmp_input+0x1f0>
      }
      iphdr = (struct ip_hdr *)r->payload;
      /* switch r->payload back to icmp header */
      if (pbuf_header(r, -hlen)) {
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
        goto memerr;
  403e7a:	bf00      	nop
  403e7c:	e000      	b.n	403e80 <icmp_input+0x1f0>
      p = r;
    } else {
      /* restore p->payload to point to icmp header */
      if (pbuf_header(p, -(s16_t)(PBUF_IP_HLEN + PBUF_LINK_HLEN))) {
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
        goto memerr;
  403e7e:	bf00      	nop
  ICMP_STATS_INC(icmp.lenerr);
  snmp_inc_icmpinerrors();
  return;
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
memerr:
  pbuf_free(p);
  403e80:	6878      	ldr	r0, [r7, #4]
  403e82:	4b06      	ldr	r3, [pc, #24]	; (403e9c <icmp_input+0x20c>)
  403e84:	4798      	blx	r3
  ICMP_STATS_INC(icmp.err);
  snmp_inc_icmpinerrors();
  return;
  403e86:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
}
  403e88:	3724      	adds	r7, #36	; 0x24
  403e8a:	46bd      	mov	sp, r7
  403e8c:	bd90      	pop	{r4, r7, pc}
  403e8e:	bf00      	nop
  403e90:	00405f8d 	.word	0x00405f8d
  403e94:	20403954 	.word	0x20403954
  403e98:	00404745 	.word	0x00404745
  403e9c:	00406069 	.word	0x00406069
  403ea0:	004041b9 	.word	0x004041b9
  403ea4:	00405cc5 	.word	0x00405cc5
  403ea8:	004061d9 	.word	0x004061d9
  403eac:	2040394c 	.word	0x2040394c
  403eb0:	00404191 	.word	0x00404191
  403eb4:	0040453d 	.word	0x0040453d

00403eb8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
  403eb8:	b580      	push	{r7, lr}
  403eba:	b082      	sub	sp, #8
  403ebc:	af00      	add	r7, sp, #0
  403ebe:	6078      	str	r0, [r7, #4]
  403ec0:	460b      	mov	r3, r1
  403ec2:	70fb      	strb	r3, [r7, #3]
  icmp_send_response(p, ICMP_DUR, t);
  403ec4:	78fb      	ldrb	r3, [r7, #3]
  403ec6:	461a      	mov	r2, r3
  403ec8:	2103      	movs	r1, #3
  403eca:	6878      	ldr	r0, [r7, #4]
  403ecc:	4b02      	ldr	r3, [pc, #8]	; (403ed8 <icmp_dest_unreach+0x20>)
  403ece:	4798      	blx	r3
}
  403ed0:	bf00      	nop
  403ed2:	3708      	adds	r7, #8
  403ed4:	46bd      	mov	sp, r7
  403ed6:	bd80      	pop	{r7, pc}
  403ed8:	00403f01 	.word	0x00403f01

00403edc <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
  403edc:	b580      	push	{r7, lr}
  403ede:	b082      	sub	sp, #8
  403ee0:	af00      	add	r7, sp, #0
  403ee2:	6078      	str	r0, [r7, #4]
  403ee4:	460b      	mov	r3, r1
  403ee6:	70fb      	strb	r3, [r7, #3]
  icmp_send_response(p, ICMP_TE, t);
  403ee8:	78fb      	ldrb	r3, [r7, #3]
  403eea:	461a      	mov	r2, r3
  403eec:	210b      	movs	r1, #11
  403eee:	6878      	ldr	r0, [r7, #4]
  403ef0:	4b02      	ldr	r3, [pc, #8]	; (403efc <icmp_time_exceeded+0x20>)
  403ef2:	4798      	blx	r3
}
  403ef4:	bf00      	nop
  403ef6:	3708      	adds	r7, #8
  403ef8:	46bd      	mov	sp, r7
  403efa:	bd80      	pop	{r7, pc}
  403efc:	00403f01 	.word	0x00403f01

00403f00 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
  403f00:	b590      	push	{r4, r7, lr}
  403f02:	b089      	sub	sp, #36	; 0x24
  403f04:	af02      	add	r7, sp, #8
  403f06:	6078      	str	r0, [r7, #4]
  403f08:	460b      	mov	r3, r1
  403f0a:	70fb      	strb	r3, [r7, #3]
  403f0c:	4613      	mov	r3, r2
  403f0e:	70bb      	strb	r3, [r7, #2]
  /* we can use the echo header here */
  struct icmp_echo_hdr *icmphdr;
  ip_addr_t iphdr_src;

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
  403f10:	2200      	movs	r2, #0
  403f12:	2124      	movs	r1, #36	; 0x24
  403f14:	2001      	movs	r0, #1
  403f16:	4b25      	ldr	r3, [pc, #148]	; (403fac <icmp_send_response+0xac>)
  403f18:	4798      	blx	r3
  403f1a:	6178      	str	r0, [r7, #20]
                 PBUF_RAM);
  if (q == NULL) {
  403f1c:	697b      	ldr	r3, [r7, #20]
  403f1e:	2b00      	cmp	r3, #0
  403f20:	d040      	beq.n	403fa4 <icmp_send_response+0xa4>
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
  403f22:	687b      	ldr	r3, [r7, #4]
  403f24:	685b      	ldr	r3, [r3, #4]
  403f26:	613b      	str	r3, [r7, #16]
  ip_addr_debug_print(ICMP_DEBUG, &(iphdr->src));
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip_addr_debug_print(ICMP_DEBUG, &(iphdr->dest));
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
  403f28:	697b      	ldr	r3, [r7, #20]
  403f2a:	685b      	ldr	r3, [r3, #4]
  403f2c:	60fb      	str	r3, [r7, #12]
  icmphdr->type = type;
  403f2e:	68fb      	ldr	r3, [r7, #12]
  403f30:	78fa      	ldrb	r2, [r7, #3]
  403f32:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
  403f34:	68fb      	ldr	r3, [r7, #12]
  403f36:	78ba      	ldrb	r2, [r7, #2]
  403f38:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
  403f3a:	68fb      	ldr	r3, [r7, #12]
  403f3c:	2200      	movs	r2, #0
  403f3e:	711a      	strb	r2, [r3, #4]
  403f40:	2200      	movs	r2, #0
  403f42:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
  403f44:	68fb      	ldr	r3, [r7, #12]
  403f46:	2200      	movs	r2, #0
  403f48:	719a      	strb	r2, [r3, #6]
  403f4a:	2200      	movs	r2, #0
  403f4c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
  403f4e:	697b      	ldr	r3, [r7, #20]
  403f50:	685b      	ldr	r3, [r3, #4]
  403f52:	f103 0008 	add.w	r0, r3, #8
  403f56:	687b      	ldr	r3, [r7, #4]
  403f58:	685b      	ldr	r3, [r3, #4]
  403f5a:	221c      	movs	r2, #28
  403f5c:	4619      	mov	r1, r3
  403f5e:	4b14      	ldr	r3, [pc, #80]	; (403fb0 <icmp_send_response+0xb0>)
  403f60:	4798      	blx	r3
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  /* calculate checksum */
  icmphdr->chksum = 0;
  403f62:	68fb      	ldr	r3, [r7, #12]
  403f64:	2200      	movs	r2, #0
  403f66:	709a      	strb	r2, [r3, #2]
  403f68:	2200      	movs	r2, #0
  403f6a:	70da      	strb	r2, [r3, #3]
  icmphdr->chksum = inet_chksum(icmphdr, q->len);
  403f6c:	697b      	ldr	r3, [r7, #20]
  403f6e:	895b      	ldrh	r3, [r3, #10]
  403f70:	4619      	mov	r1, r3
  403f72:	68f8      	ldr	r0, [r7, #12]
  403f74:	4b0f      	ldr	r3, [pc, #60]	; (403fb4 <icmp_send_response+0xb4>)
  403f76:	4798      	blx	r3
  403f78:	4603      	mov	r3, r0
  403f7a:	461a      	mov	r2, r3
  403f7c:	68fb      	ldr	r3, [r7, #12]
  403f7e:	805a      	strh	r2, [r3, #2]
  ICMP_STATS_INC(icmp.xmit);
  /* increase number of messages attempted to send */
  snmp_inc_icmpoutmsgs();
  /* increase number of destination unreachable messages attempted to send */
  snmp_inc_icmpouttimeexcds();
  ip_addr_copy(iphdr_src, iphdr->src);
  403f80:	693b      	ldr	r3, [r7, #16]
  403f82:	68db      	ldr	r3, [r3, #12]
  403f84:	60bb      	str	r3, [r7, #8]
  ip_output(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP);
  403f86:	f107 0208 	add.w	r2, r7, #8
  403f8a:	2301      	movs	r3, #1
  403f8c:	9301      	str	r3, [sp, #4]
  403f8e:	2300      	movs	r3, #0
  403f90:	9300      	str	r3, [sp, #0]
  403f92:	23ff      	movs	r3, #255	; 0xff
  403f94:	2100      	movs	r1, #0
  403f96:	6978      	ldr	r0, [r7, #20]
  403f98:	4c07      	ldr	r4, [pc, #28]	; (403fb8 <icmp_send_response+0xb8>)
  403f9a:	47a0      	blx	r4
  pbuf_free(q);
  403f9c:	6978      	ldr	r0, [r7, #20]
  403f9e:	4b07      	ldr	r3, [pc, #28]	; (403fbc <icmp_send_response+0xbc>)
  403fa0:	4798      	blx	r3
  403fa2:	e000      	b.n	403fa6 <icmp_send_response+0xa6>
  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
                 PBUF_RAM);
  if (q == NULL) {
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    return;
  403fa4:	bf00      	nop
  /* increase number of destination unreachable messages attempted to send */
  snmp_inc_icmpouttimeexcds();
  ip_addr_copy(iphdr_src, iphdr->src);
  ip_output(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP);
  pbuf_free(q);
}
  403fa6:	371c      	adds	r7, #28
  403fa8:	46bd      	mov	sp, r7
  403faa:	bd90      	pop	{r4, r7, pc}
  403fac:	00405cc5 	.word	0x00405cc5
  403fb0:	0040d859 	.word	0x0040d859
  403fb4:	00404191 	.word	0x00404191
  403fb8:	004046f1 	.word	0x004046f1
  403fbc:	00406069 	.word	0x00406069

00403fc0 <lwip_standard_chksum>:
 * @return host order (!) lwip checksum (non-inverted Internet sum) 
 */

static u16_t
lwip_standard_chksum(void *dataptr, int len)
{
  403fc0:	b480      	push	{r7}
  403fc2:	b089      	sub	sp, #36	; 0x24
  403fc4:	af00      	add	r7, sp, #0
  403fc6:	6078      	str	r0, [r7, #4]
  403fc8:	6039      	str	r1, [r7, #0]
  u8_t *pb = (u8_t *)dataptr;
  403fca:	687b      	ldr	r3, [r7, #4]
  403fcc:	61fb      	str	r3, [r7, #28]
  u16_t *ps, t = 0;
  403fce:	2300      	movs	r3, #0
  403fd0:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
  403fd2:	2300      	movs	r3, #0
  403fd4:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
  403fd6:	69fb      	ldr	r3, [r7, #28]
  403fd8:	f003 0301 	and.w	r3, r3, #1
  403fdc:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
  403fde:	693b      	ldr	r3, [r7, #16]
  403fe0:	2b00      	cmp	r3, #0
  403fe2:	d00d      	beq.n	404000 <lwip_standard_chksum+0x40>
  403fe4:	683b      	ldr	r3, [r7, #0]
  403fe6:	2b00      	cmp	r3, #0
  403fe8:	dd0a      	ble.n	404000 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
  403fea:	f107 030e 	add.w	r3, r7, #14
  403fee:	3301      	adds	r3, #1
  403ff0:	69fa      	ldr	r2, [r7, #28]
  403ff2:	1c51      	adds	r1, r2, #1
  403ff4:	61f9      	str	r1, [r7, #28]
  403ff6:	7812      	ldrb	r2, [r2, #0]
  403ff8:	701a      	strb	r2, [r3, #0]
    len--;
  403ffa:	683b      	ldr	r3, [r7, #0]
  403ffc:	3b01      	subs	r3, #1
  403ffe:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (u16_t *)(void *)pb;
  404000:	69fb      	ldr	r3, [r7, #28]
  404002:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
  404004:	e00a      	b.n	40401c <lwip_standard_chksum+0x5c>
    sum += *ps++;
  404006:	69bb      	ldr	r3, [r7, #24]
  404008:	1c9a      	adds	r2, r3, #2
  40400a:	61ba      	str	r2, [r7, #24]
  40400c:	881b      	ldrh	r3, [r3, #0]
  40400e:	461a      	mov	r2, r3
  404010:	697b      	ldr	r3, [r7, #20]
  404012:	4413      	add	r3, r2
  404014:	617b      	str	r3, [r7, #20]
    len -= 2;
  404016:	683b      	ldr	r3, [r7, #0]
  404018:	3b02      	subs	r3, #2
  40401a:	603b      	str	r3, [r7, #0]
    len--;
  }

  /* Add the bulk of the data */
  ps = (u16_t *)(void *)pb;
  while (len > 1) {
  40401c:	683b      	ldr	r3, [r7, #0]
  40401e:	2b01      	cmp	r3, #1
  404020:	dcf1      	bgt.n	404006 <lwip_standard_chksum+0x46>
    sum += *ps++;
    len -= 2;
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
  404022:	683b      	ldr	r3, [r7, #0]
  404024:	2b00      	cmp	r3, #0
  404026:	dd04      	ble.n	404032 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(u8_t *)ps;
  404028:	f107 030e 	add.w	r3, r7, #14
  40402c:	69ba      	ldr	r2, [r7, #24]
  40402e:	7812      	ldrb	r2, [r2, #0]
  404030:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
  404032:	89fb      	ldrh	r3, [r7, #14]
  404034:	461a      	mov	r2, r3
  404036:	697b      	ldr	r3, [r7, #20]
  404038:	4413      	add	r3, r2
  40403a:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is propably faster than if statements... */
  sum = FOLD_U32T(sum);
  40403c:	697b      	ldr	r3, [r7, #20]
  40403e:	0c1a      	lsrs	r2, r3, #16
  404040:	697b      	ldr	r3, [r7, #20]
  404042:	b29b      	uxth	r3, r3
  404044:	4413      	add	r3, r2
  404046:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
  404048:	697b      	ldr	r3, [r7, #20]
  40404a:	0c1a      	lsrs	r2, r3, #16
  40404c:	697b      	ldr	r3, [r7, #20]
  40404e:	b29b      	uxth	r3, r3
  404050:	4413      	add	r3, r2
  404052:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
  404054:	693b      	ldr	r3, [r7, #16]
  404056:	2b00      	cmp	r3, #0
  404058:	d007      	beq.n	40406a <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
  40405a:	697b      	ldr	r3, [r7, #20]
  40405c:	021b      	lsls	r3, r3, #8
  40405e:	b29a      	uxth	r2, r3
  404060:	697b      	ldr	r3, [r7, #20]
  404062:	0a1b      	lsrs	r3, r3, #8
  404064:	b2db      	uxtb	r3, r3
  404066:	4313      	orrs	r3, r2
  404068:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
  40406a:	697b      	ldr	r3, [r7, #20]
  40406c:	b29b      	uxth	r3, r3
}
  40406e:	4618      	mov	r0, r3
  404070:	3724      	adds	r7, #36	; 0x24
  404072:	46bd      	mov	sp, r7
  404074:	f85d 7b04 	ldr.w	r7, [sp], #4
  404078:	4770      	bx	lr
  40407a:	bf00      	nop

0040407c <inet_chksum_pseudo>:
 */
u16_t
inet_chksum_pseudo(struct pbuf *p,
       ip_addr_t *src, ip_addr_t *dest,
       u8_t proto, u16_t proto_len)
{
  40407c:	b580      	push	{r7, lr}
  40407e:	b088      	sub	sp, #32
  404080:	af00      	add	r7, sp, #0
  404082:	60f8      	str	r0, [r7, #12]
  404084:	60b9      	str	r1, [r7, #8]
  404086:	607a      	str	r2, [r7, #4]
  404088:	70fb      	strb	r3, [r7, #3]
  u32_t acc;
  u32_t addr;
  struct pbuf *q;
  u8_t swapped;

  acc = 0;
  40408a:	2300      	movs	r3, #0
  40408c:	61fb      	str	r3, [r7, #28]
  swapped = 0;
  40408e:	2300      	movs	r3, #0
  404090:	75fb      	strb	r3, [r7, #23]
  /* iterate through all pbuf in chain */
  for(q = p; q != NULL; q = q->next) {
  404092:	68fb      	ldr	r3, [r7, #12]
  404094:	61bb      	str	r3, [r7, #24]
  404096:	e028      	b.n	4040ea <inet_chksum_pseudo+0x6e>
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
      (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
  404098:	69bb      	ldr	r3, [r7, #24]
  40409a:	685a      	ldr	r2, [r3, #4]
  40409c:	69bb      	ldr	r3, [r7, #24]
  40409e:	895b      	ldrh	r3, [r3, #10]
  4040a0:	4619      	mov	r1, r3
  4040a2:	4610      	mov	r0, r2
  4040a4:	4b38      	ldr	r3, [pc, #224]	; (404188 <inet_chksum_pseudo+0x10c>)
  4040a6:	4798      	blx	r3
  4040a8:	4603      	mov	r3, r0
  4040aa:	461a      	mov	r2, r3
  4040ac:	69fb      	ldr	r3, [r7, #28]
  4040ae:	4413      	add	r3, r2
  4040b0:	61fb      	str	r3, [r7, #28]
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
  4040b2:	69fb      	ldr	r3, [r7, #28]
  4040b4:	0c1a      	lsrs	r2, r3, #16
  4040b6:	69fb      	ldr	r3, [r7, #28]
  4040b8:	b29b      	uxth	r3, r3
  4040ba:	4413      	add	r3, r2
  4040bc:	61fb      	str	r3, [r7, #28]
    if (q->len % 2 != 0) {
  4040be:	69bb      	ldr	r3, [r7, #24]
  4040c0:	895b      	ldrh	r3, [r3, #10]
  4040c2:	f003 0301 	and.w	r3, r3, #1
  4040c6:	b29b      	uxth	r3, r3
  4040c8:	2b00      	cmp	r3, #0
  4040ca:	d00b      	beq.n	4040e4 <inet_chksum_pseudo+0x68>
      swapped = 1 - swapped;
  4040cc:	7dfb      	ldrb	r3, [r7, #23]
  4040ce:	f1c3 0301 	rsb	r3, r3, #1
  4040d2:	75fb      	strb	r3, [r7, #23]
      acc = SWAP_BYTES_IN_WORD(acc);
  4040d4:	69fb      	ldr	r3, [r7, #28]
  4040d6:	021b      	lsls	r3, r3, #8
  4040d8:	b29a      	uxth	r2, r3
  4040da:	69fb      	ldr	r3, [r7, #28]
  4040dc:	0a1b      	lsrs	r3, r3, #8
  4040de:	b2db      	uxtb	r3, r3
  4040e0:	4313      	orrs	r3, r2
  4040e2:	61fb      	str	r3, [r7, #28]
  u8_t swapped;

  acc = 0;
  swapped = 0;
  /* iterate through all pbuf in chain */
  for(q = p; q != NULL; q = q->next) {
  4040e4:	69bb      	ldr	r3, [r7, #24]
  4040e6:	681b      	ldr	r3, [r3, #0]
  4040e8:	61bb      	str	r3, [r7, #24]
  4040ea:	69bb      	ldr	r3, [r7, #24]
  4040ec:	2b00      	cmp	r3, #0
  4040ee:	d1d3      	bne.n	404098 <inet_chksum_pseudo+0x1c>
      acc = SWAP_BYTES_IN_WORD(acc);
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
  4040f0:	7dfb      	ldrb	r3, [r7, #23]
  4040f2:	2b00      	cmp	r3, #0
  4040f4:	d007      	beq.n	404106 <inet_chksum_pseudo+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
  4040f6:	69fb      	ldr	r3, [r7, #28]
  4040f8:	021b      	lsls	r3, r3, #8
  4040fa:	b29a      	uxth	r2, r3
  4040fc:	69fb      	ldr	r3, [r7, #28]
  4040fe:	0a1b      	lsrs	r3, r3, #8
  404100:	b2db      	uxtb	r3, r3
  404102:	4313      	orrs	r3, r2
  404104:	61fb      	str	r3, [r7, #28]
  }
  addr = ip4_addr_get_u32(src);
  404106:	68bb      	ldr	r3, [r7, #8]
  404108:	681b      	ldr	r3, [r3, #0]
  40410a:	613b      	str	r3, [r7, #16]
  acc += (addr & 0xffffUL);
  40410c:	693b      	ldr	r3, [r7, #16]
  40410e:	b29b      	uxth	r3, r3
  404110:	69fa      	ldr	r2, [r7, #28]
  404112:	4413      	add	r3, r2
  404114:	61fb      	str	r3, [r7, #28]
  acc += ((addr >> 16) & 0xffffUL);
  404116:	693b      	ldr	r3, [r7, #16]
  404118:	0c1b      	lsrs	r3, r3, #16
  40411a:	69fa      	ldr	r2, [r7, #28]
  40411c:	4413      	add	r3, r2
  40411e:	61fb      	str	r3, [r7, #28]
  addr = ip4_addr_get_u32(dest);
  404120:	687b      	ldr	r3, [r7, #4]
  404122:	681b      	ldr	r3, [r3, #0]
  404124:	613b      	str	r3, [r7, #16]
  acc += (addr & 0xffffUL);
  404126:	693b      	ldr	r3, [r7, #16]
  404128:	b29b      	uxth	r3, r3
  40412a:	69fa      	ldr	r2, [r7, #28]
  40412c:	4413      	add	r3, r2
  40412e:	61fb      	str	r3, [r7, #28]
  acc += ((addr >> 16) & 0xffffUL);
  404130:	693b      	ldr	r3, [r7, #16]
  404132:	0c1b      	lsrs	r3, r3, #16
  404134:	69fa      	ldr	r2, [r7, #28]
  404136:	4413      	add	r3, r2
  404138:	61fb      	str	r3, [r7, #28]
  acc += (u32_t)htons((u16_t)proto);
  40413a:	78fb      	ldrb	r3, [r7, #3]
  40413c:	b29b      	uxth	r3, r3
  40413e:	4618      	mov	r0, r3
  404140:	4b12      	ldr	r3, [pc, #72]	; (40418c <inet_chksum_pseudo+0x110>)
  404142:	4798      	blx	r3
  404144:	4603      	mov	r3, r0
  404146:	461a      	mov	r2, r3
  404148:	69fb      	ldr	r3, [r7, #28]
  40414a:	4413      	add	r3, r2
  40414c:	61fb      	str	r3, [r7, #28]
  acc += (u32_t)htons(proto_len);
  40414e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
  404150:	4618      	mov	r0, r3
  404152:	4b0e      	ldr	r3, [pc, #56]	; (40418c <inet_chksum_pseudo+0x110>)
  404154:	4798      	blx	r3
  404156:	4603      	mov	r3, r0
  404158:	461a      	mov	r2, r3
  40415a:	69fb      	ldr	r3, [r7, #28]
  40415c:	4413      	add	r3, r2
  40415e:	61fb      	str	r3, [r7, #28]

  /* Fold 32-bit sum to 16 bits
     calling this twice is propably faster than if statements... */
  acc = FOLD_U32T(acc);
  404160:	69fb      	ldr	r3, [r7, #28]
  404162:	0c1a      	lsrs	r2, r3, #16
  404164:	69fb      	ldr	r3, [r7, #28]
  404166:	b29b      	uxth	r3, r3
  404168:	4413      	add	r3, r2
  40416a:	61fb      	str	r3, [r7, #28]
  acc = FOLD_U32T(acc);
  40416c:	69fb      	ldr	r3, [r7, #28]
  40416e:	0c1a      	lsrs	r2, r3, #16
  404170:	69fb      	ldr	r3, [r7, #28]
  404172:	b29b      	uxth	r3, r3
  404174:	4413      	add	r3, r2
  404176:	61fb      	str	r3, [r7, #28]
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
  404178:	69fb      	ldr	r3, [r7, #28]
  40417a:	b29b      	uxth	r3, r3
  40417c:	43db      	mvns	r3, r3
  40417e:	b29b      	uxth	r3, r3
}
  404180:	4618      	mov	r0, r3
  404182:	3720      	adds	r7, #32
  404184:	46bd      	mov	sp, r7
  404186:	bd80      	pop	{r7, pc}
  404188:	00403fc1 	.word	0x00403fc1
  40418c:	00402309 	.word	0x00402309

00404190 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(void *dataptr, u16_t len)
{
  404190:	b580      	push	{r7, lr}
  404192:	b082      	sub	sp, #8
  404194:	af00      	add	r7, sp, #0
  404196:	6078      	str	r0, [r7, #4]
  404198:	460b      	mov	r3, r1
  40419a:	807b      	strh	r3, [r7, #2]
  return ~LWIP_CHKSUM(dataptr, len);
  40419c:	887b      	ldrh	r3, [r7, #2]
  40419e:	4619      	mov	r1, r3
  4041a0:	6878      	ldr	r0, [r7, #4]
  4041a2:	4b04      	ldr	r3, [pc, #16]	; (4041b4 <inet_chksum+0x24>)
  4041a4:	4798      	blx	r3
  4041a6:	4603      	mov	r3, r0
  4041a8:	43db      	mvns	r3, r3
  4041aa:	b29b      	uxth	r3, r3
}
  4041ac:	4618      	mov	r0, r3
  4041ae:	3708      	adds	r7, #8
  4041b0:	46bd      	mov	sp, r7
  4041b2:	bd80      	pop	{r7, pc}
  4041b4:	00403fc1 	.word	0x00403fc1

004041b8 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
  4041b8:	b580      	push	{r7, lr}
  4041ba:	b086      	sub	sp, #24
  4041bc:	af00      	add	r7, sp, #0
  4041be:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  u8_t swapped;

  acc = 0;
  4041c0:	2300      	movs	r3, #0
  4041c2:	617b      	str	r3, [r7, #20]
  swapped = 0;
  4041c4:	2300      	movs	r3, #0
  4041c6:	73fb      	strb	r3, [r7, #15]
  for(q = p; q != NULL; q = q->next) {
  4041c8:	687b      	ldr	r3, [r7, #4]
  4041ca:	613b      	str	r3, [r7, #16]
  4041cc:	e028      	b.n	404220 <inet_chksum_pbuf+0x68>
    acc += LWIP_CHKSUM(q->payload, q->len);
  4041ce:	693b      	ldr	r3, [r7, #16]
  4041d0:	685a      	ldr	r2, [r3, #4]
  4041d2:	693b      	ldr	r3, [r7, #16]
  4041d4:	895b      	ldrh	r3, [r3, #10]
  4041d6:	4619      	mov	r1, r3
  4041d8:	4610      	mov	r0, r2
  4041da:	4b1c      	ldr	r3, [pc, #112]	; (40424c <inet_chksum_pbuf+0x94>)
  4041dc:	4798      	blx	r3
  4041de:	4603      	mov	r3, r0
  4041e0:	461a      	mov	r2, r3
  4041e2:	697b      	ldr	r3, [r7, #20]
  4041e4:	4413      	add	r3, r2
  4041e6:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
  4041e8:	697b      	ldr	r3, [r7, #20]
  4041ea:	0c1a      	lsrs	r2, r3, #16
  4041ec:	697b      	ldr	r3, [r7, #20]
  4041ee:	b29b      	uxth	r3, r3
  4041f0:	4413      	add	r3, r2
  4041f2:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
  4041f4:	693b      	ldr	r3, [r7, #16]
  4041f6:	895b      	ldrh	r3, [r3, #10]
  4041f8:	f003 0301 	and.w	r3, r3, #1
  4041fc:	b29b      	uxth	r3, r3
  4041fe:	2b00      	cmp	r3, #0
  404200:	d00b      	beq.n	40421a <inet_chksum_pbuf+0x62>
      swapped = 1 - swapped;
  404202:	7bfb      	ldrb	r3, [r7, #15]
  404204:	f1c3 0301 	rsb	r3, r3, #1
  404208:	73fb      	strb	r3, [r7, #15]
      acc = SWAP_BYTES_IN_WORD(acc);
  40420a:	697b      	ldr	r3, [r7, #20]
  40420c:	021b      	lsls	r3, r3, #8
  40420e:	b29a      	uxth	r2, r3
  404210:	697b      	ldr	r3, [r7, #20]
  404212:	0a1b      	lsrs	r3, r3, #8
  404214:	b2db      	uxtb	r3, r3
  404216:	4313      	orrs	r3, r2
  404218:	617b      	str	r3, [r7, #20]
  struct pbuf *q;
  u8_t swapped;

  acc = 0;
  swapped = 0;
  for(q = p; q != NULL; q = q->next) {
  40421a:	693b      	ldr	r3, [r7, #16]
  40421c:	681b      	ldr	r3, [r3, #0]
  40421e:	613b      	str	r3, [r7, #16]
  404220:	693b      	ldr	r3, [r7, #16]
  404222:	2b00      	cmp	r3, #0
  404224:	d1d3      	bne.n	4041ce <inet_chksum_pbuf+0x16>
      swapped = 1 - swapped;
      acc = SWAP_BYTES_IN_WORD(acc);
    }
  }

  if (swapped) {
  404226:	7bfb      	ldrb	r3, [r7, #15]
  404228:	2b00      	cmp	r3, #0
  40422a:	d007      	beq.n	40423c <inet_chksum_pbuf+0x84>
    acc = SWAP_BYTES_IN_WORD(acc);
  40422c:	697b      	ldr	r3, [r7, #20]
  40422e:	021b      	lsls	r3, r3, #8
  404230:	b29a      	uxth	r2, r3
  404232:	697b      	ldr	r3, [r7, #20]
  404234:	0a1b      	lsrs	r3, r3, #8
  404236:	b2db      	uxtb	r3, r3
  404238:	4313      	orrs	r3, r2
  40423a:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
  40423c:	697b      	ldr	r3, [r7, #20]
  40423e:	b29b      	uxth	r3, r3
  404240:	43db      	mvns	r3, r3
  404242:	b29b      	uxth	r3, r3
}
  404244:	4618      	mov	r0, r3
  404246:	3718      	adds	r7, #24
  404248:	46bd      	mov	sp, r7
  40424a:	bd80      	pop	{r7, pc}
  40424c:	00403fc1 	.word	0x00403fc1

00404250 <ip_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip_route(ip_addr_t *dest)
{
  404250:	b480      	push	{r7}
  404252:	b085      	sub	sp, #20
  404254:	af00      	add	r7, sp, #0
  404256:	6078      	str	r0, [r7, #4]
    return netif;
  }
#endif

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
  404258:	4b19      	ldr	r3, [pc, #100]	; (4042c0 <ip_route+0x70>)
  40425a:	681b      	ldr	r3, [r3, #0]
  40425c:	60fb      	str	r3, [r7, #12]
  40425e:	e015      	b.n	40428c <ip_route+0x3c>
    /* network mask matches? */
    if (netif_is_up(netif)) {
  404260:	68fb      	ldr	r3, [r7, #12]
  404262:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
  404266:	f003 0301 	and.w	r3, r3, #1
  40426a:	2b00      	cmp	r3, #0
  40426c:	d00b      	beq.n	404286 <ip_route+0x36>
      if (ip_addr_netcmp(dest, &(netif->ip_addr), &(netif->netmask))) {
  40426e:	687b      	ldr	r3, [r7, #4]
  404270:	681a      	ldr	r2, [r3, #0]
  404272:	68fb      	ldr	r3, [r7, #12]
  404274:	685b      	ldr	r3, [r3, #4]
  404276:	405a      	eors	r2, r3
  404278:	68fb      	ldr	r3, [r7, #12]
  40427a:	689b      	ldr	r3, [r3, #8]
  40427c:	4013      	ands	r3, r2
  40427e:	2b00      	cmp	r3, #0
  404280:	d101      	bne.n	404286 <ip_route+0x36>
        /* return netif on which to forward IP packet */
        return netif;
  404282:	68fb      	ldr	r3, [r7, #12]
  404284:	e015      	b.n	4042b2 <ip_route+0x62>
    return netif;
  }
#endif

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
  404286:	68fb      	ldr	r3, [r7, #12]
  404288:	681b      	ldr	r3, [r3, #0]
  40428a:	60fb      	str	r3, [r7, #12]
  40428c:	68fb      	ldr	r3, [r7, #12]
  40428e:	2b00      	cmp	r3, #0
  404290:	d1e6      	bne.n	404260 <ip_route+0x10>
        /* return netif on which to forward IP packet */
        return netif;
      }
    }
  }
  if ((netif_default == NULL) || (!netif_is_up(netif_default))) {
  404292:	4b0c      	ldr	r3, [pc, #48]	; (4042c4 <ip_route+0x74>)
  404294:	681b      	ldr	r3, [r3, #0]
  404296:	2b00      	cmp	r3, #0
  404298:	d007      	beq.n	4042aa <ip_route+0x5a>
  40429a:	4b0a      	ldr	r3, [pc, #40]	; (4042c4 <ip_route+0x74>)
  40429c:	681b      	ldr	r3, [r3, #0]
  40429e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
  4042a2:	f003 0301 	and.w	r3, r3, #1
  4042a6:	2b00      	cmp	r3, #0
  4042a8:	d101      	bne.n	4042ae <ip_route+0x5e>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    snmp_inc_ipoutnoroutes();
    return NULL;
  4042aa:	2300      	movs	r3, #0
  4042ac:	e001      	b.n	4042b2 <ip_route+0x62>
  }
  /* no matching netif found, use default netif */
  return netif_default;
  4042ae:	4b05      	ldr	r3, [pc, #20]	; (4042c4 <ip_route+0x74>)
  4042b0:	681b      	ldr	r3, [r3, #0]
}
  4042b2:	4618      	mov	r0, r3
  4042b4:	3714      	adds	r7, #20
  4042b6:	46bd      	mov	sp, r7
  4042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4042bc:	4770      	bx	lr
  4042be:	bf00      	nop
  4042c0:	20404970 	.word	0x20404970
  4042c4:	20404974 	.word	0x20404974

004042c8 <ip_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip_input(struct pbuf *p, struct netif *inp)
{
  4042c8:	b580      	push	{r7, lr}
  4042ca:	b088      	sub	sp, #32
  4042cc:	af00      	add	r7, sp, #0
  4042ce:	6078      	str	r0, [r7, #4]
  4042d0:	6039      	str	r1, [r7, #0]
  struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
  int check_ip_src=1;
  4042d2:	2301      	movs	r3, #1
  4042d4:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  snmp_inc_ipinreceives();

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
  4042d6:	687b      	ldr	r3, [r7, #4]
  4042d8:	685b      	ldr	r3, [r3, #4]
  4042da:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
  4042dc:	69fb      	ldr	r3, [r7, #28]
  4042de:	781b      	ldrb	r3, [r3, #0]
  4042e0:	091b      	lsrs	r3, r3, #4
  4042e2:	b2db      	uxtb	r3, r3
  4042e4:	2b04      	cmp	r3, #4
  4042e6:	d004      	beq.n	4042f2 <ip_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", IPH_V(iphdr)));
    ip_debug_print(p);
    pbuf_free(p);
  4042e8:	6878      	ldr	r0, [r7, #4]
  4042ea:	4b85      	ldr	r3, [pc, #532]	; (404500 <ip_input+0x238>)
  4042ec:	4798      	blx	r3
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    snmp_inc_ipinhdrerrors();
    return ERR_OK;
  4042ee:	2300      	movs	r3, #0
  4042f0:	e102      	b.n	4044f8 <ip_input+0x230>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
  4042f2:	69fb      	ldr	r3, [r7, #28]
  4042f4:	781b      	ldrb	r3, [r3, #0]
  4042f6:	b29b      	uxth	r3, r3
  4042f8:	f003 030f 	and.w	r3, r3, #15
  4042fc:	81fb      	strh	r3, [r7, #14]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
  4042fe:	89fb      	ldrh	r3, [r7, #14]
  404300:	009b      	lsls	r3, r3, #2
  404302:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = ntohs(IPH_LEN(iphdr));
  404304:	69fb      	ldr	r3, [r7, #28]
  404306:	885b      	ldrh	r3, [r3, #2]
  404308:	b29b      	uxth	r3, r3
  40430a:	4618      	mov	r0, r3
  40430c:	4b7d      	ldr	r3, [pc, #500]	; (404504 <ip_input+0x23c>)
  40430e:	4798      	blx	r3
  404310:	4603      	mov	r3, r0
  404312:	81bb      	strh	r3, [r7, #12]

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len)) {
  404314:	687b      	ldr	r3, [r7, #4]
  404316:	895b      	ldrh	r3, [r3, #10]
  404318:	89fa      	ldrh	r2, [r7, #14]
  40431a:	429a      	cmp	r2, r3
  40431c:	d804      	bhi.n	404328 <ip_input+0x60>
  40431e:	687b      	ldr	r3, [r7, #4]
  404320:	891b      	ldrh	r3, [r3, #8]
  404322:	89ba      	ldrh	r2, [r7, #12]
  404324:	429a      	cmp	r2, r3
  404326:	d904      	bls.n	404332 <ip_input+0x6a>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
  404328:	6878      	ldr	r0, [r7, #4]
  40432a:	4b75      	ldr	r3, [pc, #468]	; (404500 <ip_input+0x238>)
  40432c:	4798      	blx	r3
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    snmp_inc_ipindiscards();
    return ERR_OK;
  40432e:	2300      	movs	r3, #0
  404330:	e0e2      	b.n	4044f8 <ip_input+0x230>
  }

  /* verify checksum */
#if CHECKSUM_CHECK_IP
  if (inet_chksum(iphdr, iphdr_hlen) != 0) {
  404332:	89fb      	ldrh	r3, [r7, #14]
  404334:	4619      	mov	r1, r3
  404336:	69f8      	ldr	r0, [r7, #28]
  404338:	4b73      	ldr	r3, [pc, #460]	; (404508 <ip_input+0x240>)
  40433a:	4798      	blx	r3
  40433c:	4603      	mov	r3, r0
  40433e:	2b00      	cmp	r3, #0
  404340:	d004      	beq.n	40434c <ip_input+0x84>

    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("Checksum (0x%"X16_F") failed, IP packet dropped.\n", inet_chksum(iphdr, iphdr_hlen)));
    ip_debug_print(p);
    pbuf_free(p);
  404342:	6878      	ldr	r0, [r7, #4]
  404344:	4b6e      	ldr	r3, [pc, #440]	; (404500 <ip_input+0x238>)
  404346:	4798      	blx	r3
    IP_STATS_INC(ip.chkerr);
    IP_STATS_INC(ip.drop);
    snmp_inc_ipinhdrerrors();
    return ERR_OK;
  404348:	2300      	movs	r3, #0
  40434a:	e0d5      	b.n	4044f8 <ip_input+0x230>
  }
#endif

  /* Trim pbuf. This should have been done at the netif layer,
   * but we'll do it anyway just to be sure that its done. */
  pbuf_realloc(p, iphdr_len);
  40434c:	89bb      	ldrh	r3, [r7, #12]
  40434e:	4619      	mov	r1, r3
  404350:	6878      	ldr	r0, [r7, #4]
  404352:	4b6e      	ldr	r3, [pc, #440]	; (40450c <ip_input+0x244>)
  404354:	4798      	blx	r3

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy(current_iphdr_dest, iphdr->dest);
  404356:	69fb      	ldr	r3, [r7, #28]
  404358:	691b      	ldr	r3, [r3, #16]
  40435a:	4a6d      	ldr	r2, [pc, #436]	; (404510 <ip_input+0x248>)
  40435c:	6013      	str	r3, [r2, #0]
  ip_addr_copy(current_iphdr_src, iphdr->src);
  40435e:	69fb      	ldr	r3, [r7, #28]
  404360:	68db      	ldr	r3, [r3, #12]
  404362:	4a6c      	ldr	r2, [pc, #432]	; (404514 <ip_input+0x24c>)
  404364:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IGMP */
  {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
  404366:	2301      	movs	r3, #1
  404368:	613b      	str	r3, [r7, #16]
    netif = inp;
  40436a:	683b      	ldr	r3, [r7, #0]
  40436c:	61bb      	str	r3, [r7, #24]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(&netif->netmask),
          ip4_addr_get_u32(&netif->ip_addr) & ip4_addr_get_u32(&netif->netmask),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(&netif->netmask)));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip_addr_isany(&(netif->ip_addr)))) {
  40436e:	69bb      	ldr	r3, [r7, #24]
  404370:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
  404374:	f003 0301 	and.w	r3, r3, #1
  404378:	2b00      	cmp	r3, #0
  40437a:	d016      	beq.n	4043aa <ip_input+0xe2>
  40437c:	69bb      	ldr	r3, [r7, #24]
  40437e:	3304      	adds	r3, #4
  404380:	2b00      	cmp	r3, #0
  404382:	d012      	beq.n	4043aa <ip_input+0xe2>
  404384:	69bb      	ldr	r3, [r7, #24]
  404386:	685b      	ldr	r3, [r3, #4]
  404388:	2b00      	cmp	r3, #0
  40438a:	d00e      	beq.n	4043aa <ip_input+0xe2>
        /* unicast to this interface address? */
        if (ip_addr_cmp(&current_iphdr_dest, &(netif->ip_addr)) ||
  40438c:	4b60      	ldr	r3, [pc, #384]	; (404510 <ip_input+0x248>)
  40438e:	681a      	ldr	r2, [r3, #0]
  404390:	69bb      	ldr	r3, [r7, #24]
  404392:	685b      	ldr	r3, [r3, #4]
  404394:	429a      	cmp	r2, r3
  404396:	d01e      	beq.n	4043d6 <ip_input+0x10e>
            /* or broadcast on this interface network address? */
            ip_addr_isbroadcast(&current_iphdr_dest, netif)) {
  404398:	4b5d      	ldr	r3, [pc, #372]	; (404510 <ip_input+0x248>)
  40439a:	681b      	ldr	r3, [r3, #0]
  40439c:	69b9      	ldr	r1, [r7, #24]
  40439e:	4618      	mov	r0, r3
  4043a0:	4b5d      	ldr	r3, [pc, #372]	; (404518 <ip_input+0x250>)
  4043a2:	4798      	blx	r3
  4043a4:	4603      	mov	r3, r0
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(&netif->netmask)));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip_addr_isany(&(netif->ip_addr)))) {
        /* unicast to this interface address? */
        if (ip_addr_cmp(&current_iphdr_dest, &(netif->ip_addr)) ||
  4043a6:	2b00      	cmp	r3, #0
  4043a8:	d115      	bne.n	4043d6 <ip_input+0x10e>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
  4043aa:	693b      	ldr	r3, [r7, #16]
  4043ac:	2b00      	cmp	r3, #0
  4043ae:	d005      	beq.n	4043bc <ip_input+0xf4>
        first = 0;
  4043b0:	2300      	movs	r3, #0
  4043b2:	613b      	str	r3, [r7, #16]
        netif = netif_list;
  4043b4:	4b59      	ldr	r3, [pc, #356]	; (40451c <ip_input+0x254>)
  4043b6:	681b      	ldr	r3, [r3, #0]
  4043b8:	61bb      	str	r3, [r7, #24]
  4043ba:	e002      	b.n	4043c2 <ip_input+0xfa>
      } else {
        netif = netif->next;
  4043bc:	69bb      	ldr	r3, [r7, #24]
  4043be:	681b      	ldr	r3, [r3, #0]
  4043c0:	61bb      	str	r3, [r7, #24]
      }
      if (netif == inp) {
  4043c2:	69ba      	ldr	r2, [r7, #24]
  4043c4:	683b      	ldr	r3, [r7, #0]
  4043c6:	429a      	cmp	r2, r3
  4043c8:	d102      	bne.n	4043d0 <ip_input+0x108>
        netif = netif->next;
  4043ca:	69bb      	ldr	r3, [r7, #24]
  4043cc:	681b      	ldr	r3, [r3, #0]
  4043ce:	61bb      	str	r3, [r7, #24]
      }
    } while(netif != NULL);
  4043d0:	69bb      	ldr	r3, [r7, #24]
  4043d2:	2b00      	cmp	r3, #0
  4043d4:	d1cb      	bne.n	40436e <ip_input+0xa6>
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
  4043d6:	69bb      	ldr	r3, [r7, #24]
  4043d8:	2b00      	cmp	r3, #0
  4043da:	d111      	bne.n	404400 <ip_input+0x138>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
  4043dc:	69fb      	ldr	r3, [r7, #28]
  4043de:	7a5b      	ldrb	r3, [r3, #9]
  4043e0:	2b11      	cmp	r3, #17
  4043e2:	d10d      	bne.n	404400 <ip_input+0x138>
      struct udp_hdr *udphdr = (struct udp_hdr *)((u8_t *)iphdr + iphdr_hlen);
  4043e4:	89fb      	ldrh	r3, [r7, #14]
  4043e6:	69fa      	ldr	r2, [r7, #28]
  4043e8:	4413      	add	r3, r2
  4043ea:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip_input: UDP packet to DHCP client port %"U16_F"\n",
        ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
  4043ec:	68bb      	ldr	r3, [r7, #8]
  4043ee:	885b      	ldrh	r3, [r3, #2]
  4043f0:	b29b      	uxth	r3, r3
  4043f2:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
  4043f6:	d103      	bne.n	404400 <ip_input+0x138>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip_input: DHCP packet accepted.\n"));
        netif = inp;
  4043f8:	683b      	ldr	r3, [r7, #0]
  4043fa:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
  4043fc:	2300      	movs	r3, #0
  4043fe:	617b      	str	r3, [r7, #20]
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
  /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
  if (check_ip_src && !ip_addr_isany(&current_iphdr_src))
  404400:	697b      	ldr	r3, [r7, #20]
  404402:	2b00      	cmp	r3, #0
  404404:	d017      	beq.n	404436 <ip_input+0x16e>
  404406:	4b43      	ldr	r3, [pc, #268]	; (404514 <ip_input+0x24c>)
  404408:	681b      	ldr	r3, [r3, #0]
  40440a:	2b00      	cmp	r3, #0
  40440c:	d013      	beq.n	404436 <ip_input+0x16e>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {  if ((ip_addr_isbroadcast(&current_iphdr_src, inp)) ||
  40440e:	4b41      	ldr	r3, [pc, #260]	; (404514 <ip_input+0x24c>)
  404410:	681b      	ldr	r3, [r3, #0]
  404412:	6839      	ldr	r1, [r7, #0]
  404414:	4618      	mov	r0, r3
  404416:	4b40      	ldr	r3, [pc, #256]	; (404518 <ip_input+0x250>)
  404418:	4798      	blx	r3
  40441a:	4603      	mov	r3, r0
  40441c:	2b00      	cmp	r3, #0
  40441e:	d105      	bne.n	40442c <ip_input+0x164>
         (ip_addr_ismulticast(&current_iphdr_src))) {
  404420:	4b3c      	ldr	r3, [pc, #240]	; (404514 <ip_input+0x24c>)
  404422:	681b      	ldr	r3, [r3, #0]
  404424:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
  /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
  if (check_ip_src && !ip_addr_isany(&current_iphdr_src))
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {  if ((ip_addr_isbroadcast(&current_iphdr_src, inp)) ||
  404428:	2be0      	cmp	r3, #224	; 0xe0
  40442a:	d104      	bne.n	404436 <ip_input+0x16e>
         (ip_addr_ismulticast(&current_iphdr_src))) {
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
  40442c:	6878      	ldr	r0, [r7, #4]
  40442e:	4b34      	ldr	r3, [pc, #208]	; (404500 <ip_input+0x238>)
  404430:	4798      	blx	r3
      IP_STATS_INC(ip.drop);
      snmp_inc_ipinaddrerrors();
      snmp_inc_ipindiscards();
      return ERR_OK;
  404432:	2300      	movs	r3, #0
  404434:	e060      	b.n	4044f8 <ip_input+0x230>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
  404436:	69bb      	ldr	r3, [r7, #24]
  404438:	2b00      	cmp	r3, #0
  40443a:	d104      	bne.n	404446 <ip_input+0x17e>
#endif /* IP_FORWARD */
    {
      snmp_inc_ipinaddrerrors();
      snmp_inc_ipindiscards();
    }
    pbuf_free(p);
  40443c:	6878      	ldr	r0, [r7, #4]
  40443e:	4b30      	ldr	r3, [pc, #192]	; (404500 <ip_input+0x238>)
  404440:	4798      	blx	r3
    return ERR_OK;
  404442:	2300      	movs	r3, #0
  404444:	e058      	b.n	4044f8 <ip_input+0x230>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
  404446:	69fb      	ldr	r3, [r7, #28]
  404448:	88db      	ldrh	r3, [r3, #6]
  40444a:	b29b      	uxth	r3, r3
  40444c:	461a      	mov	r2, r3
  40444e:	f64f 733f 	movw	r3, #65343	; 0xff3f
  404452:	4013      	ands	r3, r2
  404454:	2b00      	cmp	r3, #0
  404456:	d00b      	beq.n	404470 <ip_input+0x1a8>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip_reass()\n",
      ntohs(IPH_ID(iphdr)), p->tot_len, ntohs(IPH_LEN(iphdr)), !!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8));
    /* reassemble the packet*/
    p = ip_reass(p);
  404458:	6878      	ldr	r0, [r7, #4]
  40445a:	4b31      	ldr	r3, [pc, #196]	; (404520 <ip_input+0x258>)
  40445c:	4798      	blx	r3
  40445e:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
  404460:	687b      	ldr	r3, [r7, #4]
  404462:	2b00      	cmp	r3, #0
  404464:	d101      	bne.n	40446a <ip_input+0x1a2>
      return ERR_OK;
  404466:	2300      	movs	r3, #0
  404468:	e046      	b.n	4044f8 <ip_input+0x230>
    }
    iphdr = (struct ip_hdr *)p->payload;
  40446a:	687b      	ldr	r3, [r7, #4]
  40446c:	685b      	ldr	r3, [r3, #4]
  40446e:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip_input: \n"));
  ip_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  current_netif = inp;
  404470:	4a2c      	ldr	r2, [pc, #176]	; (404524 <ip_input+0x25c>)
  404472:	683b      	ldr	r3, [r7, #0]
  404474:	6013      	str	r3, [r2, #0]
  current_header = iphdr;
  404476:	4a2c      	ldr	r2, [pc, #176]	; (404528 <ip_input+0x260>)
  404478:	69fb      	ldr	r3, [r7, #28]
  40447a:	6013      	str	r3, [r2, #0]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    switch (IPH_PROTO(iphdr)) {
  40447c:	69fb      	ldr	r3, [r7, #28]
  40447e:	7a5b      	ldrb	r3, [r3, #9]
  404480:	2b06      	cmp	r3, #6
  404482:	d009      	beq.n	404498 <ip_input+0x1d0>
  404484:	2b11      	cmp	r3, #17
  404486:	d002      	beq.n	40448e <ip_input+0x1c6>
  404488:	2b01      	cmp	r3, #1
  40448a:	d00a      	beq.n	4044a2 <ip_input+0x1da>
  40448c:	e00e      	b.n	4044ac <ip_input+0x1e4>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      snmp_inc_ipindelivers();
      udp_input(p, inp);
  40448e:	6839      	ldr	r1, [r7, #0]
  404490:	6878      	ldr	r0, [r7, #4]
  404492:	4b26      	ldr	r3, [pc, #152]	; (40452c <ip_input+0x264>)
  404494:	4798      	blx	r3
      break;
  404496:	e022      	b.n	4044de <ip_input+0x216>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      snmp_inc_ipindelivers();
      tcp_input(p, inp);
  404498:	6839      	ldr	r1, [r7, #0]
  40449a:	6878      	ldr	r0, [r7, #4]
  40449c:	4b24      	ldr	r3, [pc, #144]	; (404530 <ip_input+0x268>)
  40449e:	4798      	blx	r3
      break;
  4044a0:	e01d      	b.n	4044de <ip_input+0x216>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      snmp_inc_ipindelivers();
      icmp_input(p, inp);
  4044a2:	6839      	ldr	r1, [r7, #0]
  4044a4:	6878      	ldr	r0, [r7, #4]
  4044a6:	4b23      	ldr	r3, [pc, #140]	; (404534 <ip_input+0x26c>)
  4044a8:	4798      	blx	r3
      break;
  4044aa:	e018      	b.n	4044de <ip_input+0x216>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip_addr_isbroadcast(&current_iphdr_dest, inp) &&
  4044ac:	4b18      	ldr	r3, [pc, #96]	; (404510 <ip_input+0x248>)
  4044ae:	681b      	ldr	r3, [r3, #0]
  4044b0:	6839      	ldr	r1, [r7, #0]
  4044b2:	4618      	mov	r0, r3
  4044b4:	4b18      	ldr	r3, [pc, #96]	; (404518 <ip_input+0x250>)
  4044b6:	4798      	blx	r3
  4044b8:	4603      	mov	r3, r0
  4044ba:	2b00      	cmp	r3, #0
  4044bc:	d10c      	bne.n	4044d8 <ip_input+0x210>
          !ip_addr_ismulticast(&current_iphdr_dest)) {
  4044be:	4b14      	ldr	r3, [pc, #80]	; (404510 <ip_input+0x248>)
  4044c0:	681b      	ldr	r3, [r3, #0]
  4044c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip_addr_isbroadcast(&current_iphdr_dest, inp) &&
  4044c6:	2be0      	cmp	r3, #224	; 0xe0
  4044c8:	d006      	beq.n	4044d8 <ip_input+0x210>
          !ip_addr_ismulticast(&current_iphdr_dest)) {
        p->payload = iphdr;
  4044ca:	687b      	ldr	r3, [r7, #4]
  4044cc:	69fa      	ldr	r2, [r7, #28]
  4044ce:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
  4044d0:	2102      	movs	r1, #2
  4044d2:	6878      	ldr	r0, [r7, #4]
  4044d4:	4b18      	ldr	r3, [pc, #96]	; (404538 <ip_input+0x270>)
  4044d6:	4798      	blx	r3
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
  4044d8:	6878      	ldr	r0, [r7, #4]
  4044da:	4b09      	ldr	r3, [pc, #36]	; (404500 <ip_input+0x238>)
  4044dc:	4798      	blx	r3
      IP_STATS_INC(ip.drop);
      snmp_inc_ipinunknownprotos();
    }
  }

  current_netif = NULL;
  4044de:	4b11      	ldr	r3, [pc, #68]	; (404524 <ip_input+0x25c>)
  4044e0:	2200      	movs	r2, #0
  4044e2:	601a      	str	r2, [r3, #0]
  current_header = NULL;
  4044e4:	4b10      	ldr	r3, [pc, #64]	; (404528 <ip_input+0x260>)
  4044e6:	2200      	movs	r2, #0
  4044e8:	601a      	str	r2, [r3, #0]
  ip_addr_set_any(&current_iphdr_src);
  4044ea:	4b0a      	ldr	r3, [pc, #40]	; (404514 <ip_input+0x24c>)
  4044ec:	2200      	movs	r2, #0
  4044ee:	601a      	str	r2, [r3, #0]
  ip_addr_set_any(&current_iphdr_dest);
  4044f0:	4b07      	ldr	r3, [pc, #28]	; (404510 <ip_input+0x248>)
  4044f2:	2200      	movs	r2, #0
  4044f4:	601a      	str	r2, [r3, #0]

  return ERR_OK;
  4044f6:	2300      	movs	r3, #0
}
  4044f8:	4618      	mov	r0, r3
  4044fa:	3720      	adds	r7, #32
  4044fc:	46bd      	mov	sp, r7
  4044fe:	bd80      	pop	{r7, pc}
  404500:	00406069 	.word	0x00406069
  404504:	00402335 	.word	0x00402335
  404508:	00404191 	.word	0x00404191
  40450c:	00405ed1 	.word	0x00405ed1
  404510:	20403954 	.word	0x20403954
  404514:	2040394c 	.word	0x2040394c
  404518:	00404745 	.word	0x00404745
  40451c:	20404970 	.word	0x20404970
  404520:	00404d89 	.word	0x00404d89
  404524:	20403950 	.word	0x20403950
  404528:	20403958 	.word	0x20403958
  40452c:	0040aa99 	.word	0x0040aa99
  404530:	004076c9 	.word	0x004076c9
  404534:	00403c91 	.word	0x00403c91
  404538:	00403eb9 	.word	0x00403eb9

0040453c <ip_output_if>:
 */
err_t
ip_output_if(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
  40453c:	b580      	push	{r7, lr}
  40453e:	b088      	sub	sp, #32
  404540:	af00      	add	r7, sp, #0
  404542:	60f8      	str	r0, [r7, #12]
  404544:	60b9      	str	r1, [r7, #8]
  404546:	607a      	str	r2, [r7, #4]
  404548:	70fb      	strb	r3, [r7, #3]
{
#endif /* IP_OPTIONS_SEND */
  struct ip_hdr *iphdr;
  ip_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
  40454a:	2300      	movs	r3, #0
  40454c:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("p->ref == 1", p->ref == 1);

  snmp_inc_ipoutrequests();

  /* Should the IP header be generated or is it already included in p? */
  if (dest != IP_HDRINCL) {
  40454e:	687b      	ldr	r3, [r7, #4]
  404550:	2b00      	cmp	r3, #0
  404552:	f000 80a0 	beq.w	404696 <ip_output_if+0x15a>
    u16_t ip_hlen = IP_HLEN;
  404556:	2314      	movs	r3, #20
  404558:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
  40455a:	2114      	movs	r1, #20
  40455c:	68f8      	ldr	r0, [r7, #12]
  40455e:	4b60      	ldr	r3, [pc, #384]	; (4046e0 <ip_output_if+0x1a4>)
  404560:	4798      	blx	r3
  404562:	4603      	mov	r3, r0
  404564:	2b00      	cmp	r3, #0
  404566:	d002      	beq.n	40456e <ip_output_if+0x32>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      snmp_inc_ipoutdiscards();
      return ERR_BUF;
  404568:	f06f 0301 	mvn.w	r3, #1
  40456c:	e0b4      	b.n	4046d8 <ip_output_if+0x19c>
    }

    iphdr = (struct ip_hdr *)p->payload;
  40456e:	68fb      	ldr	r3, [r7, #12]
  404570:	685b      	ldr	r3, [r3, #4]
  404572:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
  404574:	697b      	ldr	r3, [r7, #20]
  404576:	78fa      	ldrb	r2, [r7, #3]
  404578:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
  40457a:	697b      	ldr	r3, [r7, #20]
  40457c:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
  404580:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += LWIP_MAKE_U16(proto, ttl);
  404582:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
  404586:	021a      	lsls	r2, r3, #8
  404588:	78fb      	ldrb	r3, [r7, #3]
  40458a:	4313      	orrs	r3, r2
  40458c:	461a      	mov	r2, r3
  40458e:	69fb      	ldr	r3, [r7, #28]
  404590:	4413      	add	r3, r2
  404592:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip_addr_copy(iphdr->dest, *dest);
  404594:	687b      	ldr	r3, [r7, #4]
  404596:	681a      	ldr	r2, [r3, #0]
  404598:	697b      	ldr	r3, [r7, #20]
  40459a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
  40459c:	697b      	ldr	r3, [r7, #20]
  40459e:	691b      	ldr	r3, [r3, #16]
  4045a0:	b29b      	uxth	r3, r3
  4045a2:	69fa      	ldr	r2, [r7, #28]
  4045a4:	4413      	add	r3, r2
  4045a6:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
  4045a8:	697b      	ldr	r3, [r7, #20]
  4045aa:	691b      	ldr	r3, [r3, #16]
  4045ac:	0c1b      	lsrs	r3, r3, #16
  4045ae:	69fa      	ldr	r2, [r7, #28]
  4045b0:	4413      	add	r3, r2
  4045b2:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
  4045b4:	8b7b      	ldrh	r3, [r7, #26]
  4045b6:	089b      	lsrs	r3, r3, #2
  4045b8:	b29b      	uxth	r3, r3
  4045ba:	b2db      	uxtb	r3, r3
  4045bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4045c0:	b2da      	uxtb	r2, r3
  4045c2:	697b      	ldr	r3, [r7, #20]
  4045c4:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
  4045c6:	697b      	ldr	r3, [r7, #20]
  4045c8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
  4045cc:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += LWIP_MAKE_U16(tos, iphdr->_v_hl);
  4045ce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
  4045d2:	021b      	lsls	r3, r3, #8
  4045d4:	697a      	ldr	r2, [r7, #20]
  4045d6:	7812      	ldrb	r2, [r2, #0]
  4045d8:	4313      	orrs	r3, r2
  4045da:	461a      	mov	r2, r3
  4045dc:	69fb      	ldr	r3, [r7, #28]
  4045de:	4413      	add	r3, r2
  4045e0:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, htons(p->tot_len));
  4045e2:	68fb      	ldr	r3, [r7, #12]
  4045e4:	891b      	ldrh	r3, [r3, #8]
  4045e6:	4618      	mov	r0, r3
  4045e8:	4b3e      	ldr	r3, [pc, #248]	; (4046e4 <ip_output_if+0x1a8>)
  4045ea:	4798      	blx	r3
  4045ec:	4603      	mov	r3, r0
  4045ee:	461a      	mov	r2, r3
  4045f0:	697b      	ldr	r3, [r7, #20]
  4045f2:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
  4045f4:	697b      	ldr	r3, [r7, #20]
  4045f6:	885b      	ldrh	r3, [r3, #2]
  4045f8:	b29b      	uxth	r3, r3
  4045fa:	461a      	mov	r2, r3
  4045fc:	69fb      	ldr	r3, [r7, #28]
  4045fe:	4413      	add	r3, r2
  404600:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
  404602:	697b      	ldr	r3, [r7, #20]
  404604:	2200      	movs	r2, #0
  404606:	719a      	strb	r2, [r3, #6]
  404608:	2200      	movs	r2, #0
  40460a:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, htons(ip_id));
  40460c:	4b36      	ldr	r3, [pc, #216]	; (4046e8 <ip_output_if+0x1ac>)
  40460e:	881b      	ldrh	r3, [r3, #0]
  404610:	4618      	mov	r0, r3
  404612:	4b34      	ldr	r3, [pc, #208]	; (4046e4 <ip_output_if+0x1a8>)
  404614:	4798      	blx	r3
  404616:	4603      	mov	r3, r0
  404618:	461a      	mov	r2, r3
  40461a:	697b      	ldr	r3, [r7, #20]
  40461c:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
  40461e:	697b      	ldr	r3, [r7, #20]
  404620:	889b      	ldrh	r3, [r3, #4]
  404622:	b29b      	uxth	r3, r3
  404624:	461a      	mov	r2, r3
  404626:	69fb      	ldr	r3, [r7, #28]
  404628:	4413      	add	r3, r2
  40462a:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
  40462c:	4b2e      	ldr	r3, [pc, #184]	; (4046e8 <ip_output_if+0x1ac>)
  40462e:	881b      	ldrh	r3, [r3, #0]
  404630:	3301      	adds	r3, #1
  404632:	b29a      	uxth	r2, r3
  404634:	4b2c      	ldr	r3, [pc, #176]	; (4046e8 <ip_output_if+0x1ac>)
  404636:	801a      	strh	r2, [r3, #0]

    if (ip_addr_isany(src)) {
  404638:	68bb      	ldr	r3, [r7, #8]
  40463a:	2b00      	cmp	r3, #0
  40463c:	d003      	beq.n	404646 <ip_output_if+0x10a>
  40463e:	68bb      	ldr	r3, [r7, #8]
  404640:	681b      	ldr	r3, [r3, #0]
  404642:	2b00      	cmp	r3, #0
  404644:	d104      	bne.n	404650 <ip_output_if+0x114>
      ip_addr_copy(iphdr->src, netif->ip_addr);
  404646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  404648:	685a      	ldr	r2, [r3, #4]
  40464a:	697b      	ldr	r3, [r7, #20]
  40464c:	60da      	str	r2, [r3, #12]
  40464e:	e003      	b.n	404658 <ip_output_if+0x11c>
    } else {
      /* src cannot be NULL here */
      ip_addr_copy(iphdr->src, *src);
  404650:	68bb      	ldr	r3, [r7, #8]
  404652:	681a      	ldr	r2, [r3, #0]
  404654:	697b      	ldr	r3, [r7, #20]
  404656:	60da      	str	r2, [r3, #12]
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
  404658:	697b      	ldr	r3, [r7, #20]
  40465a:	68db      	ldr	r3, [r3, #12]
  40465c:	b29b      	uxth	r3, r3
  40465e:	69fa      	ldr	r2, [r7, #28]
  404660:	4413      	add	r3, r2
  404662:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
  404664:	697b      	ldr	r3, [r7, #20]
  404666:	68db      	ldr	r3, [r3, #12]
  404668:	0c1b      	lsrs	r3, r3, #16
  40466a:	69fa      	ldr	r2, [r7, #28]
  40466c:	4413      	add	r3, r2
  40466e:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
  404670:	69fb      	ldr	r3, [r7, #28]
  404672:	0c1a      	lsrs	r2, r3, #16
  404674:	69fb      	ldr	r3, [r7, #28]
  404676:	b29b      	uxth	r3, r3
  404678:	4413      	add	r3, r2
  40467a:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + chk_sum;
  40467c:	69fb      	ldr	r3, [r7, #28]
  40467e:	0c1b      	lsrs	r3, r3, #16
  404680:	69fa      	ldr	r2, [r7, #28]
  404682:	4413      	add	r3, r2
  404684:	61fb      	str	r3, [r7, #28]
    chk_sum = ~chk_sum;
  404686:	69fb      	ldr	r3, [r7, #28]
  404688:	43db      	mvns	r3, r3
  40468a:	61fb      	str	r3, [r7, #28]
    iphdr->_chksum = chk_sum; /* network order */
  40468c:	69fb      	ldr	r3, [r7, #28]
  40468e:	b29a      	uxth	r2, r3
  404690:	697b      	ldr	r3, [r7, #20]
  404692:	815a      	strh	r2, [r3, #10]
  404694:	e008      	b.n	4046a8 <ip_output_if+0x16c>
    IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, ip_hlen));
#endif
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
  404696:	68fb      	ldr	r3, [r7, #12]
  404698:	685b      	ldr	r3, [r3, #4]
  40469a:	617b      	str	r3, [r7, #20]
    ip_addr_copy(dest_addr, iphdr->dest);
  40469c:	697b      	ldr	r3, [r7, #20]
  40469e:	691b      	ldr	r3, [r3, #16]
  4046a0:	613b      	str	r3, [r7, #16]
    dest = &dest_addr;
  4046a2:	f107 0310 	add.w	r3, r7, #16
  4046a6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_IGMP */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
  4046a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  4046aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
  4046ac:	2b00      	cmp	r3, #0
  4046ae:	d00c      	beq.n	4046ca <ip_output_if+0x18e>
  4046b0:	68fb      	ldr	r3, [r7, #12]
  4046b2:	891a      	ldrh	r2, [r3, #8]
  4046b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  4046b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
  4046b8:	429a      	cmp	r2, r3
  4046ba:	d906      	bls.n	4046ca <ip_output_if+0x18e>
    return ip_frag(p, netif, dest);
  4046bc:	687a      	ldr	r2, [r7, #4]
  4046be:	6b39      	ldr	r1, [r7, #48]	; 0x30
  4046c0:	68f8      	ldr	r0, [r7, #12]
  4046c2:	4b0a      	ldr	r3, [pc, #40]	; (4046ec <ip_output_if+0x1b0>)
  4046c4:	4798      	blx	r3
  4046c6:	4603      	mov	r3, r0
  4046c8:	e006      	b.n	4046d8 <ip_output_if+0x19c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("netif->output()"));
  return netif->output(netif, p, dest);
  4046ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  4046cc:	695b      	ldr	r3, [r3, #20]
  4046ce:	687a      	ldr	r2, [r7, #4]
  4046d0:	68f9      	ldr	r1, [r7, #12]
  4046d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
  4046d4:	4798      	blx	r3
  4046d6:	4603      	mov	r3, r0
}
  4046d8:	4618      	mov	r0, r3
  4046da:	3720      	adds	r7, #32
  4046dc:	46bd      	mov	sp, r7
  4046de:	bd80      	pop	{r7, pc}
  4046e0:	00405f8d 	.word	0x00405f8d
  4046e4:	00402309 	.word	0x00402309
  4046e8:	20400a74 	.word	0x20400a74
  4046ec:	00404ffd 	.word	0x00404ffd

004046f0 <ip_output>:
 *         see ip_output_if() for more return values
 */
err_t
ip_output(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest,
          u8_t ttl, u8_t tos, u8_t proto)
{
  4046f0:	b590      	push	{r4, r7, lr}
  4046f2:	b08b      	sub	sp, #44	; 0x2c
  4046f4:	af04      	add	r7, sp, #16
  4046f6:	60f8      	str	r0, [r7, #12]
  4046f8:	60b9      	str	r1, [r7, #8]
  4046fa:	607a      	str	r2, [r7, #4]
  4046fc:	70fb      	strb	r3, [r7, #3]

  /* pbufs passed to IP must have a ref-count of 1 as their payload pointer
     gets altered as the packet is passed down the stack */
  LWIP_ASSERT("p->ref == 1", p->ref == 1);

  if ((netif = ip_route(dest)) == NULL) {
  4046fe:	6878      	ldr	r0, [r7, #4]
  404700:	4b0e      	ldr	r3, [pc, #56]	; (40473c <ip_output+0x4c>)
  404702:	4798      	blx	r3
  404704:	6178      	str	r0, [r7, #20]
  404706:	697b      	ldr	r3, [r7, #20]
  404708:	2b00      	cmp	r3, #0
  40470a:	d102      	bne.n	404712 <ip_output+0x22>
    LWIP_DEBUGF(IP_DEBUG, ("ip_output: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    return ERR_RTE;
  40470c:	f06f 0303 	mvn.w	r3, #3
  404710:	e00f      	b.n	404732 <ip_output+0x42>
  }

  return ip_output_if(p, src, dest, ttl, tos, proto, netif);
  404712:	78fa      	ldrb	r2, [r7, #3]
  404714:	697b      	ldr	r3, [r7, #20]
  404716:	9302      	str	r3, [sp, #8]
  404718:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
  40471c:	9301      	str	r3, [sp, #4]
  40471e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
  404722:	9300      	str	r3, [sp, #0]
  404724:	4613      	mov	r3, r2
  404726:	687a      	ldr	r2, [r7, #4]
  404728:	68b9      	ldr	r1, [r7, #8]
  40472a:	68f8      	ldr	r0, [r7, #12]
  40472c:	4c04      	ldr	r4, [pc, #16]	; (404740 <ip_output+0x50>)
  40472e:	47a0      	blx	r4
  404730:	4603      	mov	r3, r0
}
  404732:	4618      	mov	r0, r3
  404734:	371c      	adds	r7, #28
  404736:	46bd      	mov	sp, r7
  404738:	bd90      	pop	{r4, r7, pc}
  40473a:	bf00      	nop
  40473c:	00404251 	.word	0x00404251
  404740:	0040453d 	.word	0x0040453d

00404744 <ip4_addr_isbroadcast>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast(u32_t addr, const struct netif *netif)
{
  404744:	b480      	push	{r7}
  404746:	b085      	sub	sp, #20
  404748:	af00      	add	r7, sp, #0
  40474a:	6078      	str	r0, [r7, #4]
  40474c:	6039      	str	r1, [r7, #0]
  ip_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
  40474e:	687b      	ldr	r3, [r7, #4]
  404750:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
  404752:	687b      	ldr	r3, [r7, #4]
  404754:	f1b3 3fff 	cmp.w	r3, #4294967295
  404758:	d002      	beq.n	404760 <ip4_addr_isbroadcast+0x1c>
  40475a:	687b      	ldr	r3, [r7, #4]
  40475c:	2b00      	cmp	r3, #0
  40475e:	d101      	bne.n	404764 <ip4_addr_isbroadcast+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
  404760:	2301      	movs	r3, #1
  404762:	e025      	b.n	4047b0 <ip4_addr_isbroadcast+0x6c>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
  404764:	683b      	ldr	r3, [r7, #0]
  404766:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
  40476a:	f003 0302 	and.w	r3, r3, #2
  40476e:	2b00      	cmp	r3, #0
  404770:	d101      	bne.n	404776 <ip4_addr_isbroadcast+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
  404772:	2300      	movs	r3, #0
  404774:	e01c      	b.n	4047b0 <ip4_addr_isbroadcast+0x6c>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(&netif->ip_addr)) {
  404776:	683b      	ldr	r3, [r7, #0]
  404778:	685a      	ldr	r2, [r3, #4]
  40477a:	687b      	ldr	r3, [r7, #4]
  40477c:	429a      	cmp	r2, r3
  40477e:	d101      	bne.n	404784 <ip4_addr_isbroadcast+0x40>
    return 0;
  404780:	2300      	movs	r3, #0
  404782:	e015      	b.n	4047b0 <ip4_addr_isbroadcast+0x6c>
  /*  on the same (sub) network... */
  } else if (ip_addr_netcmp(&ipaddr, &(netif->ip_addr), &(netif->netmask))
  404784:	68fa      	ldr	r2, [r7, #12]
  404786:	683b      	ldr	r3, [r7, #0]
  404788:	685b      	ldr	r3, [r3, #4]
  40478a:	405a      	eors	r2, r3
  40478c:	683b      	ldr	r3, [r7, #0]
  40478e:	689b      	ldr	r3, [r3, #8]
  404790:	4013      	ands	r3, r2
  404792:	2b00      	cmp	r3, #0
  404794:	d10b      	bne.n	4047ae <ip4_addr_isbroadcast+0x6a>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(&netif->netmask)) ==
  404796:	683b      	ldr	r3, [r7, #0]
  404798:	689b      	ldr	r3, [r3, #8]
  40479a:	43da      	mvns	r2, r3
  40479c:	687b      	ldr	r3, [r7, #4]
  40479e:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(&netif->netmask)))) {
  4047a0:	683b      	ldr	r3, [r7, #0]
  4047a2:	689b      	ldr	r3, [r3, #8]
  4047a4:	43db      	mvns	r3, r3
  } else if (addr == ip4_addr_get_u32(&netif->ip_addr)) {
    return 0;
  /*  on the same (sub) network... */
  } else if (ip_addr_netcmp(&ipaddr, &(netif->ip_addr), &(netif->netmask))
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(&netif->netmask)) ==
  4047a6:	429a      	cmp	r2, r3
  4047a8:	d101      	bne.n	4047ae <ip4_addr_isbroadcast+0x6a>
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(&netif->netmask)))) {
    /* => network broadcast address */
    return 1;
  4047aa:	2301      	movs	r3, #1
  4047ac:	e000      	b.n	4047b0 <ip4_addr_isbroadcast+0x6c>
  } else {
    return 0;
  4047ae:	2300      	movs	r3, #0
  }
}
  4047b0:	4618      	mov	r0, r3
  4047b2:	3714      	adds	r7, #20
  4047b4:	46bd      	mov	sp, r7
  4047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4047ba:	4770      	bx	lr

004047bc <ipaddr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         represenation of addr
 */
char *
ipaddr_ntoa(const ip_addr_t *addr)
{
  4047bc:	b580      	push	{r7, lr}
  4047be:	b082      	sub	sp, #8
  4047c0:	af00      	add	r7, sp, #0
  4047c2:	6078      	str	r0, [r7, #4]
  static char str[16];
  return ipaddr_ntoa_r(addr, str, 16);
  4047c4:	2210      	movs	r2, #16
  4047c6:	4904      	ldr	r1, [pc, #16]	; (4047d8 <ipaddr_ntoa+0x1c>)
  4047c8:	6878      	ldr	r0, [r7, #4]
  4047ca:	4b04      	ldr	r3, [pc, #16]	; (4047dc <ipaddr_ntoa+0x20>)
  4047cc:	4798      	blx	r3
  4047ce:	4603      	mov	r3, r0
}
  4047d0:	4618      	mov	r0, r3
  4047d2:	3708      	adds	r7, #8
  4047d4:	46bd      	mov	sp, r7
  4047d6:	bd80      	pop	{r7, pc}
  4047d8:	20400a78 	.word	0x20400a78
  4047dc:	004047e1 	.word	0x004047e1

004047e0 <ipaddr_ntoa_r>:
 * @param buflen length of buf
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *ipaddr_ntoa_r(const ip_addr_t *addr, char *buf, int buflen)
{
  4047e0:	b480      	push	{r7}
  4047e2:	b08d      	sub	sp, #52	; 0x34
  4047e4:	af00      	add	r7, sp, #0
  4047e6:	60f8      	str	r0, [r7, #12]
  4047e8:	60b9      	str	r1, [r7, #8]
  4047ea:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
  4047ec:	2300      	movs	r3, #0
  4047ee:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
  4047f0:	68fb      	ldr	r3, [r7, #12]
  4047f2:	681b      	ldr	r3, [r3, #0]
  4047f4:	61bb      	str	r3, [r7, #24]

  rp = buf;
  4047f6:	68bb      	ldr	r3, [r7, #8]
  4047f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
  4047fa:	f107 0318 	add.w	r3, r7, #24
  4047fe:	62bb      	str	r3, [r7, #40]	; 0x28
  for(n = 0; n < 4; n++) {
  404800:	2300      	movs	r3, #0
  404802:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  404806:	e059      	b.n	4048bc <ipaddr_ntoa_r+0xdc>
    i = 0;
  404808:	2300      	movs	r3, #0
  40480a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
  40480e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404810:	781a      	ldrb	r2, [r3, #0]
  404812:	4b33      	ldr	r3, [pc, #204]	; (4048e0 <ipaddr_ntoa_r+0x100>)
  404814:	fba3 1302 	umull	r1, r3, r3, r2
  404818:	08d9      	lsrs	r1, r3, #3
  40481a:	460b      	mov	r3, r1
  40481c:	009b      	lsls	r3, r3, #2
  40481e:	440b      	add	r3, r1
  404820:	005b      	lsls	r3, r3, #1
  404822:	1ad3      	subs	r3, r2, r3
  404824:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
  404826:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404828:	781b      	ldrb	r3, [r3, #0]
  40482a:	4a2d      	ldr	r2, [pc, #180]	; (4048e0 <ipaddr_ntoa_r+0x100>)
  40482c:	fba2 2303 	umull	r2, r3, r2, r3
  404830:	08db      	lsrs	r3, r3, #3
  404832:	b2da      	uxtb	r2, r3
  404834:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404836:	701a      	strb	r2, [r3, #0]
      inv[i++] = '0' + rem;
  404838:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
  40483c:	1c5a      	adds	r2, r3, #1
  40483e:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
  404842:	4619      	mov	r1, r3
  404844:	7ffb      	ldrb	r3, [r7, #31]
  404846:	3330      	adds	r3, #48	; 0x30
  404848:	b2da      	uxtb	r2, r3
  40484a:	f107 0330 	add.w	r3, r7, #48	; 0x30
  40484e:	440b      	add	r3, r1
  404850:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while(*ap);
  404854:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404856:	781b      	ldrb	r3, [r3, #0]
  404858:	2b00      	cmp	r3, #0
  40485a:	d1d8      	bne.n	40480e <ipaddr_ntoa_r+0x2e>
    while(i--) {
  40485c:	e012      	b.n	404884 <ipaddr_ntoa_r+0xa4>
      if (len++ >= buflen) {
  40485e:	6a3b      	ldr	r3, [r7, #32]
  404860:	1c5a      	adds	r2, r3, #1
  404862:	623a      	str	r2, [r7, #32]
  404864:	687a      	ldr	r2, [r7, #4]
  404866:	4293      	cmp	r3, r2
  404868:	db01      	blt.n	40486e <ipaddr_ntoa_r+0x8e>
        return NULL;
  40486a:	2300      	movs	r3, #0
  40486c:	e031      	b.n	4048d2 <ipaddr_ntoa_r+0xf2>
      }
      *rp++ = inv[i];
  40486e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  404870:	1c5a      	adds	r2, r3, #1
  404872:	62fa      	str	r2, [r7, #44]	; 0x2c
  404874:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
  404878:	f107 0130 	add.w	r1, r7, #48	; 0x30
  40487c:	440a      	add	r2, r1
  40487e:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
  404882:	701a      	strb	r2, [r3, #0]
    do {
      rem = *ap % (u8_t)10;
      *ap /= (u8_t)10;
      inv[i++] = '0' + rem;
    } while(*ap);
    while(i--) {
  404884:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
  404888:	1e5a      	subs	r2, r3, #1
  40488a:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
  40488e:	2b00      	cmp	r3, #0
  404890:	d1e5      	bne.n	40485e <ipaddr_ntoa_r+0x7e>
      if (len++ >= buflen) {
        return NULL;
      }
      *rp++ = inv[i];
    }
    if (len++ >= buflen) {
  404892:	6a3b      	ldr	r3, [r7, #32]
  404894:	1c5a      	adds	r2, r3, #1
  404896:	623a      	str	r2, [r7, #32]
  404898:	687a      	ldr	r2, [r7, #4]
  40489a:	4293      	cmp	r3, r2
  40489c:	db01      	blt.n	4048a2 <ipaddr_ntoa_r+0xc2>
      return NULL;
  40489e:	2300      	movs	r3, #0
  4048a0:	e017      	b.n	4048d2 <ipaddr_ntoa_r+0xf2>
    }
    *rp++ = '.';
  4048a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4048a4:	1c5a      	adds	r2, r3, #1
  4048a6:	62fa      	str	r2, [r7, #44]	; 0x2c
  4048a8:	222e      	movs	r2, #46	; 0x2e
  4048aa:	701a      	strb	r2, [r3, #0]
    ap++;
  4048ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4048ae:	3301      	adds	r3, #1
  4048b0:	62bb      	str	r3, [r7, #40]	; 0x28

  s_addr = ip4_addr_get_u32(addr);

  rp = buf;
  ap = (u8_t *)&s_addr;
  for(n = 0; n < 4; n++) {
  4048b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  4048b6:	3301      	adds	r3, #1
  4048b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  4048bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  4048c0:	2b03      	cmp	r3, #3
  4048c2:	d9a1      	bls.n	404808 <ipaddr_ntoa_r+0x28>
      return NULL;
    }
    *rp++ = '.';
    ap++;
  }
  *--rp = 0;
  4048c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4048c6:	3b01      	subs	r3, #1
  4048c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  4048ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4048cc:	2200      	movs	r2, #0
  4048ce:	701a      	strb	r2, [r3, #0]
  return buf;
  4048d0:	68bb      	ldr	r3, [r7, #8]
}
  4048d2:	4618      	mov	r0, r3
  4048d4:	3734      	adds	r7, #52	; 0x34
  4048d6:	46bd      	mov	sp, r7
  4048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4048dc:	4770      	bx	lr
  4048de:	bf00      	nop
  4048e0:	cccccccd 	.word	0xcccccccd

004048e4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
  4048e4:	b580      	push	{r7, lr}
  4048e6:	b084      	sub	sp, #16
  4048e8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
  4048ea:	2300      	movs	r3, #0
  4048ec:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
  4048ee:	4b12      	ldr	r3, [pc, #72]	; (404938 <ip_reass_tmr+0x54>)
  4048f0:	681b      	ldr	r3, [r3, #0]
  4048f2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
  4048f4:	e018      	b.n	404928 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
  4048f6:	68fb      	ldr	r3, [r7, #12]
  4048f8:	7fdb      	ldrb	r3, [r3, #31]
  4048fa:	2b00      	cmp	r3, #0
  4048fc:	d00b      	beq.n	404916 <ip_reass_tmr+0x32>
      r->timer--;
  4048fe:	68fb      	ldr	r3, [r7, #12]
  404900:	7fdb      	ldrb	r3, [r3, #31]
  404902:	3b01      	subs	r3, #1
  404904:	b2da      	uxtb	r2, r3
  404906:	68fb      	ldr	r3, [r7, #12]
  404908:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
  40490a:	68fb      	ldr	r3, [r7, #12]
  40490c:	60bb      	str	r3, [r7, #8]
      r = r->next;
  40490e:	68fb      	ldr	r3, [r7, #12]
  404910:	681b      	ldr	r3, [r3, #0]
  404912:	60fb      	str	r3, [r7, #12]
  404914:	e008      	b.n	404928 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
  404916:	68fb      	ldr	r3, [r7, #12]
  404918:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
  40491a:	68fb      	ldr	r3, [r7, #12]
  40491c:	681b      	ldr	r3, [r3, #0]
  40491e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
  404920:	68b9      	ldr	r1, [r7, #8]
  404922:	6878      	ldr	r0, [r7, #4]
  404924:	4b05      	ldr	r3, [pc, #20]	; (40493c <ip_reass_tmr+0x58>)
  404926:	4798      	blx	r3
ip_reass_tmr(void)
{
  struct ip_reassdata *r, *prev = NULL;

  r = reassdatagrams;
  while (r != NULL) {
  404928:	68fb      	ldr	r3, [r7, #12]
  40492a:	2b00      	cmp	r3, #0
  40492c:	d1e3      	bne.n	4048f6 <ip_reass_tmr+0x12>
      r = r->next;
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
     }
   }
}
  40492e:	bf00      	nop
  404930:	3710      	adds	r7, #16
  404932:	46bd      	mov	sp, r7
  404934:	bd80      	pop	{r7, pc}
  404936:	bf00      	nop
  404938:	20400a88 	.word	0x20400a88
  40493c:	00404941 	.word	0x00404941

00404940 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
  404940:	b580      	push	{r7, lr}
  404942:	b088      	sub	sp, #32
  404944:	af00      	add	r7, sp, #0
  404946:	6078      	str	r0, [r7, #4]
  404948:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
  40494a:	2300      	movs	r3, #0
  40494c:	83fb      	strh	r3, [r7, #30]
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
  }

  snmp_inc_ipreasmfails();
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
  40494e:	687b      	ldr	r3, [r7, #4]
  404950:	685b      	ldr	r3, [r3, #4]
  404952:	685b      	ldr	r3, [r3, #4]
  404954:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
  404956:	697b      	ldr	r3, [r7, #20]
  404958:	889b      	ldrh	r3, [r3, #4]
  40495a:	b29b      	uxth	r3, r3
  40495c:	2b00      	cmp	r3, #0
  40495e:	d11f      	bne.n	4049a0 <ip_reass_free_complete_datagram+0x60>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
  404960:	687b      	ldr	r3, [r7, #4]
  404962:	685b      	ldr	r3, [r3, #4]
  404964:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
  404966:	697b      	ldr	r3, [r7, #20]
  404968:	681a      	ldr	r2, [r3, #0]
  40496a:	687b      	ldr	r3, [r7, #4]
  40496c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
  40496e:	69bb      	ldr	r3, [r7, #24]
  404970:	6858      	ldr	r0, [r3, #4]
  404972:	687b      	ldr	r3, [r7, #4]
  404974:	3308      	adds	r3, #8
  404976:	2214      	movs	r2, #20
  404978:	4619      	mov	r1, r3
  40497a:	4b1f      	ldr	r3, [pc, #124]	; (4049f8 <ip_reass_free_complete_datagram+0xb8>)
  40497c:	4798      	blx	r3
    icmp_time_exceeded(p, ICMP_TE_FRAG);
  40497e:	2101      	movs	r1, #1
  404980:	69b8      	ldr	r0, [r7, #24]
  404982:	4b1e      	ldr	r3, [pc, #120]	; (4049fc <ip_reass_free_complete_datagram+0xbc>)
  404984:	4798      	blx	r3
    clen = pbuf_clen(p);
  404986:	69b8      	ldr	r0, [r7, #24]
  404988:	4b1d      	ldr	r3, [pc, #116]	; (404a00 <ip_reass_free_complete_datagram+0xc0>)
  40498a:	4798      	blx	r3
  40498c:	4603      	mov	r3, r0
  40498e:	74fb      	strb	r3, [r7, #19]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
    pbufs_freed += clen;
  404990:	7cfb      	ldrb	r3, [r7, #19]
  404992:	b29a      	uxth	r2, r3
  404994:	8bfb      	ldrh	r3, [r7, #30]
  404996:	4413      	add	r3, r2
  404998:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
  40499a:	69b8      	ldr	r0, [r7, #24]
  40499c:	4b19      	ldr	r3, [pc, #100]	; (404a04 <ip_reass_free_complete_datagram+0xc4>)
  40499e:	4798      	blx	r3
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released 
     separately as they have not yet been chained */
  p = ipr->p;
  4049a0:	687b      	ldr	r3, [r7, #4]
  4049a2:	685b      	ldr	r3, [r3, #4]
  4049a4:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
  4049a6:	e014      	b.n	4049d2 <ip_reass_free_complete_datagram+0x92>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
  4049a8:	69bb      	ldr	r3, [r7, #24]
  4049aa:	685b      	ldr	r3, [r3, #4]
  4049ac:	617b      	str	r3, [r7, #20]
    pcur = p;
  4049ae:	69bb      	ldr	r3, [r7, #24]
  4049b0:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
  4049b2:	697b      	ldr	r3, [r7, #20]
  4049b4:	681b      	ldr	r3, [r3, #0]
  4049b6:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
  4049b8:	68f8      	ldr	r0, [r7, #12]
  4049ba:	4b11      	ldr	r3, [pc, #68]	; (404a00 <ip_reass_free_complete_datagram+0xc0>)
  4049bc:	4798      	blx	r3
  4049be:	4603      	mov	r3, r0
  4049c0:	74fb      	strb	r3, [r7, #19]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
    pbufs_freed += clen;
  4049c2:	7cfb      	ldrb	r3, [r7, #19]
  4049c4:	b29a      	uxth	r2, r3
  4049c6:	8bfb      	ldrh	r3, [r7, #30]
  4049c8:	4413      	add	r3, r2
  4049ca:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
  4049cc:	68f8      	ldr	r0, [r7, #12]
  4049ce:	4b0d      	ldr	r3, [pc, #52]	; (404a04 <ip_reass_free_complete_datagram+0xc4>)
  4049d0:	4798      	blx	r3
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released 
     separately as they have not yet been chained */
  p = ipr->p;
  while (p != NULL) {
  4049d2:	69bb      	ldr	r3, [r7, #24]
  4049d4:	2b00      	cmp	r3, #0
  4049d6:	d1e7      	bne.n	4049a8 <ip_reass_free_complete_datagram+0x68>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
    pbufs_freed += clen;
    pbuf_free(pcur);
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
  4049d8:	6839      	ldr	r1, [r7, #0]
  4049da:	6878      	ldr	r0, [r7, #4]
  4049dc:	4b0a      	ldr	r3, [pc, #40]	; (404a08 <ip_reass_free_complete_datagram+0xc8>)
  4049de:	4798      	blx	r3
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
  ip_reass_pbufcount -= pbufs_freed;
  4049e0:	4b0a      	ldr	r3, [pc, #40]	; (404a0c <ip_reass_free_complete_datagram+0xcc>)
  4049e2:	881a      	ldrh	r2, [r3, #0]
  4049e4:	8bfb      	ldrh	r3, [r7, #30]
  4049e6:	1ad3      	subs	r3, r2, r3
  4049e8:	b29a      	uxth	r2, r3
  4049ea:	4b08      	ldr	r3, [pc, #32]	; (404a0c <ip_reass_free_complete_datagram+0xcc>)
  4049ec:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
  4049ee:	8bfb      	ldrh	r3, [r7, #30]
}
  4049f0:	4618      	mov	r0, r3
  4049f2:	3720      	adds	r7, #32
  4049f4:	46bd      	mov	sp, r7
  4049f6:	bd80      	pop	{r7, pc}
  4049f8:	0040d859 	.word	0x0040d859
  4049fc:	00403edd 	.word	0x00403edd
  404a00:	004060f9 	.word	0x004060f9
  404a04:	00406069 	.word	0x00406069
  404a08:	00404b51 	.word	0x00404b51
  404a0c:	20400a8c 	.word	0x20400a8c

00404a10 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
  404a10:	b580      	push	{r7, lr}
  404a12:	b088      	sub	sp, #32
  404a14:	af00      	add	r7, sp, #0
  404a16:	6078      	str	r0, [r7, #4]
  404a18:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev;
  int pbufs_freed = 0, pbufs_freed_current;
  404a1a:	2300      	movs	r3, #0
  404a1c:	613b      	str	r3, [r7, #16]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
  404a1e:	2300      	movs	r3, #0
  404a20:	61bb      	str	r3, [r7, #24]
    prev = NULL;
  404a22:	2300      	movs	r3, #0
  404a24:	617b      	str	r3, [r7, #20]
    other_datagrams = 0;
  404a26:	2300      	movs	r3, #0
  404a28:	60fb      	str	r3, [r7, #12]
    r = reassdatagrams;
  404a2a:	4b26      	ldr	r3, [pc, #152]	; (404ac4 <ip_reass_remove_oldest_datagram+0xb4>)
  404a2c:	681b      	ldr	r3, [r3, #0]
  404a2e:	61fb      	str	r3, [r7, #28]
    while (r != NULL) {
  404a30:	e02c      	b.n	404a8c <ip_reass_remove_oldest_datagram+0x7c>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
  404a32:	69fb      	ldr	r3, [r7, #28]
  404a34:	695a      	ldr	r2, [r3, #20]
  404a36:	687b      	ldr	r3, [r7, #4]
  404a38:	68db      	ldr	r3, [r3, #12]
  404a3a:	429a      	cmp	r2, r3
  404a3c:	d10c      	bne.n	404a58 <ip_reass_remove_oldest_datagram+0x48>
  404a3e:	69fb      	ldr	r3, [r7, #28]
  404a40:	699a      	ldr	r2, [r3, #24]
  404a42:	687b      	ldr	r3, [r7, #4]
  404a44:	691b      	ldr	r3, [r3, #16]
  404a46:	429a      	cmp	r2, r3
  404a48:	d106      	bne.n	404a58 <ip_reass_remove_oldest_datagram+0x48>
  404a4a:	69fb      	ldr	r3, [r7, #28]
  404a4c:	899a      	ldrh	r2, [r3, #12]
  404a4e:	687b      	ldr	r3, [r7, #4]
  404a50:	889b      	ldrh	r3, [r3, #4]
  404a52:	b29b      	uxth	r3, r3
  404a54:	429a      	cmp	r2, r3
  404a56:	d010      	beq.n	404a7a <ip_reass_remove_oldest_datagram+0x6a>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
  404a58:	68fb      	ldr	r3, [r7, #12]
  404a5a:	3301      	adds	r3, #1
  404a5c:	60fb      	str	r3, [r7, #12]
        if (oldest == NULL) {
  404a5e:	69bb      	ldr	r3, [r7, #24]
  404a60:	2b00      	cmp	r3, #0
  404a62:	d102      	bne.n	404a6a <ip_reass_remove_oldest_datagram+0x5a>
          oldest = r;
  404a64:	69fb      	ldr	r3, [r7, #28]
  404a66:	61bb      	str	r3, [r7, #24]
  404a68:	e007      	b.n	404a7a <ip_reass_remove_oldest_datagram+0x6a>
        } else if (r->timer <= oldest->timer) {
  404a6a:	69fb      	ldr	r3, [r7, #28]
  404a6c:	7fda      	ldrb	r2, [r3, #31]
  404a6e:	69bb      	ldr	r3, [r7, #24]
  404a70:	7fdb      	ldrb	r3, [r3, #31]
  404a72:	429a      	cmp	r2, r3
  404a74:	d801      	bhi.n	404a7a <ip_reass_remove_oldest_datagram+0x6a>
          /* older than the previous oldest */
          oldest = r;
  404a76:	69fb      	ldr	r3, [r7, #28]
  404a78:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
  404a7a:	69fb      	ldr	r3, [r7, #28]
  404a7c:	681b      	ldr	r3, [r3, #0]
  404a7e:	2b00      	cmp	r3, #0
  404a80:	d001      	beq.n	404a86 <ip_reass_remove_oldest_datagram+0x76>
        prev = r;
  404a82:	69fb      	ldr	r3, [r7, #28]
  404a84:	617b      	str	r3, [r7, #20]
      }
      r = r->next;
  404a86:	69fb      	ldr	r3, [r7, #28]
  404a88:	681b      	ldr	r3, [r3, #0]
  404a8a:	61fb      	str	r3, [r7, #28]
  do {
    oldest = NULL;
    prev = NULL;
    other_datagrams = 0;
    r = reassdatagrams;
    while (r != NULL) {
  404a8c:	69fb      	ldr	r3, [r7, #28]
  404a8e:	2b00      	cmp	r3, #0
  404a90:	d1cf      	bne.n	404a32 <ip_reass_remove_oldest_datagram+0x22>
      if (r->next != NULL) {
        prev = r;
      }
      r = r->next;
    }
    if (oldest != NULL) {
  404a92:	69bb      	ldr	r3, [r7, #24]
  404a94:	2b00      	cmp	r3, #0
  404a96:	d008      	beq.n	404aaa <ip_reass_remove_oldest_datagram+0x9a>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, prev);
  404a98:	6979      	ldr	r1, [r7, #20]
  404a9a:	69b8      	ldr	r0, [r7, #24]
  404a9c:	4b0a      	ldr	r3, [pc, #40]	; (404ac8 <ip_reass_remove_oldest_datagram+0xb8>)
  404a9e:	4798      	blx	r3
  404aa0:	60b8      	str	r0, [r7, #8]
      pbufs_freed += pbufs_freed_current;
  404aa2:	693a      	ldr	r2, [r7, #16]
  404aa4:	68bb      	ldr	r3, [r7, #8]
  404aa6:	4413      	add	r3, r2
  404aa8:	613b      	str	r3, [r7, #16]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
  404aaa:	693a      	ldr	r2, [r7, #16]
  404aac:	683b      	ldr	r3, [r7, #0]
  404aae:	429a      	cmp	r2, r3
  404ab0:	da02      	bge.n	404ab8 <ip_reass_remove_oldest_datagram+0xa8>
  404ab2:	68fb      	ldr	r3, [r7, #12]
  404ab4:	2b01      	cmp	r3, #1
  404ab6:	dcb2      	bgt.n	404a1e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
  404ab8:	693b      	ldr	r3, [r7, #16]
}
  404aba:	4618      	mov	r0, r3
  404abc:	3720      	adds	r7, #32
  404abe:	46bd      	mov	sp, r7
  404ac0:	bd80      	pop	{r7, pc}
  404ac2:	bf00      	nop
  404ac4:	20400a88 	.word	0x20400a88
  404ac8:	00404941 	.word	0x00404941

00404acc <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
  404acc:	b580      	push	{r7, lr}
  404ace:	b084      	sub	sp, #16
  404ad0:	af00      	add	r7, sp, #0
  404ad2:	6078      	str	r0, [r7, #4]
  404ad4:	6039      	str	r1, [r7, #0]
  struct ip_reassdata* ipr;
  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
  404ad6:	2004      	movs	r0, #4
  404ad8:	4b18      	ldr	r3, [pc, #96]	; (404b3c <ip_reass_enqueue_new_datagram+0x70>)
  404ada:	4798      	blx	r3
  404adc:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
  404ade:	68fb      	ldr	r3, [r7, #12]
  404ae0:	2b00      	cmp	r3, #0
  404ae2:	d110      	bne.n	404b06 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
  404ae4:	6839      	ldr	r1, [r7, #0]
  404ae6:	6878      	ldr	r0, [r7, #4]
  404ae8:	4b15      	ldr	r3, [pc, #84]	; (404b40 <ip_reass_enqueue_new_datagram+0x74>)
  404aea:	4798      	blx	r3
  404aec:	4602      	mov	r2, r0
  404aee:	683b      	ldr	r3, [r7, #0]
  404af0:	429a      	cmp	r2, r3
  404af2:	db03      	blt.n	404afc <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
  404af4:	2004      	movs	r0, #4
  404af6:	4b11      	ldr	r3, [pc, #68]	; (404b3c <ip_reass_enqueue_new_datagram+0x70>)
  404af8:	4798      	blx	r3
  404afa:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
  404afc:	68fb      	ldr	r3, [r7, #12]
  404afe:	2b00      	cmp	r3, #0
  404b00:	d101      	bne.n	404b06 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
  404b02:	2300      	movs	r3, #0
  404b04:	e016      	b.n	404b34 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
  404b06:	2220      	movs	r2, #32
  404b08:	2100      	movs	r1, #0
  404b0a:	68f8      	ldr	r0, [r7, #12]
  404b0c:	4b0d      	ldr	r3, [pc, #52]	; (404b44 <ip_reass_enqueue_new_datagram+0x78>)
  404b0e:	4798      	blx	r3
  ipr->timer = IP_REASS_MAXAGE;
  404b10:	68fb      	ldr	r3, [r7, #12]
  404b12:	2203      	movs	r2, #3
  404b14:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
  404b16:	4b0c      	ldr	r3, [pc, #48]	; (404b48 <ip_reass_enqueue_new_datagram+0x7c>)
  404b18:	681a      	ldr	r2, [r3, #0]
  404b1a:	68fb      	ldr	r3, [r7, #12]
  404b1c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
  404b1e:	4a0a      	ldr	r2, [pc, #40]	; (404b48 <ip_reass_enqueue_new_datagram+0x7c>)
  404b20:	68fb      	ldr	r3, [r7, #12]
  404b22:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
  404b24:	68fb      	ldr	r3, [r7, #12]
  404b26:	3308      	adds	r3, #8
  404b28:	2214      	movs	r2, #20
  404b2a:	6879      	ldr	r1, [r7, #4]
  404b2c:	4618      	mov	r0, r3
  404b2e:	4b07      	ldr	r3, [pc, #28]	; (404b4c <ip_reass_enqueue_new_datagram+0x80>)
  404b30:	4798      	blx	r3
  return ipr;
  404b32:	68fb      	ldr	r3, [r7, #12]
}
  404b34:	4618      	mov	r0, r3
  404b36:	3710      	adds	r7, #16
  404b38:	46bd      	mov	sp, r7
  404b3a:	bd80      	pop	{r7, pc}
  404b3c:	00405941 	.word	0x00405941
  404b40:	00404a11 	.word	0x00404a11
  404b44:	0040d98d 	.word	0x0040d98d
  404b48:	20400a88 	.word	0x20400a88
  404b4c:	0040d859 	.word	0x0040d859

00404b50 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
  404b50:	b580      	push	{r7, lr}
  404b52:	b082      	sub	sp, #8
  404b54:	af00      	add	r7, sp, #0
  404b56:	6078      	str	r0, [r7, #4]
  404b58:	6039      	str	r1, [r7, #0]
  
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
  404b5a:	4b0b      	ldr	r3, [pc, #44]	; (404b88 <ip_reass_dequeue_datagram+0x38>)
  404b5c:	681a      	ldr	r2, [r3, #0]
  404b5e:	687b      	ldr	r3, [r7, #4]
  404b60:	429a      	cmp	r2, r3
  404b62:	d104      	bne.n	404b6e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
  404b64:	687b      	ldr	r3, [r7, #4]
  404b66:	681b      	ldr	r3, [r3, #0]
  404b68:	4a07      	ldr	r2, [pc, #28]	; (404b88 <ip_reass_dequeue_datagram+0x38>)
  404b6a:	6013      	str	r3, [r2, #0]
  404b6c:	e003      	b.n	404b76 <ip_reass_dequeue_datagram+0x26>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
    prev->next = ipr->next;
  404b6e:	687b      	ldr	r3, [r7, #4]
  404b70:	681a      	ldr	r2, [r3, #0]
  404b72:	683b      	ldr	r3, [r7, #0]
  404b74:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reass struct */
  memp_free(MEMP_REASSDATA, ipr);
  404b76:	6879      	ldr	r1, [r7, #4]
  404b78:	2004      	movs	r0, #4
  404b7a:	4b04      	ldr	r3, [pc, #16]	; (404b8c <ip_reass_dequeue_datagram+0x3c>)
  404b7c:	4798      	blx	r3
}
  404b7e:	bf00      	nop
  404b80:	3708      	adds	r7, #8
  404b82:	46bd      	mov	sp, r7
  404b84:	bd80      	pop	{r7, pc}
  404b86:	bf00      	nop
  404b88:	20400a88 	.word	0x20400a88
  404b8c:	00405981 	.word	0x00405981

00404b90 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param new_p points to the pbuf for the current fragment
 * @return 0 if invalid, >0 otherwise
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p)
{
  404b90:	b580      	push	{r7, lr}
  404b92:	b08a      	sub	sp, #40	; 0x28
  404b94:	af00      	add	r7, sp, #0
  404b96:	6078      	str	r0, [r7, #4]
  404b98:	6039      	str	r1, [r7, #0]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
  404b9a:	2300      	movs	r3, #0
  404b9c:	627b      	str	r3, [r7, #36]	; 0x24
  struct pbuf *q;
  u16_t offset,len;
  struct ip_hdr *fraghdr;
  int valid = 1;
  404b9e:	2301      	movs	r3, #1
  404ba0:	61fb      	str	r3, [r7, #28]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload; 
  404ba2:	683b      	ldr	r3, [r7, #0]
  404ba4:	685b      	ldr	r3, [r3, #4]
  404ba6:	61bb      	str	r3, [r7, #24]
  len = ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
  404ba8:	69bb      	ldr	r3, [r7, #24]
  404baa:	885b      	ldrh	r3, [r3, #2]
  404bac:	b29b      	uxth	r3, r3
  404bae:	4618      	mov	r0, r3
  404bb0:	4b71      	ldr	r3, [pc, #452]	; (404d78 <ip_reass_chain_frag_into_datagram_and_validate+0x1e8>)
  404bb2:	4798      	blx	r3
  404bb4:	4603      	mov	r3, r0
  404bb6:	461a      	mov	r2, r3
  404bb8:	69bb      	ldr	r3, [r7, #24]
  404bba:	781b      	ldrb	r3, [r3, #0]
  404bbc:	b29b      	uxth	r3, r3
  404bbe:	f003 030f 	and.w	r3, r3, #15
  404bc2:	b29b      	uxth	r3, r3
  404bc4:	009b      	lsls	r3, r3, #2
  404bc6:	b29b      	uxth	r3, r3
  404bc8:	1ad3      	subs	r3, r2, r3
  404bca:	82fb      	strh	r3, [r7, #22]
  offset = (ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
  404bcc:	69bb      	ldr	r3, [r7, #24]
  404bce:	88db      	ldrh	r3, [r3, #6]
  404bd0:	b29b      	uxth	r3, r3
  404bd2:	4618      	mov	r0, r3
  404bd4:	4b68      	ldr	r3, [pc, #416]	; (404d78 <ip_reass_chain_frag_into_datagram_and_validate+0x1e8>)
  404bd6:	4798      	blx	r3
  404bd8:	4603      	mov	r3, r0
  404bda:	f3c3 030c 	ubfx	r3, r3, #0, #13
  404bde:	b29b      	uxth	r3, r3
  404be0:	00db      	lsls	r3, r3, #3
  404be2:	82bb      	strh	r3, [r7, #20]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
  404be4:	683b      	ldr	r3, [r7, #0]
  404be6:	685b      	ldr	r3, [r3, #4]
  404be8:	613b      	str	r3, [r7, #16]
  iprh->next_pbuf = NULL;
  404bea:	693b      	ldr	r3, [r7, #16]
  404bec:	2200      	movs	r2, #0
  404bee:	701a      	strb	r2, [r3, #0]
  404bf0:	2200      	movs	r2, #0
  404bf2:	705a      	strb	r2, [r3, #1]
  404bf4:	2200      	movs	r2, #0
  404bf6:	709a      	strb	r2, [r3, #2]
  404bf8:	2200      	movs	r2, #0
  404bfa:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
  404bfc:	693b      	ldr	r3, [r7, #16]
  404bfe:	8aba      	ldrh	r2, [r7, #20]
  404c00:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
  404c02:	8aba      	ldrh	r2, [r7, #20]
  404c04:	8afb      	ldrh	r3, [r7, #22]
  404c06:	4413      	add	r3, r2
  404c08:	b29a      	uxth	r2, r3
  404c0a:	693b      	ldr	r3, [r7, #16]
  404c0c:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find on with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
  404c0e:	687b      	ldr	r3, [r7, #4]
  404c10:	685b      	ldr	r3, [r3, #4]
  404c12:	623b      	str	r3, [r7, #32]
  404c14:	e04b      	b.n	404cae <ip_reass_chain_frag_into_datagram_and_validate+0x11e>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
  404c16:	6a3b      	ldr	r3, [r7, #32]
  404c18:	685b      	ldr	r3, [r3, #4]
  404c1a:	60fb      	str	r3, [r7, #12]
    if (iprh->start < iprh_tmp->start) {
  404c1c:	693b      	ldr	r3, [r7, #16]
  404c1e:	889b      	ldrh	r3, [r3, #4]
  404c20:	b29a      	uxth	r2, r3
  404c22:	68fb      	ldr	r3, [r7, #12]
  404c24:	889b      	ldrh	r3, [r3, #4]
  404c26:	b29b      	uxth	r3, r3
  404c28:	429a      	cmp	r2, r3
  404c2a:	d21e      	bcs.n	404c6a <ip_reass_chain_frag_into_datagram_and_validate+0xda>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
  404c2c:	693b      	ldr	r3, [r7, #16]
  404c2e:	6a3a      	ldr	r2, [r7, #32]
  404c30:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
  404c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  404c34:	2b00      	cmp	r3, #0
  404c36:	d014      	beq.n	404c62 <ip_reass_chain_frag_into_datagram_and_validate+0xd2>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
  404c38:	693b      	ldr	r3, [r7, #16]
  404c3a:	889b      	ldrh	r3, [r3, #4]
  404c3c:	b29a      	uxth	r2, r3
  404c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  404c40:	88db      	ldrh	r3, [r3, #6]
  404c42:	b29b      	uxth	r3, r3
  404c44:	429a      	cmp	r2, r3
  404c46:	f0c0 8082 	bcc.w	404d4e <ip_reass_chain_frag_into_datagram_and_validate+0x1be>
  404c4a:	693b      	ldr	r3, [r7, #16]
  404c4c:	88db      	ldrh	r3, [r3, #6]
  404c4e:	b29a      	uxth	r2, r3
  404c50:	68fb      	ldr	r3, [r7, #12]
  404c52:	889b      	ldrh	r3, [r3, #4]
  404c54:	b29b      	uxth	r3, r3
  404c56:	429a      	cmp	r2, r3
  404c58:	d879      	bhi.n	404d4e <ip_reass_chain_frag_into_datagram_and_validate+0x1be>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
  404c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  404c5c:	683a      	ldr	r2, [r7, #0]
  404c5e:	601a      	str	r2, [r3, #0]
      } else {
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
  404c60:	e028      	b.n	404cb4 <ip_reass_chain_frag_into_datagram_and_validate+0x124>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
      } else {
        /* fragment with the lowest offset */
        ipr->p = new_p;
  404c62:	687b      	ldr	r3, [r7, #4]
  404c64:	683a      	ldr	r2, [r7, #0]
  404c66:	605a      	str	r2, [r3, #4]
      }
      break;
  404c68:	e024      	b.n	404cb4 <ip_reass_chain_frag_into_datagram_and_validate+0x124>
    } else if(iprh->start == iprh_tmp->start) {
  404c6a:	693b      	ldr	r3, [r7, #16]
  404c6c:	889b      	ldrh	r3, [r3, #4]
  404c6e:	b29a      	uxth	r2, r3
  404c70:	68fb      	ldr	r3, [r7, #12]
  404c72:	889b      	ldrh	r3, [r3, #4]
  404c74:	b29b      	uxth	r3, r3
  404c76:	429a      	cmp	r2, r3
  404c78:	d066      	beq.n	404d48 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if(iprh->start < iprh_tmp->end) {
  404c7a:	693b      	ldr	r3, [r7, #16]
  404c7c:	889b      	ldrh	r3, [r3, #4]
  404c7e:	b29a      	uxth	r2, r3
  404c80:	68fb      	ldr	r3, [r7, #12]
  404c82:	88db      	ldrh	r3, [r3, #6]
  404c84:	b29b      	uxth	r3, r3
  404c86:	429a      	cmp	r2, r3
  404c88:	d360      	bcc.n	404d4c <ip_reass_chain_frag_into_datagram_and_validate+0x1bc>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no wholes. */
      if (iprh_prev != NULL) {
  404c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  404c8c:	2b00      	cmp	r3, #0
  404c8e:	d009      	beq.n	404ca4 <ip_reass_chain_frag_into_datagram_and_validate+0x114>
        if (iprh_prev->end != iprh_tmp->start) {
  404c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  404c92:	88db      	ldrh	r3, [r3, #6]
  404c94:	b29a      	uxth	r2, r3
  404c96:	68fb      	ldr	r3, [r7, #12]
  404c98:	889b      	ldrh	r3, [r3, #4]
  404c9a:	b29b      	uxth	r3, r3
  404c9c:	429a      	cmp	r2, r3
  404c9e:	d001      	beq.n	404ca4 <ip_reass_chain_frag_into_datagram_and_validate+0x114>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
  404ca0:	2300      	movs	r3, #0
  404ca2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
  404ca4:	68fb      	ldr	r3, [r7, #12]
  404ca6:	681b      	ldr	r3, [r3, #0]
  404ca8:	623b      	str	r3, [r7, #32]
    iprh_prev = iprh_tmp;
  404caa:	68fb      	ldr	r3, [r7, #12]
  404cac:	627b      	str	r3, [r7, #36]	; 0x24
  iprh->start = offset;
  iprh->end = offset + len;

  /* Iterate through until we either get to the end of the list (append),
   * or we find on with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
  404cae:	6a3b      	ldr	r3, [r7, #32]
  404cb0:	2b00      	cmp	r3, #0
  404cb2:	d1b0      	bne.n	404c16 <ip_reass_chain_frag_into_datagram_and_validate+0x86>
    q = iprh_tmp->next_pbuf;
    iprh_prev = iprh_tmp;
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
  404cb4:	6a3b      	ldr	r3, [r7, #32]
  404cb6:	2b00      	cmp	r3, #0
  404cb8:	d113      	bne.n	404ce2 <ip_reass_chain_frag_into_datagram_and_validate+0x152>
    if (iprh_prev != NULL) {
  404cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  404cbc:	2b00      	cmp	r3, #0
  404cbe:	d00d      	beq.n	404cdc <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
  404cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  404cc2:	683a      	ldr	r2, [r7, #0]
  404cc4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
  404cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  404cc8:	88db      	ldrh	r3, [r3, #6]
  404cca:	b29a      	uxth	r2, r3
  404ccc:	693b      	ldr	r3, [r7, #16]
  404cce:	889b      	ldrh	r3, [r3, #4]
  404cd0:	b29b      	uxth	r3, r3
  404cd2:	429a      	cmp	r2, r3
  404cd4:	d005      	beq.n	404ce2 <ip_reass_chain_frag_into_datagram_and_validate+0x152>
        valid = 0;
  404cd6:	2300      	movs	r3, #0
  404cd8:	61fb      	str	r3, [r7, #28]
  404cda:	e002      	b.n	404ce2 <ip_reass_chain_frag_into_datagram_and_validate+0x152>
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
  404cdc:	687b      	ldr	r3, [r7, #4]
  404cde:	683a      	ldr	r2, [r7, #0]
  404ce0:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0) {
  404ce2:	687b      	ldr	r3, [r7, #4]
  404ce4:	7f9b      	ldrb	r3, [r3, #30]
  404ce6:	f003 0301 	and.w	r3, r3, #1
  404cea:	2b00      	cmp	r3, #0
  404cec:	d02a      	beq.n	404d44 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
    /* and had no wholes so far */
    if (valid) {
  404cee:	69fb      	ldr	r3, [r7, #28]
  404cf0:	2b00      	cmp	r3, #0
  404cf2:	d025      	beq.n	404d40 <ip_reass_chain_frag_into_datagram_and_validate+0x1b0>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if (((struct ip_reass_helper*)ipr->p->payload)->start != 0) {
  404cf4:	687b      	ldr	r3, [r7, #4]
  404cf6:	685b      	ldr	r3, [r3, #4]
  404cf8:	685b      	ldr	r3, [r3, #4]
  404cfa:	889b      	ldrh	r3, [r3, #4]
  404cfc:	b29b      	uxth	r3, r3
  404cfe:	2b00      	cmp	r3, #0
  404d00:	d002      	beq.n	404d08 <ip_reass_chain_frag_into_datagram_and_validate+0x178>
        valid = 0;
  404d02:	2300      	movs	r3, #0
  404d04:	61fb      	str	r3, [r7, #28]
  404d06:	e01b      	b.n	404d40 <ip_reass_chain_frag_into_datagram_and_validate+0x1b0>
      } else {
        /* and check that there are no wholes after this datagram */
        iprh_prev = iprh;
  404d08:	693b      	ldr	r3, [r7, #16]
  404d0a:	627b      	str	r3, [r7, #36]	; 0x24
        q = iprh->next_pbuf;
  404d0c:	693b      	ldr	r3, [r7, #16]
  404d0e:	681b      	ldr	r3, [r3, #0]
  404d10:	623b      	str	r3, [r7, #32]
        while (q != NULL) {
  404d12:	e012      	b.n	404d3a <ip_reass_chain_frag_into_datagram_and_validate+0x1aa>
          iprh = (struct ip_reass_helper*)q->payload;
  404d14:	6a3b      	ldr	r3, [r7, #32]
  404d16:	685b      	ldr	r3, [r3, #4]
  404d18:	613b      	str	r3, [r7, #16]
          if (iprh_prev->end != iprh->start) {
  404d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  404d1c:	88db      	ldrh	r3, [r3, #6]
  404d1e:	b29a      	uxth	r2, r3
  404d20:	693b      	ldr	r3, [r7, #16]
  404d22:	889b      	ldrh	r3, [r3, #4]
  404d24:	b29b      	uxth	r3, r3
  404d26:	429a      	cmp	r2, r3
  404d28:	d002      	beq.n	404d30 <ip_reass_chain_frag_into_datagram_and_validate+0x1a0>
            valid = 0;
  404d2a:	2300      	movs	r3, #0
  404d2c:	61fb      	str	r3, [r7, #28]
            break;
  404d2e:	e007      	b.n	404d40 <ip_reass_chain_frag_into_datagram_and_validate+0x1b0>
          }
          iprh_prev = iprh;
  404d30:	693b      	ldr	r3, [r7, #16]
  404d32:	627b      	str	r3, [r7, #36]	; 0x24
          q = iprh->next_pbuf;
  404d34:	693b      	ldr	r3, [r7, #16]
  404d36:	681b      	ldr	r3, [r3, #0]
  404d38:	623b      	str	r3, [r7, #32]
        valid = 0;
      } else {
        /* and check that there are no wholes after this datagram */
        iprh_prev = iprh;
        q = iprh->next_pbuf;
        while (q != NULL) {
  404d3a:	6a3b      	ldr	r3, [r7, #32]
  404d3c:	2b00      	cmp	r3, #0
  404d3e:	d1e9      	bne.n	404d14 <ip_reass_chain_frag_into_datagram_and_validate+0x184>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid;
  404d40:	69fb      	ldr	r3, [r7, #28]
  404d42:	e014      	b.n	404d6e <ip_reass_chain_frag_into_datagram_and_validate+0x1de>
  }
  /* If we come here, not all fragments were received, yet! */
  return 0; /* not yet valid! */
  404d44:	2300      	movs	r3, #0
  404d46:	e012      	b.n	404d6e <ip_reass_chain_frag_into_datagram_and_validate+0x1de>
        ipr->p = new_p;
      }
      break;
    } else if(iprh->start == iprh_tmp->start) {
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
  404d48:	bf00      	nop
  404d4a:	e000      	b.n	404d4e <ip_reass_chain_frag_into_datagram_and_validate+0x1be>
#if IP_REASS_CHECK_OVERLAP
    } else if(iprh->start < iprh_tmp->end) {
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
  404d4c:	bf00      	nop
  }
  /* If we come here, not all fragments were received, yet! */
  return 0; /* not yet valid! */
#if IP_REASS_CHECK_OVERLAP
freepbuf:
  ip_reass_pbufcount -= pbuf_clen(new_p);
  404d4e:	6838      	ldr	r0, [r7, #0]
  404d50:	4b0a      	ldr	r3, [pc, #40]	; (404d7c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>)
  404d52:	4798      	blx	r3
  404d54:	4603      	mov	r3, r0
  404d56:	4619      	mov	r1, r3
  404d58:	4b09      	ldr	r3, [pc, #36]	; (404d80 <ip_reass_chain_frag_into_datagram_and_validate+0x1f0>)
  404d5a:	881a      	ldrh	r2, [r3, #0]
  404d5c:	b28b      	uxth	r3, r1
  404d5e:	1ad3      	subs	r3, r2, r3
  404d60:	b29a      	uxth	r2, r3
  404d62:	4b07      	ldr	r3, [pc, #28]	; (404d80 <ip_reass_chain_frag_into_datagram_and_validate+0x1f0>)
  404d64:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
  404d66:	6838      	ldr	r0, [r7, #0]
  404d68:	4b06      	ldr	r3, [pc, #24]	; (404d84 <ip_reass_chain_frag_into_datagram_and_validate+0x1f4>)
  404d6a:	4798      	blx	r3
  return 0;
  404d6c:	2300      	movs	r3, #0
#endif /* IP_REASS_CHECK_OVERLAP */
}
  404d6e:	4618      	mov	r0, r3
  404d70:	3728      	adds	r7, #40	; 0x28
  404d72:	46bd      	mov	sp, r7
  404d74:	bd80      	pop	{r7, pc}
  404d76:	bf00      	nop
  404d78:	00402335 	.word	0x00402335
  404d7c:	004060f9 	.word	0x004060f9
  404d80:	20400a8c 	.word	0x20400a8c
  404d84:	00406069 	.word	0x00406069

00404d88 <ip_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip_reass(struct pbuf *p)
{
  404d88:	b580      	push	{r7, lr}
  404d8a:	b08a      	sub	sp, #40	; 0x28
  404d8c:	af00      	add	r7, sp, #0
  404d8e:	6078      	str	r0, [r7, #4]
  struct ip_hdr *fraghdr;
  struct ip_reassdata *ipr;
  struct ip_reass_helper *iprh;
  u16_t offset, len;
  u8_t clen;
  struct ip_reassdata *ipr_prev = NULL;
  404d90:	2300      	movs	r3, #0
  404d92:	61fb      	str	r3, [r7, #28]

  IPFRAG_STATS_INC(ip_frag.recv);
  snmp_inc_ipreasmreqds();

  fraghdr = (struct ip_hdr*)p->payload;
  404d94:	687b      	ldr	r3, [r7, #4]
  404d96:	685b      	ldr	r3, [r3, #4]
  404d98:	61bb      	str	r3, [r7, #24]

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
  404d9a:	69bb      	ldr	r3, [r7, #24]
  404d9c:	781b      	ldrb	r3, [r3, #0]
  404d9e:	f003 030f 	and.w	r3, r3, #15
  404da2:	009b      	lsls	r3, r3, #2
  404da4:	2b14      	cmp	r3, #20
  404da6:	f040 8103 	bne.w	404fb0 <ip_reass+0x228>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
  404daa:	69bb      	ldr	r3, [r7, #24]
  404dac:	88db      	ldrh	r3, [r3, #6]
  404dae:	b29b      	uxth	r3, r3
  404db0:	4618      	mov	r0, r3
  404db2:	4b84      	ldr	r3, [pc, #528]	; (404fc4 <ip_reass+0x23c>)
  404db4:	4798      	blx	r3
  404db6:	4603      	mov	r3, r0
  404db8:	f3c3 030c 	ubfx	r3, r3, #0, #13
  404dbc:	b29b      	uxth	r3, r3
  404dbe:	00db      	lsls	r3, r3, #3
  404dc0:	82fb      	strh	r3, [r7, #22]
  len = ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
  404dc2:	69bb      	ldr	r3, [r7, #24]
  404dc4:	885b      	ldrh	r3, [r3, #2]
  404dc6:	b29b      	uxth	r3, r3
  404dc8:	4618      	mov	r0, r3
  404dca:	4b7e      	ldr	r3, [pc, #504]	; (404fc4 <ip_reass+0x23c>)
  404dcc:	4798      	blx	r3
  404dce:	4603      	mov	r3, r0
  404dd0:	461a      	mov	r2, r3
  404dd2:	69bb      	ldr	r3, [r7, #24]
  404dd4:	781b      	ldrb	r3, [r3, #0]
  404dd6:	b29b      	uxth	r3, r3
  404dd8:	f003 030f 	and.w	r3, r3, #15
  404ddc:	b29b      	uxth	r3, r3
  404dde:	009b      	lsls	r3, r3, #2
  404de0:	b29b      	uxth	r3, r3
  404de2:	1ad3      	subs	r3, r2, r3
  404de4:	82bb      	strh	r3, [r7, #20]

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
  404de6:	6878      	ldr	r0, [r7, #4]
  404de8:	4b77      	ldr	r3, [pc, #476]	; (404fc8 <ip_reass+0x240>)
  404dea:	4798      	blx	r3
  404dec:	4603      	mov	r3, r0
  404dee:	74fb      	strb	r3, [r7, #19]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
  404df0:	4b76      	ldr	r3, [pc, #472]	; (404fcc <ip_reass+0x244>)
  404df2:	881b      	ldrh	r3, [r3, #0]
  404df4:	461a      	mov	r2, r3
  404df6:	7cfb      	ldrb	r3, [r7, #19]
  404df8:	4413      	add	r3, r2
  404dfa:	2b0a      	cmp	r3, #10
  404dfc:	dd10      	ble.n	404e20 <ip_reass+0x98>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
  404dfe:	7cfb      	ldrb	r3, [r7, #19]
  404e00:	4619      	mov	r1, r3
  404e02:	69b8      	ldr	r0, [r7, #24]
  404e04:	4b72      	ldr	r3, [pc, #456]	; (404fd0 <ip_reass+0x248>)
  404e06:	4798      	blx	r3
  404e08:	4603      	mov	r3, r0
  404e0a:	2b00      	cmp	r3, #0
  404e0c:	f000 80d1 	beq.w	404fb2 <ip_reass+0x22a>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
  404e10:	4b6e      	ldr	r3, [pc, #440]	; (404fcc <ip_reass+0x244>)
  404e12:	881b      	ldrh	r3, [r3, #0]
  404e14:	461a      	mov	r2, r3
  404e16:	7cfb      	ldrb	r3, [r7, #19]
  404e18:	4413      	add	r3, r2

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
  404e1a:	2b0a      	cmp	r3, #10
  404e1c:	f300 80c9 	bgt.w	404fb2 <ip_reass+0x22a>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
  404e20:	4b6c      	ldr	r3, [pc, #432]	; (404fd4 <ip_reass+0x24c>)
  404e22:	681b      	ldr	r3, [r3, #0]
  404e24:	623b      	str	r3, [r7, #32]
  404e26:	e017      	b.n	404e58 <ip_reass+0xd0>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
  404e28:	6a3b      	ldr	r3, [r7, #32]
  404e2a:	695a      	ldr	r2, [r3, #20]
  404e2c:	69bb      	ldr	r3, [r7, #24]
  404e2e:	68db      	ldr	r3, [r3, #12]
  404e30:	429a      	cmp	r2, r3
  404e32:	d10c      	bne.n	404e4e <ip_reass+0xc6>
  404e34:	6a3b      	ldr	r3, [r7, #32]
  404e36:	699a      	ldr	r2, [r3, #24]
  404e38:	69bb      	ldr	r3, [r7, #24]
  404e3a:	691b      	ldr	r3, [r3, #16]
  404e3c:	429a      	cmp	r2, r3
  404e3e:	d106      	bne.n	404e4e <ip_reass+0xc6>
  404e40:	6a3b      	ldr	r3, [r7, #32]
  404e42:	899a      	ldrh	r2, [r3, #12]
  404e44:	69bb      	ldr	r3, [r7, #24]
  404e46:	889b      	ldrh	r3, [r3, #4]
  404e48:	b29b      	uxth	r3, r3
  404e4a:	429a      	cmp	r2, r3
  404e4c:	d008      	beq.n	404e60 <ip_reass+0xd8>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass: matching previous fragment ID=%"X16_F"\n",
        ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
    }
    ipr_prev = ipr;
  404e4e:	6a3b      	ldr	r3, [r7, #32]
  404e50:	61fb      	str	r3, [r7, #28]
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
  404e52:	6a3b      	ldr	r3, [r7, #32]
  404e54:	681b      	ldr	r3, [r3, #0]
  404e56:	623b      	str	r3, [r7, #32]
  404e58:	6a3b      	ldr	r3, [r7, #32]
  404e5a:	2b00      	cmp	r3, #0
  404e5c:	d1e4      	bne.n	404e28 <ip_reass+0xa0>
  404e5e:	e000      	b.n	404e62 <ip_reass+0xda>
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass: matching previous fragment ID=%"X16_F"\n",
        ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
  404e60:	bf00      	nop
    }
    ipr_prev = ipr;
  }

  if (ipr == NULL) {
  404e62:	6a3b      	ldr	r3, [r7, #32]
  404e64:	2b00      	cmp	r3, #0
  404e66:	d109      	bne.n	404e7c <ip_reass+0xf4>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
  404e68:	7cfb      	ldrb	r3, [r7, #19]
  404e6a:	4619      	mov	r1, r3
  404e6c:	69b8      	ldr	r0, [r7, #24]
  404e6e:	4b5a      	ldr	r3, [pc, #360]	; (404fd8 <ip_reass+0x250>)
  404e70:	4798      	blx	r3
  404e72:	6238      	str	r0, [r7, #32]
    /* Bail if unable to enqueue */
    if(ipr == NULL) {
  404e74:	6a3b      	ldr	r3, [r7, #32]
  404e76:	2b00      	cmp	r3, #0
  404e78:	d11c      	bne.n	404eb4 <ip_reass+0x12c>
      goto nullreturn;
  404e7a:	e09a      	b.n	404fb2 <ip_reass+0x22a>
    }
  } else {
    if (((ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) && 
  404e7c:	69bb      	ldr	r3, [r7, #24]
  404e7e:	88db      	ldrh	r3, [r3, #6]
  404e80:	b29b      	uxth	r3, r3
  404e82:	4618      	mov	r0, r3
  404e84:	4b4f      	ldr	r3, [pc, #316]	; (404fc4 <ip_reass+0x23c>)
  404e86:	4798      	blx	r3
  404e88:	4603      	mov	r3, r0
  404e8a:	f3c3 030c 	ubfx	r3, r3, #0, #13
  404e8e:	2b00      	cmp	r3, #0
  404e90:	d110      	bne.n	404eb4 <ip_reass+0x12c>
      ((ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
  404e92:	6a3b      	ldr	r3, [r7, #32]
  404e94:	89db      	ldrh	r3, [r3, #14]
  404e96:	4618      	mov	r0, r3
  404e98:	4b4a      	ldr	r3, [pc, #296]	; (404fc4 <ip_reass+0x23c>)
  404e9a:	4798      	blx	r3
  404e9c:	4603      	mov	r3, r0
  404e9e:	f3c3 030c 	ubfx	r3, r3, #0, #13
    /* Bail if unable to enqueue */
    if(ipr == NULL) {
      goto nullreturn;
    }
  } else {
    if (((ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) && 
  404ea2:	2b00      	cmp	r3, #0
  404ea4:	d006      	beq.n	404eb4 <ip_reass+0x12c>
      ((ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
  404ea6:	6a3b      	ldr	r3, [r7, #32]
  404ea8:	3308      	adds	r3, #8
  404eaa:	2214      	movs	r2, #20
  404eac:	69b9      	ldr	r1, [r7, #24]
  404eae:	4618      	mov	r0, r3
  404eb0:	4b4a      	ldr	r3, [pc, #296]	; (404fdc <ip_reass+0x254>)
  404eb2:	4798      	blx	r3
    }
  }
  /* Track the current number of pbufs current 'in-flight', in order to limit 
  the number of fragments that may be enqueued at any one time */
  ip_reass_pbufcount += clen;
  404eb4:	7cfb      	ldrb	r3, [r7, #19]
  404eb6:	b29a      	uxth	r2, r3
  404eb8:	4b44      	ldr	r3, [pc, #272]	; (404fcc <ip_reass+0x244>)
  404eba:	881b      	ldrh	r3, [r3, #0]
  404ebc:	4413      	add	r3, r2
  404ebe:	b29a      	uxth	r2, r3
  404ec0:	4b42      	ldr	r3, [pc, #264]	; (404fcc <ip_reass+0x244>)
  404ec2:	801a      	strh	r2, [r3, #0]

  /* At this point, we have either created a new entry or pointing 
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  if ((IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0) {
  404ec4:	69bb      	ldr	r3, [r7, #24]
  404ec6:	88db      	ldrh	r3, [r3, #6]
  404ec8:	b29b      	uxth	r3, r3
  404eca:	f003 0320 	and.w	r3, r3, #32
  404ece:	2b00      	cmp	r3, #0
  404ed0:	d10c      	bne.n	404eec <ip_reass+0x164>
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
  404ed2:	6a3b      	ldr	r3, [r7, #32]
  404ed4:	7f9b      	ldrb	r3, [r3, #30]
  404ed6:	f043 0301 	orr.w	r3, r3, #1
  404eda:	b2da      	uxtb	r2, r3
  404edc:	6a3b      	ldr	r3, [r7, #32]
  404ede:	779a      	strb	r2, [r3, #30]
    ipr->datagram_len = offset + len;
  404ee0:	8afa      	ldrh	r2, [r7, #22]
  404ee2:	8abb      	ldrh	r3, [r7, #20]
  404ee4:	4413      	add	r3, r2
  404ee6:	b29a      	uxth	r2, r3
  404ee8:	6a3b      	ldr	r3, [r7, #32]
  404eea:	839a      	strh	r2, [r3, #28]
     ("ip_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  if (ip_reass_chain_frag_into_datagram_and_validate(ipr, p)) {
  404eec:	6879      	ldr	r1, [r7, #4]
  404eee:	6a38      	ldr	r0, [r7, #32]
  404ef0:	4b3b      	ldr	r3, [pc, #236]	; (404fe0 <ip_reass+0x258>)
  404ef2:	4798      	blx	r3
  404ef4:	4603      	mov	r3, r0
  404ef6:	2b00      	cmp	r3, #0
  404ef8:	d058      	beq.n	404fac <ip_reass+0x224>
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
  404efa:	6a3b      	ldr	r3, [r7, #32]
  404efc:	8b9b      	ldrh	r3, [r3, #28]
  404efe:	3314      	adds	r3, #20
  404f00:	b29a      	uxth	r2, r3
  404f02:	6a3b      	ldr	r3, [r7, #32]
  404f04:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
  404f06:	6a3b      	ldr	r3, [r7, #32]
  404f08:	685b      	ldr	r3, [r3, #4]
  404f0a:	685b      	ldr	r3, [r3, #4]
  404f0c:	681b      	ldr	r3, [r3, #0]
  404f0e:	627b      	str	r3, [r7, #36]	; 0x24

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
  404f10:	6a3b      	ldr	r3, [r7, #32]
  404f12:	685b      	ldr	r3, [r3, #4]
  404f14:	685b      	ldr	r3, [r3, #4]
  404f16:	61bb      	str	r3, [r7, #24]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
  404f18:	6a3b      	ldr	r3, [r7, #32]
  404f1a:	3308      	adds	r3, #8
  404f1c:	2214      	movs	r2, #20
  404f1e:	4619      	mov	r1, r3
  404f20:	69b8      	ldr	r0, [r7, #24]
  404f22:	4b2e      	ldr	r3, [pc, #184]	; (404fdc <ip_reass+0x254>)
  404f24:	4798      	blx	r3
    IPH_LEN_SET(fraghdr, htons(ipr->datagram_len));
  404f26:	6a3b      	ldr	r3, [r7, #32]
  404f28:	8b9b      	ldrh	r3, [r3, #28]
  404f2a:	4618      	mov	r0, r3
  404f2c:	4b2d      	ldr	r3, [pc, #180]	; (404fe4 <ip_reass+0x25c>)
  404f2e:	4798      	blx	r3
  404f30:	4603      	mov	r3, r0
  404f32:	461a      	mov	r2, r3
  404f34:	69bb      	ldr	r3, [r7, #24]
  404f36:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
  404f38:	69bb      	ldr	r3, [r7, #24]
  404f3a:	2200      	movs	r2, #0
  404f3c:	719a      	strb	r2, [r3, #6]
  404f3e:	2200      	movs	r2, #0
  404f40:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
  404f42:	69bb      	ldr	r3, [r7, #24]
  404f44:	2200      	movs	r2, #0
  404f46:	729a      	strb	r2, [r3, #10]
  404f48:	2200      	movs	r2, #0
  404f4a:	72da      	strb	r2, [r3, #11]
    /* @todo: do we need to set calculate the correct checksum? */
    IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
  404f4c:	2114      	movs	r1, #20
  404f4e:	69b8      	ldr	r0, [r7, #24]
  404f50:	4b25      	ldr	r3, [pc, #148]	; (404fe8 <ip_reass+0x260>)
  404f52:	4798      	blx	r3
  404f54:	4603      	mov	r3, r0
  404f56:	461a      	mov	r2, r3
  404f58:	69bb      	ldr	r3, [r7, #24]
  404f5a:	815a      	strh	r2, [r3, #10]

    p = ipr->p;
  404f5c:	6a3b      	ldr	r3, [r7, #32]
  404f5e:	685b      	ldr	r3, [r3, #4]
  404f60:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while(r != NULL) {
  404f62:	e00e      	b.n	404f82 <ip_reass+0x1fa>
      iprh = (struct ip_reass_helper*)r->payload;
  404f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  404f66:	685b      	ldr	r3, [r3, #4]
  404f68:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeding fragment */
      pbuf_header(r, -IP_HLEN);
  404f6a:	f06f 0113 	mvn.w	r1, #19
  404f6e:	6a78      	ldr	r0, [r7, #36]	; 0x24
  404f70:	4b1e      	ldr	r3, [pc, #120]	; (404fec <ip_reass+0x264>)
  404f72:	4798      	blx	r3
      pbuf_cat(p, r);
  404f74:	6a79      	ldr	r1, [r7, #36]	; 0x24
  404f76:	6878      	ldr	r0, [r7, #4]
  404f78:	4b1d      	ldr	r3, [pc, #116]	; (404ff0 <ip_reass+0x268>)
  404f7a:	4798      	blx	r3
      r = iprh->next_pbuf;
  404f7c:	68fb      	ldr	r3, [r7, #12]
  404f7e:	681b      	ldr	r3, [r3, #0]
  404f80:	627b      	str	r3, [r7, #36]	; 0x24
    IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));

    p = ipr->p;

    /* chain together the pbufs contained within the reass_data list. */
    while(r != NULL) {
  404f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  404f84:	2b00      	cmp	r3, #0
  404f86:	d1ed      	bne.n	404f64 <ip_reass+0x1dc>
      pbuf_header(r, -IP_HLEN);
      pbuf_cat(p, r);
      r = iprh->next_pbuf;
    }
    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
  404f88:	69f9      	ldr	r1, [r7, #28]
  404f8a:	6a38      	ldr	r0, [r7, #32]
  404f8c:	4b19      	ldr	r3, [pc, #100]	; (404ff4 <ip_reass+0x26c>)
  404f8e:	4798      	blx	r3

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
  404f90:	6878      	ldr	r0, [r7, #4]
  404f92:	4b0d      	ldr	r3, [pc, #52]	; (404fc8 <ip_reass+0x240>)
  404f94:	4798      	blx	r3
  404f96:	4603      	mov	r3, r0
  404f98:	4619      	mov	r1, r3
  404f9a:	4b0c      	ldr	r3, [pc, #48]	; (404fcc <ip_reass+0x244>)
  404f9c:	881a      	ldrh	r2, [r3, #0]
  404f9e:	b28b      	uxth	r3, r1
  404fa0:	1ad3      	subs	r3, r2, r3
  404fa2:	b29a      	uxth	r2, r3
  404fa4:	4b09      	ldr	r3, [pc, #36]	; (404fcc <ip_reass+0x244>)
  404fa6:	801a      	strh	r2, [r3, #0]

    /* Return the pbuf chain */
    return p;
  404fa8:	687b      	ldr	r3, [r7, #4]
  404faa:	e006      	b.n	404fba <ip_reass+0x232>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
  404fac:	2300      	movs	r3, #0
  404fae:	e004      	b.n	404fba <ip_reass+0x232>
  fraghdr = (struct ip_hdr*)p->payload;

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  404fb0:	bf00      	nop
  return NULL;

nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
  404fb2:	6878      	ldr	r0, [r7, #4]
  404fb4:	4b10      	ldr	r3, [pc, #64]	; (404ff8 <ip_reass+0x270>)
  404fb6:	4798      	blx	r3
  return NULL;
  404fb8:	2300      	movs	r3, #0
}
  404fba:	4618      	mov	r0, r3
  404fbc:	3728      	adds	r7, #40	; 0x28
  404fbe:	46bd      	mov	sp, r7
  404fc0:	bd80      	pop	{r7, pc}
  404fc2:	bf00      	nop
  404fc4:	00402335 	.word	0x00402335
  404fc8:	004060f9 	.word	0x004060f9
  404fcc:	20400a8c 	.word	0x20400a8c
  404fd0:	00404a11 	.word	0x00404a11
  404fd4:	20400a88 	.word	0x20400a88
  404fd8:	00404acd 	.word	0x00404acd
  404fdc:	0040d859 	.word	0x0040d859
  404fe0:	00404b91 	.word	0x00404b91
  404fe4:	00402309 	.word	0x00402309
  404fe8:	00404191 	.word	0x00404191
  404fec:	00405f8d 	.word	0x00405f8d
  404ff0:	00406151 	.word	0x00406151
  404ff4:	00404b51 	.word	0x00404b51
  404ff8:	00406069 	.word	0x00406069

00404ffc <ip_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t 
ip_frag(struct pbuf *p, struct netif *netif, ip_addr_t *dest)
{
  404ffc:	b590      	push	{r4, r7, lr}
  404ffe:	b08d      	sub	sp, #52	; 0x34
  405000:	af00      	add	r7, sp, #0
  405002:	60f8      	str	r0, [r7, #12]
  405004:	60b9      	str	r1, [r7, #8]
  405006:	607a      	str	r2, [r7, #4]
  struct ip_hdr *original_iphdr;
#endif
  struct ip_hdr *iphdr;
  u16_t nfb;
  u16_t left, cop;
  u16_t mtu = netif->mtu;
  405008:	68bb      	ldr	r3, [r7, #8]
  40500a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
  40500c:	84fb      	strh	r3, [r7, #38]	; 0x26
  u16_t ofo, omf;
  u16_t last;
  u16_t poff = IP_HLEN;
  40500e:	2314      	movs	r3, #20
  405010:	857b      	strh	r3, [r7, #42]	; 0x2a

  /* Copy the IP header in it */
  iphdr = (struct ip_hdr *)rambuf->payload;
  SMEMCPY(iphdr, p->payload, IP_HLEN);
#else /* IP_FRAG_USES_STATIC_BUF */
  original_iphdr = (struct ip_hdr *)p->payload;
  405012:	68fb      	ldr	r3, [r7, #12]
  405014:	685b      	ldr	r3, [r3, #4]
  405016:	623b      	str	r3, [r7, #32]
  iphdr = original_iphdr;
  405018:	6a3b      	ldr	r3, [r7, #32]
  40501a:	61fb      	str	r3, [r7, #28]
#endif /* IP_FRAG_USES_STATIC_BUF */

  /* Save original offset */
  tmp = ntohs(IPH_OFFSET(iphdr));
  40501c:	69fb      	ldr	r3, [r7, #28]
  40501e:	88db      	ldrh	r3, [r3, #6]
  405020:	b29b      	uxth	r3, r3
  405022:	4618      	mov	r0, r3
  405024:	4b50      	ldr	r3, [pc, #320]	; (405168 <ip_frag+0x16c>)
  405026:	4798      	blx	r3
  405028:	4603      	mov	r3, r0
  40502a:	853b      	strh	r3, [r7, #40]	; 0x28
  ofo = tmp & IP_OFFMASK;
  40502c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
  40502e:	f3c3 030c 	ubfx	r3, r3, #0, #13
  405032:	85bb      	strh	r3, [r7, #44]	; 0x2c
  omf = tmp & IP_MF;
  405034:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
  405036:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  40503a:	837b      	strh	r3, [r7, #26]

  left = p->tot_len - IP_HLEN;
  40503c:	68fb      	ldr	r3, [r7, #12]
  40503e:	891b      	ldrh	r3, [r3, #8]
  405040:	3b14      	subs	r3, #20
  405042:	85fb      	strh	r3, [r7, #46]	; 0x2e

  nfb = (mtu - IP_HLEN) / 8;
  405044:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
  405046:	3b14      	subs	r3, #20
  405048:	2b00      	cmp	r3, #0
  40504a:	da00      	bge.n	40504e <ip_frag+0x52>
  40504c:	3307      	adds	r3, #7
  40504e:	10db      	asrs	r3, r3, #3
  405050:	833b      	strh	r3, [r7, #24]

  while (left) {
  405052:	e07f      	b.n	405154 <ip_frag+0x158>
    last = (left <= mtu - IP_HLEN);
  405054:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
  405056:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
  405058:	3b14      	subs	r3, #20
  40505a:	429a      	cmp	r2, r3
  40505c:	bfd4      	ite	le
  40505e:	2301      	movle	r3, #1
  405060:	2300      	movgt	r3, #0
  405062:	b2db      	uxtb	r3, r3
  405064:	82fb      	strh	r3, [r7, #22]

    /* Set new offset and MF flag */
    tmp = omf | (IP_OFFMASK & (ofo));
  405066:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
  405068:	f3c3 030c 	ubfx	r3, r3, #0, #13
  40506c:	b29a      	uxth	r2, r3
  40506e:	8b7b      	ldrh	r3, [r7, #26]
  405070:	4313      	orrs	r3, r2
  405072:	853b      	strh	r3, [r7, #40]	; 0x28
    if (!last) {
  405074:	8afb      	ldrh	r3, [r7, #22]
  405076:	2b00      	cmp	r3, #0
  405078:	d103      	bne.n	405082 <ip_frag+0x86>
      tmp = tmp | IP_MF;
  40507a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
  40507c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  405080:	853b      	strh	r3, [r7, #40]	; 0x28
    }

    /* Fill this fragment */
    cop = last ? left : nfb * 8;
  405082:	8afb      	ldrh	r3, [r7, #22]
  405084:	2b00      	cmp	r3, #0
  405086:	d103      	bne.n	405090 <ip_frag+0x94>
  405088:	8b3b      	ldrh	r3, [r7, #24]
  40508a:	00db      	lsls	r3, r3, #3
  40508c:	b29b      	uxth	r3, r3
  40508e:	e000      	b.n	405092 <ip_frag+0x96>
  405090:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
  405092:	82bb      	strh	r3, [r7, #20]

#if IP_FRAG_USES_STATIC_BUF
    poff += pbuf_copy_partial(p, (u8_t*)iphdr + IP_HLEN, cop, poff);
#else /* IP_FRAG_USES_STATIC_BUF */
#if LWIP_NETIF_TX_SINGLE_PBUF
    rambuf = pbuf_alloc(PBUF_IP, cop, PBUF_RAM);
  405094:	8abb      	ldrh	r3, [r7, #20]
  405096:	2200      	movs	r2, #0
  405098:	4619      	mov	r1, r3
  40509a:	2001      	movs	r0, #1
  40509c:	4b33      	ldr	r3, [pc, #204]	; (40516c <ip_frag+0x170>)
  40509e:	4798      	blx	r3
  4050a0:	6138      	str	r0, [r7, #16]
    if (rambuf == NULL) {
  4050a2:	693b      	ldr	r3, [r7, #16]
  4050a4:	2b00      	cmp	r3, #0
  4050a6:	d102      	bne.n	4050ae <ip_frag+0xb2>
      return ERR_MEM;
  4050a8:	f04f 33ff 	mov.w	r3, #4294967295
  4050ac:	e057      	b.n	40515e <ip_frag+0x162>
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
      (rambuf->len == rambuf->tot_len) && (rambuf->next == NULL));
    poff += pbuf_copy_partial(p, rambuf->payload, cop, poff);
  4050ae:	693b      	ldr	r3, [r7, #16]
  4050b0:	6859      	ldr	r1, [r3, #4]
  4050b2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
  4050b4:	8aba      	ldrh	r2, [r7, #20]
  4050b6:	68f8      	ldr	r0, [r7, #12]
  4050b8:	4c2d      	ldr	r4, [pc, #180]	; (405170 <ip_frag+0x174>)
  4050ba:	47a0      	blx	r4
  4050bc:	4603      	mov	r3, r0
  4050be:	461a      	mov	r2, r3
  4050c0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
  4050c2:	4413      	add	r3, r2
  4050c4:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* make room for the IP header */
    if(pbuf_header(rambuf, IP_HLEN)) {
  4050c6:	2114      	movs	r1, #20
  4050c8:	6938      	ldr	r0, [r7, #16]
  4050ca:	4b2a      	ldr	r3, [pc, #168]	; (405174 <ip_frag+0x178>)
  4050cc:	4798      	blx	r3
  4050ce:	4603      	mov	r3, r0
  4050d0:	2b00      	cmp	r3, #0
  4050d2:	d005      	beq.n	4050e0 <ip_frag+0xe4>
      pbuf_free(rambuf);
  4050d4:	6938      	ldr	r0, [r7, #16]
  4050d6:	4b28      	ldr	r3, [pc, #160]	; (405178 <ip_frag+0x17c>)
  4050d8:	4798      	blx	r3
      return ERR_MEM;
  4050da:	f04f 33ff 	mov.w	r3, #4294967295
  4050de:	e03e      	b.n	40515e <ip_frag+0x162>
    }
    /* fill in the IP header */
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
  4050e0:	693b      	ldr	r3, [r7, #16]
  4050e2:	685b      	ldr	r3, [r3, #4]
  4050e4:	2214      	movs	r2, #20
  4050e6:	6a39      	ldr	r1, [r7, #32]
  4050e8:	4618      	mov	r0, r3
  4050ea:	4b24      	ldr	r3, [pc, #144]	; (40517c <ip_frag+0x180>)
  4050ec:	4798      	blx	r3
    iphdr = rambuf->payload;
  4050ee:	693b      	ldr	r3, [r7, #16]
  4050f0:	685b      	ldr	r3, [r3, #4]
  4050f2:	61fb      	str	r3, [r7, #28]
    poff = newpbuflen;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
#endif /* IP_FRAG_USES_STATIC_BUF */

    /* Correct header */
    IPH_OFFSET_SET(iphdr, htons(tmp));
  4050f4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
  4050f6:	4618      	mov	r0, r3
  4050f8:	4b21      	ldr	r3, [pc, #132]	; (405180 <ip_frag+0x184>)
  4050fa:	4798      	blx	r3
  4050fc:	4603      	mov	r3, r0
  4050fe:	461a      	mov	r2, r3
  405100:	69fb      	ldr	r3, [r7, #28]
  405102:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, htons(cop + IP_HLEN));
  405104:	8abb      	ldrh	r3, [r7, #20]
  405106:	3314      	adds	r3, #20
  405108:	b29b      	uxth	r3, r3
  40510a:	4618      	mov	r0, r3
  40510c:	4b1c      	ldr	r3, [pc, #112]	; (405180 <ip_frag+0x184>)
  40510e:	4798      	blx	r3
  405110:	4603      	mov	r3, r0
  405112:	461a      	mov	r2, r3
  405114:	69fb      	ldr	r3, [r7, #28]
  405116:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
  405118:	69fb      	ldr	r3, [r7, #28]
  40511a:	2200      	movs	r2, #0
  40511c:	729a      	strb	r2, [r3, #10]
  40511e:	2200      	movs	r2, #0
  405120:	72da      	strb	r2, [r3, #11]
    IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
  405122:	2114      	movs	r1, #20
  405124:	69f8      	ldr	r0, [r7, #28]
  405126:	4b17      	ldr	r3, [pc, #92]	; (405184 <ip_frag+0x188>)
  405128:	4798      	blx	r3
  40512a:	4603      	mov	r3, r0
  40512c:	461a      	mov	r2, r3
  40512e:	69fb      	ldr	r3, [r7, #28]
  405130:	815a      	strh	r2, [r3, #10]
    }
#else /* IP_FRAG_USES_STATIC_BUF */
    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
  405132:	68bb      	ldr	r3, [r7, #8]
  405134:	695b      	ldr	r3, [r3, #20]
  405136:	687a      	ldr	r2, [r7, #4]
  405138:	6939      	ldr	r1, [r7, #16]
  40513a:	68b8      	ldr	r0, [r7, #8]
  40513c:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */
    
    pbuf_free(rambuf);
  40513e:	6938      	ldr	r0, [r7, #16]
  405140:	4b0d      	ldr	r3, [pc, #52]	; (405178 <ip_frag+0x17c>)
  405142:	4798      	blx	r3
#endif /* IP_FRAG_USES_STATIC_BUF */
    left -= cop;
  405144:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
  405146:	8abb      	ldrh	r3, [r7, #20]
  405148:	1ad3      	subs	r3, r2, r3
  40514a:	85fb      	strh	r3, [r7, #46]	; 0x2e
    ofo += nfb;
  40514c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
  40514e:	8b3b      	ldrh	r3, [r7, #24]
  405150:	4413      	add	r3, r2
  405152:	85bb      	strh	r3, [r7, #44]	; 0x2c

  left = p->tot_len - IP_HLEN;

  nfb = (mtu - IP_HLEN) / 8;

  while (left) {
  405154:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
  405156:	2b00      	cmp	r3, #0
  405158:	f47f af7c 	bne.w	405054 <ip_frag+0x58>
  }
#if IP_FRAG_USES_STATIC_BUF
  pbuf_free(rambuf);
#endif /* IP_FRAG_USES_STATIC_BUF */
  snmp_inc_ipfragoks();
  return ERR_OK;
  40515c:	2300      	movs	r3, #0
}
  40515e:	4618      	mov	r0, r3
  405160:	3734      	adds	r7, #52	; 0x34
  405162:	46bd      	mov	sp, r7
  405164:	bd90      	pop	{r4, r7, pc}
  405166:	bf00      	nop
  405168:	00402335 	.word	0x00402335
  40516c:	00405cc5 	.word	0x00405cc5
  405170:	004062dd 	.word	0x004062dd
  405174:	00405f8d 	.word	0x00405f8d
  405178:	00406069 	.word	0x00406069
  40517c:	0040d859 	.word	0x0040d859
  405180:	00402309 	.word	0x00402309
  405184:	00404191 	.word	0x00404191

00405188 <lwip_init>:
/**
 * Perform Sanity check of user-configurable values, and initialize all modules.
 */
void
lwip_init(void)
{
  405188:	b580      	push	{r7, lr}
  40518a:	af00      	add	r7, sp, #0
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
  40518c:	4b06      	ldr	r3, [pc, #24]	; (4051a8 <lwip_init+0x20>)
  40518e:	4798      	blx	r3
  memp_init();
  405190:	4b06      	ldr	r3, [pc, #24]	; (4051ac <lwip_init+0x24>)
  405192:	4798      	blx	r3
  pbuf_init();
  netif_init();
  405194:	4b06      	ldr	r3, [pc, #24]	; (4051b0 <lwip_init+0x28>)
  405196:	4798      	blx	r3
#endif /* LWIP_ARP */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
  405198:	4b06      	ldr	r3, [pc, #24]	; (4051b4 <lwip_init+0x2c>)
  40519a:	4798      	blx	r3
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
  40519c:	4b06      	ldr	r3, [pc, #24]	; (4051b8 <lwip_init+0x30>)
  40519e:	4798      	blx	r3
#if LWIP_DNS
  dns_init();
#endif /* LWIP_DNS */

#if LWIP_TIMERS
  sys_timeouts_init();
  4051a0:	4b06      	ldr	r3, [pc, #24]	; (4051bc <lwip_init+0x34>)
  4051a2:	4798      	blx	r3
#endif /* LWIP_TIMERS */
}
  4051a4:	bf00      	nop
  4051a6:	bd80      	pop	{r7, pc}
  4051a8:	00405509 	.word	0x00405509
  4051ac:	004058a5 	.word	0x004058a5
  4051b0:	004059c1 	.word	0x004059c1
  4051b4:	0040aa19 	.word	0x0040aa19
  4051b8:	004063a5 	.word	0x004063a5
  4051bc:	00405305 	.word	0x00405305

004051c0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
  4051c0:	b580      	push	{r7, lr}
  4051c2:	b082      	sub	sp, #8
  4051c4:	af00      	add	r7, sp, #0
  4051c6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
  4051c8:	4b0b      	ldr	r3, [pc, #44]	; (4051f8 <tcpip_tcp_timer+0x38>)
  4051ca:	4798      	blx	r3
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
  4051cc:	4b0b      	ldr	r3, [pc, #44]	; (4051fc <tcpip_tcp_timer+0x3c>)
  4051ce:	681b      	ldr	r3, [r3, #0]
  4051d0:	2b00      	cmp	r3, #0
  4051d2:	d103      	bne.n	4051dc <tcpip_tcp_timer+0x1c>
  4051d4:	4b0a      	ldr	r3, [pc, #40]	; (405200 <tcpip_tcp_timer+0x40>)
  4051d6:	681b      	ldr	r3, [r3, #0]
  4051d8:	2b00      	cmp	r3, #0
  4051da:	d005      	beq.n	4051e8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
  4051dc:	2200      	movs	r2, #0
  4051de:	4909      	ldr	r1, [pc, #36]	; (405204 <tcpip_tcp_timer+0x44>)
  4051e0:	20fa      	movs	r0, #250	; 0xfa
  4051e2:	4b09      	ldr	r3, [pc, #36]	; (405208 <tcpip_tcp_timer+0x48>)
  4051e4:	4798      	blx	r3
  4051e6:	e002      	b.n	4051ee <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
  4051e8:	4b08      	ldr	r3, [pc, #32]	; (40520c <tcpip_tcp_timer+0x4c>)
  4051ea:	2200      	movs	r2, #0
  4051ec:	601a      	str	r2, [r3, #0]
  }
}
  4051ee:	bf00      	nop
  4051f0:	3708      	adds	r7, #8
  4051f2:	46bd      	mov	sp, r7
  4051f4:	bd80      	pop	{r7, pc}
  4051f6:	bf00      	nop
  4051f8:	004063b5 	.word	0x004063b5
  4051fc:	20404980 	.word	0x20404980
  405200:	20404994 	.word	0x20404994
  405204:	004051c1 	.word	0x004051c1
  405208:	00405365 	.word	0x00405365
  40520c:	20400a98 	.word	0x20400a98

00405210 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
  405210:	b580      	push	{r7, lr}
  405212:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
  405214:	4b0a      	ldr	r3, [pc, #40]	; (405240 <tcp_timer_needed+0x30>)
  405216:	681b      	ldr	r3, [r3, #0]
  405218:	2b00      	cmp	r3, #0
  40521a:	d10f      	bne.n	40523c <tcp_timer_needed+0x2c>
  40521c:	4b09      	ldr	r3, [pc, #36]	; (405244 <tcp_timer_needed+0x34>)
  40521e:	681b      	ldr	r3, [r3, #0]
  405220:	2b00      	cmp	r3, #0
  405222:	d103      	bne.n	40522c <tcp_timer_needed+0x1c>
  405224:	4b08      	ldr	r3, [pc, #32]	; (405248 <tcp_timer_needed+0x38>)
  405226:	681b      	ldr	r3, [r3, #0]
  405228:	2b00      	cmp	r3, #0
  40522a:	d007      	beq.n	40523c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
  40522c:	4b04      	ldr	r3, [pc, #16]	; (405240 <tcp_timer_needed+0x30>)
  40522e:	2201      	movs	r2, #1
  405230:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
  405232:	2200      	movs	r2, #0
  405234:	4905      	ldr	r1, [pc, #20]	; (40524c <tcp_timer_needed+0x3c>)
  405236:	20fa      	movs	r0, #250	; 0xfa
  405238:	4b05      	ldr	r3, [pc, #20]	; (405250 <tcp_timer_needed+0x40>)
  40523a:	4798      	blx	r3
  }
}
  40523c:	bf00      	nop
  40523e:	bd80      	pop	{r7, pc}
  405240:	20400a98 	.word	0x20400a98
  405244:	20404980 	.word	0x20404980
  405248:	20404994 	.word	0x20404994
  40524c:	004051c1 	.word	0x004051c1
  405250:	00405365 	.word	0x00405365

00405254 <ip_reass_timer>:
 *
 * @param arg unused argument
 */
static void
ip_reass_timer(void *arg)
{
  405254:	b580      	push	{r7, lr}
  405256:	b082      	sub	sp, #8
  405258:	af00      	add	r7, sp, #0
  40525a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: ip_reass_tmr()\n"));
  ip_reass_tmr();
  40525c:	4b05      	ldr	r3, [pc, #20]	; (405274 <ip_reass_timer+0x20>)
  40525e:	4798      	blx	r3
  sys_timeout(IP_TMR_INTERVAL, ip_reass_timer, NULL);
  405260:	2200      	movs	r2, #0
  405262:	4905      	ldr	r1, [pc, #20]	; (405278 <ip_reass_timer+0x24>)
  405264:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  405268:	4b04      	ldr	r3, [pc, #16]	; (40527c <ip_reass_timer+0x28>)
  40526a:	4798      	blx	r3
}
  40526c:	bf00      	nop
  40526e:	3708      	adds	r7, #8
  405270:	46bd      	mov	sp, r7
  405272:	bd80      	pop	{r7, pc}
  405274:	004048e5 	.word	0x004048e5
  405278:	00405255 	.word	0x00405255
  40527c:	00405365 	.word	0x00405365

00405280 <arp_timer>:
 *
 * @param arg unused argument
 */
static void
arp_timer(void *arg)
{
  405280:	b580      	push	{r7, lr}
  405282:	b082      	sub	sp, #8
  405284:	af00      	add	r7, sp, #0
  405286:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: etharp_tmr()\n"));
  etharp_tmr();
  405288:	4b05      	ldr	r3, [pc, #20]	; (4052a0 <arp_timer+0x20>)
  40528a:	4798      	blx	r3
  sys_timeout(ARP_TMR_INTERVAL, arp_timer, NULL);
  40528c:	2200      	movs	r2, #0
  40528e:	4905      	ldr	r1, [pc, #20]	; (4052a4 <arp_timer+0x24>)
  405290:	f241 3088 	movw	r0, #5000	; 0x1388
  405294:	4b04      	ldr	r3, [pc, #16]	; (4052a8 <arp_timer+0x28>)
  405296:	4798      	blx	r3
}
  405298:	bf00      	nop
  40529a:	3708      	adds	r7, #8
  40529c:	46bd      	mov	sp, r7
  40529e:	bd80      	pop	{r7, pc}
  4052a0:	0040b16d 	.word	0x0040b16d
  4052a4:	00405281 	.word	0x00405281
  4052a8:	00405365 	.word	0x00405365

004052ac <dhcp_timer_coarse>:
 *
 * @param arg unused argument
 */
static void
dhcp_timer_coarse(void *arg)
{
  4052ac:	b580      	push	{r7, lr}
  4052ae:	b082      	sub	sp, #8
  4052b0:	af00      	add	r7, sp, #0
  4052b2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: dhcp_coarse_tmr()\n"));
  dhcp_coarse_tmr();
  4052b4:	4b05      	ldr	r3, [pc, #20]	; (4052cc <dhcp_timer_coarse+0x20>)
  4052b6:	4798      	blx	r3
  sys_timeout(DHCP_COARSE_TIMER_MSECS, dhcp_timer_coarse, NULL);
  4052b8:	2200      	movs	r2, #0
  4052ba:	4905      	ldr	r1, [pc, #20]	; (4052d0 <dhcp_timer_coarse+0x24>)
  4052bc:	f64e 2060 	movw	r0, #60000	; 0xea60
  4052c0:	4b04      	ldr	r3, [pc, #16]	; (4052d4 <dhcp_timer_coarse+0x28>)
  4052c2:	4798      	blx	r3
}
  4052c4:	bf00      	nop
  4052c6:	3708      	adds	r7, #8
  4052c8:	46bd      	mov	sp, r7
  4052ca:	bd80      	pop	{r7, pc}
  4052cc:	0040261d 	.word	0x0040261d
  4052d0:	004052ad 	.word	0x004052ad
  4052d4:	00405365 	.word	0x00405365

004052d8 <dhcp_timer_fine>:
 *
 * @param arg unused argument
 */
static void
dhcp_timer_fine(void *arg)
{
  4052d8:	b580      	push	{r7, lr}
  4052da:	b082      	sub	sp, #8
  4052dc:	af00      	add	r7, sp, #0
  4052de:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: dhcp_fine_tmr()\n"));
  dhcp_fine_tmr();
  4052e0:	4b05      	ldr	r3, [pc, #20]	; (4052f8 <dhcp_timer_fine+0x20>)
  4052e2:	4798      	blx	r3
  sys_timeout(DHCP_FINE_TIMER_MSECS, dhcp_timer_fine, NULL);
  4052e4:	2200      	movs	r2, #0
  4052e6:	4905      	ldr	r1, [pc, #20]	; (4052fc <dhcp_timer_fine+0x24>)
  4052e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  4052ec:	4b04      	ldr	r3, [pc, #16]	; (405300 <dhcp_timer_fine+0x28>)
  4052ee:	4798      	blx	r3
}
  4052f0:	bf00      	nop
  4052f2:	3708      	adds	r7, #8
  4052f4:	46bd      	mov	sp, r7
  4052f6:	bd80      	pop	{r7, pc}
  4052f8:	00402681 	.word	0x00402681
  4052fc:	004052d9 	.word	0x004052d9
  405300:	00405365 	.word	0x00405365

00405304 <sys_timeouts_init>:
}
#endif /* LWIP_DNS */

/** Initialize this module */
void sys_timeouts_init(void)
{
  405304:	b580      	push	{r7, lr}
  405306:	af00      	add	r7, sp, #0
#if IP_REASSEMBLY
  sys_timeout(IP_TMR_INTERVAL, ip_reass_timer, NULL);
  405308:	2200      	movs	r2, #0
  40530a:	490f      	ldr	r1, [pc, #60]	; (405348 <sys_timeouts_init+0x44>)
  40530c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  405310:	4b0e      	ldr	r3, [pc, #56]	; (40534c <sys_timeouts_init+0x48>)
  405312:	4798      	blx	r3
#endif /* IP_REASSEMBLY */
#if LWIP_ARP
  sys_timeout(ARP_TMR_INTERVAL, arp_timer, NULL);
  405314:	2200      	movs	r2, #0
  405316:	490e      	ldr	r1, [pc, #56]	; (405350 <sys_timeouts_init+0x4c>)
  405318:	f241 3088 	movw	r0, #5000	; 0x1388
  40531c:	4b0b      	ldr	r3, [pc, #44]	; (40534c <sys_timeouts_init+0x48>)
  40531e:	4798      	blx	r3
#endif /* LWIP_ARP */
#if LWIP_DHCP
  sys_timeout(DHCP_COARSE_TIMER_MSECS, dhcp_timer_coarse, NULL);
  405320:	2200      	movs	r2, #0
  405322:	490c      	ldr	r1, [pc, #48]	; (405354 <sys_timeouts_init+0x50>)
  405324:	f64e 2060 	movw	r0, #60000	; 0xea60
  405328:	4b08      	ldr	r3, [pc, #32]	; (40534c <sys_timeouts_init+0x48>)
  40532a:	4798      	blx	r3
  sys_timeout(DHCP_FINE_TIMER_MSECS, dhcp_timer_fine, NULL);
  40532c:	2200      	movs	r2, #0
  40532e:	490a      	ldr	r1, [pc, #40]	; (405358 <sys_timeouts_init+0x54>)
  405330:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  405334:	4b05      	ldr	r3, [pc, #20]	; (40534c <sys_timeouts_init+0x48>)
  405336:	4798      	blx	r3
  sys_timeout(DNS_TMR_INTERVAL, dns_timer, NULL);
#endif /* LWIP_DNS */

#if NO_SYS
  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
  405338:	4b08      	ldr	r3, [pc, #32]	; (40535c <sys_timeouts_init+0x58>)
  40533a:	4798      	blx	r3
  40533c:	4602      	mov	r2, r0
  40533e:	4b08      	ldr	r3, [pc, #32]	; (405360 <sys_timeouts_init+0x5c>)
  405340:	601a      	str	r2, [r3, #0]
#endif
}
  405342:	bf00      	nop
  405344:	bd80      	pop	{r7, pc}
  405346:	bf00      	nop
  405348:	00405255 	.word	0x00405255
  40534c:	00405365 	.word	0x00405365
  405350:	00405281 	.word	0x00405281
  405354:	004052ad 	.word	0x004052ad
  405358:	004052d9 	.word	0x004052d9
  40535c:	0040d231 	.word	0x0040d231
  405360:	20400a94 	.word	0x20400a94

00405364 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
  405364:	b580      	push	{r7, lr}
  405366:	b086      	sub	sp, #24
  405368:	af00      	add	r7, sp, #0
  40536a:	60f8      	str	r0, [r7, #12]
  40536c:	60b9      	str	r1, [r7, #8]
  40536e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
  405370:	2005      	movs	r0, #5
  405372:	4b33      	ldr	r3, [pc, #204]	; (405440 <sys_timeout+0xdc>)
  405374:	4798      	blx	r3
  405376:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
  405378:	693b      	ldr	r3, [r7, #16]
  40537a:	2b00      	cmp	r3, #0
  40537c:	d05b      	beq.n	405436 <sys_timeout+0xd2>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
    return;
  }
  timeout->next = NULL;
  40537e:	693b      	ldr	r3, [r7, #16]
  405380:	2200      	movs	r2, #0
  405382:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
  405384:	693b      	ldr	r3, [r7, #16]
  405386:	68ba      	ldr	r2, [r7, #8]
  405388:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
  40538a:	693b      	ldr	r3, [r7, #16]
  40538c:	687a      	ldr	r2, [r7, #4]
  40538e:	60da      	str	r2, [r3, #12]
  timeout->time = msecs;
  405390:	693b      	ldr	r3, [r7, #16]
  405392:	68fa      	ldr	r2, [r7, #12]
  405394:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
  405396:	4b2b      	ldr	r3, [pc, #172]	; (405444 <sys_timeout+0xe0>)
  405398:	681b      	ldr	r3, [r3, #0]
  40539a:	2b00      	cmp	r3, #0
  40539c:	d103      	bne.n	4053a6 <sys_timeout+0x42>
    next_timeout = timeout;
  40539e:	4a29      	ldr	r2, [pc, #164]	; (405444 <sys_timeout+0xe0>)
  4053a0:	693b      	ldr	r3, [r7, #16]
  4053a2:	6013      	str	r3, [r2, #0]
    return;
  4053a4:	e048      	b.n	405438 <sys_timeout+0xd4>
  }

  if (next_timeout->time > msecs) {
  4053a6:	4b27      	ldr	r3, [pc, #156]	; (405444 <sys_timeout+0xe0>)
  4053a8:	681b      	ldr	r3, [r3, #0]
  4053aa:	685a      	ldr	r2, [r3, #4]
  4053ac:	68fb      	ldr	r3, [r7, #12]
  4053ae:	429a      	cmp	r2, r3
  4053b0:	d90f      	bls.n	4053d2 <sys_timeout+0x6e>
    next_timeout->time -= msecs;
  4053b2:	4b24      	ldr	r3, [pc, #144]	; (405444 <sys_timeout+0xe0>)
  4053b4:	681b      	ldr	r3, [r3, #0]
  4053b6:	4a23      	ldr	r2, [pc, #140]	; (405444 <sys_timeout+0xe0>)
  4053b8:	6812      	ldr	r2, [r2, #0]
  4053ba:	6851      	ldr	r1, [r2, #4]
  4053bc:	68fa      	ldr	r2, [r7, #12]
  4053be:	1a8a      	subs	r2, r1, r2
  4053c0:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
  4053c2:	4b20      	ldr	r3, [pc, #128]	; (405444 <sys_timeout+0xe0>)
  4053c4:	681a      	ldr	r2, [r3, #0]
  4053c6:	693b      	ldr	r3, [r7, #16]
  4053c8:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
  4053ca:	4a1e      	ldr	r2, [pc, #120]	; (405444 <sys_timeout+0xe0>)
  4053cc:	693b      	ldr	r3, [r7, #16]
  4053ce:	6013      	str	r3, [r2, #0]
  4053d0:	e032      	b.n	405438 <sys_timeout+0xd4>
  } else {
    for(t = next_timeout; t != NULL; t = t->next) {
  4053d2:	4b1c      	ldr	r3, [pc, #112]	; (405444 <sys_timeout+0xe0>)
  4053d4:	681b      	ldr	r3, [r3, #0]
  4053d6:	617b      	str	r3, [r7, #20]
  4053d8:	e029      	b.n	40542e <sys_timeout+0xca>
      timeout->time -= t->time;
  4053da:	693b      	ldr	r3, [r7, #16]
  4053dc:	685a      	ldr	r2, [r3, #4]
  4053de:	697b      	ldr	r3, [r7, #20]
  4053e0:	685b      	ldr	r3, [r3, #4]
  4053e2:	1ad2      	subs	r2, r2, r3
  4053e4:	693b      	ldr	r3, [r7, #16]
  4053e6:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
  4053e8:	697b      	ldr	r3, [r7, #20]
  4053ea:	681b      	ldr	r3, [r3, #0]
  4053ec:	2b00      	cmp	r3, #0
  4053ee:	d006      	beq.n	4053fe <sys_timeout+0x9a>
  4053f0:	697b      	ldr	r3, [r7, #20]
  4053f2:	681b      	ldr	r3, [r3, #0]
  4053f4:	685a      	ldr	r2, [r3, #4]
  4053f6:	693b      	ldr	r3, [r7, #16]
  4053f8:	685b      	ldr	r3, [r3, #4]
  4053fa:	429a      	cmp	r2, r3
  4053fc:	d914      	bls.n	405428 <sys_timeout+0xc4>
        if (t->next != NULL) {
  4053fe:	697b      	ldr	r3, [r7, #20]
  405400:	681b      	ldr	r3, [r3, #0]
  405402:	2b00      	cmp	r3, #0
  405404:	d008      	beq.n	405418 <sys_timeout+0xb4>
          t->next->time -= timeout->time;
  405406:	697b      	ldr	r3, [r7, #20]
  405408:	681b      	ldr	r3, [r3, #0]
  40540a:	697a      	ldr	r2, [r7, #20]
  40540c:	6812      	ldr	r2, [r2, #0]
  40540e:	6851      	ldr	r1, [r2, #4]
  405410:	693a      	ldr	r2, [r7, #16]
  405412:	6852      	ldr	r2, [r2, #4]
  405414:	1a8a      	subs	r2, r1, r2
  405416:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
  405418:	697b      	ldr	r3, [r7, #20]
  40541a:	681a      	ldr	r2, [r3, #0]
  40541c:	693b      	ldr	r3, [r7, #16]
  40541e:	601a      	str	r2, [r3, #0]
        t->next = timeout;
  405420:	697b      	ldr	r3, [r7, #20]
  405422:	693a      	ldr	r2, [r7, #16]
  405424:	601a      	str	r2, [r3, #0]
        break;
  405426:	e007      	b.n	405438 <sys_timeout+0xd4>
  if (next_timeout->time > msecs) {
    next_timeout->time -= msecs;
    timeout->next = next_timeout;
    next_timeout = timeout;
  } else {
    for(t = next_timeout; t != NULL; t = t->next) {
  405428:	697b      	ldr	r3, [r7, #20]
  40542a:	681b      	ldr	r3, [r3, #0]
  40542c:	617b      	str	r3, [r7, #20]
  40542e:	697b      	ldr	r3, [r7, #20]
  405430:	2b00      	cmp	r3, #0
  405432:	d1d2      	bne.n	4053da <sys_timeout+0x76>
  405434:	e000      	b.n	405438 <sys_timeout+0xd4>
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
  if (timeout == NULL) {
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
    return;
  405436:	bf00      	nop
        t->next = timeout;
        break;
      }
    }
  }
}
  405438:	3718      	adds	r7, #24
  40543a:	46bd      	mov	sp, r7
  40543c:	bd80      	pop	{r7, pc}
  40543e:	bf00      	nop
  405440:	00405941 	.word	0x00405941
  405444:	20400a90 	.word	0x20400a90

00405448 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
  405448:	b480      	push	{r7}
  40544a:	b085      	sub	sp, #20
  40544c:	af00      	add	r7, sp, #0
  40544e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);

  nmem = (struct mem *)(void *)&ram[mem->next];
  405450:	4b2a      	ldr	r3, [pc, #168]	; (4054fc <plug_holes+0xb4>)
  405452:	681b      	ldr	r3, [r3, #0]
  405454:	687a      	ldr	r2, [r7, #4]
  405456:	8812      	ldrh	r2, [r2, #0]
  405458:	4413      	add	r3, r2
  40545a:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
  40545c:	687a      	ldr	r2, [r7, #4]
  40545e:	68fb      	ldr	r3, [r7, #12]
  405460:	429a      	cmp	r2, r3
  405462:	d01f      	beq.n	4054a4 <plug_holes+0x5c>
  405464:	68fb      	ldr	r3, [r7, #12]
  405466:	791b      	ldrb	r3, [r3, #4]
  405468:	2b00      	cmp	r3, #0
  40546a:	d11b      	bne.n	4054a4 <plug_holes+0x5c>
  40546c:	4b24      	ldr	r3, [pc, #144]	; (405500 <plug_holes+0xb8>)
  40546e:	681b      	ldr	r3, [r3, #0]
  405470:	68fa      	ldr	r2, [r7, #12]
  405472:	429a      	cmp	r2, r3
  405474:	d016      	beq.n	4054a4 <plug_holes+0x5c>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
  405476:	4b23      	ldr	r3, [pc, #140]	; (405504 <plug_holes+0xbc>)
  405478:	681a      	ldr	r2, [r3, #0]
  40547a:	68fb      	ldr	r3, [r7, #12]
  40547c:	429a      	cmp	r2, r3
  40547e:	d102      	bne.n	405486 <plug_holes+0x3e>
      lfree = mem;
  405480:	4a20      	ldr	r2, [pc, #128]	; (405504 <plug_holes+0xbc>)
  405482:	687b      	ldr	r3, [r7, #4]
  405484:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
  405486:	68fb      	ldr	r3, [r7, #12]
  405488:	881a      	ldrh	r2, [r3, #0]
  40548a:	687b      	ldr	r3, [r7, #4]
  40548c:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
  40548e:	4b1b      	ldr	r3, [pc, #108]	; (4054fc <plug_holes+0xb4>)
  405490:	681b      	ldr	r3, [r3, #0]
  405492:	68fa      	ldr	r2, [r7, #12]
  405494:	8812      	ldrh	r2, [r2, #0]
  405496:	4413      	add	r3, r2
  405498:	687a      	ldr	r2, [r7, #4]
  40549a:	4918      	ldr	r1, [pc, #96]	; (4054fc <plug_holes+0xb4>)
  40549c:	6809      	ldr	r1, [r1, #0]
  40549e:	1a52      	subs	r2, r2, r1
  4054a0:	b292      	uxth	r2, r2
  4054a2:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
  4054a4:	4b15      	ldr	r3, [pc, #84]	; (4054fc <plug_holes+0xb4>)
  4054a6:	681b      	ldr	r3, [r3, #0]
  4054a8:	687a      	ldr	r2, [r7, #4]
  4054aa:	8852      	ldrh	r2, [r2, #2]
  4054ac:	4413      	add	r3, r2
  4054ae:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
  4054b0:	68ba      	ldr	r2, [r7, #8]
  4054b2:	687b      	ldr	r3, [r7, #4]
  4054b4:	429a      	cmp	r2, r3
  4054b6:	d01a      	beq.n	4054ee <plug_holes+0xa6>
  4054b8:	68bb      	ldr	r3, [r7, #8]
  4054ba:	791b      	ldrb	r3, [r3, #4]
  4054bc:	2b00      	cmp	r3, #0
  4054be:	d116      	bne.n	4054ee <plug_holes+0xa6>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
  4054c0:	4b10      	ldr	r3, [pc, #64]	; (405504 <plug_holes+0xbc>)
  4054c2:	681a      	ldr	r2, [r3, #0]
  4054c4:	687b      	ldr	r3, [r7, #4]
  4054c6:	429a      	cmp	r2, r3
  4054c8:	d102      	bne.n	4054d0 <plug_holes+0x88>
      lfree = pmem;
  4054ca:	4a0e      	ldr	r2, [pc, #56]	; (405504 <plug_holes+0xbc>)
  4054cc:	68bb      	ldr	r3, [r7, #8]
  4054ce:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
  4054d0:	687b      	ldr	r3, [r7, #4]
  4054d2:	881a      	ldrh	r2, [r3, #0]
  4054d4:	68bb      	ldr	r3, [r7, #8]
  4054d6:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
  4054d8:	4b08      	ldr	r3, [pc, #32]	; (4054fc <plug_holes+0xb4>)
  4054da:	681b      	ldr	r3, [r3, #0]
  4054dc:	687a      	ldr	r2, [r7, #4]
  4054de:	8812      	ldrh	r2, [r2, #0]
  4054e0:	4413      	add	r3, r2
  4054e2:	68ba      	ldr	r2, [r7, #8]
  4054e4:	4905      	ldr	r1, [pc, #20]	; (4054fc <plug_holes+0xb4>)
  4054e6:	6809      	ldr	r1, [r1, #0]
  4054e8:	1a52      	subs	r2, r2, r1
  4054ea:	b292      	uxth	r2, r2
  4054ec:	805a      	strh	r2, [r3, #2]
  }
}
  4054ee:	bf00      	nop
  4054f0:	3714      	adds	r7, #20
  4054f2:	46bd      	mov	sp, r7
  4054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4054f8:	4770      	bx	lr
  4054fa:	bf00      	nop
  4054fc:	20400a9c 	.word	0x20400a9c
  405500:	20400aa0 	.word	0x20400aa0
  405504:	20400aa4 	.word	0x20400aa4

00405508 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
  405508:	b480      	push	{r7}
  40550a:	b083      	sub	sp, #12
  40550c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
  40550e:	4b19      	ldr	r3, [pc, #100]	; (405574 <mem_init+0x6c>)
  405510:	3303      	adds	r3, #3
  405512:	f023 0303 	bic.w	r3, r3, #3
  405516:	461a      	mov	r2, r3
  405518:	4b17      	ldr	r3, [pc, #92]	; (405578 <mem_init+0x70>)
  40551a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  40551c:	4b16      	ldr	r3, [pc, #88]	; (405578 <mem_init+0x70>)
  40551e:	681b      	ldr	r3, [r3, #0]
  405520:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
  405522:	687b      	ldr	r3, [r7, #4]
  405524:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  405528:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
  40552a:	687b      	ldr	r3, [r7, #4]
  40552c:	2200      	movs	r2, #0
  40552e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
  405530:	687b      	ldr	r3, [r7, #4]
  405532:	2200      	movs	r2, #0
  405534:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
  405536:	4b10      	ldr	r3, [pc, #64]	; (405578 <mem_init+0x70>)
  405538:	681b      	ldr	r3, [r3, #0]
  40553a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  40553e:	4a0f      	ldr	r2, [pc, #60]	; (40557c <mem_init+0x74>)
  405540:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
  405542:	4b0e      	ldr	r3, [pc, #56]	; (40557c <mem_init+0x74>)
  405544:	681b      	ldr	r3, [r3, #0]
  405546:	2201      	movs	r2, #1
  405548:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
  40554a:	4b0c      	ldr	r3, [pc, #48]	; (40557c <mem_init+0x74>)
  40554c:	681b      	ldr	r3, [r3, #0]
  40554e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  405552:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
  405554:	4b09      	ldr	r3, [pc, #36]	; (40557c <mem_init+0x74>)
  405556:	681b      	ldr	r3, [r3, #0]
  405558:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40555c:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
  40555e:	4b06      	ldr	r3, [pc, #24]	; (405578 <mem_init+0x70>)
  405560:	681b      	ldr	r3, [r3, #0]
  405562:	4a07      	ldr	r2, [pc, #28]	; (405580 <mem_init+0x78>)
  405564:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if(sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
  405566:	bf00      	nop
  405568:	370c      	adds	r7, #12
  40556a:	46bd      	mov	sp, r7
  40556c:	f85d 7b04 	ldr.w	r7, [sp], #4
  405570:	4770      	bx	lr
  405572:	bf00      	nop
  405574:	2040395c 	.word	0x2040395c
  405578:	20400a9c 	.word	0x20400a9c
  40557c:	20400aa0 	.word	0x20400aa0
  405580:	20400aa4 	.word	0x20400aa4

00405584 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
  405584:	b580      	push	{r7, lr}
  405586:	b084      	sub	sp, #16
  405588:	af00      	add	r7, sp, #0
  40558a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
  40558c:	687b      	ldr	r3, [r7, #4]
  40558e:	2b00      	cmp	r3, #0
  405590:	d01b      	beq.n	4055ca <mem_free+0x46>
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
  405592:	4b11      	ldr	r3, [pc, #68]	; (4055d8 <mem_free+0x54>)
  405594:	681b      	ldr	r3, [r3, #0]
  405596:	687a      	ldr	r2, [r7, #4]
  405598:	429a      	cmp	r2, r3
  40559a:	d318      	bcc.n	4055ce <mem_free+0x4a>
  40559c:	4b0f      	ldr	r3, [pc, #60]	; (4055dc <mem_free+0x58>)
  40559e:	681b      	ldr	r3, [r3, #0]
  4055a0:	687a      	ldr	r2, [r7, #4]
  4055a2:	429a      	cmp	r2, r3
  4055a4:	d213      	bcs.n	4055ce <mem_free+0x4a>
    return;
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* Get the corresponding struct mem ... */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
  4055a6:	687b      	ldr	r3, [r7, #4]
  4055a8:	3b08      	subs	r3, #8
  4055aa:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
  /* ... and is now unused. */
  mem->used = 0;
  4055ac:	68fb      	ldr	r3, [r7, #12]
  4055ae:	2200      	movs	r2, #0
  4055b0:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
  4055b2:	4b0b      	ldr	r3, [pc, #44]	; (4055e0 <mem_free+0x5c>)
  4055b4:	681b      	ldr	r3, [r3, #0]
  4055b6:	68fa      	ldr	r2, [r7, #12]
  4055b8:	429a      	cmp	r2, r3
  4055ba:	d202      	bcs.n	4055c2 <mem_free+0x3e>
    /* the newly freed struct is now the lowest */
    lfree = mem;
  4055bc:	4a08      	ldr	r2, [pc, #32]	; (4055e0 <mem_free+0x5c>)
  4055be:	68fb      	ldr	r3, [r7, #12]
  4055c0:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
  4055c2:	68f8      	ldr	r0, [r7, #12]
  4055c4:	4b07      	ldr	r3, [pc, #28]	; (4055e4 <mem_free+0x60>)
  4055c6:	4798      	blx	r3
  4055c8:	e002      	b.n	4055d0 <mem_free+0x4c>
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  4055ca:	bf00      	nop
  4055cc:	e000      	b.n	4055d0 <mem_free+0x4c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
    return;
  4055ce:	bf00      	nop
  plug_holes(mem);
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
  4055d0:	3710      	adds	r7, #16
  4055d2:	46bd      	mov	sp, r7
  4055d4:	bd80      	pop	{r7, pc}
  4055d6:	bf00      	nop
  4055d8:	20400a9c 	.word	0x20400a9c
  4055dc:	20400aa0 	.word	0x20400aa0
  4055e0:	20400aa4 	.word	0x20400aa4
  4055e4:	00405449 	.word	0x00405449

004055e8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
  4055e8:	b480      	push	{r7}
  4055ea:	b087      	sub	sp, #28
  4055ec:	af00      	add	r7, sp, #0
  4055ee:	6078      	str	r0, [r7, #4]
  4055f0:	460b      	mov	r3, r1
  4055f2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
  4055f4:	887b      	ldrh	r3, [r7, #2]
  4055f6:	3303      	adds	r3, #3
  4055f8:	b29b      	uxth	r3, r3
  4055fa:	f023 0303 	bic.w	r3, r3, #3
  4055fe:	807b      	strh	r3, [r7, #2]

  if(newsize < MIN_SIZE_ALIGNED) {
  405600:	887b      	ldrh	r3, [r7, #2]
  405602:	2b0b      	cmp	r3, #11
  405604:	d801      	bhi.n	40560a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
  405606:	230c      	movs	r3, #12
  405608:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
  40560a:	887b      	ldrh	r3, [r7, #2]
  40560c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
  405610:	d901      	bls.n	405616 <mem_trim+0x2e>
    return NULL;
  405612:	2300      	movs	r3, #0
  405614:	e095      	b.n	405742 <mem_trim+0x15a>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
  405616:	4b4e      	ldr	r3, [pc, #312]	; (405750 <mem_trim+0x168>)
  405618:	681b      	ldr	r3, [r3, #0]
  40561a:	687a      	ldr	r2, [r7, #4]
  40561c:	429a      	cmp	r2, r3
  40561e:	d304      	bcc.n	40562a <mem_trim+0x42>
  405620:	4b4c      	ldr	r3, [pc, #304]	; (405754 <mem_trim+0x16c>)
  405622:	681b      	ldr	r3, [r3, #0]
  405624:	687a      	ldr	r2, [r7, #4]
  405626:	429a      	cmp	r2, r3
  405628:	d301      	bcc.n	40562e <mem_trim+0x46>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
  40562a:	687b      	ldr	r3, [r7, #4]
  40562c:	e089      	b.n	405742 <mem_trim+0x15a>
  }
  /* Get the corresponding struct mem ... */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
  40562e:	687b      	ldr	r3, [r7, #4]
  405630:	3b08      	subs	r3, #8
  405632:	617b      	str	r3, [r7, #20]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
  405634:	697b      	ldr	r3, [r7, #20]
  405636:	4a46      	ldr	r2, [pc, #280]	; (405750 <mem_trim+0x168>)
  405638:	6812      	ldr	r2, [r2, #0]
  40563a:	1a9b      	subs	r3, r3, r2
  40563c:	827b      	strh	r3, [r7, #18]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
  40563e:	697b      	ldr	r3, [r7, #20]
  405640:	881a      	ldrh	r2, [r3, #0]
  405642:	8a7b      	ldrh	r3, [r7, #18]
  405644:	1ad3      	subs	r3, r2, r3
  405646:	b29b      	uxth	r3, r3
  405648:	3b08      	subs	r3, #8
  40564a:	823b      	strh	r3, [r7, #16]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
  if (newsize > size) {
  40564c:	887a      	ldrh	r2, [r7, #2]
  40564e:	8a3b      	ldrh	r3, [r7, #16]
  405650:	429a      	cmp	r2, r3
  405652:	d901      	bls.n	405658 <mem_trim+0x70>
    /* not supported */
    return NULL;
  405654:	2300      	movs	r3, #0
  405656:	e074      	b.n	405742 <mem_trim+0x15a>
  }
  if (newsize == size) {
  405658:	887a      	ldrh	r2, [r7, #2]
  40565a:	8a3b      	ldrh	r3, [r7, #16]
  40565c:	429a      	cmp	r2, r3
  40565e:	d101      	bne.n	405664 <mem_trim+0x7c>
    /* No change in size, simply return */
    return rmem;
  405660:	687b      	ldr	r3, [r7, #4]
  405662:	e06e      	b.n	405742 <mem_trim+0x15a>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = (struct mem *)(void *)&ram[mem->next];
  405664:	4b3a      	ldr	r3, [pc, #232]	; (405750 <mem_trim+0x168>)
  405666:	681b      	ldr	r3, [r3, #0]
  405668:	697a      	ldr	r2, [r7, #20]
  40566a:	8812      	ldrh	r2, [r2, #0]
  40566c:	4413      	add	r3, r2
  40566e:	60fb      	str	r3, [r7, #12]
  if(mem2->used == 0) {
  405670:	68fb      	ldr	r3, [r7, #12]
  405672:	791b      	ldrb	r3, [r3, #4]
  405674:	2b00      	cmp	r3, #0
  405676:	d131      	bne.n	4056dc <mem_trim+0xf4>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
  405678:	68fb      	ldr	r3, [r7, #12]
  40567a:	881b      	ldrh	r3, [r3, #0]
  40567c:	817b      	strh	r3, [r7, #10]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
  40567e:	8a7a      	ldrh	r2, [r7, #18]
  405680:	887b      	ldrh	r3, [r7, #2]
  405682:	4413      	add	r3, r2
  405684:	b29b      	uxth	r3, r3
  405686:	3308      	adds	r3, #8
  405688:	813b      	strh	r3, [r7, #8]
    if (lfree == mem2) {
  40568a:	4b33      	ldr	r3, [pc, #204]	; (405758 <mem_trim+0x170>)
  40568c:	681a      	ldr	r2, [r3, #0]
  40568e:	68fb      	ldr	r3, [r7, #12]
  405690:	429a      	cmp	r2, r3
  405692:	d105      	bne.n	4056a0 <mem_trim+0xb8>
      lfree = (struct mem *)(void *)&ram[ptr2];
  405694:	4b2e      	ldr	r3, [pc, #184]	; (405750 <mem_trim+0x168>)
  405696:	681a      	ldr	r2, [r3, #0]
  405698:	893b      	ldrh	r3, [r7, #8]
  40569a:	4413      	add	r3, r2
  40569c:	4a2e      	ldr	r2, [pc, #184]	; (405758 <mem_trim+0x170>)
  40569e:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
  4056a0:	4b2b      	ldr	r3, [pc, #172]	; (405750 <mem_trim+0x168>)
  4056a2:	681a      	ldr	r2, [r3, #0]
  4056a4:	893b      	ldrh	r3, [r7, #8]
  4056a6:	4413      	add	r3, r2
  4056a8:	60fb      	str	r3, [r7, #12]
    mem2->used = 0;
  4056aa:	68fb      	ldr	r3, [r7, #12]
  4056ac:	2200      	movs	r2, #0
  4056ae:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
  4056b0:	68fb      	ldr	r3, [r7, #12]
  4056b2:	897a      	ldrh	r2, [r7, #10]
  4056b4:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
  4056b6:	68fb      	ldr	r3, [r7, #12]
  4056b8:	8a7a      	ldrh	r2, [r7, #18]
  4056ba:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
  4056bc:	697b      	ldr	r3, [r7, #20]
  4056be:	893a      	ldrh	r2, [r7, #8]
  4056c0:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
  4056c2:	68fb      	ldr	r3, [r7, #12]
  4056c4:	881b      	ldrh	r3, [r3, #0]
  4056c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
  4056ca:	d039      	beq.n	405740 <mem_trim+0x158>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
  4056cc:	4b20      	ldr	r3, [pc, #128]	; (405750 <mem_trim+0x168>)
  4056ce:	681b      	ldr	r3, [r3, #0]
  4056d0:	68fa      	ldr	r2, [r7, #12]
  4056d2:	8812      	ldrh	r2, [r2, #0]
  4056d4:	4413      	add	r3, r2
  4056d6:	893a      	ldrh	r2, [r7, #8]
  4056d8:	805a      	strh	r2, [r3, #2]
  4056da:	e031      	b.n	405740 <mem_trim+0x158>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
  4056dc:	887b      	ldrh	r3, [r7, #2]
  4056de:	f103 0214 	add.w	r2, r3, #20
  4056e2:	8a3b      	ldrh	r3, [r7, #16]
  4056e4:	429a      	cmp	r2, r3
  4056e6:	d82b      	bhi.n	405740 <mem_trim+0x158>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
  4056e8:	8a7a      	ldrh	r2, [r7, #18]
  4056ea:	887b      	ldrh	r3, [r7, #2]
  4056ec:	4413      	add	r3, r2
  4056ee:	b29b      	uxth	r3, r3
  4056f0:	3308      	adds	r3, #8
  4056f2:	813b      	strh	r3, [r7, #8]
    mem2 = (struct mem *)(void *)&ram[ptr2];
  4056f4:	4b16      	ldr	r3, [pc, #88]	; (405750 <mem_trim+0x168>)
  4056f6:	681a      	ldr	r2, [r3, #0]
  4056f8:	893b      	ldrh	r3, [r7, #8]
  4056fa:	4413      	add	r3, r2
  4056fc:	60fb      	str	r3, [r7, #12]
    if (mem2 < lfree) {
  4056fe:	4b16      	ldr	r3, [pc, #88]	; (405758 <mem_trim+0x170>)
  405700:	681b      	ldr	r3, [r3, #0]
  405702:	68fa      	ldr	r2, [r7, #12]
  405704:	429a      	cmp	r2, r3
  405706:	d202      	bcs.n	40570e <mem_trim+0x126>
      lfree = mem2;
  405708:	4a13      	ldr	r2, [pc, #76]	; (405758 <mem_trim+0x170>)
  40570a:	68fb      	ldr	r3, [r7, #12]
  40570c:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
  40570e:	68fb      	ldr	r3, [r7, #12]
  405710:	2200      	movs	r2, #0
  405712:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
  405714:	697b      	ldr	r3, [r7, #20]
  405716:	881a      	ldrh	r2, [r3, #0]
  405718:	68fb      	ldr	r3, [r7, #12]
  40571a:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
  40571c:	68fb      	ldr	r3, [r7, #12]
  40571e:	8a7a      	ldrh	r2, [r7, #18]
  405720:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
  405722:	697b      	ldr	r3, [r7, #20]
  405724:	893a      	ldrh	r2, [r7, #8]
  405726:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
  405728:	68fb      	ldr	r3, [r7, #12]
  40572a:	881b      	ldrh	r3, [r3, #0]
  40572c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
  405730:	d006      	beq.n	405740 <mem_trim+0x158>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
  405732:	4b07      	ldr	r3, [pc, #28]	; (405750 <mem_trim+0x168>)
  405734:	681b      	ldr	r3, [r3, #0]
  405736:	68fa      	ldr	r2, [r7, #12]
  405738:	8812      	ldrh	r2, [r2, #0]
  40573a:	4413      	add	r3, r2
  40573c:	893a      	ldrh	r2, [r7, #8]
  40573e:	805a      	strh	r2, [r3, #2]
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
  405740:	687b      	ldr	r3, [r7, #4]
}
  405742:	4618      	mov	r0, r3
  405744:	371c      	adds	r7, #28
  405746:	46bd      	mov	sp, r7
  405748:	f85d 7b04 	ldr.w	r7, [sp], #4
  40574c:	4770      	bx	lr
  40574e:	bf00      	nop
  405750:	20400a9c 	.word	0x20400a9c
  405754:	20400aa0 	.word	0x20400aa0
  405758:	20400aa4 	.word	0x20400aa4

0040575c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
  40575c:	b480      	push	{r7}
  40575e:	b089      	sub	sp, #36	; 0x24
  405760:	af00      	add	r7, sp, #0
  405762:	4603      	mov	r3, r0
  405764:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
  405766:	88fb      	ldrh	r3, [r7, #6]
  405768:	2b00      	cmp	r3, #0
  40576a:	d101      	bne.n	405770 <mem_malloc+0x14>
    return NULL;
  40576c:	2300      	movs	r3, #0
  40576e:	e08c      	b.n	40588a <mem_malloc+0x12e>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
  405770:	88fb      	ldrh	r3, [r7, #6]
  405772:	3303      	adds	r3, #3
  405774:	b29b      	uxth	r3, r3
  405776:	f023 0303 	bic.w	r3, r3, #3
  40577a:	80fb      	strh	r3, [r7, #6]

  if(size < MIN_SIZE_ALIGNED) {
  40577c:	88fb      	ldrh	r3, [r7, #6]
  40577e:	2b0b      	cmp	r3, #11
  405780:	d801      	bhi.n	405786 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
  405782:	230c      	movs	r3, #12
  405784:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
  405786:	88fb      	ldrh	r3, [r7, #6]
  405788:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
  40578c:	d901      	bls.n	405792 <mem_malloc+0x36>
    return NULL;
  40578e:	2300      	movs	r3, #0
  405790:	e07b      	b.n	40588a <mem_malloc+0x12e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
  405792:	4b41      	ldr	r3, [pc, #260]	; (405898 <mem_malloc+0x13c>)
  405794:	681b      	ldr	r3, [r3, #0]
  405796:	461a      	mov	r2, r3
  405798:	4b40      	ldr	r3, [pc, #256]	; (40589c <mem_malloc+0x140>)
  40579a:	681b      	ldr	r3, [r3, #0]
  40579c:	1ad3      	subs	r3, r2, r3
  40579e:	83fb      	strh	r3, [r7, #30]
  4057a0:	e06c      	b.n	40587c <mem_malloc+0x120>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
  4057a2:	4b3e      	ldr	r3, [pc, #248]	; (40589c <mem_malloc+0x140>)
  4057a4:	681a      	ldr	r2, [r3, #0]
  4057a6:	8bfb      	ldrh	r3, [r7, #30]
  4057a8:	4413      	add	r3, r2
  4057aa:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
  4057ac:	697b      	ldr	r3, [r7, #20]
  4057ae:	791b      	ldrb	r3, [r3, #4]
  4057b0:	2b00      	cmp	r3, #0
  4057b2:	d15d      	bne.n	405870 <mem_malloc+0x114>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
  4057b4:	697b      	ldr	r3, [r7, #20]
  4057b6:	881b      	ldrh	r3, [r3, #0]
  4057b8:	461a      	mov	r2, r3
  4057ba:	8bfb      	ldrh	r3, [r7, #30]
  4057bc:	1ad3      	subs	r3, r2, r3
  4057be:	f1a3 0208 	sub.w	r2, r3, #8
  4057c2:	88fb      	ldrh	r3, [r7, #6]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
  4057c4:	429a      	cmp	r2, r3
  4057c6:	d353      	bcc.n	405870 <mem_malloc+0x114>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
  4057c8:	697b      	ldr	r3, [r7, #20]
  4057ca:	881b      	ldrh	r3, [r3, #0]
  4057cc:	461a      	mov	r2, r3
  4057ce:	8bfb      	ldrh	r3, [r7, #30]
  4057d0:	1ad3      	subs	r3, r2, r3
  4057d2:	f1a3 0208 	sub.w	r2, r3, #8
  4057d6:	88fb      	ldrh	r3, [r7, #6]
  4057d8:	3314      	adds	r3, #20
  4057da:	429a      	cmp	r2, r3
  4057dc:	d327      	bcc.n	40582e <mem_malloc+0xd2>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
  4057de:	8bfa      	ldrh	r2, [r7, #30]
  4057e0:	88fb      	ldrh	r3, [r7, #6]
  4057e2:	4413      	add	r3, r2
  4057e4:	b29b      	uxth	r3, r3
  4057e6:	3308      	adds	r3, #8
  4057e8:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
  4057ea:	4b2c      	ldr	r3, [pc, #176]	; (40589c <mem_malloc+0x140>)
  4057ec:	681a      	ldr	r2, [r3, #0]
  4057ee:	8a7b      	ldrh	r3, [r7, #18]
  4057f0:	4413      	add	r3, r2
  4057f2:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
  4057f4:	68fb      	ldr	r3, [r7, #12]
  4057f6:	2200      	movs	r2, #0
  4057f8:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
  4057fa:	697b      	ldr	r3, [r7, #20]
  4057fc:	881a      	ldrh	r2, [r3, #0]
  4057fe:	68fb      	ldr	r3, [r7, #12]
  405800:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
  405802:	68fb      	ldr	r3, [r7, #12]
  405804:	8bfa      	ldrh	r2, [r7, #30]
  405806:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
  405808:	697b      	ldr	r3, [r7, #20]
  40580a:	8a7a      	ldrh	r2, [r7, #18]
  40580c:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
  40580e:	697b      	ldr	r3, [r7, #20]
  405810:	2201      	movs	r2, #1
  405812:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
  405814:	68fb      	ldr	r3, [r7, #12]
  405816:	881b      	ldrh	r3, [r3, #0]
  405818:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
  40581c:	d00a      	beq.n	405834 <mem_malloc+0xd8>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
  40581e:	4b1f      	ldr	r3, [pc, #124]	; (40589c <mem_malloc+0x140>)
  405820:	681b      	ldr	r3, [r3, #0]
  405822:	68fa      	ldr	r2, [r7, #12]
  405824:	8812      	ldrh	r2, [r2, #0]
  405826:	4413      	add	r3, r2
  405828:	8a7a      	ldrh	r2, [r7, #18]
  40582a:	805a      	strh	r2, [r3, #2]
  40582c:	e002      	b.n	405834 <mem_malloc+0xd8>
           * take care of this).
           * -> near fit or excact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
  40582e:	697b      	ldr	r3, [r7, #20]
  405830:	2201      	movs	r2, #1
  405832:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
  405834:	4b18      	ldr	r3, [pc, #96]	; (405898 <mem_malloc+0x13c>)
  405836:	681b      	ldr	r3, [r3, #0]
  405838:	697a      	ldr	r2, [r7, #20]
  40583a:	429a      	cmp	r2, r3
  40583c:	d115      	bne.n	40586a <mem_malloc+0x10e>
          struct mem *cur = lfree;
  40583e:	4b16      	ldr	r3, [pc, #88]	; (405898 <mem_malloc+0x13c>)
  405840:	681b      	ldr	r3, [r3, #0]
  405842:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
  405844:	e005      	b.n	405852 <mem_malloc+0xf6>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
  405846:	4b15      	ldr	r3, [pc, #84]	; (40589c <mem_malloc+0x140>)
  405848:	681b      	ldr	r3, [r3, #0]
  40584a:	69ba      	ldr	r2, [r7, #24]
  40584c:	8812      	ldrh	r2, [r2, #0]
  40584e:	4413      	add	r3, r2
  405850:	61bb      	str	r3, [r7, #24]
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
          struct mem *cur = lfree;
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
  405852:	69bb      	ldr	r3, [r7, #24]
  405854:	791b      	ldrb	r3, [r3, #4]
  405856:	2b00      	cmp	r3, #0
  405858:	d004      	beq.n	405864 <mem_malloc+0x108>
  40585a:	4b11      	ldr	r3, [pc, #68]	; (4058a0 <mem_malloc+0x144>)
  40585c:	681b      	ldr	r3, [r3, #0]
  40585e:	69ba      	ldr	r2, [r7, #24]
  405860:	429a      	cmp	r2, r3
  405862:	d1f0      	bne.n	405846 <mem_malloc+0xea>
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
          }
          lfree = cur;
  405864:	4a0c      	ldr	r2, [pc, #48]	; (405898 <mem_malloc+0x13c>)
  405866:	69bb      	ldr	r3, [r7, #24]
  405868:	6013      	str	r3, [r2, #0]
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
  40586a:	697b      	ldr	r3, [r7, #20]
  40586c:	3308      	adds	r3, #8
  40586e:	e00c      	b.n	40588a <mem_malloc+0x12e>

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
  405870:	4b0a      	ldr	r3, [pc, #40]	; (40589c <mem_malloc+0x140>)
  405872:	681a      	ldr	r2, [r3, #0]
  405874:	8bfb      	ldrh	r3, [r7, #30]
  405876:	4413      	add	r3, r2
  405878:	881b      	ldrh	r3, [r3, #0]
  40587a:	83fb      	strh	r3, [r7, #30]
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
  40587c:	8bfa      	ldrh	r2, [r7, #30]
  40587e:	88fb      	ldrh	r3, [r7, #6]
  405880:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
  405884:	429a      	cmp	r2, r3
  405886:	db8c      	blt.n	4057a2 <mem_malloc+0x46>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
  405888:	2300      	movs	r3, #0
}
  40588a:	4618      	mov	r0, r3
  40588c:	3724      	adds	r7, #36	; 0x24
  40588e:	46bd      	mov	sp, r7
  405890:	f85d 7b04 	ldr.w	r7, [sp], #4
  405894:	4770      	bx	lr
  405896:	bf00      	nop
  405898:	20400aa4 	.word	0x20400aa4
  40589c:	20400a9c 	.word	0x20400a9c
  4058a0:	20400aa0 	.word	0x20400aa0

004058a4 <memp_init>:
 * 
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
  4058a4:	b480      	push	{r7}
  4058a6:	b083      	sub	sp, #12
  4058a8:	af00      	add	r7, sp, #0
  struct memp *memp;
  u16_t i, j;

  for (i = 0; i < MEMP_MAX; ++i) {
  4058aa:	2300      	movs	r3, #0
  4058ac:	807b      	strh	r3, [r7, #2]
  4058ae:	e002      	b.n	4058b6 <memp_init+0x12>
  4058b0:	887b      	ldrh	r3, [r7, #2]
  4058b2:	3301      	adds	r3, #1
  4058b4:	807b      	strh	r3, [r7, #2]
  4058b6:	887b      	ldrh	r3, [r7, #2]
  4058b8:	2b07      	cmp	r3, #7
  4058ba:	d9f9      	bls.n	4058b0 <memp_init+0xc>
    MEMP_STATS_AVAIL(err, i, 0);
    MEMP_STATS_AVAIL(avail, i, memp_num[i]);
  }

#if !MEMP_SEPARATE_POOLS
  memp = (struct memp *)LWIP_MEM_ALIGN(memp_memory);
  4058bc:	4b1c      	ldr	r3, [pc, #112]	; (405930 <memp_init+0x8c>)
  4058be:	3303      	adds	r3, #3
  4058c0:	f023 0303 	bic.w	r3, r3, #3
  4058c4:	607b      	str	r3, [r7, #4]
#endif /* !MEMP_SEPARATE_POOLS */
  /* for every pool: */
  for (i = 0; i < MEMP_MAX; ++i) {
  4058c6:	2300      	movs	r3, #0
  4058c8:	807b      	strh	r3, [r7, #2]
  4058ca:	e027      	b.n	40591c <memp_init+0x78>
    memp_tab[i] = NULL;
  4058cc:	887b      	ldrh	r3, [r7, #2]
  4058ce:	4a19      	ldr	r2, [pc, #100]	; (405934 <memp_init+0x90>)
  4058d0:	2100      	movs	r1, #0
  4058d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
#if MEMP_SEPARATE_POOLS
    memp = (struct memp*)memp_bases[i];
#endif /* MEMP_SEPARATE_POOLS */
    /* create a linked list of memp elements */
    for (j = 0; j < memp_num[i]; ++j) {
  4058d6:	2300      	movs	r3, #0
  4058d8:	803b      	strh	r3, [r7, #0]
  4058da:	e015      	b.n	405908 <memp_init+0x64>
      memp->next = memp_tab[i];
  4058dc:	887b      	ldrh	r3, [r7, #2]
  4058de:	4a15      	ldr	r2, [pc, #84]	; (405934 <memp_init+0x90>)
  4058e0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  4058e4:	687b      	ldr	r3, [r7, #4]
  4058e6:	601a      	str	r2, [r3, #0]
      memp_tab[i] = memp;
  4058e8:	887b      	ldrh	r3, [r7, #2]
  4058ea:	4912      	ldr	r1, [pc, #72]	; (405934 <memp_init+0x90>)
  4058ec:	687a      	ldr	r2, [r7, #4]
  4058ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + memp_sizes[i]
  4058f2:	887b      	ldrh	r3, [r7, #2]
  4058f4:	4a10      	ldr	r2, [pc, #64]	; (405938 <memp_init+0x94>)
  4058f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  4058fa:	461a      	mov	r2, r3
  4058fc:	687b      	ldr	r3, [r7, #4]
  4058fe:	4413      	add	r3, r2
  405900:	607b      	str	r3, [r7, #4]
    memp_tab[i] = NULL;
#if MEMP_SEPARATE_POOLS
    memp = (struct memp*)memp_bases[i];
#endif /* MEMP_SEPARATE_POOLS */
    /* create a linked list of memp elements */
    for (j = 0; j < memp_num[i]; ++j) {
  405902:	883b      	ldrh	r3, [r7, #0]
  405904:	3301      	adds	r3, #1
  405906:	803b      	strh	r3, [r7, #0]
  405908:	887b      	ldrh	r3, [r7, #2]
  40590a:	4a0c      	ldr	r2, [pc, #48]	; (40593c <memp_init+0x98>)
  40590c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  405910:	883a      	ldrh	r2, [r7, #0]
  405912:	429a      	cmp	r2, r3
  405914:	d3e2      	bcc.n	4058dc <memp_init+0x38>

#if !MEMP_SEPARATE_POOLS
  memp = (struct memp *)LWIP_MEM_ALIGN(memp_memory);
#endif /* !MEMP_SEPARATE_POOLS */
  /* for every pool: */
  for (i = 0; i < MEMP_MAX; ++i) {
  405916:	887b      	ldrh	r3, [r7, #2]
  405918:	3301      	adds	r3, #1
  40591a:	807b      	strh	r3, [r7, #2]
  40591c:	887b      	ldrh	r3, [r7, #2]
  40591e:	2b07      	cmp	r3, #7
  405920:	d9d4      	bls.n	4058cc <memp_init+0x28>
#if MEMP_OVERFLOW_CHECK
  memp_overflow_init();
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK */
}
  405922:	bf00      	nop
  405924:	370c      	adds	r7, #12
  405926:	46bd      	mov	sp, r7
  405928:	f85d 7b04 	ldr.w	r7, [sp], #4
  40592c:	4770      	bx	lr
  40592e:	bf00      	nop
  405930:	20400ac8 	.word	0x20400ac8
  405934:	20400aa8 	.word	0x20400aa8
  405938:	00414a30 	.word	0x00414a30
  40593c:	00414a40 	.word	0x00414a40

00405940 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
  405940:	b480      	push	{r7}
  405942:	b085      	sub	sp, #20
  405944:	af00      	add	r7, sp, #0
  405946:	4603      	mov	r3, r0
  405948:	71fb      	strb	r3, [r7, #7]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);
 
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
  40594a:	79fb      	ldrb	r3, [r7, #7]
  40594c:	2b07      	cmp	r3, #7
  40594e:	d900      	bls.n	405952 <memp_malloc+0x12>
  405950:	e7fe      	b.n	405950 <memp_malloc+0x10>
  SYS_ARCH_PROTECT(old_level);
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

  memp = memp_tab[type];
  405952:	79fb      	ldrb	r3, [r7, #7]
  405954:	4a09      	ldr	r2, [pc, #36]	; (40597c <memp_malloc+0x3c>)
  405956:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  40595a:	60fb      	str	r3, [r7, #12]
  
  if (memp != NULL) {
  40595c:	68fb      	ldr	r3, [r7, #12]
  40595e:	2b00      	cmp	r3, #0
  405960:	d005      	beq.n	40596e <memp_malloc+0x2e>
    memp_tab[type] = memp->next;
  405962:	79fb      	ldrb	r3, [r7, #7]
  405964:	68fa      	ldr	r2, [r7, #12]
  405966:	6812      	ldr	r2, [r2, #0]
  405968:	4904      	ldr	r1, [pc, #16]	; (40597c <memp_malloc+0x3c>)
  40596a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    MEMP_STATS_INC(err, type);
  }

  SYS_ARCH_UNPROTECT(old_level);

  return memp;
  40596e:	68fb      	ldr	r3, [r7, #12]
}
  405970:	4618      	mov	r0, r3
  405972:	3714      	adds	r7, #20
  405974:	46bd      	mov	sp, r7
  405976:	f85d 7b04 	ldr.w	r7, [sp], #4
  40597a:	4770      	bx	lr
  40597c:	20400aa8 	.word	0x20400aa8

00405980 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
  405980:	b480      	push	{r7}
  405982:	b085      	sub	sp, #20
  405984:	af00      	add	r7, sp, #0
  405986:	4603      	mov	r3, r0
  405988:	6039      	str	r1, [r7, #0]
  40598a:	71fb      	strb	r3, [r7, #7]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  if (mem == NULL) {
  40598c:	683b      	ldr	r3, [r7, #0]
  40598e:	2b00      	cmp	r3, #0
  405990:	d00d      	beq.n	4059ae <memp_free+0x2e>
    return;
  }
  LWIP_ASSERT("memp_free: mem properly aligned",
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
  405992:	683b      	ldr	r3, [r7, #0]
  405994:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
#endif /* MEMP_OVERFLOW_CHECK */

  MEMP_STATS_DEC(used, type); 
  
  memp->next = memp_tab[type]; 
  405996:	79fb      	ldrb	r3, [r7, #7]
  405998:	4a08      	ldr	r2, [pc, #32]	; (4059bc <memp_free+0x3c>)
  40599a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  40599e:	68fb      	ldr	r3, [r7, #12]
  4059a0:	601a      	str	r2, [r3, #0]
  memp_tab[type] = memp;
  4059a2:	79fb      	ldrb	r3, [r7, #7]
  4059a4:	4905      	ldr	r1, [pc, #20]	; (4059bc <memp_free+0x3c>)
  4059a6:	68fa      	ldr	r2, [r7, #12]
  4059a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  4059ac:	e000      	b.n	4059b0 <memp_free+0x30>
{
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  if (mem == NULL) {
    return;
  4059ae:	bf00      	nop
#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity());
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
}
  4059b0:	3714      	adds	r7, #20
  4059b2:	46bd      	mov	sp, r7
  4059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4059b8:	4770      	bx	lr
  4059ba:	bf00      	nop
  4059bc:	20400aa8 	.word	0x20400aa8

004059c0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
  4059c0:	b480      	push	{r7}
  4059c2:	af00      	add	r7, sp, #0
  netif_add(&loop_netif, &loop_ipaddr, &loop_netmask, &loop_gw, NULL, netif_loopif_init, tcpip_input);
#endif /* NO_SYS */
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
  4059c4:	bf00      	nop
  4059c6:	46bd      	mov	sp, r7
  4059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4059cc:	4770      	bx	lr
  4059ce:	bf00      	nop

004059d0 <netif_add>:
 * @return netif, or NULL if failed.
 */
struct netif *
netif_add(struct netif *netif, ip_addr_t *ipaddr, ip_addr_t *netmask,
  ip_addr_t *gw, void *state, netif_init_fn init, netif_input_fn input)
{
  4059d0:	b590      	push	{r4, r7, lr}
  4059d2:	b085      	sub	sp, #20
  4059d4:	af00      	add	r7, sp, #0
  4059d6:	60f8      	str	r0, [r7, #12]
  4059d8:	60b9      	str	r1, [r7, #8]
  4059da:	607a      	str	r2, [r7, #4]
  4059dc:	603b      	str	r3, [r7, #0]

  LWIP_ASSERT("No init function given", init != NULL);

  /* reset new interface configuration state */
  ip_addr_set_zero(&netif->ip_addr);
  4059de:	68fb      	ldr	r3, [r7, #12]
  4059e0:	2200      	movs	r2, #0
  4059e2:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero(&netif->netmask);
  4059e4:	68fb      	ldr	r3, [r7, #12]
  4059e6:	2200      	movs	r2, #0
  4059e8:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero(&netif->gw);
  4059ea:	68fb      	ldr	r3, [r7, #12]
  4059ec:	2200      	movs	r2, #0
  4059ee:	60da      	str	r2, [r3, #12]
  netif->flags = 0;
  4059f0:	68fb      	ldr	r3, [r7, #12]
  4059f2:	2200      	movs	r2, #0
  4059f4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#if LWIP_DHCP
  /* netif not under DHCP control by default */
  netif->dhcp = NULL;
  4059f8:	68fb      	ldr	r3, [r7, #12]
  4059fa:	2200      	movs	r2, #0
  4059fc:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_AUTOIP
  /* netif not under AutoIP control by default */
  netif->autoip = NULL;
#endif /* LWIP_AUTOIP */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
  4059fe:	68fb      	ldr	r3, [r7, #12]
  405a00:	2200      	movs	r2, #0
  405a02:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
  405a04:	68fb      	ldr	r3, [r7, #12]
  405a06:	6a3a      	ldr	r2, [r7, #32]
  405a08:	621a      	str	r2, [r3, #32]
  netif->num = netif_num++;
  405a0a:	4b13      	ldr	r3, [pc, #76]	; (405a58 <netif_add+0x88>)
  405a0c:	781b      	ldrb	r3, [r3, #0]
  405a0e:	1c5a      	adds	r2, r3, #1
  405a10:	b2d1      	uxtb	r1, r2
  405a12:	4a11      	ldr	r2, [pc, #68]	; (405a58 <netif_add+0x88>)
  405a14:	7011      	strb	r1, [r2, #0]
  405a16:	68fa      	ldr	r2, [r7, #12]
  405a18:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
  netif->input = input;
  405a1c:	68fb      	ldr	r3, [r7, #12]
  405a1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
  405a20:	611a      	str	r2, [r3, #16]
  NETIF_SET_HWADDRHINT(netif, NULL);
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

  netif_set_addr(netif, ipaddr, netmask, gw);
  405a22:	683b      	ldr	r3, [r7, #0]
  405a24:	687a      	ldr	r2, [r7, #4]
  405a26:	68b9      	ldr	r1, [r7, #8]
  405a28:	68f8      	ldr	r0, [r7, #12]
  405a2a:	4c0c      	ldr	r4, [pc, #48]	; (405a5c <netif_add+0x8c>)
  405a2c:	47a0      	blx	r4

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
  405a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  405a30:	68f8      	ldr	r0, [r7, #12]
  405a32:	4798      	blx	r3
  405a34:	4603      	mov	r3, r0
  405a36:	2b00      	cmp	r3, #0
  405a38:	d001      	beq.n	405a3e <netif_add+0x6e>
    return NULL;
  405a3a:	2300      	movs	r3, #0
  405a3c:	e007      	b.n	405a4e <netif_add+0x7e>
  }

  /* add this netif to the list */
  netif->next = netif_list;
  405a3e:	4b08      	ldr	r3, [pc, #32]	; (405a60 <netif_add+0x90>)
  405a40:	681a      	ldr	r2, [r3, #0]
  405a42:	68fb      	ldr	r3, [r7, #12]
  405a44:	601a      	str	r2, [r3, #0]
  netif_list = netif;
  405a46:	4a06      	ldr	r2, [pc, #24]	; (405a60 <netif_add+0x90>)
  405a48:	68fb      	ldr	r3, [r7, #12]
  405a4a:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, (" netmask "));
  ip_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip_addr_debug_print(NETIF_DEBUG, gw);
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
  405a4c:	68fb      	ldr	r3, [r7, #12]
}
  405a4e:	4618      	mov	r0, r3
  405a50:	3714      	adds	r7, #20
  405a52:	46bd      	mov	sp, r7
  405a54:	bd90      	pop	{r4, r7, pc}
  405a56:	bf00      	nop
  405a58:	204025a7 	.word	0x204025a7
  405a5c:	00405a65 	.word	0x00405a65
  405a60:	20404970 	.word	0x20404970

00405a64 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, ip_addr_t *ipaddr, ip_addr_t *netmask,
    ip_addr_t *gw)
{
  405a64:	b580      	push	{r7, lr}
  405a66:	b084      	sub	sp, #16
  405a68:	af00      	add	r7, sp, #0
  405a6a:	60f8      	str	r0, [r7, #12]
  405a6c:	60b9      	str	r1, [r7, #8]
  405a6e:	607a      	str	r2, [r7, #4]
  405a70:	603b      	str	r3, [r7, #0]
  netif_set_ipaddr(netif, ipaddr);
  405a72:	68b9      	ldr	r1, [r7, #8]
  405a74:	68f8      	ldr	r0, [r7, #12]
  405a76:	4b07      	ldr	r3, [pc, #28]	; (405a94 <netif_set_addr+0x30>)
  405a78:	4798      	blx	r3
  netif_set_netmask(netif, netmask);
  405a7a:	6879      	ldr	r1, [r7, #4]
  405a7c:	68f8      	ldr	r0, [r7, #12]
  405a7e:	4b06      	ldr	r3, [pc, #24]	; (405a98 <netif_set_addr+0x34>)
  405a80:	4798      	blx	r3
  netif_set_gw(netif, gw);
  405a82:	6839      	ldr	r1, [r7, #0]
  405a84:	68f8      	ldr	r0, [r7, #12]
  405a86:	4b05      	ldr	r3, [pc, #20]	; (405a9c <netif_set_addr+0x38>)
  405a88:	4798      	blx	r3
}
  405a8a:	bf00      	nop
  405a8c:	3710      	adds	r7, #16
  405a8e:	46bd      	mov	sp, r7
  405a90:	bd80      	pop	{r7, pc}
  405a92:	bf00      	nop
  405a94:	00405aa1 	.word	0x00405aa1
  405a98:	00405b7d 	.word	0x00405b7d
  405a9c:	00405b55 	.word	0x00405b55

00405aa0 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, ip_addr_t *ipaddr)
{
  405aa0:	b580      	push	{r7, lr}
  405aa2:	b086      	sub	sp, #24
  405aa4:	af00      	add	r7, sp, #0
  405aa6:	6078      	str	r0, [r7, #4]
  405aa8:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct tcp_pcb *pcb;
  struct tcp_pcb_listen *lpcb;

  /* address is actually being changed? */
  if (ipaddr && (ip_addr_cmp(ipaddr, &(netif->ip_addr))) == 0) {
  405aaa:	683b      	ldr	r3, [r7, #0]
  405aac:	2b00      	cmp	r3, #0
  405aae:	d03e      	beq.n	405b2e <netif_set_ipaddr+0x8e>
  405ab0:	683b      	ldr	r3, [r7, #0]
  405ab2:	681a      	ldr	r2, [r3, #0]
  405ab4:	687b      	ldr	r3, [r7, #4]
  405ab6:	685b      	ldr	r3, [r3, #4]
  405ab8:	429a      	cmp	r2, r3
  405aba:	d038      	beq.n	405b2e <netif_set_ipaddr+0x8e>
    /* extern struct tcp_pcb *tcp_active_pcbs; defined by tcp.h */
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    pcb = tcp_active_pcbs;
  405abc:	4b22      	ldr	r3, [pc, #136]	; (405b48 <netif_set_ipaddr+0xa8>)
  405abe:	681b      	ldr	r3, [r3, #0]
  405ac0:	617b      	str	r3, [r7, #20]
    while (pcb != NULL) {
  405ac2:	e011      	b.n	405ae8 <netif_set_ipaddr+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&(pcb->local_ip), &(netif->ip_addr))
  405ac4:	697b      	ldr	r3, [r7, #20]
  405ac6:	681a      	ldr	r2, [r3, #0]
  405ac8:	687b      	ldr	r3, [r7, #4]
  405aca:	685b      	ldr	r3, [r3, #4]
  405acc:	429a      	cmp	r2, r3
  405ace:	d108      	bne.n	405ae2 <netif_set_ipaddr+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && !ip_addr_islinklocal(&(pcb->local_ip))
#endif /* LWIP_AUTOIP */
        ) {
        /* this connection must be aborted */
        struct tcp_pcb *next = pcb->next;
  405ad0:	697b      	ldr	r3, [r7, #20]
  405ad2:	68db      	ldr	r3, [r3, #12]
  405ad4:	60fb      	str	r3, [r7, #12]
        LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
        tcp_abort(pcb);
  405ad6:	6978      	ldr	r0, [r7, #20]
  405ad8:	4b1c      	ldr	r3, [pc, #112]	; (405b4c <netif_set_ipaddr+0xac>)
  405ada:	4798      	blx	r3
        pcb = next;
  405adc:	68fb      	ldr	r3, [r7, #12]
  405ade:	617b      	str	r3, [r7, #20]
  405ae0:	e002      	b.n	405ae8 <netif_set_ipaddr+0x48>
      } else {
        pcb = pcb->next;
  405ae2:	697b      	ldr	r3, [r7, #20]
  405ae4:	68db      	ldr	r3, [r3, #12]
  405ae6:	617b      	str	r3, [r7, #20]
  /* address is actually being changed? */
  if (ipaddr && (ip_addr_cmp(ipaddr, &(netif->ip_addr))) == 0) {
    /* extern struct tcp_pcb *tcp_active_pcbs; defined by tcp.h */
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    pcb = tcp_active_pcbs;
    while (pcb != NULL) {
  405ae8:	697b      	ldr	r3, [r7, #20]
  405aea:	2b00      	cmp	r3, #0
  405aec:	d1ea      	bne.n	405ac4 <netif_set_ipaddr+0x24>
        pcb = next;
      } else {
        pcb = pcb->next;
      }
    }
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
  405aee:	4b18      	ldr	r3, [pc, #96]	; (405b50 <netif_set_ipaddr+0xb0>)
  405af0:	681b      	ldr	r3, [r3, #0]
  405af2:	613b      	str	r3, [r7, #16]
  405af4:	e018      	b.n	405b28 <netif_set_ipaddr+0x88>
      /* PCB bound to current local interface address? */
      if ((!(ip_addr_isany(&(lpcb->local_ip)))) &&
  405af6:	693b      	ldr	r3, [r7, #16]
  405af8:	2b00      	cmp	r3, #0
  405afa:	d012      	beq.n	405b22 <netif_set_ipaddr+0x82>
  405afc:	693b      	ldr	r3, [r7, #16]
  405afe:	681b      	ldr	r3, [r3, #0]
  405b00:	2b00      	cmp	r3, #0
  405b02:	d00e      	beq.n	405b22 <netif_set_ipaddr+0x82>
          (ip_addr_cmp(&(lpcb->local_ip), &(netif->ip_addr)))) {
  405b04:	693b      	ldr	r3, [r7, #16]
  405b06:	681a      	ldr	r2, [r3, #0]
  405b08:	687b      	ldr	r3, [r7, #4]
  405b0a:	685b      	ldr	r3, [r3, #4]
        pcb = pcb->next;
      }
    }
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
      /* PCB bound to current local interface address? */
      if ((!(ip_addr_isany(&(lpcb->local_ip)))) &&
  405b0c:	429a      	cmp	r2, r3
  405b0e:	d108      	bne.n	405b22 <netif_set_ipaddr+0x82>
          (ip_addr_cmp(&(lpcb->local_ip), &(netif->ip_addr)))) {
        /* The PCB is listening to the old ipaddr and
         * is set to listen to the new one instead */
        ip_addr_set(&(lpcb->local_ip), ipaddr);
  405b10:	683b      	ldr	r3, [r7, #0]
  405b12:	2b00      	cmp	r3, #0
  405b14:	d002      	beq.n	405b1c <netif_set_ipaddr+0x7c>
  405b16:	683b      	ldr	r3, [r7, #0]
  405b18:	681b      	ldr	r3, [r3, #0]
  405b1a:	e000      	b.n	405b1e <netif_set_ipaddr+0x7e>
  405b1c:	2300      	movs	r3, #0
  405b1e:	693a      	ldr	r2, [r7, #16]
  405b20:	6013      	str	r3, [r2, #0]
        pcb = next;
      } else {
        pcb = pcb->next;
      }
    }
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
  405b22:	693b      	ldr	r3, [r7, #16]
  405b24:	68db      	ldr	r3, [r3, #12]
  405b26:	613b      	str	r3, [r7, #16]
  405b28:	693b      	ldr	r3, [r7, #16]
  405b2a:	2b00      	cmp	r3, #0
  405b2c:	d1e3      	bne.n	405af6 <netif_set_ipaddr+0x56>
  }
#endif
  snmp_delete_ipaddridx_tree(netif);
  snmp_delete_iprteidx_tree(0,netif);
  /* set new IP address to netif */
  ip_addr_set(&(netif->ip_addr), ipaddr);
  405b2e:	683b      	ldr	r3, [r7, #0]
  405b30:	2b00      	cmp	r3, #0
  405b32:	d002      	beq.n	405b3a <netif_set_ipaddr+0x9a>
  405b34:	683b      	ldr	r3, [r7, #0]
  405b36:	681b      	ldr	r3, [r3, #0]
  405b38:	e000      	b.n	405b3c <netif_set_ipaddr+0x9c>
  405b3a:	2300      	movs	r3, #0
  405b3c:	687a      	ldr	r2, [r7, #4]
  405b3e:	6053      	str	r3, [r2, #4]
    netif->name[0], netif->name[1],
    ip4_addr1_16(&netif->ip_addr),
    ip4_addr2_16(&netif->ip_addr),
    ip4_addr3_16(&netif->ip_addr),
    ip4_addr4_16(&netif->ip_addr)));
}
  405b40:	bf00      	nop
  405b42:	3718      	adds	r7, #24
  405b44:	46bd      	mov	sp, r7
  405b46:	bd80      	pop	{r7, pc}
  405b48:	20404980 	.word	0x20404980
  405b4c:	00406771 	.word	0x00406771
  405b50:	20404988 	.word	0x20404988

00405b54 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, ip_addr_t *gw)
{
  405b54:	b480      	push	{r7}
  405b56:	b083      	sub	sp, #12
  405b58:	af00      	add	r7, sp, #0
  405b5a:	6078      	str	r0, [r7, #4]
  405b5c:	6039      	str	r1, [r7, #0]
  ip_addr_set(&(netif->gw), gw);
  405b5e:	683b      	ldr	r3, [r7, #0]
  405b60:	2b00      	cmp	r3, #0
  405b62:	d002      	beq.n	405b6a <netif_set_gw+0x16>
  405b64:	683b      	ldr	r3, [r7, #0]
  405b66:	681b      	ldr	r3, [r3, #0]
  405b68:	e000      	b.n	405b6c <netif_set_gw+0x18>
  405b6a:	2300      	movs	r3, #0
  405b6c:	687a      	ldr	r2, [r7, #4]
  405b6e:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(&netif->gw),
    ip4_addr2_16(&netif->gw),
    ip4_addr3_16(&netif->gw),
    ip4_addr4_16(&netif->gw)));
}
  405b70:	bf00      	nop
  405b72:	370c      	adds	r7, #12
  405b74:	46bd      	mov	sp, r7
  405b76:	f85d 7b04 	ldr.w	r7, [sp], #4
  405b7a:	4770      	bx	lr

00405b7c <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, ip_addr_t *netmask)
{
  405b7c:	b480      	push	{r7}
  405b7e:	b083      	sub	sp, #12
  405b80:	af00      	add	r7, sp, #0
  405b82:	6078      	str	r0, [r7, #4]
  405b84:	6039      	str	r1, [r7, #0]
  snmp_delete_iprteidx_tree(0, netif);
  /* set new netmask to netif */
  ip_addr_set(&(netif->netmask), netmask);
  405b86:	683b      	ldr	r3, [r7, #0]
  405b88:	2b00      	cmp	r3, #0
  405b8a:	d002      	beq.n	405b92 <netif_set_netmask+0x16>
  405b8c:	683b      	ldr	r3, [r7, #0]
  405b8e:	681b      	ldr	r3, [r3, #0]
  405b90:	e000      	b.n	405b94 <netif_set_netmask+0x18>
  405b92:	2300      	movs	r3, #0
  405b94:	687a      	ldr	r2, [r7, #4]
  405b96:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(&netif->netmask),
    ip4_addr2_16(&netif->netmask),
    ip4_addr3_16(&netif->netmask),
    ip4_addr4_16(&netif->netmask)));
}
  405b98:	bf00      	nop
  405b9a:	370c      	adds	r7, #12
  405b9c:	46bd      	mov	sp, r7
  405b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
  405ba2:	4770      	bx	lr

00405ba4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
  405ba4:	b480      	push	{r7}
  405ba6:	b083      	sub	sp, #12
  405ba8:	af00      	add	r7, sp, #0
  405baa:	6078      	str	r0, [r7, #4]
    snmp_delete_iprteidx_tree(1, netif);
  } else {
    /* install default route */
    snmp_insert_iprteidx_tree(1, netif);
  }
  netif_default = netif;
  405bac:	4a04      	ldr	r2, [pc, #16]	; (405bc0 <netif_set_default+0x1c>)
  405bae:	687b      	ldr	r3, [r7, #4]
  405bb0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
  405bb2:	bf00      	nop
  405bb4:	370c      	adds	r7, #12
  405bb6:	46bd      	mov	sp, r7
  405bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
  405bbc:	4770      	bx	lr
  405bbe:	bf00      	nop
  405bc0:	20404974 	.word	0x20404974

00405bc4 <netif_set_up>:
 * up once configured.
 * 
 * @see dhcp_start()
 */ 
void netif_set_up(struct netif *netif)
{
  405bc4:	b580      	push	{r7, lr}
  405bc6:	b082      	sub	sp, #8
  405bc8:	af00      	add	r7, sp, #0
  405bca:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
  405bcc:	687b      	ldr	r3, [r7, #4]
  405bce:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
  405bd2:	f003 0301 	and.w	r3, r3, #1
  405bd6:	2b00      	cmp	r3, #0
  405bd8:	d124      	bne.n	405c24 <netif_set_up+0x60>
    netif->flags |= NETIF_FLAG_UP;
  405bda:	687b      	ldr	r3, [r7, #4]
  405bdc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
  405be0:	f043 0301 	orr.w	r3, r3, #1
  405be4:	b2da      	uxtb	r2, r3
  405be6:	687b      	ldr	r3, [r7, #4]
  405be8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    
#if LWIP_SNMP
    snmp_get_sysuptime(&netif->ts);
#endif /* LWIP_SNMP */

    NETIF_STATUS_CALLBACK(netif);
  405bec:	687b      	ldr	r3, [r7, #4]
  405bee:	69db      	ldr	r3, [r3, #28]
  405bf0:	2b00      	cmp	r3, #0
  405bf2:	d003      	beq.n	405bfc <netif_set_up+0x38>
  405bf4:	687b      	ldr	r3, [r7, #4]
  405bf6:	69db      	ldr	r3, [r3, #28]
  405bf8:	6878      	ldr	r0, [r7, #4]
  405bfa:	4798      	blx	r3

    if (netif->flags & NETIF_FLAG_LINK_UP) {
  405bfc:	687b      	ldr	r3, [r7, #4]
  405bfe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
  405c02:	f003 0310 	and.w	r3, r3, #16
  405c06:	2b00      	cmp	r3, #0
  405c08:	d00c      	beq.n	405c24 <netif_set_up+0x60>
#if LWIP_ARP
      /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */ 
      if (netif->flags & (NETIF_FLAG_ETHARP)) {
  405c0a:	687b      	ldr	r3, [r7, #4]
  405c0c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
  405c10:	f003 0320 	and.w	r3, r3, #32
  405c14:	2b00      	cmp	r3, #0
  405c16:	d005      	beq.n	405c24 <netif_set_up+0x60>
        etharp_gratuitous(netif);
  405c18:	687b      	ldr	r3, [r7, #4]
  405c1a:	3304      	adds	r3, #4
  405c1c:	4619      	mov	r1, r3
  405c1e:	6878      	ldr	r0, [r7, #4]
  405c20:	4b02      	ldr	r3, [pc, #8]	; (405c2c <netif_set_up+0x68>)
  405c22:	4798      	blx	r3
        igmp_report_groups( netif);
      }
#endif /* LWIP_IGMP */
    }
  }
}
  405c24:	bf00      	nop
  405c26:	3708      	adds	r7, #8
  405c28:	46bd      	mov	sp, r7
  405c2a:	bd80      	pop	{r7, pc}
  405c2c:	0040bd31 	.word	0x0040bd31

00405c30 <netif_set_down>:
 * up once configured.
 * 
 * @see dhcp_start()
 */ 
void netif_set_down(struct netif *netif)
{
  405c30:	b580      	push	{r7, lr}
  405c32:	b082      	sub	sp, #8
  405c34:	af00      	add	r7, sp, #0
  405c36:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
  405c38:	687b      	ldr	r3, [r7, #4]
  405c3a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
  405c3e:	f003 0301 	and.w	r3, r3, #1
  405c42:	2b00      	cmp	r3, #0
  405c44:	d01a      	beq.n	405c7c <netif_set_down+0x4c>
    netif->flags &= ~NETIF_FLAG_UP;
  405c46:	687b      	ldr	r3, [r7, #4]
  405c48:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
  405c4c:	f023 0301 	bic.w	r3, r3, #1
  405c50:	b2da      	uxtb	r2, r3
  405c52:	687b      	ldr	r3, [r7, #4]
  405c54:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#if LWIP_SNMP
    snmp_get_sysuptime(&netif->ts);
#endif

#if LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
  405c58:	687b      	ldr	r3, [r7, #4]
  405c5a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
  405c5e:	f003 0320 	and.w	r3, r3, #32
  405c62:	2b00      	cmp	r3, #0
  405c64:	d002      	beq.n	405c6c <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
  405c66:	6878      	ldr	r0, [r7, #4]
  405c68:	4b06      	ldr	r3, [pc, #24]	; (405c84 <netif_set_down+0x54>)
  405c6a:	4798      	blx	r3
    }
#endif /* LWIP_ARP */
    NETIF_STATUS_CALLBACK(netif);
  405c6c:	687b      	ldr	r3, [r7, #4]
  405c6e:	69db      	ldr	r3, [r3, #28]
  405c70:	2b00      	cmp	r3, #0
  405c72:	d003      	beq.n	405c7c <netif_set_down+0x4c>
  405c74:	687b      	ldr	r3, [r7, #4]
  405c76:	69db      	ldr	r3, [r3, #28]
  405c78:	6878      	ldr	r0, [r7, #4]
  405c7a:	4798      	blx	r3
  }
}
  405c7c:	bf00      	nop
  405c7e:	3708      	adds	r7, #8
  405c80:	46bd      	mov	sp, r7
  405c82:	bd80      	pop	{r7, pc}
  405c84:	0040b5c9 	.word	0x0040b5c9

00405c88 <netif_set_status_callback>:
#if LWIP_NETIF_STATUS_CALLBACK
/**
 * Set callback to be called when interface is brought up/down
 */
void netif_set_status_callback(struct netif *netif, netif_status_callback_fn status_callback)
{
  405c88:	b480      	push	{r7}
  405c8a:	b083      	sub	sp, #12
  405c8c:	af00      	add	r7, sp, #0
  405c8e:	6078      	str	r0, [r7, #4]
  405c90:	6039      	str	r1, [r7, #0]
  if (netif) {
  405c92:	687b      	ldr	r3, [r7, #4]
  405c94:	2b00      	cmp	r3, #0
  405c96:	d002      	beq.n	405c9e <netif_set_status_callback+0x16>
    netif->status_callback = status_callback;
  405c98:	687b      	ldr	r3, [r7, #4]
  405c9a:	683a      	ldr	r2, [r7, #0]
  405c9c:	61da      	str	r2, [r3, #28]
  }
}
  405c9e:	bf00      	nop
  405ca0:	370c      	adds	r7, #12
  405ca2:	46bd      	mov	sp, r7
  405ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
  405ca8:	4770      	bx	lr
  405caa:	bf00      	nop

00405cac <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
  405cac:	b480      	push	{r7}
  405cae:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
  pbuf_free_ooseq_pending = 1;
  405cb0:	4b03      	ldr	r3, [pc, #12]	; (405cc0 <pbuf_pool_is_empty+0x14>)
  405cb2:	2201      	movs	r2, #1
  405cb4:	701a      	strb	r2, [r3, #0]
  if(!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
  405cb6:	bf00      	nop
  405cb8:	46bd      	mov	sp, r7
  405cba:	f85d 7b04 	ldr.w	r7, [sp], #4
  405cbe:	4770      	bx	lr
  405cc0:	20404978 	.word	0x20404978

00405cc4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
  405cc4:	b580      	push	{r7, lr}
  405cc6:	b088      	sub	sp, #32
  405cc8:	af00      	add	r7, sp, #0
  405cca:	4603      	mov	r3, r0
  405ccc:	71fb      	strb	r3, [r7, #7]
  405cce:	460b      	mov	r3, r1
  405cd0:	80bb      	strh	r3, [r7, #4]
  405cd2:	4613      	mov	r3, r2
  405cd4:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
  405cd6:	79fb      	ldrb	r3, [r7, #7]
  405cd8:	2b03      	cmp	r3, #3
  405cda:	d817      	bhi.n	405d0c <pbuf_alloc+0x48>
  405cdc:	a201      	add	r2, pc, #4	; (adr r2, 405ce4 <pbuf_alloc+0x20>)
  405cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  405ce2:	bf00      	nop
  405ce4:	00405cf5 	.word	0x00405cf5
  405ce8:	00405cfb 	.word	0x00405cfb
  405cec:	00405d01 	.word	0x00405d01
  405cf0:	00405d07 	.word	0x00405d07
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
  405cf4:	2336      	movs	r3, #54	; 0x36
  405cf6:	82fb      	strh	r3, [r7, #22]
    break;
  405cf8:	e00a      	b.n	405d10 <pbuf_alloc+0x4c>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_HLEN + PBUF_IP_HLEN;
  405cfa:	2322      	movs	r3, #34	; 0x22
  405cfc:	82fb      	strh	r3, [r7, #22]
    break;
  405cfe:	e007      	b.n	405d10 <pbuf_alloc+0x4c>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_HLEN;
  405d00:	230e      	movs	r3, #14
  405d02:	82fb      	strh	r3, [r7, #22]
    break;
  405d04:	e004      	b.n	405d10 <pbuf_alloc+0x4c>
  case PBUF_RAW:
    offset = 0;
  405d06:	2300      	movs	r3, #0
  405d08:	82fb      	strh	r3, [r7, #22]
    break;
  405d0a:	e001      	b.n	405d10 <pbuf_alloc+0x4c>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
    return NULL;
  405d0c:	2300      	movs	r3, #0
  405d0e:	e0d3      	b.n	405eb8 <pbuf_alloc+0x1f4>
  }

  switch (type) {
  405d10:	79bb      	ldrb	r3, [r7, #6]
  405d12:	2b03      	cmp	r3, #3
  405d14:	f200 80c7 	bhi.w	405ea6 <pbuf_alloc+0x1e2>
  405d18:	a201      	add	r2, pc, #4	; (adr r2, 405d20 <pbuf_alloc+0x5c>)
  405d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  405d1e:	bf00      	nop
  405d20:	00405e15 	.word	0x00405e15
  405d24:	00405e73 	.word	0x00405e73
  405d28:	00405e73 	.word	0x00405e73
  405d2c:	00405d31 	.word	0x00405d31
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
  405d30:	2007      	movs	r0, #7
  405d32:	4b63      	ldr	r3, [pc, #396]	; (405ec0 <pbuf_alloc+0x1fc>)
  405d34:	4798      	blx	r3
  405d36:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
  405d38:	69fb      	ldr	r3, [r7, #28]
  405d3a:	2b00      	cmp	r3, #0
  405d3c:	d103      	bne.n	405d46 <pbuf_alloc+0x82>
      PBUF_POOL_IS_EMPTY();
  405d3e:	4b61      	ldr	r3, [pc, #388]	; (405ec4 <pbuf_alloc+0x200>)
  405d40:	4798      	blx	r3
      return NULL;
  405d42:	2300      	movs	r3, #0
  405d44:	e0b8      	b.n	405eb8 <pbuf_alloc+0x1f4>
    }
    p->type = type;
  405d46:	69fb      	ldr	r3, [r7, #28]
  405d48:	79ba      	ldrb	r2, [r7, #6]
  405d4a:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
  405d4c:	69fb      	ldr	r3, [r7, #28]
  405d4e:	2200      	movs	r2, #0
  405d50:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
  405d52:	8afb      	ldrh	r3, [r7, #22]
  405d54:	3310      	adds	r3, #16
  405d56:	69fa      	ldr	r2, [r7, #28]
  405d58:	4413      	add	r3, r2
  405d5a:	3303      	adds	r3, #3
  405d5c:	f023 0303 	bic.w	r3, r3, #3
  405d60:	461a      	mov	r2, r3
  405d62:	69fb      	ldr	r3, [r7, #28]
  405d64:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
  405d66:	69fb      	ldr	r3, [r7, #28]
  405d68:	88ba      	ldrh	r2, [r7, #4]
  405d6a:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
  405d6c:	8afb      	ldrh	r3, [r7, #22]
  405d6e:	3303      	adds	r3, #3
  405d70:	f023 0303 	bic.w	r3, r3, #3
  405d74:	f5c3 62c0 	rsb	r2, r3, #1536	; 0x600
  405d78:	88bb      	ldrh	r3, [r7, #4]
  405d7a:	4293      	cmp	r3, r2
  405d7c:	bfa8      	it	ge
  405d7e:	4613      	movge	r3, r2
  405d80:	b29a      	uxth	r2, r3
  405d82:	69fb      	ldr	r3, [r7, #28]
  405d84:	815a      	strh	r2, [r3, #10]
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
  405d86:	69fb      	ldr	r3, [r7, #28]
  405d88:	2201      	movs	r2, #1
  405d8a:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
  405d8c:	69fb      	ldr	r3, [r7, #28]
  405d8e:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
  405d90:	88bb      	ldrh	r3, [r7, #4]
  405d92:	69fa      	ldr	r2, [r7, #28]
  405d94:	8952      	ldrh	r2, [r2, #10]
  405d96:	1a9b      	subs	r3, r3, r2
  405d98:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
  405d9a:	e037      	b.n	405e0c <pbuf_alloc+0x148>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
  405d9c:	2007      	movs	r0, #7
  405d9e:	4b48      	ldr	r3, [pc, #288]	; (405ec0 <pbuf_alloc+0x1fc>)
  405da0:	4798      	blx	r3
  405da2:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
  405da4:	68fb      	ldr	r3, [r7, #12]
  405da6:	2b00      	cmp	r3, #0
  405da8:	d106      	bne.n	405db8 <pbuf_alloc+0xf4>
        PBUF_POOL_IS_EMPTY();
  405daa:	4b46      	ldr	r3, [pc, #280]	; (405ec4 <pbuf_alloc+0x200>)
  405dac:	4798      	blx	r3
        /* free chain so far allocated */
        pbuf_free(p);
  405dae:	69f8      	ldr	r0, [r7, #28]
  405db0:	4b45      	ldr	r3, [pc, #276]	; (405ec8 <pbuf_alloc+0x204>)
  405db2:	4798      	blx	r3
        /* bail out unsuccesfully */
        return NULL;
  405db4:	2300      	movs	r3, #0
  405db6:	e07f      	b.n	405eb8 <pbuf_alloc+0x1f4>
      }
      q->type = type;
  405db8:	68fb      	ldr	r3, [r7, #12]
  405dba:	79ba      	ldrb	r2, [r7, #6]
  405dbc:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
  405dbe:	68fb      	ldr	r3, [r7, #12]
  405dc0:	2200      	movs	r2, #0
  405dc2:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
  405dc4:	68fb      	ldr	r3, [r7, #12]
  405dc6:	2200      	movs	r2, #0
  405dc8:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
  405dca:	69bb      	ldr	r3, [r7, #24]
  405dcc:	68fa      	ldr	r2, [r7, #12]
  405dce:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
      q->tot_len = (u16_t)rem_len;
  405dd0:	693b      	ldr	r3, [r7, #16]
  405dd2:	b29a      	uxth	r2, r3
  405dd4:	68fb      	ldr	r3, [r7, #12]
  405dd6:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
  405dd8:	693b      	ldr	r3, [r7, #16]
  405dda:	b29b      	uxth	r3, r3
  405ddc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
  405de0:	bfa8      	it	ge
  405de2:	f44f 63c0 	movge.w	r3, #1536	; 0x600
  405de6:	b29a      	uxth	r2, r3
  405de8:	68fb      	ldr	r3, [r7, #12]
  405dea:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
  405dec:	68fb      	ldr	r3, [r7, #12]
  405dee:	f103 0210 	add.w	r2, r3, #16
  405df2:	68fb      	ldr	r3, [r7, #12]
  405df4:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
  405df6:	68fb      	ldr	r3, [r7, #12]
  405df8:	2201      	movs	r2, #1
  405dfa:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
  405dfc:	68fb      	ldr	r3, [r7, #12]
  405dfe:	895b      	ldrh	r3, [r3, #10]
  405e00:	461a      	mov	r2, r3
  405e02:	693b      	ldr	r3, [r7, #16]
  405e04:	1a9b      	subs	r3, r3, r2
  405e06:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
  405e08:	68fb      	ldr	r3, [r7, #12]
  405e0a:	61bb      	str	r3, [r7, #24]
    /* remember first pbuf for linkage in next iteration */
    r = p;
    /* remaining length to be allocated */
    rem_len = length - p->len;
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
  405e0c:	693b      	ldr	r3, [r7, #16]
  405e0e:	2b00      	cmp	r3, #0
  405e10:	dcc4      	bgt.n	405d9c <pbuf_alloc+0xd8>
      r = q;
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
  405e12:	e04a      	b.n	405eaa <pbuf_alloc+0x1e6>
  case PBUF_RAM:
    /* If pbuf is to be allocated in RAM, allocate memory for it. */
    p = (struct pbuf*)mem_malloc(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length));
  405e14:	8afb      	ldrh	r3, [r7, #22]
  405e16:	3313      	adds	r3, #19
  405e18:	b29b      	uxth	r3, r3
  405e1a:	f023 0303 	bic.w	r3, r3, #3
  405e1e:	b29a      	uxth	r2, r3
  405e20:	88bb      	ldrh	r3, [r7, #4]
  405e22:	3303      	adds	r3, #3
  405e24:	b29b      	uxth	r3, r3
  405e26:	f023 0303 	bic.w	r3, r3, #3
  405e2a:	b29b      	uxth	r3, r3
  405e2c:	4413      	add	r3, r2
  405e2e:	b29b      	uxth	r3, r3
  405e30:	4618      	mov	r0, r3
  405e32:	4b26      	ldr	r3, [pc, #152]	; (405ecc <pbuf_alloc+0x208>)
  405e34:	4798      	blx	r3
  405e36:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
  405e38:	69fb      	ldr	r3, [r7, #28]
  405e3a:	2b00      	cmp	r3, #0
  405e3c:	d101      	bne.n	405e42 <pbuf_alloc+0x17e>
      return NULL;
  405e3e:	2300      	movs	r3, #0
  405e40:	e03a      	b.n	405eb8 <pbuf_alloc+0x1f4>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
  405e42:	8afb      	ldrh	r3, [r7, #22]
  405e44:	3310      	adds	r3, #16
  405e46:	69fa      	ldr	r2, [r7, #28]
  405e48:	4413      	add	r3, r2
  405e4a:	3303      	adds	r3, #3
  405e4c:	f023 0303 	bic.w	r3, r3, #3
  405e50:	461a      	mov	r2, r3
  405e52:	69fb      	ldr	r3, [r7, #28]
  405e54:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
  405e56:	69fb      	ldr	r3, [r7, #28]
  405e58:	88ba      	ldrh	r2, [r7, #4]
  405e5a:	811a      	strh	r2, [r3, #8]
  405e5c:	69fb      	ldr	r3, [r7, #28]
  405e5e:	891a      	ldrh	r2, [r3, #8]
  405e60:	69fb      	ldr	r3, [r7, #28]
  405e62:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
  405e64:	69fb      	ldr	r3, [r7, #28]
  405e66:	2200      	movs	r2, #0
  405e68:	601a      	str	r2, [r3, #0]
    p->type = type;
  405e6a:	69fb      	ldr	r3, [r7, #28]
  405e6c:	79ba      	ldrb	r2, [r7, #6]
  405e6e:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
  405e70:	e01b      	b.n	405eaa <pbuf_alloc+0x1e6>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
  405e72:	2006      	movs	r0, #6
  405e74:	4b12      	ldr	r3, [pc, #72]	; (405ec0 <pbuf_alloc+0x1fc>)
  405e76:	4798      	blx	r3
  405e78:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
  405e7a:	69fb      	ldr	r3, [r7, #28]
  405e7c:	2b00      	cmp	r3, #0
  405e7e:	d101      	bne.n	405e84 <pbuf_alloc+0x1c0>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
  405e80:	2300      	movs	r3, #0
  405e82:	e019      	b.n	405eb8 <pbuf_alloc+0x1f4>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
  405e84:	69fb      	ldr	r3, [r7, #28]
  405e86:	2200      	movs	r2, #0
  405e88:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
  405e8a:	69fb      	ldr	r3, [r7, #28]
  405e8c:	88ba      	ldrh	r2, [r7, #4]
  405e8e:	811a      	strh	r2, [r3, #8]
  405e90:	69fb      	ldr	r3, [r7, #28]
  405e92:	891a      	ldrh	r2, [r3, #8]
  405e94:	69fb      	ldr	r3, [r7, #28]
  405e96:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
  405e98:	69fb      	ldr	r3, [r7, #28]
  405e9a:	2200      	movs	r2, #0
  405e9c:	601a      	str	r2, [r3, #0]
    p->type = type;
  405e9e:	69fb      	ldr	r3, [r7, #28]
  405ea0:	79ba      	ldrb	r2, [r7, #6]
  405ea2:	731a      	strb	r2, [r3, #12]
    break;
  405ea4:	e001      	b.n	405eaa <pbuf_alloc+0x1e6>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
    return NULL;
  405ea6:	2300      	movs	r3, #0
  405ea8:	e006      	b.n	405eb8 <pbuf_alloc+0x1f4>
  }
  /* set reference count */
  p->ref = 1;
  405eaa:	69fb      	ldr	r3, [r7, #28]
  405eac:	2201      	movs	r2, #1
  405eae:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
  405eb0:	69fb      	ldr	r3, [r7, #28]
  405eb2:	2200      	movs	r2, #0
  405eb4:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
  405eb6:	69fb      	ldr	r3, [r7, #28]
}
  405eb8:	4618      	mov	r0, r3
  405eba:	3720      	adds	r7, #32
  405ebc:	46bd      	mov	sp, r7
  405ebe:	bd80      	pop	{r7, pc}
  405ec0:	00405941 	.word	0x00405941
  405ec4:	00405cad 	.word	0x00405cad
  405ec8:	00406069 	.word	0x00406069
  405ecc:	0040575d 	.word	0x0040575d

00405ed0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
  405ed0:	b580      	push	{r7, lr}
  405ed2:	b086      	sub	sp, #24
  405ed4:	af00      	add	r7, sp, #0
  405ed6:	6078      	str	r0, [r7, #4]
  405ed8:	460b      	mov	r3, r1
  405eda:	807b      	strh	r3, [r7, #2]
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
  405edc:	687b      	ldr	r3, [r7, #4]
  405ede:	891b      	ldrh	r3, [r3, #8]
  405ee0:	887a      	ldrh	r2, [r7, #2]
  405ee2:	429a      	cmp	r2, r3
  405ee4:	d249      	bcs.n	405f7a <pbuf_realloc+0xaa>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
  405ee6:	887b      	ldrh	r3, [r7, #2]
  405ee8:	687a      	ldr	r2, [r7, #4]
  405eea:	8912      	ldrh	r2, [r2, #8]
  405eec:	1a9b      	subs	r3, r3, r2
  405eee:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
  405ef0:	887b      	ldrh	r3, [r7, #2]
  405ef2:	827b      	strh	r3, [r7, #18]
  q = p;
  405ef4:	687b      	ldr	r3, [r7, #4]
  405ef6:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
  405ef8:	e00f      	b.n	405f1a <pbuf_realloc+0x4a>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
  405efa:	697b      	ldr	r3, [r7, #20]
  405efc:	895b      	ldrh	r3, [r3, #10]
  405efe:	8a7a      	ldrh	r2, [r7, #18]
  405f00:	1ad3      	subs	r3, r2, r3
  405f02:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
    q->tot_len += (u16_t)grow;
  405f04:	697b      	ldr	r3, [r7, #20]
  405f06:	891a      	ldrh	r2, [r3, #8]
  405f08:	68fb      	ldr	r3, [r7, #12]
  405f0a:	b29b      	uxth	r3, r3
  405f0c:	4413      	add	r3, r2
  405f0e:	b29a      	uxth	r2, r3
  405f10:	697b      	ldr	r3, [r7, #20]
  405f12:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
  405f14:	697b      	ldr	r3, [r7, #20]
  405f16:	681b      	ldr	r3, [r3, #0]
  405f18:	617b      	str	r3, [r7, #20]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
  q = p;
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
  405f1a:	697b      	ldr	r3, [r7, #20]
  405f1c:	895b      	ldrh	r3, [r3, #10]
  405f1e:	8a7a      	ldrh	r2, [r7, #18]
  405f20:	429a      	cmp	r2, r3
  405f22:	d8ea      	bhi.n	405efa <pbuf_realloc+0x2a>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)) {
  405f24:	697b      	ldr	r3, [r7, #20]
  405f26:	7b1b      	ldrb	r3, [r3, #12]
  405f28:	2b00      	cmp	r3, #0
  405f2a:	d112      	bne.n	405f52 <pbuf_realloc+0x82>
  405f2c:	697b      	ldr	r3, [r7, #20]
  405f2e:	895b      	ldrh	r3, [r3, #10]
  405f30:	8a7a      	ldrh	r2, [r7, #18]
  405f32:	429a      	cmp	r2, r3
  405f34:	d00d      	beq.n	405f52 <pbuf_realloc+0x82>
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
  405f36:	697b      	ldr	r3, [r7, #20]
  405f38:	685b      	ldr	r3, [r3, #4]
  405f3a:	461a      	mov	r2, r3
  405f3c:	697b      	ldr	r3, [r7, #20]
  405f3e:	1ad3      	subs	r3, r2, r3
  405f40:	b29a      	uxth	r2, r3
  405f42:	8a7b      	ldrh	r3, [r7, #18]
  405f44:	4413      	add	r3, r2
  405f46:	b29b      	uxth	r3, r3
  405f48:	4619      	mov	r1, r3
  405f4a:	6978      	ldr	r0, [r7, #20]
  405f4c:	4b0d      	ldr	r3, [pc, #52]	; (405f84 <pbuf_realloc+0xb4>)
  405f4e:	4798      	blx	r3
  405f50:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
  405f52:	697b      	ldr	r3, [r7, #20]
  405f54:	8a7a      	ldrh	r2, [r7, #18]
  405f56:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
  405f58:	697b      	ldr	r3, [r7, #20]
  405f5a:	895a      	ldrh	r2, [r3, #10]
  405f5c:	697b      	ldr	r3, [r7, #20]
  405f5e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
  405f60:	697b      	ldr	r3, [r7, #20]
  405f62:	681b      	ldr	r3, [r3, #0]
  405f64:	2b00      	cmp	r3, #0
  405f66:	d004      	beq.n	405f72 <pbuf_realloc+0xa2>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
  405f68:	697b      	ldr	r3, [r7, #20]
  405f6a:	681b      	ldr	r3, [r3, #0]
  405f6c:	4618      	mov	r0, r3
  405f6e:	4b06      	ldr	r3, [pc, #24]	; (405f88 <pbuf_realloc+0xb8>)
  405f70:	4798      	blx	r3
  }
  /* q is last packet in chain */
  q->next = NULL;
  405f72:	697b      	ldr	r3, [r7, #20]
  405f74:	2200      	movs	r2, #0
  405f76:	601a      	str	r2, [r3, #0]
  405f78:	e000      	b.n	405f7c <pbuf_realloc+0xac>
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
    /* enlarging not yet supported */
    return;
  405f7a:	bf00      	nop
    pbuf_free(q->next);
  }
  /* q is last packet in chain */
  q->next = NULL;

}
  405f7c:	3718      	adds	r7, #24
  405f7e:	46bd      	mov	sp, r7
  405f80:	bd80      	pop	{r7, pc}
  405f82:	bf00      	nop
  405f84:	004055e9 	.word	0x004055e9
  405f88:	00406069 	.word	0x00406069

00405f8c <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
  405f8c:	b480      	push	{r7}
  405f8e:	b085      	sub	sp, #20
  405f90:	af00      	add	r7, sp, #0
  405f92:	6078      	str	r0, [r7, #4]
  405f94:	460b      	mov	r3, r1
  405f96:	807b      	strh	r3, [r7, #2]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
  if ((header_size_increment == 0) || (p == NULL)) {
  405f98:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
  405f9c:	2b00      	cmp	r3, #0
  405f9e:	d002      	beq.n	405fa6 <pbuf_header+0x1a>
  405fa0:	687b      	ldr	r3, [r7, #4]
  405fa2:	2b00      	cmp	r3, #0
  405fa4:	d101      	bne.n	405faa <pbuf_header+0x1e>
    return 0;
  405fa6:	2300      	movs	r3, #0
  405fa8:	e058      	b.n	40605c <pbuf_header+0xd0>
  }
 
  if (header_size_increment < 0){
  405faa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
  405fae:	2b00      	cmp	r3, #0
  405fb0:	da08      	bge.n	405fc4 <pbuf_header+0x38>
    increment_magnitude = -header_size_increment;
  405fb2:	887b      	ldrh	r3, [r7, #2]
  405fb4:	425b      	negs	r3, r3
  405fb6:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
  405fb8:	687b      	ldr	r3, [r7, #4]
  405fba:	895b      	ldrh	r3, [r3, #10]
  405fbc:	89fa      	ldrh	r2, [r7, #14]
  405fbe:	429a      	cmp	r2, r3
  405fc0:	d902      	bls.n	405fc8 <pbuf_header+0x3c>
  405fc2:	e7fe      	b.n	405fc2 <pbuf_header+0x36>
  } else {
    increment_magnitude = header_size_increment;
  405fc4:	887b      	ldrh	r3, [r7, #2]
  405fc6:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
  405fc8:	687b      	ldr	r3, [r7, #4]
  405fca:	7b1b      	ldrb	r3, [r3, #12]
  405fcc:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
  405fce:	687b      	ldr	r3, [r7, #4]
  405fd0:	685b      	ldr	r3, [r3, #4]
  405fd2:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
  405fd4:	89bb      	ldrh	r3, [r7, #12]
  405fd6:	2b00      	cmp	r3, #0
  405fd8:	d002      	beq.n	405fe0 <pbuf_header+0x54>
  405fda:	89bb      	ldrh	r3, [r7, #12]
  405fdc:	2b03      	cmp	r3, #3
  405fde:	d112      	bne.n	406006 <pbuf_header+0x7a>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
  405fe0:	687b      	ldr	r3, [r7, #4]
  405fe2:	685a      	ldr	r2, [r3, #4]
  405fe4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
  405fe8:	425b      	negs	r3, r3
  405fea:	441a      	add	r2, r3
  405fec:	687b      	ldr	r3, [r7, #4]
  405fee:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
  405ff0:	687b      	ldr	r3, [r7, #4]
  405ff2:	685a      	ldr	r2, [r3, #4]
  405ff4:	687b      	ldr	r3, [r7, #4]
  405ff6:	3310      	adds	r3, #16
  405ff8:	429a      	cmp	r2, r3
  405ffa:	d220      	bcs.n	40603e <pbuf_header+0xb2>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)(p + 1)));
      /* restore old payload pointer */
      p->payload = payload;
  405ffc:	687b      	ldr	r3, [r7, #4]
  405ffe:	68ba      	ldr	r2, [r7, #8]
  406000:	605a      	str	r2, [r3, #4]
      /* bail out unsuccesfully */
      return 1;
  406002:	2301      	movs	r3, #1
  406004:	e02a      	b.n	40605c <pbuf_header+0xd0>
    }
  /* pbuf types refering to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
  406006:	89bb      	ldrh	r3, [r7, #12]
  406008:	2b02      	cmp	r3, #2
  40600a:	d002      	beq.n	406012 <pbuf_header+0x86>
  40600c:	89bb      	ldrh	r3, [r7, #12]
  40600e:	2b01      	cmp	r3, #1
  406010:	d113      	bne.n	40603a <pbuf_header+0xae>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
  406012:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
  406016:	2b00      	cmp	r3, #0
  406018:	da0d      	bge.n	406036 <pbuf_header+0xaa>
  40601a:	687b      	ldr	r3, [r7, #4]
  40601c:	895b      	ldrh	r3, [r3, #10]
  40601e:	89fa      	ldrh	r2, [r7, #14]
  406020:	429a      	cmp	r2, r3
  406022:	d808      	bhi.n	406036 <pbuf_header+0xaa>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
  406024:	687b      	ldr	r3, [r7, #4]
  406026:	685a      	ldr	r2, [r3, #4]
  406028:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
  40602c:	425b      	negs	r3, r3
  40602e:	441a      	add	r2, r3
  406030:	687b      	ldr	r3, [r7, #4]
  406032:	605a      	str	r2, [r3, #4]
      return 1;
    }
  /* pbuf types refering to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
  406034:	e003      	b.n	40603e <pbuf_header+0xb2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccesfully */
      return 1;
  406036:	2301      	movs	r3, #1
  406038:	e010      	b.n	40605c <pbuf_header+0xd0>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
    return 1;
  40603a:	2301      	movs	r3, #1
  40603c:	e00e      	b.n	40605c <pbuf_header+0xd0>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
  40603e:	687b      	ldr	r3, [r7, #4]
  406040:	895a      	ldrh	r2, [r3, #10]
  406042:	887b      	ldrh	r3, [r7, #2]
  406044:	4413      	add	r3, r2
  406046:	b29a      	uxth	r2, r3
  406048:	687b      	ldr	r3, [r7, #4]
  40604a:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
  40604c:	687b      	ldr	r3, [r7, #4]
  40604e:	891a      	ldrh	r2, [r3, #8]
  406050:	887b      	ldrh	r3, [r7, #2]
  406052:	4413      	add	r3, r2
  406054:	b29a      	uxth	r2, r3
  406056:	687b      	ldr	r3, [r7, #4]
  406058:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
  40605a:	2300      	movs	r3, #0
}
  40605c:	4618      	mov	r0, r3
  40605e:	3714      	adds	r7, #20
  406060:	46bd      	mov	sp, r7
  406062:	f85d 7b04 	ldr.w	r7, [sp], #4
  406066:	4770      	bx	lr

00406068 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
  406068:	b580      	push	{r7, lr}
  40606a:	b086      	sub	sp, #24
  40606c:	af00      	add	r7, sp, #0
  40606e:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
  406070:	687b      	ldr	r3, [r7, #4]
  406072:	2b00      	cmp	r3, #0
  406074:	d101      	bne.n	40607a <pbuf_free+0x12>
    LWIP_ASSERT("p != NULL", p != NULL);
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
  406076:	2300      	movs	r3, #0
  406078:	e036      	b.n	4060e8 <pbuf_free+0x80>

  LWIP_ASSERT("pbuf_free: sane type",
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
  40607a:	2300      	movs	r3, #0
  40607c:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
  40607e:	e02f      	b.n	4060e0 <pbuf_free+0x78>
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
  406080:	687b      	ldr	r3, [r7, #4]
  406082:	89db      	ldrh	r3, [r3, #14]
  406084:	3b01      	subs	r3, #1
  406086:	b29a      	uxth	r2, r3
  406088:	687b      	ldr	r3, [r7, #4]
  40608a:	81da      	strh	r2, [r3, #14]
  40608c:	687b      	ldr	r3, [r7, #4]
  40608e:	89db      	ldrh	r3, [r3, #14]
  406090:	82bb      	strh	r3, [r7, #20]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
  406092:	8abb      	ldrh	r3, [r7, #20]
  406094:	2b00      	cmp	r3, #0
  406096:	d121      	bne.n	4060dc <pbuf_free+0x74>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
  406098:	687b      	ldr	r3, [r7, #4]
  40609a:	681b      	ldr	r3, [r3, #0]
  40609c:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
  40609e:	687b      	ldr	r3, [r7, #4]
  4060a0:	7b1b      	ldrb	r3, [r3, #12]
  4060a2:	81fb      	strh	r3, [r7, #14]
        pc->custom_free_function(p);
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
  4060a4:	89fb      	ldrh	r3, [r7, #14]
  4060a6:	2b03      	cmp	r3, #3
  4060a8:	d104      	bne.n	4060b4 <pbuf_free+0x4c>
          memp_free(MEMP_PBUF_POOL, p);
  4060aa:	6879      	ldr	r1, [r7, #4]
  4060ac:	2007      	movs	r0, #7
  4060ae:	4b10      	ldr	r3, [pc, #64]	; (4060f0 <pbuf_free+0x88>)
  4060b0:	4798      	blx	r3
  4060b2:	e00d      	b.n	4060d0 <pbuf_free+0x68>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
  4060b4:	89fb      	ldrh	r3, [r7, #14]
  4060b6:	2b01      	cmp	r3, #1
  4060b8:	d002      	beq.n	4060c0 <pbuf_free+0x58>
  4060ba:	89fb      	ldrh	r3, [r7, #14]
  4060bc:	2b02      	cmp	r3, #2
  4060be:	d104      	bne.n	4060ca <pbuf_free+0x62>
          memp_free(MEMP_PBUF, p);
  4060c0:	6879      	ldr	r1, [r7, #4]
  4060c2:	2006      	movs	r0, #6
  4060c4:	4b0a      	ldr	r3, [pc, #40]	; (4060f0 <pbuf_free+0x88>)
  4060c6:	4798      	blx	r3
  4060c8:	e002      	b.n	4060d0 <pbuf_free+0x68>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
  4060ca:	6878      	ldr	r0, [r7, #4]
  4060cc:	4b09      	ldr	r3, [pc, #36]	; (4060f4 <pbuf_free+0x8c>)
  4060ce:	4798      	blx	r3
        }
      }
      count++;
  4060d0:	7dfb      	ldrb	r3, [r7, #23]
  4060d2:	3301      	adds	r3, #1
  4060d4:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
  4060d6:	693b      	ldr	r3, [r7, #16]
  4060d8:	607b      	str	r3, [r7, #4]
  4060da:	e001      	b.n	4060e0 <pbuf_free+0x78>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
  4060dc:	2300      	movs	r3, #0
  4060de:	607b      	str	r3, [r7, #4]
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
  4060e0:	687b      	ldr	r3, [r7, #4]
  4060e2:	2b00      	cmp	r3, #0
  4060e4:	d1cc      	bne.n	406080 <pbuf_free+0x18>
      p = NULL;
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
  4060e6:	7dfb      	ldrb	r3, [r7, #23]
}
  4060e8:	4618      	mov	r0, r3
  4060ea:	3718      	adds	r7, #24
  4060ec:	46bd      	mov	sp, r7
  4060ee:	bd80      	pop	{r7, pc}
  4060f0:	00405981 	.word	0x00405981
  4060f4:	00405585 	.word	0x00405585

004060f8 <pbuf_clen>:
 * @return the number of pbufs in a chain
 */

u8_t
pbuf_clen(struct pbuf *p)
{
  4060f8:	b480      	push	{r7}
  4060fa:	b085      	sub	sp, #20
  4060fc:	af00      	add	r7, sp, #0
  4060fe:	6078      	str	r0, [r7, #4]
  u8_t len;

  len = 0;
  406100:	2300      	movs	r3, #0
  406102:	73fb      	strb	r3, [r7, #15]
  while (p != NULL) {
  406104:	e005      	b.n	406112 <pbuf_clen+0x1a>
    ++len;
  406106:	7bfb      	ldrb	r3, [r7, #15]
  406108:	3301      	adds	r3, #1
  40610a:	73fb      	strb	r3, [r7, #15]
    p = p->next;
  40610c:	687b      	ldr	r3, [r7, #4]
  40610e:	681b      	ldr	r3, [r3, #0]
  406110:	607b      	str	r3, [r7, #4]
pbuf_clen(struct pbuf *p)
{
  u8_t len;

  len = 0;
  while (p != NULL) {
  406112:	687b      	ldr	r3, [r7, #4]
  406114:	2b00      	cmp	r3, #0
  406116:	d1f6      	bne.n	406106 <pbuf_clen+0xe>
    ++len;
    p = p->next;
  }
  return len;
  406118:	7bfb      	ldrb	r3, [r7, #15]
}
  40611a:	4618      	mov	r0, r3
  40611c:	3714      	adds	r7, #20
  40611e:	46bd      	mov	sp, r7
  406120:	f85d 7b04 	ldr.w	r7, [sp], #4
  406124:	4770      	bx	lr
  406126:	bf00      	nop

00406128 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
  406128:	b480      	push	{r7}
  40612a:	b083      	sub	sp, #12
  40612c:	af00      	add	r7, sp, #0
  40612e:	6078      	str	r0, [r7, #4]
  SYS_ARCH_DECL_PROTECT(old_level);
  /* pbuf given? */
  if (p != NULL) {
  406130:	687b      	ldr	r3, [r7, #4]
  406132:	2b00      	cmp	r3, #0
  406134:	d005      	beq.n	406142 <pbuf_ref+0x1a>
    SYS_ARCH_PROTECT(old_level);
    ++(p->ref);
  406136:	687b      	ldr	r3, [r7, #4]
  406138:	89db      	ldrh	r3, [r3, #14]
  40613a:	3301      	adds	r3, #1
  40613c:	b29a      	uxth	r2, r3
  40613e:	687b      	ldr	r3, [r7, #4]
  406140:	81da      	strh	r2, [r3, #14]
    SYS_ARCH_UNPROTECT(old_level);
  }
}
  406142:	bf00      	nop
  406144:	370c      	adds	r7, #12
  406146:	46bd      	mov	sp, r7
  406148:	f85d 7b04 	ldr.w	r7, [sp], #4
  40614c:	4770      	bx	lr
  40614e:	bf00      	nop

00406150 <pbuf_cat>:
 * @see pbuf_chain()
 */

void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
  406150:	b480      	push	{r7}
  406152:	b085      	sub	sp, #20
  406154:	af00      	add	r7, sp, #0
  406156:	6078      	str	r0, [r7, #4]
  406158:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
  40615a:	687b      	ldr	r3, [r7, #4]
  40615c:	2b00      	cmp	r3, #0
  40615e:	d002      	beq.n	406166 <pbuf_cat+0x16>
  406160:	683b      	ldr	r3, [r7, #0]
  406162:	2b00      	cmp	r3, #0
  406164:	d100      	bne.n	406168 <pbuf_cat+0x18>
  406166:	e7fe      	b.n	406166 <pbuf_cat+0x16>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
  406168:	687b      	ldr	r3, [r7, #4]
  40616a:	60fb      	str	r3, [r7, #12]
  40616c:	e00a      	b.n	406184 <pbuf_cat+0x34>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
  40616e:	68fb      	ldr	r3, [r7, #12]
  406170:	891a      	ldrh	r2, [r3, #8]
  406172:	683b      	ldr	r3, [r7, #0]
  406174:	891b      	ldrh	r3, [r3, #8]
  406176:	4413      	add	r3, r2
  406178:	b29a      	uxth	r2, r3
  40617a:	68fb      	ldr	r3, [r7, #12]
  40617c:	811a      	strh	r2, [r3, #8]

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
  40617e:	68fb      	ldr	r3, [r7, #12]
  406180:	681b      	ldr	r3, [r3, #0]
  406182:	60fb      	str	r3, [r7, #12]
  406184:	68fb      	ldr	r3, [r7, #12]
  406186:	681b      	ldr	r3, [r3, #0]
  406188:	2b00      	cmp	r3, #0
  40618a:	d1f0      	bne.n	40616e <pbuf_cat+0x1e>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
  40618c:	68fb      	ldr	r3, [r7, #12]
  40618e:	891a      	ldrh	r2, [r3, #8]
  406190:	683b      	ldr	r3, [r7, #0]
  406192:	891b      	ldrh	r3, [r3, #8]
  406194:	4413      	add	r3, r2
  406196:	b29a      	uxth	r2, r3
  406198:	68fb      	ldr	r3, [r7, #12]
  40619a:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
  40619c:	68fb      	ldr	r3, [r7, #12]
  40619e:	683a      	ldr	r2, [r7, #0]
  4061a0:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
  4061a2:	bf00      	nop
  4061a4:	3714      	adds	r7, #20
  4061a6:	46bd      	mov	sp, r7
  4061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4061ac:	4770      	bx	lr
  4061ae:	bf00      	nop

004061b0 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
  4061b0:	b580      	push	{r7, lr}
  4061b2:	b082      	sub	sp, #8
  4061b4:	af00      	add	r7, sp, #0
  4061b6:	6078      	str	r0, [r7, #4]
  4061b8:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
  4061ba:	6839      	ldr	r1, [r7, #0]
  4061bc:	6878      	ldr	r0, [r7, #4]
  4061be:	4b04      	ldr	r3, [pc, #16]	; (4061d0 <pbuf_chain+0x20>)
  4061c0:	4798      	blx	r3
  /* t is now referenced by h */
  pbuf_ref(t);
  4061c2:	6838      	ldr	r0, [r7, #0]
  4061c4:	4b03      	ldr	r3, [pc, #12]	; (4061d4 <pbuf_chain+0x24>)
  4061c6:	4798      	blx	r3
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
  4061c8:	bf00      	nop
  4061ca:	3708      	adds	r7, #8
  4061cc:	46bd      	mov	sp, r7
  4061ce:	bd80      	pop	{r7, pc}
  4061d0:	00406151 	.word	0x00406151
  4061d4:	00406129 	.word	0x00406129

004061d8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, struct pbuf *p_from)
{
  4061d8:	b580      	push	{r7, lr}
  4061da:	b084      	sub	sp, #16
  4061dc:	af00      	add	r7, sp, #0
  4061de:	6078      	str	r0, [r7, #4]
  4061e0:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
  4061e2:	2300      	movs	r3, #0
  4061e4:	81fb      	strh	r3, [r7, #14]
  4061e6:	2300      	movs	r3, #0
  4061e8:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (void*)p_to, (void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
  4061ea:	687b      	ldr	r3, [r7, #4]
  4061ec:	2b00      	cmp	r3, #0
  4061ee:	d008      	beq.n	406202 <pbuf_copy+0x2a>
  4061f0:	683b      	ldr	r3, [r7, #0]
  4061f2:	2b00      	cmp	r3, #0
  4061f4:	d005      	beq.n	406202 <pbuf_copy+0x2a>
  4061f6:	687b      	ldr	r3, [r7, #4]
  4061f8:	891a      	ldrh	r2, [r3, #8]
  4061fa:	683b      	ldr	r3, [r7, #0]
  4061fc:	891b      	ldrh	r3, [r3, #8]
  4061fe:	429a      	cmp	r2, r3
  406200:	d200      	bcs.n	406204 <pbuf_copy+0x2c>
  406202:	e7fe      	b.n	406202 <pbuf_copy+0x2a>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
  406204:	687b      	ldr	r3, [r7, #4]
  406206:	895b      	ldrh	r3, [r3, #10]
  406208:	461a      	mov	r2, r3
  40620a:	89fb      	ldrh	r3, [r7, #14]
  40620c:	1ad2      	subs	r2, r2, r3
  40620e:	683b      	ldr	r3, [r7, #0]
  406210:	895b      	ldrh	r3, [r3, #10]
  406212:	4619      	mov	r1, r3
  406214:	89bb      	ldrh	r3, [r7, #12]
  406216:	1acb      	subs	r3, r1, r3
  406218:	429a      	cmp	r2, r3
  40621a:	db05      	blt.n	406228 <pbuf_copy+0x50>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
  40621c:	683b      	ldr	r3, [r7, #0]
  40621e:	895a      	ldrh	r2, [r3, #10]
  406220:	89bb      	ldrh	r3, [r7, #12]
  406222:	1ad3      	subs	r3, r2, r3
  406224:	817b      	strh	r3, [r7, #10]
  406226:	e004      	b.n	406232 <pbuf_copy+0x5a>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
  406228:	687b      	ldr	r3, [r7, #4]
  40622a:	895a      	ldrh	r2, [r3, #10]
  40622c:	89fb      	ldrh	r3, [r7, #14]
  40622e:	1ad3      	subs	r3, r2, r3
  406230:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
  406232:	687b      	ldr	r3, [r7, #4]
  406234:	685a      	ldr	r2, [r3, #4]
  406236:	89fb      	ldrh	r3, [r7, #14]
  406238:	18d0      	adds	r0, r2, r3
  40623a:	683b      	ldr	r3, [r7, #0]
  40623c:	685a      	ldr	r2, [r3, #4]
  40623e:	89bb      	ldrh	r3, [r7, #12]
  406240:	4413      	add	r3, r2
  406242:	897a      	ldrh	r2, [r7, #10]
  406244:	4619      	mov	r1, r3
  406246:	4b24      	ldr	r3, [pc, #144]	; (4062d8 <pbuf_copy+0x100>)
  406248:	4798      	blx	r3
    offset_to += len;
  40624a:	89fa      	ldrh	r2, [r7, #14]
  40624c:	897b      	ldrh	r3, [r7, #10]
  40624e:	4413      	add	r3, r2
  406250:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
  406252:	89ba      	ldrh	r2, [r7, #12]
  406254:	897b      	ldrh	r3, [r7, #10]
  406256:	4413      	add	r3, r2
  406258:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
    if (offset_from >= p_from->len) {
  40625a:	683b      	ldr	r3, [r7, #0]
  40625c:	895b      	ldrh	r3, [r3, #10]
  40625e:	89ba      	ldrh	r2, [r7, #12]
  406260:	429a      	cmp	r2, r3
  406262:	d304      	bcc.n	40626e <pbuf_copy+0x96>
      /* on to next p_from (if any) */
      offset_from = 0;
  406264:	2300      	movs	r3, #0
  406266:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
  406268:	683b      	ldr	r3, [r7, #0]
  40626a:	681b      	ldr	r3, [r3, #0]
  40626c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
  40626e:	687b      	ldr	r3, [r7, #4]
  406270:	895b      	ldrh	r3, [r3, #10]
  406272:	89fa      	ldrh	r2, [r7, #14]
  406274:	429a      	cmp	r2, r3
  406276:	d10b      	bne.n	406290 <pbuf_copy+0xb8>
      /* on to next p_to (if any) */
      offset_to = 0;
  406278:	2300      	movs	r3, #0
  40627a:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
  40627c:	687b      	ldr	r3, [r7, #4]
  40627e:	681b      	ldr	r3, [r3, #0]
  406280:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
  406282:	687b      	ldr	r3, [r7, #4]
  406284:	2b00      	cmp	r3, #0
  406286:	d103      	bne.n	406290 <pbuf_copy+0xb8>
  406288:	683b      	ldr	r3, [r7, #0]
  40628a:	2b00      	cmp	r3, #0
  40628c:	d000      	beq.n	406290 <pbuf_copy+0xb8>
  40628e:	e7fe      	b.n	40628e <pbuf_copy+0xb6>
    }

    if((p_from != NULL) && (p_from->len == p_from->tot_len)) {
  406290:	683b      	ldr	r3, [r7, #0]
  406292:	2b00      	cmp	r3, #0
  406294:	d00a      	beq.n	4062ac <pbuf_copy+0xd4>
  406296:	683b      	ldr	r3, [r7, #0]
  406298:	895a      	ldrh	r2, [r3, #10]
  40629a:	683b      	ldr	r3, [r7, #0]
  40629c:	891b      	ldrh	r3, [r3, #8]
  40629e:	429a      	cmp	r2, r3
  4062a0:	d104      	bne.n	4062ac <pbuf_copy+0xd4>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!\n",
  4062a2:	683b      	ldr	r3, [r7, #0]
  4062a4:	681b      	ldr	r3, [r3, #0]
  4062a6:	2b00      	cmp	r3, #0
  4062a8:	d000      	beq.n	4062ac <pbuf_copy+0xd4>
  4062aa:	e7fe      	b.n	4062aa <pbuf_copy+0xd2>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if((p_to != NULL) && (p_to->len == p_to->tot_len)) {
  4062ac:	687b      	ldr	r3, [r7, #4]
  4062ae:	2b00      	cmp	r3, #0
  4062b0:	d00a      	beq.n	4062c8 <pbuf_copy+0xf0>
  4062b2:	687b      	ldr	r3, [r7, #4]
  4062b4:	895a      	ldrh	r2, [r3, #10]
  4062b6:	687b      	ldr	r3, [r7, #4]
  4062b8:	891b      	ldrh	r3, [r3, #8]
  4062ba:	429a      	cmp	r2, r3
  4062bc:	d104      	bne.n	4062c8 <pbuf_copy+0xf0>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!\n",
  4062be:	687b      	ldr	r3, [r7, #4]
  4062c0:	681b      	ldr	r3, [r3, #0]
  4062c2:	2b00      	cmp	r3, #0
  4062c4:	d000      	beq.n	4062c8 <pbuf_copy+0xf0>
  4062c6:	e7fe      	b.n	4062c6 <pbuf_copy+0xee>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
  4062c8:	683b      	ldr	r3, [r7, #0]
  4062ca:	2b00      	cmp	r3, #0
  4062cc:	d19a      	bne.n	406204 <pbuf_copy+0x2c>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
  4062ce:	2300      	movs	r3, #0
}
  4062d0:	4618      	mov	r0, r3
  4062d2:	3710      	adds	r7, #16
  4062d4:	46bd      	mov	sp, r7
  4062d6:	bd80      	pop	{r7, pc}
  4062d8:	0040d859 	.word	0x0040d859

004062dc <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
  4062dc:	b580      	push	{r7, lr}
  4062de:	b088      	sub	sp, #32
  4062e0:	af00      	add	r7, sp, #0
  4062e2:	60f8      	str	r0, [r7, #12]
  4062e4:	60b9      	str	r1, [r7, #8]
  4062e6:	4611      	mov	r1, r2
  4062e8:	461a      	mov	r2, r3
  4062ea:	460b      	mov	r3, r1
  4062ec:	80fb      	strh	r3, [r7, #6]
  4062ee:	4613      	mov	r3, r2
  4062f0:	80bb      	strh	r3, [r7, #4]
  struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
  4062f2:	2300      	movs	r3, #0
  4062f4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
  4062f6:	68fb      	ldr	r3, [r7, #12]
  4062f8:	2b00      	cmp	r3, #0
  4062fa:	d100      	bne.n	4062fe <pbuf_copy_partial+0x22>
  4062fc:	e7fe      	b.n	4062fc <pbuf_copy_partial+0x20>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
  4062fe:	68bb      	ldr	r3, [r7, #8]
  406300:	2b00      	cmp	r3, #0
  406302:	d100      	bne.n	406306 <pbuf_copy_partial+0x2a>
  406304:	e7fe      	b.n	406304 <pbuf_copy_partial+0x28>

  left = 0;
  406306:	2300      	movs	r3, #0
  406308:	837b      	strh	r3, [r7, #26]

  if((buf == NULL) || (dataptr == NULL)) {
  40630a:	68fb      	ldr	r3, [r7, #12]
  40630c:	2b00      	cmp	r3, #0
  40630e:	d002      	beq.n	406316 <pbuf_copy_partial+0x3a>
  406310:	68bb      	ldr	r3, [r7, #8]
  406312:	2b00      	cmp	r3, #0
  406314:	d101      	bne.n	40631a <pbuf_copy_partial+0x3e>
    return 0;
  406316:	2300      	movs	r3, #0
  406318:	e03e      	b.n	406398 <pbuf_copy_partial+0xbc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for(p = buf; len != 0 && p != NULL; p = p->next) {
  40631a:	68fb      	ldr	r3, [r7, #12]
  40631c:	61fb      	str	r3, [r7, #28]
  40631e:	e034      	b.n	40638a <pbuf_copy_partial+0xae>
    if ((offset != 0) && (offset >= p->len)) {
  406320:	88bb      	ldrh	r3, [r7, #4]
  406322:	2b00      	cmp	r3, #0
  406324:	d00a      	beq.n	40633c <pbuf_copy_partial+0x60>
  406326:	69fb      	ldr	r3, [r7, #28]
  406328:	895b      	ldrh	r3, [r3, #10]
  40632a:	88ba      	ldrh	r2, [r7, #4]
  40632c:	429a      	cmp	r2, r3
  40632e:	d305      	bcc.n	40633c <pbuf_copy_partial+0x60>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
  406330:	69fb      	ldr	r3, [r7, #28]
  406332:	895b      	ldrh	r3, [r3, #10]
  406334:	88ba      	ldrh	r2, [r7, #4]
  406336:	1ad3      	subs	r3, r2, r3
  406338:	80bb      	strh	r3, [r7, #4]
  40633a:	e023      	b.n	406384 <pbuf_copy_partial+0xa8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
  40633c:	69fb      	ldr	r3, [r7, #28]
  40633e:	895a      	ldrh	r2, [r3, #10]
  406340:	88bb      	ldrh	r3, [r7, #4]
  406342:	1ad3      	subs	r3, r2, r3
  406344:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len)
  406346:	8b3a      	ldrh	r2, [r7, #24]
  406348:	88fb      	ldrh	r3, [r7, #6]
  40634a:	429a      	cmp	r2, r3
  40634c:	d901      	bls.n	406352 <pbuf_copy_partial+0x76>
          buf_copy_len = len;
  40634e:	88fb      	ldrh	r3, [r7, #6]
  406350:	833b      	strh	r3, [r7, #24]
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
  406352:	8b7b      	ldrh	r3, [r7, #26]
  406354:	68ba      	ldr	r2, [r7, #8]
  406356:	18d0      	adds	r0, r2, r3
  406358:	69fb      	ldr	r3, [r7, #28]
  40635a:	685a      	ldr	r2, [r3, #4]
  40635c:	88bb      	ldrh	r3, [r7, #4]
  40635e:	4413      	add	r3, r2
  406360:	8b3a      	ldrh	r2, [r7, #24]
  406362:	4619      	mov	r1, r3
  406364:	4b0e      	ldr	r3, [pc, #56]	; (4063a0 <pbuf_copy_partial+0xc4>)
  406366:	4798      	blx	r3
      copied_total += buf_copy_len;
  406368:	8afa      	ldrh	r2, [r7, #22]
  40636a:	8b3b      	ldrh	r3, [r7, #24]
  40636c:	4413      	add	r3, r2
  40636e:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
  406370:	8b7a      	ldrh	r2, [r7, #26]
  406372:	8b3b      	ldrh	r3, [r7, #24]
  406374:	4413      	add	r3, r2
  406376:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
  406378:	88fa      	ldrh	r2, [r7, #6]
  40637a:	8b3b      	ldrh	r3, [r7, #24]
  40637c:	1ad3      	subs	r3, r2, r3
  40637e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
  406380:	2300      	movs	r3, #0
  406382:	80bb      	strh	r3, [r7, #4]
  if((buf == NULL) || (dataptr == NULL)) {
    return 0;
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for(p = buf; len != 0 && p != NULL; p = p->next) {
  406384:	69fb      	ldr	r3, [r7, #28]
  406386:	681b      	ldr	r3, [r3, #0]
  406388:	61fb      	str	r3, [r7, #28]
  40638a:	88fb      	ldrh	r3, [r7, #6]
  40638c:	2b00      	cmp	r3, #0
  40638e:	d002      	beq.n	406396 <pbuf_copy_partial+0xba>
  406390:	69fb      	ldr	r3, [r7, #28]
  406392:	2b00      	cmp	r3, #0
  406394:	d1c4      	bne.n	406320 <pbuf_copy_partial+0x44>
      left += buf_copy_len;
      len -= buf_copy_len;
      offset = 0;
    }
  }
  return copied_total;
  406396:	8afb      	ldrh	r3, [r7, #22]
}
  406398:	4618      	mov	r0, r3
  40639a:	3720      	adds	r7, #32
  40639c:	46bd      	mov	sp, r7
  40639e:	bd80      	pop	{r7, pc}
  4063a0:	0040d859 	.word	0x0040d859

004063a4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
  4063a4:	b480      	push	{r7}
  4063a6:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
  4063a8:	bf00      	nop
  4063aa:	46bd      	mov	sp, r7
  4063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
  4063b0:	4770      	bx	lr
  4063b2:	bf00      	nop

004063b4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
  4063b4:	b580      	push	{r7, lr}
  4063b6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
  4063b8:	4b08      	ldr	r3, [pc, #32]	; (4063dc <tcp_tmr+0x28>)
  4063ba:	4798      	blx	r3

  if (++tcp_timer & 1) {
  4063bc:	4b08      	ldr	r3, [pc, #32]	; (4063e0 <tcp_tmr+0x2c>)
  4063be:	781b      	ldrb	r3, [r3, #0]
  4063c0:	3301      	adds	r3, #1
  4063c2:	b2da      	uxtb	r2, r3
  4063c4:	4b06      	ldr	r3, [pc, #24]	; (4063e0 <tcp_tmr+0x2c>)
  4063c6:	701a      	strb	r2, [r3, #0]
  4063c8:	4b05      	ldr	r3, [pc, #20]	; (4063e0 <tcp_tmr+0x2c>)
  4063ca:	781b      	ldrb	r3, [r3, #0]
  4063cc:	f003 0301 	and.w	r3, r3, #1
  4063d0:	2b00      	cmp	r3, #0
  4063d2:	d001      	beq.n	4063d8 <tcp_tmr+0x24>
    /* Call tcp_tmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
  4063d4:	4b03      	ldr	r3, [pc, #12]	; (4063e4 <tcp_tmr+0x30>)
  4063d6:	4798      	blx	r3
  }
}
  4063d8:	bf00      	nop
  4063da:	bd80      	pop	{r7, pc}
  4063dc:	00406fa5 	.word	0x00406fa5
  4063e0:	204025a8 	.word	0x204025a8
  4063e4:	00406b25 	.word	0x00406b25

004063e8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
  4063e8:	b5b0      	push	{r4, r5, r7, lr}
  4063ea:	b086      	sub	sp, #24
  4063ec:	af02      	add	r7, sp, #8
  4063ee:	6078      	str	r0, [r7, #4]
  4063f0:	460b      	mov	r3, r1
  4063f2:	70fb      	strb	r3, [r7, #3]
  err_t err;

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
  4063f4:	78fb      	ldrb	r3, [r7, #3]
  4063f6:	2b00      	cmp	r3, #0
  4063f8:	d067      	beq.n	4064ca <tcp_close_shutdown+0xe2>
  4063fa:	687b      	ldr	r3, [r7, #4]
  4063fc:	7e1b      	ldrb	r3, [r3, #24]
  4063fe:	2b04      	cmp	r3, #4
  406400:	d003      	beq.n	40640a <tcp_close_shutdown+0x22>
  406402:	687b      	ldr	r3, [r7, #4]
  406404:	7e1b      	ldrb	r3, [r3, #24]
  406406:	2b07      	cmp	r3, #7
  406408:	d15f      	bne.n	4064ca <tcp_close_shutdown+0xe2>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND)) {
  40640a:	687b      	ldr	r3, [r7, #4]
  40640c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
  40640e:	2b00      	cmp	r3, #0
  406410:	d105      	bne.n	40641e <tcp_close_shutdown+0x36>
  406412:	687b      	ldr	r3, [r7, #4]
  406414:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
  406416:	f640 3268 	movw	r2, #2920	; 0xb68
  40641a:	4293      	cmp	r3, r2
  40641c:	d055      	beq.n	4064ca <tcp_close_shutdown+0xe2>
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
  40641e:	687b      	ldr	r3, [r7, #4]
  406420:	6d18      	ldr	r0, [r3, #80]	; 0x50
  406422:	687b      	ldr	r3, [r7, #4]
  406424:	6a99      	ldr	r1, [r3, #40]	; 0x28
  406426:	687c      	ldr	r4, [r7, #4]
  406428:	687b      	ldr	r3, [r7, #4]
  40642a:	1d1d      	adds	r5, r3, #4
  40642c:	687b      	ldr	r3, [r7, #4]
  40642e:	8b5b      	ldrh	r3, [r3, #26]
  406430:	687a      	ldr	r2, [r7, #4]
  406432:	8b92      	ldrh	r2, [r2, #28]
  406434:	9201      	str	r2, [sp, #4]
  406436:	9300      	str	r3, [sp, #0]
  406438:	462b      	mov	r3, r5
  40643a:	4622      	mov	r2, r4
  40643c:	4c79      	ldr	r4, [pc, #484]	; (406624 <tcp_close_shutdown+0x23c>)
  40643e:	47a0      	blx	r4
        pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
  406440:	6878      	ldr	r0, [r7, #4]
  406442:	4b79      	ldr	r3, [pc, #484]	; (406628 <tcp_close_shutdown+0x240>)
  406444:	4798      	blx	r3
      TCP_RMV_ACTIVE(pcb);
  406446:	4b79      	ldr	r3, [pc, #484]	; (40662c <tcp_close_shutdown+0x244>)
  406448:	681a      	ldr	r2, [r3, #0]
  40644a:	687b      	ldr	r3, [r7, #4]
  40644c:	429a      	cmp	r2, r3
  40644e:	d105      	bne.n	40645c <tcp_close_shutdown+0x74>
  406450:	4b76      	ldr	r3, [pc, #472]	; (40662c <tcp_close_shutdown+0x244>)
  406452:	681b      	ldr	r3, [r3, #0]
  406454:	68db      	ldr	r3, [r3, #12]
  406456:	4a75      	ldr	r2, [pc, #468]	; (40662c <tcp_close_shutdown+0x244>)
  406458:	6013      	str	r3, [r2, #0]
  40645a:	e019      	b.n	406490 <tcp_close_shutdown+0xa8>
  40645c:	4b73      	ldr	r3, [pc, #460]	; (40662c <tcp_close_shutdown+0x244>)
  40645e:	681b      	ldr	r3, [r3, #0]
  406460:	4a73      	ldr	r2, [pc, #460]	; (406630 <tcp_close_shutdown+0x248>)
  406462:	6013      	str	r3, [r2, #0]
  406464:	e010      	b.n	406488 <tcp_close_shutdown+0xa0>
  406466:	4b72      	ldr	r3, [pc, #456]	; (406630 <tcp_close_shutdown+0x248>)
  406468:	681b      	ldr	r3, [r3, #0]
  40646a:	68da      	ldr	r2, [r3, #12]
  40646c:	687b      	ldr	r3, [r7, #4]
  40646e:	429a      	cmp	r2, r3
  406470:	d105      	bne.n	40647e <tcp_close_shutdown+0x96>
  406472:	4b6f      	ldr	r3, [pc, #444]	; (406630 <tcp_close_shutdown+0x248>)
  406474:	681b      	ldr	r3, [r3, #0]
  406476:	687a      	ldr	r2, [r7, #4]
  406478:	68d2      	ldr	r2, [r2, #12]
  40647a:	60da      	str	r2, [r3, #12]
  40647c:	e008      	b.n	406490 <tcp_close_shutdown+0xa8>
  40647e:	4b6c      	ldr	r3, [pc, #432]	; (406630 <tcp_close_shutdown+0x248>)
  406480:	681b      	ldr	r3, [r3, #0]
  406482:	68db      	ldr	r3, [r3, #12]
  406484:	4a6a      	ldr	r2, [pc, #424]	; (406630 <tcp_close_shutdown+0x248>)
  406486:	6013      	str	r3, [r2, #0]
  406488:	4b69      	ldr	r3, [pc, #420]	; (406630 <tcp_close_shutdown+0x248>)
  40648a:	681b      	ldr	r3, [r3, #0]
  40648c:	2b00      	cmp	r3, #0
  40648e:	d1ea      	bne.n	406466 <tcp_close_shutdown+0x7e>
  406490:	687b      	ldr	r3, [r7, #4]
  406492:	2200      	movs	r2, #0
  406494:	60da      	str	r2, [r3, #12]
  406496:	4b67      	ldr	r3, [pc, #412]	; (406634 <tcp_close_shutdown+0x24c>)
  406498:	2201      	movs	r2, #1
  40649a:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
  40649c:	687b      	ldr	r3, [r7, #4]
  40649e:	7e1b      	ldrb	r3, [r3, #24]
  4064a0:	2b04      	cmp	r3, #4
  4064a2:	d10c      	bne.n	4064be <tcp_close_shutdown+0xd6>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
  4064a4:	687b      	ldr	r3, [r7, #4]
  4064a6:	220a      	movs	r2, #10
  4064a8:	761a      	strb	r2, [r3, #24]
        TCP_REG(&tcp_tw_pcbs, pcb);
  4064aa:	4b63      	ldr	r3, [pc, #396]	; (406638 <tcp_close_shutdown+0x250>)
  4064ac:	681a      	ldr	r2, [r3, #0]
  4064ae:	687b      	ldr	r3, [r7, #4]
  4064b0:	60da      	str	r2, [r3, #12]
  4064b2:	4a61      	ldr	r2, [pc, #388]	; (406638 <tcp_close_shutdown+0x250>)
  4064b4:	687b      	ldr	r3, [r7, #4]
  4064b6:	6013      	str	r3, [r2, #0]
  4064b8:	4b60      	ldr	r3, [pc, #384]	; (40663c <tcp_close_shutdown+0x254>)
  4064ba:	4798      	blx	r3
  4064bc:	e003      	b.n	4064c6 <tcp_close_shutdown+0xde>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        memp_free(MEMP_TCP_PCB, pcb);
  4064be:	6879      	ldr	r1, [r7, #4]
  4064c0:	2001      	movs	r0, #1
  4064c2:	4b5f      	ldr	r3, [pc, #380]	; (406640 <tcp_close_shutdown+0x258>)
  4064c4:	4798      	blx	r3
      }
      return ERR_OK;
  4064c6:	2300      	movs	r3, #0
  4064c8:	e0a7      	b.n	40661a <tcp_close_shutdown+0x232>
    }
  }

  switch (pcb->state) {
  4064ca:	687b      	ldr	r3, [r7, #4]
  4064cc:	7e1b      	ldrb	r3, [r3, #24]
  4064ce:	2b07      	cmp	r3, #7
  4064d0:	f200 808d 	bhi.w	4065ee <tcp_close_shutdown+0x206>
  4064d4:	a201      	add	r2, pc, #4	; (adr r2, 4064dc <tcp_close_shutdown+0xf4>)
  4064d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4064da:	bf00      	nop
  4064dc:	004064fd 	.word	0x004064fd
  4064e0:	00406567 	.word	0x00406567
  4064e4:	00406581 	.word	0x00406581
  4064e8:	004065a1 	.word	0x004065a1
  4064ec:	004065bb 	.word	0x004065bb
  4064f0:	004065ef 	.word	0x004065ef
  4064f4:	004065ef 	.word	0x004065ef
  4064f8:	004065d5 	.word	0x004065d5
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state 
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    err = ERR_OK;
  4064fc:	2300      	movs	r3, #0
  4064fe:	73fb      	strb	r3, [r7, #15]
    if (pcb->local_port != 0) {
  406500:	687b      	ldr	r3, [r7, #4]
  406502:	8b5b      	ldrh	r3, [r3, #26]
  406504:	2b00      	cmp	r3, #0
  406506:	d027      	beq.n	406558 <tcp_close_shutdown+0x170>
      TCP_RMV(&tcp_bound_pcbs, pcb);
  406508:	4b4e      	ldr	r3, [pc, #312]	; (406644 <tcp_close_shutdown+0x25c>)
  40650a:	681a      	ldr	r2, [r3, #0]
  40650c:	687b      	ldr	r3, [r7, #4]
  40650e:	429a      	cmp	r2, r3
  406510:	d105      	bne.n	40651e <tcp_close_shutdown+0x136>
  406512:	4b4c      	ldr	r3, [pc, #304]	; (406644 <tcp_close_shutdown+0x25c>)
  406514:	681b      	ldr	r3, [r3, #0]
  406516:	68db      	ldr	r3, [r3, #12]
  406518:	4a4a      	ldr	r2, [pc, #296]	; (406644 <tcp_close_shutdown+0x25c>)
  40651a:	6013      	str	r3, [r2, #0]
  40651c:	e019      	b.n	406552 <tcp_close_shutdown+0x16a>
  40651e:	4b49      	ldr	r3, [pc, #292]	; (406644 <tcp_close_shutdown+0x25c>)
  406520:	681b      	ldr	r3, [r3, #0]
  406522:	4a43      	ldr	r2, [pc, #268]	; (406630 <tcp_close_shutdown+0x248>)
  406524:	6013      	str	r3, [r2, #0]
  406526:	e010      	b.n	40654a <tcp_close_shutdown+0x162>
  406528:	4b41      	ldr	r3, [pc, #260]	; (406630 <tcp_close_shutdown+0x248>)
  40652a:	681b      	ldr	r3, [r3, #0]
  40652c:	68da      	ldr	r2, [r3, #12]
  40652e:	687b      	ldr	r3, [r7, #4]
  406530:	429a      	cmp	r2, r3
  406532:	d105      	bne.n	406540 <tcp_close_shutdown+0x158>
  406534:	4b3e      	ldr	r3, [pc, #248]	; (406630 <tcp_close_shutdown+0x248>)
  406536:	681b      	ldr	r3, [r3, #0]
  406538:	687a      	ldr	r2, [r7, #4]
  40653a:	68d2      	ldr	r2, [r2, #12]
  40653c:	60da      	str	r2, [r3, #12]
  40653e:	e008      	b.n	406552 <tcp_close_shutdown+0x16a>
  406540:	4b3b      	ldr	r3, [pc, #236]	; (406630 <tcp_close_shutdown+0x248>)
  406542:	681b      	ldr	r3, [r3, #0]
  406544:	68db      	ldr	r3, [r3, #12]
  406546:	4a3a      	ldr	r2, [pc, #232]	; (406630 <tcp_close_shutdown+0x248>)
  406548:	6013      	str	r3, [r2, #0]
  40654a:	4b39      	ldr	r3, [pc, #228]	; (406630 <tcp_close_shutdown+0x248>)
  40654c:	681b      	ldr	r3, [r3, #0]
  40654e:	2b00      	cmp	r3, #0
  406550:	d1ea      	bne.n	406528 <tcp_close_shutdown+0x140>
  406552:	687b      	ldr	r3, [r7, #4]
  406554:	2200      	movs	r2, #0
  406556:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
  406558:	6879      	ldr	r1, [r7, #4]
  40655a:	2001      	movs	r0, #1
  40655c:	4b38      	ldr	r3, [pc, #224]	; (406640 <tcp_close_shutdown+0x258>)
  40655e:	4798      	blx	r3
    pcb = NULL;
  406560:	2300      	movs	r3, #0
  406562:	607b      	str	r3, [r7, #4]
    break;
  406564:	e04d      	b.n	406602 <tcp_close_shutdown+0x21a>
  case LISTEN:
    err = ERR_OK;
  406566:	2300      	movs	r3, #0
  406568:	73fb      	strb	r3, [r7, #15]
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
  40656a:	6879      	ldr	r1, [r7, #4]
  40656c:	4836      	ldr	r0, [pc, #216]	; (406648 <tcp_close_shutdown+0x260>)
  40656e:	4b37      	ldr	r3, [pc, #220]	; (40664c <tcp_close_shutdown+0x264>)
  406570:	4798      	blx	r3
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
  406572:	6879      	ldr	r1, [r7, #4]
  406574:	2002      	movs	r0, #2
  406576:	4b32      	ldr	r3, [pc, #200]	; (406640 <tcp_close_shutdown+0x258>)
  406578:	4798      	blx	r3
    pcb = NULL;
  40657a:	2300      	movs	r3, #0
  40657c:	607b      	str	r3, [r7, #4]
    break;
  40657e:	e040      	b.n	406602 <tcp_close_shutdown+0x21a>
  case SYN_SENT:
    err = ERR_OK;
  406580:	2300      	movs	r3, #0
  406582:	73fb      	strb	r3, [r7, #15]
    TCP_PCB_REMOVE_ACTIVE(pcb);
  406584:	6879      	ldr	r1, [r7, #4]
  406586:	4829      	ldr	r0, [pc, #164]	; (40662c <tcp_close_shutdown+0x244>)
  406588:	4b30      	ldr	r3, [pc, #192]	; (40664c <tcp_close_shutdown+0x264>)
  40658a:	4798      	blx	r3
  40658c:	4b29      	ldr	r3, [pc, #164]	; (406634 <tcp_close_shutdown+0x24c>)
  40658e:	2201      	movs	r2, #1
  406590:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
  406592:	6879      	ldr	r1, [r7, #4]
  406594:	2001      	movs	r0, #1
  406596:	4b2a      	ldr	r3, [pc, #168]	; (406640 <tcp_close_shutdown+0x258>)
  406598:	4798      	blx	r3
    pcb = NULL;
  40659a:	2300      	movs	r3, #0
  40659c:	607b      	str	r3, [r7, #4]
    snmp_inc_tcpattemptfails();
    break;
  40659e:	e030      	b.n	406602 <tcp_close_shutdown+0x21a>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
  4065a0:	6878      	ldr	r0, [r7, #4]
  4065a2:	4b2b      	ldr	r3, [pc, #172]	; (406650 <tcp_close_shutdown+0x268>)
  4065a4:	4798      	blx	r3
  4065a6:	4603      	mov	r3, r0
  4065a8:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
  4065aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
  4065ae:	2b00      	cmp	r3, #0
  4065b0:	d122      	bne.n	4065f8 <tcp_close_shutdown+0x210>
      snmp_inc_tcpattemptfails();
      pcb->state = FIN_WAIT_1;
  4065b2:	687b      	ldr	r3, [r7, #4]
  4065b4:	2205      	movs	r2, #5
  4065b6:	761a      	strb	r2, [r3, #24]
    }
    break;
  4065b8:	e01e      	b.n	4065f8 <tcp_close_shutdown+0x210>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
  4065ba:	6878      	ldr	r0, [r7, #4]
  4065bc:	4b24      	ldr	r3, [pc, #144]	; (406650 <tcp_close_shutdown+0x268>)
  4065be:	4798      	blx	r3
  4065c0:	4603      	mov	r3, r0
  4065c2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
  4065c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
  4065c8:	2b00      	cmp	r3, #0
  4065ca:	d117      	bne.n	4065fc <tcp_close_shutdown+0x214>
      snmp_inc_tcpestabresets();
      pcb->state = FIN_WAIT_1;
  4065cc:	687b      	ldr	r3, [r7, #4]
  4065ce:	2205      	movs	r2, #5
  4065d0:	761a      	strb	r2, [r3, #24]
    }
    break;
  4065d2:	e013      	b.n	4065fc <tcp_close_shutdown+0x214>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
  4065d4:	6878      	ldr	r0, [r7, #4]
  4065d6:	4b1e      	ldr	r3, [pc, #120]	; (406650 <tcp_close_shutdown+0x268>)
  4065d8:	4798      	blx	r3
  4065da:	4603      	mov	r3, r0
  4065dc:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
  4065de:	f997 300f 	ldrsb.w	r3, [r7, #15]
  4065e2:	2b00      	cmp	r3, #0
  4065e4:	d10c      	bne.n	406600 <tcp_close_shutdown+0x218>
      snmp_inc_tcpestabresets();
      pcb->state = LAST_ACK;
  4065e6:	687b      	ldr	r3, [r7, #4]
  4065e8:	2209      	movs	r2, #9
  4065ea:	761a      	strb	r2, [r3, #24]
    }
    break;
  4065ec:	e008      	b.n	406600 <tcp_close_shutdown+0x218>
  default:
    /* Has already been closed, do nothing. */
    err = ERR_OK;
  4065ee:	2300      	movs	r3, #0
  4065f0:	73fb      	strb	r3, [r7, #15]
    pcb = NULL;
  4065f2:	2300      	movs	r3, #0
  4065f4:	607b      	str	r3, [r7, #4]
    break;
  4065f6:	e004      	b.n	406602 <tcp_close_shutdown+0x21a>
    err = tcp_send_fin(pcb);
    if (err == ERR_OK) {
      snmp_inc_tcpattemptfails();
      pcb->state = FIN_WAIT_1;
    }
    break;
  4065f8:	bf00      	nop
  4065fa:	e002      	b.n	406602 <tcp_close_shutdown+0x21a>
    err = tcp_send_fin(pcb);
    if (err == ERR_OK) {
      snmp_inc_tcpestabresets();
      pcb->state = FIN_WAIT_1;
    }
    break;
  4065fc:	bf00      	nop
  4065fe:	e000      	b.n	406602 <tcp_close_shutdown+0x21a>
    err = tcp_send_fin(pcb);
    if (err == ERR_OK) {
      snmp_inc_tcpestabresets();
      pcb->state = LAST_ACK;
    }
    break;
  406600:	bf00      	nop
    err = ERR_OK;
    pcb = NULL;
    break;
  }

  if (pcb != NULL && err == ERR_OK) {
  406602:	687b      	ldr	r3, [r7, #4]
  406604:	2b00      	cmp	r3, #0
  406606:	d006      	beq.n	406616 <tcp_close_shutdown+0x22e>
  406608:	f997 300f 	ldrsb.w	r3, [r7, #15]
  40660c:	2b00      	cmp	r3, #0
  40660e:	d102      	bne.n	406616 <tcp_close_shutdown+0x22e>
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    /* @todo: When implementing SO_LINGER, this must be changed somehow:
       If SOF_LINGER is set, the data should be sent and acked before close returns.
       This can only be valid for sequential APIs, not for the raw API. */
    tcp_output(pcb);
  406610:	6878      	ldr	r0, [r7, #4]
  406612:	4b10      	ldr	r3, [pc, #64]	; (406654 <tcp_close_shutdown+0x26c>)
  406614:	4798      	blx	r3
  }
  return err;
  406616:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
  40661a:	4618      	mov	r0, r3
  40661c:	3710      	adds	r7, #16
  40661e:	46bd      	mov	sp, r7
  406620:	bdb0      	pop	{r4, r5, r7, pc}
  406622:	bf00      	nop
  406624:	0040a5cd 	.word	0x0040a5cd
  406628:	00407525 	.word	0x00407525
  40662c:	20404980 	.word	0x20404980
  406630:	2040498c 	.word	0x2040498c
  406634:	2040497c 	.word	0x2040497c
  406638:	20404994 	.word	0x20404994
  40663c:	00405211 	.word	0x00405211
  406640:	00405981 	.word	0x00405981
  406644:	20404990 	.word	0x20404990
  406648:	20404988 	.word	0x20404988
  40664c:	004075b1 	.word	0x004075b1
  406650:	00409841 	.word	0x00409841
  406654:	0040a18d 	.word	0x0040a18d

00406658 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
  406658:	b580      	push	{r7, lr}
  40665a:	b082      	sub	sp, #8
  40665c:	af00      	add	r7, sp, #0
  40665e:	6078      	str	r0, [r7, #4]
#if TCP_DEBUG
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);
#endif /* TCP_DEBUG */

  if (pcb->state != LISTEN) {
  406660:	687b      	ldr	r3, [r7, #4]
  406662:	7e1b      	ldrb	r3, [r3, #24]
  406664:	2b01      	cmp	r3, #1
  406666:	d006      	beq.n	406676 <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
  406668:	687b      	ldr	r3, [r7, #4]
  40666a:	7f9b      	ldrb	r3, [r3, #30]
  40666c:	f043 0310 	orr.w	r3, r3, #16
  406670:	b2da      	uxtb	r2, r3
  406672:	687b      	ldr	r3, [r7, #4]
  406674:	779a      	strb	r2, [r3, #30]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
  406676:	2101      	movs	r1, #1
  406678:	6878      	ldr	r0, [r7, #4]
  40667a:	4b03      	ldr	r3, [pc, #12]	; (406688 <tcp_close+0x30>)
  40667c:	4798      	blx	r3
  40667e:	4603      	mov	r3, r0
}
  406680:	4618      	mov	r0, r3
  406682:	3708      	adds	r7, #8
  406684:	46bd      	mov	sp, r7
  406686:	bd80      	pop	{r7, pc}
  406688:	004063e9 	.word	0x004063e9

0040668c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
  40668c:	b590      	push	{r4, r7, lr}
  40668e:	b089      	sub	sp, #36	; 0x24
  406690:	af02      	add	r7, sp, #8
  406692:	6078      	str	r0, [r7, #4]
  406694:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
  406696:	687b      	ldr	r3, [r7, #4]
  406698:	7e1b      	ldrb	r3, [r3, #24]
  40669a:	2b0a      	cmp	r3, #10
  40669c:	d108      	bne.n	4066b0 <tcp_abandon+0x24>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
  40669e:	6879      	ldr	r1, [r7, #4]
  4066a0:	482c      	ldr	r0, [pc, #176]	; (406754 <tcp_abandon+0xc8>)
  4066a2:	4b2d      	ldr	r3, [pc, #180]	; (406758 <tcp_abandon+0xcc>)
  4066a4:	4798      	blx	r3
    memp_free(MEMP_TCP_PCB, pcb);
  4066a6:	6879      	ldr	r1, [r7, #4]
  4066a8:	2001      	movs	r0, #1
  4066aa:	4b2c      	ldr	r3, [pc, #176]	; (40675c <tcp_abandon+0xd0>)
  4066ac:	4798      	blx	r3
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, pcb->local_port, pcb->remote_port);
    }
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(errf, errf_arg, ERR_ABRT);
  }
}
  4066ae:	e04c      	b.n	40674a <tcp_abandon+0xbe>
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
    memp_free(MEMP_TCP_PCB, pcb);
  } else {
    seqno = pcb->snd_nxt;
  4066b0:	687b      	ldr	r3, [r7, #4]
  4066b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  4066b4:	617b      	str	r3, [r7, #20]
    ackno = pcb->rcv_nxt;
  4066b6:	687b      	ldr	r3, [r7, #4]
  4066b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  4066ba:	613b      	str	r3, [r7, #16]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
  4066bc:	687b      	ldr	r3, [r7, #4]
  4066be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
  4066c2:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
  4066c4:	687b      	ldr	r3, [r7, #4]
  4066c6:	691b      	ldr	r3, [r3, #16]
  4066c8:	60bb      	str	r3, [r7, #8]
    TCP_PCB_REMOVE_ACTIVE(pcb);
  4066ca:	6879      	ldr	r1, [r7, #4]
  4066cc:	4824      	ldr	r0, [pc, #144]	; (406760 <tcp_abandon+0xd4>)
  4066ce:	4b22      	ldr	r3, [pc, #136]	; (406758 <tcp_abandon+0xcc>)
  4066d0:	4798      	blx	r3
  4066d2:	4b24      	ldr	r3, [pc, #144]	; (406764 <tcp_abandon+0xd8>)
  4066d4:	2201      	movs	r2, #1
  4066d6:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
  4066d8:	687b      	ldr	r3, [r7, #4]
  4066da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  4066dc:	2b00      	cmp	r3, #0
  4066de:	d004      	beq.n	4066ea <tcp_abandon+0x5e>
      tcp_segs_free(pcb->unacked);
  4066e0:	687b      	ldr	r3, [r7, #4]
  4066e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  4066e4:	4618      	mov	r0, r3
  4066e6:	4b20      	ldr	r3, [pc, #128]	; (406768 <tcp_abandon+0xdc>)
  4066e8:	4798      	blx	r3
    }
    if (pcb->unsent != NULL) {
  4066ea:	687b      	ldr	r3, [r7, #4]
  4066ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
  4066ee:	2b00      	cmp	r3, #0
  4066f0:	d004      	beq.n	4066fc <tcp_abandon+0x70>
      tcp_segs_free(pcb->unsent);
  4066f2:	687b      	ldr	r3, [r7, #4]
  4066f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
  4066f6:	4618      	mov	r0, r3
  4066f8:	4b1b      	ldr	r3, [pc, #108]	; (406768 <tcp_abandon+0xdc>)
  4066fa:	4798      	blx	r3
    }
#if TCP_QUEUE_OOSEQ    
    if (pcb->ooseq != NULL) {
  4066fc:	687b      	ldr	r3, [r7, #4]
  4066fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  406700:	2b00      	cmp	r3, #0
  406702:	d004      	beq.n	40670e <tcp_abandon+0x82>
      tcp_segs_free(pcb->ooseq);
  406704:	687b      	ldr	r3, [r7, #4]
  406706:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  406708:	4618      	mov	r0, r3
  40670a:	4b17      	ldr	r3, [pc, #92]	; (406768 <tcp_abandon+0xdc>)
  40670c:	4798      	blx	r3
    }
#endif /* TCP_QUEUE_OOSEQ */
    if (reset) {
  40670e:	683b      	ldr	r3, [r7, #0]
  406710:	2b00      	cmp	r3, #0
  406712:	d00e      	beq.n	406732 <tcp_abandon+0xa6>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, pcb->local_port, pcb->remote_port);
  406714:	6879      	ldr	r1, [r7, #4]
  406716:	687b      	ldr	r3, [r7, #4]
  406718:	1d18      	adds	r0, r3, #4
  40671a:	687b      	ldr	r3, [r7, #4]
  40671c:	8b5b      	ldrh	r3, [r3, #26]
  40671e:	687a      	ldr	r2, [r7, #4]
  406720:	8b92      	ldrh	r2, [r2, #28]
  406722:	9201      	str	r2, [sp, #4]
  406724:	9300      	str	r3, [sp, #0]
  406726:	4603      	mov	r3, r0
  406728:	460a      	mov	r2, r1
  40672a:	6939      	ldr	r1, [r7, #16]
  40672c:	6978      	ldr	r0, [r7, #20]
  40672e:	4c0f      	ldr	r4, [pc, #60]	; (40676c <tcp_abandon+0xe0>)
  406730:	47a0      	blx	r4
    }
    memp_free(MEMP_TCP_PCB, pcb);
  406732:	6879      	ldr	r1, [r7, #4]
  406734:	2001      	movs	r0, #1
  406736:	4b09      	ldr	r3, [pc, #36]	; (40675c <tcp_abandon+0xd0>)
  406738:	4798      	blx	r3
    TCP_EVENT_ERR(errf, errf_arg, ERR_ABRT);
  40673a:	68fb      	ldr	r3, [r7, #12]
  40673c:	2b00      	cmp	r3, #0
  40673e:	d004      	beq.n	40674a <tcp_abandon+0xbe>
  406740:	68fb      	ldr	r3, [r7, #12]
  406742:	f06f 0109 	mvn.w	r1, #9
  406746:	68b8      	ldr	r0, [r7, #8]
  406748:	4798      	blx	r3
  }
}
  40674a:	bf00      	nop
  40674c:	371c      	adds	r7, #28
  40674e:	46bd      	mov	sp, r7
  406750:	bd90      	pop	{r4, r7, pc}
  406752:	bf00      	nop
  406754:	20404994 	.word	0x20404994
  406758:	004075b1 	.word	0x004075b1
  40675c:	00405981 	.word	0x00405981
  406760:	20404980 	.word	0x20404980
  406764:	2040497c 	.word	0x2040497c
  406768:	00407125 	.word	0x00407125
  40676c:	0040a5cd 	.word	0x0040a5cd

00406770 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
  406770:	b580      	push	{r7, lr}
  406772:	b082      	sub	sp, #8
  406774:	af00      	add	r7, sp, #0
  406776:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
  406778:	2101      	movs	r1, #1
  40677a:	6878      	ldr	r0, [r7, #4]
  40677c:	4b02      	ldr	r3, [pc, #8]	; (406788 <tcp_abort+0x18>)
  40677e:	4798      	blx	r3
}
  406780:	bf00      	nop
  406782:	3708      	adds	r7, #8
  406784:	46bd      	mov	sp, r7
  406786:	bd80      	pop	{r7, pc}
  406788:	0040668d 	.word	0x0040668d

0040678c <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, ip_addr_t *ipaddr, u16_t port)
{
  40678c:	b580      	push	{r7, lr}
  40678e:	b088      	sub	sp, #32
  406790:	af00      	add	r7, sp, #0
  406792:	60f8      	str	r0, [r7, #12]
  406794:	60b9      	str	r1, [r7, #8]
  406796:	4613      	mov	r3, r2
  406798:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
  40679a:	2304      	movs	r3, #4
  40679c:	617b      	str	r3, [r7, #20]
  struct tcp_pcb *cpcb;

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
  40679e:	68fb      	ldr	r3, [r7, #12]
  4067a0:	7e1b      	ldrb	r3, [r3, #24]
  4067a2:	2b00      	cmp	r3, #0
  4067a4:	d000      	beq.n	4067a8 <tcp_bind+0x1c>
  4067a6:	e7fe      	b.n	4067a6 <tcp_bind+0x1a>
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
    max_pcb_list = NUM_TCP_PCB_LISTS_NO_TIME_WAIT;
  }
#endif /* SO_REUSE */

  if (port == 0) {
  4067a8:	88fb      	ldrh	r3, [r7, #6]
  4067aa:	2b00      	cmp	r3, #0
  4067ac:	d109      	bne.n	4067c2 <tcp_bind+0x36>
    port = tcp_new_port();
  4067ae:	4b2c      	ldr	r3, [pc, #176]	; (406860 <tcp_bind+0xd4>)
  4067b0:	4798      	blx	r3
  4067b2:	4603      	mov	r3, r0
  4067b4:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
  4067b6:	88fb      	ldrh	r3, [r7, #6]
  4067b8:	2b00      	cmp	r3, #0
  4067ba:	d102      	bne.n	4067c2 <tcp_bind+0x36>
      return ERR_BUF;
  4067bc:	f06f 0301 	mvn.w	r3, #1
  4067c0:	e04a      	b.n	406858 <tcp_bind+0xcc>
    }
  }

  /* Check if the address already is in use (on all lists) */
  for (i = 0; i < max_pcb_list; i++) {
  4067c2:	2300      	movs	r3, #0
  4067c4:	61fb      	str	r3, [r7, #28]
  4067c6:	e02b      	b.n	406820 <tcp_bind+0x94>
    for(cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
  4067c8:	4a26      	ldr	r2, [pc, #152]	; (406864 <tcp_bind+0xd8>)
  4067ca:	69fb      	ldr	r3, [r7, #28]
  4067cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4067d0:	681b      	ldr	r3, [r3, #0]
  4067d2:	61bb      	str	r3, [r7, #24]
  4067d4:	e01e      	b.n	406814 <tcp_bind+0x88>
      if (cpcb->local_port == port) {
  4067d6:	69bb      	ldr	r3, [r7, #24]
  4067d8:	8b5b      	ldrh	r3, [r3, #26]
  4067da:	88fa      	ldrh	r2, [r7, #6]
  4067dc:	429a      	cmp	r2, r3
  4067de:	d116      	bne.n	40680e <tcp_bind+0x82>
           tcp_connect. */
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          if (ip_addr_isany(&(cpcb->local_ip)) ||
  4067e0:	69bb      	ldr	r3, [r7, #24]
  4067e2:	2b00      	cmp	r3, #0
  4067e4:	d010      	beq.n	406808 <tcp_bind+0x7c>
  4067e6:	69bb      	ldr	r3, [r7, #24]
  4067e8:	681b      	ldr	r3, [r3, #0]
  4067ea:	2b00      	cmp	r3, #0
  4067ec:	d00c      	beq.n	406808 <tcp_bind+0x7c>
  4067ee:	68bb      	ldr	r3, [r7, #8]
  4067f0:	2b00      	cmp	r3, #0
  4067f2:	d009      	beq.n	406808 <tcp_bind+0x7c>
              ip_addr_isany(ipaddr) ||
  4067f4:	68bb      	ldr	r3, [r7, #8]
  4067f6:	681b      	ldr	r3, [r3, #0]
  4067f8:	2b00      	cmp	r3, #0
  4067fa:	d005      	beq.n	406808 <tcp_bind+0x7c>
              ip_addr_cmp(&(cpcb->local_ip), ipaddr)) {
  4067fc:	69bb      	ldr	r3, [r7, #24]
  4067fe:	681a      	ldr	r2, [r3, #0]
  406800:	68bb      	ldr	r3, [r7, #8]
  406802:	681b      	ldr	r3, [r3, #0]
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          if (ip_addr_isany(&(cpcb->local_ip)) ||
              ip_addr_isany(ipaddr) ||
  406804:	429a      	cmp	r2, r3
  406806:	d102      	bne.n	40680e <tcp_bind+0x82>
              ip_addr_cmp(&(cpcb->local_ip), ipaddr)) {
            return ERR_USE;
  406808:	f06f 0307 	mvn.w	r3, #7
  40680c:	e024      	b.n	406858 <tcp_bind+0xcc>
    }
  }

  /* Check if the address already is in use (on all lists) */
  for (i = 0; i < max_pcb_list; i++) {
    for(cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
  40680e:	69bb      	ldr	r3, [r7, #24]
  406810:	68db      	ldr	r3, [r3, #12]
  406812:	61bb      	str	r3, [r7, #24]
  406814:	69bb      	ldr	r3, [r7, #24]
  406816:	2b00      	cmp	r3, #0
  406818:	d1dd      	bne.n	4067d6 <tcp_bind+0x4a>
      return ERR_BUF;
    }
  }

  /* Check if the address already is in use (on all lists) */
  for (i = 0; i < max_pcb_list; i++) {
  40681a:	69fb      	ldr	r3, [r7, #28]
  40681c:	3301      	adds	r3, #1
  40681e:	61fb      	str	r3, [r7, #28]
  406820:	69fa      	ldr	r2, [r7, #28]
  406822:	697b      	ldr	r3, [r7, #20]
  406824:	429a      	cmp	r2, r3
  406826:	dbcf      	blt.n	4067c8 <tcp_bind+0x3c>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)) {
  406828:	68bb      	ldr	r3, [r7, #8]
  40682a:	2b00      	cmp	r3, #0
  40682c:	d007      	beq.n	40683e <tcp_bind+0xb2>
  40682e:	68bb      	ldr	r3, [r7, #8]
  406830:	681b      	ldr	r3, [r3, #0]
  406832:	2b00      	cmp	r3, #0
  406834:	d003      	beq.n	40683e <tcp_bind+0xb2>
    pcb->local_ip = *ipaddr;
  406836:	68fb      	ldr	r3, [r7, #12]
  406838:	68ba      	ldr	r2, [r7, #8]
  40683a:	6812      	ldr	r2, [r2, #0]
  40683c:	601a      	str	r2, [r3, #0]
  }
  pcb->local_port = port;
  40683e:	68fb      	ldr	r3, [r7, #12]
  406840:	88fa      	ldrh	r2, [r7, #6]
  406842:	835a      	strh	r2, [r3, #26]
  TCP_REG(&tcp_bound_pcbs, pcb);
  406844:	4b08      	ldr	r3, [pc, #32]	; (406868 <tcp_bind+0xdc>)
  406846:	681a      	ldr	r2, [r3, #0]
  406848:	68fb      	ldr	r3, [r7, #12]
  40684a:	60da      	str	r2, [r3, #12]
  40684c:	4a06      	ldr	r2, [pc, #24]	; (406868 <tcp_bind+0xdc>)
  40684e:	68fb      	ldr	r3, [r7, #12]
  406850:	6013      	str	r3, [r2, #0]
  406852:	4b06      	ldr	r3, [pc, #24]	; (40686c <tcp_bind+0xe0>)
  406854:	4798      	blx	r3
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
  406856:	2300      	movs	r3, #0
}
  406858:	4618      	mov	r0, r3
  40685a:	3720      	adds	r7, #32
  40685c:	46bd      	mov	sp, r7
  40685e:	bd80      	pop	{r7, pc}
  406860:	00406a9d 	.word	0x00406a9d
  406864:	00414a68 	.word	0x00414a68
  406868:	20404990 	.word	0x20404990
  40686c:	00405211 	.word	0x00405211

00406870 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
  406870:	b480      	push	{r7}
  406872:	b085      	sub	sp, #20
  406874:	af00      	add	r7, sp, #0
  406876:	60f8      	str	r0, [r7, #12]
  406878:	60b9      	str	r1, [r7, #8]
  40687a:	4613      	mov	r3, r2
  40687c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(err);

  return ERR_ABRT;
  40687e:	f06f 0309 	mvn.w	r3, #9
}
  406882:	4618      	mov	r0, r3
  406884:	3714      	adds	r7, #20
  406886:	46bd      	mov	sp, r7
  406888:	f85d 7b04 	ldr.w	r7, [sp], #4
  40688c:	4770      	bx	lr
  40688e:	bf00      	nop

00406890 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen(tpcb);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
  406890:	b580      	push	{r7, lr}
  406892:	b084      	sub	sp, #16
  406894:	af00      	add	r7, sp, #0
  406896:	6078      	str	r0, [r7, #4]
  406898:	460b      	mov	r3, r1
  40689a:	70fb      	strb	r3, [r7, #3]
  struct tcp_pcb_listen *lpcb;

  LWIP_UNUSED_ARG(backlog);
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, return NULL);
  40689c:	687b      	ldr	r3, [r7, #4]
  40689e:	7e1b      	ldrb	r3, [r3, #24]
  4068a0:	2b00      	cmp	r3, #0
  4068a2:	d000      	beq.n	4068a6 <tcp_listen_with_backlog+0x16>
  4068a4:	e7fe      	b.n	4068a4 <tcp_listen_with_backlog+0x14>

  /* already listening? */
  if (pcb->state == LISTEN) {
  4068a6:	687b      	ldr	r3, [r7, #4]
  4068a8:	7e1b      	ldrb	r3, [r3, #24]
  4068aa:	2b01      	cmp	r3, #1
  4068ac:	d101      	bne.n	4068b2 <tcp_listen_with_backlog+0x22>
    return pcb;
  4068ae:	687b      	ldr	r3, [r7, #4]
  4068b0:	e06b      	b.n	40698a <tcp_listen_with_backlog+0xfa>
        }
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
  4068b2:	2002      	movs	r0, #2
  4068b4:	4b37      	ldr	r3, [pc, #220]	; (406994 <tcp_listen_with_backlog+0x104>)
  4068b6:	4798      	blx	r3
  4068b8:	60f8      	str	r0, [r7, #12]
  if (lpcb == NULL) {
  4068ba:	68fb      	ldr	r3, [r7, #12]
  4068bc:	2b00      	cmp	r3, #0
  4068be:	d101      	bne.n	4068c4 <tcp_listen_with_backlog+0x34>
    return NULL;
  4068c0:	2300      	movs	r3, #0
  4068c2:	e062      	b.n	40698a <tcp_listen_with_backlog+0xfa>
  }
  lpcb->callback_arg = pcb->callback_arg;
  4068c4:	687b      	ldr	r3, [r7, #4]
  4068c6:	691a      	ldr	r2, [r3, #16]
  4068c8:	68fb      	ldr	r3, [r7, #12]
  4068ca:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
  4068cc:	687b      	ldr	r3, [r7, #4]
  4068ce:	8b5a      	ldrh	r2, [r3, #26]
  4068d0:	68fb      	ldr	r3, [r7, #12]
  4068d2:	835a      	strh	r2, [r3, #26]
  lpcb->state = LISTEN;
  4068d4:	68fb      	ldr	r3, [r7, #12]
  4068d6:	2201      	movs	r2, #1
  4068d8:	761a      	strb	r2, [r3, #24]
  lpcb->prio = pcb->prio;
  4068da:	687b      	ldr	r3, [r7, #4]
  4068dc:	7e5a      	ldrb	r2, [r3, #25]
  4068de:	68fb      	ldr	r3, [r7, #12]
  4068e0:	765a      	strb	r2, [r3, #25]
  lpcb->so_options = pcb->so_options;
  4068e2:	687b      	ldr	r3, [r7, #4]
  4068e4:	7a1a      	ldrb	r2, [r3, #8]
  4068e6:	68fb      	ldr	r3, [r7, #12]
  4068e8:	721a      	strb	r2, [r3, #8]
  ip_set_option(lpcb, SOF_ACCEPTCONN);
  4068ea:	68fb      	ldr	r3, [r7, #12]
  4068ec:	7a1b      	ldrb	r3, [r3, #8]
  4068ee:	f043 0302 	orr.w	r3, r3, #2
  4068f2:	b2da      	uxtb	r2, r3
  4068f4:	68fb      	ldr	r3, [r7, #12]
  4068f6:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
  4068f8:	687b      	ldr	r3, [r7, #4]
  4068fa:	7a9a      	ldrb	r2, [r3, #10]
  4068fc:	68fb      	ldr	r3, [r7, #12]
  4068fe:	729a      	strb	r2, [r3, #10]
  lpcb->tos = pcb->tos;
  406900:	687b      	ldr	r3, [r7, #4]
  406902:	7a5a      	ldrb	r2, [r3, #9]
  406904:	68fb      	ldr	r3, [r7, #12]
  406906:	725a      	strb	r2, [r3, #9]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
  406908:	687b      	ldr	r3, [r7, #4]
  40690a:	681a      	ldr	r2, [r3, #0]
  40690c:	68fb      	ldr	r3, [r7, #12]
  40690e:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
  406910:	687b      	ldr	r3, [r7, #4]
  406912:	8b5b      	ldrh	r3, [r3, #26]
  406914:	2b00      	cmp	r3, #0
  406916:	d027      	beq.n	406968 <tcp_listen_with_backlog+0xd8>
    TCP_RMV(&tcp_bound_pcbs, pcb);
  406918:	4b1f      	ldr	r3, [pc, #124]	; (406998 <tcp_listen_with_backlog+0x108>)
  40691a:	681a      	ldr	r2, [r3, #0]
  40691c:	687b      	ldr	r3, [r7, #4]
  40691e:	429a      	cmp	r2, r3
  406920:	d105      	bne.n	40692e <tcp_listen_with_backlog+0x9e>
  406922:	4b1d      	ldr	r3, [pc, #116]	; (406998 <tcp_listen_with_backlog+0x108>)
  406924:	681b      	ldr	r3, [r3, #0]
  406926:	68db      	ldr	r3, [r3, #12]
  406928:	4a1b      	ldr	r2, [pc, #108]	; (406998 <tcp_listen_with_backlog+0x108>)
  40692a:	6013      	str	r3, [r2, #0]
  40692c:	e019      	b.n	406962 <tcp_listen_with_backlog+0xd2>
  40692e:	4b1a      	ldr	r3, [pc, #104]	; (406998 <tcp_listen_with_backlog+0x108>)
  406930:	681b      	ldr	r3, [r3, #0]
  406932:	4a1a      	ldr	r2, [pc, #104]	; (40699c <tcp_listen_with_backlog+0x10c>)
  406934:	6013      	str	r3, [r2, #0]
  406936:	e010      	b.n	40695a <tcp_listen_with_backlog+0xca>
  406938:	4b18      	ldr	r3, [pc, #96]	; (40699c <tcp_listen_with_backlog+0x10c>)
  40693a:	681b      	ldr	r3, [r3, #0]
  40693c:	68da      	ldr	r2, [r3, #12]
  40693e:	687b      	ldr	r3, [r7, #4]
  406940:	429a      	cmp	r2, r3
  406942:	d105      	bne.n	406950 <tcp_listen_with_backlog+0xc0>
  406944:	4b15      	ldr	r3, [pc, #84]	; (40699c <tcp_listen_with_backlog+0x10c>)
  406946:	681b      	ldr	r3, [r3, #0]
  406948:	687a      	ldr	r2, [r7, #4]
  40694a:	68d2      	ldr	r2, [r2, #12]
  40694c:	60da      	str	r2, [r3, #12]
  40694e:	e008      	b.n	406962 <tcp_listen_with_backlog+0xd2>
  406950:	4b12      	ldr	r3, [pc, #72]	; (40699c <tcp_listen_with_backlog+0x10c>)
  406952:	681b      	ldr	r3, [r3, #0]
  406954:	68db      	ldr	r3, [r3, #12]
  406956:	4a11      	ldr	r2, [pc, #68]	; (40699c <tcp_listen_with_backlog+0x10c>)
  406958:	6013      	str	r3, [r2, #0]
  40695a:	4b10      	ldr	r3, [pc, #64]	; (40699c <tcp_listen_with_backlog+0x10c>)
  40695c:	681b      	ldr	r3, [r3, #0]
  40695e:	2b00      	cmp	r3, #0
  406960:	d1ea      	bne.n	406938 <tcp_listen_with_backlog+0xa8>
  406962:	687b      	ldr	r3, [r7, #4]
  406964:	2200      	movs	r2, #0
  406966:	60da      	str	r2, [r3, #12]
  }
  memp_free(MEMP_TCP_PCB, pcb);
  406968:	6879      	ldr	r1, [r7, #4]
  40696a:	2001      	movs	r0, #1
  40696c:	4b0c      	ldr	r3, [pc, #48]	; (4069a0 <tcp_listen_with_backlog+0x110>)
  40696e:	4798      	blx	r3
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
  406970:	68fb      	ldr	r3, [r7, #12]
  406972:	4a0c      	ldr	r2, [pc, #48]	; (4069a4 <tcp_listen_with_backlog+0x114>)
  406974:	615a      	str	r2, [r3, #20]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  lpcb->backlog = (backlog ? backlog : 1);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
  406976:	4b0c      	ldr	r3, [pc, #48]	; (4069a8 <tcp_listen_with_backlog+0x118>)
  406978:	681a      	ldr	r2, [r3, #0]
  40697a:	68fb      	ldr	r3, [r7, #12]
  40697c:	60da      	str	r2, [r3, #12]
  40697e:	4a0a      	ldr	r2, [pc, #40]	; (4069a8 <tcp_listen_with_backlog+0x118>)
  406980:	68fb      	ldr	r3, [r7, #12]
  406982:	6013      	str	r3, [r2, #0]
  406984:	4b09      	ldr	r3, [pc, #36]	; (4069ac <tcp_listen_with_backlog+0x11c>)
  406986:	4798      	blx	r3
  return (struct tcp_pcb *)lpcb;
  406988:	68fb      	ldr	r3, [r7, #12]
}
  40698a:	4618      	mov	r0, r3
  40698c:	3710      	adds	r7, #16
  40698e:	46bd      	mov	sp, r7
  406990:	bd80      	pop	{r7, pc}
  406992:	bf00      	nop
  406994:	00405941 	.word	0x00405941
  406998:	20404990 	.word	0x20404990
  40699c:	2040498c 	.word	0x2040498c
  4069a0:	00405981 	.word	0x00405981
  4069a4:	00406871 	.word	0x00406871
  4069a8:	20404988 	.word	0x20404988
  4069ac:	00405211 	.word	0x00405211

004069b0 <tcp_update_rcv_ann_wnd>:
 *
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
  4069b0:	b480      	push	{r7}
  4069b2:	b085      	sub	sp, #20
  4069b4:	af00      	add	r7, sp, #0
  4069b6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
  4069b8:	687b      	ldr	r3, [r7, #4]
  4069ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  4069bc:	687a      	ldr	r2, [r7, #4]
  4069be:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
  4069c0:	4413      	add	r3, r2
  4069c2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
  4069c4:	687b      	ldr	r3, [r7, #4]
  4069c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4069c8:	687a      	ldr	r2, [r7, #4]
  4069ca:	8ed2      	ldrh	r2, [r2, #54]	; 0x36
  4069cc:	f240 51b4 	movw	r1, #1460	; 0x5b4
  4069d0:	428a      	cmp	r2, r1
  4069d2:	d802      	bhi.n	4069da <tcp_update_rcv_ann_wnd+0x2a>
  4069d4:	687a      	ldr	r2, [r7, #4]
  4069d6:	8ed2      	ldrh	r2, [r2, #54]	; 0x36
  4069d8:	e001      	b.n	4069de <tcp_update_rcv_ann_wnd+0x2e>
  4069da:	f240 52b4 	movw	r2, #1460	; 0x5b4
  4069de:	4413      	add	r3, r2
  4069e0:	68fa      	ldr	r2, [r7, #12]
  4069e2:	1ad3      	subs	r3, r2, r3
  4069e4:	2b00      	cmp	r3, #0
  4069e6:	db08      	blt.n	4069fa <tcp_update_rcv_ann_wnd+0x4a>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
  4069e8:	687b      	ldr	r3, [r7, #4]
  4069ea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
  4069ec:	687b      	ldr	r3, [r7, #4]
  4069ee:	85da      	strh	r2, [r3, #46]	; 0x2e
    return new_right_edge - pcb->rcv_ann_right_edge;
  4069f0:	687b      	ldr	r3, [r7, #4]
  4069f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4069f4:	68fa      	ldr	r2, [r7, #12]
  4069f6:	1ad3      	subs	r3, r2, r3
  4069f8:	e015      	b.n	406a26 <tcp_update_rcv_ann_wnd+0x76>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
  4069fa:	687b      	ldr	r3, [r7, #4]
  4069fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  4069fe:	687b      	ldr	r3, [r7, #4]
  406a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  406a02:	1ad3      	subs	r3, r2, r3
  406a04:	2b00      	cmp	r3, #0
  406a06:	dd03      	ble.n	406a10 <tcp_update_rcv_ann_wnd+0x60>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
  406a08:	687b      	ldr	r3, [r7, #4]
  406a0a:	2200      	movs	r2, #0
  406a0c:	85da      	strh	r2, [r3, #46]	; 0x2e
  406a0e:	e009      	b.n	406a24 <tcp_update_rcv_ann_wnd+0x74>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
  406a10:	687b      	ldr	r3, [r7, #4]
  406a12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  406a14:	687b      	ldr	r3, [r7, #4]
  406a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  406a18:	1ad3      	subs	r3, r2, r3
  406a1a:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
      pcb->rcv_ann_wnd = (u16_t)new_rcv_ann_wnd;
  406a1c:	68bb      	ldr	r3, [r7, #8]
  406a1e:	b29a      	uxth	r2, r3
  406a20:	687b      	ldr	r3, [r7, #4]
  406a22:	85da      	strh	r2, [r3, #46]	; 0x2e
    }
    return 0;
  406a24:	2300      	movs	r3, #0
  }
}
  406a26:	4618      	mov	r0, r3
  406a28:	3714      	adds	r7, #20
  406a2a:	46bd      	mov	sp, r7
  406a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
  406a30:	4770      	bx	lr
  406a32:	bf00      	nop

00406a34 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
  406a34:	b580      	push	{r7, lr}
  406a36:	b084      	sub	sp, #16
  406a38:	af00      	add	r7, sp, #0
  406a3a:	6078      	str	r0, [r7, #4]
  406a3c:	460b      	mov	r3, r1
  406a3e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
    pcb->state != LISTEN);
  LWIP_ASSERT("tcp_recved: len would wrap rcv_wnd\n",
              len <= 0xffff - pcb->rcv_wnd );

  pcb->rcv_wnd += len;
  406a40:	687b      	ldr	r3, [r7, #4]
  406a42:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
  406a44:	887b      	ldrh	r3, [r7, #2]
  406a46:	4413      	add	r3, r2
  406a48:	b29a      	uxth	r2, r3
  406a4a:	687b      	ldr	r3, [r7, #4]
  406a4c:	859a      	strh	r2, [r3, #44]	; 0x2c
  if (pcb->rcv_wnd > TCP_WND) {
  406a4e:	687b      	ldr	r3, [r7, #4]
  406a50:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
  406a52:	f640 3268 	movw	r2, #2920	; 0xb68
  406a56:	4293      	cmp	r3, r2
  406a58:	d903      	bls.n	406a62 <tcp_recved+0x2e>
    pcb->rcv_wnd = TCP_WND;
  406a5a:	687b      	ldr	r3, [r7, #4]
  406a5c:	f640 3268 	movw	r2, #2920	; 0xb68
  406a60:	859a      	strh	r2, [r3, #44]	; 0x2c
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
  406a62:	6878      	ldr	r0, [r7, #4]
  406a64:	4b0b      	ldr	r3, [pc, #44]	; (406a94 <tcp_recved+0x60>)
  406a66:	4798      	blx	r3
  406a68:	4603      	mov	r3, r0
  406a6a:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
  406a6c:	68fb      	ldr	r3, [r7, #12]
  406a6e:	f240 22d9 	movw	r2, #729	; 0x2d9
  406a72:	4293      	cmp	r3, r2
  406a74:	dd09      	ble.n	406a8a <tcp_recved+0x56>
    tcp_ack_now(pcb);
  406a76:	687b      	ldr	r3, [r7, #4]
  406a78:	7f9b      	ldrb	r3, [r3, #30]
  406a7a:	f043 0302 	orr.w	r3, r3, #2
  406a7e:	b2da      	uxtb	r2, r3
  406a80:	687b      	ldr	r3, [r7, #4]
  406a82:	779a      	strb	r2, [r3, #30]
    tcp_output(pcb);
  406a84:	6878      	ldr	r0, [r7, #4]
  406a86:	4b04      	ldr	r3, [pc, #16]	; (406a98 <tcp_recved+0x64>)
  406a88:	4798      	blx	r3
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: recveived %"U16_F" bytes, wnd %"U16_F" (%"U16_F").\n",
         len, pcb->rcv_wnd, TCP_WND - pcb->rcv_wnd));
}
  406a8a:	bf00      	nop
  406a8c:	3710      	adds	r7, #16
  406a8e:	46bd      	mov	sp, r7
  406a90:	bd80      	pop	{r7, pc}
  406a92:	bf00      	nop
  406a94:	004069b1 	.word	0x004069b1
  406a98:	0040a18d 	.word	0x0040a18d

00406a9c <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
  406a9c:	b480      	push	{r7}
  406a9e:	b083      	sub	sp, #12
  406aa0:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
  406aa2:	2300      	movs	r3, #0
  406aa4:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;
  
again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
  406aa6:	4b1d      	ldr	r3, [pc, #116]	; (406b1c <tcp_new_port+0x80>)
  406aa8:	881b      	ldrh	r3, [r3, #0]
  406aaa:	1c5a      	adds	r2, r3, #1
  406aac:	b291      	uxth	r1, r2
  406aae:	4a1b      	ldr	r2, [pc, #108]	; (406b1c <tcp_new_port+0x80>)
  406ab0:	8011      	strh	r1, [r2, #0]
  406ab2:	f64f 72ff 	movw	r2, #65535	; 0xffff
  406ab6:	4293      	cmp	r3, r2
  406ab8:	d103      	bne.n	406ac2 <tcp_new_port+0x26>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
  406aba:	4b18      	ldr	r3, [pc, #96]	; (406b1c <tcp_new_port+0x80>)
  406abc:	f44f 4240 	mov.w	r2, #49152	; 0xc000
  406ac0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
  406ac2:	2300      	movs	r3, #0
  406ac4:	71fb      	strb	r3, [r7, #7]
  406ac6:	e01e      	b.n	406b06 <tcp_new_port+0x6a>
    for(pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
  406ac8:	79fb      	ldrb	r3, [r7, #7]
  406aca:	4a15      	ldr	r2, [pc, #84]	; (406b20 <tcp_new_port+0x84>)
  406acc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  406ad0:	681b      	ldr	r3, [r3, #0]
  406ad2:	603b      	str	r3, [r7, #0]
  406ad4:	e011      	b.n	406afa <tcp_new_port+0x5e>
      if (pcb->local_port == tcp_port) {
  406ad6:	683b      	ldr	r3, [r7, #0]
  406ad8:	8b5a      	ldrh	r2, [r3, #26]
  406ada:	4b10      	ldr	r3, [pc, #64]	; (406b1c <tcp_new_port+0x80>)
  406adc:	881b      	ldrh	r3, [r3, #0]
  406ade:	429a      	cmp	r2, r3
  406ae0:	d108      	bne.n	406af4 <tcp_new_port+0x58>
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
  406ae2:	88bb      	ldrh	r3, [r7, #4]
  406ae4:	3301      	adds	r3, #1
  406ae6:	80bb      	strh	r3, [r7, #4]
  406ae8:	88bb      	ldrh	r3, [r7, #4]
  406aea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
  406aee:	d3da      	bcc.n	406aa6 <tcp_new_port+0xa>
          return 0;
  406af0:	2300      	movs	r3, #0
  406af2:	e00d      	b.n	406b10 <tcp_new_port+0x74>
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for(pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
  406af4:	683b      	ldr	r3, [r7, #0]
  406af6:	68db      	ldr	r3, [r3, #12]
  406af8:	603b      	str	r3, [r7, #0]
  406afa:	683b      	ldr	r3, [r7, #0]
  406afc:	2b00      	cmp	r3, #0
  406afe:	d1ea      	bne.n	406ad6 <tcp_new_port+0x3a>
again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
  406b00:	79fb      	ldrb	r3, [r7, #7]
  406b02:	3301      	adds	r3, #1
  406b04:	71fb      	strb	r3, [r7, #7]
  406b06:	79fb      	ldrb	r3, [r7, #7]
  406b08:	2b03      	cmp	r3, #3
  406b0a:	d9dd      	bls.n	406ac8 <tcp_new_port+0x2c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
  406b0c:	4b03      	ldr	r3, [pc, #12]	; (406b1c <tcp_new_port+0x80>)
  406b0e:	881b      	ldrh	r3, [r3, #0]
}
  406b10:	4618      	mov	r0, r3
  406b12:	370c      	adds	r7, #12
  406b14:	46bd      	mov	sp, r7
  406b16:	f85d 7b04 	ldr.w	r7, [sp], #4
  406b1a:	4770      	bx	lr
  406b1c:	2040000c 	.word	0x2040000c
  406b20:	00414a68 	.word	0x00414a68

00406b24 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
  406b24:	b5b0      	push	{r4, r5, r7, lr}
  406b26:	b08a      	sub	sp, #40	; 0x28
  406b28:	af02      	add	r7, sp, #8
  u16_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
  406b2a:	2300      	movs	r3, #0
  406b2c:	757b      	strb	r3, [r7, #21]

  ++tcp_ticks;
  406b2e:	4b7f      	ldr	r3, [pc, #508]	; (406d2c <tcp_slowtmr+0x208>)
  406b30:	681b      	ldr	r3, [r3, #0]
  406b32:	3301      	adds	r3, #1
  406b34:	4a7d      	ldr	r2, [pc, #500]	; (406d2c <tcp_slowtmr+0x208>)
  406b36:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
  406b38:	4b7d      	ldr	r3, [pc, #500]	; (406d30 <tcp_slowtmr+0x20c>)
  406b3a:	781b      	ldrb	r3, [r3, #0]
  406b3c:	3301      	adds	r3, #1
  406b3e:	b2da      	uxtb	r2, r3
  406b40:	4b7b      	ldr	r3, [pc, #492]	; (406d30 <tcp_slowtmr+0x20c>)
  406b42:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
  406b44:	2300      	movs	r3, #0
  406b46:	61bb      	str	r3, [r7, #24]
  pcb = tcp_active_pcbs;
  406b48:	4b7a      	ldr	r3, [pc, #488]	; (406d34 <tcp_slowtmr+0x210>)
  406b4a:	681b      	ldr	r3, [r3, #0]
  406b4c:	61fb      	str	r3, [r7, #28]
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
  406b4e:	e1d3      	b.n	406ef8 <tcp_slowtmr+0x3d4>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
    if (pcb->last_timer == tcp_timer_ctr) {
  406b50:	69fb      	ldr	r3, [r7, #28]
  406b52:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
  406b56:	4b76      	ldr	r3, [pc, #472]	; (406d30 <tcp_slowtmr+0x20c>)
  406b58:	781b      	ldrb	r3, [r3, #0]
  406b5a:	429a      	cmp	r2, r3
  406b5c:	d103      	bne.n	406b66 <tcp_slowtmr+0x42>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
  406b5e:	69fb      	ldr	r3, [r7, #28]
  406b60:	68db      	ldr	r3, [r3, #12]
  406b62:	61fb      	str	r3, [r7, #28]
      continue;
  406b64:	e1c8      	b.n	406ef8 <tcp_slowtmr+0x3d4>
    }
    pcb->last_timer = tcp_timer_ctr;
  406b66:	4b72      	ldr	r3, [pc, #456]	; (406d30 <tcp_slowtmr+0x20c>)
  406b68:	781a      	ldrb	r2, [r3, #0]
  406b6a:	69fb      	ldr	r3, [r7, #28]
  406b6c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    pcb_remove = 0;
  406b70:	2300      	movs	r3, #0
  406b72:	75fb      	strb	r3, [r7, #23]
    pcb_reset = 0;
  406b74:	2300      	movs	r3, #0
  406b76:	75bb      	strb	r3, [r7, #22]

    if (pcb->state == SYN_SENT && pcb->nrtx == TCP_SYNMAXRTX) {
  406b78:	69fb      	ldr	r3, [r7, #28]
  406b7a:	7e1b      	ldrb	r3, [r3, #24]
  406b7c:	2b02      	cmp	r3, #2
  406b7e:	d108      	bne.n	406b92 <tcp_slowtmr+0x6e>
  406b80:	69fb      	ldr	r3, [r7, #28]
  406b82:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
  406b86:	2b06      	cmp	r3, #6
  406b88:	d103      	bne.n	406b92 <tcp_slowtmr+0x6e>
      ++pcb_remove;
  406b8a:	7dfb      	ldrb	r3, [r7, #23]
  406b8c:	3301      	adds	r3, #1
  406b8e:	75fb      	strb	r3, [r7, #23]
  406b90:	e093      	b.n	406cba <tcp_slowtmr+0x196>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx == TCP_MAXRTX) {
  406b92:	69fb      	ldr	r3, [r7, #28]
  406b94:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
  406b98:	2b0c      	cmp	r3, #12
  406b9a:	d103      	bne.n	406ba4 <tcp_slowtmr+0x80>
      ++pcb_remove;
  406b9c:	7dfb      	ldrb	r3, [r7, #23]
  406b9e:	3301      	adds	r3, #1
  406ba0:	75fb      	strb	r3, [r7, #23]
  406ba2:	e08a      	b.n	406cba <tcp_slowtmr+0x196>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
  406ba4:	69fb      	ldr	r3, [r7, #28]
  406ba6:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
  406baa:	2b00      	cmp	r3, #0
  406bac:	d027      	beq.n	406bfe <tcp_slowtmr+0xda>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        pcb->persist_cnt++;
  406bae:	69fb      	ldr	r3, [r7, #28]
  406bb0:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
  406bb4:	3301      	adds	r3, #1
  406bb6:	b2da      	uxtb	r2, r3
  406bb8:	69fb      	ldr	r3, [r7, #28]
  406bba:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        if (pcb->persist_cnt >= tcp_persist_backoff[pcb->persist_backoff-1]) {
  406bbe:	69fb      	ldr	r3, [r7, #28]
  406bc0:	f893 2094 	ldrb.w	r2, [r3, #148]	; 0x94
  406bc4:	69fb      	ldr	r3, [r7, #28]
  406bc6:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
  406bca:	3b01      	subs	r3, #1
  406bcc:	495a      	ldr	r1, [pc, #360]	; (406d38 <tcp_slowtmr+0x214>)
  406bce:	5ccb      	ldrb	r3, [r1, r3]
  406bd0:	429a      	cmp	r2, r3
  406bd2:	d372      	bcc.n	406cba <tcp_slowtmr+0x196>
          pcb->persist_cnt = 0;
  406bd4:	69fb      	ldr	r3, [r7, #28]
  406bd6:	2200      	movs	r2, #0
  406bd8:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
  406bdc:	69fb      	ldr	r3, [r7, #28]
  406bde:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
  406be2:	2b06      	cmp	r3, #6
  406be4:	d807      	bhi.n	406bf6 <tcp_slowtmr+0xd2>
            pcb->persist_backoff++;
  406be6:	69fb      	ldr	r3, [r7, #28]
  406be8:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
  406bec:	3301      	adds	r3, #1
  406bee:	b2da      	uxtb	r2, r3
  406bf0:	69fb      	ldr	r3, [r7, #28]
  406bf2:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
          }
          tcp_zero_window_probe(pcb);
  406bf6:	69f8      	ldr	r0, [r7, #28]
  406bf8:	4b50      	ldr	r3, [pc, #320]	; (406d3c <tcp_slowtmr+0x218>)
  406bfa:	4798      	blx	r3
  406bfc:	e05d      	b.n	406cba <tcp_slowtmr+0x196>
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if(pcb->rtime >= 0) {
  406bfe:	69fb      	ldr	r3, [r7, #28]
  406c00:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
  406c04:	2b00      	cmp	r3, #0
  406c06:	db08      	blt.n	406c1a <tcp_slowtmr+0xf6>
          ++pcb->rtime;
  406c08:	69fb      	ldr	r3, [r7, #28]
  406c0a:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
  406c0e:	b29b      	uxth	r3, r3
  406c10:	3301      	adds	r3, #1
  406c12:	b29b      	uxth	r3, r3
  406c14:	b21a      	sxth	r2, r3
  406c16:	69fb      	ldr	r3, [r7, #28]
  406c18:	869a      	strh	r2, [r3, #52]	; 0x34
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
  406c1a:	69fb      	ldr	r3, [r7, #28]
  406c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  406c1e:	2b00      	cmp	r3, #0
  406c20:	d04b      	beq.n	406cba <tcp_slowtmr+0x196>
  406c22:	69fb      	ldr	r3, [r7, #28]
  406c24:	f9b3 2034 	ldrsh.w	r2, [r3, #52]	; 0x34
  406c28:	69fb      	ldr	r3, [r7, #28]
  406c2a:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
  406c2e:	429a      	cmp	r2, r3
  406c30:	db43      	blt.n	406cba <tcp_slowtmr+0x196>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
  406c32:	69fb      	ldr	r3, [r7, #28]
  406c34:	7e1b      	ldrb	r3, [r3, #24]
  406c36:	2b02      	cmp	r3, #2
  406c38:	d014      	beq.n	406c64 <tcp_slowtmr+0x140>
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[pcb->nrtx];
  406c3a:	69fb      	ldr	r3, [r7, #28]
  406c3c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
  406c40:	10db      	asrs	r3, r3, #3
  406c42:	b21b      	sxth	r3, r3
  406c44:	461a      	mov	r2, r3
  406c46:	69fb      	ldr	r3, [r7, #28]
  406c48:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
  406c4c:	4413      	add	r3, r2
  406c4e:	69fa      	ldr	r2, [r7, #28]
  406c50:	f892 2046 	ldrb.w	r2, [r2, #70]	; 0x46
  406c54:	4611      	mov	r1, r2
  406c56:	4a3a      	ldr	r2, [pc, #232]	; (406d40 <tcp_slowtmr+0x21c>)
  406c58:	5c52      	ldrb	r2, [r2, r1]
  406c5a:	4093      	lsls	r3, r2
  406c5c:	b21a      	sxth	r2, r3
  406c5e:	69fb      	ldr	r3, [r7, #28]
  406c60:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
  406c64:	69fb      	ldr	r3, [r7, #28]
  406c66:	2200      	movs	r2, #0
  406c68:	869a      	strh	r2, [r3, #52]	; 0x34

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
  406c6a:	69fb      	ldr	r3, [r7, #28]
  406c6c:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
  406c70:	69fb      	ldr	r3, [r7, #28]
  406c72:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
  406c76:	4293      	cmp	r3, r2
  406c78:	bf28      	it	cs
  406c7a:	4613      	movcs	r3, r2
  406c7c:	827b      	strh	r3, [r7, #18]
          pcb->ssthresh = eff_wnd >> 1;
  406c7e:	8a7b      	ldrh	r3, [r7, #18]
  406c80:	085b      	lsrs	r3, r3, #1
  406c82:	b29a      	uxth	r2, r3
  406c84:	69fb      	ldr	r3, [r7, #28]
  406c86:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
          if (pcb->ssthresh < (pcb->mss << 1)) {
  406c8a:	69fb      	ldr	r3, [r7, #28]
  406c8c:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
  406c90:	461a      	mov	r2, r3
  406c92:	69fb      	ldr	r3, [r7, #28]
  406c94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
  406c96:	005b      	lsls	r3, r3, #1
  406c98:	429a      	cmp	r2, r3
  406c9a:	da06      	bge.n	406caa <tcp_slowtmr+0x186>
            pcb->ssthresh = (pcb->mss << 1);
  406c9c:	69fb      	ldr	r3, [r7, #28]
  406c9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
  406ca0:	005b      	lsls	r3, r3, #1
  406ca2:	b29a      	uxth	r2, r3
  406ca4:	69fb      	ldr	r3, [r7, #28]
  406ca6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
          }
          pcb->cwnd = pcb->mss;
  406caa:	69fb      	ldr	r3, [r7, #28]
  406cac:	8eda      	ldrh	r2, [r3, #54]	; 0x36
  406cae:	69fb      	ldr	r3, [r7, #28]
  406cb0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
                                       " ssthresh %"U16_F"\n",
                                       pcb->cwnd, pcb->ssthresh));
 
          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
  406cb4:	69f8      	ldr	r0, [r7, #28]
  406cb6:	4b23      	ldr	r3, [pc, #140]	; (406d44 <tcp_slowtmr+0x220>)
  406cb8:	4798      	blx	r3
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
  406cba:	69fb      	ldr	r3, [r7, #28]
  406cbc:	7e1b      	ldrb	r3, [r3, #24]
  406cbe:	2b06      	cmp	r3, #6
  406cc0:	d10f      	bne.n	406ce2 <tcp_slowtmr+0x1be>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
  406cc2:	69fb      	ldr	r3, [r7, #28]
  406cc4:	7f9b      	ldrb	r3, [r3, #30]
  406cc6:	f003 0310 	and.w	r3, r3, #16
  406cca:	2b00      	cmp	r3, #0
  406ccc:	d009      	beq.n	406ce2 <tcp_slowtmr+0x1be>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
  406cce:	4b17      	ldr	r3, [pc, #92]	; (406d2c <tcp_slowtmr+0x208>)
  406cd0:	681a      	ldr	r2, [r3, #0]
  406cd2:	69fb      	ldr	r3, [r7, #28]
  406cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  406cd6:	1ad3      	subs	r3, r2, r3
  406cd8:	2b28      	cmp	r3, #40	; 0x28
  406cda:	d902      	bls.n	406ce2 <tcp_slowtmr+0x1be>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
  406cdc:	7dfb      	ldrb	r3, [r7, #23]
  406cde:	3301      	adds	r3, #1
  406ce0:	75fb      	strb	r3, [r7, #23]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if(ip_get_option(pcb, SOF_KEEPALIVE) &&
  406ce2:	69fb      	ldr	r3, [r7, #28]
  406ce4:	7a1b      	ldrb	r3, [r3, #8]
  406ce6:	f003 0308 	and.w	r3, r3, #8
  406cea:	2b00      	cmp	r3, #0
  406cec:	d051      	beq.n	406d92 <tcp_slowtmr+0x26e>
       ((pcb->state == ESTABLISHED) ||
  406cee:	69fb      	ldr	r3, [r7, #28]
  406cf0:	7e1b      	ldrb	r3, [r3, #24]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if(ip_get_option(pcb, SOF_KEEPALIVE) &&
  406cf2:	2b04      	cmp	r3, #4
  406cf4:	d003      	beq.n	406cfe <tcp_slowtmr+0x1da>
       ((pcb->state == ESTABLISHED) ||
        (pcb->state == CLOSE_WAIT))) {
  406cf6:	69fb      	ldr	r3, [r7, #28]
  406cf8:	7e1b      	ldrb	r3, [r3, #24]
      }
    }

    /* Check if KEEPALIVE should be sent */
    if(ip_get_option(pcb, SOF_KEEPALIVE) &&
       ((pcb->state == ESTABLISHED) ||
  406cfa:	2b07      	cmp	r3, #7
  406cfc:	d149      	bne.n	406d92 <tcp_slowtmr+0x26e>
        (pcb->state == CLOSE_WAIT))) {
      if((u32_t)(tcp_ticks - pcb->tmr) >
  406cfe:	4b0b      	ldr	r3, [pc, #44]	; (406d2c <tcp_slowtmr+0x208>)
  406d00:	681a      	ldr	r2, [r3, #0]
  406d02:	69fb      	ldr	r3, [r7, #28]
  406d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  406d06:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
  406d08:	69fb      	ldr	r3, [r7, #28]
  406d0a:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
  406d0e:	4b0e      	ldr	r3, [pc, #56]	; (406d48 <tcp_slowtmr+0x224>)
  406d10:	440b      	add	r3, r1
  406d12:	490e      	ldr	r1, [pc, #56]	; (406d4c <tcp_slowtmr+0x228>)
  406d14:	fba1 1303 	umull	r1, r3, r1, r3
  406d18:	095b      	lsrs	r3, r3, #5

    /* Check if KEEPALIVE should be sent */
    if(ip_get_option(pcb, SOF_KEEPALIVE) &&
       ((pcb->state == ESTABLISHED) ||
        (pcb->state == CLOSE_WAIT))) {
      if((u32_t)(tcp_ticks - pcb->tmr) >
  406d1a:	429a      	cmp	r2, r3
  406d1c:	d918      	bls.n	406d50 <tcp_slowtmr+0x22c>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to %"U16_F".%"U16_F".%"U16_F".%"U16_F".\n",
                                ip4_addr1_16(&pcb->remote_ip), ip4_addr2_16(&pcb->remote_ip),
                                ip4_addr3_16(&pcb->remote_ip), ip4_addr4_16(&pcb->remote_ip)));
        
        ++pcb_remove;
  406d1e:	7dfb      	ldrb	r3, [r7, #23]
  406d20:	3301      	adds	r3, #1
  406d22:	75fb      	strb	r3, [r7, #23]
        ++pcb_reset;
  406d24:	7dbb      	ldrb	r3, [r7, #22]
  406d26:	3301      	adds	r3, #1
  406d28:	75bb      	strb	r3, [r7, #22]
  406d2a:	e032      	b.n	406d92 <tcp_slowtmr+0x26e>
  406d2c:	20404984 	.word	0x20404984
  406d30:	204025a9 	.word	0x204025a9
  406d34:	20404980 	.word	0x20404980
  406d38:	00414a60 	.word	0x00414a60
  406d3c:	0040a8f1 	.word	0x0040a8f1
  406d40:	00414a50 	.word	0x00414a50
  406d44:	0040a6b9 	.word	0x0040a6b9
  406d48:	000a4cb8 	.word	0x000a4cb8
  406d4c:	10624dd3 	.word	0x10624dd3
      }
      else if((u32_t)(tcp_ticks - pcb->tmr) > 
  406d50:	4b88      	ldr	r3, [pc, #544]	; (406f74 <tcp_slowtmr+0x450>)
  406d52:	681a      	ldr	r2, [r3, #0]
  406d54:	69fb      	ldr	r3, [r7, #28]
  406d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  406d58:	1ad2      	subs	r2, r2, r3
              (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
  406d5a:	69fb      	ldr	r3, [r7, #28]
  406d5c:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
  406d60:	69fb      	ldr	r3, [r7, #28]
  406d62:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
  406d66:	4618      	mov	r0, r3
  406d68:	4b83      	ldr	r3, [pc, #524]	; (406f78 <tcp_slowtmr+0x454>)
  406d6a:	fb03 f300 	mul.w	r3, r3, r0
  406d6e:	440b      	add	r3, r1
              / TCP_SLOW_INTERVAL)
  406d70:	4982      	ldr	r1, [pc, #520]	; (406f7c <tcp_slowtmr+0x458>)
  406d72:	fba1 1303 	umull	r1, r3, r1, r3
  406d76:	095b      	lsrs	r3, r3, #5
                                ip4_addr3_16(&pcb->remote_ip), ip4_addr4_16(&pcb->remote_ip)));
        
        ++pcb_remove;
        ++pcb_reset;
      }
      else if((u32_t)(tcp_ticks - pcb->tmr) > 
  406d78:	429a      	cmp	r2, r3
  406d7a:	d90a      	bls.n	406d92 <tcp_slowtmr+0x26e>
              (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
              / TCP_SLOW_INTERVAL)
      {
        tcp_keepalive(pcb);
  406d7c:	69f8      	ldr	r0, [r7, #28]
  406d7e:	4b80      	ldr	r3, [pc, #512]	; (406f80 <tcp_slowtmr+0x45c>)
  406d80:	4798      	blx	r3
        pcb->keep_cnt_sent++;
  406d82:	69fb      	ldr	r3, [r7, #28]
  406d84:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
  406d88:	3301      	adds	r3, #1
  406d8a:	b2da      	uxtb	r2, r3
  406d8c:	69fb      	ldr	r3, [r7, #28]
  406d8e:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
  406d92:	69fb      	ldr	r3, [r7, #28]
  406d94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  406d96:	2b00      	cmp	r3, #0
  406d98:	d016      	beq.n	406dc8 <tcp_slowtmr+0x2a4>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
  406d9a:	4b76      	ldr	r3, [pc, #472]	; (406f74 <tcp_slowtmr+0x450>)
  406d9c:	681a      	ldr	r2, [r3, #0]
  406d9e:	69fb      	ldr	r3, [r7, #28]
  406da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  406da2:	1ad2      	subs	r2, r2, r3
  406da4:	69fb      	ldr	r3, [r7, #28]
  406da6:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
  406daa:	4619      	mov	r1, r3
  406dac:	460b      	mov	r3, r1
  406dae:	005b      	lsls	r3, r3, #1
  406db0:	440b      	add	r3, r1
  406db2:	005b      	lsls	r3, r3, #1

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
  406db4:	429a      	cmp	r2, r3
  406db6:	d307      	bcc.n	406dc8 <tcp_slowtmr+0x2a4>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
      tcp_segs_free(pcb->ooseq);
  406db8:	69fb      	ldr	r3, [r7, #28]
  406dba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  406dbc:	4618      	mov	r0, r3
  406dbe:	4b71      	ldr	r3, [pc, #452]	; (406f84 <tcp_slowtmr+0x460>)
  406dc0:	4798      	blx	r3
      pcb->ooseq = NULL;
  406dc2:	69fb      	ldr	r3, [r7, #28]
  406dc4:	2200      	movs	r2, #0
  406dc6:	675a      	str	r2, [r3, #116]	; 0x74
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
  406dc8:	69fb      	ldr	r3, [r7, #28]
  406dca:	7e1b      	ldrb	r3, [r3, #24]
  406dcc:	2b03      	cmp	r3, #3
  406dce:	d109      	bne.n	406de4 <tcp_slowtmr+0x2c0>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
  406dd0:	4b68      	ldr	r3, [pc, #416]	; (406f74 <tcp_slowtmr+0x450>)
  406dd2:	681a      	ldr	r2, [r3, #0]
  406dd4:	69fb      	ldr	r3, [r7, #28]
  406dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  406dd8:	1ad3      	subs	r3, r2, r3
  406dda:	2b28      	cmp	r3, #40	; 0x28
  406ddc:	d902      	bls.n	406de4 <tcp_slowtmr+0x2c0>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
  406dde:	7dfb      	ldrb	r3, [r7, #23]
  406de0:	3301      	adds	r3, #1
  406de2:	75fb      	strb	r3, [r7, #23]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
  406de4:	69fb      	ldr	r3, [r7, #28]
  406de6:	7e1b      	ldrb	r3, [r3, #24]
  406de8:	2b09      	cmp	r3, #9
  406dea:	d109      	bne.n	406e00 <tcp_slowtmr+0x2dc>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
  406dec:	4b61      	ldr	r3, [pc, #388]	; (406f74 <tcp_slowtmr+0x450>)
  406dee:	681a      	ldr	r2, [r3, #0]
  406df0:	69fb      	ldr	r3, [r7, #28]
  406df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  406df4:	1ad3      	subs	r3, r2, r3
  406df6:	2bf0      	cmp	r3, #240	; 0xf0
  406df8:	d902      	bls.n	406e00 <tcp_slowtmr+0x2dc>
        ++pcb_remove;
  406dfa:	7dfb      	ldrb	r3, [r7, #23]
  406dfc:	3301      	adds	r3, #1
  406dfe:	75fb      	strb	r3, [r7, #23]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
  406e00:	7dfb      	ldrb	r3, [r7, #23]
  406e02:	2b00      	cmp	r3, #0
  406e04:	d042      	beq.n	406e8c <tcp_slowtmr+0x368>
      struct tcp_pcb *pcb2;
      tcp_err_fn err_fn;
      void *err_arg;
      tcp_pcb_purge(pcb);
  406e06:	69f8      	ldr	r0, [r7, #28]
  406e08:	4b5f      	ldr	r3, [pc, #380]	; (406f88 <tcp_slowtmr+0x464>)
  406e0a:	4798      	blx	r3
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
  406e0c:	69bb      	ldr	r3, [r7, #24]
  406e0e:	2b00      	cmp	r3, #0
  406e10:	d004      	beq.n	406e1c <tcp_slowtmr+0x2f8>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
        prev->next = pcb->next;
  406e12:	69fb      	ldr	r3, [r7, #28]
  406e14:	68da      	ldr	r2, [r3, #12]
  406e16:	69bb      	ldr	r3, [r7, #24]
  406e18:	60da      	str	r2, [r3, #12]
  406e1a:	e003      	b.n	406e24 <tcp_slowtmr+0x300>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
        tcp_active_pcbs = pcb->next;
  406e1c:	69fb      	ldr	r3, [r7, #28]
  406e1e:	68db      	ldr	r3, [r3, #12]
  406e20:	4a5a      	ldr	r2, [pc, #360]	; (406f8c <tcp_slowtmr+0x468>)
  406e22:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
  406e24:	7dbb      	ldrb	r3, [r7, #22]
  406e26:	2b00      	cmp	r3, #0
  406e28:	d010      	beq.n	406e4c <tcp_slowtmr+0x328>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
  406e2a:	69fb      	ldr	r3, [r7, #28]
  406e2c:	6d18      	ldr	r0, [r3, #80]	; 0x50
  406e2e:	69fb      	ldr	r3, [r7, #28]
  406e30:	6a99      	ldr	r1, [r3, #40]	; 0x28
  406e32:	69fc      	ldr	r4, [r7, #28]
  406e34:	69fb      	ldr	r3, [r7, #28]
  406e36:	1d1d      	adds	r5, r3, #4
  406e38:	69fb      	ldr	r3, [r7, #28]
  406e3a:	8b5b      	ldrh	r3, [r3, #26]
  406e3c:	69fa      	ldr	r2, [r7, #28]
  406e3e:	8b92      	ldrh	r2, [r2, #28]
  406e40:	9201      	str	r2, [sp, #4]
  406e42:	9300      	str	r3, [sp, #0]
  406e44:	462b      	mov	r3, r5
  406e46:	4622      	mov	r2, r4
  406e48:	4c51      	ldr	r4, [pc, #324]	; (406f90 <tcp_slowtmr+0x46c>)
  406e4a:	47a0      	blx	r4
          pcb->local_port, pcb->remote_port);
      }

      err_fn = pcb->errf;
  406e4c:	69fb      	ldr	r3, [r7, #28]
  406e4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
  406e52:	60fb      	str	r3, [r7, #12]
      err_arg = pcb->callback_arg;
  406e54:	69fb      	ldr	r3, [r7, #28]
  406e56:	691b      	ldr	r3, [r3, #16]
  406e58:	60bb      	str	r3, [r7, #8]
      pcb2 = pcb;
  406e5a:	69fb      	ldr	r3, [r7, #28]
  406e5c:	607b      	str	r3, [r7, #4]
      pcb = pcb->next;
  406e5e:	69fb      	ldr	r3, [r7, #28]
  406e60:	68db      	ldr	r3, [r3, #12]
  406e62:	61fb      	str	r3, [r7, #28]
      memp_free(MEMP_TCP_PCB, pcb2);
  406e64:	6879      	ldr	r1, [r7, #4]
  406e66:	2001      	movs	r0, #1
  406e68:	4b4a      	ldr	r3, [pc, #296]	; (406f94 <tcp_slowtmr+0x470>)
  406e6a:	4798      	blx	r3

      tcp_active_pcbs_changed = 0;
  406e6c:	4b4a      	ldr	r3, [pc, #296]	; (406f98 <tcp_slowtmr+0x474>)
  406e6e:	2200      	movs	r2, #0
  406e70:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(err_fn, err_arg, ERR_ABRT);
  406e72:	68fb      	ldr	r3, [r7, #12]
  406e74:	2b00      	cmp	r3, #0
  406e76:	d004      	beq.n	406e82 <tcp_slowtmr+0x35e>
  406e78:	68fb      	ldr	r3, [r7, #12]
  406e7a:	f06f 0109 	mvn.w	r1, #9
  406e7e:	68b8      	ldr	r0, [r7, #8]
  406e80:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
  406e82:	4b45      	ldr	r3, [pc, #276]	; (406f98 <tcp_slowtmr+0x474>)
  406e84:	781b      	ldrb	r3, [r3, #0]
  406e86:	2b00      	cmp	r3, #0
  406e88:	d036      	beq.n	406ef8 <tcp_slowtmr+0x3d4>
        goto tcp_slowtmr_start;
  406e8a:	e65b      	b.n	406b44 <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
  406e8c:	69fb      	ldr	r3, [r7, #28]
  406e8e:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
  406e90:	69fb      	ldr	r3, [r7, #28]
  406e92:	68db      	ldr	r3, [r3, #12]
  406e94:	61fb      	str	r3, [r7, #28]

      /* We check if we should poll the connection. */
      ++prev->polltmr;
  406e96:	69bb      	ldr	r3, [r7, #24]
  406e98:	7fdb      	ldrb	r3, [r3, #31]
  406e9a:	3301      	adds	r3, #1
  406e9c:	b2da      	uxtb	r2, r3
  406e9e:	69bb      	ldr	r3, [r7, #24]
  406ea0:	77da      	strb	r2, [r3, #31]
      if (prev->polltmr >= prev->pollinterval) {
  406ea2:	69bb      	ldr	r3, [r7, #24]
  406ea4:	7fda      	ldrb	r2, [r3, #31]
  406ea6:	69bb      	ldr	r3, [r7, #24]
  406ea8:	f893 3020 	ldrb.w	r3, [r3, #32]
  406eac:	429a      	cmp	r2, r3
  406eae:	d323      	bcc.n	406ef8 <tcp_slowtmr+0x3d4>
        prev->polltmr = 0;
  406eb0:	69bb      	ldr	r3, [r7, #24]
  406eb2:	2200      	movs	r2, #0
  406eb4:	77da      	strb	r2, [r3, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
  406eb6:	4b38      	ldr	r3, [pc, #224]	; (406f98 <tcp_slowtmr+0x474>)
  406eb8:	2200      	movs	r2, #0
  406eba:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
  406ebc:	69bb      	ldr	r3, [r7, #24]
  406ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
  406ec2:	2b00      	cmp	r3, #0
  406ec4:	d00a      	beq.n	406edc <tcp_slowtmr+0x3b8>
  406ec6:	69bb      	ldr	r3, [r7, #24]
  406ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
  406ecc:	69ba      	ldr	r2, [r7, #24]
  406ece:	6912      	ldr	r2, [r2, #16]
  406ed0:	69b9      	ldr	r1, [r7, #24]
  406ed2:	4610      	mov	r0, r2
  406ed4:	4798      	blx	r3
  406ed6:	4603      	mov	r3, r0
  406ed8:	757b      	strb	r3, [r7, #21]
  406eda:	e001      	b.n	406ee0 <tcp_slowtmr+0x3bc>
  406edc:	2300      	movs	r3, #0
  406ede:	757b      	strb	r3, [r7, #21]
        if (tcp_active_pcbs_changed) {
  406ee0:	4b2d      	ldr	r3, [pc, #180]	; (406f98 <tcp_slowtmr+0x474>)
  406ee2:	781b      	ldrb	r3, [r3, #0]
  406ee4:	2b00      	cmp	r3, #0
  406ee6:	d000      	beq.n	406eea <tcp_slowtmr+0x3c6>
          goto tcp_slowtmr_start;
  406ee8:	e62c      	b.n	406b44 <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
  406eea:	f997 3015 	ldrsb.w	r3, [r7, #21]
  406eee:	2b00      	cmp	r3, #0
  406ef0:	d102      	bne.n	406ef8 <tcp_slowtmr+0x3d4>
          tcp_output(prev);
  406ef2:	69b8      	ldr	r0, [r7, #24]
  406ef4:	4b29      	ldr	r3, [pc, #164]	; (406f9c <tcp_slowtmr+0x478>)
  406ef6:	4798      	blx	r3
  prev = NULL;
  pcb = tcp_active_pcbs;
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
  406ef8:	69fb      	ldr	r3, [r7, #28]
  406efa:	2b00      	cmp	r3, #0
  406efc:	f47f ae28 	bne.w	406b50 <tcp_slowtmr+0x2c>
    }
  }

  
  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
  406f00:	2300      	movs	r3, #0
  406f02:	61bb      	str	r3, [r7, #24]
  pcb = tcp_tw_pcbs;
  406f04:	4b26      	ldr	r3, [pc, #152]	; (406fa0 <tcp_slowtmr+0x47c>)
  406f06:	681b      	ldr	r3, [r3, #0]
  406f08:	61fb      	str	r3, [r7, #28]
  while (pcb != NULL) {
  406f0a:	e02c      	b.n	406f66 <tcp_slowtmr+0x442>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
    pcb_remove = 0;
  406f0c:	2300      	movs	r3, #0
  406f0e:	75fb      	strb	r3, [r7, #23]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
  406f10:	4b18      	ldr	r3, [pc, #96]	; (406f74 <tcp_slowtmr+0x450>)
  406f12:	681a      	ldr	r2, [r3, #0]
  406f14:	69fb      	ldr	r3, [r7, #28]
  406f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  406f18:	1ad3      	subs	r3, r2, r3
  406f1a:	2bf0      	cmp	r3, #240	; 0xf0
  406f1c:	d902      	bls.n	406f24 <tcp_slowtmr+0x400>
      ++pcb_remove;
  406f1e:	7dfb      	ldrb	r3, [r7, #23]
  406f20:	3301      	adds	r3, #1
  406f22:	75fb      	strb	r3, [r7, #23]
    }
    


    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
  406f24:	7dfb      	ldrb	r3, [r7, #23]
  406f26:	2b00      	cmp	r3, #0
  406f28:	d018      	beq.n	406f5c <tcp_slowtmr+0x438>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
  406f2a:	69f8      	ldr	r0, [r7, #28]
  406f2c:	4b16      	ldr	r3, [pc, #88]	; (406f88 <tcp_slowtmr+0x464>)
  406f2e:	4798      	blx	r3
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
  406f30:	69bb      	ldr	r3, [r7, #24]
  406f32:	2b00      	cmp	r3, #0
  406f34:	d004      	beq.n	406f40 <tcp_slowtmr+0x41c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
        prev->next = pcb->next;
  406f36:	69fb      	ldr	r3, [r7, #28]
  406f38:	68da      	ldr	r2, [r3, #12]
  406f3a:	69bb      	ldr	r3, [r7, #24]
  406f3c:	60da      	str	r2, [r3, #12]
  406f3e:	e003      	b.n	406f48 <tcp_slowtmr+0x424>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
        tcp_tw_pcbs = pcb->next;
  406f40:	69fb      	ldr	r3, [r7, #28]
  406f42:	68db      	ldr	r3, [r3, #12]
  406f44:	4a16      	ldr	r2, [pc, #88]	; (406fa0 <tcp_slowtmr+0x47c>)
  406f46:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
  406f48:	69fb      	ldr	r3, [r7, #28]
  406f4a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
  406f4c:	69fb      	ldr	r3, [r7, #28]
  406f4e:	68db      	ldr	r3, [r3, #12]
  406f50:	61fb      	str	r3, [r7, #28]
      memp_free(MEMP_TCP_PCB, pcb2);
  406f52:	6839      	ldr	r1, [r7, #0]
  406f54:	2001      	movs	r0, #1
  406f56:	4b0f      	ldr	r3, [pc, #60]	; (406f94 <tcp_slowtmr+0x470>)
  406f58:	4798      	blx	r3
  406f5a:	e004      	b.n	406f66 <tcp_slowtmr+0x442>
    } else {
      prev = pcb;
  406f5c:	69fb      	ldr	r3, [r7, #28]
  406f5e:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
  406f60:	69fb      	ldr	r3, [r7, #28]
  406f62:	68db      	ldr	r3, [r3, #12]
  406f64:	61fb      	str	r3, [r7, #28]

  
  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
  pcb = tcp_tw_pcbs;
  while (pcb != NULL) {
  406f66:	69fb      	ldr	r3, [r7, #28]
  406f68:	2b00      	cmp	r3, #0
  406f6a:	d1cf      	bne.n	406f0c <tcp_slowtmr+0x3e8>
    } else {
      prev = pcb;
      pcb = pcb->next;
    }
  }
}
  406f6c:	bf00      	nop
  406f6e:	3720      	adds	r7, #32
  406f70:	46bd      	mov	sp, r7
  406f72:	bdb0      	pop	{r4, r5, r7, pc}
  406f74:	20404984 	.word	0x20404984
  406f78:	000124f8 	.word	0x000124f8
  406f7c:	10624dd3 	.word	0x10624dd3
  406f80:	0040a869 	.word	0x0040a869
  406f84:	00407125 	.word	0x00407125
  406f88:	00407525 	.word	0x00407525
  406f8c:	20404980 	.word	0x20404980
  406f90:	0040a5cd 	.word	0x0040a5cd
  406f94:	00405981 	.word	0x00405981
  406f98:	2040497c 	.word	0x2040497c
  406f9c:	0040a18d 	.word	0x0040a18d
  406fa0:	20404994 	.word	0x20404994

00406fa4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
  406fa4:	b580      	push	{r7, lr}
  406fa6:	b082      	sub	sp, #8
  406fa8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
  406faa:	4b24      	ldr	r3, [pc, #144]	; (40703c <tcp_fasttmr+0x98>)
  406fac:	781b      	ldrb	r3, [r3, #0]
  406fae:	3301      	adds	r3, #1
  406fb0:	b2da      	uxtb	r2, r3
  406fb2:	4b22      	ldr	r3, [pc, #136]	; (40703c <tcp_fasttmr+0x98>)
  406fb4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
  406fb6:	4b22      	ldr	r3, [pc, #136]	; (407040 <tcp_fasttmr+0x9c>)
  406fb8:	681b      	ldr	r3, [r3, #0]
  406fba:	607b      	str	r3, [r7, #4]

  while(pcb != NULL) {
  406fbc:	e036      	b.n	40702c <tcp_fasttmr+0x88>
    if (pcb->last_timer != tcp_timer_ctr) {
  406fbe:	687b      	ldr	r3, [r7, #4]
  406fc0:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
  406fc4:	4b1d      	ldr	r3, [pc, #116]	; (40703c <tcp_fasttmr+0x98>)
  406fc6:	781b      	ldrb	r3, [r3, #0]
  406fc8:	429a      	cmp	r2, r3
  406fca:	d02f      	beq.n	40702c <tcp_fasttmr+0x88>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
  406fcc:	4b1b      	ldr	r3, [pc, #108]	; (40703c <tcp_fasttmr+0x98>)
  406fce:	781a      	ldrb	r2, [r3, #0]
  406fd0:	687b      	ldr	r3, [r7, #4]
  406fd2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
  406fd6:	687b      	ldr	r3, [r7, #4]
  406fd8:	7f9b      	ldrb	r3, [r3, #30]
  406fda:	f003 0301 	and.w	r3, r3, #1
  406fde:	2b00      	cmp	r3, #0
  406fe0:	d010      	beq.n	407004 <tcp_fasttmr+0x60>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
  406fe2:	687b      	ldr	r3, [r7, #4]
  406fe4:	7f9b      	ldrb	r3, [r3, #30]
  406fe6:	f043 0302 	orr.w	r3, r3, #2
  406fea:	b2da      	uxtb	r2, r3
  406fec:	687b      	ldr	r3, [r7, #4]
  406fee:	779a      	strb	r2, [r3, #30]
        tcp_output(pcb);
  406ff0:	6878      	ldr	r0, [r7, #4]
  406ff2:	4b14      	ldr	r3, [pc, #80]	; (407044 <tcp_fasttmr+0xa0>)
  406ff4:	4798      	blx	r3
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
  406ff6:	687b      	ldr	r3, [r7, #4]
  406ff8:	7f9b      	ldrb	r3, [r3, #30]
  406ffa:	f023 0303 	bic.w	r3, r3, #3
  406ffe:	b2da      	uxtb	r2, r3
  407000:	687b      	ldr	r3, [r7, #4]
  407002:	779a      	strb	r2, [r3, #30]
      }

      next = pcb->next;
  407004:	687b      	ldr	r3, [r7, #4]
  407006:	68db      	ldr	r3, [r3, #12]
  407008:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
  40700a:	687b      	ldr	r3, [r7, #4]
  40700c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
  40700e:	2b00      	cmp	r3, #0
  407010:	d00a      	beq.n	407028 <tcp_fasttmr+0x84>
        tcp_active_pcbs_changed = 0;
  407012:	4b0d      	ldr	r3, [pc, #52]	; (407048 <tcp_fasttmr+0xa4>)
  407014:	2200      	movs	r2, #0
  407016:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
  407018:	6878      	ldr	r0, [r7, #4]
  40701a:	4b0c      	ldr	r3, [pc, #48]	; (40704c <tcp_fasttmr+0xa8>)
  40701c:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
  40701e:	4b0a      	ldr	r3, [pc, #40]	; (407048 <tcp_fasttmr+0xa4>)
  407020:	781b      	ldrb	r3, [r3, #0]
  407022:	2b00      	cmp	r3, #0
  407024:	d000      	beq.n	407028 <tcp_fasttmr+0x84>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
  407026:	e7c6      	b.n	406fb6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
  407028:	683b      	ldr	r3, [r7, #0]
  40702a:	607b      	str	r3, [r7, #4]
  ++tcp_timer_ctr;

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;

  while(pcb != NULL) {
  40702c:	687b      	ldr	r3, [r7, #4]
  40702e:	2b00      	cmp	r3, #0
  407030:	d1c5      	bne.n	406fbe <tcp_fasttmr+0x1a>
        }
      }
      pcb = next;
    }
  }
}
  407032:	bf00      	nop
  407034:	3708      	adds	r7, #8
  407036:	46bd      	mov	sp, r7
  407038:	bd80      	pop	{r7, pc}
  40703a:	bf00      	nop
  40703c:	204025a9 	.word	0x204025a9
  407040:	20404980 	.word	0x20404980
  407044:	0040a18d 	.word	0x0040a18d
  407048:	2040497c 	.word	0x2040497c
  40704c:	00407051 	.word	0x00407051

00407050 <tcp_process_refused_data>:

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
  407050:	b590      	push	{r4, r7, lr}
  407052:	b085      	sub	sp, #20
  407054:	af00      	add	r7, sp, #0
  407056:	6078      	str	r0, [r7, #4]
  err_t err;
  u8_t refused_flags = pcb->refused_data->flags;
  407058:	687b      	ldr	r3, [r7, #4]
  40705a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
  40705c:	7b5b      	ldrb	r3, [r3, #13]
  40705e:	73bb      	strb	r3, [r7, #14]
  /* set pcb->refused_data to NULL in case the callback frees it and then
     closes the pcb */
  struct pbuf *refused_data = pcb->refused_data;
  407060:	687b      	ldr	r3, [r7, #4]
  407062:	6f9b      	ldr	r3, [r3, #120]	; 0x78
  407064:	60bb      	str	r3, [r7, #8]
  pcb->refused_data = NULL;
  407066:	687b      	ldr	r3, [r7, #4]
  407068:	2200      	movs	r2, #0
  40706a:	679a      	str	r2, [r3, #120]	; 0x78
  /* Notify again application with data previously received. */
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
  TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
  40706c:	687b      	ldr	r3, [r7, #4]
  40706e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
  407072:	2b00      	cmp	r3, #0
  407074:	d00b      	beq.n	40708e <tcp_process_refused_data+0x3e>
  407076:	687b      	ldr	r3, [r7, #4]
  407078:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
  40707c:	687b      	ldr	r3, [r7, #4]
  40707e:	6918      	ldr	r0, [r3, #16]
  407080:	2300      	movs	r3, #0
  407082:	68ba      	ldr	r2, [r7, #8]
  407084:	6879      	ldr	r1, [r7, #4]
  407086:	47a0      	blx	r4
  407088:	4603      	mov	r3, r0
  40708a:	73fb      	strb	r3, [r7, #15]
  40708c:	e007      	b.n	40709e <tcp_process_refused_data+0x4e>
  40708e:	2300      	movs	r3, #0
  407090:	68ba      	ldr	r2, [r7, #8]
  407092:	6879      	ldr	r1, [r7, #4]
  407094:	2000      	movs	r0, #0
  407096:	4c22      	ldr	r4, [pc, #136]	; (407120 <tcp_process_refused_data+0xd0>)
  407098:	47a0      	blx	r4
  40709a:	4603      	mov	r3, r0
  40709c:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
  40709e:	f997 300f 	ldrsb.w	r3, [r7, #15]
  4070a2:	2b00      	cmp	r3, #0
  4070a4:	d12b      	bne.n	4070fe <tcp_process_refused_data+0xae>
    /* did refused_data include a FIN? */
    if (refused_flags & PBUF_FLAG_TCP_FIN) {
  4070a6:	7bbb      	ldrb	r3, [r7, #14]
  4070a8:	f003 0320 	and.w	r3, r3, #32
  4070ac:	2b00      	cmp	r3, #0
  4070ae:	d031      	beq.n	407114 <tcp_process_refused_data+0xc4>
      /* correct rcv_wnd as the application won't call tcp_recved()
         for the FIN's seqno */
      if (pcb->rcv_wnd != TCP_WND) {
  4070b0:	687b      	ldr	r3, [r7, #4]
  4070b2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
  4070b4:	f640 3268 	movw	r2, #2920	; 0xb68
  4070b8:	4293      	cmp	r3, r2
  4070ba:	d005      	beq.n	4070c8 <tcp_process_refused_data+0x78>
        pcb->rcv_wnd++;
  4070bc:	687b      	ldr	r3, [r7, #4]
  4070be:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
  4070c0:	3301      	adds	r3, #1
  4070c2:	b29a      	uxth	r2, r3
  4070c4:	687b      	ldr	r3, [r7, #4]
  4070c6:	859a      	strh	r2, [r3, #44]	; 0x2c
      }
      TCP_EVENT_CLOSED(pcb, err);
  4070c8:	687b      	ldr	r3, [r7, #4]
  4070ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
  4070ce:	2b00      	cmp	r3, #0
  4070d0:	d00b      	beq.n	4070ea <tcp_process_refused_data+0x9a>
  4070d2:	687b      	ldr	r3, [r7, #4]
  4070d4:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
  4070d8:	687b      	ldr	r3, [r7, #4]
  4070da:	6918      	ldr	r0, [r3, #16]
  4070dc:	2300      	movs	r3, #0
  4070de:	2200      	movs	r2, #0
  4070e0:	6879      	ldr	r1, [r7, #4]
  4070e2:	47a0      	blx	r4
  4070e4:	4603      	mov	r3, r0
  4070e6:	73fb      	strb	r3, [r7, #15]
  4070e8:	e001      	b.n	4070ee <tcp_process_refused_data+0x9e>
  4070ea:	2300      	movs	r3, #0
  4070ec:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_ABRT) {
  4070ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
  4070f2:	f113 0f0a 	cmn.w	r3, #10
  4070f6:	d10d      	bne.n	407114 <tcp_process_refused_data+0xc4>
        return ERR_ABRT;
  4070f8:	f06f 0309 	mvn.w	r3, #9
  4070fc:	e00b      	b.n	407116 <tcp_process_refused_data+0xc6>
      }
    }
  } else if (err == ERR_ABRT) {
  4070fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
  407102:	f113 0f0a 	cmn.w	r3, #10
  407106:	d102      	bne.n	40710e <tcp_process_refused_data+0xbe>
    /* if err == ERR_ABRT, 'pcb' is already deallocated */
    /* Drop incoming packets because pcb is "full" (only if the incoming
       segment contains data). */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
    return ERR_ABRT;
  407108:	f06f 0309 	mvn.w	r3, #9
  40710c:	e003      	b.n	407116 <tcp_process_refused_data+0xc6>
  } else {
    /* data is still refused, pbuf is still valid (go on for ACK-only packets) */
    pcb->refused_data = refused_data;
  40710e:	687b      	ldr	r3, [r7, #4]
  407110:	68ba      	ldr	r2, [r7, #8]
  407112:	679a      	str	r2, [r3, #120]	; 0x78
  }
  return ERR_OK;
  407114:	2300      	movs	r3, #0
}
  407116:	4618      	mov	r0, r3
  407118:	3714      	adds	r7, #20
  40711a:	46bd      	mov	sp, r7
  40711c:	bd90      	pop	{r4, r7, pc}
  40711e:	bf00      	nop
  407120:	004071ed 	.word	0x004071ed

00407124 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
  407124:	b580      	push	{r7, lr}
  407126:	b084      	sub	sp, #16
  407128:	af00      	add	r7, sp, #0
  40712a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
  40712c:	e007      	b.n	40713e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
  40712e:	687b      	ldr	r3, [r7, #4]
  407130:	681b      	ldr	r3, [r3, #0]
  407132:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
  407134:	6878      	ldr	r0, [r7, #4]
  407136:	4b05      	ldr	r3, [pc, #20]	; (40714c <tcp_segs_free+0x28>)
  407138:	4798      	blx	r3
    seg = next;
  40713a:	68fb      	ldr	r3, [r7, #12]
  40713c:	607b      	str	r3, [r7, #4]
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
  while (seg != NULL) {
  40713e:	687b      	ldr	r3, [r7, #4]
  407140:	2b00      	cmp	r3, #0
  407142:	d1f4      	bne.n	40712e <tcp_segs_free+0xa>
    struct tcp_seg *next = seg->next;
    tcp_seg_free(seg);
    seg = next;
  }
}
  407144:	bf00      	nop
  407146:	3710      	adds	r7, #16
  407148:	46bd      	mov	sp, r7
  40714a:	bd80      	pop	{r7, pc}
  40714c:	00407151 	.word	0x00407151

00407150 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
  407150:	b580      	push	{r7, lr}
  407152:	b082      	sub	sp, #8
  407154:	af00      	add	r7, sp, #0
  407156:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
  407158:	687b      	ldr	r3, [r7, #4]
  40715a:	2b00      	cmp	r3, #0
  40715c:	d00c      	beq.n	407178 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
  40715e:	687b      	ldr	r3, [r7, #4]
  407160:	685b      	ldr	r3, [r3, #4]
  407162:	2b00      	cmp	r3, #0
  407164:	d004      	beq.n	407170 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
  407166:	687b      	ldr	r3, [r7, #4]
  407168:	685b      	ldr	r3, [r3, #4]
  40716a:	4618      	mov	r0, r3
  40716c:	4b04      	ldr	r3, [pc, #16]	; (407180 <tcp_seg_free+0x30>)
  40716e:	4798      	blx	r3
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
  407170:	6879      	ldr	r1, [r7, #4]
  407172:	2003      	movs	r0, #3
  407174:	4b03      	ldr	r3, [pc, #12]	; (407184 <tcp_seg_free+0x34>)
  407176:	4798      	blx	r3
  }
}
  407178:	bf00      	nop
  40717a:	3708      	adds	r7, #8
  40717c:	46bd      	mov	sp, r7
  40717e:	bd80      	pop	{r7, pc}
  407180:	00406069 	.word	0x00406069
  407184:	00405981 	.word	0x00405981

00407188 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
  407188:	b480      	push	{r7}
  40718a:	b083      	sub	sp, #12
  40718c:	af00      	add	r7, sp, #0
  40718e:	6078      	str	r0, [r7, #4]
  407190:	460b      	mov	r3, r1
  407192:	70fb      	strb	r3, [r7, #3]
  pcb->prio = prio;
  407194:	687b      	ldr	r3, [r7, #4]
  407196:	78fa      	ldrb	r2, [r7, #3]
  407198:	765a      	strb	r2, [r3, #25]
}
  40719a:	bf00      	nop
  40719c:	370c      	adds	r7, #12
  40719e:	46bd      	mov	sp, r7
  4071a0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4071a4:	4770      	bx	lr
  4071a6:	bf00      	nop

004071a8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */ 
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
  4071a8:	b580      	push	{r7, lr}
  4071aa:	b084      	sub	sp, #16
  4071ac:	af00      	add	r7, sp, #0
  4071ae:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
  4071b0:	2003      	movs	r0, #3
  4071b2:	4b0b      	ldr	r3, [pc, #44]	; (4071e0 <tcp_seg_copy+0x38>)
  4071b4:	4798      	blx	r3
  4071b6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
  4071b8:	68fb      	ldr	r3, [r7, #12]
  4071ba:	2b00      	cmp	r3, #0
  4071bc:	d101      	bne.n	4071c2 <tcp_seg_copy+0x1a>
    return NULL;
  4071be:	2300      	movs	r3, #0
  4071c0:	e00a      	b.n	4071d8 <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg)); 
  4071c2:	2210      	movs	r2, #16
  4071c4:	6879      	ldr	r1, [r7, #4]
  4071c6:	68f8      	ldr	r0, [r7, #12]
  4071c8:	4b06      	ldr	r3, [pc, #24]	; (4071e4 <tcp_seg_copy+0x3c>)
  4071ca:	4798      	blx	r3
  pbuf_ref(cseg->p);
  4071cc:	68fb      	ldr	r3, [r7, #12]
  4071ce:	685b      	ldr	r3, [r3, #4]
  4071d0:	4618      	mov	r0, r3
  4071d2:	4b05      	ldr	r3, [pc, #20]	; (4071e8 <tcp_seg_copy+0x40>)
  4071d4:	4798      	blx	r3
  return cseg;
  4071d6:	68fb      	ldr	r3, [r7, #12]
}
  4071d8:	4618      	mov	r0, r3
  4071da:	3710      	adds	r7, #16
  4071dc:	46bd      	mov	sp, r7
  4071de:	bd80      	pop	{r7, pc}
  4071e0:	00405941 	.word	0x00405941
  4071e4:	0040d859 	.word	0x0040d859
  4071e8:	00406129 	.word	0x00406129

004071ec <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
  4071ec:	b580      	push	{r7, lr}
  4071ee:	b084      	sub	sp, #16
  4071f0:	af00      	add	r7, sp, #0
  4071f2:	60f8      	str	r0, [r7, #12]
  4071f4:	60b9      	str	r1, [r7, #8]
  4071f6:	607a      	str	r2, [r7, #4]
  4071f8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
  4071fa:	687b      	ldr	r3, [r7, #4]
  4071fc:	2b00      	cmp	r3, #0
  4071fe:	d009      	beq.n	407214 <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
  407200:	687b      	ldr	r3, [r7, #4]
  407202:	891b      	ldrh	r3, [r3, #8]
  407204:	4619      	mov	r1, r3
  407206:	68b8      	ldr	r0, [r7, #8]
  407208:	4b09      	ldr	r3, [pc, #36]	; (407230 <tcp_recv_null+0x44>)
  40720a:	4798      	blx	r3
    pbuf_free(p);
  40720c:	6878      	ldr	r0, [r7, #4]
  40720e:	4b09      	ldr	r3, [pc, #36]	; (407234 <tcp_recv_null+0x48>)
  407210:	4798      	blx	r3
  407212:	e008      	b.n	407226 <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
  407214:	f997 3003 	ldrsb.w	r3, [r7, #3]
  407218:	2b00      	cmp	r3, #0
  40721a:	d104      	bne.n	407226 <tcp_recv_null+0x3a>
    return tcp_close(pcb);
  40721c:	68b8      	ldr	r0, [r7, #8]
  40721e:	4b06      	ldr	r3, [pc, #24]	; (407238 <tcp_recv_null+0x4c>)
  407220:	4798      	blx	r3
  407222:	4603      	mov	r3, r0
  407224:	e000      	b.n	407228 <tcp_recv_null+0x3c>
  }
  return ERR_OK;
  407226:	2300      	movs	r3, #0
}
  407228:	4618      	mov	r0, r3
  40722a:	3710      	adds	r7, #16
  40722c:	46bd      	mov	sp, r7
  40722e:	bd80      	pop	{r7, pc}
  407230:	00406a35 	.word	0x00406a35
  407234:	00406069 	.word	0x00406069
  407238:	00406659 	.word	0x00406659

0040723c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
  40723c:	b580      	push	{r7, lr}
  40723e:	b086      	sub	sp, #24
  407240:	af00      	add	r7, sp, #0
  407242:	4603      	mov	r3, r0
  407244:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;


  mprio = TCP_PRIO_MAX;
  407246:	237f      	movs	r3, #127	; 0x7f
  407248:	72fb      	strb	r3, [r7, #11]
  
  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
  40724a:	2300      	movs	r3, #0
  40724c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
  40724e:	2300      	movs	r3, #0
  407250:	613b      	str	r3, [r7, #16]
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  407252:	4b18      	ldr	r3, [pc, #96]	; (4072b4 <tcp_kill_prio+0x78>)
  407254:	681b      	ldr	r3, [r3, #0]
  407256:	617b      	str	r3, [r7, #20]
  407258:	e01f      	b.n	40729a <tcp_kill_prio+0x5e>
    if (pcb->prio <= prio &&
  40725a:	697b      	ldr	r3, [r7, #20]
  40725c:	7e5b      	ldrb	r3, [r3, #25]
  40725e:	79fa      	ldrb	r2, [r7, #7]
  407260:	429a      	cmp	r2, r3
  407262:	d317      	bcc.n	407294 <tcp_kill_prio+0x58>
       pcb->prio <= mprio &&
  407264:	697b      	ldr	r3, [r7, #20]
  407266:	7e5b      	ldrb	r3, [r3, #25]
  
  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
  inactive = NULL;
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
    if (pcb->prio <= prio &&
  407268:	7afa      	ldrb	r2, [r7, #11]
  40726a:	429a      	cmp	r2, r3
  40726c:	d312      	bcc.n	407294 <tcp_kill_prio+0x58>
       pcb->prio <= mprio &&
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
  40726e:	4b12      	ldr	r3, [pc, #72]	; (4072b8 <tcp_kill_prio+0x7c>)
  407270:	681a      	ldr	r2, [r3, #0]
  407272:	697b      	ldr	r3, [r7, #20]
  407274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  407276:	1ad2      	subs	r2, r2, r3
  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
  inactive = NULL;
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
    if (pcb->prio <= prio &&
       pcb->prio <= mprio &&
  407278:	68fb      	ldr	r3, [r7, #12]
  40727a:	429a      	cmp	r2, r3
  40727c:	d30a      	bcc.n	407294 <tcp_kill_prio+0x58>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
      inactivity = tcp_ticks - pcb->tmr;
  40727e:	4b0e      	ldr	r3, [pc, #56]	; (4072b8 <tcp_kill_prio+0x7c>)
  407280:	681a      	ldr	r2, [r3, #0]
  407282:	697b      	ldr	r3, [r7, #20]
  407284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  407286:	1ad3      	subs	r3, r2, r3
  407288:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
  40728a:	697b      	ldr	r3, [r7, #20]
  40728c:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
  40728e:	697b      	ldr	r3, [r7, #20]
  407290:	7e5b      	ldrb	r3, [r3, #25]
  407292:	72fb      	strb	r3, [r7, #11]
  mprio = TCP_PRIO_MAX;
  
  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
  inactive = NULL;
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  407294:	697b      	ldr	r3, [r7, #20]
  407296:	68db      	ldr	r3, [r3, #12]
  407298:	617b      	str	r3, [r7, #20]
  40729a:	697b      	ldr	r3, [r7, #20]
  40729c:	2b00      	cmp	r3, #0
  40729e:	d1dc      	bne.n	40725a <tcp_kill_prio+0x1e>
      inactivity = tcp_ticks - pcb->tmr;
      inactive = pcb;
      mprio = pcb->prio;
    }
  }
  if (inactive != NULL) {
  4072a0:	693b      	ldr	r3, [r7, #16]
  4072a2:	2b00      	cmp	r3, #0
  4072a4:	d002      	beq.n	4072ac <tcp_kill_prio+0x70>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
  4072a6:	6938      	ldr	r0, [r7, #16]
  4072a8:	4b04      	ldr	r3, [pc, #16]	; (4072bc <tcp_kill_prio+0x80>)
  4072aa:	4798      	blx	r3
  }
}
  4072ac:	bf00      	nop
  4072ae:	3718      	adds	r7, #24
  4072b0:	46bd      	mov	sp, r7
  4072b2:	bd80      	pop	{r7, pc}
  4072b4:	20404980 	.word	0x20404980
  4072b8:	20404984 	.word	0x20404984
  4072bc:	00406771 	.word	0x00406771

004072c0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
  4072c0:	b580      	push	{r7, lr}
  4072c2:	b084      	sub	sp, #16
  4072c4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
  4072c6:	2300      	movs	r3, #0
  4072c8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
  4072ca:	2300      	movs	r3, #0
  4072cc:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
  4072ce:	4b12      	ldr	r3, [pc, #72]	; (407318 <tcp_kill_timewait+0x58>)
  4072d0:	681b      	ldr	r3, [r3, #0]
  4072d2:	60fb      	str	r3, [r7, #12]
  4072d4:	e012      	b.n	4072fc <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
  4072d6:	4b11      	ldr	r3, [pc, #68]	; (40731c <tcp_kill_timewait+0x5c>)
  4072d8:	681a      	ldr	r2, [r3, #0]
  4072da:	68fb      	ldr	r3, [r7, #12]
  4072dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  4072de:	1ad2      	subs	r2, r2, r3
  4072e0:	687b      	ldr	r3, [r7, #4]
  4072e2:	429a      	cmp	r2, r3
  4072e4:	d307      	bcc.n	4072f6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
  4072e6:	4b0d      	ldr	r3, [pc, #52]	; (40731c <tcp_kill_timewait+0x5c>)
  4072e8:	681a      	ldr	r2, [r3, #0]
  4072ea:	68fb      	ldr	r3, [r7, #12]
  4072ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  4072ee:	1ad3      	subs	r3, r2, r3
  4072f0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
  4072f2:	68fb      	ldr	r3, [r7, #12]
  4072f4:	60bb      	str	r3, [r7, #8]
  u32_t inactivity;

  inactivity = 0;
  inactive = NULL;
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
  4072f6:	68fb      	ldr	r3, [r7, #12]
  4072f8:	68db      	ldr	r3, [r3, #12]
  4072fa:	60fb      	str	r3, [r7, #12]
  4072fc:	68fb      	ldr	r3, [r7, #12]
  4072fe:	2b00      	cmp	r3, #0
  407300:	d1e9      	bne.n	4072d6 <tcp_kill_timewait+0x16>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
      inactivity = tcp_ticks - pcb->tmr;
      inactive = pcb;
    }
  }
  if (inactive != NULL) {
  407302:	68bb      	ldr	r3, [r7, #8]
  407304:	2b00      	cmp	r3, #0
  407306:	d002      	beq.n	40730e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
  407308:	68b8      	ldr	r0, [r7, #8]
  40730a:	4b05      	ldr	r3, [pc, #20]	; (407320 <tcp_kill_timewait+0x60>)
  40730c:	4798      	blx	r3
  }
}
  40730e:	bf00      	nop
  407310:	3710      	adds	r7, #16
  407312:	46bd      	mov	sp, r7
  407314:	bd80      	pop	{r7, pc}
  407316:	bf00      	nop
  407318:	20404994 	.word	0x20404994
  40731c:	20404984 	.word	0x20404984
  407320:	00406771 	.word	0x00406771

00407324 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
  407324:	b580      	push	{r7, lr}
  407326:	b084      	sub	sp, #16
  407328:	af00      	add	r7, sp, #0
  40732a:	4603      	mov	r3, r0
  40732c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  u32_t iss;
  
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
  40732e:	2001      	movs	r0, #1
  407330:	4b3e      	ldr	r3, [pc, #248]	; (40742c <tcp_alloc+0x108>)
  407332:	4798      	blx	r3
  407334:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
  407336:	68fb      	ldr	r3, [r7, #12]
  407338:	2b00      	cmp	r3, #0
  40733a:	d110      	bne.n	40735e <tcp_alloc+0x3a>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
  40733c:	4b3c      	ldr	r3, [pc, #240]	; (407430 <tcp_alloc+0x10c>)
  40733e:	4798      	blx	r3
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
  407340:	2001      	movs	r0, #1
  407342:	4b3a      	ldr	r3, [pc, #232]	; (40742c <tcp_alloc+0x108>)
  407344:	4798      	blx	r3
  407346:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
  407348:	68fb      	ldr	r3, [r7, #12]
  40734a:	2b00      	cmp	r3, #0
  40734c:	d107      	bne.n	40735e <tcp_alloc+0x3a>
      /* Try killing active connections with lower priority than the new one. */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
      tcp_kill_prio(prio);
  40734e:	79fb      	ldrb	r3, [r7, #7]
  407350:	4618      	mov	r0, r3
  407352:	4b38      	ldr	r3, [pc, #224]	; (407434 <tcp_alloc+0x110>)
  407354:	4798      	blx	r3
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
  407356:	2001      	movs	r0, #1
  407358:	4b34      	ldr	r3, [pc, #208]	; (40742c <tcp_alloc+0x108>)
  40735a:	4798      	blx	r3
  40735c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: timewait PCB was freed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
  40735e:	68fb      	ldr	r3, [r7, #12]
  407360:	2b00      	cmp	r3, #0
  407362:	d05d      	beq.n	407420 <tcp_alloc+0xfc>
    memset(pcb, 0, sizeof(struct tcp_pcb));
  407364:	2298      	movs	r2, #152	; 0x98
  407366:	2100      	movs	r1, #0
  407368:	68f8      	ldr	r0, [r7, #12]
  40736a:	4b33      	ldr	r3, [pc, #204]	; (407438 <tcp_alloc+0x114>)
  40736c:	4798      	blx	r3
    pcb->prio = prio;
  40736e:	68fb      	ldr	r3, [r7, #12]
  407370:	79fa      	ldrb	r2, [r7, #7]
  407372:	765a      	strb	r2, [r3, #25]
    pcb->snd_buf = TCP_SND_BUF;
  407374:	68fb      	ldr	r3, [r7, #12]
  407376:	f640 3268 	movw	r2, #2920	; 0xb68
  40737a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    pcb->snd_queuelen = 0;
  40737e:	68fb      	ldr	r3, [r7, #12]
  407380:	2200      	movs	r2, #0
  407382:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    pcb->rcv_wnd = TCP_WND;
  407386:	68fb      	ldr	r3, [r7, #12]
  407388:	f640 3268 	movw	r2, #2920	; 0xb68
  40738c:	859a      	strh	r2, [r3, #44]	; 0x2c
    pcb->rcv_ann_wnd = TCP_WND;
  40738e:	68fb      	ldr	r3, [r7, #12]
  407390:	f640 3268 	movw	r2, #2920	; 0xb68
  407394:	85da      	strh	r2, [r3, #46]	; 0x2e
    pcb->tos = 0;
  407396:	68fb      	ldr	r3, [r7, #12]
  407398:	2200      	movs	r2, #0
  40739a:	725a      	strb	r2, [r3, #9]
    pcb->ttl = TCP_TTL;
  40739c:	68fb      	ldr	r3, [r7, #12]
  40739e:	22ff      	movs	r2, #255	; 0xff
  4073a0:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = (TCP_MSS > 536) ? 536 : TCP_MSS;
  4073a2:	68fb      	ldr	r3, [r7, #12]
  4073a4:	f44f 7206 	mov.w	r2, #536	; 0x218
  4073a8:	86da      	strh	r2, [r3, #54]	; 0x36
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
  4073aa:	68fb      	ldr	r3, [r7, #12]
  4073ac:	2206      	movs	r2, #6
  4073ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    pcb->sa = 0;
  4073b2:	68fb      	ldr	r3, [r7, #12]
  4073b4:	2200      	movs	r2, #0
  4073b6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
  4073ba:	68fb      	ldr	r3, [r7, #12]
  4073bc:	2206      	movs	r2, #6
  4073be:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    pcb->rtime = -1;
  4073c2:	68fb      	ldr	r3, [r7, #12]
  4073c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
  4073c8:	869a      	strh	r2, [r3, #52]	; 0x34
    pcb->cwnd = 1;
  4073ca:	68fb      	ldr	r3, [r7, #12]
  4073cc:	2201      	movs	r2, #1
  4073ce:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    iss = tcp_next_iss();
  4073d2:	4b1a      	ldr	r3, [pc, #104]	; (40743c <tcp_alloc+0x118>)
  4073d4:	4798      	blx	r3
  4073d6:	60b8      	str	r0, [r7, #8]
    pcb->snd_wl2 = iss;
  4073d8:	68fb      	ldr	r3, [r7, #12]
  4073da:	68ba      	ldr	r2, [r7, #8]
  4073dc:	659a      	str	r2, [r3, #88]	; 0x58
    pcb->snd_nxt = iss;
  4073de:	68fb      	ldr	r3, [r7, #12]
  4073e0:	68ba      	ldr	r2, [r7, #8]
  4073e2:	651a      	str	r2, [r3, #80]	; 0x50
    pcb->lastack = iss;
  4073e4:	68fb      	ldr	r3, [r7, #12]
  4073e6:	68ba      	ldr	r2, [r7, #8]
  4073e8:	649a      	str	r2, [r3, #72]	; 0x48
    pcb->snd_lbb = iss;   
  4073ea:	68fb      	ldr	r3, [r7, #12]
  4073ec:	68ba      	ldr	r2, [r7, #8]
  4073ee:	65da      	str	r2, [r3, #92]	; 0x5c
    pcb->tmr = tcp_ticks;
  4073f0:	4b13      	ldr	r3, [pc, #76]	; (407440 <tcp_alloc+0x11c>)
  4073f2:	681a      	ldr	r2, [r3, #0]
  4073f4:	68fb      	ldr	r3, [r7, #12]
  4073f6:	625a      	str	r2, [r3, #36]	; 0x24
    pcb->last_timer = tcp_timer_ctr;
  4073f8:	4b12      	ldr	r3, [pc, #72]	; (407444 <tcp_alloc+0x120>)
  4073fa:	781a      	ldrb	r2, [r3, #0]
  4073fc:	68fb      	ldr	r3, [r7, #12]
  4073fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    pcb->polltmr = 0;
  407402:	68fb      	ldr	r3, [r7, #12]
  407404:	2200      	movs	r2, #0
  407406:	77da      	strb	r2, [r3, #31]

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
  407408:	68fb      	ldr	r3, [r7, #12]
  40740a:	4a0f      	ldr	r2, [pc, #60]	; (407448 <tcp_alloc+0x124>)
  40740c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */  
    
    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
  407410:	68fb      	ldr	r3, [r7, #12]
  407412:	4a0e      	ldr	r2, [pc, #56]	; (40744c <tcp_alloc+0x128>)
  407414:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */

    pcb->keep_cnt_sent = 0;
  407418:	68fb      	ldr	r3, [r7, #12]
  40741a:	2200      	movs	r2, #0
  40741c:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
  }
  return pcb;
  407420:	68fb      	ldr	r3, [r7, #12]
}
  407422:	4618      	mov	r0, r3
  407424:	3710      	adds	r7, #16
  407426:	46bd      	mov	sp, r7
  407428:	bd80      	pop	{r7, pc}
  40742a:	bf00      	nop
  40742c:	00405941 	.word	0x00405941
  407430:	004072c1 	.word	0x004072c1
  407434:	0040723d 	.word	0x0040723d
  407438:	0040d98d 	.word	0x0040d98d
  40743c:	0040765d 	.word	0x0040765d
  407440:	20404984 	.word	0x20404984
  407444:	204025a9 	.word	0x204025a9
  407448:	004071ed 	.word	0x004071ed
  40744c:	006ddd00 	.word	0x006ddd00

00407450 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
  407450:	b580      	push	{r7, lr}
  407452:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
  407454:	2040      	movs	r0, #64	; 0x40
  407456:	4b02      	ldr	r3, [pc, #8]	; (407460 <tcp_new+0x10>)
  407458:	4798      	blx	r3
  40745a:	4603      	mov	r3, r0
}
  40745c:	4618      	mov	r0, r3
  40745e:	bd80      	pop	{r7, pc}
  407460:	00407325 	.word	0x00407325

00407464 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */ 
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  407464:	b480      	push	{r7}
  407466:	b083      	sub	sp, #12
  407468:	af00      	add	r7, sp, #0
  40746a:	6078      	str	r0, [r7, #4]
  40746c:	6039      	str	r1, [r7, #0]
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  pcb->callback_arg = arg;
  40746e:	687b      	ldr	r3, [r7, #4]
  407470:	683a      	ldr	r2, [r7, #0]
  407472:	611a      	str	r2, [r3, #16]
}
  407474:	bf00      	nop
  407476:	370c      	adds	r7, #12
  407478:	46bd      	mov	sp, r7
  40747a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40747e:	4770      	bx	lr

00407480 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */ 
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
  407480:	b480      	push	{r7}
  407482:	b083      	sub	sp, #12
  407484:	af00      	add	r7, sp, #0
  407486:	6078      	str	r0, [r7, #4]
  407488:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
  pcb->recv = recv;
  40748a:	687b      	ldr	r3, [r7, #4]
  40748c:	683a      	ldr	r2, [r7, #0]
  40748e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
  407492:	bf00      	nop
  407494:	370c      	adds	r7, #12
  407496:	46bd      	mov	sp, r7
  407498:	f85d 7b04 	ldr.w	r7, [sp], #4
  40749c:	4770      	bx	lr
  40749e:	bf00      	nop

004074a0 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */ 
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
  4074a0:	b480      	push	{r7}
  4074a2:	b083      	sub	sp, #12
  4074a4:	af00      	add	r7, sp, #0
  4074a6:	6078      	str	r0, [r7, #4]
  4074a8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
  pcb->sent = sent;
  4074aa:	687b      	ldr	r3, [r7, #4]
  4074ac:	683a      	ldr	r2, [r7, #0]
  4074ae:	67da      	str	r2, [r3, #124]	; 0x7c
}
  4074b0:	bf00      	nop
  4074b2:	370c      	adds	r7, #12
  4074b4:	46bd      	mov	sp, r7
  4074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4074ba:	4770      	bx	lr

004074bc <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occured on the connection
 */ 
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
  4074bc:	b480      	push	{r7}
  4074be:	b083      	sub	sp, #12
  4074c0:	af00      	add	r7, sp, #0
  4074c2:	6078      	str	r0, [r7, #4]
  4074c4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
  pcb->errf = err;
  4074c6:	687b      	ldr	r3, [r7, #4]
  4074c8:	683a      	ldr	r2, [r7, #0]
  4074ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
  4074ce:	bf00      	nop
  4074d0:	370c      	adds	r7, #12
  4074d2:	46bd      	mov	sp, r7
  4074d4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4074d8:	4770      	bx	lr
  4074da:	bf00      	nop

004074dc <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */ 
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  4074dc:	b480      	push	{r7}
  4074de:	b083      	sub	sp, #12
  4074e0:	af00      	add	r7, sp, #0
  4074e2:	6078      	str	r0, [r7, #4]
  4074e4:	6039      	str	r1, [r7, #0]
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  pcb->accept = accept;
  4074e6:	687b      	ldr	r3, [r7, #4]
  4074e8:	683a      	ldr	r2, [r7, #0]
  4074ea:	615a      	str	r2, [r3, #20]
}
  4074ec:	bf00      	nop
  4074ee:	370c      	adds	r7, #12
  4074f0:	46bd      	mov	sp, r7
  4074f2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4074f6:	4770      	bx	lr

004074f8 <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */ 
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
  4074f8:	b480      	push	{r7}
  4074fa:	b085      	sub	sp, #20
  4074fc:	af00      	add	r7, sp, #0
  4074fe:	60f8      	str	r0, [r7, #12]
  407500:	60b9      	str	r1, [r7, #8]
  407502:	4613      	mov	r3, r2
  407504:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
#if LWIP_CALLBACK_API
  pcb->poll = poll;
  407506:	68fb      	ldr	r3, [r7, #12]
  407508:	68ba      	ldr	r2, [r7, #8]
  40750a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */  
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */  
  pcb->pollinterval = interval;
  40750e:	68fb      	ldr	r3, [r7, #12]
  407510:	79fa      	ldrb	r2, [r7, #7]
  407512:	f883 2020 	strb.w	r2, [r3, #32]
}
  407516:	bf00      	nop
  407518:	3714      	adds	r7, #20
  40751a:	46bd      	mov	sp, r7
  40751c:	f85d 7b04 	ldr.w	r7, [sp], #4
  407520:	4770      	bx	lr
  407522:	bf00      	nop

00407524 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
  407524:	b580      	push	{r7, lr}
  407526:	b082      	sub	sp, #8
  407528:	af00      	add	r7, sp, #0
  40752a:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
  40752c:	687b      	ldr	r3, [r7, #4]
  40752e:	7e1b      	ldrb	r3, [r3, #24]
  407530:	2b00      	cmp	r3, #0
  407532:	d034      	beq.n	40759e <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
  407534:	687b      	ldr	r3, [r7, #4]
  407536:	7e1b      	ldrb	r3, [r3, #24]
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
  if (pcb->state != CLOSED &&
  407538:	2b0a      	cmp	r3, #10
  40753a:	d030      	beq.n	40759e <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
     pcb->state != LISTEN) {
  40753c:	687b      	ldr	r3, [r7, #4]
  40753e:	7e1b      	ldrb	r3, [r3, #24]
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
  if (pcb->state != CLOSED &&
     pcb->state != TIME_WAIT &&
  407540:	2b01      	cmp	r3, #1
  407542:	d02c      	beq.n	40759e <tcp_pcb_purge+0x7a>
      }
    }
#endif /* TCP_LISTEN_BACKLOG */


    if (pcb->refused_data != NULL) {
  407544:	687b      	ldr	r3, [r7, #4]
  407546:	6f9b      	ldr	r3, [r3, #120]	; 0x78
  407548:	2b00      	cmp	r3, #0
  40754a:	d007      	beq.n	40755c <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
  40754c:	687b      	ldr	r3, [r7, #4]
  40754e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
  407550:	4618      	mov	r0, r3
  407552:	4b15      	ldr	r3, [pc, #84]	; (4075a8 <tcp_pcb_purge+0x84>)
  407554:	4798      	blx	r3
      pcb->refused_data = NULL;
  407556:	687b      	ldr	r3, [r7, #4]
  407558:	2200      	movs	r2, #0
  40755a:	679a      	str	r2, [r3, #120]	; 0x78
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
  40755c:	687b      	ldr	r3, [r7, #4]
  40755e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  407560:	4618      	mov	r0, r3
  407562:	4b12      	ldr	r3, [pc, #72]	; (4075ac <tcp_pcb_purge+0x88>)
  407564:	4798      	blx	r3
    pcb->ooseq = NULL;
  407566:	687b      	ldr	r3, [r7, #4]
  407568:	2200      	movs	r2, #0
  40756a:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
  40756c:	687b      	ldr	r3, [r7, #4]
  40756e:	f64f 72ff 	movw	r2, #65535	; 0xffff
  407572:	869a      	strh	r2, [r3, #52]	; 0x34

    tcp_segs_free(pcb->unsent);
  407574:	687b      	ldr	r3, [r7, #4]
  407576:	6edb      	ldr	r3, [r3, #108]	; 0x6c
  407578:	4618      	mov	r0, r3
  40757a:	4b0c      	ldr	r3, [pc, #48]	; (4075ac <tcp_pcb_purge+0x88>)
  40757c:	4798      	blx	r3
    tcp_segs_free(pcb->unacked);
  40757e:	687b      	ldr	r3, [r7, #4]
  407580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  407582:	4618      	mov	r0, r3
  407584:	4b09      	ldr	r3, [pc, #36]	; (4075ac <tcp_pcb_purge+0x88>)
  407586:	4798      	blx	r3
    pcb->unacked = pcb->unsent = NULL;
  407588:	687b      	ldr	r3, [r7, #4]
  40758a:	2200      	movs	r2, #0
  40758c:	66da      	str	r2, [r3, #108]	; 0x6c
  40758e:	687b      	ldr	r3, [r7, #4]
  407590:	6eda      	ldr	r2, [r3, #108]	; 0x6c
  407592:	687b      	ldr	r3, [r7, #4]
  407594:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
  407596:	687b      	ldr	r3, [r7, #4]
  407598:	2200      	movs	r2, #0
  40759a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
#endif /* TCP_OVERSIZE */
  }
}
  40759e:	bf00      	nop
  4075a0:	3708      	adds	r7, #8
  4075a2:	46bd      	mov	sp, r7
  4075a4:	bd80      	pop	{r7, pc}
  4075a6:	bf00      	nop
  4075a8:	00406069 	.word	0x00406069
  4075ac:	00407125 	.word	0x00407125

004075b0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
  4075b0:	b580      	push	{r7, lr}
  4075b2:	b082      	sub	sp, #8
  4075b4:	af00      	add	r7, sp, #0
  4075b6:	6078      	str	r0, [r7, #4]
  4075b8:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
  4075ba:	687b      	ldr	r3, [r7, #4]
  4075bc:	681a      	ldr	r2, [r3, #0]
  4075be:	683b      	ldr	r3, [r7, #0]
  4075c0:	429a      	cmp	r2, r3
  4075c2:	d105      	bne.n	4075d0 <tcp_pcb_remove+0x20>
  4075c4:	687b      	ldr	r3, [r7, #4]
  4075c6:	681b      	ldr	r3, [r3, #0]
  4075c8:	68da      	ldr	r2, [r3, #12]
  4075ca:	687b      	ldr	r3, [r7, #4]
  4075cc:	601a      	str	r2, [r3, #0]
  4075ce:	e019      	b.n	407604 <tcp_pcb_remove+0x54>
  4075d0:	687b      	ldr	r3, [r7, #4]
  4075d2:	681b      	ldr	r3, [r3, #0]
  4075d4:	4a1e      	ldr	r2, [pc, #120]	; (407650 <tcp_pcb_remove+0xa0>)
  4075d6:	6013      	str	r3, [r2, #0]
  4075d8:	e010      	b.n	4075fc <tcp_pcb_remove+0x4c>
  4075da:	4b1d      	ldr	r3, [pc, #116]	; (407650 <tcp_pcb_remove+0xa0>)
  4075dc:	681b      	ldr	r3, [r3, #0]
  4075de:	68da      	ldr	r2, [r3, #12]
  4075e0:	683b      	ldr	r3, [r7, #0]
  4075e2:	429a      	cmp	r2, r3
  4075e4:	d105      	bne.n	4075f2 <tcp_pcb_remove+0x42>
  4075e6:	4b1a      	ldr	r3, [pc, #104]	; (407650 <tcp_pcb_remove+0xa0>)
  4075e8:	681b      	ldr	r3, [r3, #0]
  4075ea:	683a      	ldr	r2, [r7, #0]
  4075ec:	68d2      	ldr	r2, [r2, #12]
  4075ee:	60da      	str	r2, [r3, #12]
  4075f0:	e008      	b.n	407604 <tcp_pcb_remove+0x54>
  4075f2:	4b17      	ldr	r3, [pc, #92]	; (407650 <tcp_pcb_remove+0xa0>)
  4075f4:	681b      	ldr	r3, [r3, #0]
  4075f6:	68db      	ldr	r3, [r3, #12]
  4075f8:	4a15      	ldr	r2, [pc, #84]	; (407650 <tcp_pcb_remove+0xa0>)
  4075fa:	6013      	str	r3, [r2, #0]
  4075fc:	4b14      	ldr	r3, [pc, #80]	; (407650 <tcp_pcb_remove+0xa0>)
  4075fe:	681b      	ldr	r3, [r3, #0]
  407600:	2b00      	cmp	r3, #0
  407602:	d1ea      	bne.n	4075da <tcp_pcb_remove+0x2a>
  407604:	683b      	ldr	r3, [r7, #0]
  407606:	2200      	movs	r2, #0
  407608:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
  40760a:	6838      	ldr	r0, [r7, #0]
  40760c:	4b11      	ldr	r3, [pc, #68]	; (407654 <tcp_pcb_remove+0xa4>)
  40760e:	4798      	blx	r3
  
  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
  407610:	683b      	ldr	r3, [r7, #0]
  407612:	7e1b      	ldrb	r3, [r3, #24]
  407614:	2b0a      	cmp	r3, #10
  407616:	d013      	beq.n	407640 <tcp_pcb_remove+0x90>
     pcb->state != LISTEN &&
  407618:	683b      	ldr	r3, [r7, #0]
  40761a:	7e1b      	ldrb	r3, [r3, #24]
  TCP_RMV(pcblist, pcb);

  tcp_pcb_purge(pcb);
  
  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
  40761c:	2b01      	cmp	r3, #1
  40761e:	d00f      	beq.n	407640 <tcp_pcb_remove+0x90>
     pcb->state != LISTEN &&
     pcb->flags & TF_ACK_DELAY) {
  407620:	683b      	ldr	r3, [r7, #0]
  407622:	7f9b      	ldrb	r3, [r3, #30]
  407624:	f003 0301 	and.w	r3, r3, #1

  tcp_pcb_purge(pcb);
  
  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
     pcb->state != LISTEN &&
  407628:	2b00      	cmp	r3, #0
  40762a:	d009      	beq.n	407640 <tcp_pcb_remove+0x90>
     pcb->flags & TF_ACK_DELAY) {
    pcb->flags |= TF_ACK_NOW;
  40762c:	683b      	ldr	r3, [r7, #0]
  40762e:	7f9b      	ldrb	r3, [r3, #30]
  407630:	f043 0302 	orr.w	r3, r3, #2
  407634:	b2da      	uxtb	r2, r3
  407636:	683b      	ldr	r3, [r7, #0]
  407638:	779a      	strb	r2, [r3, #30]
    tcp_output(pcb);
  40763a:	6838      	ldr	r0, [r7, #0]
  40763c:	4b06      	ldr	r3, [pc, #24]	; (407658 <tcp_pcb_remove+0xa8>)
  40763e:	4798      	blx	r3
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
  407640:	683b      	ldr	r3, [r7, #0]
  407642:	2200      	movs	r2, #0
  407644:	761a      	strb	r2, [r3, #24]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
  407646:	bf00      	nop
  407648:	3708      	adds	r7, #8
  40764a:	46bd      	mov	sp, r7
  40764c:	bd80      	pop	{r7, pc}
  40764e:	bf00      	nop
  407650:	2040498c 	.word	0x2040498c
  407654:	00407525 	.word	0x00407525
  407658:	0040a18d 	.word	0x0040a18d

0040765c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(void)
{
  40765c:	b480      	push	{r7}
  40765e:	af00      	add	r7, sp, #0
  static u32_t iss = 6510;
  
  iss += tcp_ticks;       /* XXX */
  407660:	4b06      	ldr	r3, [pc, #24]	; (40767c <tcp_next_iss+0x20>)
  407662:	681a      	ldr	r2, [r3, #0]
  407664:	4b06      	ldr	r3, [pc, #24]	; (407680 <tcp_next_iss+0x24>)
  407666:	681b      	ldr	r3, [r3, #0]
  407668:	4413      	add	r3, r2
  40766a:	4a04      	ldr	r2, [pc, #16]	; (40767c <tcp_next_iss+0x20>)
  40766c:	6013      	str	r3, [r2, #0]
  return iss;
  40766e:	4b03      	ldr	r3, [pc, #12]	; (40767c <tcp_next_iss+0x20>)
  407670:	681b      	ldr	r3, [r3, #0]
}
  407672:	4618      	mov	r0, r3
  407674:	46bd      	mov	sp, r7
  407676:	f85d 7b04 	ldr.w	r7, [sp], #4
  40767a:	4770      	bx	lr
  40767c:	20400010 	.word	0x20400010
  407680:	20404984 	.word	0x20404984

00407684 <tcp_eff_send_mss>:
 * by using ip_route to determin the netif used to send to the address and
 * calculating the minimum of TCP_MSS and that netif's mtu (if set).
 */
u16_t
tcp_eff_send_mss(u16_t sendmss, ip_addr_t *addr)
{
  407684:	b580      	push	{r7, lr}
  407686:	b084      	sub	sp, #16
  407688:	af00      	add	r7, sp, #0
  40768a:	4603      	mov	r3, r0
  40768c:	6039      	str	r1, [r7, #0]
  40768e:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;

  outif = ip_route(addr);
  407690:	6838      	ldr	r0, [r7, #0]
  407692:	4b0c      	ldr	r3, [pc, #48]	; (4076c4 <tcp_eff_send_mss+0x40>)
  407694:	4798      	blx	r3
  407696:	60f8      	str	r0, [r7, #12]
  if ((outif != NULL) && (outif->mtu != 0)) {
  407698:	68fb      	ldr	r3, [r7, #12]
  40769a:	2b00      	cmp	r3, #0
  40769c:	d00d      	beq.n	4076ba <tcp_eff_send_mss+0x36>
  40769e:	68fb      	ldr	r3, [r7, #12]
  4076a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
  4076a2:	2b00      	cmp	r3, #0
  4076a4:	d009      	beq.n	4076ba <tcp_eff_send_mss+0x36>
    mss_s = outif->mtu - IP_HLEN - TCP_HLEN;
  4076a6:	68fb      	ldr	r3, [r7, #12]
  4076a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
  4076aa:	3b28      	subs	r3, #40	; 0x28
  4076ac:	817b      	strh	r3, [r7, #10]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
  4076ae:	897a      	ldrh	r2, [r7, #10]
  4076b0:	88fb      	ldrh	r3, [r7, #6]
  4076b2:	4293      	cmp	r3, r2
  4076b4:	bf28      	it	cs
  4076b6:	4613      	movcs	r3, r2
  4076b8:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
  4076ba:	88fb      	ldrh	r3, [r7, #6]
}
  4076bc:	4618      	mov	r0, r3
  4076be:	3710      	adds	r7, #16
  4076c0:	46bd      	mov	sp, r7
  4076c2:	bd80      	pop	{r7, pc}
  4076c4:	00404251 	.word	0x00404251

004076c8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the IP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
  4076c8:	b590      	push	{r4, r7, lr}
  4076ca:	b089      	sub	sp, #36	; 0x24
  4076cc:	af02      	add	r7, sp, #8
  4076ce:	6078      	str	r0, [r7, #4]
  4076d0:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  snmp_inc_tcpinsegs();

  iphdr = (struct ip_hdr *)p->payload;
  4076d2:	687b      	ldr	r3, [r7, #4]
  4076d4:	685b      	ldr	r3, [r3, #4]
  4076d6:	4a95      	ldr	r2, [pc, #596]	; (40792c <tcp_input+0x264>)
  4076d8:	6013      	str	r3, [r2, #0]
  tcphdr = (struct tcp_hdr *)((u8_t *)p->payload + IPH_HL(iphdr) * 4);
  4076da:	687b      	ldr	r3, [r7, #4]
  4076dc:	685b      	ldr	r3, [r3, #4]
  4076de:	4a93      	ldr	r2, [pc, #588]	; (40792c <tcp_input+0x264>)
  4076e0:	6812      	ldr	r2, [r2, #0]
  4076e2:	7812      	ldrb	r2, [r2, #0]
  4076e4:	f002 020f 	and.w	r2, r2, #15
  4076e8:	0092      	lsls	r2, r2, #2
  4076ea:	4413      	add	r3, r2
  4076ec:	4a90      	ldr	r2, [pc, #576]	; (407930 <tcp_input+0x268>)
  4076ee:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* remove header from payload */
  if (pbuf_header(p, -((s16_t)(IPH_HL(iphdr) * 4))) || (p->tot_len < sizeof(struct tcp_hdr))) {
  4076f0:	4b8e      	ldr	r3, [pc, #568]	; (40792c <tcp_input+0x264>)
  4076f2:	681b      	ldr	r3, [r3, #0]
  4076f4:	781b      	ldrb	r3, [r3, #0]
  4076f6:	b29b      	uxth	r3, r3
  4076f8:	f003 030f 	and.w	r3, r3, #15
  4076fc:	b29b      	uxth	r3, r3
  4076fe:	009b      	lsls	r3, r3, #2
  407700:	b29b      	uxth	r3, r3
  407702:	425b      	negs	r3, r3
  407704:	b29b      	uxth	r3, r3
  407706:	b21b      	sxth	r3, r3
  407708:	4619      	mov	r1, r3
  40770a:	6878      	ldr	r0, [r7, #4]
  40770c:	4b89      	ldr	r3, [pc, #548]	; (407934 <tcp_input+0x26c>)
  40770e:	4798      	blx	r3
  407710:	4603      	mov	r3, r0
  407712:	2b00      	cmp	r3, #0
  407714:	f040 82ea 	bne.w	407cec <tcp_input+0x624>
  407718:	687b      	ldr	r3, [r7, #4]
  40771a:	891b      	ldrh	r3, [r3, #8]
  40771c:	2b13      	cmp	r3, #19
  40771e:	f240 82e5 	bls.w	407cec <tcp_input+0x624>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(&current_iphdr_dest, inp) ||
  407722:	4b85      	ldr	r3, [pc, #532]	; (407938 <tcp_input+0x270>)
  407724:	681b      	ldr	r3, [r3, #0]
  407726:	6839      	ldr	r1, [r7, #0]
  407728:	4618      	mov	r0, r3
  40772a:	4b84      	ldr	r3, [pc, #528]	; (40793c <tcp_input+0x274>)
  40772c:	4798      	blx	r3
  40772e:	4603      	mov	r3, r0
  407730:	2b00      	cmp	r3, #0
  407732:	f040 82db 	bne.w	407cec <tcp_input+0x624>
      ip_addr_ismulticast(&current_iphdr_dest)) {
  407736:	4b80      	ldr	r3, [pc, #512]	; (407938 <tcp_input+0x270>)
  407738:	681b      	ldr	r3, [r3, #0]
  40773a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(&current_iphdr_dest, inp) ||
  40773e:	2be0      	cmp	r3, #224	; 0xe0
  407740:	f000 82d4 	beq.w	407cec <tcp_input+0x624>
    goto dropped;
  }

#if CHECKSUM_CHECK_TCP
  /* Verify TCP checksum. */
  if (inet_chksum_pseudo(p, ip_current_src_addr(), ip_current_dest_addr(),
  407744:	687b      	ldr	r3, [r7, #4]
  407746:	891b      	ldrh	r3, [r3, #8]
  407748:	9300      	str	r3, [sp, #0]
  40774a:	2306      	movs	r3, #6
  40774c:	4a7a      	ldr	r2, [pc, #488]	; (407938 <tcp_input+0x270>)
  40774e:	497c      	ldr	r1, [pc, #496]	; (407940 <tcp_input+0x278>)
  407750:	6878      	ldr	r0, [r7, #4]
  407752:	4c7c      	ldr	r4, [pc, #496]	; (407944 <tcp_input+0x27c>)
  407754:	47a0      	blx	r4
  407756:	4603      	mov	r3, r0
  407758:	2b00      	cmp	r3, #0
  40775a:	f040 82c4 	bne.w	407ce6 <tcp_input+0x61e>
  }
#endif

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  hdrlen = TCPH_HDRLEN(tcphdr);
  40775e:	4b74      	ldr	r3, [pc, #464]	; (407930 <tcp_input+0x268>)
  407760:	681b      	ldr	r3, [r3, #0]
  407762:	899b      	ldrh	r3, [r3, #12]
  407764:	b29b      	uxth	r3, r3
  407766:	4618      	mov	r0, r3
  407768:	4b77      	ldr	r3, [pc, #476]	; (407948 <tcp_input+0x280>)
  40776a:	4798      	blx	r3
  40776c:	4603      	mov	r3, r0
  40776e:	0b1b      	lsrs	r3, r3, #12
  407770:	b29b      	uxth	r3, r3
  407772:	72bb      	strb	r3, [r7, #10]
  if(pbuf_header(p, -(hdrlen * 4))){
  407774:	7abb      	ldrb	r3, [r7, #10]
  407776:	b29b      	uxth	r3, r3
  407778:	461a      	mov	r2, r3
  40777a:	0392      	lsls	r2, r2, #14
  40777c:	1ad3      	subs	r3, r2, r3
  40777e:	009b      	lsls	r3, r3, #2
  407780:	b29b      	uxth	r3, r3
  407782:	b21b      	sxth	r3, r3
  407784:	4619      	mov	r1, r3
  407786:	6878      	ldr	r0, [r7, #4]
  407788:	4b6a      	ldr	r3, [pc, #424]	; (407934 <tcp_input+0x26c>)
  40778a:	4798      	blx	r3
  40778c:	4603      	mov	r3, r0
  40778e:	2b00      	cmp	r3, #0
  407790:	f040 82ab 	bne.w	407cea <tcp_input+0x622>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = ntohs(tcphdr->src);
  407794:	4b66      	ldr	r3, [pc, #408]	; (407930 <tcp_input+0x268>)
  407796:	681c      	ldr	r4, [r3, #0]
  407798:	4b65      	ldr	r3, [pc, #404]	; (407930 <tcp_input+0x268>)
  40779a:	681b      	ldr	r3, [r3, #0]
  40779c:	881b      	ldrh	r3, [r3, #0]
  40779e:	b29b      	uxth	r3, r3
  4077a0:	4618      	mov	r0, r3
  4077a2:	4b69      	ldr	r3, [pc, #420]	; (407948 <tcp_input+0x280>)
  4077a4:	4798      	blx	r3
  4077a6:	4603      	mov	r3, r0
  4077a8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = ntohs(tcphdr->dest);
  4077aa:	4b61      	ldr	r3, [pc, #388]	; (407930 <tcp_input+0x268>)
  4077ac:	681c      	ldr	r4, [r3, #0]
  4077ae:	4b60      	ldr	r3, [pc, #384]	; (407930 <tcp_input+0x268>)
  4077b0:	681b      	ldr	r3, [r3, #0]
  4077b2:	885b      	ldrh	r3, [r3, #2]
  4077b4:	b29b      	uxth	r3, r3
  4077b6:	4618      	mov	r0, r3
  4077b8:	4b63      	ldr	r3, [pc, #396]	; (407948 <tcp_input+0x280>)
  4077ba:	4798      	blx	r3
  4077bc:	4603      	mov	r3, r0
  4077be:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = ntohl(tcphdr->seqno);
  4077c0:	4b5b      	ldr	r3, [pc, #364]	; (407930 <tcp_input+0x268>)
  4077c2:	681c      	ldr	r4, [r3, #0]
  4077c4:	4b5a      	ldr	r3, [pc, #360]	; (407930 <tcp_input+0x268>)
  4077c6:	681b      	ldr	r3, [r3, #0]
  4077c8:	685b      	ldr	r3, [r3, #4]
  4077ca:	4618      	mov	r0, r3
  4077cc:	4b5f      	ldr	r3, [pc, #380]	; (40794c <tcp_input+0x284>)
  4077ce:	4798      	blx	r3
  4077d0:	4603      	mov	r3, r0
  4077d2:	6063      	str	r3, [r4, #4]
  4077d4:	6863      	ldr	r3, [r4, #4]
  4077d6:	4a5e      	ldr	r2, [pc, #376]	; (407950 <tcp_input+0x288>)
  4077d8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = ntohl(tcphdr->ackno);
  4077da:	4b55      	ldr	r3, [pc, #340]	; (407930 <tcp_input+0x268>)
  4077dc:	681c      	ldr	r4, [r3, #0]
  4077de:	4b54      	ldr	r3, [pc, #336]	; (407930 <tcp_input+0x268>)
  4077e0:	681b      	ldr	r3, [r3, #0]
  4077e2:	689b      	ldr	r3, [r3, #8]
  4077e4:	4618      	mov	r0, r3
  4077e6:	4b59      	ldr	r3, [pc, #356]	; (40794c <tcp_input+0x284>)
  4077e8:	4798      	blx	r3
  4077ea:	4603      	mov	r3, r0
  4077ec:	60a3      	str	r3, [r4, #8]
  4077ee:	68a3      	ldr	r3, [r4, #8]
  4077f0:	4a58      	ldr	r2, [pc, #352]	; (407954 <tcp_input+0x28c>)
  4077f2:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = ntohs(tcphdr->wnd);
  4077f4:	4b4e      	ldr	r3, [pc, #312]	; (407930 <tcp_input+0x268>)
  4077f6:	681c      	ldr	r4, [r3, #0]
  4077f8:	4b4d      	ldr	r3, [pc, #308]	; (407930 <tcp_input+0x268>)
  4077fa:	681b      	ldr	r3, [r3, #0]
  4077fc:	89db      	ldrh	r3, [r3, #14]
  4077fe:	b29b      	uxth	r3, r3
  407800:	4618      	mov	r0, r3
  407802:	4b51      	ldr	r3, [pc, #324]	; (407948 <tcp_input+0x280>)
  407804:	4798      	blx	r3
  407806:	4603      	mov	r3, r0
  407808:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
  40780a:	4b49      	ldr	r3, [pc, #292]	; (407930 <tcp_input+0x268>)
  40780c:	681b      	ldr	r3, [r3, #0]
  40780e:	899b      	ldrh	r3, [r3, #12]
  407810:	b29b      	uxth	r3, r3
  407812:	4618      	mov	r0, r3
  407814:	4b4c      	ldr	r3, [pc, #304]	; (407948 <tcp_input+0x280>)
  407816:	4798      	blx	r3
  407818:	4603      	mov	r3, r0
  40781a:	b2db      	uxtb	r3, r3
  40781c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  407820:	b2da      	uxtb	r2, r3
  407822:	4b4d      	ldr	r3, [pc, #308]	; (407958 <tcp_input+0x290>)
  407824:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
  407826:	687b      	ldr	r3, [r7, #4]
  407828:	891a      	ldrh	r2, [r3, #8]
  40782a:	4b4b      	ldr	r3, [pc, #300]	; (407958 <tcp_input+0x290>)
  40782c:	781b      	ldrb	r3, [r3, #0]
  40782e:	f003 0303 	and.w	r3, r3, #3
  407832:	2b00      	cmp	r3, #0
  407834:	bf14      	ite	ne
  407836:	2301      	movne	r3, #1
  407838:	2300      	moveq	r3, #0
  40783a:	b2db      	uxtb	r3, r3
  40783c:	b29b      	uxth	r3, r3
  40783e:	4413      	add	r3, r2
  407840:	b29a      	uxth	r2, r3
  407842:	4b46      	ldr	r3, [pc, #280]	; (40795c <tcp_input+0x294>)
  407844:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
  407846:	2300      	movs	r3, #0
  407848:	613b      	str	r3, [r7, #16]

  
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  40784a:	4b45      	ldr	r3, [pc, #276]	; (407960 <tcp_input+0x298>)
  40784c:	681b      	ldr	r3, [r3, #0]
  40784e:	617b      	str	r3, [r7, #20]
  407850:	e02f      	b.n	4078b2 <tcp_input+0x1ea>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
    if (pcb->remote_port == tcphdr->src &&
  407852:	697b      	ldr	r3, [r7, #20]
  407854:	8b9a      	ldrh	r2, [r3, #28]
  407856:	4b36      	ldr	r3, [pc, #216]	; (407930 <tcp_input+0x268>)
  407858:	681b      	ldr	r3, [r3, #0]
  40785a:	881b      	ldrh	r3, [r3, #0]
  40785c:	b29b      	uxth	r3, r3
  40785e:	429a      	cmp	r2, r3
  407860:	d122      	bne.n	4078a8 <tcp_input+0x1e0>
       pcb->local_port == tcphdr->dest &&
  407862:	697b      	ldr	r3, [r7, #20]
  407864:	8b5a      	ldrh	r2, [r3, #26]
  407866:	4b32      	ldr	r3, [pc, #200]	; (407930 <tcp_input+0x268>)
  407868:	681b      	ldr	r3, [r3, #0]
  40786a:	885b      	ldrh	r3, [r3, #2]
  40786c:	b29b      	uxth	r3, r3
  
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
    if (pcb->remote_port == tcphdr->src &&
  40786e:	429a      	cmp	r2, r3
  407870:	d11a      	bne.n	4078a8 <tcp_input+0x1e0>
       pcb->local_port == tcphdr->dest &&
       ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
  407872:	697b      	ldr	r3, [r7, #20]
  407874:	685a      	ldr	r2, [r3, #4]
  407876:	4b32      	ldr	r3, [pc, #200]	; (407940 <tcp_input+0x278>)
  407878:	681b      	ldr	r3, [r3, #0]
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
    if (pcb->remote_port == tcphdr->src &&
       pcb->local_port == tcphdr->dest &&
  40787a:	429a      	cmp	r2, r3
  40787c:	d114      	bne.n	4078a8 <tcp_input+0x1e0>
       ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
       ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest)) {
  40787e:	697b      	ldr	r3, [r7, #20]
  407880:	681a      	ldr	r2, [r3, #0]
  407882:	4b2d      	ldr	r3, [pc, #180]	; (407938 <tcp_input+0x270>)
  407884:	681b      	ldr	r3, [r3, #0]
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
    if (pcb->remote_port == tcphdr->src &&
       pcb->local_port == tcphdr->dest &&
       ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
  407886:	429a      	cmp	r2, r3
  407888:	d10e      	bne.n	4078a8 <tcp_input+0x1e0>

      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
      if (prev != NULL) {
  40788a:	693b      	ldr	r3, [r7, #16]
  40788c:	2b00      	cmp	r3, #0
  40788e:	d014      	beq.n	4078ba <tcp_input+0x1f2>
        prev->next = pcb->next;
  407890:	697b      	ldr	r3, [r7, #20]
  407892:	68da      	ldr	r2, [r3, #12]
  407894:	693b      	ldr	r3, [r7, #16]
  407896:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
  407898:	4b31      	ldr	r3, [pc, #196]	; (407960 <tcp_input+0x298>)
  40789a:	681a      	ldr	r2, [r3, #0]
  40789c:	697b      	ldr	r3, [r7, #20]
  40789e:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
  4078a0:	4a2f      	ldr	r2, [pc, #188]	; (407960 <tcp_input+0x298>)
  4078a2:	697b      	ldr	r3, [r7, #20]
  4078a4:	6013      	str	r3, [r2, #0]
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
      break;
  4078a6:	e008      	b.n	4078ba <tcp_input+0x1f2>
    }
    prev = pcb;
  4078a8:	697b      	ldr	r3, [r7, #20]
  4078aa:	613b      	str	r3, [r7, #16]
  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;

  
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  4078ac:	697b      	ldr	r3, [r7, #20]
  4078ae:	68db      	ldr	r3, [r3, #12]
  4078b0:	617b      	str	r3, [r7, #20]
  4078b2:	697b      	ldr	r3, [r7, #20]
  4078b4:	2b00      	cmp	r3, #0
  4078b6:	d1cc      	bne.n	407852 <tcp_input+0x18a>
  4078b8:	e000      	b.n	4078bc <tcp_input+0x1f4>
        prev->next = pcb->next;
        pcb->next = tcp_active_pcbs;
        tcp_active_pcbs = pcb;
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
      break;
  4078ba:	bf00      	nop
    }
    prev = pcb;
  }

  if (pcb == NULL) {
  4078bc:	697b      	ldr	r3, [r7, #20]
  4078be:	2b00      	cmp	r3, #0
  4078c0:	f040 808d 	bne.w	4079de <tcp_input+0x316>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
  4078c4:	4b27      	ldr	r3, [pc, #156]	; (407964 <tcp_input+0x29c>)
  4078c6:	681b      	ldr	r3, [r3, #0]
  4078c8:	617b      	str	r3, [r7, #20]
  4078ca:	e025      	b.n	407918 <tcp_input+0x250>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
      if (pcb->remote_port == tcphdr->src &&
  4078cc:	697b      	ldr	r3, [r7, #20]
  4078ce:	8b9a      	ldrh	r2, [r3, #28]
  4078d0:	4b17      	ldr	r3, [pc, #92]	; (407930 <tcp_input+0x268>)
  4078d2:	681b      	ldr	r3, [r3, #0]
  4078d4:	881b      	ldrh	r3, [r3, #0]
  4078d6:	b29b      	uxth	r3, r3
  4078d8:	429a      	cmp	r2, r3
  4078da:	d11a      	bne.n	407912 <tcp_input+0x24a>
         pcb->local_port == tcphdr->dest &&
  4078dc:	697b      	ldr	r3, [r7, #20]
  4078de:	8b5a      	ldrh	r2, [r3, #26]
  4078e0:	4b13      	ldr	r3, [pc, #76]	; (407930 <tcp_input+0x268>)
  4078e2:	681b      	ldr	r3, [r3, #0]
  4078e4:	885b      	ldrh	r3, [r3, #2]
  4078e6:	b29b      	uxth	r3, r3
  if (pcb == NULL) {
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
      if (pcb->remote_port == tcphdr->src &&
  4078e8:	429a      	cmp	r2, r3
  4078ea:	d112      	bne.n	407912 <tcp_input+0x24a>
         pcb->local_port == tcphdr->dest &&
         ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
  4078ec:	697b      	ldr	r3, [r7, #20]
  4078ee:	685a      	ldr	r2, [r3, #4]
  4078f0:	4b13      	ldr	r3, [pc, #76]	; (407940 <tcp_input+0x278>)
  4078f2:	681b      	ldr	r3, [r3, #0]
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
      if (pcb->remote_port == tcphdr->src &&
         pcb->local_port == tcphdr->dest &&
  4078f4:	429a      	cmp	r2, r3
  4078f6:	d10c      	bne.n	407912 <tcp_input+0x24a>
         ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
         ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest)) {
  4078f8:	697b      	ldr	r3, [r7, #20]
  4078fa:	681a      	ldr	r2, [r3, #0]
  4078fc:	4b0e      	ldr	r3, [pc, #56]	; (407938 <tcp_input+0x270>)
  4078fe:	681b      	ldr	r3, [r3, #0]
       in the TIME-WAIT state. */
    for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
      if (pcb->remote_port == tcphdr->src &&
         pcb->local_port == tcphdr->dest &&
         ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
  407900:	429a      	cmp	r2, r3
  407902:	d106      	bne.n	407912 <tcp_input+0x24a>
         ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest)) {
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
  407904:	6978      	ldr	r0, [r7, #20]
  407906:	4b18      	ldr	r3, [pc, #96]	; (407968 <tcp_input+0x2a0>)
  407908:	4798      	blx	r3
        pbuf_free(p);
  40790a:	6878      	ldr	r0, [r7, #4]
  40790c:	4b17      	ldr	r3, [pc, #92]	; (40796c <tcp_input+0x2a4>)
  40790e:	4798      	blx	r3
        return;
  407910:	e1f1      	b.n	407cf6 <tcp_input+0x62e>
  }

  if (pcb == NULL) {
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
  407912:	697b      	ldr	r3, [r7, #20]
  407914:	68db      	ldr	r3, [r3, #12]
  407916:	617b      	str	r3, [r7, #20]
  407918:	697b      	ldr	r3, [r7, #20]
  40791a:	2b00      	cmp	r3, #0
  40791c:	d1d6      	bne.n	4078cc <tcp_input+0x204>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
  40791e:	2300      	movs	r3, #0
  407920:	613b      	str	r3, [r7, #16]
    for(lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
  407922:	4b13      	ldr	r3, [pc, #76]	; (407970 <tcp_input+0x2a8>)
  407924:	681b      	ldr	r3, [r3, #0]
  407926:	60fb      	str	r3, [r7, #12]
  407928:	e03e      	b.n	4079a8 <tcp_input+0x2e0>
  40792a:	bf00      	nop
  40792c:	204025c0 	.word	0x204025c0
  407930:	204025bc 	.word	0x204025bc
  407934:	00405f8d 	.word	0x00405f8d
  407938:	20403954 	.word	0x20403954
  40793c:	00404745 	.word	0x00404745
  407940:	2040394c 	.word	0x2040394c
  407944:	0040407d 	.word	0x0040407d
  407948:	00402335 	.word	0x00402335
  40794c:	00402389 	.word	0x00402389
  407950:	204025c4 	.word	0x204025c4
  407954:	204025c8 	.word	0x204025c8
  407958:	204025cc 	.word	0x204025cc
  40795c:	204025ce 	.word	0x204025ce
  407960:	20404980 	.word	0x20404980
  407964:	20404994 	.word	0x20404994
  407968:	00407ee5 	.word	0x00407ee5
  40796c:	00406069 	.word	0x00406069
  407970:	20404988 	.word	0x20404988
      if (lpcb->local_port == tcphdr->dest) {
  407974:	68fb      	ldr	r3, [r7, #12]
  407976:	8b5a      	ldrh	r2, [r3, #26]
  407978:	4b94      	ldr	r3, [pc, #592]	; (407bcc <tcp_input+0x504>)
  40797a:	681b      	ldr	r3, [r3, #0]
  40797c:	885b      	ldrh	r3, [r3, #2]
  40797e:	b29b      	uxth	r3, r3
  407980:	429a      	cmp	r2, r3
  407982:	d10c      	bne.n	40799e <tcp_input+0x2d6>
          /* found an ANY-match */
          lpcb_any = lpcb;
          lpcb_prev = prev;
        }
#else /* SO_REUSE */
        if (ip_addr_cmp(&(lpcb->local_ip), &current_iphdr_dest) ||
  407984:	68fb      	ldr	r3, [r7, #12]
  407986:	681a      	ldr	r2, [r3, #0]
  407988:	4b91      	ldr	r3, [pc, #580]	; (407bd0 <tcp_input+0x508>)
  40798a:	681b      	ldr	r3, [r3, #0]
  40798c:	429a      	cmp	r2, r3
  40798e:	d00e      	beq.n	4079ae <tcp_input+0x2e6>
            ip_addr_isany(&(lpcb->local_ip))) {
  407990:	68fb      	ldr	r3, [r7, #12]
          /* found an ANY-match */
          lpcb_any = lpcb;
          lpcb_prev = prev;
        }
#else /* SO_REUSE */
        if (ip_addr_cmp(&(lpcb->local_ip), &current_iphdr_dest) ||
  407992:	2b00      	cmp	r3, #0
  407994:	d00b      	beq.n	4079ae <tcp_input+0x2e6>
            ip_addr_isany(&(lpcb->local_ip))) {
  407996:	68fb      	ldr	r3, [r7, #12]
  407998:	681b      	ldr	r3, [r3, #0]
  40799a:	2b00      	cmp	r3, #0
  40799c:	d007      	beq.n	4079ae <tcp_input+0x2e6>
          /* found a match */
          break;
        }
#endif /* SO_REUSE */
      }
      prev = (struct tcp_pcb *)lpcb;
  40799e:	68fb      	ldr	r3, [r7, #12]
  4079a0:	613b      	str	r3, [r7, #16]
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
    for(lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
  4079a2:	68fb      	ldr	r3, [r7, #12]
  4079a4:	68db      	ldr	r3, [r3, #12]
  4079a6:	60fb      	str	r3, [r7, #12]
  4079a8:	68fb      	ldr	r3, [r7, #12]
  4079aa:	2b00      	cmp	r3, #0
  4079ac:	d1e2      	bne.n	407974 <tcp_input+0x2ac>
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
  4079ae:	68fb      	ldr	r3, [r7, #12]
  4079b0:	2b00      	cmp	r3, #0
  4079b2:	d014      	beq.n	4079de <tcp_input+0x316>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
  4079b4:	693b      	ldr	r3, [r7, #16]
  4079b6:	2b00      	cmp	r3, #0
  4079b8:	d00a      	beq.n	4079d0 <tcp_input+0x308>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
  4079ba:	68fb      	ldr	r3, [r7, #12]
  4079bc:	68da      	ldr	r2, [r3, #12]
  4079be:	693b      	ldr	r3, [r7, #16]
  4079c0:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
  4079c2:	4b84      	ldr	r3, [pc, #528]	; (407bd4 <tcp_input+0x50c>)
  4079c4:	681a      	ldr	r2, [r3, #0]
  4079c6:	68fb      	ldr	r3, [r7, #12]
  4079c8:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
  4079ca:	4a82      	ldr	r2, [pc, #520]	; (407bd4 <tcp_input+0x50c>)
  4079cc:	68fb      	ldr	r3, [r7, #12]
  4079ce:	6013      	str	r3, [r2, #0]
      }
    
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
  4079d0:	68f8      	ldr	r0, [r7, #12]
  4079d2:	4b81      	ldr	r3, [pc, #516]	; (407bd8 <tcp_input+0x510>)
  4079d4:	4798      	blx	r3
      pbuf_free(p);
  4079d6:	6878      	ldr	r0, [r7, #4]
  4079d8:	4b80      	ldr	r3, [pc, #512]	; (407bdc <tcp_input+0x514>)
  4079da:	4798      	blx	r3
      return;
  4079dc:	e18b      	b.n	407cf6 <tcp_input+0x62e>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
  4079de:	697b      	ldr	r3, [r7, #20]
  4079e0:	2b00      	cmp	r3, #0
  4079e2:	f000 815a 	beq.w	407c9a <tcp_input+0x5d2>
    tcp_debug_print_state(pcb->state);
#endif /* TCP_DEBUG */
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
  4079e6:	4b7e      	ldr	r3, [pc, #504]	; (407be0 <tcp_input+0x518>)
  4079e8:	2200      	movs	r2, #0
  4079ea:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
  4079ec:	687b      	ldr	r3, [r7, #4]
  4079ee:	891a      	ldrh	r2, [r3, #8]
  4079f0:	4b7b      	ldr	r3, [pc, #492]	; (407be0 <tcp_input+0x518>)
  4079f2:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
  4079f4:	4a7a      	ldr	r2, [pc, #488]	; (407be0 <tcp_input+0x518>)
  4079f6:	687b      	ldr	r3, [r7, #4]
  4079f8:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
  4079fa:	4b74      	ldr	r3, [pc, #464]	; (407bcc <tcp_input+0x504>)
  4079fc:	681b      	ldr	r3, [r3, #0]
  4079fe:	4a78      	ldr	r2, [pc, #480]	; (407be0 <tcp_input+0x518>)
  407a00:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
  407a02:	4b78      	ldr	r3, [pc, #480]	; (407be4 <tcp_input+0x51c>)
  407a04:	2200      	movs	r2, #0
  407a06:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
  407a08:	4b77      	ldr	r3, [pc, #476]	; (407be8 <tcp_input+0x520>)
  407a0a:	2200      	movs	r2, #0
  407a0c:	701a      	strb	r2, [r3, #0]

    if (flags & TCP_PSH) {
  407a0e:	4b77      	ldr	r3, [pc, #476]	; (407bec <tcp_input+0x524>)
  407a10:	781b      	ldrb	r3, [r3, #0]
  407a12:	f003 0308 	and.w	r3, r3, #8
  407a16:	2b00      	cmp	r3, #0
  407a18:	d006      	beq.n	407a28 <tcp_input+0x360>
      p->flags |= PBUF_FLAG_PUSH;
  407a1a:	687b      	ldr	r3, [r7, #4]
  407a1c:	7b5b      	ldrb	r3, [r3, #13]
  407a1e:	f043 0301 	orr.w	r3, r3, #1
  407a22:	b2da      	uxtb	r2, r3
  407a24:	687b      	ldr	r3, [r7, #4]
  407a26:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
  407a28:	697b      	ldr	r3, [r7, #20]
  407a2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
  407a2c:	2b00      	cmp	r3, #0
  407a2e:	d010      	beq.n	407a52 <tcp_input+0x38a>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
  407a30:	6978      	ldr	r0, [r7, #20]
  407a32:	4b6f      	ldr	r3, [pc, #444]	; (407bf0 <tcp_input+0x528>)
  407a34:	4798      	blx	r3
  407a36:	4603      	mov	r3, r0
  407a38:	f113 0f0a 	cmn.w	r3, #10
  407a3c:	f000 811a 	beq.w	407c74 <tcp_input+0x5ac>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
  407a40:	697b      	ldr	r3, [r7, #20]
  407a42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      p->flags |= PBUF_FLAG_PUSH;
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
  407a44:	2b00      	cmp	r3, #0
  407a46:	d004      	beq.n	407a52 <tcp_input+0x38a>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
  407a48:	4b6a      	ldr	r3, [pc, #424]	; (407bf4 <tcp_input+0x52c>)
  407a4a:	881b      	ldrh	r3, [r3, #0]
  407a4c:	2b00      	cmp	r3, #0
  407a4e:	f040 8111 	bne.w	407c74 <tcp_input+0x5ac>
        TCP_STATS_INC(tcp.drop);
        snmp_inc_tcpinerrs();
        goto aborted;
      }
    }
    tcp_input_pcb = pcb;
  407a52:	4a69      	ldr	r2, [pc, #420]	; (407bf8 <tcp_input+0x530>)
  407a54:	697b      	ldr	r3, [r7, #20]
  407a56:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
  407a58:	6978      	ldr	r0, [r7, #20]
  407a5a:	4b68      	ldr	r3, [pc, #416]	; (407bfc <tcp_input+0x534>)
  407a5c:	4798      	blx	r3
  407a5e:	4603      	mov	r3, r0
  407a60:	72fb      	strb	r3, [r7, #11]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
  407a62:	f997 300b 	ldrsb.w	r3, [r7, #11]
  407a66:	f113 0f0a 	cmn.w	r3, #10
  407a6a:	f000 8103 	beq.w	407c74 <tcp_input+0x5ac>
      if (recv_flags & TF_RESET) {
  407a6e:	4b5e      	ldr	r3, [pc, #376]	; (407be8 <tcp_input+0x520>)
  407a70:	781b      	ldrb	r3, [r3, #0]
  407a72:	f003 0308 	and.w	r3, r3, #8
  407a76:	2b00      	cmp	r3, #0
  407a78:	d016      	beq.n	407aa8 <tcp_input+0x3e0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->errf, pcb->callback_arg, ERR_RST);
  407a7a:	697b      	ldr	r3, [r7, #20]
  407a7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
  407a80:	2b00      	cmp	r3, #0
  407a82:	d008      	beq.n	407a96 <tcp_input+0x3ce>
  407a84:	697b      	ldr	r3, [r7, #20]
  407a86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
  407a8a:	697a      	ldr	r2, [r7, #20]
  407a8c:	6912      	ldr	r2, [r2, #16]
  407a8e:	f06f 010a 	mvn.w	r1, #10
  407a92:	4610      	mov	r0, r2
  407a94:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
  407a96:	6979      	ldr	r1, [r7, #20]
  407a98:	4859      	ldr	r0, [pc, #356]	; (407c00 <tcp_input+0x538>)
  407a9a:	4b5a      	ldr	r3, [pc, #360]	; (407c04 <tcp_input+0x53c>)
  407a9c:	4798      	blx	r3
        memp_free(MEMP_TCP_PCB, pcb);
  407a9e:	6979      	ldr	r1, [r7, #20]
  407aa0:	2001      	movs	r0, #1
  407aa2:	4b59      	ldr	r3, [pc, #356]	; (407c08 <tcp_input+0x540>)
  407aa4:	4798      	blx	r3
  407aa6:	e0e5      	b.n	407c74 <tcp_input+0x5ac>
      } else if (recv_flags & TF_CLOSED) {
  407aa8:	4b4f      	ldr	r3, [pc, #316]	; (407be8 <tcp_input+0x520>)
  407aaa:	781b      	ldrb	r3, [r3, #0]
  407aac:	f003 0310 	and.w	r3, r3, #16
  407ab0:	2b00      	cmp	r3, #0
  407ab2:	d01c      	beq.n	407aee <tcp_input+0x426>
        /* The connection has been closed and we will deallocate the
           PCB. */
        if (!(pcb->flags & TF_RXCLOSED)) {
  407ab4:	697b      	ldr	r3, [r7, #20]
  407ab6:	7f9b      	ldrb	r3, [r3, #30]
  407ab8:	f003 0310 	and.w	r3, r3, #16
  407abc:	2b00      	cmp	r3, #0
  407abe:	d10d      	bne.n	407adc <tcp_input+0x414>
          /* Connection closed although the application has only shut down the
             tx side: call the PCB's err callback and indicate the closure to
             ensure the application doesn't continue using the PCB. */
          TCP_EVENT_ERR(pcb->errf, pcb->callback_arg, ERR_CLSD);
  407ac0:	697b      	ldr	r3, [r7, #20]
  407ac2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
  407ac6:	2b00      	cmp	r3, #0
  407ac8:	d008      	beq.n	407adc <tcp_input+0x414>
  407aca:	697b      	ldr	r3, [r7, #20]
  407acc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
  407ad0:	697a      	ldr	r2, [r7, #20]
  407ad2:	6912      	ldr	r2, [r2, #16]
  407ad4:	f06f 010b 	mvn.w	r1, #11
  407ad8:	4610      	mov	r0, r2
  407ada:	4798      	blx	r3
        }
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
  407adc:	6979      	ldr	r1, [r7, #20]
  407ade:	4848      	ldr	r0, [pc, #288]	; (407c00 <tcp_input+0x538>)
  407ae0:	4b48      	ldr	r3, [pc, #288]	; (407c04 <tcp_input+0x53c>)
  407ae2:	4798      	blx	r3
        memp_free(MEMP_TCP_PCB, pcb);
  407ae4:	6979      	ldr	r1, [r7, #20]
  407ae6:	2001      	movs	r0, #1
  407ae8:	4b47      	ldr	r3, [pc, #284]	; (407c08 <tcp_input+0x540>)
  407aea:	4798      	blx	r3
  407aec:	e0c2      	b.n	407c74 <tcp_input+0x5ac>
      } else {
        err = ERR_OK;
  407aee:	2300      	movs	r3, #0
  407af0:	72fb      	strb	r3, [r7, #11]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (pcb->acked > 0) {
  407af2:	697b      	ldr	r3, [r7, #20]
  407af4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
  407af8:	2b00      	cmp	r3, #0
  407afa:	d017      	beq.n	407b2c <tcp_input+0x464>
          TCP_EVENT_SENT(pcb, pcb->acked, err);
  407afc:	697b      	ldr	r3, [r7, #20]
  407afe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
  407b00:	2b00      	cmp	r3, #0
  407b02:	d00b      	beq.n	407b1c <tcp_input+0x454>
  407b04:	697b      	ldr	r3, [r7, #20]
  407b06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
  407b08:	697a      	ldr	r2, [r7, #20]
  407b0a:	6910      	ldr	r0, [r2, #16]
  407b0c:	697a      	ldr	r2, [r7, #20]
  407b0e:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
  407b12:	6979      	ldr	r1, [r7, #20]
  407b14:	4798      	blx	r3
  407b16:	4603      	mov	r3, r0
  407b18:	72fb      	strb	r3, [r7, #11]
  407b1a:	e001      	b.n	407b20 <tcp_input+0x458>
  407b1c:	2300      	movs	r3, #0
  407b1e:	72fb      	strb	r3, [r7, #11]
          if (err == ERR_ABRT) {
  407b20:	f997 300b 	ldrsb.w	r3, [r7, #11]
  407b24:	f113 0f0a 	cmn.w	r3, #10
  407b28:	f000 809f 	beq.w	407c6a <tcp_input+0x5a2>
            goto aborted;
          }
        }

        if (recv_data != NULL) {
  407b2c:	4b2d      	ldr	r3, [pc, #180]	; (407be4 <tcp_input+0x51c>)
  407b2e:	681b      	ldr	r3, [r3, #0]
  407b30:	2b00      	cmp	r3, #0
  407b32:	d036      	beq.n	407ba2 <tcp_input+0x4da>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
          if (pcb->flags & TF_RXCLOSED) {
  407b34:	697b      	ldr	r3, [r7, #20]
  407b36:	7f9b      	ldrb	r3, [r3, #30]
  407b38:	f003 0310 	and.w	r3, r3, #16
  407b3c:	2b00      	cmp	r3, #0
  407b3e:	d008      	beq.n	407b52 <tcp_input+0x48a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
  407b40:	4b28      	ldr	r3, [pc, #160]	; (407be4 <tcp_input+0x51c>)
  407b42:	681b      	ldr	r3, [r3, #0]
  407b44:	4618      	mov	r0, r3
  407b46:	4b25      	ldr	r3, [pc, #148]	; (407bdc <tcp_input+0x514>)
  407b48:	4798      	blx	r3
            tcp_abort(pcb);
  407b4a:	6978      	ldr	r0, [r7, #20]
  407b4c:	4b2f      	ldr	r3, [pc, #188]	; (407c0c <tcp_input+0x544>)
  407b4e:	4798      	blx	r3
            goto aborted;
  407b50:	e090      	b.n	407c74 <tcp_input+0x5ac>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
  407b52:	697b      	ldr	r3, [r7, #20]
  407b54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
  407b58:	2b00      	cmp	r3, #0
  407b5a:	d00c      	beq.n	407b76 <tcp_input+0x4ae>
  407b5c:	697b      	ldr	r3, [r7, #20]
  407b5e:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
  407b62:	697b      	ldr	r3, [r7, #20]
  407b64:	6918      	ldr	r0, [r3, #16]
  407b66:	4b1f      	ldr	r3, [pc, #124]	; (407be4 <tcp_input+0x51c>)
  407b68:	681a      	ldr	r2, [r3, #0]
  407b6a:	2300      	movs	r3, #0
  407b6c:	6979      	ldr	r1, [r7, #20]
  407b6e:	47a0      	blx	r4
  407b70:	4603      	mov	r3, r0
  407b72:	72fb      	strb	r3, [r7, #11]
  407b74:	e008      	b.n	407b88 <tcp_input+0x4c0>
  407b76:	4b1b      	ldr	r3, [pc, #108]	; (407be4 <tcp_input+0x51c>)
  407b78:	681a      	ldr	r2, [r3, #0]
  407b7a:	2300      	movs	r3, #0
  407b7c:	6979      	ldr	r1, [r7, #20]
  407b7e:	2000      	movs	r0, #0
  407b80:	4c23      	ldr	r4, [pc, #140]	; (407c10 <tcp_input+0x548>)
  407b82:	47a0      	blx	r4
  407b84:	4603      	mov	r3, r0
  407b86:	72fb      	strb	r3, [r7, #11]
          if (err == ERR_ABRT) {
  407b88:	f997 300b 	ldrsb.w	r3, [r7, #11]
  407b8c:	f113 0f0a 	cmn.w	r3, #10
  407b90:	d06d      	beq.n	407c6e <tcp_input+0x5a6>
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
  407b92:	f997 300b 	ldrsb.w	r3, [r7, #11]
  407b96:	2b00      	cmp	r3, #0
  407b98:	d003      	beq.n	407ba2 <tcp_input+0x4da>
            pcb->refused_data = recv_data;
  407b9a:	4b12      	ldr	r3, [pc, #72]	; (407be4 <tcp_input+0x51c>)
  407b9c:	681a      	ldr	r2, [r3, #0]
  407b9e:	697b      	ldr	r3, [r7, #20]
  407ba0:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
  407ba2:	4b11      	ldr	r3, [pc, #68]	; (407be8 <tcp_input+0x520>)
  407ba4:	781b      	ldrb	r3, [r3, #0]
  407ba6:	f003 0320 	and.w	r3, r3, #32
  407baa:	2b00      	cmp	r3, #0
  407bac:	d056      	beq.n	407c5c <tcp_input+0x594>
          if (pcb->refused_data != NULL) {
  407bae:	697b      	ldr	r3, [r7, #20]
  407bb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
  407bb2:	2b00      	cmp	r3, #0
  407bb4:	d02e      	beq.n	407c14 <tcp_input+0x54c>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
  407bb6:	697b      	ldr	r3, [r7, #20]
  407bb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
  407bba:	697a      	ldr	r2, [r7, #20]
  407bbc:	6f92      	ldr	r2, [r2, #120]	; 0x78
  407bbe:	7b52      	ldrb	r2, [r2, #13]
  407bc0:	f042 0220 	orr.w	r2, r2, #32
  407bc4:	b2d2      	uxtb	r2, r2
  407bc6:	735a      	strb	r2, [r3, #13]
  407bc8:	e048      	b.n	407c5c <tcp_input+0x594>
  407bca:	bf00      	nop
  407bcc:	204025bc 	.word	0x204025bc
  407bd0:	20403954 	.word	0x20403954
  407bd4:	20404988 	.word	0x20404988
  407bd8:	00407d31 	.word	0x00407d31
  407bdc:	00406069 	.word	0x00406069
  407be0:	204025ac 	.word	0x204025ac
  407be4:	204025d4 	.word	0x204025d4
  407be8:	204025d0 	.word	0x204025d0
  407bec:	204025cc 	.word	0x204025cc
  407bf0:	00407051 	.word	0x00407051
  407bf4:	204025ce 	.word	0x204025ce
  407bf8:	20404998 	.word	0x20404998
  407bfc:	00407fc1 	.word	0x00407fc1
  407c00:	20404980 	.word	0x20404980
  407c04:	004075b1 	.word	0x004075b1
  407c08:	00405981 	.word	0x00405981
  407c0c:	00406771 	.word	0x00406771
  407c10:	004071ed 	.word	0x004071ed
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND) {
  407c14:	697b      	ldr	r3, [r7, #20]
  407c16:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
  407c18:	f640 3268 	movw	r2, #2920	; 0xb68
  407c1c:	4293      	cmp	r3, r2
  407c1e:	d005      	beq.n	407c2c <tcp_input+0x564>
              pcb->rcv_wnd++;
  407c20:	697b      	ldr	r3, [r7, #20]
  407c22:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
  407c24:	3301      	adds	r3, #1
  407c26:	b29a      	uxth	r2, r3
  407c28:	697b      	ldr	r3, [r7, #20]
  407c2a:	859a      	strh	r2, [r3, #44]	; 0x2c
            }
            TCP_EVENT_CLOSED(pcb, err);
  407c2c:	697b      	ldr	r3, [r7, #20]
  407c2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
  407c32:	2b00      	cmp	r3, #0
  407c34:	d00b      	beq.n	407c4e <tcp_input+0x586>
  407c36:	697b      	ldr	r3, [r7, #20]
  407c38:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
  407c3c:	697b      	ldr	r3, [r7, #20]
  407c3e:	6918      	ldr	r0, [r3, #16]
  407c40:	2300      	movs	r3, #0
  407c42:	2200      	movs	r2, #0
  407c44:	6979      	ldr	r1, [r7, #20]
  407c46:	47a0      	blx	r4
  407c48:	4603      	mov	r3, r0
  407c4a:	72fb      	strb	r3, [r7, #11]
  407c4c:	e001      	b.n	407c52 <tcp_input+0x58a>
  407c4e:	2300      	movs	r3, #0
  407c50:	72fb      	strb	r3, [r7, #11]
            if (err == ERR_ABRT) {
  407c52:	f997 300b 	ldrsb.w	r3, [r7, #11]
  407c56:	f113 0f0a 	cmn.w	r3, #10
  407c5a:	d00a      	beq.n	407c72 <tcp_input+0x5aa>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
  407c5c:	4b27      	ldr	r3, [pc, #156]	; (407cfc <tcp_input+0x634>)
  407c5e:	2200      	movs	r2, #0
  407c60:	601a      	str	r2, [r3, #0]
        /* Try to send something out. */
        tcp_output(pcb);
  407c62:	6978      	ldr	r0, [r7, #20]
  407c64:	4b26      	ldr	r3, [pc, #152]	; (407d00 <tcp_input+0x638>)
  407c66:	4798      	blx	r3
  407c68:	e004      	b.n	407c74 <tcp_input+0x5ac>
           called when new send buffer space is available, we call it
           now. */
        if (pcb->acked > 0) {
          TCP_EVENT_SENT(pcb, pcb->acked, err);
          if (err == ERR_ABRT) {
            goto aborted;
  407c6a:	bf00      	nop
  407c6c:	e002      	b.n	407c74 <tcp_input+0x5ac>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
          if (err == ERR_ABRT) {
            goto aborted;
  407c6e:	bf00      	nop
  407c70:	e000      	b.n	407c74 <tcp_input+0x5ac>
            if (pcb->rcv_wnd != TCP_WND) {
              pcb->rcv_wnd++;
            }
            TCP_EVENT_CLOSED(pcb, err);
            if (err == ERR_ABRT) {
              goto aborted;
  407c72:	bf00      	nop
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
    tcp_input_pcb = NULL;
  407c74:	4b21      	ldr	r3, [pc, #132]	; (407cfc <tcp_input+0x634>)
  407c76:	2200      	movs	r2, #0
  407c78:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
  407c7a:	4b22      	ldr	r3, [pc, #136]	; (407d04 <tcp_input+0x63c>)
  407c7c:	2200      	movs	r2, #0
  407c7e:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
  407c80:	4b21      	ldr	r3, [pc, #132]	; (407d08 <tcp_input+0x640>)
  407c82:	685b      	ldr	r3, [r3, #4]
  407c84:	2b00      	cmp	r3, #0
  407c86:	d035      	beq.n	407cf4 <tcp_input+0x62c>
    {
      pbuf_free(inseg.p);
  407c88:	4b1f      	ldr	r3, [pc, #124]	; (407d08 <tcp_input+0x640>)
  407c8a:	685b      	ldr	r3, [r3, #4]
  407c8c:	4618      	mov	r0, r3
  407c8e:	4b1f      	ldr	r3, [pc, #124]	; (407d0c <tcp_input+0x644>)
  407c90:	4798      	blx	r3
      inseg.p = NULL;
  407c92:	4b1d      	ldr	r3, [pc, #116]	; (407d08 <tcp_input+0x640>)
  407c94:	2200      	movs	r2, #0
  407c96:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
  407c98:	e02c      	b.n	407cf4 <tcp_input+0x62c>
  } else {

    /* If no matching PCB was found, send a TCP RST (reset) to the
       sender. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_input: no PCB match found, resetting.\n"));
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
  407c9a:	4b1d      	ldr	r3, [pc, #116]	; (407d10 <tcp_input+0x648>)
  407c9c:	681b      	ldr	r3, [r3, #0]
  407c9e:	899b      	ldrh	r3, [r3, #12]
  407ca0:	b29b      	uxth	r3, r3
  407ca2:	4618      	mov	r0, r3
  407ca4:	4b1b      	ldr	r3, [pc, #108]	; (407d14 <tcp_input+0x64c>)
  407ca6:	4798      	blx	r3
  407ca8:	4603      	mov	r3, r0
  407caa:	f003 0304 	and.w	r3, r3, #4
  407cae:	2b00      	cmp	r3, #0
  407cb0:	d115      	bne.n	407cde <tcp_input+0x616>
      TCP_STATS_INC(tcp.proterr);
      TCP_STATS_INC(tcp.drop);
      tcp_rst(ackno, seqno + tcplen,
  407cb2:	4b19      	ldr	r3, [pc, #100]	; (407d18 <tcp_input+0x650>)
  407cb4:	6818      	ldr	r0, [r3, #0]
  407cb6:	4b19      	ldr	r3, [pc, #100]	; (407d1c <tcp_input+0x654>)
  407cb8:	881b      	ldrh	r3, [r3, #0]
  407cba:	461a      	mov	r2, r3
  407cbc:	4b18      	ldr	r3, [pc, #96]	; (407d20 <tcp_input+0x658>)
  407cbe:	681b      	ldr	r3, [r3, #0]
  407cc0:	18d1      	adds	r1, r2, r3
        ip_current_dest_addr(), ip_current_src_addr(),
        tcphdr->dest, tcphdr->src);
  407cc2:	4b13      	ldr	r3, [pc, #76]	; (407d10 <tcp_input+0x648>)
  407cc4:	681b      	ldr	r3, [r3, #0]
       sender. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_input: no PCB match found, resetting.\n"));
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
      TCP_STATS_INC(tcp.proterr);
      TCP_STATS_INC(tcp.drop);
      tcp_rst(ackno, seqno + tcplen,
  407cc6:	885b      	ldrh	r3, [r3, #2]
  407cc8:	b29b      	uxth	r3, r3
        ip_current_dest_addr(), ip_current_src_addr(),
        tcphdr->dest, tcphdr->src);
  407cca:	4a11      	ldr	r2, [pc, #68]	; (407d10 <tcp_input+0x648>)
  407ccc:	6812      	ldr	r2, [r2, #0]
       sender. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_input: no PCB match found, resetting.\n"));
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
      TCP_STATS_INC(tcp.proterr);
      TCP_STATS_INC(tcp.drop);
      tcp_rst(ackno, seqno + tcplen,
  407cce:	8812      	ldrh	r2, [r2, #0]
  407cd0:	b292      	uxth	r2, r2
  407cd2:	9201      	str	r2, [sp, #4]
  407cd4:	9300      	str	r3, [sp, #0]
  407cd6:	4b13      	ldr	r3, [pc, #76]	; (407d24 <tcp_input+0x65c>)
  407cd8:	4a13      	ldr	r2, [pc, #76]	; (407d28 <tcp_input+0x660>)
  407cda:	4c14      	ldr	r4, [pc, #80]	; (407d2c <tcp_input+0x664>)
  407cdc:	47a0      	blx	r4
        ip_current_dest_addr(), ip_current_src_addr(),
        tcphdr->dest, tcphdr->src);
    }
    pbuf_free(p);
  407cde:	6878      	ldr	r0, [r7, #4]
  407ce0:	4b0a      	ldr	r3, [pc, #40]	; (407d0c <tcp_input+0x644>)
  407ce2:	4798      	blx	r3
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
  407ce4:	e006      	b.n	407cf4 <tcp_input+0x62c>
      IP_PROTO_TCP, p->tot_len)));
#if TCP_DEBUG
    tcp_debug_print(tcphdr);
#endif /* TCP_DEBUG */
    TCP_STATS_INC(tcp.chkerr);
    goto dropped;
  407ce6:	bf00      	nop
  407ce8:	e000      	b.n	407cec <tcp_input+0x624>
  hdrlen = TCPH_HDRLEN(tcphdr);
  if(pbuf_header(p, -(hdrlen * 4))){
    /* drop short packets */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: short packet\n"));
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  407cea:	bf00      	nop
  PERF_STOP("tcp_input");
  return;
dropped:
  TCP_STATS_INC(tcp.drop);
  snmp_inc_tcpinerrs();
  pbuf_free(p);
  407cec:	6878      	ldr	r0, [r7, #4]
  407cee:	4b07      	ldr	r3, [pc, #28]	; (407d0c <tcp_input+0x644>)
  407cf0:	4798      	blx	r3
  407cf2:	e000      	b.n	407cf6 <tcp_input+0x62e>
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
  407cf4:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  snmp_inc_tcpinerrs();
  pbuf_free(p);
}
  407cf6:	371c      	adds	r7, #28
  407cf8:	46bd      	mov	sp, r7
  407cfa:	bd90      	pop	{r4, r7, pc}
  407cfc:	20404998 	.word	0x20404998
  407d00:	0040a18d 	.word	0x0040a18d
  407d04:	204025d4 	.word	0x204025d4
  407d08:	204025ac 	.word	0x204025ac
  407d0c:	00406069 	.word	0x00406069
  407d10:	204025bc 	.word	0x204025bc
  407d14:	00402335 	.word	0x00402335
  407d18:	204025c8 	.word	0x204025c8
  407d1c:	204025ce 	.word	0x204025ce
  407d20:	204025c4 	.word	0x204025c4
  407d24:	2040394c 	.word	0x2040394c
  407d28:	20403954 	.word	0x20403954
  407d2c:	0040a5cd 	.word	0x0040a5cd

00407d30 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
  407d30:	b590      	push	{r4, r7, lr}
  407d32:	b087      	sub	sp, #28
  407d34:	af02      	add	r7, sp, #8
  407d36:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  err_t rc;

  if (flags & TCP_RST) {
  407d38:	4b59      	ldr	r3, [pc, #356]	; (407ea0 <tcp_listen_input+0x170>)
  407d3a:	781b      	ldrb	r3, [r3, #0]
  407d3c:	f003 0304 	and.w	r3, r3, #4
  407d40:	2b00      	cmp	r3, #0
  407d42:	d001      	beq.n	407d48 <tcp_listen_input+0x18>
    /* An incoming RST should be ignored. Return. */
    return ERR_OK;
  407d44:	2300      	movs	r3, #0
  407d46:	e0a7      	b.n	407e98 <tcp_listen_input+0x168>
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
  407d48:	4b55      	ldr	r3, [pc, #340]	; (407ea0 <tcp_listen_input+0x170>)
  407d4a:	781b      	ldrb	r3, [r3, #0]
  407d4c:	f003 0310 	and.w	r3, r3, #16
  407d50:	2b00      	cmp	r3, #0
  407d52:	d016      	beq.n	407d82 <tcp_listen_input+0x52>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  407d54:	4b53      	ldr	r3, [pc, #332]	; (407ea4 <tcp_listen_input+0x174>)
  407d56:	6818      	ldr	r0, [r3, #0]
  407d58:	4b53      	ldr	r3, [pc, #332]	; (407ea8 <tcp_listen_input+0x178>)
  407d5a:	881b      	ldrh	r3, [r3, #0]
  407d5c:	461a      	mov	r2, r3
  407d5e:	4b53      	ldr	r3, [pc, #332]	; (407eac <tcp_listen_input+0x17c>)
  407d60:	681b      	ldr	r3, [r3, #0]
  407d62:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  407d64:	4b52      	ldr	r3, [pc, #328]	; (407eb0 <tcp_listen_input+0x180>)
  407d66:	681b      	ldr	r3, [r3, #0]
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  407d68:	885b      	ldrh	r3, [r3, #2]
  407d6a:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  407d6c:	4a50      	ldr	r2, [pc, #320]	; (407eb0 <tcp_listen_input+0x180>)
  407d6e:	6812      	ldr	r2, [r2, #0]
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  407d70:	8812      	ldrh	r2, [r2, #0]
  407d72:	b292      	uxth	r2, r2
  407d74:	9201      	str	r2, [sp, #4]
  407d76:	9300      	str	r3, [sp, #0]
  407d78:	4b4e      	ldr	r3, [pc, #312]	; (407eb4 <tcp_listen_input+0x184>)
  407d7a:	4a4f      	ldr	r2, [pc, #316]	; (407eb8 <tcp_listen_input+0x188>)
  407d7c:	4c4f      	ldr	r4, [pc, #316]	; (407ebc <tcp_listen_input+0x18c>)
  407d7e:	47a0      	blx	r4
  407d80:	e089      	b.n	407e96 <tcp_listen_input+0x166>
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  } else if (flags & TCP_SYN) {
  407d82:	4b47      	ldr	r3, [pc, #284]	; (407ea0 <tcp_listen_input+0x170>)
  407d84:	781b      	ldrb	r3, [r3, #0]
  407d86:	f003 0302 	and.w	r3, r3, #2
  407d8a:	2b00      	cmp	r3, #0
  407d8c:	f000 8083 	beq.w	407e96 <tcp_listen_input+0x166>
    if (pcb->accepts_pending >= pcb->backlog) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_listen_input: listen backlog exceeded for port %"U16_F"\n", tcphdr->dest));
      return ERR_ABRT;
    }
#endif /* TCP_LISTEN_BACKLOG */
    npcb = tcp_alloc(pcb->prio);
  407d90:	687b      	ldr	r3, [r7, #4]
  407d92:	7e5b      	ldrb	r3, [r3, #25]
  407d94:	4618      	mov	r0, r3
  407d96:	4b4a      	ldr	r3, [pc, #296]	; (407ec0 <tcp_listen_input+0x190>)
  407d98:	4798      	blx	r3
  407d9a:	60f8      	str	r0, [r7, #12]
    /* If a new PCB could not be created (probably due to lack of memory),
       we don't do anything, but rely on the sender will retransmit the
       SYN at a time when we have more memory available. */
    if (npcb == NULL) {
  407d9c:	68fb      	ldr	r3, [r7, #12]
  407d9e:	2b00      	cmp	r3, #0
  407da0:	d102      	bne.n	407da8 <tcp_listen_input+0x78>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_listen_input: could not allocate PCB\n"));
      TCP_STATS_INC(tcp.memerr);
      return ERR_MEM;
  407da2:	f04f 33ff 	mov.w	r3, #4294967295
  407da6:	e077      	b.n	407e98 <tcp_listen_input+0x168>
    }
#if TCP_LISTEN_BACKLOG
    pcb->accepts_pending++;
#endif /* TCP_LISTEN_BACKLOG */
    /* Set up the new PCB. */
    ip_addr_copy(npcb->local_ip, current_iphdr_dest);
  407da8:	4b43      	ldr	r3, [pc, #268]	; (407eb8 <tcp_listen_input+0x188>)
  407daa:	681a      	ldr	r2, [r3, #0]
  407dac:	68fb      	ldr	r3, [r7, #12]
  407dae:	601a      	str	r2, [r3, #0]
    npcb->local_port = pcb->local_port;
  407db0:	687b      	ldr	r3, [r7, #4]
  407db2:	8b5a      	ldrh	r2, [r3, #26]
  407db4:	68fb      	ldr	r3, [r7, #12]
  407db6:	835a      	strh	r2, [r3, #26]
    ip_addr_copy(npcb->remote_ip, current_iphdr_src);
  407db8:	4b3e      	ldr	r3, [pc, #248]	; (407eb4 <tcp_listen_input+0x184>)
  407dba:	681a      	ldr	r2, [r3, #0]
  407dbc:	68fb      	ldr	r3, [r7, #12]
  407dbe:	605a      	str	r2, [r3, #4]
    npcb->remote_port = tcphdr->src;
  407dc0:	4b3b      	ldr	r3, [pc, #236]	; (407eb0 <tcp_listen_input+0x180>)
  407dc2:	681b      	ldr	r3, [r3, #0]
  407dc4:	881b      	ldrh	r3, [r3, #0]
  407dc6:	b29a      	uxth	r2, r3
  407dc8:	68fb      	ldr	r3, [r7, #12]
  407dca:	839a      	strh	r2, [r3, #28]
    npcb->state = SYN_RCVD;
  407dcc:	68fb      	ldr	r3, [r7, #12]
  407dce:	2203      	movs	r2, #3
  407dd0:	761a      	strb	r2, [r3, #24]
    npcb->rcv_nxt = seqno + 1;
  407dd2:	4b36      	ldr	r3, [pc, #216]	; (407eac <tcp_listen_input+0x17c>)
  407dd4:	681b      	ldr	r3, [r3, #0]
  407dd6:	1c5a      	adds	r2, r3, #1
  407dd8:	68fb      	ldr	r3, [r7, #12]
  407dda:	629a      	str	r2, [r3, #40]	; 0x28
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
  407ddc:	68fb      	ldr	r3, [r7, #12]
  407dde:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  407de0:	68fb      	ldr	r3, [r7, #12]
  407de2:	631a      	str	r2, [r3, #48]	; 0x30
    npcb->snd_wnd = tcphdr->wnd;
  407de4:	4b32      	ldr	r3, [pc, #200]	; (407eb0 <tcp_listen_input+0x180>)
  407de6:	681b      	ldr	r3, [r3, #0]
  407de8:	89db      	ldrh	r3, [r3, #14]
  407dea:	b29a      	uxth	r2, r3
  407dec:	68fb      	ldr	r3, [r7, #12]
  407dee:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = tcphdr->wnd;
  407df2:	4b2f      	ldr	r3, [pc, #188]	; (407eb0 <tcp_listen_input+0x180>)
  407df4:	681b      	ldr	r3, [r3, #0]
  407df6:	89db      	ldrh	r3, [r3, #14]
  407df8:	b29a      	uxth	r2, r3
  407dfa:	68fb      	ldr	r3, [r7, #12]
  407dfc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->ssthresh = npcb->snd_wnd;
  407e00:	68fb      	ldr	r3, [r7, #12]
  407e02:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
  407e06:	68fb      	ldr	r3, [r7, #12]
  407e08:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
  407e0c:	4b27      	ldr	r3, [pc, #156]	; (407eac <tcp_listen_input+0x17c>)
  407e0e:	681b      	ldr	r3, [r3, #0]
  407e10:	1e5a      	subs	r2, r3, #1
  407e12:	68fb      	ldr	r3, [r7, #12]
  407e14:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
  407e16:	687b      	ldr	r3, [r7, #4]
  407e18:	691a      	ldr	r2, [r3, #16]
  407e1a:	68fb      	ldr	r3, [r7, #12]
  407e1c:	611a      	str	r2, [r3, #16]
#if LWIP_CALLBACK_API
    npcb->accept = pcb->accept;
  407e1e:	687b      	ldr	r3, [r7, #4]
  407e20:	695a      	ldr	r2, [r3, #20]
  407e22:	68fb      	ldr	r3, [r7, #12]
  407e24:	615a      	str	r2, [r3, #20]
#endif /* LWIP_CALLBACK_API */
    /* inherit socket options */
    npcb->so_options = pcb->so_options & SOF_INHERITED;
  407e26:	687b      	ldr	r3, [r7, #4]
  407e28:	7a1b      	ldrb	r3, [r3, #8]
  407e2a:	f023 0373 	bic.w	r3, r3, #115	; 0x73
  407e2e:	b2da      	uxtb	r2, r3
  407e30:	68fb      	ldr	r3, [r7, #12]
  407e32:	721a      	strb	r2, [r3, #8]
    /* Register the new PCB so that we can begin receiving segments
       for it. */
    TCP_REG_ACTIVE(npcb);
  407e34:	4b23      	ldr	r3, [pc, #140]	; (407ec4 <tcp_listen_input+0x194>)
  407e36:	681a      	ldr	r2, [r3, #0]
  407e38:	68fb      	ldr	r3, [r7, #12]
  407e3a:	60da      	str	r2, [r3, #12]
  407e3c:	4a21      	ldr	r2, [pc, #132]	; (407ec4 <tcp_listen_input+0x194>)
  407e3e:	68fb      	ldr	r3, [r7, #12]
  407e40:	6013      	str	r3, [r2, #0]
  407e42:	4b21      	ldr	r3, [pc, #132]	; (407ec8 <tcp_listen_input+0x198>)
  407e44:	4798      	blx	r3
  407e46:	4b21      	ldr	r3, [pc, #132]	; (407ecc <tcp_listen_input+0x19c>)
  407e48:	2201      	movs	r2, #1
  407e4a:	701a      	strb	r2, [r3, #0]

    /* Parse any options in the SYN. */
    tcp_parseopt(npcb);
  407e4c:	68f8      	ldr	r0, [r7, #12]
  407e4e:	4b20      	ldr	r3, [pc, #128]	; (407ed0 <tcp_listen_input+0x1a0>)
  407e50:	4798      	blx	r3
#if TCP_CALCULATE_EFF_SEND_MSS
    npcb->mss = tcp_eff_send_mss(npcb->mss, &(npcb->remote_ip));
  407e52:	68fb      	ldr	r3, [r7, #12]
  407e54:	8eda      	ldrh	r2, [r3, #54]	; 0x36
  407e56:	68fb      	ldr	r3, [r7, #12]
  407e58:	3304      	adds	r3, #4
  407e5a:	4619      	mov	r1, r3
  407e5c:	4610      	mov	r0, r2
  407e5e:	4b1d      	ldr	r3, [pc, #116]	; (407ed4 <tcp_listen_input+0x1a4>)
  407e60:	4798      	blx	r3
  407e62:	4603      	mov	r3, r0
  407e64:	461a      	mov	r2, r3
  407e66:	68fb      	ldr	r3, [r7, #12]
  407e68:	86da      	strh	r2, [r3, #54]	; 0x36
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

    snmp_inc_tcppassiveopens();

    /* Send a SYN|ACK together with the MSS option. */
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
  407e6a:	2112      	movs	r1, #18
  407e6c:	68f8      	ldr	r0, [r7, #12]
  407e6e:	4b1a      	ldr	r3, [pc, #104]	; (407ed8 <tcp_listen_input+0x1a8>)
  407e70:	4798      	blx	r3
  407e72:	4603      	mov	r3, r0
  407e74:	72fb      	strb	r3, [r7, #11]
    if (rc != ERR_OK) {
  407e76:	f997 300b 	ldrsb.w	r3, [r7, #11]
  407e7a:	2b00      	cmp	r3, #0
  407e7c:	d006      	beq.n	407e8c <tcp_listen_input+0x15c>
      tcp_abandon(npcb, 0);
  407e7e:	2100      	movs	r1, #0
  407e80:	68f8      	ldr	r0, [r7, #12]
  407e82:	4b16      	ldr	r3, [pc, #88]	; (407edc <tcp_listen_input+0x1ac>)
  407e84:	4798      	blx	r3
      return rc;
  407e86:	f997 300b 	ldrsb.w	r3, [r7, #11]
  407e8a:	e005      	b.n	407e98 <tcp_listen_input+0x168>
    }
    return tcp_output(npcb);
  407e8c:	68f8      	ldr	r0, [r7, #12]
  407e8e:	4b14      	ldr	r3, [pc, #80]	; (407ee0 <tcp_listen_input+0x1b0>)
  407e90:	4798      	blx	r3
  407e92:	4603      	mov	r3, r0
  407e94:	e000      	b.n	407e98 <tcp_listen_input+0x168>
  }
  return ERR_OK;
  407e96:	2300      	movs	r3, #0
}
  407e98:	4618      	mov	r0, r3
  407e9a:	3714      	adds	r7, #20
  407e9c:	46bd      	mov	sp, r7
  407e9e:	bd90      	pop	{r4, r7, pc}
  407ea0:	204025cc 	.word	0x204025cc
  407ea4:	204025c8 	.word	0x204025c8
  407ea8:	204025ce 	.word	0x204025ce
  407eac:	204025c4 	.word	0x204025c4
  407eb0:	204025bc 	.word	0x204025bc
  407eb4:	2040394c 	.word	0x2040394c
  407eb8:	20403954 	.word	0x20403954
  407ebc:	0040a5cd 	.word	0x0040a5cd
  407ec0:	00407325 	.word	0x00407325
  407ec4:	20404980 	.word	0x20404980
  407ec8:	00405211 	.word	0x00405211
  407ecc:	2040497c 	.word	0x2040497c
  407ed0:	00409659 	.word	0x00409659
  407ed4:	00407685 	.word	0x00407685
  407ed8:	00409f59 	.word	0x00409f59
  407edc:	0040668d 	.word	0x0040668d
  407ee0:	0040a18d 	.word	0x0040a18d

00407ee4 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_timewait_input(struct tcp_pcb *pcb)
{
  407ee4:	b590      	push	{r4, r7, lr}
  407ee6:	b085      	sub	sp, #20
  407ee8:	af02      	add	r7, sp, #8
  407eea:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST)  {
  407eec:	4b2a      	ldr	r3, [pc, #168]	; (407f98 <tcp_timewait_input+0xb4>)
  407eee:	781b      	ldrb	r3, [r3, #0]
  407ef0:	f003 0304 	and.w	r3, r3, #4
  407ef4:	2b00      	cmp	r3, #0
  407ef6:	d001      	beq.n	407efc <tcp_timewait_input+0x18>
    return ERR_OK;
  407ef8:	2300      	movs	r3, #0
  407efa:	e049      	b.n	407f90 <tcp_timewait_input+0xac>
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
  407efc:	4b26      	ldr	r3, [pc, #152]	; (407f98 <tcp_timewait_input+0xb4>)
  407efe:	781b      	ldrb	r3, [r3, #0]
  407f00:	f003 0302 	and.w	r3, r3, #2
  407f04:	2b00      	cmp	r3, #0
  407f06:	d028      	beq.n	407f5a <tcp_timewait_input+0x76>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt+pcb->rcv_wnd)) {
  407f08:	4b24      	ldr	r3, [pc, #144]	; (407f9c <tcp_timewait_input+0xb8>)
  407f0a:	681a      	ldr	r2, [r3, #0]
  407f0c:	687b      	ldr	r3, [r7, #4]
  407f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  407f10:	1ad3      	subs	r3, r2, r3
  407f12:	2b00      	cmp	r3, #0
  407f14:	db2b      	blt.n	407f6e <tcp_timewait_input+0x8a>
  407f16:	4b21      	ldr	r3, [pc, #132]	; (407f9c <tcp_timewait_input+0xb8>)
  407f18:	681a      	ldr	r2, [r3, #0]
  407f1a:	687b      	ldr	r3, [r7, #4]
  407f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  407f1e:	6879      	ldr	r1, [r7, #4]
  407f20:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
  407f22:	440b      	add	r3, r1
  407f24:	1ad3      	subs	r3, r2, r3
  407f26:	2b00      	cmp	r3, #0
  407f28:	dc21      	bgt.n	407f6e <tcp_timewait_input+0x8a>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
  407f2a:	4b1d      	ldr	r3, [pc, #116]	; (407fa0 <tcp_timewait_input+0xbc>)
  407f2c:	6818      	ldr	r0, [r3, #0]
  407f2e:	4b1d      	ldr	r3, [pc, #116]	; (407fa4 <tcp_timewait_input+0xc0>)
  407f30:	881b      	ldrh	r3, [r3, #0]
  407f32:	461a      	mov	r2, r3
  407f34:	4b19      	ldr	r3, [pc, #100]	; (407f9c <tcp_timewait_input+0xb8>)
  407f36:	681b      	ldr	r3, [r3, #0]
  407f38:	18d1      	adds	r1, r2, r3
        tcphdr->dest, tcphdr->src);
  407f3a:	4b1b      	ldr	r3, [pc, #108]	; (407fa8 <tcp_timewait_input+0xc4>)
  407f3c:	681b      	ldr	r3, [r3, #0]
  if (flags & TCP_SYN) {
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt+pcb->rcv_wnd)) {
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
  407f3e:	885b      	ldrh	r3, [r3, #2]
  407f40:	b29b      	uxth	r3, r3
        tcphdr->dest, tcphdr->src);
  407f42:	4a19      	ldr	r2, [pc, #100]	; (407fa8 <tcp_timewait_input+0xc4>)
  407f44:	6812      	ldr	r2, [r2, #0]
  if (flags & TCP_SYN) {
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt+pcb->rcv_wnd)) {
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
  407f46:	8812      	ldrh	r2, [r2, #0]
  407f48:	b292      	uxth	r2, r2
  407f4a:	9201      	str	r2, [sp, #4]
  407f4c:	9300      	str	r3, [sp, #0]
  407f4e:	4b17      	ldr	r3, [pc, #92]	; (407fac <tcp_timewait_input+0xc8>)
  407f50:	4a17      	ldr	r2, [pc, #92]	; (407fb0 <tcp_timewait_input+0xcc>)
  407f52:	4c18      	ldr	r4, [pc, #96]	; (407fb4 <tcp_timewait_input+0xd0>)
  407f54:	47a0      	blx	r4
        tcphdr->dest, tcphdr->src);
      return ERR_OK;
  407f56:	2300      	movs	r3, #0
  407f58:	e01a      	b.n	407f90 <tcp_timewait_input+0xac>
    }
  } else if (flags & TCP_FIN) {
  407f5a:	4b0f      	ldr	r3, [pc, #60]	; (407f98 <tcp_timewait_input+0xb4>)
  407f5c:	781b      	ldrb	r3, [r3, #0]
  407f5e:	f003 0301 	and.w	r3, r3, #1
  407f62:	2b00      	cmp	r3, #0
  407f64:	d003      	beq.n	407f6e <tcp_timewait_input+0x8a>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
  407f66:	4b14      	ldr	r3, [pc, #80]	; (407fb8 <tcp_timewait_input+0xd4>)
  407f68:	681a      	ldr	r2, [r3, #0]
  407f6a:	687b      	ldr	r3, [r7, #4]
  407f6c:	625a      	str	r2, [r3, #36]	; 0x24
  }

  if ((tcplen > 0))  {
  407f6e:	4b0d      	ldr	r3, [pc, #52]	; (407fa4 <tcp_timewait_input+0xc0>)
  407f70:	881b      	ldrh	r3, [r3, #0]
  407f72:	2b00      	cmp	r3, #0
  407f74:	d00b      	beq.n	407f8e <tcp_timewait_input+0xaa>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
  407f76:	687b      	ldr	r3, [r7, #4]
  407f78:	7f9b      	ldrb	r3, [r3, #30]
  407f7a:	f043 0302 	orr.w	r3, r3, #2
  407f7e:	b2da      	uxtb	r2, r3
  407f80:	687b      	ldr	r3, [r7, #4]
  407f82:	779a      	strb	r2, [r3, #30]
    return tcp_output(pcb);
  407f84:	6878      	ldr	r0, [r7, #4]
  407f86:	4b0d      	ldr	r3, [pc, #52]	; (407fbc <tcp_timewait_input+0xd8>)
  407f88:	4798      	blx	r3
  407f8a:	4603      	mov	r3, r0
  407f8c:	e000      	b.n	407f90 <tcp_timewait_input+0xac>
  }
  return ERR_OK;
  407f8e:	2300      	movs	r3, #0
}
  407f90:	4618      	mov	r0, r3
  407f92:	370c      	adds	r7, #12
  407f94:	46bd      	mov	sp, r7
  407f96:	bd90      	pop	{r4, r7, pc}
  407f98:	204025cc 	.word	0x204025cc
  407f9c:	204025c4 	.word	0x204025c4
  407fa0:	204025c8 	.word	0x204025c8
  407fa4:	204025ce 	.word	0x204025ce
  407fa8:	204025bc 	.word	0x204025bc
  407fac:	2040394c 	.word	0x2040394c
  407fb0:	20403954 	.word	0x20403954
  407fb4:	0040a5cd 	.word	0x0040a5cd
  407fb8:	20404984 	.word	0x20404984
  407fbc:	0040a18d 	.word	0x0040a18d

00407fc0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
  407fc0:	b590      	push	{r4, r7, lr}
  407fc2:	b089      	sub	sp, #36	; 0x24
  407fc4:	af02      	add	r7, sp, #8
  407fc6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
  407fc8:	2300      	movs	r3, #0
  407fca:	75fb      	strb	r3, [r7, #23]
  err_t err;

  err = ERR_OK;
  407fcc:	2300      	movs	r3, #0
  407fce:	75bb      	strb	r3, [r7, #22]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
  407fd0:	4b96      	ldr	r3, [pc, #600]	; (40822c <tcp_process+0x26c>)
  407fd2:	781b      	ldrb	r3, [r3, #0]
  407fd4:	f003 0304 	and.w	r3, r3, #4
  407fd8:	2b00      	cmp	r3, #0
  407fda:	d035      	beq.n	408048 <tcp_process+0x88>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
  407fdc:	687b      	ldr	r3, [r7, #4]
  407fde:	7e1b      	ldrb	r3, [r3, #24]
  407fe0:	2b02      	cmp	r3, #2
  407fe2:	d108      	bne.n	407ff6 <tcp_process+0x36>
      if (ackno == pcb->snd_nxt) {
  407fe4:	687b      	ldr	r3, [r7, #4]
  407fe6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  407fe8:	4b91      	ldr	r3, [pc, #580]	; (408230 <tcp_process+0x270>)
  407fea:	681b      	ldr	r3, [r3, #0]
  407fec:	429a      	cmp	r2, r3
  407fee:	d115      	bne.n	40801c <tcp_process+0x5c>
        acceptable = 1;
  407ff0:	2301      	movs	r3, #1
  407ff2:	75fb      	strb	r3, [r7, #23]
  407ff4:	e012      	b.n	40801c <tcp_process+0x5c>
      }
    } else {
      if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
  407ff6:	4b8f      	ldr	r3, [pc, #572]	; (408234 <tcp_process+0x274>)
  407ff8:	681a      	ldr	r2, [r3, #0]
  407ffa:	687b      	ldr	r3, [r7, #4]
  407ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  407ffe:	1ad3      	subs	r3, r2, r3
  408000:	2b00      	cmp	r3, #0
  408002:	db0b      	blt.n	40801c <tcp_process+0x5c>
  408004:	4b8b      	ldr	r3, [pc, #556]	; (408234 <tcp_process+0x274>)
  408006:	681a      	ldr	r2, [r3, #0]
  408008:	687b      	ldr	r3, [r7, #4]
  40800a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  40800c:	6879      	ldr	r1, [r7, #4]
  40800e:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
  408010:	440b      	add	r3, r1
  408012:	1ad3      	subs	r3, r2, r3
  408014:	2b00      	cmp	r3, #0
  408016:	dc01      	bgt.n	40801c <tcp_process+0x5c>
                          pcb->rcv_nxt+pcb->rcv_wnd)) {
        acceptable = 1;
  408018:	2301      	movs	r3, #1
  40801a:	75fb      	strb	r3, [r7, #23]
      }
    }

    if (acceptable) {
  40801c:	7dfb      	ldrb	r3, [r7, #23]
  40801e:	2b00      	cmp	r3, #0
  408020:	d010      	beq.n	408044 <tcp_process+0x84>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
      recv_flags |= TF_RESET;
  408022:	4b85      	ldr	r3, [pc, #532]	; (408238 <tcp_process+0x278>)
  408024:	781b      	ldrb	r3, [r3, #0]
  408026:	f043 0308 	orr.w	r3, r3, #8
  40802a:	b2da      	uxtb	r2, r3
  40802c:	4b82      	ldr	r3, [pc, #520]	; (408238 <tcp_process+0x278>)
  40802e:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
  408030:	687b      	ldr	r3, [r7, #4]
  408032:	7f9b      	ldrb	r3, [r3, #30]
  408034:	f023 0301 	bic.w	r3, r3, #1
  408038:	b2da      	uxtb	r2, r3
  40803a:	687b      	ldr	r3, [r7, #4]
  40803c:	779a      	strb	r2, [r3, #30]
      return ERR_RST;
  40803e:	f06f 030a 	mvn.w	r3, #10
  408042:	e324      	b.n	40868e <tcp_process+0x6ce>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
  408044:	2300      	movs	r3, #0
  408046:	e322      	b.n	40868e <tcp_process+0x6ce>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) { 
  408048:	4b78      	ldr	r3, [pc, #480]	; (40822c <tcp_process+0x26c>)
  40804a:	781b      	ldrb	r3, [r3, #0]
  40804c:	f003 0302 	and.w	r3, r3, #2
  408050:	2b00      	cmp	r3, #0
  408052:	d010      	beq.n	408076 <tcp_process+0xb6>
  408054:	687b      	ldr	r3, [r7, #4]
  408056:	7e1b      	ldrb	r3, [r3, #24]
  408058:	2b02      	cmp	r3, #2
  40805a:	d00c      	beq.n	408076 <tcp_process+0xb6>
  40805c:	687b      	ldr	r3, [r7, #4]
  40805e:	7e1b      	ldrb	r3, [r3, #24]
  408060:	2b03      	cmp	r3, #3
  408062:	d008      	beq.n	408076 <tcp_process+0xb6>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
  408064:	687b      	ldr	r3, [r7, #4]
  408066:	7f9b      	ldrb	r3, [r3, #30]
  408068:	f043 0302 	orr.w	r3, r3, #2
  40806c:	b2da      	uxtb	r2, r3
  40806e:	687b      	ldr	r3, [r7, #4]
  408070:	779a      	strb	r2, [r3, #30]
    return ERR_OK;
  408072:	2300      	movs	r3, #0
  408074:	e30b      	b.n	40868e <tcp_process+0x6ce>
  }
  
  if ((pcb->flags & TF_RXCLOSED) == 0) {
  408076:	687b      	ldr	r3, [r7, #4]
  408078:	7f9b      	ldrb	r3, [r3, #30]
  40807a:	f003 0310 	and.w	r3, r3, #16
  40807e:	2b00      	cmp	r3, #0
  408080:	d103      	bne.n	40808a <tcp_process+0xca>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
  408082:	4b6e      	ldr	r3, [pc, #440]	; (40823c <tcp_process+0x27c>)
  408084:	681a      	ldr	r2, [r3, #0]
  408086:	687b      	ldr	r3, [r7, #4]
  408088:	625a      	str	r2, [r3, #36]	; 0x24
  }
  pcb->keep_cnt_sent = 0;
  40808a:	687b      	ldr	r3, [r7, #4]
  40808c:	2200      	movs	r2, #0
  40808e:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
  408092:	6878      	ldr	r0, [r7, #4]
  408094:	4b6a      	ldr	r3, [pc, #424]	; (408240 <tcp_process+0x280>)
  408096:	4798      	blx	r3

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
  408098:	687b      	ldr	r3, [r7, #4]
  40809a:	7e1b      	ldrb	r3, [r3, #24]
  40809c:	3b02      	subs	r3, #2
  40809e:	2b07      	cmp	r3, #7
  4080a0:	f200 82e5 	bhi.w	40866e <tcp_process+0x6ae>
  4080a4:	a201      	add	r2, pc, #4	; (adr r2, 4080ac <tcp_process+0xec>)
  4080a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4080aa:	bf00      	nop
  4080ac:	004080cd 	.word	0x004080cd
  4080b0:	00408291 	.word	0x00408291
  4080b4:	004083bb 	.word	0x004083bb
  4080b8:	004083e5 	.word	0x004083e5
  4080bc:	00408515 	.word	0x00408515
  4080c0:	004083bb 	.word	0x004083bb
  4080c4:	004085ad 	.word	0x004085ad
  4080c8:	00408641 	.word	0x00408641
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
  4080cc:	4b57      	ldr	r3, [pc, #348]	; (40822c <tcp_process+0x26c>)
  4080ce:	781b      	ldrb	r3, [r3, #0]
  4080d0:	f003 0310 	and.w	r3, r3, #16
  4080d4:	2b00      	cmp	r3, #0
  4080d6:	f000 80bd 	beq.w	408254 <tcp_process+0x294>
  4080da:	4b54      	ldr	r3, [pc, #336]	; (40822c <tcp_process+0x26c>)
  4080dc:	781b      	ldrb	r3, [r3, #0]
  4080de:	f003 0302 	and.w	r3, r3, #2
  4080e2:	2b00      	cmp	r3, #0
  4080e4:	f000 80b6 	beq.w	408254 <tcp_process+0x294>
        && ackno == ntohl(pcb->unacked->tcphdr->seqno) + 1) {
  4080e8:	687b      	ldr	r3, [r7, #4]
  4080ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  4080ec:	68db      	ldr	r3, [r3, #12]
  4080ee:	685b      	ldr	r3, [r3, #4]
  4080f0:	4618      	mov	r0, r3
  4080f2:	4b54      	ldr	r3, [pc, #336]	; (408244 <tcp_process+0x284>)
  4080f4:	4798      	blx	r3
  4080f6:	4603      	mov	r3, r0
  4080f8:	1c5a      	adds	r2, r3, #1
  4080fa:	4b4d      	ldr	r3, [pc, #308]	; (408230 <tcp_process+0x270>)
  4080fc:	681b      	ldr	r3, [r3, #0]
  4080fe:	429a      	cmp	r2, r3
  408100:	f040 80a8 	bne.w	408254 <tcp_process+0x294>
      pcb->snd_buf++;
  408104:	687b      	ldr	r3, [r7, #4]
  408106:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
  40810a:	3301      	adds	r3, #1
  40810c:	b29a      	uxth	r2, r3
  40810e:	687b      	ldr	r3, [r7, #4]
  408110:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
      pcb->rcv_nxt = seqno + 1;
  408114:	4b47      	ldr	r3, [pc, #284]	; (408234 <tcp_process+0x274>)
  408116:	681b      	ldr	r3, [r3, #0]
  408118:	1c5a      	adds	r2, r3, #1
  40811a:	687b      	ldr	r3, [r7, #4]
  40811c:	629a      	str	r2, [r3, #40]	; 0x28
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
  40811e:	687b      	ldr	r3, [r7, #4]
  408120:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  408122:	687b      	ldr	r3, [r7, #4]
  408124:	631a      	str	r2, [r3, #48]	; 0x30
      pcb->lastack = ackno;
  408126:	4b42      	ldr	r3, [pc, #264]	; (408230 <tcp_process+0x270>)
  408128:	681a      	ldr	r2, [r3, #0]
  40812a:	687b      	ldr	r3, [r7, #4]
  40812c:	649a      	str	r2, [r3, #72]	; 0x48
      pcb->snd_wnd = tcphdr->wnd;
  40812e:	4b46      	ldr	r3, [pc, #280]	; (408248 <tcp_process+0x288>)
  408130:	681b      	ldr	r3, [r3, #0]
  408132:	89db      	ldrh	r3, [r3, #14]
  408134:	b29a      	uxth	r2, r3
  408136:	687b      	ldr	r3, [r7, #4]
  408138:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      pcb->snd_wnd_max = tcphdr->wnd;
  40813c:	4b42      	ldr	r3, [pc, #264]	; (408248 <tcp_process+0x288>)
  40813e:	681b      	ldr	r3, [r3, #0]
  408140:	89db      	ldrh	r3, [r3, #14]
  408142:	b29a      	uxth	r2, r3
  408144:	687b      	ldr	r3, [r7, #4]
  408146:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
  40814a:	4b3a      	ldr	r3, [pc, #232]	; (408234 <tcp_process+0x274>)
  40814c:	681b      	ldr	r3, [r3, #0]
  40814e:	1e5a      	subs	r2, r3, #1
  408150:	687b      	ldr	r3, [r7, #4]
  408152:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->state = ESTABLISHED;
  408154:	687b      	ldr	r3, [r7, #4]
  408156:	2204      	movs	r2, #4
  408158:	761a      	strb	r2, [r3, #24]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &(pcb->remote_ip));
  40815a:	687b      	ldr	r3, [r7, #4]
  40815c:	8eda      	ldrh	r2, [r3, #54]	; 0x36
  40815e:	687b      	ldr	r3, [r7, #4]
  408160:	3304      	adds	r3, #4
  408162:	4619      	mov	r1, r3
  408164:	4610      	mov	r0, r2
  408166:	4b39      	ldr	r3, [pc, #228]	; (40824c <tcp_process+0x28c>)
  408168:	4798      	blx	r3
  40816a:	4603      	mov	r3, r0
  40816c:	461a      	mov	r2, r3
  40816e:	687b      	ldr	r3, [r7, #4]
  408170:	86da      	strh	r2, [r3, #54]	; 0x36
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      /* Set ssthresh again after changing pcb->mss (already set in tcp_connect
       * but for the default value of pcb->mss) */
      pcb->ssthresh = pcb->mss * 10;
  408172:	687b      	ldr	r3, [r7, #4]
  408174:	8edb      	ldrh	r3, [r3, #54]	; 0x36
  408176:	461a      	mov	r2, r3
  408178:	0092      	lsls	r2, r2, #2
  40817a:	4413      	add	r3, r2
  40817c:	005b      	lsls	r3, r3, #1
  40817e:	b29a      	uxth	r2, r3
  408180:	687b      	ldr	r3, [r7, #4]
  408182:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

      pcb->cwnd = ((pcb->cwnd == 1) ? (pcb->mss * 2) : pcb->mss);
  408186:	687b      	ldr	r3, [r7, #4]
  408188:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
  40818c:	2b01      	cmp	r3, #1
  40818e:	d104      	bne.n	40819a <tcp_process+0x1da>
  408190:	687b      	ldr	r3, [r7, #4]
  408192:	8edb      	ldrh	r3, [r3, #54]	; 0x36
  408194:	005b      	lsls	r3, r3, #1
  408196:	b29b      	uxth	r3, r3
  408198:	e001      	b.n	40819e <tcp_process+0x1de>
  40819a:	687b      	ldr	r3, [r7, #4]
  40819c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
  40819e:	687a      	ldr	r2, [r7, #4]
  4081a0:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
      --pcb->snd_queuelen;
  4081a4:	687b      	ldr	r3, [r7, #4]
  4081a6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
  4081aa:	3b01      	subs	r3, #1
  4081ac:	b29a      	uxth	r2, r3
  4081ae:	687b      	ldr	r3, [r7, #4]
  4081b0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"U16_F"\n", (u16_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
  4081b4:	687b      	ldr	r3, [r7, #4]
  4081b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  4081b8:	613b      	str	r3, [r7, #16]
      pcb->unacked = rseg->next;
  4081ba:	693b      	ldr	r3, [r7, #16]
  4081bc:	681a      	ldr	r2, [r3, #0]
  4081be:	687b      	ldr	r3, [r7, #4]
  4081c0:	671a      	str	r2, [r3, #112]	; 0x70
      tcp_seg_free(rseg);
  4081c2:	6938      	ldr	r0, [r7, #16]
  4081c4:	4b22      	ldr	r3, [pc, #136]	; (408250 <tcp_process+0x290>)
  4081c6:	4798      	blx	r3

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if(pcb->unacked == NULL)
  4081c8:	687b      	ldr	r3, [r7, #4]
  4081ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  4081cc:	2b00      	cmp	r3, #0
  4081ce:	d104      	bne.n	4081da <tcp_process+0x21a>
        pcb->rtime = -1;
  4081d0:	687b      	ldr	r3, [r7, #4]
  4081d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
  4081d6:	869a      	strh	r2, [r3, #52]	; 0x34
  4081d8:	e006      	b.n	4081e8 <tcp_process+0x228>
      else {
        pcb->rtime = 0;
  4081da:	687b      	ldr	r3, [r7, #4]
  4081dc:	2200      	movs	r2, #0
  4081de:	869a      	strh	r2, [r3, #52]	; 0x34
        pcb->nrtx = 0;
  4081e0:	687b      	ldr	r3, [r7, #4]
  4081e2:	2200      	movs	r2, #0
  4081e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
      }

      /* Call the user specified function to call when sucessfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
  4081e8:	687b      	ldr	r3, [r7, #4]
  4081ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
  4081ee:	2b00      	cmp	r3, #0
  4081f0:	d00a      	beq.n	408208 <tcp_process+0x248>
  4081f2:	687b      	ldr	r3, [r7, #4]
  4081f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
  4081f8:	687a      	ldr	r2, [r7, #4]
  4081fa:	6910      	ldr	r0, [r2, #16]
  4081fc:	2200      	movs	r2, #0
  4081fe:	6879      	ldr	r1, [r7, #4]
  408200:	4798      	blx	r3
  408202:	4603      	mov	r3, r0
  408204:	75bb      	strb	r3, [r7, #22]
  408206:	e001      	b.n	40820c <tcp_process+0x24c>
  408208:	2300      	movs	r3, #0
  40820a:	75bb      	strb	r3, [r7, #22]
      if (err == ERR_ABRT) {
  40820c:	f997 3016 	ldrsb.w	r3, [r7, #22]
  408210:	f113 0f0a 	cmn.w	r3, #10
  408214:	d102      	bne.n	40821c <tcp_process+0x25c>
        return ERR_ABRT;
  408216:	f06f 0309 	mvn.w	r3, #9
  40821a:	e238      	b.n	40868e <tcp_process+0x6ce>
      }
      tcp_ack_now(pcb);
  40821c:	687b      	ldr	r3, [r7, #4]
  40821e:	7f9b      	ldrb	r3, [r3, #30]
  408220:	f043 0302 	orr.w	r3, r3, #2
  408224:	b2da      	uxtb	r2, r3
  408226:	687b      	ldr	r3, [r7, #4]
  408228:	779a      	strb	r2, [r3, #30]
    else if (flags & TCP_ACK) {
      /* send a RST to bring the other side in a non-synchronized state. */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
        tcphdr->dest, tcphdr->src);
    }
    break;
  40822a:	e222      	b.n	408672 <tcp_process+0x6b2>
  40822c:	204025cc 	.word	0x204025cc
  408230:	204025c8 	.word	0x204025c8
  408234:	204025c4 	.word	0x204025c4
  408238:	204025d0 	.word	0x204025d0
  40823c:	20404984 	.word	0x20404984
  408240:	00409659 	.word	0x00409659
  408244:	00402389 	.word	0x00402389
  408248:	204025bc 	.word	0x204025bc
  40824c:	00407685 	.word	0x00407685
  408250:	00407151 	.word	0x00407151
        return ERR_ABRT;
      }
      tcp_ack_now(pcb);
    }
    /* received ACK? possibly a half-open connection */
    else if (flags & TCP_ACK) {
  408254:	4b94      	ldr	r3, [pc, #592]	; (4084a8 <tcp_process+0x4e8>)
  408256:	781b      	ldrb	r3, [r3, #0]
  408258:	f003 0310 	and.w	r3, r3, #16
  40825c:	2b00      	cmp	r3, #0
  40825e:	f000 8208 	beq.w	408672 <tcp_process+0x6b2>
      /* send a RST to bring the other side in a non-synchronized state. */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
  408262:	4b92      	ldr	r3, [pc, #584]	; (4084ac <tcp_process+0x4ec>)
  408264:	6818      	ldr	r0, [r3, #0]
  408266:	4b92      	ldr	r3, [pc, #584]	; (4084b0 <tcp_process+0x4f0>)
  408268:	881b      	ldrh	r3, [r3, #0]
  40826a:	461a      	mov	r2, r3
  40826c:	4b91      	ldr	r3, [pc, #580]	; (4084b4 <tcp_process+0x4f4>)
  40826e:	681b      	ldr	r3, [r3, #0]
  408270:	18d1      	adds	r1, r2, r3
        tcphdr->dest, tcphdr->src);
  408272:	4b91      	ldr	r3, [pc, #580]	; (4084b8 <tcp_process+0x4f8>)
  408274:	681b      	ldr	r3, [r3, #0]
      tcp_ack_now(pcb);
    }
    /* received ACK? possibly a half-open connection */
    else if (flags & TCP_ACK) {
      /* send a RST to bring the other side in a non-synchronized state. */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
  408276:	885b      	ldrh	r3, [r3, #2]
  408278:	b29b      	uxth	r3, r3
        tcphdr->dest, tcphdr->src);
  40827a:	4a8f      	ldr	r2, [pc, #572]	; (4084b8 <tcp_process+0x4f8>)
  40827c:	6812      	ldr	r2, [r2, #0]
      tcp_ack_now(pcb);
    }
    /* received ACK? possibly a half-open connection */
    else if (flags & TCP_ACK) {
      /* send a RST to bring the other side in a non-synchronized state. */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
  40827e:	8812      	ldrh	r2, [r2, #0]
  408280:	b292      	uxth	r2, r2
  408282:	9201      	str	r2, [sp, #4]
  408284:	9300      	str	r3, [sp, #0]
  408286:	4b8d      	ldr	r3, [pc, #564]	; (4084bc <tcp_process+0x4fc>)
  408288:	4a8d      	ldr	r2, [pc, #564]	; (4084c0 <tcp_process+0x500>)
  40828a:	4c8e      	ldr	r4, [pc, #568]	; (4084c4 <tcp_process+0x504>)
  40828c:	47a0      	blx	r4
        tcphdr->dest, tcphdr->src);
    }
    break;
  40828e:	e1f0      	b.n	408672 <tcp_process+0x6b2>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
  408290:	4b85      	ldr	r3, [pc, #532]	; (4084a8 <tcp_process+0x4e8>)
  408292:	781b      	ldrb	r3, [r3, #0]
  408294:	f003 0310 	and.w	r3, r3, #16
  408298:	2b00      	cmp	r3, #0
  40829a:	d079      	beq.n	408390 <tcp_process+0x3d0>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
  40829c:	4b83      	ldr	r3, [pc, #524]	; (4084ac <tcp_process+0x4ec>)
  40829e:	681a      	ldr	r2, [r3, #0]
  4082a0:	687b      	ldr	r3, [r7, #4]
  4082a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  4082a4:	1ad3      	subs	r3, r2, r3
  4082a6:	3b01      	subs	r3, #1
  4082a8:	2b00      	cmp	r3, #0
  4082aa:	db5a      	blt.n	408362 <tcp_process+0x3a2>
  4082ac:	4b7f      	ldr	r3, [pc, #508]	; (4084ac <tcp_process+0x4ec>)
  4082ae:	681a      	ldr	r2, [r3, #0]
  4082b0:	687b      	ldr	r3, [r7, #4]
  4082b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  4082b4:	1ad3      	subs	r3, r2, r3
  4082b6:	2b00      	cmp	r3, #0
  4082b8:	dc53      	bgt.n	408362 <tcp_process+0x3a2>
        u16_t old_cwnd;
        pcb->state = ESTABLISHED;
  4082ba:	687b      	ldr	r3, [r7, #4]
  4082bc:	2204      	movs	r2, #4
  4082be:	761a      	strb	r2, [r3, #24]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->accept != NULL", pcb->accept != NULL);
#endif
        /* Call the accept function. */
        TCP_EVENT_ACCEPT(pcb, ERR_OK, err);
  4082c0:	687b      	ldr	r3, [r7, #4]
  4082c2:	695b      	ldr	r3, [r3, #20]
  4082c4:	2b00      	cmp	r3, #0
  4082c6:	d009      	beq.n	4082dc <tcp_process+0x31c>
  4082c8:	687b      	ldr	r3, [r7, #4]
  4082ca:	695b      	ldr	r3, [r3, #20]
  4082cc:	687a      	ldr	r2, [r7, #4]
  4082ce:	6910      	ldr	r0, [r2, #16]
  4082d0:	2200      	movs	r2, #0
  4082d2:	6879      	ldr	r1, [r7, #4]
  4082d4:	4798      	blx	r3
  4082d6:	4603      	mov	r3, r0
  4082d8:	75bb      	strb	r3, [r7, #22]
  4082da:	e001      	b.n	4082e0 <tcp_process+0x320>
  4082dc:	23f2      	movs	r3, #242	; 0xf2
  4082de:	75bb      	strb	r3, [r7, #22]
        if (err != ERR_OK) {
  4082e0:	f997 3016 	ldrsb.w	r3, [r7, #22]
  4082e4:	2b00      	cmp	r3, #0
  4082e6:	d00a      	beq.n	4082fe <tcp_process+0x33e>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
  4082e8:	f997 3016 	ldrsb.w	r3, [r7, #22]
  4082ec:	f113 0f0a 	cmn.w	r3, #10
  4082f0:	d002      	beq.n	4082f8 <tcp_process+0x338>
            tcp_abort(pcb);
  4082f2:	6878      	ldr	r0, [r7, #4]
  4082f4:	4b74      	ldr	r3, [pc, #464]	; (4084c8 <tcp_process+0x508>)
  4082f6:	4798      	blx	r3
          }
          return ERR_ABRT;
  4082f8:	f06f 0309 	mvn.w	r3, #9
  4082fc:	e1c7      	b.n	40868e <tcp_process+0x6ce>
        }
        old_cwnd = pcb->cwnd;
  4082fe:	687b      	ldr	r3, [r7, #4]
  408300:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
  408304:	81fb      	strh	r3, [r7, #14]
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
  408306:	6878      	ldr	r0, [r7, #4]
  408308:	4b70      	ldr	r3, [pc, #448]	; (4084cc <tcp_process+0x50c>)
  40830a:	4798      	blx	r3

        /* Prevent ACK for SYN to generate a sent event */
        if (pcb->acked != 0) {
  40830c:	687b      	ldr	r3, [r7, #4]
  40830e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
  408312:	2b00      	cmp	r3, #0
  408314:	d007      	beq.n	408326 <tcp_process+0x366>
          pcb->acked--;
  408316:	687b      	ldr	r3, [r7, #4]
  408318:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
  40831c:	3b01      	subs	r3, #1
  40831e:	b29a      	uxth	r2, r3
  408320:	687b      	ldr	r3, [r7, #4]
  408322:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
        }

        pcb->cwnd = ((old_cwnd == 1) ? (pcb->mss * 2) : pcb->mss);
  408326:	89fb      	ldrh	r3, [r7, #14]
  408328:	2b01      	cmp	r3, #1
  40832a:	d104      	bne.n	408336 <tcp_process+0x376>
  40832c:	687b      	ldr	r3, [r7, #4]
  40832e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
  408330:	005b      	lsls	r3, r3, #1
  408332:	b29b      	uxth	r3, r3
  408334:	e001      	b.n	40833a <tcp_process+0x37a>
  408336:	687b      	ldr	r3, [r7, #4]
  408338:	8edb      	ldrh	r3, [r3, #54]	; 0x36
  40833a:	687a      	ldr	r2, [r7, #4]
  40833c:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c

        if (recv_flags & TF_GOT_FIN) {
  408340:	4b63      	ldr	r3, [pc, #396]	; (4084d0 <tcp_process+0x510>)
  408342:	781b      	ldrb	r3, [r3, #0]
  408344:	f003 0320 	and.w	r3, r3, #32
  408348:	2b00      	cmp	r3, #0
  40834a:	d034      	beq.n	4083b6 <tcp_process+0x3f6>
          tcp_ack_now(pcb);
  40834c:	687b      	ldr	r3, [r7, #4]
  40834e:	7f9b      	ldrb	r3, [r3, #30]
  408350:	f043 0302 	orr.w	r3, r3, #2
  408354:	b2da      	uxtb	r2, r3
  408356:	687b      	ldr	r3, [r7, #4]
  408358:	779a      	strb	r2, [r3, #30]
          pcb->state = CLOSE_WAIT;
  40835a:	687b      	ldr	r3, [r7, #4]
  40835c:	2207      	movs	r2, #7
  40835e:	761a      	strb	r2, [r3, #24]
    }
    break;
  case SYN_RCVD:
    if (flags & TCP_ACK) {
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
  408360:	e029      	b.n	4083b6 <tcp_process+0x3f6>
          tcp_ack_now(pcb);
          pcb->state = CLOSE_WAIT;
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
  408362:	4b52      	ldr	r3, [pc, #328]	; (4084ac <tcp_process+0x4ec>)
  408364:	6818      	ldr	r0, [r3, #0]
  408366:	4b52      	ldr	r3, [pc, #328]	; (4084b0 <tcp_process+0x4f0>)
  408368:	881b      	ldrh	r3, [r3, #0]
  40836a:	461a      	mov	r2, r3
  40836c:	4b51      	ldr	r3, [pc, #324]	; (4084b4 <tcp_process+0x4f4>)
  40836e:	681b      	ldr	r3, [r3, #0]
  408370:	18d1      	adds	r1, r2, r3
                tcphdr->dest, tcphdr->src);
  408372:	4b51      	ldr	r3, [pc, #324]	; (4084b8 <tcp_process+0x4f8>)
  408374:	681b      	ldr	r3, [r3, #0]
          tcp_ack_now(pcb);
          pcb->state = CLOSE_WAIT;
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
  408376:	885b      	ldrh	r3, [r3, #2]
  408378:	b29b      	uxth	r3, r3
                tcphdr->dest, tcphdr->src);
  40837a:	4a4f      	ldr	r2, [pc, #316]	; (4084b8 <tcp_process+0x4f8>)
  40837c:	6812      	ldr	r2, [r2, #0]
          tcp_ack_now(pcb);
          pcb->state = CLOSE_WAIT;
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
  40837e:	8812      	ldrh	r2, [r2, #0]
  408380:	b292      	uxth	r2, r2
  408382:	9201      	str	r2, [sp, #4]
  408384:	9300      	str	r3, [sp, #0]
  408386:	4b4d      	ldr	r3, [pc, #308]	; (4084bc <tcp_process+0x4fc>)
  408388:	4a4d      	ldr	r2, [pc, #308]	; (4084c0 <tcp_process+0x500>)
  40838a:	4c4e      	ldr	r4, [pc, #312]	; (4084c4 <tcp_process+0x504>)
  40838c:	47a0      	blx	r4
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
  40838e:	e172      	b.n	408676 <tcp_process+0x6b6>
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
                tcphdr->dest, tcphdr->src);
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
  408390:	4b45      	ldr	r3, [pc, #276]	; (4084a8 <tcp_process+0x4e8>)
  408392:	781b      	ldrb	r3, [r3, #0]
  408394:	f003 0302 	and.w	r3, r3, #2
  408398:	2b00      	cmp	r3, #0
  40839a:	f000 816c 	beq.w	408676 <tcp_process+0x6b6>
  40839e:	687b      	ldr	r3, [r7, #4]
  4083a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  4083a2:	1e5a      	subs	r2, r3, #1
  4083a4:	4b43      	ldr	r3, [pc, #268]	; (4084b4 <tcp_process+0x4f4>)
  4083a6:	681b      	ldr	r3, [r3, #0]
  4083a8:	429a      	cmp	r2, r3
  4083aa:	f040 8164 	bne.w	408676 <tcp_process+0x6b6>
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
  4083ae:	6878      	ldr	r0, [r7, #4]
  4083b0:	4b48      	ldr	r3, [pc, #288]	; (4084d4 <tcp_process+0x514>)
  4083b2:	4798      	blx	r3
    }
    break;
  4083b4:	e15f      	b.n	408676 <tcp_process+0x6b6>
    }
    break;
  case SYN_RCVD:
    if (flags & TCP_ACK) {
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
  4083b6:	bf00      	nop
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
  4083b8:	e15d      	b.n	408676 <tcp_process+0x6b6>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
  4083ba:	6878      	ldr	r0, [r7, #4]
  4083bc:	4b43      	ldr	r3, [pc, #268]	; (4084cc <tcp_process+0x50c>)
  4083be:	4798      	blx	r3
    if (recv_flags & TF_GOT_FIN) { /* passive close */
  4083c0:	4b43      	ldr	r3, [pc, #268]	; (4084d0 <tcp_process+0x510>)
  4083c2:	781b      	ldrb	r3, [r3, #0]
  4083c4:	f003 0320 	and.w	r3, r3, #32
  4083c8:	2b00      	cmp	r3, #0
  4083ca:	f000 8156 	beq.w	40867a <tcp_process+0x6ba>
      tcp_ack_now(pcb);
  4083ce:	687b      	ldr	r3, [r7, #4]
  4083d0:	7f9b      	ldrb	r3, [r3, #30]
  4083d2:	f043 0302 	orr.w	r3, r3, #2
  4083d6:	b2da      	uxtb	r2, r3
  4083d8:	687b      	ldr	r3, [r7, #4]
  4083da:	779a      	strb	r2, [r3, #30]
      pcb->state = CLOSE_WAIT;
  4083dc:	687b      	ldr	r3, [r7, #4]
  4083de:	2207      	movs	r2, #7
  4083e0:	761a      	strb	r2, [r3, #24]
    }
    break;
  4083e2:	e14a      	b.n	40867a <tcp_process+0x6ba>
  case FIN_WAIT_1:
    tcp_receive(pcb);
  4083e4:	6878      	ldr	r0, [r7, #4]
  4083e6:	4b39      	ldr	r3, [pc, #228]	; (4084cc <tcp_process+0x50c>)
  4083e8:	4798      	blx	r3
    if (recv_flags & TF_GOT_FIN) {
  4083ea:	4b39      	ldr	r3, [pc, #228]	; (4084d0 <tcp_process+0x510>)
  4083ec:	781b      	ldrb	r3, [r3, #0]
  4083ee:	f003 0320 	and.w	r3, r3, #32
  4083f2:	2b00      	cmp	r3, #0
  4083f4:	d07c      	beq.n	4084f0 <tcp_process+0x530>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt)) {
  4083f6:	4b2c      	ldr	r3, [pc, #176]	; (4084a8 <tcp_process+0x4e8>)
  4083f8:	781b      	ldrb	r3, [r3, #0]
  4083fa:	f003 0310 	and.w	r3, r3, #16
  4083fe:	2b00      	cmp	r3, #0
  408400:	d047      	beq.n	408492 <tcp_process+0x4d2>
  408402:	687b      	ldr	r3, [r7, #4]
  408404:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  408406:	4b29      	ldr	r3, [pc, #164]	; (4084ac <tcp_process+0x4ec>)
  408408:	681b      	ldr	r3, [r3, #0]
  40840a:	429a      	cmp	r2, r3
  40840c:	d141      	bne.n	408492 <tcp_process+0x4d2>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
  40840e:	687b      	ldr	r3, [r7, #4]
  408410:	7f9b      	ldrb	r3, [r3, #30]
  408412:	f043 0302 	orr.w	r3, r3, #2
  408416:	b2da      	uxtb	r2, r3
  408418:	687b      	ldr	r3, [r7, #4]
  40841a:	779a      	strb	r2, [r3, #30]
        tcp_pcb_purge(pcb);
  40841c:	6878      	ldr	r0, [r7, #4]
  40841e:	4b2e      	ldr	r3, [pc, #184]	; (4084d8 <tcp_process+0x518>)
  408420:	4798      	blx	r3
        TCP_RMV_ACTIVE(pcb);
  408422:	4b2e      	ldr	r3, [pc, #184]	; (4084dc <tcp_process+0x51c>)
  408424:	681a      	ldr	r2, [r3, #0]
  408426:	687b      	ldr	r3, [r7, #4]
  408428:	429a      	cmp	r2, r3
  40842a:	d105      	bne.n	408438 <tcp_process+0x478>
  40842c:	4b2b      	ldr	r3, [pc, #172]	; (4084dc <tcp_process+0x51c>)
  40842e:	681b      	ldr	r3, [r3, #0]
  408430:	68db      	ldr	r3, [r3, #12]
  408432:	4a2a      	ldr	r2, [pc, #168]	; (4084dc <tcp_process+0x51c>)
  408434:	6013      	str	r3, [r2, #0]
  408436:	e019      	b.n	40846c <tcp_process+0x4ac>
  408438:	4b28      	ldr	r3, [pc, #160]	; (4084dc <tcp_process+0x51c>)
  40843a:	681b      	ldr	r3, [r3, #0]
  40843c:	4a28      	ldr	r2, [pc, #160]	; (4084e0 <tcp_process+0x520>)
  40843e:	6013      	str	r3, [r2, #0]
  408440:	e010      	b.n	408464 <tcp_process+0x4a4>
  408442:	4b27      	ldr	r3, [pc, #156]	; (4084e0 <tcp_process+0x520>)
  408444:	681b      	ldr	r3, [r3, #0]
  408446:	68da      	ldr	r2, [r3, #12]
  408448:	687b      	ldr	r3, [r7, #4]
  40844a:	429a      	cmp	r2, r3
  40844c:	d105      	bne.n	40845a <tcp_process+0x49a>
  40844e:	4b24      	ldr	r3, [pc, #144]	; (4084e0 <tcp_process+0x520>)
  408450:	681b      	ldr	r3, [r3, #0]
  408452:	687a      	ldr	r2, [r7, #4]
  408454:	68d2      	ldr	r2, [r2, #12]
  408456:	60da      	str	r2, [r3, #12]
  408458:	e008      	b.n	40846c <tcp_process+0x4ac>
  40845a:	4b21      	ldr	r3, [pc, #132]	; (4084e0 <tcp_process+0x520>)
  40845c:	681b      	ldr	r3, [r3, #0]
  40845e:	68db      	ldr	r3, [r3, #12]
  408460:	4a1f      	ldr	r2, [pc, #124]	; (4084e0 <tcp_process+0x520>)
  408462:	6013      	str	r3, [r2, #0]
  408464:	4b1e      	ldr	r3, [pc, #120]	; (4084e0 <tcp_process+0x520>)
  408466:	681b      	ldr	r3, [r3, #0]
  408468:	2b00      	cmp	r3, #0
  40846a:	d1ea      	bne.n	408442 <tcp_process+0x482>
  40846c:	687b      	ldr	r3, [r7, #4]
  40846e:	2200      	movs	r2, #0
  408470:	60da      	str	r2, [r3, #12]
  408472:	4b1c      	ldr	r3, [pc, #112]	; (4084e4 <tcp_process+0x524>)
  408474:	2201      	movs	r2, #1
  408476:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
  408478:	687b      	ldr	r3, [r7, #4]
  40847a:	220a      	movs	r2, #10
  40847c:	761a      	strb	r2, [r3, #24]
        TCP_REG(&tcp_tw_pcbs, pcb);
  40847e:	4b1a      	ldr	r3, [pc, #104]	; (4084e8 <tcp_process+0x528>)
  408480:	681a      	ldr	r2, [r3, #0]
  408482:	687b      	ldr	r3, [r7, #4]
  408484:	60da      	str	r2, [r3, #12]
  408486:	4a18      	ldr	r2, [pc, #96]	; (4084e8 <tcp_process+0x528>)
  408488:	687b      	ldr	r3, [r7, #4]
  40848a:	6013      	str	r3, [r2, #0]
  40848c:	4b17      	ldr	r3, [pc, #92]	; (4084ec <tcp_process+0x52c>)
  40848e:	4798      	blx	r3
        pcb->state = CLOSING;
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt)) {
      pcb->state = FIN_WAIT_2;
    }
    break;
  408490:	e0f5      	b.n	40867e <tcp_process+0x6be>
        tcp_pcb_purge(pcb);
        TCP_RMV_ACTIVE(pcb);
        pcb->state = TIME_WAIT;
        TCP_REG(&tcp_tw_pcbs, pcb);
      } else {
        tcp_ack_now(pcb);
  408492:	687b      	ldr	r3, [r7, #4]
  408494:	7f9b      	ldrb	r3, [r3, #30]
  408496:	f043 0302 	orr.w	r3, r3, #2
  40849a:	b2da      	uxtb	r2, r3
  40849c:	687b      	ldr	r3, [r7, #4]
  40849e:	779a      	strb	r2, [r3, #30]
        pcb->state = CLOSING;
  4084a0:	687b      	ldr	r3, [r7, #4]
  4084a2:	2208      	movs	r2, #8
  4084a4:	761a      	strb	r2, [r3, #24]
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt)) {
      pcb->state = FIN_WAIT_2;
    }
    break;
  4084a6:	e0ea      	b.n	40867e <tcp_process+0x6be>
  4084a8:	204025cc 	.word	0x204025cc
  4084ac:	204025c8 	.word	0x204025c8
  4084b0:	204025ce 	.word	0x204025ce
  4084b4:	204025c4 	.word	0x204025c4
  4084b8:	204025bc 	.word	0x204025bc
  4084bc:	2040394c 	.word	0x2040394c
  4084c0:	20403954 	.word	0x20403954
  4084c4:	0040a5cd 	.word	0x0040a5cd
  4084c8:	00406771 	.word	0x00406771
  4084cc:	004087c1 	.word	0x004087c1
  4084d0:	204025d0 	.word	0x204025d0
  4084d4:	0040a721 	.word	0x0040a721
  4084d8:	00407525 	.word	0x00407525
  4084dc:	20404980 	.word	0x20404980
  4084e0:	2040498c 	.word	0x2040498c
  4084e4:	2040497c 	.word	0x2040497c
  4084e8:	20404994 	.word	0x20404994
  4084ec:	00405211 	.word	0x00405211
        TCP_REG(&tcp_tw_pcbs, pcb);
      } else {
        tcp_ack_now(pcb);
        pcb->state = CLOSING;
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt)) {
  4084f0:	4b69      	ldr	r3, [pc, #420]	; (408698 <tcp_process+0x6d8>)
  4084f2:	781b      	ldrb	r3, [r3, #0]
  4084f4:	f003 0310 	and.w	r3, r3, #16
  4084f8:	2b00      	cmp	r3, #0
  4084fa:	f000 80c0 	beq.w	40867e <tcp_process+0x6be>
  4084fe:	687b      	ldr	r3, [r7, #4]
  408500:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  408502:	4b66      	ldr	r3, [pc, #408]	; (40869c <tcp_process+0x6dc>)
  408504:	681b      	ldr	r3, [r3, #0]
  408506:	429a      	cmp	r2, r3
  408508:	f040 80b9 	bne.w	40867e <tcp_process+0x6be>
      pcb->state = FIN_WAIT_2;
  40850c:	687b      	ldr	r3, [r7, #4]
  40850e:	2206      	movs	r2, #6
  408510:	761a      	strb	r2, [r3, #24]
    }
    break;
  408512:	e0b4      	b.n	40867e <tcp_process+0x6be>
  case FIN_WAIT_2:
    tcp_receive(pcb);
  408514:	6878      	ldr	r0, [r7, #4]
  408516:	4b62      	ldr	r3, [pc, #392]	; (4086a0 <tcp_process+0x6e0>)
  408518:	4798      	blx	r3
    if (recv_flags & TF_GOT_FIN) {
  40851a:	4b62      	ldr	r3, [pc, #392]	; (4086a4 <tcp_process+0x6e4>)
  40851c:	781b      	ldrb	r3, [r3, #0]
  40851e:	f003 0320 	and.w	r3, r3, #32
  408522:	2b00      	cmp	r3, #0
  408524:	f000 80ad 	beq.w	408682 <tcp_process+0x6c2>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
  408528:	687b      	ldr	r3, [r7, #4]
  40852a:	7f9b      	ldrb	r3, [r3, #30]
  40852c:	f043 0302 	orr.w	r3, r3, #2
  408530:	b2da      	uxtb	r2, r3
  408532:	687b      	ldr	r3, [r7, #4]
  408534:	779a      	strb	r2, [r3, #30]
      tcp_pcb_purge(pcb);
  408536:	6878      	ldr	r0, [r7, #4]
  408538:	4b5b      	ldr	r3, [pc, #364]	; (4086a8 <tcp_process+0x6e8>)
  40853a:	4798      	blx	r3
      TCP_RMV_ACTIVE(pcb);
  40853c:	4b5b      	ldr	r3, [pc, #364]	; (4086ac <tcp_process+0x6ec>)
  40853e:	681a      	ldr	r2, [r3, #0]
  408540:	687b      	ldr	r3, [r7, #4]
  408542:	429a      	cmp	r2, r3
  408544:	d105      	bne.n	408552 <tcp_process+0x592>
  408546:	4b59      	ldr	r3, [pc, #356]	; (4086ac <tcp_process+0x6ec>)
  408548:	681b      	ldr	r3, [r3, #0]
  40854a:	68db      	ldr	r3, [r3, #12]
  40854c:	4a57      	ldr	r2, [pc, #348]	; (4086ac <tcp_process+0x6ec>)
  40854e:	6013      	str	r3, [r2, #0]
  408550:	e019      	b.n	408586 <tcp_process+0x5c6>
  408552:	4b56      	ldr	r3, [pc, #344]	; (4086ac <tcp_process+0x6ec>)
  408554:	681b      	ldr	r3, [r3, #0]
  408556:	4a56      	ldr	r2, [pc, #344]	; (4086b0 <tcp_process+0x6f0>)
  408558:	6013      	str	r3, [r2, #0]
  40855a:	e010      	b.n	40857e <tcp_process+0x5be>
  40855c:	4b54      	ldr	r3, [pc, #336]	; (4086b0 <tcp_process+0x6f0>)
  40855e:	681b      	ldr	r3, [r3, #0]
  408560:	68da      	ldr	r2, [r3, #12]
  408562:	687b      	ldr	r3, [r7, #4]
  408564:	429a      	cmp	r2, r3
  408566:	d105      	bne.n	408574 <tcp_process+0x5b4>
  408568:	4b51      	ldr	r3, [pc, #324]	; (4086b0 <tcp_process+0x6f0>)
  40856a:	681b      	ldr	r3, [r3, #0]
  40856c:	687a      	ldr	r2, [r7, #4]
  40856e:	68d2      	ldr	r2, [r2, #12]
  408570:	60da      	str	r2, [r3, #12]
  408572:	e008      	b.n	408586 <tcp_process+0x5c6>
  408574:	4b4e      	ldr	r3, [pc, #312]	; (4086b0 <tcp_process+0x6f0>)
  408576:	681b      	ldr	r3, [r3, #0]
  408578:	68db      	ldr	r3, [r3, #12]
  40857a:	4a4d      	ldr	r2, [pc, #308]	; (4086b0 <tcp_process+0x6f0>)
  40857c:	6013      	str	r3, [r2, #0]
  40857e:	4b4c      	ldr	r3, [pc, #304]	; (4086b0 <tcp_process+0x6f0>)
  408580:	681b      	ldr	r3, [r3, #0]
  408582:	2b00      	cmp	r3, #0
  408584:	d1ea      	bne.n	40855c <tcp_process+0x59c>
  408586:	687b      	ldr	r3, [r7, #4]
  408588:	2200      	movs	r2, #0
  40858a:	60da      	str	r2, [r3, #12]
  40858c:	4b49      	ldr	r3, [pc, #292]	; (4086b4 <tcp_process+0x6f4>)
  40858e:	2201      	movs	r2, #1
  408590:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
  408592:	687b      	ldr	r3, [r7, #4]
  408594:	220a      	movs	r2, #10
  408596:	761a      	strb	r2, [r3, #24]
      TCP_REG(&tcp_tw_pcbs, pcb);
  408598:	4b47      	ldr	r3, [pc, #284]	; (4086b8 <tcp_process+0x6f8>)
  40859a:	681a      	ldr	r2, [r3, #0]
  40859c:	687b      	ldr	r3, [r7, #4]
  40859e:	60da      	str	r2, [r3, #12]
  4085a0:	4a45      	ldr	r2, [pc, #276]	; (4086b8 <tcp_process+0x6f8>)
  4085a2:	687b      	ldr	r3, [r7, #4]
  4085a4:	6013      	str	r3, [r2, #0]
  4085a6:	4b45      	ldr	r3, [pc, #276]	; (4086bc <tcp_process+0x6fc>)
  4085a8:	4798      	blx	r3
    }
    break;
  4085aa:	e06a      	b.n	408682 <tcp_process+0x6c2>
  case CLOSING:
    tcp_receive(pcb);
  4085ac:	6878      	ldr	r0, [r7, #4]
  4085ae:	4b3c      	ldr	r3, [pc, #240]	; (4086a0 <tcp_process+0x6e0>)
  4085b0:	4798      	blx	r3
    if (flags & TCP_ACK && ackno == pcb->snd_nxt) {
  4085b2:	4b39      	ldr	r3, [pc, #228]	; (408698 <tcp_process+0x6d8>)
  4085b4:	781b      	ldrb	r3, [r3, #0]
  4085b6:	f003 0310 	and.w	r3, r3, #16
  4085ba:	2b00      	cmp	r3, #0
  4085bc:	d063      	beq.n	408686 <tcp_process+0x6c6>
  4085be:	687b      	ldr	r3, [r7, #4]
  4085c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  4085c2:	4b36      	ldr	r3, [pc, #216]	; (40869c <tcp_process+0x6dc>)
  4085c4:	681b      	ldr	r3, [r3, #0]
  4085c6:	429a      	cmp	r2, r3
  4085c8:	d15d      	bne.n	408686 <tcp_process+0x6c6>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
  4085ca:	6878      	ldr	r0, [r7, #4]
  4085cc:	4b36      	ldr	r3, [pc, #216]	; (4086a8 <tcp_process+0x6e8>)
  4085ce:	4798      	blx	r3
      TCP_RMV_ACTIVE(pcb);
  4085d0:	4b36      	ldr	r3, [pc, #216]	; (4086ac <tcp_process+0x6ec>)
  4085d2:	681a      	ldr	r2, [r3, #0]
  4085d4:	687b      	ldr	r3, [r7, #4]
  4085d6:	429a      	cmp	r2, r3
  4085d8:	d105      	bne.n	4085e6 <tcp_process+0x626>
  4085da:	4b34      	ldr	r3, [pc, #208]	; (4086ac <tcp_process+0x6ec>)
  4085dc:	681b      	ldr	r3, [r3, #0]
  4085de:	68db      	ldr	r3, [r3, #12]
  4085e0:	4a32      	ldr	r2, [pc, #200]	; (4086ac <tcp_process+0x6ec>)
  4085e2:	6013      	str	r3, [r2, #0]
  4085e4:	e019      	b.n	40861a <tcp_process+0x65a>
  4085e6:	4b31      	ldr	r3, [pc, #196]	; (4086ac <tcp_process+0x6ec>)
  4085e8:	681b      	ldr	r3, [r3, #0]
  4085ea:	4a31      	ldr	r2, [pc, #196]	; (4086b0 <tcp_process+0x6f0>)
  4085ec:	6013      	str	r3, [r2, #0]
  4085ee:	e010      	b.n	408612 <tcp_process+0x652>
  4085f0:	4b2f      	ldr	r3, [pc, #188]	; (4086b0 <tcp_process+0x6f0>)
  4085f2:	681b      	ldr	r3, [r3, #0]
  4085f4:	68da      	ldr	r2, [r3, #12]
  4085f6:	687b      	ldr	r3, [r7, #4]
  4085f8:	429a      	cmp	r2, r3
  4085fa:	d105      	bne.n	408608 <tcp_process+0x648>
  4085fc:	4b2c      	ldr	r3, [pc, #176]	; (4086b0 <tcp_process+0x6f0>)
  4085fe:	681b      	ldr	r3, [r3, #0]
  408600:	687a      	ldr	r2, [r7, #4]
  408602:	68d2      	ldr	r2, [r2, #12]
  408604:	60da      	str	r2, [r3, #12]
  408606:	e008      	b.n	40861a <tcp_process+0x65a>
  408608:	4b29      	ldr	r3, [pc, #164]	; (4086b0 <tcp_process+0x6f0>)
  40860a:	681b      	ldr	r3, [r3, #0]
  40860c:	68db      	ldr	r3, [r3, #12]
  40860e:	4a28      	ldr	r2, [pc, #160]	; (4086b0 <tcp_process+0x6f0>)
  408610:	6013      	str	r3, [r2, #0]
  408612:	4b27      	ldr	r3, [pc, #156]	; (4086b0 <tcp_process+0x6f0>)
  408614:	681b      	ldr	r3, [r3, #0]
  408616:	2b00      	cmp	r3, #0
  408618:	d1ea      	bne.n	4085f0 <tcp_process+0x630>
  40861a:	687b      	ldr	r3, [r7, #4]
  40861c:	2200      	movs	r2, #0
  40861e:	60da      	str	r2, [r3, #12]
  408620:	4b24      	ldr	r3, [pc, #144]	; (4086b4 <tcp_process+0x6f4>)
  408622:	2201      	movs	r2, #1
  408624:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
  408626:	687b      	ldr	r3, [r7, #4]
  408628:	220a      	movs	r2, #10
  40862a:	761a      	strb	r2, [r3, #24]
      TCP_REG(&tcp_tw_pcbs, pcb);
  40862c:	4b22      	ldr	r3, [pc, #136]	; (4086b8 <tcp_process+0x6f8>)
  40862e:	681a      	ldr	r2, [r3, #0]
  408630:	687b      	ldr	r3, [r7, #4]
  408632:	60da      	str	r2, [r3, #12]
  408634:	4a20      	ldr	r2, [pc, #128]	; (4086b8 <tcp_process+0x6f8>)
  408636:	687b      	ldr	r3, [r7, #4]
  408638:	6013      	str	r3, [r2, #0]
  40863a:	4b20      	ldr	r3, [pc, #128]	; (4086bc <tcp_process+0x6fc>)
  40863c:	4798      	blx	r3
    }
    break;
  40863e:	e022      	b.n	408686 <tcp_process+0x6c6>
  case LAST_ACK:
    tcp_receive(pcb);
  408640:	6878      	ldr	r0, [r7, #4]
  408642:	4b17      	ldr	r3, [pc, #92]	; (4086a0 <tcp_process+0x6e0>)
  408644:	4798      	blx	r3
    if (flags & TCP_ACK && ackno == pcb->snd_nxt) {
  408646:	4b14      	ldr	r3, [pc, #80]	; (408698 <tcp_process+0x6d8>)
  408648:	781b      	ldrb	r3, [r3, #0]
  40864a:	f003 0310 	and.w	r3, r3, #16
  40864e:	2b00      	cmp	r3, #0
  408650:	d01b      	beq.n	40868a <tcp_process+0x6ca>
  408652:	687b      	ldr	r3, [r7, #4]
  408654:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  408656:	4b11      	ldr	r3, [pc, #68]	; (40869c <tcp_process+0x6dc>)
  408658:	681b      	ldr	r3, [r3, #0]
  40865a:	429a      	cmp	r2, r3
  40865c:	d115      	bne.n	40868a <tcp_process+0x6ca>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
  40865e:	4b11      	ldr	r3, [pc, #68]	; (4086a4 <tcp_process+0x6e4>)
  408660:	781b      	ldrb	r3, [r3, #0]
  408662:	f043 0310 	orr.w	r3, r3, #16
  408666:	b2da      	uxtb	r2, r3
  408668:	4b0e      	ldr	r3, [pc, #56]	; (4086a4 <tcp_process+0x6e4>)
  40866a:	701a      	strb	r2, [r3, #0]
    }
    break;
  40866c:	e00d      	b.n	40868a <tcp_process+0x6ca>
  default:
    break;
  40866e:	bf00      	nop
  408670:	e00c      	b.n	40868c <tcp_process+0x6cc>
    else if (flags & TCP_ACK) {
      /* send a RST to bring the other side in a non-synchronized state. */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
        tcphdr->dest, tcphdr->src);
    }
    break;
  408672:	bf00      	nop
  408674:	e00a      	b.n	40868c <tcp_process+0x6cc>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
  408676:	bf00      	nop
  408678:	e008      	b.n	40868c <tcp_process+0x6cc>
    tcp_receive(pcb);
    if (recv_flags & TF_GOT_FIN) { /* passive close */
      tcp_ack_now(pcb);
      pcb->state = CLOSE_WAIT;
    }
    break;
  40867a:	bf00      	nop
  40867c:	e006      	b.n	40868c <tcp_process+0x6cc>
        pcb->state = CLOSING;
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt)) {
      pcb->state = FIN_WAIT_2;
    }
    break;
  40867e:	bf00      	nop
  408680:	e004      	b.n	40868c <tcp_process+0x6cc>
      tcp_pcb_purge(pcb);
      TCP_RMV_ACTIVE(pcb);
      pcb->state = TIME_WAIT;
      TCP_REG(&tcp_tw_pcbs, pcb);
    }
    break;
  408682:	bf00      	nop
  408684:	e002      	b.n	40868c <tcp_process+0x6cc>
      tcp_pcb_purge(pcb);
      TCP_RMV_ACTIVE(pcb);
      pcb->state = TIME_WAIT;
      TCP_REG(&tcp_tw_pcbs, pcb);
    }
    break;
  408686:	bf00      	nop
  408688:	e000      	b.n	40868c <tcp_process+0x6cc>
    if (flags & TCP_ACK && ackno == pcb->snd_nxt) {
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
    }
    break;
  40868a:	bf00      	nop
  default:
    break;
  }
  return ERR_OK;
  40868c:	2300      	movs	r3, #0
}
  40868e:	4618      	mov	r0, r3
  408690:	371c      	adds	r7, #28
  408692:	46bd      	mov	sp, r7
  408694:	bd90      	pop	{r4, r7, pc}
  408696:	bf00      	nop
  408698:	204025cc 	.word	0x204025cc
  40869c:	204025c8 	.word	0x204025c8
  4086a0:	004087c1 	.word	0x004087c1
  4086a4:	204025d0 	.word	0x204025d0
  4086a8:	00407525 	.word	0x00407525
  4086ac:	20404980 	.word	0x20404980
  4086b0:	2040498c 	.word	0x2040498c
  4086b4:	2040497c 	.word	0x2040497c
  4086b8:	20404994 	.word	0x20404994
  4086bc:	00405211 	.word	0x00405211

004086c0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
  4086c0:	b5b0      	push	{r4, r5, r7, lr}
  4086c2:	b084      	sub	sp, #16
  4086c4:	af00      	add	r7, sp, #0
  4086c6:	6078      	str	r0, [r7, #4]
  4086c8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
  4086ca:	687b      	ldr	r3, [r7, #4]
  4086cc:	68db      	ldr	r3, [r3, #12]
  4086ce:	899b      	ldrh	r3, [r3, #12]
  4086d0:	b29b      	uxth	r3, r3
  4086d2:	4618      	mov	r0, r3
  4086d4:	4b34      	ldr	r3, [pc, #208]	; (4087a8 <tcp_oos_insert_segment+0xe8>)
  4086d6:	4798      	blx	r3
  4086d8:	4603      	mov	r3, r0
  4086da:	f003 0301 	and.w	r3, r3, #1
  4086de:	2b00      	cmp	r3, #0
  4086e0:	d026      	beq.n	408730 <tcp_oos_insert_segment+0x70>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
  4086e2:	6838      	ldr	r0, [r7, #0]
  4086e4:	4b31      	ldr	r3, [pc, #196]	; (4087ac <tcp_oos_insert_segment+0xec>)
  4086e6:	4798      	blx	r3
    next = NULL;
  4086e8:	2300      	movs	r3, #0
  4086ea:	603b      	str	r3, [r7, #0]
  4086ec:	e054      	b.n	408798 <tcp_oos_insert_segment+0xd8>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
  4086ee:	683b      	ldr	r3, [r7, #0]
  4086f0:	68db      	ldr	r3, [r3, #12]
  4086f2:	899b      	ldrh	r3, [r3, #12]
  4086f4:	b29b      	uxth	r3, r3
  4086f6:	4618      	mov	r0, r3
  4086f8:	4b2b      	ldr	r3, [pc, #172]	; (4087a8 <tcp_oos_insert_segment+0xe8>)
  4086fa:	4798      	blx	r3
  4086fc:	4603      	mov	r3, r0
  4086fe:	f003 0301 	and.w	r3, r3, #1
  408702:	2b00      	cmp	r3, #0
  408704:	d00c      	beq.n	408720 <tcp_oos_insert_segment+0x60>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
  408706:	687b      	ldr	r3, [r7, #4]
  408708:	68dc      	ldr	r4, [r3, #12]
  40870a:	687b      	ldr	r3, [r7, #4]
  40870c:	68db      	ldr	r3, [r3, #12]
  40870e:	899b      	ldrh	r3, [r3, #12]
  408710:	b29d      	uxth	r5, r3
  408712:	2001      	movs	r0, #1
  408714:	4b26      	ldr	r3, [pc, #152]	; (4087b0 <tcp_oos_insert_segment+0xf0>)
  408716:	4798      	blx	r3
  408718:	4603      	mov	r3, r0
  40871a:	432b      	orrs	r3, r5
  40871c:	b29b      	uxth	r3, r3
  40871e:	81a3      	strh	r3, [r4, #12]
      }
      old_seg = next;
  408720:	683b      	ldr	r3, [r7, #0]
  408722:	60fb      	str	r3, [r7, #12]
      next = next->next;
  408724:	683b      	ldr	r3, [r7, #0]
  408726:	681b      	ldr	r3, [r3, #0]
  408728:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
  40872a:	68f8      	ldr	r0, [r7, #12]
  40872c:	4b21      	ldr	r3, [pc, #132]	; (4087b4 <tcp_oos_insert_segment+0xf4>)
  40872e:	4798      	blx	r3
    next = NULL;
  }
  else {
    /* delete some following segments
       oos queue may have segments with FIN flag */
    while (next &&
  408730:	683b      	ldr	r3, [r7, #0]
  408732:	2b00      	cmp	r3, #0
  408734:	d00e      	beq.n	408754 <tcp_oos_insert_segment+0x94>
           TCP_SEQ_GEQ((seqno + cseg->len),
  408736:	687b      	ldr	r3, [r7, #4]
  408738:	891b      	ldrh	r3, [r3, #8]
  40873a:	461a      	mov	r2, r3
  40873c:	4b1e      	ldr	r3, [pc, #120]	; (4087b8 <tcp_oos_insert_segment+0xf8>)
  40873e:	681b      	ldr	r3, [r3, #0]
  408740:	441a      	add	r2, r3
  408742:	683b      	ldr	r3, [r7, #0]
  408744:	68db      	ldr	r3, [r3, #12]
  408746:	685b      	ldr	r3, [r3, #4]
  408748:	6839      	ldr	r1, [r7, #0]
  40874a:	8909      	ldrh	r1, [r1, #8]
  40874c:	440b      	add	r3, r1
  40874e:	1ad3      	subs	r3, r2, r3
    next = NULL;
  }
  else {
    /* delete some following segments
       oos queue may have segments with FIN flag */
    while (next &&
  408750:	2b00      	cmp	r3, #0
  408752:	dacc      	bge.n	4086ee <tcp_oos_insert_segment+0x2e>
      }
      old_seg = next;
      next = next->next;
      tcp_seg_free(old_seg);
    }
    if (next &&
  408754:	683b      	ldr	r3, [r7, #0]
  408756:	2b00      	cmp	r3, #0
  408758:	d01e      	beq.n	408798 <tcp_oos_insert_segment+0xd8>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
  40875a:	687b      	ldr	r3, [r7, #4]
  40875c:	891b      	ldrh	r3, [r3, #8]
  40875e:	461a      	mov	r2, r3
  408760:	4b15      	ldr	r3, [pc, #84]	; (4087b8 <tcp_oos_insert_segment+0xf8>)
  408762:	681b      	ldr	r3, [r3, #0]
  408764:	441a      	add	r2, r3
  408766:	683b      	ldr	r3, [r7, #0]
  408768:	68db      	ldr	r3, [r3, #12]
  40876a:	685b      	ldr	r3, [r3, #4]
  40876c:	1ad3      	subs	r3, r2, r3
      }
      old_seg = next;
      next = next->next;
      tcp_seg_free(old_seg);
    }
    if (next &&
  40876e:	2b00      	cmp	r3, #0
  408770:	dd12      	ble.n	408798 <tcp_oos_insert_segment+0xd8>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
  408772:	683b      	ldr	r3, [r7, #0]
  408774:	68db      	ldr	r3, [r3, #12]
  408776:	685b      	ldr	r3, [r3, #4]
  408778:	b29a      	uxth	r2, r3
  40877a:	4b0f      	ldr	r3, [pc, #60]	; (4087b8 <tcp_oos_insert_segment+0xf8>)
  40877c:	681b      	ldr	r3, [r3, #0]
  40877e:	b29b      	uxth	r3, r3
  408780:	1ad3      	subs	r3, r2, r3
  408782:	b29a      	uxth	r2, r3
  408784:	687b      	ldr	r3, [r7, #4]
  408786:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
  408788:	687b      	ldr	r3, [r7, #4]
  40878a:	685a      	ldr	r2, [r3, #4]
  40878c:	687b      	ldr	r3, [r7, #4]
  40878e:	891b      	ldrh	r3, [r3, #8]
  408790:	4619      	mov	r1, r3
  408792:	4610      	mov	r0, r2
  408794:	4b09      	ldr	r3, [pc, #36]	; (4087bc <tcp_oos_insert_segment+0xfc>)
  408796:	4798      	blx	r3
    }
  }
  cseg->next = next;
  408798:	687b      	ldr	r3, [r7, #4]
  40879a:	683a      	ldr	r2, [r7, #0]
  40879c:	601a      	str	r2, [r3, #0]
}
  40879e:	bf00      	nop
  4087a0:	3710      	adds	r7, #16
  4087a2:	46bd      	mov	sp, r7
  4087a4:	bdb0      	pop	{r4, r5, r7, pc}
  4087a6:	bf00      	nop
  4087a8:	00402335 	.word	0x00402335
  4087ac:	00407125 	.word	0x00407125
  4087b0:	00402309 	.word	0x00402309
  4087b4:	00407151 	.word	0x00407151
  4087b8:	204025c4 	.word	0x204025c4
  4087bc:	00405ed1 	.word	0x00405ed1

004087c0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
  4087c0:	b5f0      	push	{r4, r5, r6, r7, lr}
  4087c2:	b08d      	sub	sp, #52	; 0x34
  4087c4:	af00      	add	r7, sp, #0
  4087c6:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
  4087c8:	2300      	movs	r3, #0
  4087ca:	61bb      	str	r3, [r7, #24]
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);

  if (flags & TCP_ACK) {
  4087cc:	4ba4      	ldr	r3, [pc, #656]	; (408a60 <tcp_receive+0x2a0>)
  4087ce:	781b      	ldrb	r3, [r3, #0]
  4087d0:	f003 0310 	and.w	r3, r3, #16
  4087d4:	2b00      	cmp	r3, #0
  4087d6:	f000 82aa 	beq.w	408d2e <tcp_receive+0x56e>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
  4087da:	687b      	ldr	r3, [r7, #4]
  4087dc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
  4087e0:	461a      	mov	r2, r3
  4087e2:	687b      	ldr	r3, [r7, #4]
  4087e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
  4087e6:	4413      	add	r3, r2
  4087e8:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
  4087ea:	687b      	ldr	r3, [r7, #4]
  4087ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  4087ee:	4b9d      	ldr	r3, [pc, #628]	; (408a64 <tcp_receive+0x2a4>)
  4087f0:	681b      	ldr	r3, [r3, #0]
  4087f2:	1ad3      	subs	r3, r2, r3
  4087f4:	2b00      	cmp	r3, #0
  4087f6:	db1b      	blt.n	408830 <tcp_receive+0x70>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
  4087f8:	687b      	ldr	r3, [r7, #4]
  4087fa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  4087fc:	4b99      	ldr	r3, [pc, #612]	; (408a64 <tcp_receive+0x2a4>)
  4087fe:	681b      	ldr	r3, [r3, #0]

  if (flags & TCP_ACK) {
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
  408800:	429a      	cmp	r2, r3
  408802:	d106      	bne.n	408812 <tcp_receive+0x52>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
  408804:	687b      	ldr	r3, [r7, #4]
  408806:	6d9a      	ldr	r2, [r3, #88]	; 0x58
  408808:	4b97      	ldr	r3, [pc, #604]	; (408a68 <tcp_receive+0x2a8>)
  40880a:	681b      	ldr	r3, [r3, #0]
  40880c:	1ad3      	subs	r3, r2, r3
  40880e:	2b00      	cmp	r3, #0
  408810:	db0e      	blt.n	408830 <tcp_receive+0x70>
       (pcb->snd_wl2 == ackno && tcphdr->wnd > pcb->snd_wnd)) {
  408812:	687b      	ldr	r3, [r7, #4]
  408814:	6d9a      	ldr	r2, [r3, #88]	; 0x58
  408816:	4b94      	ldr	r3, [pc, #592]	; (408a68 <tcp_receive+0x2a8>)
  408818:	681b      	ldr	r3, [r3, #0]
  if (flags & TCP_ACK) {
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
  40881a:	429a      	cmp	r2, r3
  40881c:	d143      	bne.n	4088a6 <tcp_receive+0xe6>
       (pcb->snd_wl2 == ackno && tcphdr->wnd > pcb->snd_wnd)) {
  40881e:	4b93      	ldr	r3, [pc, #588]	; (408a6c <tcp_receive+0x2ac>)
  408820:	681b      	ldr	r3, [r3, #0]
  408822:	89db      	ldrh	r3, [r3, #14]
  408824:	b29a      	uxth	r2, r3
  408826:	687b      	ldr	r3, [r7, #4]
  408828:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
  40882c:	429a      	cmp	r2, r3
  40882e:	d93a      	bls.n	4088a6 <tcp_receive+0xe6>
      pcb->snd_wnd = tcphdr->wnd;
  408830:	4b8e      	ldr	r3, [pc, #568]	; (408a6c <tcp_receive+0x2ac>)
  408832:	681b      	ldr	r3, [r3, #0]
  408834:	89db      	ldrh	r3, [r3, #14]
  408836:	b29a      	uxth	r2, r3
  408838:	687b      	ldr	r3, [r7, #4]
  40883a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < tcphdr->wnd) {
  40883e:	687b      	ldr	r3, [r7, #4]
  408840:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
  408844:	4b89      	ldr	r3, [pc, #548]	; (408a6c <tcp_receive+0x2ac>)
  408846:	681b      	ldr	r3, [r3, #0]
  408848:	89db      	ldrh	r3, [r3, #14]
  40884a:	b29b      	uxth	r3, r3
  40884c:	429a      	cmp	r2, r3
  40884e:	d206      	bcs.n	40885e <tcp_receive+0x9e>
        pcb->snd_wnd_max = tcphdr->wnd;
  408850:	4b86      	ldr	r3, [pc, #536]	; (408a6c <tcp_receive+0x2ac>)
  408852:	681b      	ldr	r3, [r3, #0]
  408854:	89db      	ldrh	r3, [r3, #14]
  408856:	b29a      	uxth	r2, r3
  408858:	687b      	ldr	r3, [r7, #4]
  40885a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
  40885e:	4b81      	ldr	r3, [pc, #516]	; (408a64 <tcp_receive+0x2a4>)
  408860:	681a      	ldr	r2, [r3, #0]
  408862:	687b      	ldr	r3, [r7, #4]
  408864:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
  408866:	4b80      	ldr	r3, [pc, #512]	; (408a68 <tcp_receive+0x2a8>)
  408868:	681a      	ldr	r2, [r3, #0]
  40886a:	687b      	ldr	r3, [r7, #4]
  40886c:	659a      	str	r2, [r3, #88]	; 0x58
      if (pcb->snd_wnd == 0) {
  40886e:	687b      	ldr	r3, [r7, #4]
  408870:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
  408874:	2b00      	cmp	r3, #0
  408876:	d10d      	bne.n	408894 <tcp_receive+0xd4>
        if (pcb->persist_backoff == 0) {
  408878:	687b      	ldr	r3, [r7, #4]
  40887a:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
  40887e:	2b00      	cmp	r3, #0
  408880:	d111      	bne.n	4088a6 <tcp_receive+0xe6>
          /* start persist timer */
          pcb->persist_cnt = 0;
  408882:	687b      	ldr	r3, [r7, #4]
  408884:	2200      	movs	r2, #0
  408886:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          pcb->persist_backoff = 1;
  40888a:	687b      	ldr	r3, [r7, #4]
  40888c:	2201      	movs	r2, #1
  40888e:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
  408892:	e008      	b.n	4088a6 <tcp_receive+0xe6>
        }
      } else if (pcb->persist_backoff > 0) {
  408894:	687b      	ldr	r3, [r7, #4]
  408896:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
  40889a:	2b00      	cmp	r3, #0
  40889c:	d003      	beq.n	4088a6 <tcp_receive+0xe6>
        /* stop persist timer */
          pcb->persist_backoff = 0;
  40889e:	687b      	ldr	r3, [r7, #4]
  4088a0:	2200      	movs	r2, #0
  4088a2:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
  4088a6:	4b70      	ldr	r3, [pc, #448]	; (408a68 <tcp_receive+0x2a8>)
  4088a8:	681a      	ldr	r2, [r3, #0]
  4088aa:	687b      	ldr	r3, [r7, #4]
  4088ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  4088ae:	1ad3      	subs	r3, r2, r3
  4088b0:	2b00      	cmp	r3, #0
  4088b2:	dc5c      	bgt.n	40896e <tcp_receive+0x1ae>
      pcb->acked = 0;
  4088b4:	687b      	ldr	r3, [r7, #4]
  4088b6:	2200      	movs	r2, #0
  4088b8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* Clause 2 */
      if (tcplen == 0) {
  4088bc:	4b6c      	ldr	r3, [pc, #432]	; (408a70 <tcp_receive+0x2b0>)
  4088be:	881b      	ldrh	r3, [r3, #0]
  4088c0:	2b00      	cmp	r3, #0
  4088c2:	d14b      	bne.n	40895c <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge){
  4088c4:	687b      	ldr	r3, [r7, #4]
  4088c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
  4088c8:	687a      	ldr	r2, [r7, #4]
  4088ca:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
  4088ce:	441a      	add	r2, r3
  4088d0:	697b      	ldr	r3, [r7, #20]
  4088d2:	429a      	cmp	r2, r3
  4088d4:	d142      	bne.n	40895c <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
  4088d6:	687b      	ldr	r3, [r7, #4]
  4088d8:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
  4088dc:	2b00      	cmp	r3, #0
  4088de:	db3d      	blt.n	40895c <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
  4088e0:	687b      	ldr	r3, [r7, #4]
  4088e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
  4088e4:	4b60      	ldr	r3, [pc, #384]	; (408a68 <tcp_receive+0x2a8>)
  4088e6:	681b      	ldr	r3, [r3, #0]
  4088e8:	429a      	cmp	r2, r3
  4088ea:	d137      	bne.n	40895c <tcp_receive+0x19c>
              found_dupack = 1;
  4088ec:	2301      	movs	r3, #1
  4088ee:	61bb      	str	r3, [r7, #24]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
  4088f0:	687b      	ldr	r3, [r7, #4]
  4088f2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
  4088f6:	3301      	adds	r3, #1
  4088f8:	b2da      	uxtb	r2, r3
  4088fa:	687b      	ldr	r3, [r7, #4]
  4088fc:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
  408900:	429a      	cmp	r2, r3
  408902:	d907      	bls.n	408914 <tcp_receive+0x154>
                ++pcb->dupacks;
  408904:	687b      	ldr	r3, [r7, #4]
  408906:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
  40890a:	3301      	adds	r3, #1
  40890c:	b2da      	uxtb	r2, r3
  40890e:	687b      	ldr	r3, [r7, #4]
  408910:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
              }
              if (pcb->dupacks > 3) {
  408914:	687b      	ldr	r3, [r7, #4]
  408916:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
  40891a:	2b03      	cmp	r3, #3
  40891c:	d916      	bls.n	40894c <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((u16_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
  40891e:	687b      	ldr	r3, [r7, #4]
  408920:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
  408924:	687b      	ldr	r3, [r7, #4]
  408926:	8edb      	ldrh	r3, [r3, #54]	; 0x36
  408928:	4413      	add	r3, r2
  40892a:	b29a      	uxth	r2, r3
  40892c:	687b      	ldr	r3, [r7, #4]
  40892e:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
  408932:	429a      	cmp	r2, r3
  408934:	d912      	bls.n	40895c <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
  408936:	687b      	ldr	r3, [r7, #4]
  408938:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
  40893c:	687b      	ldr	r3, [r7, #4]
  40893e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
  408940:	4413      	add	r3, r2
  408942:	b29a      	uxth	r2, r3
  408944:	687b      	ldr	r3, [r7, #4]
  408946:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  40894a:	e007      	b.n	40895c <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
  40894c:	687b      	ldr	r3, [r7, #4]
  40894e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
  408952:	2b03      	cmp	r3, #3
  408954:	d102      	bne.n	40895c <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
  408956:	6878      	ldr	r0, [r7, #4]
  408958:	4b46      	ldr	r3, [pc, #280]	; (408a74 <tcp_receive+0x2b4>)
  40895a:	4798      	blx	r3
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
  40895c:	69bb      	ldr	r3, [r7, #24]
  40895e:	2b00      	cmp	r3, #0
  408960:	f040 815e 	bne.w	408c20 <tcp_receive+0x460>
        pcb->dupacks = 0;
  408964:	687b      	ldr	r3, [r7, #4]
  408966:	2200      	movs	r2, #0
  408968:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  40896c:	e158      	b.n	408c20 <tcp_receive+0x460>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)){
  40896e:	4b3e      	ldr	r3, [pc, #248]	; (408a68 <tcp_receive+0x2a8>)
  408970:	681a      	ldr	r2, [r3, #0]
  408972:	687b      	ldr	r3, [r7, #4]
  408974:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  408976:	1ad3      	subs	r3, r2, r3
  408978:	3b01      	subs	r3, #1
  40897a:	2b00      	cmp	r3, #0
  40897c:	f2c0 8104 	blt.w	408b88 <tcp_receive+0x3c8>
  408980:	4b39      	ldr	r3, [pc, #228]	; (408a68 <tcp_receive+0x2a8>)
  408982:	681a      	ldr	r2, [r3, #0]
  408984:	687b      	ldr	r3, [r7, #4]
  408986:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  408988:	1ad3      	subs	r3, r2, r3
  40898a:	2b00      	cmp	r3, #0
  40898c:	f300 80fc 	bgt.w	408b88 <tcp_receive+0x3c8>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
  408990:	687b      	ldr	r3, [r7, #4]
  408992:	7f9b      	ldrb	r3, [r3, #30]
  408994:	f003 0304 	and.w	r3, r3, #4
  408998:	2b00      	cmp	r3, #0
  40899a:	d00c      	beq.n	4089b6 <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
  40899c:	687b      	ldr	r3, [r7, #4]
  40899e:	7f9b      	ldrb	r3, [r3, #30]
  4089a0:	f023 0304 	bic.w	r3, r3, #4
  4089a4:	b2da      	uxtb	r2, r3
  4089a6:	687b      	ldr	r3, [r7, #4]
  4089a8:	779a      	strb	r2, [r3, #30]
        pcb->cwnd = pcb->ssthresh;
  4089aa:	687b      	ldr	r3, [r7, #4]
  4089ac:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
  4089b0:	687b      	ldr	r3, [r7, #4]
  4089b2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
  4089b6:	687b      	ldr	r3, [r7, #4]
  4089b8:	2200      	movs	r2, #0
  4089ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
  4089be:	687b      	ldr	r3, [r7, #4]
  4089c0:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
  4089c4:	10db      	asrs	r3, r3, #3
  4089c6:	b21b      	sxth	r3, r3
  4089c8:	b29a      	uxth	r2, r3
  4089ca:	687b      	ldr	r3, [r7, #4]
  4089cc:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
  4089d0:	b29b      	uxth	r3, r3
  4089d2:	4413      	add	r3, r2
  4089d4:	b29b      	uxth	r3, r3
  4089d6:	b21a      	sxth	r2, r3
  4089d8:	687b      	ldr	r3, [r7, #4]
  4089da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

      /* Update the send buffer space. Diff between the two can never exceed 64K? */
      pcb->acked = (u16_t)(ackno - pcb->lastack);
  4089de:	4b22      	ldr	r3, [pc, #136]	; (408a68 <tcp_receive+0x2a8>)
  4089e0:	681b      	ldr	r3, [r3, #0]
  4089e2:	b29a      	uxth	r2, r3
  4089e4:	687b      	ldr	r3, [r7, #4]
  4089e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  4089e8:	b29b      	uxth	r3, r3
  4089ea:	1ad3      	subs	r3, r2, r3
  4089ec:	b29a      	uxth	r2, r3
  4089ee:	687b      	ldr	r3, [r7, #4]
  4089f0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

      pcb->snd_buf += pcb->acked;
  4089f4:	687b      	ldr	r3, [r7, #4]
  4089f6:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
  4089fa:	687b      	ldr	r3, [r7, #4]
  4089fc:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
  408a00:	4413      	add	r3, r2
  408a02:	b29a      	uxth	r2, r3
  408a04:	687b      	ldr	r3, [r7, #4]
  408a06:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
  408a0a:	687b      	ldr	r3, [r7, #4]
  408a0c:	2200      	movs	r2, #0
  408a0e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
      pcb->lastack = ackno;
  408a12:	4b15      	ldr	r3, [pc, #84]	; (408a68 <tcp_receive+0x2a8>)
  408a14:	681a      	ldr	r2, [r3, #0]
  408a16:	687b      	ldr	r3, [r7, #4]
  408a18:	649a      	str	r2, [r3, #72]	; 0x48

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
  408a1a:	687b      	ldr	r3, [r7, #4]
  408a1c:	7e1b      	ldrb	r3, [r3, #24]
  408a1e:	2b03      	cmp	r3, #3
  408a20:	d97b      	bls.n	408b1a <tcp_receive+0x35a>
        if (pcb->cwnd < pcb->ssthresh) {
  408a22:	687b      	ldr	r3, [r7, #4]
  408a24:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
  408a28:	687b      	ldr	r3, [r7, #4]
  408a2a:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
  408a2e:	429a      	cmp	r2, r3
  408a30:	d222      	bcs.n	408a78 <tcp_receive+0x2b8>
          if ((u16_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
  408a32:	687b      	ldr	r3, [r7, #4]
  408a34:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
  408a38:	687b      	ldr	r3, [r7, #4]
  408a3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
  408a3c:	4413      	add	r3, r2
  408a3e:	b29a      	uxth	r2, r3
  408a40:	687b      	ldr	r3, [r7, #4]
  408a42:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
  408a46:	429a      	cmp	r2, r3
  408a48:	d967      	bls.n	408b1a <tcp_receive+0x35a>
            pcb->cwnd += pcb->mss;
  408a4a:	687b      	ldr	r3, [r7, #4]
  408a4c:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
  408a50:	687b      	ldr	r3, [r7, #4]
  408a52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
  408a54:	4413      	add	r3, r2
  408a56:	b29a      	uxth	r2, r3
  408a58:	687b      	ldr	r3, [r7, #4]
  408a5a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  408a5e:	e05c      	b.n	408b1a <tcp_receive+0x35a>
  408a60:	204025cc 	.word	0x204025cc
  408a64:	204025c4 	.word	0x204025c4
  408a68:	204025c8 	.word	0x204025c8
  408a6c:	204025bc 	.word	0x204025bc
  408a70:	204025ce 	.word	0x204025ce
  408a74:	0040a7bd 	.word	0x0040a7bd
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"U16_F"\n", pcb->cwnd));
        } else {
          u16_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
  408a78:	687b      	ldr	r3, [r7, #4]
  408a7a:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
  408a7e:	687b      	ldr	r3, [r7, #4]
  408a80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
  408a82:	4619      	mov	r1, r3
  408a84:	687b      	ldr	r3, [r7, #4]
  408a86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
  408a88:	fb03 f301 	mul.w	r3, r3, r1
  408a8c:	6879      	ldr	r1, [r7, #4]
  408a8e:	f8b1 104c 	ldrh.w	r1, [r1, #76]	; 0x4c
  408a92:	fb93 f3f1 	sdiv	r3, r3, r1
  408a96:	b29b      	uxth	r3, r3
  408a98:	4413      	add	r3, r2
  408a9a:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
  408a9c:	687b      	ldr	r3, [r7, #4]
  408a9e:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
  408aa2:	8a7a      	ldrh	r2, [r7, #18]
  408aa4:	429a      	cmp	r2, r3
  408aa6:	d938      	bls.n	408b1a <tcp_receive+0x35a>
            pcb->cwnd = new_cwnd;
  408aa8:	687b      	ldr	r3, [r7, #4]
  408aaa:	8a7a      	ldrh	r2, [r7, #18]
  408aac:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
                                    pcb->unacked != NULL?
                                    ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowlegdes them. */
      while (pcb->unacked != NULL &&
  408ab0:	e033      	b.n	408b1a <tcp_receive+0x35a>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      ntohl(pcb->unacked->tcphdr->seqno),
                                      ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
  408ab2:	687b      	ldr	r3, [r7, #4]
  408ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  408ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
  408ab8:	687b      	ldr	r3, [r7, #4]
  408aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  408abc:	681a      	ldr	r2, [r3, #0]
  408abe:	687b      	ldr	r3, [r7, #4]
  408ac0:	671a      	str	r2, [r3, #112]	; 0x70

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"U16_F" ... ", (u16_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
        /* Prevent ACK for FIN to generate a sent event */
        if ((pcb->acked != 0) && ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0)) {
  408ac2:	687b      	ldr	r3, [r7, #4]
  408ac4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
  408ac8:	2b00      	cmp	r3, #0
  408aca:	d013      	beq.n	408af4 <tcp_receive+0x334>
  408acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  408ace:	68db      	ldr	r3, [r3, #12]
  408ad0:	899b      	ldrh	r3, [r3, #12]
  408ad2:	b29b      	uxth	r3, r3
  408ad4:	4618      	mov	r0, r3
  408ad6:	4b2f      	ldr	r3, [pc, #188]	; (408b94 <tcp_receive+0x3d4>)
  408ad8:	4798      	blx	r3
  408ada:	4603      	mov	r3, r0
  408adc:	f003 0301 	and.w	r3, r3, #1
  408ae0:	2b00      	cmp	r3, #0
  408ae2:	d007      	beq.n	408af4 <tcp_receive+0x334>
          pcb->acked--;
  408ae4:	687b      	ldr	r3, [r7, #4]
  408ae6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
  408aea:	3b01      	subs	r3, #1
  408aec:	b29a      	uxth	r2, r3
  408aee:	687b      	ldr	r3, [r7, #4]
  408af0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
        }

        pcb->snd_queuelen -= pbuf_clen(next->p);
  408af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  408af6:	685b      	ldr	r3, [r3, #4]
  408af8:	4618      	mov	r0, r3
  408afa:	4b27      	ldr	r3, [pc, #156]	; (408b98 <tcp_receive+0x3d8>)
  408afc:	4798      	blx	r3
  408afe:	4603      	mov	r3, r0
  408b00:	4619      	mov	r1, r3
  408b02:	687b      	ldr	r3, [r7, #4]
  408b04:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
  408b08:	b28b      	uxth	r3, r1
  408b0a:	1ad3      	subs	r3, r2, r3
  408b0c:	b29a      	uxth	r2, r3
  408b0e:	687b      	ldr	r3, [r7, #4]
  408b10:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        tcp_seg_free(next);
  408b14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
  408b16:	4b21      	ldr	r3, [pc, #132]	; (408b9c <tcp_receive+0x3dc>)
  408b18:	4798      	blx	r3
                                    pcb->unacked != NULL?
                                    ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowlegdes them. */
      while (pcb->unacked != NULL &&
  408b1a:	687b      	ldr	r3, [r7, #4]
  408b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  408b1e:	2b00      	cmp	r3, #0
  408b20:	d022      	beq.n	408b68 <tcp_receive+0x3a8>
             TCP_SEQ_LEQ(ntohl(pcb->unacked->tcphdr->seqno) +
  408b22:	687b      	ldr	r3, [r7, #4]
  408b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  408b26:	68db      	ldr	r3, [r3, #12]
  408b28:	685b      	ldr	r3, [r3, #4]
  408b2a:	4618      	mov	r0, r3
  408b2c:	4b1c      	ldr	r3, [pc, #112]	; (408ba0 <tcp_receive+0x3e0>)
  408b2e:	4798      	blx	r3
  408b30:	4604      	mov	r4, r0
  408b32:	687b      	ldr	r3, [r7, #4]
  408b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  408b36:	891b      	ldrh	r3, [r3, #8]
  408b38:	461d      	mov	r5, r3
  408b3a:	687b      	ldr	r3, [r7, #4]
  408b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  408b3e:	68db      	ldr	r3, [r3, #12]
  408b40:	899b      	ldrh	r3, [r3, #12]
  408b42:	b29b      	uxth	r3, r3
  408b44:	4618      	mov	r0, r3
  408b46:	4b13      	ldr	r3, [pc, #76]	; (408b94 <tcp_receive+0x3d4>)
  408b48:	4798      	blx	r3
  408b4a:	4603      	mov	r3, r0
  408b4c:	f003 0303 	and.w	r3, r3, #3
  408b50:	2b00      	cmp	r3, #0
  408b52:	bf14      	ite	ne
  408b54:	2301      	movne	r3, #1
  408b56:	2300      	moveq	r3, #0
  408b58:	b2db      	uxtb	r3, r3
  408b5a:	442b      	add	r3, r5
  408b5c:	18e2      	adds	r2, r4, r3
  408b5e:	4b11      	ldr	r3, [pc, #68]	; (408ba4 <tcp_receive+0x3e4>)
  408b60:	681b      	ldr	r3, [r3, #0]
  408b62:	1ad3      	subs	r3, r2, r3
                                    pcb->unacked != NULL?
                                    ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowlegdes them. */
      while (pcb->unacked != NULL &&
  408b64:	2b00      	cmp	r3, #0
  408b66:	dda4      	ble.n	408ab2 <tcp_receive+0x2f2>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if(pcb->unacked == NULL)
  408b68:	687b      	ldr	r3, [r7, #4]
  408b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  408b6c:	2b00      	cmp	r3, #0
  408b6e:	d104      	bne.n	408b7a <tcp_receive+0x3ba>
        pcb->rtime = -1;
  408b70:	687b      	ldr	r3, [r7, #4]
  408b72:	f64f 72ff 	movw	r2, #65535	; 0xffff
  408b76:	869a      	strh	r2, [r3, #52]	; 0x34
  408b78:	e002      	b.n	408b80 <tcp_receive+0x3c0>
      else
        pcb->rtime = 0;
  408b7a:	687b      	ldr	r3, [r7, #4]
  408b7c:	2200      	movs	r2, #0
  408b7e:	869a      	strh	r2, [r3, #52]	; 0x34

      pcb->polltmr = 0;
  408b80:	687b      	ldr	r3, [r7, #4]
  408b82:	2200      	movs	r2, #0
  408b84:	77da      	strb	r2, [r3, #31]
  408b86:	e003      	b.n	408b90 <tcp_receive+0x3d0>
    } else {
      /* Fix bug bug #21582: out of sequence ACK, didn't really ack anything */
      pcb->acked = 0;
  408b88:	687b      	ldr	r3, [r7, #4]
  408b8a:	2200      	movs	r2, #0
  408b8c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
  408b90:	e046      	b.n	408c20 <tcp_receive+0x460>
  408b92:	bf00      	nop
  408b94:	00402335 	.word	0x00402335
  408b98:	004060f9 	.word	0x004060f9
  408b9c:	00407151 	.word	0x00407151
  408ba0:	00402389 	.word	0x00402389
  408ba4:	204025c8 	.word	0x204025c8
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    ntohl(pcb->unsent->tcphdr->seqno), ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
  408ba8:	687b      	ldr	r3, [r7, #4]
  408baa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
  408bac:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
  408bae:	687b      	ldr	r3, [r7, #4]
  408bb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
  408bb2:	681a      	ldr	r2, [r3, #0]
  408bb4:	687b      	ldr	r3, [r7, #4]
  408bb6:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
  408bb8:	687b      	ldr	r3, [r7, #4]
  408bba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
  408bbc:	2b00      	cmp	r3, #0
  408bbe:	d103      	bne.n	408bc8 <tcp_receive+0x408>
        pcb->unsent_oversize = 0;
  408bc0:	687b      	ldr	r3, [r7, #4]
  408bc2:	2200      	movs	r2, #0
  408bc4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }
#endif /* TCP_OVERSIZE */ 
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"U16_F" ... ", (u16_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
      /* Prevent ACK for FIN to generate a sent event */
      if ((pcb->acked != 0) && ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0)) {
  408bc8:	687b      	ldr	r3, [r7, #4]
  408bca:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
  408bce:	2b00      	cmp	r3, #0
  408bd0:	d013      	beq.n	408bfa <tcp_receive+0x43a>
  408bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  408bd4:	68db      	ldr	r3, [r3, #12]
  408bd6:	899b      	ldrh	r3, [r3, #12]
  408bd8:	b29b      	uxth	r3, r3
  408bda:	4618      	mov	r0, r3
  408bdc:	4b90      	ldr	r3, [pc, #576]	; (408e20 <tcp_receive+0x660>)
  408bde:	4798      	blx	r3
  408be0:	4603      	mov	r3, r0
  408be2:	f003 0301 	and.w	r3, r3, #1
  408be6:	2b00      	cmp	r3, #0
  408be8:	d007      	beq.n	408bfa <tcp_receive+0x43a>
        pcb->acked--;
  408bea:	687b      	ldr	r3, [r7, #4]
  408bec:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
  408bf0:	3b01      	subs	r3, #1
  408bf2:	b29a      	uxth	r2, r3
  408bf4:	687b      	ldr	r3, [r7, #4]
  408bf6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
      pcb->snd_queuelen -= pbuf_clen(next->p);
  408bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  408bfc:	685b      	ldr	r3, [r3, #4]
  408bfe:	4618      	mov	r0, r3
  408c00:	4b88      	ldr	r3, [pc, #544]	; (408e24 <tcp_receive+0x664>)
  408c02:	4798      	blx	r3
  408c04:	4603      	mov	r3, r0
  408c06:	4619      	mov	r1, r3
  408c08:	687b      	ldr	r3, [r7, #4]
  408c0a:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
  408c0e:	b28b      	uxth	r3, r1
  408c10:	1ad3      	subs	r3, r2, r3
  408c12:	b29a      	uxth	r2, r3
  408c14:	687b      	ldr	r3, [r7, #4]
  408c16:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
      tcp_seg_free(next);
  408c1a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
  408c1c:	4b82      	ldr	r3, [pc, #520]	; (408e28 <tcp_receive+0x668>)
  408c1e:	4798      	blx	r3
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
  408c20:	687b      	ldr	r3, [r7, #4]
  408c22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
  408c24:	2b00      	cmp	r3, #0
  408c26:	d029      	beq.n	408c7c <tcp_receive+0x4bc>
           TCP_SEQ_BETWEEN(ackno, ntohl(pcb->unsent->tcphdr->seqno) + 
  408c28:	4b80      	ldr	r3, [pc, #512]	; (408e2c <tcp_receive+0x66c>)
  408c2a:	681c      	ldr	r4, [r3, #0]
  408c2c:	687b      	ldr	r3, [r7, #4]
  408c2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
  408c30:	68db      	ldr	r3, [r3, #12]
  408c32:	685b      	ldr	r3, [r3, #4]
  408c34:	4618      	mov	r0, r3
  408c36:	4b7e      	ldr	r3, [pc, #504]	; (408e30 <tcp_receive+0x670>)
  408c38:	4798      	blx	r3
  408c3a:	4605      	mov	r5, r0
  408c3c:	687b      	ldr	r3, [r7, #4]
  408c3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
  408c40:	891b      	ldrh	r3, [r3, #8]
  408c42:	461e      	mov	r6, r3
  408c44:	687b      	ldr	r3, [r7, #4]
  408c46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
  408c48:	68db      	ldr	r3, [r3, #12]
  408c4a:	899b      	ldrh	r3, [r3, #12]
  408c4c:	b29b      	uxth	r3, r3
  408c4e:	4618      	mov	r0, r3
  408c50:	4b73      	ldr	r3, [pc, #460]	; (408e20 <tcp_receive+0x660>)
  408c52:	4798      	blx	r3
  408c54:	4603      	mov	r3, r0
  408c56:	f003 0303 	and.w	r3, r3, #3
  408c5a:	2b00      	cmp	r3, #0
  408c5c:	bf14      	ite	ne
  408c5e:	2301      	movne	r3, #1
  408c60:	2300      	moveq	r3, #0
  408c62:	b2db      	uxtb	r3, r3
  408c64:	4433      	add	r3, r6
  408c66:	442b      	add	r3, r5
  408c68:	1ae3      	subs	r3, r4, r3
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
  408c6a:	2b00      	cmp	r3, #0
  408c6c:	db06      	blt.n	408c7c <tcp_receive+0x4bc>
           TCP_SEQ_BETWEEN(ackno, ntohl(pcb->unsent->tcphdr->seqno) + 
  408c6e:	4b6f      	ldr	r3, [pc, #444]	; (408e2c <tcp_receive+0x66c>)
  408c70:	681a      	ldr	r2, [r3, #0]
  408c72:	687b      	ldr	r3, [r7, #4]
  408c74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  408c76:	1ad3      	subs	r3, r2, r3
  408c78:	2b00      	cmp	r3, #0
  408c7a:	dd95      	ble.n	408ba8 <tcp_receive+0x3e8>
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
  408c7c:	687b      	ldr	r3, [r7, #4]
  408c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  408c80:	2b00      	cmp	r3, #0
  408c82:	d054      	beq.n	408d2e <tcp_receive+0x56e>
  408c84:	687b      	ldr	r3, [r7, #4]
  408c86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  408c88:	4b68      	ldr	r3, [pc, #416]	; (408e2c <tcp_receive+0x66c>)
  408c8a:	681b      	ldr	r3, [r3, #0]
  408c8c:	1ad3      	subs	r3, r2, r3
  408c8e:	2b00      	cmp	r3, #0
  408c90:	da4d      	bge.n	408d2e <tcp_receive+0x56e>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
  408c92:	4b68      	ldr	r3, [pc, #416]	; (408e34 <tcp_receive+0x674>)
  408c94:	681b      	ldr	r3, [r3, #0]
  408c96:	b29a      	uxth	r2, r3
  408c98:	687b      	ldr	r3, [r7, #4]
  408c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  408c9c:	b29b      	uxth	r3, r3
  408c9e:	1ad3      	subs	r3, r2, r3
  408ca0:	b29b      	uxth	r3, r3
  408ca2:	83fb      	strh	r3, [r7, #30]

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, m * TCP_SLOW_INTERVAL));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
  408ca4:	8bfa      	ldrh	r2, [r7, #30]
  408ca6:	687b      	ldr	r3, [r7, #4]
  408ca8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
  408cac:	10db      	asrs	r3, r3, #3
  408cae:	b21b      	sxth	r3, r3
  408cb0:	b29b      	uxth	r3, r3
  408cb2:	1ad3      	subs	r3, r2, r3
  408cb4:	b29b      	uxth	r3, r3
  408cb6:	83fb      	strh	r3, [r7, #30]
      pcb->sa += m;
  408cb8:	687b      	ldr	r3, [r7, #4]
  408cba:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
  408cbe:	b29a      	uxth	r2, r3
  408cc0:	8bfb      	ldrh	r3, [r7, #30]
  408cc2:	4413      	add	r3, r2
  408cc4:	b29b      	uxth	r3, r3
  408cc6:	b21a      	sxth	r2, r3
  408cc8:	687b      	ldr	r3, [r7, #4]
  408cca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      if (m < 0) {
  408cce:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
  408cd2:	2b00      	cmp	r3, #0
  408cd4:	da03      	bge.n	408cde <tcp_receive+0x51e>
        m = -m;
  408cd6:	8bfb      	ldrh	r3, [r7, #30]
  408cd8:	425b      	negs	r3, r3
  408cda:	b29b      	uxth	r3, r3
  408cdc:	83fb      	strh	r3, [r7, #30]
      }
      m = m - (pcb->sv >> 2);
  408cde:	8bfa      	ldrh	r2, [r7, #30]
  408ce0:	687b      	ldr	r3, [r7, #4]
  408ce2:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
  408ce6:	109b      	asrs	r3, r3, #2
  408ce8:	b21b      	sxth	r3, r3
  408cea:	b29b      	uxth	r3, r3
  408cec:	1ad3      	subs	r3, r2, r3
  408cee:	b29b      	uxth	r3, r3
  408cf0:	83fb      	strh	r3, [r7, #30]
      pcb->sv += m;
  408cf2:	687b      	ldr	r3, [r7, #4]
  408cf4:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
  408cf8:	b29a      	uxth	r2, r3
  408cfa:	8bfb      	ldrh	r3, [r7, #30]
  408cfc:	4413      	add	r3, r2
  408cfe:	b29b      	uxth	r3, r3
  408d00:	b21a      	sxth	r2, r3
  408d02:	687b      	ldr	r3, [r7, #4]
  408d04:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
  408d08:	687b      	ldr	r3, [r7, #4]
  408d0a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
  408d0e:	10db      	asrs	r3, r3, #3
  408d10:	b21b      	sxth	r3, r3
  408d12:	b29a      	uxth	r2, r3
  408d14:	687b      	ldr	r3, [r7, #4]
  408d16:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
  408d1a:	b29b      	uxth	r3, r3
  408d1c:	4413      	add	r3, r2
  408d1e:	b29b      	uxth	r3, r3
  408d20:	b21a      	sxth	r2, r3
  408d22:	687b      	ldr	r3, [r7, #4]
  408d24:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, pcb->rto * TCP_SLOW_INTERVAL));

      pcb->rttest = 0;
  408d28:	687b      	ldr	r3, [r7, #4]
  408d2a:	2200      	movs	r2, #0
  408d2c:	639a      	str	r2, [r3, #56]	; 0x38

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapeter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
  408d2e:	4b42      	ldr	r3, [pc, #264]	; (408e38 <tcp_receive+0x678>)
  408d30:	881b      	ldrh	r3, [r3, #0]
  408d32:	2b00      	cmp	r3, #0
  408d34:	f000 8462 	beq.w	4095fc <tcp_receive+0xe3c>
  408d38:	687b      	ldr	r3, [r7, #4]
  408d3a:	7e1b      	ldrb	r3, [r3, #24]
  408d3c:	2b06      	cmp	r3, #6
  408d3e:	f200 845d 	bhi.w	4095fc <tcp_receive+0xe3c>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)){
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)){
  408d42:	687b      	ldr	r3, [r7, #4]
  408d44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  408d46:	4b3d      	ldr	r3, [pc, #244]	; (408e3c <tcp_receive+0x67c>)
  408d48:	681b      	ldr	r3, [r3, #0]
  408d4a:	1ad3      	subs	r3, r2, r3
  408d4c:	3b01      	subs	r3, #1
  408d4e:	2b00      	cmp	r3, #0
  408d50:	db7a      	blt.n	408e48 <tcp_receive+0x688>
  408d52:	687b      	ldr	r3, [r7, #4]
  408d54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  408d56:	4b38      	ldr	r3, [pc, #224]	; (408e38 <tcp_receive+0x678>)
  408d58:	881b      	ldrh	r3, [r3, #0]
  408d5a:	4619      	mov	r1, r3
  408d5c:	4b37      	ldr	r3, [pc, #220]	; (408e3c <tcp_receive+0x67c>)
  408d5e:	681b      	ldr	r3, [r3, #0]
  408d60:	440b      	add	r3, r1
  408d62:	1ad3      	subs	r3, r2, r3
  408d64:	3301      	adds	r3, #1
  408d66:	2b00      	cmp	r3, #0
  408d68:	dc6e      	bgt.n	408e48 <tcp_receive+0x688>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      off = pcb->rcv_nxt - seqno;
  408d6a:	687b      	ldr	r3, [r7, #4]
  408d6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  408d6e:	4b33      	ldr	r3, [pc, #204]	; (408e3c <tcp_receive+0x67c>)
  408d70:	681b      	ldr	r3, [r3, #0]
  408d72:	1ad3      	subs	r3, r2, r3
  408d74:	623b      	str	r3, [r7, #32]
      p = inseg.p;
  408d76:	4b32      	ldr	r3, [pc, #200]	; (408e40 <tcp_receive+0x680>)
  408d78:	685b      	ldr	r3, [r3, #4]
  408d7a:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
      if (inseg.p->len < off) {
  408d7c:	4b30      	ldr	r3, [pc, #192]	; (408e40 <tcp_receive+0x680>)
  408d7e:	685b      	ldr	r3, [r3, #4]
  408d80:	895b      	ldrh	r3, [r3, #10]
  408d82:	461a      	mov	r2, r3
  408d84:	6a3b      	ldr	r3, [r7, #32]
  408d86:	429a      	cmp	r2, r3
  408d88:	da26      	bge.n	408dd8 <tcp_receive+0x618>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
  408d8a:	4b2d      	ldr	r3, [pc, #180]	; (408e40 <tcp_receive+0x680>)
  408d8c:	685b      	ldr	r3, [r3, #4]
  408d8e:	891a      	ldrh	r2, [r3, #8]
  408d90:	6a3b      	ldr	r3, [r7, #32]
  408d92:	b29b      	uxth	r3, r3
  408d94:	1ad3      	subs	r3, r2, r3
  408d96:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
  408d98:	e00e      	b.n	408db8 <tcp_receive+0x5f8>
          off -= p->len;
  408d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  408d9c:	895b      	ldrh	r3, [r3, #10]
  408d9e:	461a      	mov	r2, r3
  408da0:	6a3b      	ldr	r3, [r7, #32]
  408da2:	1a9b      	subs	r3, r3, r2
  408da4:	623b      	str	r3, [r7, #32]
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
  408da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  408da8:	8a3a      	ldrh	r2, [r7, #16]
  408daa:	811a      	strh	r2, [r3, #8]
          p->len = 0;
  408dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  408dae:	2200      	movs	r2, #0
  408db0:	815a      	strh	r2, [r3, #10]
          p = p->next;
  408db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  408db4:	681b      	ldr	r3, [r3, #0]
  408db6:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
      if (inseg.p->len < off) {
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
        while (p->len < off) {
  408db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  408dba:	895b      	ldrh	r3, [r3, #10]
  408dbc:	461a      	mov	r2, r3
  408dbe:	6a3b      	ldr	r3, [r7, #32]
  408dc0:	429a      	cmp	r2, r3
  408dc2:	dbea      	blt.n	408d9a <tcp_receive+0x5da>
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
          p->len = 0;
          p = p->next;
        }
        if(pbuf_header(p, (s16_t)-off)) {
  408dc4:	6a3b      	ldr	r3, [r7, #32]
  408dc6:	b29b      	uxth	r3, r3
  408dc8:	425b      	negs	r3, r3
  408dca:	b29b      	uxth	r3, r3
  408dcc:	b21b      	sxth	r3, r3
  408dce:	4619      	mov	r1, r3
  408dd0:	6a78      	ldr	r0, [r7, #36]	; 0x24
  408dd2:	4b1c      	ldr	r3, [pc, #112]	; (408e44 <tcp_receive+0x684>)
  408dd4:	4798      	blx	r3
  408dd6:	e00a      	b.n	408dee <tcp_receive+0x62e>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
        }
      } else {
        if(pbuf_header(inseg.p, (s16_t)-off)) {
  408dd8:	4b19      	ldr	r3, [pc, #100]	; (408e40 <tcp_receive+0x680>)
  408dda:	685b      	ldr	r3, [r3, #4]
  408ddc:	6a3a      	ldr	r2, [r7, #32]
  408dde:	b292      	uxth	r2, r2
  408de0:	4252      	negs	r2, r2
  408de2:	b292      	uxth	r2, r2
  408de4:	b212      	sxth	r2, r2
  408de6:	4611      	mov	r1, r2
  408de8:	4618      	mov	r0, r3
  408dea:	4b16      	ldr	r3, [pc, #88]	; (408e44 <tcp_receive+0x684>)
  408dec:	4798      	blx	r3
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
  408dee:	4b14      	ldr	r3, [pc, #80]	; (408e40 <tcp_receive+0x680>)
  408df0:	891a      	ldrh	r2, [r3, #8]
  408df2:	4b12      	ldr	r3, [pc, #72]	; (408e3c <tcp_receive+0x67c>)
  408df4:	681b      	ldr	r3, [r3, #0]
  408df6:	b299      	uxth	r1, r3
  408df8:	687b      	ldr	r3, [r7, #4]
  408dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  408dfc:	b29b      	uxth	r3, r3
  408dfe:	1acb      	subs	r3, r1, r3
  408e00:	b29b      	uxth	r3, r3
  408e02:	4413      	add	r3, r2
  408e04:	b29a      	uxth	r2, r3
  408e06:	4b0e      	ldr	r3, [pc, #56]	; (408e40 <tcp_receive+0x680>)
  408e08:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
  408e0a:	4b0d      	ldr	r3, [pc, #52]	; (408e40 <tcp_receive+0x680>)
  408e0c:	68db      	ldr	r3, [r3, #12]
  408e0e:	687a      	ldr	r2, [r7, #4]
  408e10:	6a92      	ldr	r2, [r2, #40]	; 0x28
  408e12:	490a      	ldr	r1, [pc, #40]	; (408e3c <tcp_receive+0x67c>)
  408e14:	600a      	str	r2, [r1, #0]
  408e16:	4a09      	ldr	r2, [pc, #36]	; (408e3c <tcp_receive+0x67c>)
  408e18:	6812      	ldr	r2, [r2, #0]
  408e1a:	605a      	str	r2, [r3, #4]
  408e1c:	e022      	b.n	408e64 <tcp_receive+0x6a4>
  408e1e:	bf00      	nop
  408e20:	00402335 	.word	0x00402335
  408e24:	004060f9 	.word	0x004060f9
  408e28:	00407151 	.word	0x00407151
  408e2c:	204025c8 	.word	0x204025c8
  408e30:	00402389 	.word	0x00402389
  408e34:	20404984 	.word	0x20404984
  408e38:	204025ce 	.word	0x204025ce
  408e3c:	204025c4 	.word	0x204025c4
  408e40:	204025ac 	.word	0x204025ac
  408e44:	00405f8d 	.word	0x00405f8d
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)){
  408e48:	4b64      	ldr	r3, [pc, #400]	; (408fdc <tcp_receive+0x81c>)
  408e4a:	681a      	ldr	r2, [r3, #0]
  408e4c:	687b      	ldr	r3, [r7, #4]
  408e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  408e50:	1ad3      	subs	r3, r2, r3
  408e52:	2b00      	cmp	r3, #0
  408e54:	da06      	bge.n	408e64 <tcp_receive+0x6a4>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
  408e56:	687b      	ldr	r3, [r7, #4]
  408e58:	7f9b      	ldrb	r3, [r3, #30]
  408e5a:	f043 0302 	orr.w	r3, r3, #2
  408e5e:	b2da      	uxtb	r2, r3
  408e60:	687b      	ldr	r3, [r7, #4]
  408e62:	779a      	strb	r2, [r3, #30]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
  408e64:	4b5d      	ldr	r3, [pc, #372]	; (408fdc <tcp_receive+0x81c>)
  408e66:	681a      	ldr	r2, [r3, #0]
  408e68:	687b      	ldr	r3, [r7, #4]
  408e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  408e6c:	1ad3      	subs	r3, r2, r3
  408e6e:	2b00      	cmp	r3, #0
  408e70:	f2c0 83bf 	blt.w	4095f2 <tcp_receive+0xe32>
  408e74:	4b59      	ldr	r3, [pc, #356]	; (408fdc <tcp_receive+0x81c>)
  408e76:	681a      	ldr	r2, [r3, #0]
  408e78:	687b      	ldr	r3, [r7, #4]
  408e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  408e7c:	6879      	ldr	r1, [r7, #4]
  408e7e:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
  408e80:	440b      	add	r3, r1
  408e82:	1ad3      	subs	r3, r2, r3
  408e84:	3301      	adds	r3, #1
  408e86:	2b00      	cmp	r3, #0
  408e88:	f300 83b3 	bgt.w	4095f2 <tcp_receive+0xe32>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)){
      if (pcb->rcv_nxt == seqno) {
  408e8c:	687b      	ldr	r3, [r7, #4]
  408e8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  408e90:	4b52      	ldr	r3, [pc, #328]	; (408fdc <tcp_receive+0x81c>)
  408e92:	681b      	ldr	r3, [r3, #0]
  408e94:	429a      	cmp	r2, r3
  408e96:	f040 823d 	bne.w	409314 <tcp_receive+0xb54>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
  408e9a:	4b51      	ldr	r3, [pc, #324]	; (408fe0 <tcp_receive+0x820>)
  408e9c:	891c      	ldrh	r4, [r3, #8]
  408e9e:	4b50      	ldr	r3, [pc, #320]	; (408fe0 <tcp_receive+0x820>)
  408ea0:	68db      	ldr	r3, [r3, #12]
  408ea2:	899b      	ldrh	r3, [r3, #12]
  408ea4:	b29b      	uxth	r3, r3
  408ea6:	4618      	mov	r0, r3
  408ea8:	4b4e      	ldr	r3, [pc, #312]	; (408fe4 <tcp_receive+0x824>)
  408eaa:	4798      	blx	r3
  408eac:	4603      	mov	r3, r0
  408eae:	f003 0303 	and.w	r3, r3, #3
  408eb2:	2b00      	cmp	r3, #0
  408eb4:	bf14      	ite	ne
  408eb6:	2301      	movne	r3, #1
  408eb8:	2300      	moveq	r3, #0
  408eba:	b2db      	uxtb	r3, r3
  408ebc:	b29b      	uxth	r3, r3
  408ebe:	4423      	add	r3, r4
  408ec0:	b29a      	uxth	r2, r3
  408ec2:	4b49      	ldr	r3, [pc, #292]	; (408fe8 <tcp_receive+0x828>)
  408ec4:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
  408ec6:	687b      	ldr	r3, [r7, #4]
  408ec8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
  408eca:	4b47      	ldr	r3, [pc, #284]	; (408fe8 <tcp_receive+0x828>)
  408ecc:	881b      	ldrh	r3, [r3, #0]
  408ece:	429a      	cmp	r2, r3
  408ed0:	d25d      	bcs.n	408f8e <tcp_receive+0x7ce>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, 
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
  408ed2:	4b43      	ldr	r3, [pc, #268]	; (408fe0 <tcp_receive+0x820>)
  408ed4:	68db      	ldr	r3, [r3, #12]
  408ed6:	899b      	ldrh	r3, [r3, #12]
  408ed8:	b29b      	uxth	r3, r3
  408eda:	4618      	mov	r0, r3
  408edc:	4b41      	ldr	r3, [pc, #260]	; (408fe4 <tcp_receive+0x824>)
  408ede:	4798      	blx	r3
  408ee0:	4603      	mov	r3, r0
  408ee2:	f003 0301 	and.w	r3, r3, #1
  408ee6:	2b00      	cmp	r3, #0
  408ee8:	d01d      	beq.n	408f26 <tcp_receive+0x766>
            /* Must remove the FIN from the header as we're trimming 
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) &~ TCP_FIN);
  408eea:	4b3d      	ldr	r3, [pc, #244]	; (408fe0 <tcp_receive+0x820>)
  408eec:	68dc      	ldr	r4, [r3, #12]
  408eee:	4b3c      	ldr	r3, [pc, #240]	; (408fe0 <tcp_receive+0x820>)
  408ef0:	68db      	ldr	r3, [r3, #12]
  408ef2:	899b      	ldrh	r3, [r3, #12]
  408ef4:	b29b      	uxth	r3, r3
  408ef6:	b21b      	sxth	r3, r3
  408ef8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
  408efc:	b21d      	sxth	r5, r3
  408efe:	4b38      	ldr	r3, [pc, #224]	; (408fe0 <tcp_receive+0x820>)
  408f00:	68db      	ldr	r3, [r3, #12]
  408f02:	899b      	ldrh	r3, [r3, #12]
  408f04:	b29b      	uxth	r3, r3
  408f06:	4618      	mov	r0, r3
  408f08:	4b36      	ldr	r3, [pc, #216]	; (408fe4 <tcp_receive+0x824>)
  408f0a:	4798      	blx	r3
  408f0c:	4603      	mov	r3, r0
  408f0e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
  408f12:	b29b      	uxth	r3, r3
  408f14:	4618      	mov	r0, r3
  408f16:	4b35      	ldr	r3, [pc, #212]	; (408fec <tcp_receive+0x82c>)
  408f18:	4798      	blx	r3
  408f1a:	4603      	mov	r3, r0
  408f1c:	b21b      	sxth	r3, r3
  408f1e:	432b      	orrs	r3, r5
  408f20:	b21b      	sxth	r3, r3
  408f22:	b29b      	uxth	r3, r3
  408f24:	81a3      	strh	r3, [r4, #12]
          }
          /* Adjust length of segment to fit in the window. */
          inseg.len = pcb->rcv_wnd;
  408f26:	687b      	ldr	r3, [r7, #4]
  408f28:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
  408f2a:	4b2d      	ldr	r3, [pc, #180]	; (408fe0 <tcp_receive+0x820>)
  408f2c:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
  408f2e:	4b2c      	ldr	r3, [pc, #176]	; (408fe0 <tcp_receive+0x820>)
  408f30:	68db      	ldr	r3, [r3, #12]
  408f32:	899b      	ldrh	r3, [r3, #12]
  408f34:	b29b      	uxth	r3, r3
  408f36:	4618      	mov	r0, r3
  408f38:	4b2a      	ldr	r3, [pc, #168]	; (408fe4 <tcp_receive+0x824>)
  408f3a:	4798      	blx	r3
  408f3c:	4603      	mov	r3, r0
  408f3e:	f003 0302 	and.w	r3, r3, #2
  408f42:	2b00      	cmp	r3, #0
  408f44:	d005      	beq.n	408f52 <tcp_receive+0x792>
            inseg.len -= 1;
  408f46:	4b26      	ldr	r3, [pc, #152]	; (408fe0 <tcp_receive+0x820>)
  408f48:	891b      	ldrh	r3, [r3, #8]
  408f4a:	3b01      	subs	r3, #1
  408f4c:	b29a      	uxth	r2, r3
  408f4e:	4b24      	ldr	r3, [pc, #144]	; (408fe0 <tcp_receive+0x820>)
  408f50:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
  408f52:	4b23      	ldr	r3, [pc, #140]	; (408fe0 <tcp_receive+0x820>)
  408f54:	685a      	ldr	r2, [r3, #4]
  408f56:	4b22      	ldr	r3, [pc, #136]	; (408fe0 <tcp_receive+0x820>)
  408f58:	891b      	ldrh	r3, [r3, #8]
  408f5a:	4619      	mov	r1, r3
  408f5c:	4610      	mov	r0, r2
  408f5e:	4b24      	ldr	r3, [pc, #144]	; (408ff0 <tcp_receive+0x830>)
  408f60:	4798      	blx	r3
          tcplen = TCP_TCPLEN(&inseg);
  408f62:	4b1f      	ldr	r3, [pc, #124]	; (408fe0 <tcp_receive+0x820>)
  408f64:	891c      	ldrh	r4, [r3, #8]
  408f66:	4b1e      	ldr	r3, [pc, #120]	; (408fe0 <tcp_receive+0x820>)
  408f68:	68db      	ldr	r3, [r3, #12]
  408f6a:	899b      	ldrh	r3, [r3, #12]
  408f6c:	b29b      	uxth	r3, r3
  408f6e:	4618      	mov	r0, r3
  408f70:	4b1c      	ldr	r3, [pc, #112]	; (408fe4 <tcp_receive+0x824>)
  408f72:	4798      	blx	r3
  408f74:	4603      	mov	r3, r0
  408f76:	f003 0303 	and.w	r3, r3, #3
  408f7a:	2b00      	cmp	r3, #0
  408f7c:	bf14      	ite	ne
  408f7e:	2301      	movne	r3, #1
  408f80:	2300      	moveq	r3, #0
  408f82:	b2db      	uxtb	r3, r3
  408f84:	b29b      	uxth	r3, r3
  408f86:	4423      	add	r3, r4
  408f88:	b29a      	uxth	r2, r3
  408f8a:	4b17      	ldr	r3, [pc, #92]	; (408fe8 <tcp_receive+0x828>)
  408f8c:	801a      	strh	r2, [r3, #0]
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
  408f8e:	687b      	ldr	r3, [r7, #4]
  408f90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  408f92:	2b00      	cmp	r3, #0
  408f94:	f000 80d2 	beq.w	40913c <tcp_receive+0x97c>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
  408f98:	4b11      	ldr	r3, [pc, #68]	; (408fe0 <tcp_receive+0x820>)
  408f9a:	68db      	ldr	r3, [r3, #12]
  408f9c:	899b      	ldrh	r3, [r3, #12]
  408f9e:	b29b      	uxth	r3, r3
  408fa0:	4618      	mov	r0, r3
  408fa2:	4b10      	ldr	r3, [pc, #64]	; (408fe4 <tcp_receive+0x824>)
  408fa4:	4798      	blx	r3
  408fa6:	4603      	mov	r3, r0
  408fa8:	f003 0301 	and.w	r3, r3, #1
  408fac:	2b00      	cmp	r3, #0
  408fae:	d010      	beq.n	408fd2 <tcp_receive+0x812>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, 
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
  408fb0:	e00a      	b.n	408fc8 <tcp_receive+0x808>
              struct tcp_seg *old_ooseq = pcb->ooseq;
  408fb2:	687b      	ldr	r3, [r7, #4]
  408fb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  408fb6:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
  408fb8:	687b      	ldr	r3, [r7, #4]
  408fba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  408fbc:	681a      	ldr	r2, [r3, #0]
  408fbe:	687b      	ldr	r3, [r7, #4]
  408fc0:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
  408fc2:	68f8      	ldr	r0, [r7, #12]
  408fc4:	4b0b      	ldr	r3, [pc, #44]	; (408ff4 <tcp_receive+0x834>)
  408fc6:	4798      	blx	r3
            LWIP_DEBUGF(TCP_INPUT_DEBUG, 
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
  408fc8:	687b      	ldr	r3, [r7, #4]
  408fca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  408fcc:	2b00      	cmp	r3, #0
  408fce:	d1f0      	bne.n	408fb2 <tcp_receive+0x7f2>
  408fd0:	e0b4      	b.n	40913c <tcp_receive+0x97c>
              struct tcp_seg *old_ooseq = pcb->ooseq;
              pcb->ooseq = pcb->ooseq->next;
              tcp_seg_free(old_ooseq);
            }
          } else {
            next = pcb->ooseq;
  408fd2:	687b      	ldr	r3, [r7, #4]
  408fd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  408fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
  408fd8:	e051      	b.n	40907e <tcp_receive+0x8be>
  408fda:	bf00      	nop
  408fdc:	204025c4 	.word	0x204025c4
  408fe0:	204025ac 	.word	0x204025ac
  408fe4:	00402335 	.word	0x00402335
  408fe8:	204025ce 	.word	0x204025ce
  408fec:	00402309 	.word	0x00402309
  408ff0:	00405ed1 	.word	0x00405ed1
  408ff4:	00407151 	.word	0x00407151
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if (TCPH_FLAGS(next->tcphdr) & TCP_FIN &&
  408ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  408ffa:	68db      	ldr	r3, [r3, #12]
  408ffc:	899b      	ldrh	r3, [r3, #12]
  408ffe:	b29b      	uxth	r3, r3
  409000:	4618      	mov	r0, r3
  409002:	4b90      	ldr	r3, [pc, #576]	; (409244 <tcp_receive+0xa84>)
  409004:	4798      	blx	r3
  409006:	4603      	mov	r3, r0
  409008:	f003 0301 	and.w	r3, r3, #1
  40900c:	2b00      	cmp	r3, #0
  40900e:	d02e      	beq.n	40906e <tcp_receive+0x8ae>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
  409010:	4b8d      	ldr	r3, [pc, #564]	; (409248 <tcp_receive+0xa88>)
  409012:	68db      	ldr	r3, [r3, #12]
  409014:	899b      	ldrh	r3, [r3, #12]
  409016:	b29b      	uxth	r3, r3
  409018:	4618      	mov	r0, r3
  40901a:	4b8a      	ldr	r3, [pc, #552]	; (409244 <tcp_receive+0xa84>)
  40901c:	4798      	blx	r3
  40901e:	4603      	mov	r3, r0
  409020:	f003 0302 	and.w	r3, r3, #2
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if (TCPH_FLAGS(next->tcphdr) & TCP_FIN &&
  409024:	2b00      	cmp	r3, #0
  409026:	d122      	bne.n	40906e <tcp_receive+0x8ae>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
  409028:	4b87      	ldr	r3, [pc, #540]	; (409248 <tcp_receive+0xa88>)
  40902a:	68dc      	ldr	r4, [r3, #12]
  40902c:	4b86      	ldr	r3, [pc, #536]	; (409248 <tcp_receive+0xa88>)
  40902e:	68db      	ldr	r3, [r3, #12]
  409030:	899b      	ldrh	r3, [r3, #12]
  409032:	b29d      	uxth	r5, r3
  409034:	2001      	movs	r0, #1
  409036:	4b85      	ldr	r3, [pc, #532]	; (40924c <tcp_receive+0xa8c>)
  409038:	4798      	blx	r3
  40903a:	4603      	mov	r3, r0
  40903c:	432b      	orrs	r3, r5
  40903e:	b29b      	uxth	r3, r3
  409040:	81a3      	strh	r3, [r4, #12]
                tcplen = TCP_TCPLEN(&inseg);
  409042:	4b81      	ldr	r3, [pc, #516]	; (409248 <tcp_receive+0xa88>)
  409044:	891c      	ldrh	r4, [r3, #8]
  409046:	4b80      	ldr	r3, [pc, #512]	; (409248 <tcp_receive+0xa88>)
  409048:	68db      	ldr	r3, [r3, #12]
  40904a:	899b      	ldrh	r3, [r3, #12]
  40904c:	b29b      	uxth	r3, r3
  40904e:	4618      	mov	r0, r3
  409050:	4b7c      	ldr	r3, [pc, #496]	; (409244 <tcp_receive+0xa84>)
  409052:	4798      	blx	r3
  409054:	4603      	mov	r3, r0
  409056:	f003 0303 	and.w	r3, r3, #3
  40905a:	2b00      	cmp	r3, #0
  40905c:	bf14      	ite	ne
  40905e:	2301      	movne	r3, #1
  409060:	2300      	moveq	r3, #0
  409062:	b2db      	uxtb	r3, r3
  409064:	b29b      	uxth	r3, r3
  409066:	4423      	add	r3, r4
  409068:	b29a      	uxth	r2, r3
  40906a:	4b79      	ldr	r3, [pc, #484]	; (409250 <tcp_receive+0xa90>)
  40906c:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
  40906e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  409070:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
  409072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  409074:	681b      	ldr	r3, [r3, #0]
  409076:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
  409078:	6ab8      	ldr	r0, [r7, #40]	; 0x28
  40907a:	4b76      	ldr	r3, [pc, #472]	; (409254 <tcp_receive+0xa94>)
  40907c:	4798      	blx	r3
            }
          } else {
            next = pcb->ooseq;
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
  40907e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  409080:	2b00      	cmp	r3, #0
  409082:	d00e      	beq.n	4090a2 <tcp_receive+0x8e2>
                   TCP_SEQ_GEQ(seqno + tcplen,
  409084:	4b72      	ldr	r3, [pc, #456]	; (409250 <tcp_receive+0xa90>)
  409086:	881b      	ldrh	r3, [r3, #0]
  409088:	461a      	mov	r2, r3
  40908a:	4b73      	ldr	r3, [pc, #460]	; (409258 <tcp_receive+0xa98>)
  40908c:	681b      	ldr	r3, [r3, #0]
  40908e:	441a      	add	r2, r3
  409090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  409092:	68db      	ldr	r3, [r3, #12]
  409094:	685b      	ldr	r3, [r3, #4]
  409096:	6af9      	ldr	r1, [r7, #44]	; 0x2c
  409098:	8909      	ldrh	r1, [r1, #8]
  40909a:	440b      	add	r3, r1
  40909c:	1ad3      	subs	r3, r2, r3
            }
          } else {
            next = pcb->ooseq;
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
  40909e:	2b00      	cmp	r3, #0
  4090a0:	daaa      	bge.n	408ff8 <tcp_receive+0x838>
              next = next->next;
              tcp_seg_free(prev);
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
  4090a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4090a4:	2b00      	cmp	r3, #0
  4090a6:	d046      	beq.n	409136 <tcp_receive+0x976>
                TCP_SEQ_GT(seqno + tcplen,
  4090a8:	4b69      	ldr	r3, [pc, #420]	; (409250 <tcp_receive+0xa90>)
  4090aa:	881b      	ldrh	r3, [r3, #0]
  4090ac:	461a      	mov	r2, r3
  4090ae:	4b6a      	ldr	r3, [pc, #424]	; (409258 <tcp_receive+0xa98>)
  4090b0:	681b      	ldr	r3, [r3, #0]
  4090b2:	441a      	add	r2, r3
  4090b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4090b6:	68db      	ldr	r3, [r3, #12]
  4090b8:	685b      	ldr	r3, [r3, #4]
  4090ba:	1ad3      	subs	r3, r2, r3
              next = next->next;
              tcp_seg_free(prev);
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
  4090bc:	2b00      	cmp	r3, #0
  4090be:	dd3a      	ble.n	409136 <tcp_receive+0x976>
                TCP_SEQ_GT(seqno + tcplen,
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
  4090c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4090c2:	68db      	ldr	r3, [r3, #12]
  4090c4:	685b      	ldr	r3, [r3, #4]
  4090c6:	b29a      	uxth	r2, r3
  4090c8:	4b63      	ldr	r3, [pc, #396]	; (409258 <tcp_receive+0xa98>)
  4090ca:	681b      	ldr	r3, [r3, #0]
  4090cc:	b29b      	uxth	r3, r3
  4090ce:	1ad3      	subs	r3, r2, r3
  4090d0:	b29a      	uxth	r2, r3
  4090d2:	4b5d      	ldr	r3, [pc, #372]	; (409248 <tcp_receive+0xa88>)
  4090d4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
  4090d6:	4b5c      	ldr	r3, [pc, #368]	; (409248 <tcp_receive+0xa88>)
  4090d8:	68db      	ldr	r3, [r3, #12]
  4090da:	899b      	ldrh	r3, [r3, #12]
  4090dc:	b29b      	uxth	r3, r3
  4090de:	4618      	mov	r0, r3
  4090e0:	4b58      	ldr	r3, [pc, #352]	; (409244 <tcp_receive+0xa84>)
  4090e2:	4798      	blx	r3
  4090e4:	4603      	mov	r3, r0
  4090e6:	f003 0302 	and.w	r3, r3, #2
  4090ea:	2b00      	cmp	r3, #0
  4090ec:	d005      	beq.n	4090fa <tcp_receive+0x93a>
                inseg.len -= 1;
  4090ee:	4b56      	ldr	r3, [pc, #344]	; (409248 <tcp_receive+0xa88>)
  4090f0:	891b      	ldrh	r3, [r3, #8]
  4090f2:	3b01      	subs	r3, #1
  4090f4:	b29a      	uxth	r2, r3
  4090f6:	4b54      	ldr	r3, [pc, #336]	; (409248 <tcp_receive+0xa88>)
  4090f8:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
  4090fa:	4b53      	ldr	r3, [pc, #332]	; (409248 <tcp_receive+0xa88>)
  4090fc:	685a      	ldr	r2, [r3, #4]
  4090fe:	4b52      	ldr	r3, [pc, #328]	; (409248 <tcp_receive+0xa88>)
  409100:	891b      	ldrh	r3, [r3, #8]
  409102:	4619      	mov	r1, r3
  409104:	4610      	mov	r0, r2
  409106:	4b55      	ldr	r3, [pc, #340]	; (40925c <tcp_receive+0xa9c>)
  409108:	4798      	blx	r3
              tcplen = TCP_TCPLEN(&inseg);
  40910a:	4b4f      	ldr	r3, [pc, #316]	; (409248 <tcp_receive+0xa88>)
  40910c:	891c      	ldrh	r4, [r3, #8]
  40910e:	4b4e      	ldr	r3, [pc, #312]	; (409248 <tcp_receive+0xa88>)
  409110:	68db      	ldr	r3, [r3, #12]
  409112:	899b      	ldrh	r3, [r3, #12]
  409114:	b29b      	uxth	r3, r3
  409116:	4618      	mov	r0, r3
  409118:	4b4a      	ldr	r3, [pc, #296]	; (409244 <tcp_receive+0xa84>)
  40911a:	4798      	blx	r3
  40911c:	4603      	mov	r3, r0
  40911e:	f003 0303 	and.w	r3, r3, #3
  409122:	2b00      	cmp	r3, #0
  409124:	bf14      	ite	ne
  409126:	2301      	movne	r3, #1
  409128:	2300      	moveq	r3, #0
  40912a:	b2db      	uxtb	r3, r3
  40912c:	b29b      	uxth	r3, r3
  40912e:	4423      	add	r3, r4
  409130:	b29a      	uxth	r2, r3
  409132:	4b47      	ldr	r3, [pc, #284]	; (409250 <tcp_receive+0xa90>)
  409134:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
  409136:	687b      	ldr	r3, [r7, #4]
  409138:	6afa      	ldr	r2, [r7, #44]	; 0x2c
  40913a:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
  40913c:	4b44      	ldr	r3, [pc, #272]	; (409250 <tcp_receive+0xa90>)
  40913e:	881b      	ldrh	r3, [r3, #0]
  409140:	461a      	mov	r2, r3
  409142:	4b45      	ldr	r3, [pc, #276]	; (409258 <tcp_receive+0xa98>)
  409144:	681b      	ldr	r3, [r3, #0]
  409146:	441a      	add	r2, r3
  409148:	687b      	ldr	r3, [r7, #4]
  40914a:	629a      	str	r2, [r3, #40]	; 0x28

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
        pcb->rcv_wnd -= tcplen;
  40914c:	687b      	ldr	r3, [r7, #4]
  40914e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
  409150:	4b3f      	ldr	r3, [pc, #252]	; (409250 <tcp_receive+0xa90>)
  409152:	881b      	ldrh	r3, [r3, #0]
  409154:	1ad3      	subs	r3, r2, r3
  409156:	b29a      	uxth	r2, r3
  409158:	687b      	ldr	r3, [r7, #4]
  40915a:	859a      	strh	r2, [r3, #44]	; 0x2c

        tcp_update_rcv_ann_wnd(pcb);
  40915c:	6878      	ldr	r0, [r7, #4]
  40915e:	4b40      	ldr	r3, [pc, #256]	; (409260 <tcp_receive+0xaa0>)
  409160:	4798      	blx	r3
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
  409162:	4b39      	ldr	r3, [pc, #228]	; (409248 <tcp_receive+0xa88>)
  409164:	685b      	ldr	r3, [r3, #4]
  409166:	891b      	ldrh	r3, [r3, #8]
  409168:	2b00      	cmp	r3, #0
  40916a:	d006      	beq.n	40917a <tcp_receive+0x9ba>
          recv_data = inseg.p;
  40916c:	4b36      	ldr	r3, [pc, #216]	; (409248 <tcp_receive+0xa88>)
  40916e:	685b      	ldr	r3, [r3, #4]
  409170:	4a3c      	ldr	r2, [pc, #240]	; (409264 <tcp_receive+0xaa4>)
  409172:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
  409174:	4b34      	ldr	r3, [pc, #208]	; (409248 <tcp_receive+0xa88>)
  409176:	2200      	movs	r2, #0
  409178:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
  40917a:	4b33      	ldr	r3, [pc, #204]	; (409248 <tcp_receive+0xa88>)
  40917c:	68db      	ldr	r3, [r3, #12]
  40917e:	899b      	ldrh	r3, [r3, #12]
  409180:	b29b      	uxth	r3, r3
  409182:	4618      	mov	r0, r3
  409184:	4b2f      	ldr	r3, [pc, #188]	; (409244 <tcp_receive+0xa84>)
  409186:	4798      	blx	r3
  409188:	4603      	mov	r3, r0
  40918a:	f003 0301 	and.w	r3, r3, #1
  40918e:	2b00      	cmp	r3, #0
  409190:	f000 8096 	beq.w	4092c0 <tcp_receive+0xb00>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
  409194:	4b34      	ldr	r3, [pc, #208]	; (409268 <tcp_receive+0xaa8>)
  409196:	781b      	ldrb	r3, [r3, #0]
  409198:	f043 0320 	orr.w	r3, r3, #32
  40919c:	b2da      	uxtb	r2, r3
  40919e:	4b32      	ldr	r3, [pc, #200]	; (409268 <tcp_receive+0xaa8>)
  4091a0:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
  4091a2:	e08d      	b.n	4092c0 <tcp_receive+0xb00>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
  4091a4:	687b      	ldr	r3, [r7, #4]
  4091a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  4091a8:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
  4091aa:	687b      	ldr	r3, [r7, #4]
  4091ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  4091ae:	68db      	ldr	r3, [r3, #12]
  4091b0:	685b      	ldr	r3, [r3, #4]
  4091b2:	4a29      	ldr	r2, [pc, #164]	; (409258 <tcp_receive+0xa98>)
  4091b4:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
  4091b6:	68bb      	ldr	r3, [r7, #8]
  4091b8:	891b      	ldrh	r3, [r3, #8]
  4091ba:	461c      	mov	r4, r3
  4091bc:	68bb      	ldr	r3, [r7, #8]
  4091be:	68db      	ldr	r3, [r3, #12]
  4091c0:	899b      	ldrh	r3, [r3, #12]
  4091c2:	b29b      	uxth	r3, r3
  4091c4:	4618      	mov	r0, r3
  4091c6:	4b1f      	ldr	r3, [pc, #124]	; (409244 <tcp_receive+0xa84>)
  4091c8:	4798      	blx	r3
  4091ca:	4603      	mov	r3, r0
  4091cc:	f003 0303 	and.w	r3, r3, #3
  4091d0:	2b00      	cmp	r3, #0
  4091d2:	bf14      	ite	ne
  4091d4:	2301      	movne	r3, #1
  4091d6:	2300      	moveq	r3, #0
  4091d8:	b2db      	uxtb	r3, r3
  4091da:	18e2      	adds	r2, r4, r3
  4091dc:	687b      	ldr	r3, [r7, #4]
  4091de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  4091e0:	441a      	add	r2, r3
  4091e2:	687b      	ldr	r3, [r7, #4]
  4091e4:	629a      	str	r2, [r3, #40]	; 0x28
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
  4091e6:	68bb      	ldr	r3, [r7, #8]
  4091e8:	891b      	ldrh	r3, [r3, #8]
  4091ea:	461c      	mov	r4, r3
  4091ec:	68bb      	ldr	r3, [r7, #8]
  4091ee:	68db      	ldr	r3, [r3, #12]
  4091f0:	899b      	ldrh	r3, [r3, #12]
  4091f2:	b29b      	uxth	r3, r3
  4091f4:	4618      	mov	r0, r3
  4091f6:	4b13      	ldr	r3, [pc, #76]	; (409244 <tcp_receive+0xa84>)
  4091f8:	4798      	blx	r3
  4091fa:	4603      	mov	r3, r0
  4091fc:	f003 0303 	and.w	r3, r3, #3
  409200:	2b00      	cmp	r3, #0
  409202:	bf14      	ite	ne
  409204:	2301      	movne	r3, #1
  409206:	2300      	moveq	r3, #0
  409208:	b2db      	uxtb	r3, r3
  40920a:	18e1      	adds	r1, r4, r3
  40920c:	687b      	ldr	r3, [r7, #4]
  40920e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
  409210:	b28b      	uxth	r3, r1
  409212:	1ad3      	subs	r3, r2, r3
  409214:	b29a      	uxth	r2, r3
  409216:	687b      	ldr	r3, [r7, #4]
  409218:	859a      	strh	r2, [r3, #44]	; 0x2c

          tcp_update_rcv_ann_wnd(pcb);
  40921a:	6878      	ldr	r0, [r7, #4]
  40921c:	4b10      	ldr	r3, [pc, #64]	; (409260 <tcp_receive+0xaa0>)
  40921e:	4798      	blx	r3

          if (cseg->p->tot_len > 0) {
  409220:	68bb      	ldr	r3, [r7, #8]
  409222:	685b      	ldr	r3, [r3, #4]
  409224:	891b      	ldrh	r3, [r3, #8]
  409226:	2b00      	cmp	r3, #0
  409228:	d029      	beq.n	40927e <tcp_receive+0xabe>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            if (recv_data) {
  40922a:	4b0e      	ldr	r3, [pc, #56]	; (409264 <tcp_receive+0xaa4>)
  40922c:	681b      	ldr	r3, [r3, #0]
  40922e:	2b00      	cmp	r3, #0
  409230:	d01e      	beq.n	409270 <tcp_receive+0xab0>
              pbuf_cat(recv_data, cseg->p);
  409232:	4b0c      	ldr	r3, [pc, #48]	; (409264 <tcp_receive+0xaa4>)
  409234:	681a      	ldr	r2, [r3, #0]
  409236:	68bb      	ldr	r3, [r7, #8]
  409238:	685b      	ldr	r3, [r3, #4]
  40923a:	4619      	mov	r1, r3
  40923c:	4610      	mov	r0, r2
  40923e:	4b0b      	ldr	r3, [pc, #44]	; (40926c <tcp_receive+0xaac>)
  409240:	4798      	blx	r3
  409242:	e019      	b.n	409278 <tcp_receive+0xab8>
  409244:	00402335 	.word	0x00402335
  409248:	204025ac 	.word	0x204025ac
  40924c:	00402309 	.word	0x00402309
  409250:	204025ce 	.word	0x204025ce
  409254:	00407151 	.word	0x00407151
  409258:	204025c4 	.word	0x204025c4
  40925c:	00405ed1 	.word	0x00405ed1
  409260:	004069b1 	.word	0x004069b1
  409264:	204025d4 	.word	0x204025d4
  409268:	204025d0 	.word	0x204025d0
  40926c:	00406151 	.word	0x00406151
            } else {
              recv_data = cseg->p;
  409270:	68bb      	ldr	r3, [r7, #8]
  409272:	685b      	ldr	r3, [r3, #4]
  409274:	4a71      	ldr	r2, [pc, #452]	; (40943c <tcp_receive+0xc7c>)
  409276:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
  409278:	68bb      	ldr	r3, [r7, #8]
  40927a:	2200      	movs	r2, #0
  40927c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
  40927e:	68bb      	ldr	r3, [r7, #8]
  409280:	68db      	ldr	r3, [r3, #12]
  409282:	899b      	ldrh	r3, [r3, #12]
  409284:	b29b      	uxth	r3, r3
  409286:	4618      	mov	r0, r3
  409288:	4b6d      	ldr	r3, [pc, #436]	; (409440 <tcp_receive+0xc80>)
  40928a:	4798      	blx	r3
  40928c:	4603      	mov	r3, r0
  40928e:	f003 0301 	and.w	r3, r3, #1
  409292:	2b00      	cmp	r3, #0
  409294:	d00d      	beq.n	4092b2 <tcp_receive+0xaf2>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
  409296:	4b6b      	ldr	r3, [pc, #428]	; (409444 <tcp_receive+0xc84>)
  409298:	781b      	ldrb	r3, [r3, #0]
  40929a:	f043 0320 	orr.w	r3, r3, #32
  40929e:	b2da      	uxtb	r2, r3
  4092a0:	4b68      	ldr	r3, [pc, #416]	; (409444 <tcp_receive+0xc84>)
  4092a2:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
  4092a4:	687b      	ldr	r3, [r7, #4]
  4092a6:	7e1b      	ldrb	r3, [r3, #24]
  4092a8:	2b04      	cmp	r3, #4
  4092aa:	d102      	bne.n	4092b2 <tcp_receive+0xaf2>
              pcb->state = CLOSE_WAIT;
  4092ac:	687b      	ldr	r3, [r7, #4]
  4092ae:	2207      	movs	r2, #7
  4092b0:	761a      	strb	r2, [r3, #24]
            } 
          }

          pcb->ooseq = cseg->next;
  4092b2:	68bb      	ldr	r3, [r7, #8]
  4092b4:	681a      	ldr	r2, [r3, #0]
  4092b6:	687b      	ldr	r3, [r7, #4]
  4092b8:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
  4092ba:	68b8      	ldr	r0, [r7, #8]
  4092bc:	4b62      	ldr	r3, [pc, #392]	; (409448 <tcp_receive+0xc88>)
  4092be:	4798      	blx	r3
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
  4092c0:	687b      	ldr	r3, [r7, #4]
  4092c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  4092c4:	2b00      	cmp	r3, #0
  4092c6:	d008      	beq.n	4092da <tcp_receive+0xb1a>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
  4092c8:	687b      	ldr	r3, [r7, #4]
  4092ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  4092cc:	68db      	ldr	r3, [r3, #12]
  4092ce:	685a      	ldr	r2, [r3, #4]
  4092d0:	687b      	ldr	r3, [r7, #4]
  4092d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
  4092d4:	429a      	cmp	r2, r3
  4092d6:	f43f af65 	beq.w	4091a4 <tcp_receive+0x9e4>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
  4092da:	687b      	ldr	r3, [r7, #4]
  4092dc:	7f9b      	ldrb	r3, [r3, #30]
  4092de:	f003 0301 	and.w	r3, r3, #1
  4092e2:	2b00      	cmp	r3, #0
  4092e4:	d00e      	beq.n	409304 <tcp_receive+0xb44>
  4092e6:	687b      	ldr	r3, [r7, #4]
  4092e8:	7f9b      	ldrb	r3, [r3, #30]
  4092ea:	f023 0301 	bic.w	r3, r3, #1
  4092ee:	b2da      	uxtb	r2, r3
  4092f0:	687b      	ldr	r3, [r7, #4]
  4092f2:	779a      	strb	r2, [r3, #30]
  4092f4:	687b      	ldr	r3, [r7, #4]
  4092f6:	7f9b      	ldrb	r3, [r3, #30]
  4092f8:	f043 0302 	orr.w	r3, r3, #2
  4092fc:	b2da      	uxtb	r2, r3
  4092fe:	687b      	ldr	r3, [r7, #4]
  409300:	779a      	strb	r2, [r3, #30]
    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)){
      if (pcb->rcv_nxt == seqno) {
  409302:	e17a      	b.n	4095fa <tcp_receive+0xe3a>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
  409304:	687b      	ldr	r3, [r7, #4]
  409306:	7f9b      	ldrb	r3, [r3, #30]
  409308:	f043 0301 	orr.w	r3, r3, #1
  40930c:	b2da      	uxtb	r2, r3
  40930e:	687b      	ldr	r3, [r7, #4]
  409310:	779a      	strb	r2, [r3, #30]
    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)){
      if (pcb->rcv_nxt == seqno) {
  409312:	e172      	b.n	4095fa <tcp_receive+0xe3a>
        /* Acknowledge the segment(s). */
        tcp_ack(pcb);

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
  409314:	6878      	ldr	r0, [r7, #4]
  409316:	4b4d      	ldr	r3, [pc, #308]	; (40944c <tcp_receive+0xc8c>)
  409318:	4798      	blx	r3
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
  40931a:	687b      	ldr	r3, [r7, #4]
  40931c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  40931e:	2b00      	cmp	r3, #0
  409320:	d106      	bne.n	409330 <tcp_receive+0xb70>
          pcb->ooseq = tcp_seg_copy(&inseg);
  409322:	484b      	ldr	r0, [pc, #300]	; (409450 <tcp_receive+0xc90>)
  409324:	4b4b      	ldr	r3, [pc, #300]	; (409454 <tcp_receive+0xc94>)
  409326:	4798      	blx	r3
  409328:	4602      	mov	r2, r0
  40932a:	687b      	ldr	r3, [r7, #4]
  40932c:	675a      	str	r2, [r3, #116]	; 0x74
    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)){
      if (pcb->rcv_nxt == seqno) {
  40932e:	e164      	b.n	4095fa <tcp_receive+0xe3a>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
  409330:	2300      	movs	r3, #0
  409332:	62bb      	str	r3, [r7, #40]	; 0x28
          for(next = pcb->ooseq; next != NULL; next = next->next) {
  409334:	687b      	ldr	r3, [r7, #4]
  409336:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  409338:	62fb      	str	r3, [r7, #44]	; 0x2c
  40933a:	e149      	b.n	4095d0 <tcp_receive+0xe10>
            if (seqno == next->tcphdr->seqno) {
  40933c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40933e:	68db      	ldr	r3, [r3, #12]
  409340:	685a      	ldr	r2, [r3, #4]
  409342:	4b45      	ldr	r3, [pc, #276]	; (409458 <tcp_receive+0xc98>)
  409344:	681b      	ldr	r3, [r3, #0]
  409346:	429a      	cmp	r2, r3
  409348:	d11d      	bne.n	409386 <tcp_receive+0xbc6>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
  40934a:	4b41      	ldr	r3, [pc, #260]	; (409450 <tcp_receive+0xc90>)
  40934c:	891a      	ldrh	r2, [r3, #8]
  40934e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  409350:	891b      	ldrh	r3, [r3, #8]
  409352:	429a      	cmp	r2, r3
  409354:	f240 8141 	bls.w	4095da <tcp_receive+0xe1a>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
  409358:	483d      	ldr	r0, [pc, #244]	; (409450 <tcp_receive+0xc90>)
  40935a:	4b3e      	ldr	r3, [pc, #248]	; (409454 <tcp_receive+0xc94>)
  40935c:	4798      	blx	r3
  40935e:	60b8      	str	r0, [r7, #8]
                if (cseg != NULL) {
  409360:	68bb      	ldr	r3, [r7, #8]
  409362:	2b00      	cmp	r3, #0
  409364:	f000 813b 	beq.w	4095de <tcp_receive+0xe1e>
                  if (prev != NULL) {
  409368:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40936a:	2b00      	cmp	r3, #0
  40936c:	d003      	beq.n	409376 <tcp_receive+0xbb6>
                    prev->next = cseg;
  40936e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  409370:	68ba      	ldr	r2, [r7, #8]
  409372:	601a      	str	r2, [r3, #0]
  409374:	e002      	b.n	40937c <tcp_receive+0xbbc>
                  } else {
                    pcb->ooseq = cseg;
  409376:	687b      	ldr	r3, [r7, #4]
  409378:	68ba      	ldr	r2, [r7, #8]
  40937a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
  40937c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
  40937e:	68b8      	ldr	r0, [r7, #8]
  409380:	4b36      	ldr	r3, [pc, #216]	; (40945c <tcp_receive+0xc9c>)
  409382:	4798      	blx	r3
                }
                break;
  409384:	e12b      	b.n	4095de <tcp_receive+0xe1e>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
  409386:	6abb      	ldr	r3, [r7, #40]	; 0x28
  409388:	2b00      	cmp	r3, #0
  40938a:	d117      	bne.n	4093bc <tcp_receive+0xbfc>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
  40938c:	4b32      	ldr	r3, [pc, #200]	; (409458 <tcp_receive+0xc98>)
  40938e:	681a      	ldr	r2, [r3, #0]
  409390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  409392:	68db      	ldr	r3, [r3, #12]
  409394:	685b      	ldr	r3, [r3, #4]
  409396:	1ad3      	subs	r3, r2, r3
  409398:	2b00      	cmp	r3, #0
  40939a:	da63      	bge.n	409464 <tcp_receive+0xca4>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
  40939c:	482c      	ldr	r0, [pc, #176]	; (409450 <tcp_receive+0xc90>)
  40939e:	4b2d      	ldr	r3, [pc, #180]	; (409454 <tcp_receive+0xc94>)
  4093a0:	4798      	blx	r3
  4093a2:	60b8      	str	r0, [r7, #8]
                  if (cseg != NULL) {
  4093a4:	68bb      	ldr	r3, [r7, #8]
  4093a6:	2b00      	cmp	r3, #0
  4093a8:	f000 811b 	beq.w	4095e2 <tcp_receive+0xe22>
                    pcb->ooseq = cseg;
  4093ac:	687b      	ldr	r3, [r7, #4]
  4093ae:	68ba      	ldr	r2, [r7, #8]
  4093b0:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
  4093b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
  4093b4:	68b8      	ldr	r0, [r7, #8]
  4093b6:	4b29      	ldr	r3, [pc, #164]	; (40945c <tcp_receive+0xc9c>)
  4093b8:	4798      	blx	r3
                  }
                  break;
  4093ba:	e112      	b.n	4095e2 <tcp_receive+0xe22>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
  4093bc:	4b26      	ldr	r3, [pc, #152]	; (409458 <tcp_receive+0xc98>)
  4093be:	681a      	ldr	r2, [r3, #0]
  4093c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4093c2:	68db      	ldr	r3, [r3, #12]
  4093c4:	685b      	ldr	r3, [r3, #4]
  4093c6:	1ad3      	subs	r3, r2, r3
  4093c8:	3b01      	subs	r3, #1
  4093ca:	2b00      	cmp	r3, #0
  4093cc:	db4a      	blt.n	409464 <tcp_receive+0xca4>
  4093ce:	4b22      	ldr	r3, [pc, #136]	; (409458 <tcp_receive+0xc98>)
  4093d0:	681a      	ldr	r2, [r3, #0]
  4093d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4093d4:	68db      	ldr	r3, [r3, #12]
  4093d6:	685b      	ldr	r3, [r3, #4]
  4093d8:	1ad3      	subs	r3, r2, r3
  4093da:	3301      	adds	r3, #1
  4093dc:	2b00      	cmp	r3, #0
  4093de:	dc41      	bgt.n	409464 <tcp_receive+0xca4>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
  4093e0:	481b      	ldr	r0, [pc, #108]	; (409450 <tcp_receive+0xc90>)
  4093e2:	4b1c      	ldr	r3, [pc, #112]	; (409454 <tcp_receive+0xc94>)
  4093e4:	4798      	blx	r3
  4093e6:	60b8      	str	r0, [r7, #8]
                  if (cseg != NULL) {
  4093e8:	68bb      	ldr	r3, [r7, #8]
  4093ea:	2b00      	cmp	r3, #0
  4093ec:	f000 80fb 	beq.w	4095e6 <tcp_receive+0xe26>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
  4093f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4093f2:	68db      	ldr	r3, [r3, #12]
  4093f4:	685b      	ldr	r3, [r3, #4]
  4093f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
  4093f8:	8912      	ldrh	r2, [r2, #8]
  4093fa:	441a      	add	r2, r3
  4093fc:	4b16      	ldr	r3, [pc, #88]	; (409458 <tcp_receive+0xc98>)
  4093fe:	681b      	ldr	r3, [r3, #0]
  409400:	1ad3      	subs	r3, r2, r3
  409402:	2b00      	cmp	r3, #0
  409404:	dd12      	ble.n	40942c <tcp_receive+0xc6c>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
  409406:	4b14      	ldr	r3, [pc, #80]	; (409458 <tcp_receive+0xc98>)
  409408:	681b      	ldr	r3, [r3, #0]
  40940a:	b29a      	uxth	r2, r3
  40940c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40940e:	68db      	ldr	r3, [r3, #12]
  409410:	685b      	ldr	r3, [r3, #4]
  409412:	b29b      	uxth	r3, r3
  409414:	1ad3      	subs	r3, r2, r3
  409416:	b29a      	uxth	r2, r3
  409418:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40941a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
  40941c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40941e:	685a      	ldr	r2, [r3, #4]
  409420:	6abb      	ldr	r3, [r7, #40]	; 0x28
  409422:	891b      	ldrh	r3, [r3, #8]
  409424:	4619      	mov	r1, r3
  409426:	4610      	mov	r0, r2
  409428:	4b0d      	ldr	r3, [pc, #52]	; (409460 <tcp_receive+0xca0>)
  40942a:	4798      	blx	r3
                    }
                    prev->next = cseg;
  40942c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40942e:	68ba      	ldr	r2, [r7, #8]
  409430:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
  409432:	6af9      	ldr	r1, [r7, #44]	; 0x2c
  409434:	68b8      	ldr	r0, [r7, #8]
  409436:	4b09      	ldr	r3, [pc, #36]	; (40945c <tcp_receive+0xc9c>)
  409438:	4798      	blx	r3
                  }
                  break;
  40943a:	e0d4      	b.n	4095e6 <tcp_receive+0xe26>
  40943c:	204025d4 	.word	0x204025d4
  409440:	00402335 	.word	0x00402335
  409444:	204025d0 	.word	0x204025d0
  409448:	00407151 	.word	0x00407151
  40944c:	0040a0e5 	.word	0x0040a0e5
  409450:	204025ac 	.word	0x204025ac
  409454:	004071a9 	.word	0x004071a9
  409458:	204025c4 	.word	0x204025c4
  40945c:	004086c1 	.word	0x004086c1
  409460:	00405ed1 	.word	0x00405ed1
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
  409464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  409466:	681b      	ldr	r3, [r3, #0]
  409468:	2b00      	cmp	r3, #0
  40946a:	f040 80ac 	bne.w	4095c6 <tcp_receive+0xe06>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
  40946e:	4b72      	ldr	r3, [pc, #456]	; (409638 <tcp_receive+0xe78>)
  409470:	681a      	ldr	r2, [r3, #0]
  409472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  409474:	68db      	ldr	r3, [r3, #12]
  409476:	685b      	ldr	r3, [r3, #4]
  409478:	1ad3      	subs	r3, r2, r3
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
  40947a:	2b00      	cmp	r3, #0
  40947c:	f340 80a3 	ble.w	4095c6 <tcp_receive+0xe06>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
  409480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  409482:	68db      	ldr	r3, [r3, #12]
  409484:	899b      	ldrh	r3, [r3, #12]
  409486:	b29b      	uxth	r3, r3
  409488:	4618      	mov	r0, r3
  40948a:	4b6c      	ldr	r3, [pc, #432]	; (40963c <tcp_receive+0xe7c>)
  40948c:	4798      	blx	r3
  40948e:	4603      	mov	r3, r0
  409490:	f003 0301 	and.w	r3, r3, #1
  409494:	2b00      	cmp	r3, #0
  409496:	f040 80a8 	bne.w	4095ea <tcp_receive+0xe2a>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
  40949a:	4869      	ldr	r0, [pc, #420]	; (409640 <tcp_receive+0xe80>)
  40949c:	4b69      	ldr	r3, [pc, #420]	; (409644 <tcp_receive+0xe84>)
  40949e:	4798      	blx	r3
  4094a0:	4602      	mov	r2, r0
  4094a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4094a4:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
  4094a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4094a8:	681b      	ldr	r3, [r3, #0]
  4094aa:	2b00      	cmp	r3, #0
  4094ac:	f000 809f 	beq.w	4095ee <tcp_receive+0xe2e>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
  4094b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4094b2:	68db      	ldr	r3, [r3, #12]
  4094b4:	685b      	ldr	r3, [r3, #4]
  4094b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
  4094b8:	8912      	ldrh	r2, [r2, #8]
  4094ba:	441a      	add	r2, r3
  4094bc:	4b5e      	ldr	r3, [pc, #376]	; (409638 <tcp_receive+0xe78>)
  4094be:	681b      	ldr	r3, [r3, #0]
  4094c0:	1ad3      	subs	r3, r2, r3
  4094c2:	2b00      	cmp	r3, #0
  4094c4:	dd12      	ble.n	4094ec <tcp_receive+0xd2c>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
  4094c6:	4b5c      	ldr	r3, [pc, #368]	; (409638 <tcp_receive+0xe78>)
  4094c8:	681b      	ldr	r3, [r3, #0]
  4094ca:	b29a      	uxth	r2, r3
  4094cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4094ce:	68db      	ldr	r3, [r3, #12]
  4094d0:	685b      	ldr	r3, [r3, #4]
  4094d2:	b29b      	uxth	r3, r3
  4094d4:	1ad3      	subs	r3, r2, r3
  4094d6:	b29a      	uxth	r2, r3
  4094d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4094da:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
  4094dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4094de:	685a      	ldr	r2, [r3, #4]
  4094e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4094e2:	891b      	ldrh	r3, [r3, #8]
  4094e4:	4619      	mov	r1, r3
  4094e6:	4610      	mov	r0, r2
  4094e8:	4b57      	ldr	r3, [pc, #348]	; (409648 <tcp_receive+0xe88>)
  4094ea:	4798      	blx	r3
                  }
                  /* check if the remote side overruns our receive window */
                  if ((u32_t)tcplen + seqno > pcb->rcv_nxt + (u32_t)pcb->rcv_wnd) {
  4094ec:	4b57      	ldr	r3, [pc, #348]	; (40964c <tcp_receive+0xe8c>)
  4094ee:	881b      	ldrh	r3, [r3, #0]
  4094f0:	461a      	mov	r2, r3
  4094f2:	4b51      	ldr	r3, [pc, #324]	; (409638 <tcp_receive+0xe78>)
  4094f4:	681b      	ldr	r3, [r3, #0]
  4094f6:	441a      	add	r2, r3
  4094f8:	687b      	ldr	r3, [r7, #4]
  4094fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  4094fc:	6879      	ldr	r1, [r7, #4]
  4094fe:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
  409500:	440b      	add	r3, r1
  409502:	429a      	cmp	r2, r3
  409504:	d973      	bls.n	4095ee <tcp_receive+0xe2e>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG, 
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
  409506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  409508:	681b      	ldr	r3, [r3, #0]
  40950a:	68db      	ldr	r3, [r3, #12]
  40950c:	899b      	ldrh	r3, [r3, #12]
  40950e:	b29b      	uxth	r3, r3
  409510:	4618      	mov	r0, r3
  409512:	4b4a      	ldr	r3, [pc, #296]	; (40963c <tcp_receive+0xe7c>)
  409514:	4798      	blx	r3
  409516:	4603      	mov	r3, r0
  409518:	f003 0301 	and.w	r3, r3, #1
  40951c:	2b00      	cmp	r3, #0
  40951e:	d020      	beq.n	409562 <tcp_receive+0xda2>
                      /* Must remove the FIN from the header as we're trimming 
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) &~ TCP_FIN);
  409520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  409522:	681b      	ldr	r3, [r3, #0]
  409524:	68dc      	ldr	r4, [r3, #12]
  409526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  409528:	681b      	ldr	r3, [r3, #0]
  40952a:	68db      	ldr	r3, [r3, #12]
  40952c:	899b      	ldrh	r3, [r3, #12]
  40952e:	b29b      	uxth	r3, r3
  409530:	b21b      	sxth	r3, r3
  409532:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
  409536:	b21d      	sxth	r5, r3
  409538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40953a:	681b      	ldr	r3, [r3, #0]
  40953c:	68db      	ldr	r3, [r3, #12]
  40953e:	899b      	ldrh	r3, [r3, #12]
  409540:	b29b      	uxth	r3, r3
  409542:	4618      	mov	r0, r3
  409544:	4b3d      	ldr	r3, [pc, #244]	; (40963c <tcp_receive+0xe7c>)
  409546:	4798      	blx	r3
  409548:	4603      	mov	r3, r0
  40954a:	f003 033e 	and.w	r3, r3, #62	; 0x3e
  40954e:	b29b      	uxth	r3, r3
  409550:	4618      	mov	r0, r3
  409552:	4b3f      	ldr	r3, [pc, #252]	; (409650 <tcp_receive+0xe90>)
  409554:	4798      	blx	r3
  409556:	4603      	mov	r3, r0
  409558:	b21b      	sxth	r3, r3
  40955a:	432b      	orrs	r3, r5
  40955c:	b21b      	sxth	r3, r3
  40955e:	b29b      	uxth	r3, r3
  409560:	81a3      	strh	r3, [r4, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = pcb->rcv_nxt + pcb->rcv_wnd - seqno;
  409562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  409564:	681b      	ldr	r3, [r3, #0]
  409566:	687a      	ldr	r2, [r7, #4]
  409568:	6a92      	ldr	r2, [r2, #40]	; 0x28
  40956a:	b291      	uxth	r1, r2
  40956c:	687a      	ldr	r2, [r7, #4]
  40956e:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
  409570:	440a      	add	r2, r1
  409572:	b291      	uxth	r1, r2
  409574:	4a30      	ldr	r2, [pc, #192]	; (409638 <tcp_receive+0xe78>)
  409576:	6812      	ldr	r2, [r2, #0]
  409578:	b292      	uxth	r2, r2
  40957a:	1a8a      	subs	r2, r1, r2
  40957c:	b292      	uxth	r2, r2
  40957e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
  409580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  409582:	681b      	ldr	r3, [r3, #0]
  409584:	685a      	ldr	r2, [r3, #4]
  409586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  409588:	681b      	ldr	r3, [r3, #0]
  40958a:	891b      	ldrh	r3, [r3, #8]
  40958c:	4619      	mov	r1, r3
  40958e:	4610      	mov	r0, r2
  409590:	4b2d      	ldr	r3, [pc, #180]	; (409648 <tcp_receive+0xe88>)
  409592:	4798      	blx	r3
                    tcplen = TCP_TCPLEN(next->next);
  409594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  409596:	681b      	ldr	r3, [r3, #0]
  409598:	891c      	ldrh	r4, [r3, #8]
  40959a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40959c:	681b      	ldr	r3, [r3, #0]
  40959e:	68db      	ldr	r3, [r3, #12]
  4095a0:	899b      	ldrh	r3, [r3, #12]
  4095a2:	b29b      	uxth	r3, r3
  4095a4:	4618      	mov	r0, r3
  4095a6:	4b25      	ldr	r3, [pc, #148]	; (40963c <tcp_receive+0xe7c>)
  4095a8:	4798      	blx	r3
  4095aa:	4603      	mov	r3, r0
  4095ac:	f003 0303 	and.w	r3, r3, #3
  4095b0:	2b00      	cmp	r3, #0
  4095b2:	bf14      	ite	ne
  4095b4:	2301      	movne	r3, #1
  4095b6:	2300      	moveq	r3, #0
  4095b8:	b2db      	uxtb	r3, r3
  4095ba:	b29b      	uxth	r3, r3
  4095bc:	4423      	add	r3, r4
  4095be:	b29a      	uxth	r2, r3
  4095c0:	4b22      	ldr	r3, [pc, #136]	; (40964c <tcp_receive+0xe8c>)
  4095c2:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
  4095c4:	e013      	b.n	4095ee <tcp_receive+0xe2e>
              }
            }
            prev = next;
  4095c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4095c8:	62bb      	str	r3, [r7, #40]	; 0x28
             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
          for(next = pcb->ooseq; next != NULL; next = next->next) {
  4095ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4095cc:	681b      	ldr	r3, [r3, #0]
  4095ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  4095d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4095d2:	2b00      	cmp	r3, #0
  4095d4:	f47f aeb2 	bne.w	40933c <tcp_receive+0xb7c>
    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)){
      if (pcb->rcv_nxt == seqno) {
  4095d8:	e00f      	b.n	4095fa <tcp_receive+0xe3a>
                break;
              } else {
                /* Either the lenghts are the same or the incoming
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
  4095da:	bf00      	nop
  4095dc:	e00d      	b.n	4095fa <tcp_receive+0xe3a>
                  } else {
                    pcb->ooseq = cseg;
                  }
                  tcp_oos_insert_segment(cseg, next);
                }
                break;
  4095de:	bf00      	nop
  4095e0:	e00b      	b.n	4095fa <tcp_receive+0xe3a>
                  cseg = tcp_seg_copy(&inseg);
                  if (cseg != NULL) {
                    pcb->ooseq = cseg;
                    tcp_oos_insert_segment(cseg, next);
                  }
                  break;
  4095e2:	bf00      	nop
  4095e4:	e009      	b.n	4095fa <tcp_receive+0xe3a>
                      pbuf_realloc(prev->p, prev->len);
                    }
                    prev->next = cseg;
                    tcp_oos_insert_segment(cseg, next);
                  }
                  break;
  4095e6:	bf00      	nop
  4095e8:	e007      	b.n	4095fa <tcp_receive+0xe3a>
                 of the list. */
              if (next->next == NULL &&
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
                  /* segment "next" already contains all data */
                  break;
  4095ea:	bf00      	nop
  4095ec:	e005      	b.n	4095fa <tcp_receive+0xe3a>
                    tcplen = TCP_TCPLEN(next->next);
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
  4095ee:	bf00      	nop
    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)){
      if (pcb->rcv_nxt == seqno) {
  4095f0:	e003      	b.n	4095fa <tcp_receive+0xe3a>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not withing the window. */
      tcp_send_empty_ack(pcb);
  4095f2:	6878      	ldr	r0, [r7, #4]
  4095f4:	4b17      	ldr	r3, [pc, #92]	; (409654 <tcp_receive+0xe94>)
  4095f6:	4798      	blx	r3
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
  4095f8:	e01a      	b.n	409630 <tcp_receive+0xe70>
  4095fa:	e019      	b.n	409630 <tcp_receive+0xe70>
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    /*if (TCP_SEQ_GT(pcb->rcv_nxt, seqno) ||
      TCP_SEQ_GEQ(seqno, pcb->rcv_nxt + pcb->rcv_wnd)) {*/
    if(!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd-1)){
  4095fc:	4b0e      	ldr	r3, [pc, #56]	; (409638 <tcp_receive+0xe78>)
  4095fe:	681a      	ldr	r2, [r3, #0]
  409600:	687b      	ldr	r3, [r7, #4]
  409602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  409604:	1ad3      	subs	r3, r2, r3
  409606:	2b00      	cmp	r3, #0
  409608:	db0a      	blt.n	409620 <tcp_receive+0xe60>
  40960a:	4b0b      	ldr	r3, [pc, #44]	; (409638 <tcp_receive+0xe78>)
  40960c:	681a      	ldr	r2, [r3, #0]
  40960e:	687b      	ldr	r3, [r7, #4]
  409610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  409612:	6879      	ldr	r1, [r7, #4]
  409614:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
  409616:	440b      	add	r3, r1
  409618:	1ad3      	subs	r3, r2, r3
  40961a:	3301      	adds	r3, #1
  40961c:	2b00      	cmp	r3, #0
  40961e:	dd07      	ble.n	409630 <tcp_receive+0xe70>
      tcp_ack_now(pcb);
  409620:	687b      	ldr	r3, [r7, #4]
  409622:	7f9b      	ldrb	r3, [r3, #30]
  409624:	f043 0302 	orr.w	r3, r3, #2
  409628:	b2da      	uxtb	r2, r3
  40962a:	687b      	ldr	r3, [r7, #4]
  40962c:	779a      	strb	r2, [r3, #30]
    }
  }
}
  40962e:	e7ff      	b.n	409630 <tcp_receive+0xe70>
  409630:	bf00      	nop
  409632:	3734      	adds	r7, #52	; 0x34
  409634:	46bd      	mov	sp, r7
  409636:	bdf0      	pop	{r4, r5, r6, r7, pc}
  409638:	204025c4 	.word	0x204025c4
  40963c:	00402335 	.word	0x00402335
  409640:	204025ac 	.word	0x204025ac
  409644:	004071a9 	.word	0x004071a9
  409648:	00405ed1 	.word	0x00405ed1
  40964c:	204025ce 	.word	0x204025ce
  409650:	00402309 	.word	0x00402309
  409654:	0040a0e5 	.word	0x0040a0e5

00409658 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
  409658:	b580      	push	{r7, lr}
  40965a:	b086      	sub	sp, #24
  40965c:	af00      	add	r7, sp, #0
  40965e:	6078      	str	r0, [r7, #4]
  u8_t *opts, opt;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  opts = (u8_t *)tcphdr + TCP_HLEN;
  409660:	4b3e      	ldr	r3, [pc, #248]	; (40975c <tcp_parseopt+0x104>)
  409662:	681b      	ldr	r3, [r3, #0]
  409664:	3314      	adds	r3, #20
  409666:	613b      	str	r3, [r7, #16]

  /* Parse the TCP MSS option, if present. */
  if(TCPH_HDRLEN(tcphdr) > 0x5) {
  409668:	4b3c      	ldr	r3, [pc, #240]	; (40975c <tcp_parseopt+0x104>)
  40966a:	681b      	ldr	r3, [r3, #0]
  40966c:	899b      	ldrh	r3, [r3, #12]
  40966e:	b29b      	uxth	r3, r3
  409670:	4618      	mov	r0, r3
  409672:	4b3b      	ldr	r3, [pc, #236]	; (409760 <tcp_parseopt+0x108>)
  409674:	4798      	blx	r3
  409676:	4603      	mov	r3, r0
  409678:	0b1b      	lsrs	r3, r3, #12
  40967a:	b29b      	uxth	r3, r3
  40967c:	2b05      	cmp	r3, #5
  40967e:	d969      	bls.n	409754 <tcp_parseopt+0xfc>
    max_c = (TCPH_HDRLEN(tcphdr) - 5) << 2;
  409680:	4b36      	ldr	r3, [pc, #216]	; (40975c <tcp_parseopt+0x104>)
  409682:	681b      	ldr	r3, [r3, #0]
  409684:	899b      	ldrh	r3, [r3, #12]
  409686:	b29b      	uxth	r3, r3
  409688:	4618      	mov	r0, r3
  40968a:	4b35      	ldr	r3, [pc, #212]	; (409760 <tcp_parseopt+0x108>)
  40968c:	4798      	blx	r3
  40968e:	4603      	mov	r3, r0
  409690:	0b1b      	lsrs	r3, r3, #12
  409692:	b29b      	uxth	r3, r3
  409694:	3b05      	subs	r3, #5
  409696:	b29b      	uxth	r3, r3
  409698:	009b      	lsls	r3, r3, #2
  40969a:	81fb      	strh	r3, [r7, #14]
    for (c = 0; c < max_c; ) {
  40969c:	2300      	movs	r3, #0
  40969e:	82fb      	strh	r3, [r7, #22]
  4096a0:	e04e      	b.n	409740 <tcp_parseopt+0xe8>
      opt = opts[c];
  4096a2:	8afb      	ldrh	r3, [r7, #22]
  4096a4:	693a      	ldr	r2, [r7, #16]
  4096a6:	4413      	add	r3, r2
  4096a8:	781b      	ldrb	r3, [r3, #0]
  4096aa:	737b      	strb	r3, [r7, #13]
      switch (opt) {
  4096ac:	7b7b      	ldrb	r3, [r7, #13]
  4096ae:	2b01      	cmp	r3, #1
  4096b0:	d004      	beq.n	4096bc <tcp_parseopt+0x64>
  4096b2:	2b02      	cmp	r3, #2
  4096b4:	d006      	beq.n	4096c4 <tcp_parseopt+0x6c>
  4096b6:	2b00      	cmp	r3, #0
  4096b8:	d047      	beq.n	40974a <tcp_parseopt+0xf2>
  4096ba:	e031      	b.n	409720 <tcp_parseopt+0xc8>
        /* End of options. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
        return;
      case 0x01:
        /* NOP option. */
        ++c;
  4096bc:	8afb      	ldrh	r3, [r7, #22]
  4096be:	3301      	adds	r3, #1
  4096c0:	82fb      	strh	r3, [r7, #22]
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
  4096c2:	e03d      	b.n	409740 <tcp_parseopt+0xe8>
      case 0x02:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (opts[c + 1] != 0x04 || c + 0x04 > max_c) {
  4096c4:	8afb      	ldrh	r3, [r7, #22]
  4096c6:	3301      	adds	r3, #1
  4096c8:	693a      	ldr	r2, [r7, #16]
  4096ca:	4413      	add	r3, r2
  4096cc:	781b      	ldrb	r3, [r3, #0]
  4096ce:	2b04      	cmp	r3, #4
  4096d0:	d13d      	bne.n	40974e <tcp_parseopt+0xf6>
  4096d2:	8afb      	ldrh	r3, [r7, #22]
  4096d4:	1d1a      	adds	r2, r3, #4
  4096d6:	89fb      	ldrh	r3, [r7, #14]
  4096d8:	429a      	cmp	r2, r3
  4096da:	dc38      	bgt.n	40974e <tcp_parseopt+0xf6>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (opts[c + 2] << 8) | opts[c + 3];
  4096dc:	8afb      	ldrh	r3, [r7, #22]
  4096de:	3302      	adds	r3, #2
  4096e0:	693a      	ldr	r2, [r7, #16]
  4096e2:	4413      	add	r3, r2
  4096e4:	781b      	ldrb	r3, [r3, #0]
  4096e6:	021b      	lsls	r3, r3, #8
  4096e8:	b21a      	sxth	r2, r3
  4096ea:	8afb      	ldrh	r3, [r7, #22]
  4096ec:	3303      	adds	r3, #3
  4096ee:	6939      	ldr	r1, [r7, #16]
  4096f0:	440b      	add	r3, r1
  4096f2:	781b      	ldrb	r3, [r3, #0]
  4096f4:	b21b      	sxth	r3, r3
  4096f6:	4313      	orrs	r3, r2
  4096f8:	b21b      	sxth	r3, r3
  4096fa:	817b      	strh	r3, [r7, #10]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
  4096fc:	897b      	ldrh	r3, [r7, #10]
  4096fe:	f240 52b4 	movw	r2, #1460	; 0x5b4
  409702:	4293      	cmp	r3, r2
  409704:	d804      	bhi.n	409710 <tcp_parseopt+0xb8>
  409706:	897b      	ldrh	r3, [r7, #10]
  409708:	2b00      	cmp	r3, #0
  40970a:	d001      	beq.n	409710 <tcp_parseopt+0xb8>
  40970c:	897a      	ldrh	r2, [r7, #10]
  40970e:	e001      	b.n	409714 <tcp_parseopt+0xbc>
  409710:	f240 52b4 	movw	r2, #1460	; 0x5b4
  409714:	687b      	ldr	r3, [r7, #4]
  409716:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Advance to next option */
        c += 0x04;
  409718:	8afb      	ldrh	r3, [r7, #22]
  40971a:	3304      	adds	r3, #4
  40971c:	82fb      	strh	r3, [r7, #22]
        break;
  40971e:	e00f      	b.n	409740 <tcp_parseopt+0xe8>
        c += 0x0A;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        if (opts[c + 1] == 0) {
  409720:	8afb      	ldrh	r3, [r7, #22]
  409722:	3301      	adds	r3, #1
  409724:	693a      	ldr	r2, [r7, #16]
  409726:	4413      	add	r3, r2
  409728:	781b      	ldrb	r3, [r3, #0]
  40972a:	2b00      	cmp	r3, #0
  40972c:	d011      	beq.n	409752 <tcp_parseopt+0xfa>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        c += opts[c + 1];
  40972e:	8afb      	ldrh	r3, [r7, #22]
  409730:	3301      	adds	r3, #1
  409732:	693a      	ldr	r2, [r7, #16]
  409734:	4413      	add	r3, r2
  409736:	781b      	ldrb	r3, [r3, #0]
  409738:	b29a      	uxth	r2, r3
  40973a:	8afb      	ldrh	r3, [r7, #22]
  40973c:	4413      	add	r3, r2
  40973e:	82fb      	strh	r3, [r7, #22]
  opts = (u8_t *)tcphdr + TCP_HLEN;

  /* Parse the TCP MSS option, if present. */
  if(TCPH_HDRLEN(tcphdr) > 0x5) {
    max_c = (TCPH_HDRLEN(tcphdr) - 5) << 2;
    for (c = 0; c < max_c; ) {
  409740:	8afa      	ldrh	r2, [r7, #22]
  409742:	89fb      	ldrh	r3, [r7, #14]
  409744:	429a      	cmp	r2, r3
  409746:	d3ac      	bcc.n	4096a2 <tcp_parseopt+0x4a>
  409748:	e004      	b.n	409754 <tcp_parseopt+0xfc>
      opt = opts[c];
      switch (opt) {
      case 0x00:
        /* End of options. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
        return;
  40974a:	bf00      	nop
  40974c:	e002      	b.n	409754 <tcp_parseopt+0xfc>
      case 0x02:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (opts[c + 1] != 0x04 || c + 0x04 > max_c) {
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
  40974e:	bf00      	nop
  409750:	e000      	b.n	409754 <tcp_parseopt+0xfc>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        if (opts[c + 1] == 0) {
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          /* If the length field is zero, the options are malformed
             and we don't process them further. */
          return;
  409752:	bf00      	nop
           can skip past them. */
        c += opts[c + 1];
      }
    }
  }
}
  409754:	3718      	adds	r7, #24
  409756:	46bd      	mov	sp, r7
  409758:	bd80      	pop	{r7, pc}
  40975a:	bf00      	nop
  40975c:	204025bc 	.word	0x204025bc
  409760:	00402335 	.word	0x00402335

00409764 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
  409764:	b580      	push	{r7, lr}
  409766:	b086      	sub	sp, #24
  409768:	af00      	add	r7, sp, #0
  40976a:	60f8      	str	r0, [r7, #12]
  40976c:	607b      	str	r3, [r7, #4]
  40976e:	460b      	mov	r3, r1
  409770:	817b      	strh	r3, [r7, #10]
  409772:	4613      	mov	r3, r2
  409774:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
  409776:	897a      	ldrh	r2, [r7, #10]
  409778:	893b      	ldrh	r3, [r7, #8]
  40977a:	4413      	add	r3, r2
  40977c:	b29b      	uxth	r3, r3
  40977e:	3314      	adds	r3, #20
  409780:	b29b      	uxth	r3, r3
  409782:	2200      	movs	r2, #0
  409784:	4619      	mov	r1, r3
  409786:	2001      	movs	r0, #1
  409788:	4b2a      	ldr	r3, [pc, #168]	; (409834 <tcp_output_alloc_header+0xd0>)
  40978a:	4798      	blx	r3
  40978c:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
  40978e:	697b      	ldr	r3, [r7, #20]
  409790:	2b00      	cmp	r3, #0
  409792:	d04a      	beq.n	40982a <tcp_output_alloc_header+0xc6>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
  409794:	697b      	ldr	r3, [r7, #20]
  409796:	685b      	ldr	r3, [r3, #4]
  409798:	613b      	str	r3, [r7, #16]
    tcphdr->src = htons(pcb->local_port);
  40979a:	68fb      	ldr	r3, [r7, #12]
  40979c:	8b5b      	ldrh	r3, [r3, #26]
  40979e:	4618      	mov	r0, r3
  4097a0:	4b25      	ldr	r3, [pc, #148]	; (409838 <tcp_output_alloc_header+0xd4>)
  4097a2:	4798      	blx	r3
  4097a4:	4603      	mov	r3, r0
  4097a6:	461a      	mov	r2, r3
  4097a8:	693b      	ldr	r3, [r7, #16]
  4097aa:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = htons(pcb->remote_port);
  4097ac:	68fb      	ldr	r3, [r7, #12]
  4097ae:	8b9b      	ldrh	r3, [r3, #28]
  4097b0:	4618      	mov	r0, r3
  4097b2:	4b21      	ldr	r3, [pc, #132]	; (409838 <tcp_output_alloc_header+0xd4>)
  4097b4:	4798      	blx	r3
  4097b6:	4603      	mov	r3, r0
  4097b8:	461a      	mov	r2, r3
  4097ba:	693b      	ldr	r3, [r7, #16]
  4097bc:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
  4097be:	693b      	ldr	r3, [r7, #16]
  4097c0:	687a      	ldr	r2, [r7, #4]
  4097c2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = htonl(pcb->rcv_nxt);
  4097c4:	68fb      	ldr	r3, [r7, #12]
  4097c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  4097c8:	4618      	mov	r0, r3
  4097ca:	4b1c      	ldr	r3, [pc, #112]	; (40983c <tcp_output_alloc_header+0xd8>)
  4097cc:	4798      	blx	r3
  4097ce:	4602      	mov	r2, r0
  4097d0:	693b      	ldr	r3, [r7, #16]
  4097d2:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
  4097d4:	897b      	ldrh	r3, [r7, #10]
  4097d6:	089b      	lsrs	r3, r3, #2
  4097d8:	b29b      	uxth	r3, r3
  4097da:	3305      	adds	r3, #5
  4097dc:	b29b      	uxth	r3, r3
  4097de:	031b      	lsls	r3, r3, #12
  4097e0:	b29b      	uxth	r3, r3
  4097e2:	f043 0310 	orr.w	r3, r3, #16
  4097e6:	b29b      	uxth	r3, r3
  4097e8:	4618      	mov	r0, r3
  4097ea:	4b13      	ldr	r3, [pc, #76]	; (409838 <tcp_output_alloc_header+0xd4>)
  4097ec:	4798      	blx	r3
  4097ee:	4603      	mov	r3, r0
  4097f0:	461a      	mov	r2, r3
  4097f2:	693b      	ldr	r3, [r7, #16]
  4097f4:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = htons(pcb->rcv_ann_wnd);
  4097f6:	68fb      	ldr	r3, [r7, #12]
  4097f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
  4097fa:	4618      	mov	r0, r3
  4097fc:	4b0e      	ldr	r3, [pc, #56]	; (409838 <tcp_output_alloc_header+0xd4>)
  4097fe:	4798      	blx	r3
  409800:	4603      	mov	r3, r0
  409802:	461a      	mov	r2, r3
  409804:	693b      	ldr	r3, [r7, #16]
  409806:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
  409808:	693b      	ldr	r3, [r7, #16]
  40980a:	2200      	movs	r2, #0
  40980c:	741a      	strb	r2, [r3, #16]
  40980e:	2200      	movs	r2, #0
  409810:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
  409812:	693b      	ldr	r3, [r7, #16]
  409814:	2200      	movs	r2, #0
  409816:	749a      	strb	r2, [r3, #18]
  409818:	2200      	movs	r2, #0
  40981a:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
  40981c:	68fb      	ldr	r3, [r7, #12]
  40981e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  409820:	68fa      	ldr	r2, [r7, #12]
  409822:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
  409824:	441a      	add	r2, r3
  409826:	68fb      	ldr	r3, [r7, #12]
  409828:	631a      	str	r2, [r3, #48]	; 0x30
  }
  return p;
  40982a:	697b      	ldr	r3, [r7, #20]
}
  40982c:	4618      	mov	r0, r3
  40982e:	3718      	adds	r7, #24
  409830:	46bd      	mov	sp, r7
  409832:	bd80      	pop	{r7, pc}
  409834:	00405cc5 	.word	0x00405cc5
  409838:	00402309 	.word	0x00402309
  40983c:	00402355 	.word	0x00402355

00409840 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
  409840:	b5b0      	push	{r4, r5, r7, lr}
  409842:	b084      	sub	sp, #16
  409844:	af00      	add	r7, sp, #0
  409846:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
  409848:	687b      	ldr	r3, [r7, #4]
  40984a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
  40984c:	2b00      	cmp	r3, #0
  40984e:	d02c      	beq.n	4098aa <tcp_send_fin+0x6a>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
  409850:	687b      	ldr	r3, [r7, #4]
  409852:	6edb      	ldr	r3, [r3, #108]	; 0x6c
  409854:	60fb      	str	r3, [r7, #12]
  409856:	e002      	b.n	40985e <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
  409858:	68fb      	ldr	r3, [r7, #12]
  40985a:	681b      	ldr	r3, [r3, #0]
  40985c:	60fb      	str	r3, [r7, #12]
tcp_send_fin(struct tcp_pcb *pcb)
{
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
  40985e:	68fb      	ldr	r3, [r7, #12]
  409860:	681b      	ldr	r3, [r3, #0]
  409862:	2b00      	cmp	r3, #0
  409864:	d1f8      	bne.n	409858 <tcp_send_fin+0x18>
         last_unsent = last_unsent->next);

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
  409866:	68fb      	ldr	r3, [r7, #12]
  409868:	68db      	ldr	r3, [r3, #12]
  40986a:	899b      	ldrh	r3, [r3, #12]
  40986c:	b29b      	uxth	r3, r3
  40986e:	4618      	mov	r0, r3
  409870:	4b12      	ldr	r3, [pc, #72]	; (4098bc <tcp_send_fin+0x7c>)
  409872:	4798      	blx	r3
  409874:	4603      	mov	r3, r0
  409876:	f003 0307 	and.w	r3, r3, #7
  40987a:	2b00      	cmp	r3, #0
  40987c:	d115      	bne.n	4098aa <tcp_send_fin+0x6a>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
  40987e:	68fb      	ldr	r3, [r7, #12]
  409880:	68dc      	ldr	r4, [r3, #12]
  409882:	68fb      	ldr	r3, [r7, #12]
  409884:	68db      	ldr	r3, [r3, #12]
  409886:	899b      	ldrh	r3, [r3, #12]
  409888:	b29d      	uxth	r5, r3
  40988a:	2001      	movs	r0, #1
  40988c:	4b0c      	ldr	r3, [pc, #48]	; (4098c0 <tcp_send_fin+0x80>)
  40988e:	4798      	blx	r3
  409890:	4603      	mov	r3, r0
  409892:	432b      	orrs	r3, r5
  409894:	b29b      	uxth	r3, r3
  409896:	81a3      	strh	r3, [r4, #12]
      pcb->flags |= TF_FIN;
  409898:	687b      	ldr	r3, [r7, #4]
  40989a:	7f9b      	ldrb	r3, [r3, #30]
  40989c:	f043 0320 	orr.w	r3, r3, #32
  4098a0:	b2da      	uxtb	r2, r3
  4098a2:	687b      	ldr	r3, [r7, #4]
  4098a4:	779a      	strb	r2, [r3, #30]
      return ERR_OK;
  4098a6:	2300      	movs	r3, #0
  4098a8:	e004      	b.n	4098b4 <tcp_send_fin+0x74>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
  4098aa:	2101      	movs	r1, #1
  4098ac:	6878      	ldr	r0, [r7, #4]
  4098ae:	4b05      	ldr	r3, [pc, #20]	; (4098c4 <tcp_send_fin+0x84>)
  4098b0:	4798      	blx	r3
  4098b2:	4603      	mov	r3, r0
}
  4098b4:	4618      	mov	r0, r3
  4098b6:	3710      	adds	r7, #16
  4098b8:	46bd      	mov	sp, r7
  4098ba:	bdb0      	pop	{r4, r5, r7, pc}
  4098bc:	00402335 	.word	0x00402335
  4098c0:	00402309 	.word	0x00402309
  4098c4:	00409f59 	.word	0x00409f59

004098c8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
  4098c8:	b590      	push	{r4, r7, lr}
  4098ca:	b087      	sub	sp, #28
  4098cc:	af00      	add	r7, sp, #0
  4098ce:	60f8      	str	r0, [r7, #12]
  4098d0:	60b9      	str	r1, [r7, #8]
  4098d2:	603b      	str	r3, [r7, #0]
  4098d4:	4613      	mov	r3, r2
  4098d6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
  4098d8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
  4098dc:	f003 0301 	and.w	r3, r3, #1
  4098e0:	2b00      	cmp	r3, #0
  4098e2:	d001      	beq.n	4098e8 <tcp_create_segment+0x20>
  4098e4:	2204      	movs	r2, #4
  4098e6:	e000      	b.n	4098ea <tcp_create_segment+0x22>
  4098e8:	2200      	movs	r2, #0
  4098ea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
  4098ee:	f003 0302 	and.w	r3, r3, #2
  4098f2:	2b00      	cmp	r3, #0
  4098f4:	d001      	beq.n	4098fa <tcp_create_segment+0x32>
  4098f6:	230c      	movs	r3, #12
  4098f8:	e000      	b.n	4098fc <tcp_create_segment+0x34>
  4098fa:	2300      	movs	r3, #0
  4098fc:	4413      	add	r3, r2
  4098fe:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
  409900:	2003      	movs	r0, #3
  409902:	4b32      	ldr	r3, [pc, #200]	; (4099cc <tcp_create_segment+0x104>)
  409904:	4798      	blx	r3
  409906:	6138      	str	r0, [r7, #16]
  409908:	693b      	ldr	r3, [r7, #16]
  40990a:	2b00      	cmp	r3, #0
  40990c:	d104      	bne.n	409918 <tcp_create_segment+0x50>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
  40990e:	68b8      	ldr	r0, [r7, #8]
  409910:	4b2f      	ldr	r3, [pc, #188]	; (4099d0 <tcp_create_segment+0x108>)
  409912:	4798      	blx	r3
    return NULL;
  409914:	2300      	movs	r3, #0
  409916:	e054      	b.n	4099c2 <tcp_create_segment+0xfa>
  }
  seg->flags = optflags;
  409918:	693b      	ldr	r3, [r7, #16]
  40991a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
  40991e:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
  409920:	693b      	ldr	r3, [r7, #16]
  409922:	2200      	movs	r2, #0
  409924:	601a      	str	r2, [r3, #0]
  seg->p = p;
  409926:	693b      	ldr	r3, [r7, #16]
  409928:	68ba      	ldr	r2, [r7, #8]
  40992a:	605a      	str	r2, [r3, #4]
  seg->len = p->tot_len - optlen;
  40992c:	68bb      	ldr	r3, [r7, #8]
  40992e:	891a      	ldrh	r2, [r3, #8]
  409930:	7dfb      	ldrb	r3, [r7, #23]
  409932:	b29b      	uxth	r3, r3
  409934:	1ad3      	subs	r3, r2, r3
  409936:	b29a      	uxth	r2, r3
  409938:	693b      	ldr	r3, [r7, #16]
  40993a:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
  40993c:	2114      	movs	r1, #20
  40993e:	68b8      	ldr	r0, [r7, #8]
  409940:	4b24      	ldr	r3, [pc, #144]	; (4099d4 <tcp_create_segment+0x10c>)
  409942:	4798      	blx	r3
  409944:	4603      	mov	r3, r0
  409946:	2b00      	cmp	r3, #0
  409948:	d004      	beq.n	409954 <tcp_create_segment+0x8c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
  40994a:	6938      	ldr	r0, [r7, #16]
  40994c:	4b22      	ldr	r3, [pc, #136]	; (4099d8 <tcp_create_segment+0x110>)
  40994e:	4798      	blx	r3
    return NULL;
  409950:	2300      	movs	r3, #0
  409952:	e036      	b.n	4099c2 <tcp_create_segment+0xfa>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
  409954:	693b      	ldr	r3, [r7, #16]
  409956:	685b      	ldr	r3, [r3, #4]
  409958:	685a      	ldr	r2, [r3, #4]
  40995a:	693b      	ldr	r3, [r7, #16]
  40995c:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = htons(pcb->local_port);
  40995e:	693b      	ldr	r3, [r7, #16]
  409960:	68dc      	ldr	r4, [r3, #12]
  409962:	68fb      	ldr	r3, [r7, #12]
  409964:	8b5b      	ldrh	r3, [r3, #26]
  409966:	4618      	mov	r0, r3
  409968:	4b1c      	ldr	r3, [pc, #112]	; (4099dc <tcp_create_segment+0x114>)
  40996a:	4798      	blx	r3
  40996c:	4603      	mov	r3, r0
  40996e:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = htons(pcb->remote_port);
  409970:	693b      	ldr	r3, [r7, #16]
  409972:	68dc      	ldr	r4, [r3, #12]
  409974:	68fb      	ldr	r3, [r7, #12]
  409976:	8b9b      	ldrh	r3, [r3, #28]
  409978:	4618      	mov	r0, r3
  40997a:	4b18      	ldr	r3, [pc, #96]	; (4099dc <tcp_create_segment+0x114>)
  40997c:	4798      	blx	r3
  40997e:	4603      	mov	r3, r0
  409980:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = htonl(seqno);
  409982:	693b      	ldr	r3, [r7, #16]
  409984:	68dc      	ldr	r4, [r3, #12]
  409986:	6838      	ldr	r0, [r7, #0]
  409988:	4b15      	ldr	r3, [pc, #84]	; (4099e0 <tcp_create_segment+0x118>)
  40998a:	4798      	blx	r3
  40998c:	4603      	mov	r3, r0
  40998e:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
  409990:	693b      	ldr	r3, [r7, #16]
  409992:	68dc      	ldr	r4, [r3, #12]
  409994:	7dfb      	ldrb	r3, [r7, #23]
  409996:	089b      	lsrs	r3, r3, #2
  409998:	b2db      	uxtb	r3, r3
  40999a:	3305      	adds	r3, #5
  40999c:	031b      	lsls	r3, r3, #12
  40999e:	b21a      	sxth	r2, r3
  4099a0:	79fb      	ldrb	r3, [r7, #7]
  4099a2:	b21b      	sxth	r3, r3
  4099a4:	4313      	orrs	r3, r2
  4099a6:	b21b      	sxth	r3, r3
  4099a8:	b29b      	uxth	r3, r3
  4099aa:	4618      	mov	r0, r3
  4099ac:	4b0b      	ldr	r3, [pc, #44]	; (4099dc <tcp_create_segment+0x114>)
  4099ae:	4798      	blx	r3
  4099b0:	4603      	mov	r3, r0
  4099b2:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
  4099b4:	693b      	ldr	r3, [r7, #16]
  4099b6:	68db      	ldr	r3, [r3, #12]
  4099b8:	2200      	movs	r2, #0
  4099ba:	749a      	strb	r2, [r3, #18]
  4099bc:	2200      	movs	r2, #0
  4099be:	74da      	strb	r2, [r3, #19]
  return seg;
  4099c0:	693b      	ldr	r3, [r7, #16]
} 
  4099c2:	4618      	mov	r0, r3
  4099c4:	371c      	adds	r7, #28
  4099c6:	46bd      	mov	sp, r7
  4099c8:	bd90      	pop	{r4, r7, pc}
  4099ca:	bf00      	nop
  4099cc:	00405941 	.word	0x00405941
  4099d0:	00406069 	.word	0x00406069
  4099d4:	00405f8d 	.word	0x00405f8d
  4099d8:	00407151 	.word	0x00407151
  4099dc:	00402309 	.word	0x00402309
  4099e0:	00402355 	.word	0x00402355

004099e4 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
  4099e4:	b580      	push	{r7, lr}
  4099e6:	b086      	sub	sp, #24
  4099e8:	af00      	add	r7, sp, #0
  4099ea:	607b      	str	r3, [r7, #4]
  4099ec:	4603      	mov	r3, r0
  4099ee:	73fb      	strb	r3, [r7, #15]
  4099f0:	460b      	mov	r3, r1
  4099f2:	81bb      	strh	r3, [r7, #12]
  4099f4:	4613      	mov	r3, r2
  4099f6:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
  4099f8:	89bb      	ldrh	r3, [r7, #12]
  4099fa:	82fb      	strh	r3, [r7, #22]
  LWIP_UNUSED_ARG(max_length);
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  /* always create MSS-sized pbufs */
  alloc = max_length;
  4099fc:	897b      	ldrh	r3, [r7, #10]
  4099fe:	82fb      	strh	r3, [r7, #22]
          pcb->unacked != NULL))) {
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(length + TCP_OVERSIZE));
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
  409a00:	8af9      	ldrh	r1, [r7, #22]
  409a02:	7bfb      	ldrb	r3, [r7, #15]
  409a04:	2200      	movs	r2, #0
  409a06:	4618      	mov	r0, r3
  409a08:	4b0d      	ldr	r3, [pc, #52]	; (409a40 <tcp_pbuf_prealloc+0x5c>)
  409a0a:	4798      	blx	r3
  409a0c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
  409a0e:	693b      	ldr	r3, [r7, #16]
  409a10:	2b00      	cmp	r3, #0
  409a12:	d101      	bne.n	409a18 <tcp_pbuf_prealloc+0x34>
    return NULL;
  409a14:	2300      	movs	r3, #0
  409a16:	e00e      	b.n	409a36 <tcp_pbuf_prealloc+0x52>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
  *oversize = p->len - length;
  409a18:	693b      	ldr	r3, [r7, #16]
  409a1a:	895a      	ldrh	r2, [r3, #10]
  409a1c:	89bb      	ldrh	r3, [r7, #12]
  409a1e:	1ad3      	subs	r3, r2, r3
  409a20:	b29a      	uxth	r2, r3
  409a22:	687b      	ldr	r3, [r7, #4]
  409a24:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
  409a26:	693b      	ldr	r3, [r7, #16]
  409a28:	89ba      	ldrh	r2, [r7, #12]
  409a2a:	811a      	strh	r2, [r3, #8]
  409a2c:	693b      	ldr	r3, [r7, #16]
  409a2e:	891a      	ldrh	r2, [r3, #8]
  409a30:	693b      	ldr	r3, [r7, #16]
  409a32:	815a      	strh	r2, [r3, #10]
  return p;
  409a34:	693b      	ldr	r3, [r7, #16]
}
  409a36:	4618      	mov	r0, r3
  409a38:	3718      	adds	r7, #24
  409a3a:	46bd      	mov	sp, r7
  409a3c:	bd80      	pop	{r7, pc}
  409a3e:	bf00      	nop
  409a40:	00405cc5 	.word	0x00405cc5

00409a44 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
  409a44:	b480      	push	{r7}
  409a46:	b083      	sub	sp, #12
  409a48:	af00      	add	r7, sp, #0
  409a4a:	6078      	str	r0, [r7, #4]
  409a4c:	460b      	mov	r3, r1
  409a4e:	807b      	strh	r3, [r7, #2]
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
  409a50:	687b      	ldr	r3, [r7, #4]
  409a52:	7e1b      	ldrb	r3, [r3, #24]
  409a54:	2b04      	cmp	r3, #4
  409a56:	d00e      	beq.n	409a76 <tcp_write_checks+0x32>
      (pcb->state != CLOSE_WAIT) &&
  409a58:	687b      	ldr	r3, [r7, #4]
  409a5a:	7e1b      	ldrb	r3, [r3, #24]
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
  409a5c:	2b07      	cmp	r3, #7
  409a5e:	d00a      	beq.n	409a76 <tcp_write_checks+0x32>
      (pcb->state != CLOSE_WAIT) &&
      (pcb->state != SYN_SENT) &&
  409a60:	687b      	ldr	r3, [r7, #4]
  409a62:	7e1b      	ldrb	r3, [r3, #24]
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
      (pcb->state != CLOSE_WAIT) &&
  409a64:	2b02      	cmp	r3, #2
  409a66:	d006      	beq.n	409a76 <tcp_write_checks+0x32>
      (pcb->state != SYN_SENT) &&
      (pcb->state != SYN_RCVD)) {
  409a68:	687b      	ldr	r3, [r7, #4]
  409a6a:	7e1b      	ldrb	r3, [r3, #24]
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
      (pcb->state != CLOSE_WAIT) &&
      (pcb->state != SYN_SENT) &&
  409a6c:	2b03      	cmp	r3, #3
  409a6e:	d002      	beq.n	409a76 <tcp_write_checks+0x32>
      (pcb->state != SYN_RCVD)) {
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
  409a70:	f06f 030c 	mvn.w	r3, #12
  409a74:	e02b      	b.n	409ace <tcp_write_checks+0x8a>
  } else if (len == 0) {
  409a76:	887b      	ldrh	r3, [r7, #2]
  409a78:	2b00      	cmp	r3, #0
  409a7a:	d101      	bne.n	409a80 <tcp_write_checks+0x3c>
    return ERR_OK;
  409a7c:	2300      	movs	r3, #0
  409a7e:	e026      	b.n	409ace <tcp_write_checks+0x8a>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
  409a80:	687b      	ldr	r3, [r7, #4]
  409a82:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
  409a86:	887a      	ldrh	r2, [r7, #2]
  409a88:	429a      	cmp	r2, r3
  409a8a:	d909      	bls.n	409aa0 <tcp_write_checks+0x5c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 3, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"U16_F")\n",
      len, pcb->snd_buf));
    pcb->flags |= TF_NAGLEMEMERR;
  409a8c:	687b      	ldr	r3, [r7, #4]
  409a8e:	7f9b      	ldrb	r3, [r3, #30]
  409a90:	f063 037f 	orn	r3, r3, #127	; 0x7f
  409a94:	b2da      	uxtb	r2, r3
  409a96:	687b      	ldr	r3, [r7, #4]
  409a98:	779a      	strb	r2, [r3, #30]
    return ERR_MEM;
  409a9a:	f04f 33ff 	mov.w	r3, #4294967295
  409a9e:	e016      	b.n	409ace <tcp_write_checks+0x8a>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
  409aa0:	687b      	ldr	r3, [r7, #4]
  409aa2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
  409aa6:	2b07      	cmp	r3, #7
  409aa8:	d806      	bhi.n	409ab8 <tcp_write_checks+0x74>
  409aaa:	687b      	ldr	r3, [r7, #4]
  409aac:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
  409ab0:	f64f 72fc 	movw	r2, #65532	; 0xfffc
  409ab4:	4293      	cmp	r3, r2
  409ab6:	d909      	bls.n	409acc <tcp_write_checks+0x88>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 3, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
      pcb->snd_queuelen, TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
  409ab8:	687b      	ldr	r3, [r7, #4]
  409aba:	7f9b      	ldrb	r3, [r3, #30]
  409abc:	f063 037f 	orn	r3, r3, #127	; 0x7f
  409ac0:	b2da      	uxtb	r2, r3
  409ac2:	687b      	ldr	r3, [r7, #4]
  409ac4:	779a      	strb	r2, [r3, #30]
    return ERR_MEM;
  409ac6:	f04f 33ff 	mov.w	r3, #4294967295
  409aca:	e000      	b.n	409ace <tcp_write_checks+0x8a>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
  409acc:	2300      	movs	r3, #0
}
  409ace:	4618      	mov	r0, r3
  409ad0:	370c      	adds	r7, #12
  409ad2:	46bd      	mov	sp, r7
  409ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
  409ad8:	4770      	bx	lr
  409ada:	bf00      	nop

00409adc <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
  409adc:	b5b0      	push	{r4, r5, r7, lr}
  409ade:	b098      	sub	sp, #96	; 0x60
  409ae0:	af04      	add	r7, sp, #16
  409ae2:	60f8      	str	r0, [r7, #12]
  409ae4:	60b9      	str	r1, [r7, #8]
  409ae6:	4611      	mov	r1, r2
  409ae8:	461a      	mov	r2, r3
  409aea:	460b      	mov	r3, r1
  409aec:	80fb      	strh	r3, [r7, #6]
  409aee:	4613      	mov	r3, r2
  409af0:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
  409af2:	2300      	movs	r3, #0
  409af4:	64fb      	str	r3, [r7, #76]	; 0x4c
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
  409af6:	2300      	movs	r3, #0
  409af8:	64bb      	str	r3, [r7, #72]	; 0x48
  409afa:	2300      	movs	r3, #0
  409afc:	647b      	str	r3, [r7, #68]	; 0x44
  409afe:	2300      	movs	r3, #0
  409b00:	643b      	str	r3, [r7, #64]	; 0x40
  409b02:	2300      	movs	r3, #0
  409b04:	63fb      	str	r3, [r7, #60]	; 0x3c
  u16_t pos = 0; /* position in 'arg' data */
  409b06:	2300      	movs	r3, #0
  409b08:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t queuelen;
  u8_t optlen = 0;
  409b0a:	2300      	movs	r3, #0
  409b0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  u8_t optflags = 0;
  409b10:	2300      	movs	r3, #0
  409b12:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
#if TCP_OVERSIZE
  u16_t oversize = 0;
  409b16:	2300      	movs	r3, #0
  409b18:	82fb      	strh	r3, [r7, #22]
  u16_t oversize_used = 0;
  409b1a:	2300      	movs	r3, #0
  409b1c:	86fb      	strh	r3, [r7, #54]	; 0x36
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, pcb->snd_wnd_max/2);
  409b1e:	68fb      	ldr	r3, [r7, #12]
  409b20:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
  409b24:	085b      	lsrs	r3, r3, #1
  409b26:	b29a      	uxth	r2, r3
  409b28:	68fb      	ldr	r3, [r7, #12]
  409b2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
  409b2c:	4293      	cmp	r3, r2
  409b2e:	bf28      	it	cs
  409b30:	4613      	movcs	r3, r2
  409b32:	853b      	strh	r3, [r7, #40]	; 0x28

#if LWIP_NETIF_TX_SINGLE_PBUF
  /* Always copy to try to create single pbufs for TX */
  apiflags |= TCP_WRITE_FLAG_COPY;
  409b34:	797b      	ldrb	r3, [r7, #5]
  409b36:	f043 0301 	orr.w	r3, r3, #1
  409b3a:	717b      	strb	r3, [r7, #5]
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)", 
  409b3c:	68bb      	ldr	r3, [r7, #8]
  409b3e:	2b00      	cmp	r3, #0
  409b40:	d100      	bne.n	409b44 <tcp_write+0x68>
  409b42:	e7fe      	b.n	409b42 <tcp_write+0x66>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
  409b44:	88fb      	ldrh	r3, [r7, #6]
  409b46:	4619      	mov	r1, r3
  409b48:	68f8      	ldr	r0, [r7, #12]
  409b4a:	4b93      	ldr	r3, [pc, #588]	; (409d98 <tcp_write+0x2bc>)
  409b4c:	4798      	blx	r3
  409b4e:	4603      	mov	r3, r0
  409b50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (err != ERR_OK) {
  409b54:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
  409b58:	2b00      	cmp	r3, #0
  409b5a:	d002      	beq.n	409b62 <tcp_write+0x86>
    return err;
  409b5c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
  409b60:	e1e9      	b.n	409f36 <tcp_write+0x45a>
  }
  queuelen = pcb->snd_queuelen;
  409b62:	68fb      	ldr	r3, [r7, #12]
  409b64:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
  409b68:	873b      	strh	r3, [r7, #56]	; 0x38
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
  409b6a:	68fb      	ldr	r3, [r7, #12]
  409b6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
  409b6e:	2b00      	cmp	r3, #0
  409b70:	f000 8141 	beq.w	409df6 <tcp_write+0x31a>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
  409b74:	68fb      	ldr	r3, [r7, #12]
  409b76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
  409b78:	64bb      	str	r3, [r7, #72]	; 0x48
  409b7a:	e002      	b.n	409b82 <tcp_write+0xa6>
         last_unsent = last_unsent->next);
  409b7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  409b7e:	681b      	ldr	r3, [r3, #0]
  409b80:	64bb      	str	r3, [r7, #72]	; 0x48
  if (pcb->unsent != NULL) {
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
  409b82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  409b84:	681b      	ldr	r3, [r3, #0]
  409b86:	2b00      	cmp	r3, #0
  409b88:	d1f8      	bne.n	409b7c <tcp_write+0xa0>
         last_unsent = last_unsent->next);

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
  409b8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  409b8c:	7a9b      	ldrb	r3, [r3, #10]
  409b8e:	f003 0301 	and.w	r3, r3, #1
  409b92:	2b00      	cmp	r3, #0
  409b94:	d001      	beq.n	409b9a <tcp_write+0xbe>
  409b96:	2204      	movs	r2, #4
  409b98:	e000      	b.n	409b9c <tcp_write+0xc0>
  409b9a:	2200      	movs	r2, #0
  409b9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  409b9e:	7a9b      	ldrb	r3, [r3, #10]
  409ba0:	f003 0302 	and.w	r3, r3, #2
  409ba4:	2b00      	cmp	r3, #0
  409ba6:	d001      	beq.n	409bac <tcp_write+0xd0>
  409ba8:	230c      	movs	r3, #12
  409baa:	e000      	b.n	409bae <tcp_write+0xd2>
  409bac:	2300      	movs	r3, #0
  409bae:	4413      	add	r3, r2
  409bb0:	84bb      	strh	r3, [r7, #36]	; 0x24
    space = mss_local - (last_unsent->len + unsent_optlen);
  409bb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  409bb4:	891a      	ldrh	r2, [r3, #8]
  409bb6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  409bb8:	4413      	add	r3, r2
  409bba:	b29b      	uxth	r3, r3
  409bbc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
  409bbe:	1ad3      	subs	r3, r2, r3
  409bc0:	86bb      	strh	r3, [r7, #52]	; 0x34
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->unsent_oversize */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
  409bc2:	68fb      	ldr	r3, [r7, #12]
  409bc4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
  409bc8:	82fb      	strh	r3, [r7, #22]
    if (oversize > 0) {
  409bca:	8afb      	ldrh	r3, [r7, #22]
  409bcc:	2b00      	cmp	r3, #0
  409bce:	d014      	beq.n	409bfa <tcp_write+0x11e>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize_used <= space);
      seg = last_unsent;
  409bd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  409bd2:	647b      	str	r3, [r7, #68]	; 0x44
      oversize_used = oversize < len ? oversize : len;
  409bd4:	8afb      	ldrh	r3, [r7, #22]
  409bd6:	88fa      	ldrh	r2, [r7, #6]
  409bd8:	4293      	cmp	r3, r2
  409bda:	bf28      	it	cs
  409bdc:	4613      	movcs	r3, r2
  409bde:	86fb      	strh	r3, [r7, #54]	; 0x36
      pos += oversize_used;
  409be0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
  409be2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  409be4:	4413      	add	r3, r2
  409be6:	877b      	strh	r3, [r7, #58]	; 0x3a
      oversize -= oversize_used;
  409be8:	8afa      	ldrh	r2, [r7, #22]
  409bea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  409bec:	1ad3      	subs	r3, r2, r3
  409bee:	b29b      	uxth	r3, r3
  409bf0:	82fb      	strh	r3, [r7, #22]
      space -= oversize_used;
  409bf2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
  409bf4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  409bf6:	1ad3      	subs	r3, r2, r3
  409bf8:	86bb      	strh	r3, [r7, #52]	; 0x34
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
  409bfa:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
  409bfc:	88fb      	ldrh	r3, [r7, #6]
  409bfe:	429a      	cmp	r2, r3
  409c00:	f080 80f9 	bcs.w	409df6 <tcp_write+0x31a>
  409c04:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
  409c06:	2b00      	cmp	r3, #0
  409c08:	f000 80f5 	beq.w	409df6 <tcp_write+0x31a>
  409c0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  409c0e:	891b      	ldrh	r3, [r3, #8]
  409c10:	2b00      	cmp	r3, #0
  409c12:	f000 80f0 	beq.w	409df6 <tcp_write+0x31a>
      u16_t seglen = space < len - pos ? space : len - pos;
  409c16:	88fa      	ldrh	r2, [r7, #6]
  409c18:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
  409c1a:	1ad2      	subs	r2, r2, r3
  409c1c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
  409c1e:	4293      	cmp	r3, r2
  409c20:	bfa8      	it	ge
  409c22:	4613      	movge	r3, r2
  409c24:	847b      	strh	r3, [r7, #34]	; 0x22
      seg = last_unsent;
  409c26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  409c28:	647b      	str	r3, [r7, #68]	; 0x44

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
  409c2a:	797b      	ldrb	r3, [r7, #5]
  409c2c:	f003 0301 	and.w	r3, r3, #1
  409c30:	2b00      	cmp	r3, #0
  409c32:	d01c      	beq.n	409c6e <tcp_write+0x192>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
  409c34:	f107 0016 	add.w	r0, r7, #22
  409c38:	8eba      	ldrh	r2, [r7, #52]	; 0x34
  409c3a:	8c79      	ldrh	r1, [r7, #34]	; 0x22
  409c3c:	2301      	movs	r3, #1
  409c3e:	9302      	str	r3, [sp, #8]
  409c40:	797b      	ldrb	r3, [r7, #5]
  409c42:	9301      	str	r3, [sp, #4]
  409c44:	68fb      	ldr	r3, [r7, #12]
  409c46:	9300      	str	r3, [sp, #0]
  409c48:	4603      	mov	r3, r0
  409c4a:	2003      	movs	r0, #3
  409c4c:	4c53      	ldr	r4, [pc, #332]	; (409d9c <tcp_write+0x2c0>)
  409c4e:	47a0      	blx	r4
  409c50:	64f8      	str	r0, [r7, #76]	; 0x4c
  409c52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  409c54:	2b00      	cmp	r3, #0
  409c56:	f000 8150 	beq.w	409efa <tcp_write+0x41e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        last_unsent->oversize_left += oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
  409c5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  409c5c:	6858      	ldr	r0, [r3, #4]
  409c5e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
  409c60:	68ba      	ldr	r2, [r7, #8]
  409c62:	4413      	add	r3, r2
  409c64:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
  409c66:	4619      	mov	r1, r3
  409c68:	4b4d      	ldr	r3, [pc, #308]	; (409da0 <tcp_write+0x2c4>)
  409c6a:	4798      	blx	r3
  409c6c:	e00f      	b.n	409c8e <tcp_write+0x1b2>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      } else {
        /* Data is not copied */
        if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
  409c6e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
  409c70:	2201      	movs	r2, #1
  409c72:	4619      	mov	r1, r3
  409c74:	2003      	movs	r0, #3
  409c76:	4b4b      	ldr	r3, [pc, #300]	; (409da4 <tcp_write+0x2c8>)
  409c78:	4798      	blx	r3
  409c7a:	64f8      	str	r0, [r7, #76]	; 0x4c
  409c7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  409c7e:	2b00      	cmp	r3, #0
  409c80:	f000 813d 	beq.w	409efe <tcp_write+0x422>
        tcp_seg_add_chksum(~inet_chksum((u8_t*)arg + pos, seglen), seglen,
          &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        /* reference the non-volatile payload data */
        concat_p->payload = (u8_t*)arg + pos;
  409c84:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
  409c86:	68ba      	ldr	r2, [r7, #8]
  409c88:	441a      	add	r2, r3
  409c8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  409c8c:	605a      	str	r2, [r3, #4]
      }

      pos += seglen;
  409c8e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
  409c90:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
  409c92:	4413      	add	r3, r2
  409c94:	877b      	strh	r3, [r7, #58]	; 0x3a
      queuelen += pbuf_clen(concat_p);
  409c96:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
  409c98:	4b43      	ldr	r3, [pc, #268]	; (409da8 <tcp_write+0x2cc>)
  409c9a:	4798      	blx	r3
  409c9c:	4603      	mov	r3, r0
  409c9e:	b29a      	uxth	r2, r3
  409ca0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
  409ca2:	4413      	add	r3, r2
  409ca4:	873b      	strh	r3, [r7, #56]	; 0x38
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
  409ca6:	e0a6      	b.n	409df6 <tcp_write+0x31a>
    struct pbuf *p;
    u16_t left = len - pos;
  409ca8:	88fa      	ldrh	r2, [r7, #6]
  409caa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
  409cac:	1ad3      	subs	r3, r2, r3
  409cae:	843b      	strh	r3, [r7, #32]
    u16_t max_len = mss_local - optlen;
  409cb0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  409cb4:	b29b      	uxth	r3, r3
  409cb6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
  409cb8:	1ad3      	subs	r3, r2, r3
  409cba:	83fb      	strh	r3, [r7, #30]
    u16_t seglen = left > max_len ? max_len : left;
  409cbc:	8c3a      	ldrh	r2, [r7, #32]
  409cbe:	8bfb      	ldrh	r3, [r7, #30]
  409cc0:	4293      	cmp	r3, r2
  409cc2:	bf28      	it	cs
  409cc4:	4613      	movcs	r3, r2
  409cc6:	83bb      	strh	r3, [r7, #28]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
  409cc8:	797b      	ldrb	r3, [r7, #5]
  409cca:	f003 0301 	and.w	r3, r3, #1
  409cce:	2b00      	cmp	r3, #0
  409cd0:	d029      	beq.n	409d26 <tcp_write+0x24a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
  409cd2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  409cd6:	b29a      	uxth	r2, r3
  409cd8:	8bbb      	ldrh	r3, [r7, #28]
  409cda:	4413      	add	r3, r2
  409cdc:	b299      	uxth	r1, r3
  409cde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  409ce0:	2b00      	cmp	r3, #0
  409ce2:	bf0c      	ite	eq
  409ce4:	2301      	moveq	r3, #1
  409ce6:	2300      	movne	r3, #0
  409ce8:	b2db      	uxtb	r3, r3
  409cea:	f107 0016 	add.w	r0, r7, #22
  409cee:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
  409cf0:	9302      	str	r3, [sp, #8]
  409cf2:	797b      	ldrb	r3, [r7, #5]
  409cf4:	9301      	str	r3, [sp, #4]
  409cf6:	68fb      	ldr	r3, [r7, #12]
  409cf8:	9300      	str	r3, [sp, #0]
  409cfa:	4603      	mov	r3, r0
  409cfc:	2000      	movs	r0, #0
  409cfe:	4c27      	ldr	r4, [pc, #156]	; (409d9c <tcp_write+0x2c0>)
  409d00:	47a0      	blx	r4
  409d02:	6338      	str	r0, [r7, #48]	; 0x30
  409d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  409d06:	2b00      	cmp	r3, #0
  409d08:	f000 80fb 	beq.w	409f02 <tcp_write+0x426>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
  409d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  409d0e:	685a      	ldr	r2, [r3, #4]
  409d10:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  409d14:	18d0      	adds	r0, r2, r3
  409d16:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
  409d18:	68ba      	ldr	r2, [r7, #8]
  409d1a:	4413      	add	r3, r2
  409d1c:	8bba      	ldrh	r2, [r7, #28]
  409d1e:	4619      	mov	r1, r3
  409d20:	4b1f      	ldr	r3, [pc, #124]	; (409da0 <tcp_write+0x2c4>)
  409d22:	4798      	blx	r3
  409d24:	e023      	b.n	409d6e <tcp_write+0x292>
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
  409d26:	8bbb      	ldrh	r3, [r7, #28]
  409d28:	2201      	movs	r2, #1
  409d2a:	4619      	mov	r1, r3
  409d2c:	2000      	movs	r0, #0
  409d2e:	4b1d      	ldr	r3, [pc, #116]	; (409da4 <tcp_write+0x2c8>)
  409d30:	4798      	blx	r3
  409d32:	61b8      	str	r0, [r7, #24]
  409d34:	69bb      	ldr	r3, [r7, #24]
  409d36:	2b00      	cmp	r3, #0
  409d38:	f000 80e5 	beq.w	409f06 <tcp_write+0x42a>
#if TCP_CHECKSUM_ON_COPY
      /* calculate the checksum of nocopy-data */
      chksum = ~inet_chksum((u8_t*)arg + pos, seglen);
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      p2->payload = (u8_t*)arg + pos;
  409d3c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
  409d3e:	68ba      	ldr	r2, [r7, #8]
  409d40:	441a      	add	r2, r3
  409d42:	69bb      	ldr	r3, [r7, #24]
  409d44:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
  409d46:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  409d4a:	b29b      	uxth	r3, r3
  409d4c:	2200      	movs	r2, #0
  409d4e:	4619      	mov	r1, r3
  409d50:	2000      	movs	r0, #0
  409d52:	4b14      	ldr	r3, [pc, #80]	; (409da4 <tcp_write+0x2c8>)
  409d54:	4798      	blx	r3
  409d56:	6338      	str	r0, [r7, #48]	; 0x30
  409d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  409d5a:	2b00      	cmp	r3, #0
  409d5c:	d103      	bne.n	409d66 <tcp_write+0x28a>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
  409d5e:	69b8      	ldr	r0, [r7, #24]
  409d60:	4b12      	ldr	r3, [pc, #72]	; (409dac <tcp_write+0x2d0>)
  409d62:	4798      	blx	r3
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
  409d64:	e0d2      	b.n	409f0c <tcp_write+0x430>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
  409d66:	69b9      	ldr	r1, [r7, #24]
  409d68:	6b38      	ldr	r0, [r7, #48]	; 0x30
  409d6a:	4b11      	ldr	r3, [pc, #68]	; (409db0 <tcp_write+0x2d4>)
  409d6c:	4798      	blx	r3
    }

    queuelen += pbuf_clen(p);
  409d6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
  409d70:	4b0d      	ldr	r3, [pc, #52]	; (409da8 <tcp_write+0x2cc>)
  409d72:	4798      	blx	r3
  409d74:	4603      	mov	r3, r0
  409d76:	b29a      	uxth	r2, r3
  409d78:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
  409d7a:	4413      	add	r3, r2
  409d7c:	873b      	strh	r3, [r7, #56]	; 0x38

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
  409d7e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
  409d80:	2b08      	cmp	r3, #8
  409d82:	d804      	bhi.n	409d8e <tcp_write+0x2b2>
  409d84:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
  409d86:	f64f 72fc 	movw	r2, #65532	; 0xfffc
  409d8a:	4293      	cmp	r3, r2
  409d8c:	d912      	bls.n	409db4 <tcp_write+0x2d8>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_write: queue too long %"U16_F" (%"U16_F")\n", queuelen, TCP_SND_QUEUELEN));
      pbuf_free(p);
  409d8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
  409d90:	4b06      	ldr	r3, [pc, #24]	; (409dac <tcp_write+0x2d0>)
  409d92:	4798      	blx	r3
      goto memerr;
  409d94:	e0ba      	b.n	409f0c <tcp_write+0x430>
  409d96:	bf00      	nop
  409d98:	00409a45 	.word	0x00409a45
  409d9c:	004099e5 	.word	0x004099e5
  409da0:	0040d859 	.word	0x0040d859
  409da4:	00405cc5 	.word	0x00405cc5
  409da8:	004060f9 	.word	0x004060f9
  409dac:	00406069 	.word	0x00406069
  409db0:	00406151 	.word	0x00406151
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
  409db4:	68fb      	ldr	r3, [r7, #12]
  409db6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
  409db8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
  409dba:	441a      	add	r2, r3
  409dbc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
  409dc0:	9300      	str	r3, [sp, #0]
  409dc2:	4613      	mov	r3, r2
  409dc4:	2200      	movs	r2, #0
  409dc6:	6b39      	ldr	r1, [r7, #48]	; 0x30
  409dc8:	68f8      	ldr	r0, [r7, #12]
  409dca:	4c5d      	ldr	r4, [pc, #372]	; (409f40 <tcp_write+0x464>)
  409dcc:	47a0      	blx	r4
  409dce:	6478      	str	r0, [r7, #68]	; 0x44
  409dd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
  409dd2:	2b00      	cmp	r3, #0
  409dd4:	f000 8099 	beq.w	409f0a <tcp_write+0x42e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
  409dd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  409dda:	2b00      	cmp	r3, #0
  409ddc:	d102      	bne.n	409de4 <tcp_write+0x308>
      queue = seg;
  409dde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
  409de0:	63fb      	str	r3, [r7, #60]	; 0x3c
  409de2:	e002      	b.n	409dea <tcp_write+0x30e>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
      prev_seg->next = seg;
  409de4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
  409de6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
  409de8:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
  409dea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
  409dec:	643b      	str	r3, [r7, #64]	; 0x40

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      ntohl(seg->tcphdr->seqno),
      ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
  409dee:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
  409df0:	8bbb      	ldrh	r3, [r7, #28]
  409df2:	4413      	add	r3, r2
  409df4:	877b      	strh	r3, [r7, #58]	; 0x3a
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
  409df6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
  409df8:	88fb      	ldrh	r3, [r7, #6]
  409dfa:	429a      	cmp	r2, r3
  409dfc:	f4ff af54 	bcc.w	409ca8 <tcp_write+0x1cc>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
  409e00:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  409e02:	2b00      	cmp	r3, #0
  409e04:	d02c      	beq.n	409e60 <tcp_write+0x384>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
  409e06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  409e08:	685b      	ldr	r3, [r3, #4]
  409e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  409e0c:	e01e      	b.n	409e4c <tcp_write+0x370>
      p->tot_len += oversize_used;
  409e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  409e10:	891a      	ldrh	r2, [r3, #8]
  409e12:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  409e14:	4413      	add	r3, r2
  409e16:	b29a      	uxth	r2, r3
  409e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  409e1a:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
  409e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  409e1e:	681b      	ldr	r3, [r3, #0]
  409e20:	2b00      	cmp	r3, #0
  409e22:	d110      	bne.n	409e46 <tcp_write+0x36a>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
  409e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  409e26:	685b      	ldr	r3, [r3, #4]
  409e28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
  409e2a:	8952      	ldrh	r2, [r2, #10]
  409e2c:	4413      	add	r3, r2
  409e2e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
  409e30:	68b9      	ldr	r1, [r7, #8]
  409e32:	4618      	mov	r0, r3
  409e34:	4b43      	ldr	r3, [pc, #268]	; (409f44 <tcp_write+0x468>)
  409e36:	4798      	blx	r3
        p->len += oversize_used;
  409e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  409e3a:	895a      	ldrh	r2, [r3, #10]
  409e3c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  409e3e:	4413      	add	r3, r2
  409e40:	b29a      	uxth	r2, r3
  409e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  409e44:	815a      	strh	r2, [r3, #10]
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
  409e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  409e48:	681b      	ldr	r3, [r3, #0]
  409e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  409e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  409e4e:	2b00      	cmp	r3, #0
  409e50:	d1dd      	bne.n	409e0e <tcp_write+0x332>
      if (p->next == NULL) {
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
        p->len += oversize_used;
      }
    }
    last_unsent->len += oversize_used;
  409e52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  409e54:	891a      	ldrh	r2, [r3, #8]
  409e56:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  409e58:	4413      	add	r3, r2
  409e5a:	b29a      	uxth	r2, r3
  409e5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  409e5e:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
  409e60:	8afa      	ldrh	r2, [r7, #22]
  409e62:	68fb      	ldr	r3, [r7, #12]
  409e64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
#endif /* TCP_OVERSIZE */

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p
   */
  if (concat_p != NULL) {
  409e68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  409e6a:	2b00      	cmp	r3, #0
  409e6c:	d00d      	beq.n	409e8a <tcp_write+0x3ae>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
      (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
  409e6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  409e70:	685b      	ldr	r3, [r3, #4]
  409e72:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
  409e74:	4618      	mov	r0, r3
  409e76:	4b34      	ldr	r3, [pc, #208]	; (409f48 <tcp_write+0x46c>)
  409e78:	4798      	blx	r3
    last_unsent->len += concat_p->tot_len;
  409e7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  409e7c:	891a      	ldrh	r2, [r3, #8]
  409e7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  409e80:	891b      	ldrh	r3, [r3, #8]
  409e82:	4413      	add	r3, r2
  409e84:	b29a      	uxth	r2, r3
  409e86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  409e88:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
  409e8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  409e8c:	2b00      	cmp	r3, #0
  409e8e:	d103      	bne.n	409e98 <tcp_write+0x3bc>
    pcb->unsent = queue;
  409e90:	68fb      	ldr	r3, [r7, #12]
  409e92:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
  409e94:	66da      	str	r2, [r3, #108]	; 0x6c
  409e96:	e002      	b.n	409e9e <tcp_write+0x3c2>
  } else {
    last_unsent->next = queue;
  409e98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  409e9a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
  409e9c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
  409e9e:	68fb      	ldr	r3, [r7, #12]
  409ea0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
  409ea2:	88fb      	ldrh	r3, [r7, #6]
  409ea4:	441a      	add	r2, r3
  409ea6:	68fb      	ldr	r3, [r7, #12]
  409ea8:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
  409eaa:	68fb      	ldr	r3, [r7, #12]
  409eac:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
  409eb0:	88fb      	ldrh	r3, [r7, #6]
  409eb2:	1ad3      	subs	r3, r2, r3
  409eb4:	b29a      	uxth	r2, r3
  409eb6:	68fb      	ldr	r3, [r7, #12]
  409eb8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  pcb->snd_queuelen = queuelen;
  409ebc:	68fb      	ldr	r3, [r7, #12]
  409ebe:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
  409ec0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    LWIP_ASSERT("tcp_write: valid queue length",
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
  409ec4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
  409ec6:	2b00      	cmp	r3, #0
  409ec8:	d015      	beq.n	409ef6 <tcp_write+0x41a>
  409eca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
  409ecc:	68db      	ldr	r3, [r3, #12]
  409ece:	2b00      	cmp	r3, #0
  409ed0:	d011      	beq.n	409ef6 <tcp_write+0x41a>
  409ed2:	797b      	ldrb	r3, [r7, #5]
  409ed4:	f003 0302 	and.w	r3, r3, #2
  409ed8:	2b00      	cmp	r3, #0
  409eda:	d10c      	bne.n	409ef6 <tcp_write+0x41a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
  409edc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
  409ede:	68dc      	ldr	r4, [r3, #12]
  409ee0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
  409ee2:	68db      	ldr	r3, [r3, #12]
  409ee4:	899b      	ldrh	r3, [r3, #12]
  409ee6:	b29d      	uxth	r5, r3
  409ee8:	2008      	movs	r0, #8
  409eea:	4b18      	ldr	r3, [pc, #96]	; (409f4c <tcp_write+0x470>)
  409eec:	4798      	blx	r3
  409eee:	4603      	mov	r3, r0
  409ef0:	432b      	orrs	r3, r5
  409ef2:	b29b      	uxth	r3, r3
  409ef4:	81a3      	strh	r3, [r4, #12]
  }

  return ERR_OK;
  409ef6:	2300      	movs	r3, #0
  409ef8:	e01d      	b.n	409f36 <tcp_write+0x45a>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
          LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2,
                      ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n",
                       seglen));
          goto memerr;
  409efa:	bf00      	nop
  409efc:	e006      	b.n	409f0c <tcp_write+0x430>
      } else {
        /* Data is not copied */
        if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
          LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2,
                      ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
          goto memerr;
  409efe:	bf00      	nop
  409f00:	e004      	b.n	409f0c <tcp_write+0x430>
    if (apiflags & TCP_WRITE_FLAG_COPY) {
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
  409f02:	bf00      	nop
  409f04:	e002      	b.n	409f0c <tcp_write+0x430>
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
        goto memerr;
  409f06:	bf00      	nop
  409f08:	e000      	b.n	409f0c <tcp_write+0x430>
      pbuf_free(p);
      goto memerr;
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
      goto memerr;
  409f0a:	bf00      	nop
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
  }

  return ERR_OK;
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
  409f0c:	68fb      	ldr	r3, [r7, #12]
  409f0e:	7f9b      	ldrb	r3, [r3, #30]
  409f10:	f063 037f 	orn	r3, r3, #127	; 0x7f
  409f14:	b2da      	uxtb	r2, r3
  409f16:	68fb      	ldr	r3, [r7, #12]
  409f18:	779a      	strb	r2, [r3, #30]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
  409f1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  409f1c:	2b00      	cmp	r3, #0
  409f1e:	d002      	beq.n	409f26 <tcp_write+0x44a>
    pbuf_free(concat_p);
  409f20:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
  409f22:	4b0b      	ldr	r3, [pc, #44]	; (409f50 <tcp_write+0x474>)
  409f24:	4798      	blx	r3
  }
  if (queue != NULL) {
  409f26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  409f28:	2b00      	cmp	r3, #0
  409f2a:	d002      	beq.n	409f32 <tcp_write+0x456>
    tcp_segs_free(queue);
  409f2c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
  409f2e:	4b09      	ldr	r3, [pc, #36]	; (409f54 <tcp_write+0x478>)
  409f30:	4798      	blx	r3
  if (pcb->snd_queuelen != 0) {
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
  409f32:	f04f 33ff 	mov.w	r3, #4294967295
}
  409f36:	4618      	mov	r0, r3
  409f38:	3750      	adds	r7, #80	; 0x50
  409f3a:	46bd      	mov	sp, r7
  409f3c:	bdb0      	pop	{r4, r5, r7, pc}
  409f3e:	bf00      	nop
  409f40:	004098c9 	.word	0x004098c9
  409f44:	0040d859 	.word	0x0040d859
  409f48:	00406151 	.word	0x00406151
  409f4c:	00402309 	.word	0x00402309
  409f50:	00406069 	.word	0x00406069
  409f54:	00407125 	.word	0x00407125

00409f58 <tcp_enqueue_flags>:
 * @param optdata pointer to TCP options, or NULL.
 * @param optlen length of TCP options in bytes.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
  409f58:	b590      	push	{r4, r7, lr}
  409f5a:	b08b      	sub	sp, #44	; 0x2c
  409f5c:	af02      	add	r7, sp, #8
  409f5e:	6078      	str	r0, [r7, #4]
  409f60:	460b      	mov	r3, r1
  409f62:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
  409f64:	2300      	movs	r3, #0
  409f66:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
  409f68:	2300      	movs	r3, #0
  409f6a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
  409f6c:	687b      	ldr	r3, [r7, #4]
  409f6e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
  409f72:	2b07      	cmp	r3, #7
  409f74:	d806      	bhi.n	409f84 <tcp_enqueue_flags+0x2c>
  409f76:	687b      	ldr	r3, [r7, #4]
  409f78:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
  409f7c:	f64f 72fc 	movw	r2, #65532	; 0xfffc
  409f80:	4293      	cmp	r3, r2
  409f82:	d909      	bls.n	409f98 <tcp_enqueue_flags+0x40>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 3, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
  409f84:	687b      	ldr	r3, [r7, #4]
  409f86:	7f9b      	ldrb	r3, [r3, #30]
  409f88:	f063 037f 	orn	r3, r3, #127	; 0x7f
  409f8c:	b2da      	uxtb	r2, r3
  409f8e:	687b      	ldr	r3, [r7, #4]
  409f90:	779a      	strb	r2, [r3, #30]
    return ERR_MEM;
  409f92:	f04f 33ff 	mov.w	r3, #4294967295
  409f96:	e09b      	b.n	40a0d0 <tcp_enqueue_flags+0x178>
  }

  if (flags & TCP_SYN) {
  409f98:	78fb      	ldrb	r3, [r7, #3]
  409f9a:	f003 0302 	and.w	r3, r3, #2
  409f9e:	2b00      	cmp	r3, #0
  409fa0:	d001      	beq.n	409fa6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
  409fa2:	2301      	movs	r3, #1
  409fa4:	77fb      	strb	r3, [r7, #31]
#if LWIP_TCP_TIMESTAMPS
  if ((pcb->flags & TF_TIMESTAMP)) {
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
  409fa6:	7ffb      	ldrb	r3, [r7, #31]
  409fa8:	f003 0301 	and.w	r3, r3, #1
  409fac:	2b00      	cmp	r3, #0
  409fae:	d001      	beq.n	409fb4 <tcp_enqueue_flags+0x5c>
  409fb0:	2204      	movs	r2, #4
  409fb2:	e000      	b.n	409fb6 <tcp_enqueue_flags+0x5e>
  409fb4:	2200      	movs	r2, #0
  409fb6:	7ffb      	ldrb	r3, [r7, #31]
  409fb8:	f003 0302 	and.w	r3, r3, #2
  409fbc:	2b00      	cmp	r3, #0
  409fbe:	d001      	beq.n	409fc4 <tcp_enqueue_flags+0x6c>
  409fc0:	230c      	movs	r3, #12
  409fc2:	e000      	b.n	409fc6 <tcp_enqueue_flags+0x6e>
  409fc4:	2300      	movs	r3, #0
  409fc6:	4413      	add	r3, r2
  409fc8:	75fb      	strb	r3, [r7, #23]

  /* tcp_enqueue_flags is always called with either SYN or FIN in flags.
   * We need one available snd_buf byte to do that.
   * This means we can't send FIN while snd_buf==0. A better fix would be to
   * not include SYN and FIN sequence numbers in the snd_buf count. */
  if (pcb->snd_buf == 0) {
  409fca:	687b      	ldr	r3, [r7, #4]
  409fcc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
  409fd0:	2b00      	cmp	r3, #0
  409fd2:	d102      	bne.n	409fda <tcp_enqueue_flags+0x82>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 3, ("tcp_enqueue_flags: no send buffer available\n"));
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
  409fd4:	f04f 33ff 	mov.w	r3, #4294967295
  409fd8:	e07a      	b.n	40a0d0 <tcp_enqueue_flags+0x178>
  }

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
  409fda:	7dfb      	ldrb	r3, [r7, #23]
  409fdc:	b29b      	uxth	r3, r3
  409fde:	2200      	movs	r2, #0
  409fe0:	4619      	mov	r1, r3
  409fe2:	2000      	movs	r0, #0
  409fe4:	4b3c      	ldr	r3, [pc, #240]	; (40a0d8 <tcp_enqueue_flags+0x180>)
  409fe6:	4798      	blx	r3
  409fe8:	6138      	str	r0, [r7, #16]
  409fea:	693b      	ldr	r3, [r7, #16]
  409fec:	2b00      	cmp	r3, #0
  409fee:	d109      	bne.n	40a004 <tcp_enqueue_flags+0xac>
    pcb->flags |= TF_NAGLEMEMERR;
  409ff0:	687b      	ldr	r3, [r7, #4]
  409ff2:	7f9b      	ldrb	r3, [r3, #30]
  409ff4:	f063 037f 	orn	r3, r3, #127	; 0x7f
  409ff8:	b2da      	uxtb	r2, r3
  409ffa:	687b      	ldr	r3, [r7, #4]
  409ffc:	779a      	strb	r2, [r3, #30]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
  409ffe:	f04f 33ff 	mov.w	r3, #4294967295
  40a002:	e065      	b.n	40a0d0 <tcp_enqueue_flags+0x178>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
  40a004:	687b      	ldr	r3, [r7, #4]
  40a006:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
  40a008:	78fa      	ldrb	r2, [r7, #3]
  40a00a:	7ffb      	ldrb	r3, [r7, #31]
  40a00c:	9300      	str	r3, [sp, #0]
  40a00e:	460b      	mov	r3, r1
  40a010:	6939      	ldr	r1, [r7, #16]
  40a012:	6878      	ldr	r0, [r7, #4]
  40a014:	4c31      	ldr	r4, [pc, #196]	; (40a0dc <tcp_enqueue_flags+0x184>)
  40a016:	47a0      	blx	r4
  40a018:	60f8      	str	r0, [r7, #12]
  40a01a:	68fb      	ldr	r3, [r7, #12]
  40a01c:	2b00      	cmp	r3, #0
  40a01e:	d109      	bne.n	40a034 <tcp_enqueue_flags+0xdc>
    pcb->flags |= TF_NAGLEMEMERR;
  40a020:	687b      	ldr	r3, [r7, #4]
  40a022:	7f9b      	ldrb	r3, [r3, #30]
  40a024:	f063 037f 	orn	r3, r3, #127	; 0x7f
  40a028:	b2da      	uxtb	r2, r3
  40a02a:	687b      	ldr	r3, [r7, #4]
  40a02c:	779a      	strb	r2, [r3, #30]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
  40a02e:	f04f 33ff 	mov.w	r3, #4294967295
  40a032:	e04d      	b.n	40a0d0 <tcp_enqueue_flags+0x178>
               ntohl(seg->tcphdr->seqno),
               ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
  40a034:	687b      	ldr	r3, [r7, #4]
  40a036:	6edb      	ldr	r3, [r3, #108]	; 0x6c
  40a038:	2b00      	cmp	r3, #0
  40a03a:	d103      	bne.n	40a044 <tcp_enqueue_flags+0xec>
    pcb->unsent = seg;
  40a03c:	687b      	ldr	r3, [r7, #4]
  40a03e:	68fa      	ldr	r2, [r7, #12]
  40a040:	66da      	str	r2, [r3, #108]	; 0x6c
  40a042:	e00d      	b.n	40a060 <tcp_enqueue_flags+0x108>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
  40a044:	687b      	ldr	r3, [r7, #4]
  40a046:	6edb      	ldr	r3, [r3, #108]	; 0x6c
  40a048:	61bb      	str	r3, [r7, #24]
  40a04a:	e002      	b.n	40a052 <tcp_enqueue_flags+0xfa>
  40a04c:	69bb      	ldr	r3, [r7, #24]
  40a04e:	681b      	ldr	r3, [r3, #0]
  40a050:	61bb      	str	r3, [r7, #24]
  40a052:	69bb      	ldr	r3, [r7, #24]
  40a054:	681b      	ldr	r3, [r3, #0]
  40a056:	2b00      	cmp	r3, #0
  40a058:	d1f8      	bne.n	40a04c <tcp_enqueue_flags+0xf4>
    useg->next = seg;
  40a05a:	69bb      	ldr	r3, [r7, #24]
  40a05c:	68fa      	ldr	r2, [r7, #12]
  40a05e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
  40a060:	687b      	ldr	r3, [r7, #4]
  40a062:	2200      	movs	r2, #0
  40a064:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
  40a068:	78fb      	ldrb	r3, [r7, #3]
  40a06a:	f003 0302 	and.w	r3, r3, #2
  40a06e:	2b00      	cmp	r3, #0
  40a070:	d104      	bne.n	40a07c <tcp_enqueue_flags+0x124>
  40a072:	78fb      	ldrb	r3, [r7, #3]
  40a074:	f003 0301 	and.w	r3, r3, #1
  40a078:	2b00      	cmp	r3, #0
  40a07a:	d00c      	beq.n	40a096 <tcp_enqueue_flags+0x13e>
    pcb->snd_lbb++;
  40a07c:	687b      	ldr	r3, [r7, #4]
  40a07e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  40a080:	1c5a      	adds	r2, r3, #1
  40a082:	687b      	ldr	r3, [r7, #4]
  40a084:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
    pcb->snd_buf--;
  40a086:	687b      	ldr	r3, [r7, #4]
  40a088:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
  40a08c:	3b01      	subs	r3, #1
  40a08e:	b29a      	uxth	r2, r3
  40a090:	687b      	ldr	r3, [r7, #4]
  40a092:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  }
  if (flags & TCP_FIN) {
  40a096:	78fb      	ldrb	r3, [r7, #3]
  40a098:	f003 0301 	and.w	r3, r3, #1
  40a09c:	2b00      	cmp	r3, #0
  40a09e:	d006      	beq.n	40a0ae <tcp_enqueue_flags+0x156>
    pcb->flags |= TF_FIN;
  40a0a0:	687b      	ldr	r3, [r7, #4]
  40a0a2:	7f9b      	ldrb	r3, [r3, #30]
  40a0a4:	f043 0320 	orr.w	r3, r3, #32
  40a0a8:	b2da      	uxtb	r2, r3
  40a0aa:	687b      	ldr	r3, [r7, #4]
  40a0ac:	779a      	strb	r2, [r3, #30]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
  40a0ae:	68fb      	ldr	r3, [r7, #12]
  40a0b0:	685b      	ldr	r3, [r3, #4]
  40a0b2:	4618      	mov	r0, r3
  40a0b4:	4b0a      	ldr	r3, [pc, #40]	; (40a0e0 <tcp_enqueue_flags+0x188>)
  40a0b6:	4798      	blx	r3
  40a0b8:	4603      	mov	r3, r0
  40a0ba:	4619      	mov	r1, r3
  40a0bc:	687b      	ldr	r3, [r7, #4]
  40a0be:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
  40a0c2:	b28b      	uxth	r3, r1
  40a0c4:	4413      	add	r3, r2
  40a0c6:	b29a      	uxth	r2, r3
  40a0c8:	687b      	ldr	r3, [r7, #4]
  40a0ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  if (pcb->snd_queuelen != 0) {
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
  40a0ce:	2300      	movs	r3, #0
}
  40a0d0:	4618      	mov	r0, r3
  40a0d2:	3724      	adds	r7, #36	; 0x24
  40a0d4:	46bd      	mov	sp, r7
  40a0d6:	bd90      	pop	{r4, r7, pc}
  40a0d8:	00405cc5 	.word	0x00405cc5
  40a0dc:	004098c9 	.word	0x004098c9
  40a0e0:	004060f9 	.word	0x004060f9

0040a0e4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
  40a0e4:	b590      	push	{r4, r7, lr}
  40a0e6:	b089      	sub	sp, #36	; 0x24
  40a0e8:	af02      	add	r7, sp, #8
  40a0ea:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  u8_t optlen = 0;
  40a0ec:	2300      	movs	r3, #0
  40a0ee:	75fb      	strb	r3, [r7, #23]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, htonl(pcb->snd_nxt));
  40a0f0:	7dfb      	ldrb	r3, [r7, #23]
  40a0f2:	b29c      	uxth	r4, r3
  40a0f4:	687b      	ldr	r3, [r7, #4]
  40a0f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  40a0f8:	4618      	mov	r0, r3
  40a0fa:	4b1f      	ldr	r3, [pc, #124]	; (40a178 <tcp_send_empty_ack+0x94>)
  40a0fc:	4798      	blx	r3
  40a0fe:	4603      	mov	r3, r0
  40a100:	2200      	movs	r2, #0
  40a102:	4621      	mov	r1, r4
  40a104:	6878      	ldr	r0, [r7, #4]
  40a106:	4c1d      	ldr	r4, [pc, #116]	; (40a17c <tcp_send_empty_ack+0x98>)
  40a108:	47a0      	blx	r4
  40a10a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
  40a10c:	693b      	ldr	r3, [r7, #16]
  40a10e:	2b00      	cmp	r3, #0
  40a110:	d102      	bne.n	40a118 <tcp_send_empty_ack+0x34>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
  40a112:	f06f 0301 	mvn.w	r3, #1
  40a116:	e02a      	b.n	40a16e <tcp_send_empty_ack+0x8a>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
  40a118:	693b      	ldr	r3, [r7, #16]
  40a11a:	685b      	ldr	r3, [r3, #4]
  40a11c:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, 
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  /* remove ACK flags from the PCB, as we send an empty ACK now */
  pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
  40a11e:	687b      	ldr	r3, [r7, #4]
  40a120:	7f9b      	ldrb	r3, [r3, #30]
  40a122:	f023 0303 	bic.w	r3, r3, #3
  40a126:	b2da      	uxtb	r2, r3
  40a128:	687b      	ldr	r3, [r7, #4]
  40a12a:	779a      	strb	r2, [r3, #30]
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif 

#if CHECKSUM_GEN_TCP
  tcphdr->chksum = inet_chksum_pseudo(p, &(pcb->local_ip), &(pcb->remote_ip),
  40a12c:	6879      	ldr	r1, [r7, #4]
  40a12e:	687b      	ldr	r3, [r7, #4]
  40a130:	1d1a      	adds	r2, r3, #4
  40a132:	693b      	ldr	r3, [r7, #16]
  40a134:	891b      	ldrh	r3, [r3, #8]
  40a136:	9300      	str	r3, [sp, #0]
  40a138:	2306      	movs	r3, #6
  40a13a:	6938      	ldr	r0, [r7, #16]
  40a13c:	4c10      	ldr	r4, [pc, #64]	; (40a180 <tcp_send_empty_ack+0x9c>)
  40a13e:	47a0      	blx	r4
  40a140:	4603      	mov	r3, r0
  40a142:	461a      	mov	r2, r3
  40a144:	68fb      	ldr	r3, [r7, #12]
  40a146:	821a      	strh	r2, [r3, #16]
#endif
#if LWIP_NETIF_HWADDRHINT
  ip_output_hinted(p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
      IP_PROTO_TCP, &(pcb->addr_hint));
#else /* LWIP_NETIF_HWADDRHINT*/
  ip_output(p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
  40a148:	6879      	ldr	r1, [r7, #4]
  40a14a:	687b      	ldr	r3, [r7, #4]
  40a14c:	1d18      	adds	r0, r3, #4
  40a14e:	687b      	ldr	r3, [r7, #4]
  40a150:	7a9c      	ldrb	r4, [r3, #10]
  40a152:	687b      	ldr	r3, [r7, #4]
  40a154:	7a5b      	ldrb	r3, [r3, #9]
  40a156:	2206      	movs	r2, #6
  40a158:	9201      	str	r2, [sp, #4]
  40a15a:	9300      	str	r3, [sp, #0]
  40a15c:	4623      	mov	r3, r4
  40a15e:	4602      	mov	r2, r0
  40a160:	6938      	ldr	r0, [r7, #16]
  40a162:	4c08      	ldr	r4, [pc, #32]	; (40a184 <tcp_send_empty_ack+0xa0>)
  40a164:	47a0      	blx	r4
      IP_PROTO_TCP);
#endif /* LWIP_NETIF_HWADDRHINT*/
  pbuf_free(p);
  40a166:	6938      	ldr	r0, [r7, #16]
  40a168:	4b07      	ldr	r3, [pc, #28]	; (40a188 <tcp_send_empty_ack+0xa4>)
  40a16a:	4798      	blx	r3

  return ERR_OK;
  40a16c:	2300      	movs	r3, #0
}
  40a16e:	4618      	mov	r0, r3
  40a170:	371c      	adds	r7, #28
  40a172:	46bd      	mov	sp, r7
  40a174:	bd90      	pop	{r4, r7, pc}
  40a176:	bf00      	nop
  40a178:	00402355 	.word	0x00402355
  40a17c:	00409765 	.word	0x00409765
  40a180:	0040407d 	.word	0x0040407d
  40a184:	004046f1 	.word	0x004046f1
  40a188:	00406069 	.word	0x00406069

0040a18c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
  40a18c:	b5b0      	push	{r4, r5, r7, lr}
  40a18e:	b088      	sub	sp, #32
  40a190:	af00      	add	r7, sp, #0
  40a192:	6078      	str	r0, [r7, #4]

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
  40a194:	4b98      	ldr	r3, [pc, #608]	; (40a3f8 <tcp_output+0x26c>)
  40a196:	681a      	ldr	r2, [r3, #0]
  40a198:	687b      	ldr	r3, [r7, #4]
  40a19a:	429a      	cmp	r2, r3
  40a19c:	d101      	bne.n	40a1a2 <tcp_output+0x16>
    return ERR_OK;
  40a19e:	2300      	movs	r3, #0
  40a1a0:	e149      	b.n	40a436 <tcp_output+0x2aa>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
  40a1a2:	687b      	ldr	r3, [r7, #4]
  40a1a4:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
  40a1a8:	687b      	ldr	r3, [r7, #4]
  40a1aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
  40a1ae:	4293      	cmp	r3, r2
  40a1b0:	bf28      	it	cs
  40a1b2:	4613      	movcs	r3, r2
  40a1b4:	b29b      	uxth	r3, r3
  40a1b6:	613b      	str	r3, [r7, #16]

  seg = pcb->unsent;
  40a1b8:	687b      	ldr	r3, [r7, #4]
  40a1ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
  40a1bc:	61fb      	str	r3, [r7, #28]
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
  40a1be:	687b      	ldr	r3, [r7, #4]
  40a1c0:	7f9b      	ldrb	r3, [r3, #30]
  40a1c2:	f003 0302 	and.w	r3, r3, #2
  40a1c6:	2b00      	cmp	r3, #0
  40a1c8:	d017      	beq.n	40a1fa <tcp_output+0x6e>
  40a1ca:	69fb      	ldr	r3, [r7, #28]
  40a1cc:	2b00      	cmp	r3, #0
  40a1ce:	d00f      	beq.n	40a1f0 <tcp_output+0x64>
     (seg == NULL ||
      ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
  40a1d0:	69fb      	ldr	r3, [r7, #28]
  40a1d2:	68db      	ldr	r3, [r3, #12]
  40a1d4:	685b      	ldr	r3, [r3, #4]
  40a1d6:	4618      	mov	r0, r3
  40a1d8:	4b88      	ldr	r3, [pc, #544]	; (40a3fc <tcp_output+0x270>)
  40a1da:	4798      	blx	r3
  40a1dc:	4602      	mov	r2, r0
  40a1de:	687b      	ldr	r3, [r7, #4]
  40a1e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  40a1e2:	1ad3      	subs	r3, r2, r3
  40a1e4:	69fa      	ldr	r2, [r7, #28]
  40a1e6:	8912      	ldrh	r2, [r2, #8]
  40a1e8:	441a      	add	r2, r3
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
     (seg == NULL ||
  40a1ea:	693b      	ldr	r3, [r7, #16]
  40a1ec:	429a      	cmp	r2, r3
  40a1ee:	d904      	bls.n	40a1fa <tcp_output+0x6e>
      ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
     return tcp_send_empty_ack(pcb);
  40a1f0:	6878      	ldr	r0, [r7, #4]
  40a1f2:	4b83      	ldr	r3, [pc, #524]	; (40a400 <tcp_output+0x274>)
  40a1f4:	4798      	blx	r3
  40a1f6:	4603      	mov	r3, r0
  40a1f8:	e11d      	b.n	40a436 <tcp_output+0x2aa>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
  40a1fa:	687b      	ldr	r3, [r7, #4]
  40a1fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40a1fe:	61bb      	str	r3, [r7, #24]
  if (useg != NULL) {
  40a200:	69bb      	ldr	r3, [r7, #24]
  40a202:	2b00      	cmp	r3, #0
  40a204:	f000 80e3 	beq.w	40a3ce <tcp_output+0x242>
    for (; useg->next != NULL; useg = useg->next);
  40a208:	e002      	b.n	40a210 <tcp_output+0x84>
  40a20a:	69bb      	ldr	r3, [r7, #24]
  40a20c:	681b      	ldr	r3, [r3, #0]
  40a20e:	61bb      	str	r3, [r7, #24]
  40a210:	69bb      	ldr	r3, [r7, #24]
  40a212:	681b      	ldr	r3, [r3, #0]
  40a214:	2b00      	cmp	r3, #0
  40a216:	d1f8      	bne.n	40a20a <tcp_output+0x7e>
                 ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 ntohl(seg->tcphdr->seqno), pcb->lastack));
  }
#endif /* TCP_CWND_DEBUG */
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
  40a218:	e0d9      	b.n	40a3ce <tcp_output+0x242>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if((tcp_do_output_nagle(pcb) == 0) &&
  40a21a:	687b      	ldr	r3, [r7, #4]
  40a21c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40a21e:	2b00      	cmp	r3, #0
  40a220:	d01f      	beq.n	40a262 <tcp_output+0xd6>
  40a222:	687b      	ldr	r3, [r7, #4]
  40a224:	7f9b      	ldrb	r3, [r3, #30]
  40a226:	f003 0344 	and.w	r3, r3, #68	; 0x44
  40a22a:	2b00      	cmp	r3, #0
  40a22c:	d119      	bne.n	40a262 <tcp_output+0xd6>
  40a22e:	687b      	ldr	r3, [r7, #4]
  40a230:	6edb      	ldr	r3, [r3, #108]	; 0x6c
  40a232:	2b00      	cmp	r3, #0
  40a234:	d00b      	beq.n	40a24e <tcp_output+0xc2>
  40a236:	687b      	ldr	r3, [r7, #4]
  40a238:	6edb      	ldr	r3, [r3, #108]	; 0x6c
  40a23a:	681b      	ldr	r3, [r3, #0]
  40a23c:	2b00      	cmp	r3, #0
  40a23e:	d110      	bne.n	40a262 <tcp_output+0xd6>
  40a240:	687b      	ldr	r3, [r7, #4]
  40a242:	6edb      	ldr	r3, [r3, #108]	; 0x6c
  40a244:	891a      	ldrh	r2, [r3, #8]
  40a246:	687b      	ldr	r3, [r7, #4]
  40a248:	8edb      	ldrh	r3, [r3, #54]	; 0x36
  40a24a:	429a      	cmp	r2, r3
  40a24c:	d209      	bcs.n	40a262 <tcp_output+0xd6>
  40a24e:	687b      	ldr	r3, [r7, #4]
  40a250:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
  40a254:	2b00      	cmp	r3, #0
  40a256:	d004      	beq.n	40a262 <tcp_output+0xd6>
  40a258:	687b      	ldr	r3, [r7, #4]
  40a25a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
  40a25e:	2b07      	cmp	r3, #7
  40a260:	d901      	bls.n	40a266 <tcp_output+0xda>
  40a262:	2301      	movs	r3, #1
  40a264:	e000      	b.n	40a268 <tcp_output+0xdc>
  40a266:	2300      	movs	r3, #0
  40a268:	2b00      	cmp	r3, #0
  40a26a:	d106      	bne.n	40a27a <tcp_output+0xee>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)){
  40a26c:	687b      	ldr	r3, [r7, #4]
  40a26e:	7f9b      	ldrb	r3, [r3, #30]
  40a270:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if((tcp_do_output_nagle(pcb) == 0) &&
  40a274:	2b00      	cmp	r3, #0
  40a276:	f000 80cd 	beq.w	40a414 <tcp_output+0x288>
                            pcb->lastack,
                            ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    pcb->unsent = seg->next;
  40a27a:	69fb      	ldr	r3, [r7, #28]
  40a27c:	681a      	ldr	r2, [r3, #0]
  40a27e:	687b      	ldr	r3, [r7, #4]
  40a280:	66da      	str	r2, [r3, #108]	; 0x6c

    if (pcb->state != SYN_SENT) {
  40a282:	687b      	ldr	r3, [r7, #4]
  40a284:	7e1b      	ldrb	r3, [r3, #24]
  40a286:	2b02      	cmp	r3, #2
  40a288:	d013      	beq.n	40a2b2 <tcp_output+0x126>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
  40a28a:	69fb      	ldr	r3, [r7, #28]
  40a28c:	68dc      	ldr	r4, [r3, #12]
  40a28e:	69fb      	ldr	r3, [r7, #28]
  40a290:	68db      	ldr	r3, [r3, #12]
  40a292:	899b      	ldrh	r3, [r3, #12]
  40a294:	b29d      	uxth	r5, r3
  40a296:	2010      	movs	r0, #16
  40a298:	4b5a      	ldr	r3, [pc, #360]	; (40a404 <tcp_output+0x278>)
  40a29a:	4798      	blx	r3
  40a29c:	4603      	mov	r3, r0
  40a29e:	432b      	orrs	r3, r5
  40a2a0:	b29b      	uxth	r3, r3
  40a2a2:	81a3      	strh	r3, [r4, #12]
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
  40a2a4:	687b      	ldr	r3, [r7, #4]
  40a2a6:	7f9b      	ldrb	r3, [r3, #30]
  40a2a8:	f023 0303 	bic.w	r3, r3, #3
  40a2ac:	b2da      	uxtb	r2, r3
  40a2ae:	687b      	ldr	r3, [r7, #4]
  40a2b0:	779a      	strb	r2, [r3, #30]
    }

    tcp_output_segment(seg, pcb);
  40a2b2:	6879      	ldr	r1, [r7, #4]
  40a2b4:	69f8      	ldr	r0, [r7, #28]
  40a2b6:	4b54      	ldr	r3, [pc, #336]	; (40a408 <tcp_output+0x27c>)
  40a2b8:	4798      	blx	r3
    snd_nxt = ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
  40a2ba:	69fb      	ldr	r3, [r7, #28]
  40a2bc:	68db      	ldr	r3, [r3, #12]
  40a2be:	685b      	ldr	r3, [r3, #4]
  40a2c0:	4618      	mov	r0, r3
  40a2c2:	4b4e      	ldr	r3, [pc, #312]	; (40a3fc <tcp_output+0x270>)
  40a2c4:	4798      	blx	r3
  40a2c6:	4604      	mov	r4, r0
  40a2c8:	69fb      	ldr	r3, [r7, #28]
  40a2ca:	891b      	ldrh	r3, [r3, #8]
  40a2cc:	461d      	mov	r5, r3
  40a2ce:	69fb      	ldr	r3, [r7, #28]
  40a2d0:	68db      	ldr	r3, [r3, #12]
  40a2d2:	899b      	ldrh	r3, [r3, #12]
  40a2d4:	b29b      	uxth	r3, r3
  40a2d6:	4618      	mov	r0, r3
  40a2d8:	4b4c      	ldr	r3, [pc, #304]	; (40a40c <tcp_output+0x280>)
  40a2da:	4798      	blx	r3
  40a2dc:	4603      	mov	r3, r0
  40a2de:	f003 0303 	and.w	r3, r3, #3
  40a2e2:	2b00      	cmp	r3, #0
  40a2e4:	bf14      	ite	ne
  40a2e6:	2301      	movne	r3, #1
  40a2e8:	2300      	moveq	r3, #0
  40a2ea:	b2db      	uxtb	r3, r3
  40a2ec:	442b      	add	r3, r5
  40a2ee:	4423      	add	r3, r4
  40a2f0:	60fb      	str	r3, [r7, #12]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
  40a2f2:	687b      	ldr	r3, [r7, #4]
  40a2f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  40a2f6:	68fb      	ldr	r3, [r7, #12]
  40a2f8:	1ad3      	subs	r3, r2, r3
  40a2fa:	2b00      	cmp	r3, #0
  40a2fc:	da02      	bge.n	40a304 <tcp_output+0x178>
      pcb->snd_nxt = snd_nxt;
  40a2fe:	687b      	ldr	r3, [r7, #4]
  40a300:	68fa      	ldr	r2, [r7, #12]
  40a302:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
  40a304:	69fb      	ldr	r3, [r7, #28]
  40a306:	891b      	ldrh	r3, [r3, #8]
  40a308:	461c      	mov	r4, r3
  40a30a:	69fb      	ldr	r3, [r7, #28]
  40a30c:	68db      	ldr	r3, [r3, #12]
  40a30e:	899b      	ldrh	r3, [r3, #12]
  40a310:	b29b      	uxth	r3, r3
  40a312:	4618      	mov	r0, r3
  40a314:	4b3d      	ldr	r3, [pc, #244]	; (40a40c <tcp_output+0x280>)
  40a316:	4798      	blx	r3
  40a318:	4603      	mov	r3, r0
  40a31a:	f003 0303 	and.w	r3, r3, #3
  40a31e:	2b00      	cmp	r3, #0
  40a320:	bf14      	ite	ne
  40a322:	2301      	movne	r3, #1
  40a324:	2300      	moveq	r3, #0
  40a326:	b2db      	uxtb	r3, r3
  40a328:	4423      	add	r3, r4
  40a32a:	2b00      	cmp	r3, #0
  40a32c:	dd49      	ble.n	40a3c2 <tcp_output+0x236>
      seg->next = NULL;
  40a32e:	69fb      	ldr	r3, [r7, #28]
  40a330:	2200      	movs	r2, #0
  40a332:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
  40a334:	687b      	ldr	r3, [r7, #4]
  40a336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40a338:	2b00      	cmp	r3, #0
  40a33a:	d105      	bne.n	40a348 <tcp_output+0x1bc>
        pcb->unacked = seg;
  40a33c:	687b      	ldr	r3, [r7, #4]
  40a33e:	69fa      	ldr	r2, [r7, #28]
  40a340:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
  40a342:	69fb      	ldr	r3, [r7, #28]
  40a344:	61bb      	str	r3, [r7, #24]
  40a346:	e03f      	b.n	40a3c8 <tcp_output+0x23c>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(ntohl(seg->tcphdr->seqno), ntohl(useg->tcphdr->seqno))) {
  40a348:	69fb      	ldr	r3, [r7, #28]
  40a34a:	68db      	ldr	r3, [r3, #12]
  40a34c:	685b      	ldr	r3, [r3, #4]
  40a34e:	4618      	mov	r0, r3
  40a350:	4b2a      	ldr	r3, [pc, #168]	; (40a3fc <tcp_output+0x270>)
  40a352:	4798      	blx	r3
  40a354:	4604      	mov	r4, r0
  40a356:	69bb      	ldr	r3, [r7, #24]
  40a358:	68db      	ldr	r3, [r3, #12]
  40a35a:	685b      	ldr	r3, [r3, #4]
  40a35c:	4618      	mov	r0, r3
  40a35e:	4b27      	ldr	r3, [pc, #156]	; (40a3fc <tcp_output+0x270>)
  40a360:	4798      	blx	r3
  40a362:	4603      	mov	r3, r0
  40a364:	1ae3      	subs	r3, r4, r3
  40a366:	2b00      	cmp	r3, #0
  40a368:	da24      	bge.n	40a3b4 <tcp_output+0x228>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
  40a36a:	687b      	ldr	r3, [r7, #4]
  40a36c:	3370      	adds	r3, #112	; 0x70
  40a36e:	617b      	str	r3, [r7, #20]
          while (*cur_seg &&
  40a370:	e002      	b.n	40a378 <tcp_output+0x1ec>
            TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
  40a372:	697b      	ldr	r3, [r7, #20]
  40a374:	681b      	ldr	r3, [r3, #0]
  40a376:	617b      	str	r3, [r7, #20]
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(ntohl(seg->tcphdr->seqno), ntohl(useg->tcphdr->seqno))) {
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
          while (*cur_seg &&
  40a378:	697b      	ldr	r3, [r7, #20]
  40a37a:	681b      	ldr	r3, [r3, #0]
  40a37c:	2b00      	cmp	r3, #0
  40a37e:	d011      	beq.n	40a3a4 <tcp_output+0x218>
            TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
  40a380:	697b      	ldr	r3, [r7, #20]
  40a382:	681b      	ldr	r3, [r3, #0]
  40a384:	68db      	ldr	r3, [r3, #12]
  40a386:	685b      	ldr	r3, [r3, #4]
  40a388:	4618      	mov	r0, r3
  40a38a:	4b1c      	ldr	r3, [pc, #112]	; (40a3fc <tcp_output+0x270>)
  40a38c:	4798      	blx	r3
  40a38e:	4604      	mov	r4, r0
  40a390:	69fb      	ldr	r3, [r7, #28]
  40a392:	68db      	ldr	r3, [r3, #12]
  40a394:	685b      	ldr	r3, [r3, #4]
  40a396:	4618      	mov	r0, r3
  40a398:	4b18      	ldr	r3, [pc, #96]	; (40a3fc <tcp_output+0x270>)
  40a39a:	4798      	blx	r3
  40a39c:	4603      	mov	r3, r0
  40a39e:	1ae3      	subs	r3, r4, r3
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(ntohl(seg->tcphdr->seqno), ntohl(useg->tcphdr->seqno))) {
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
          while (*cur_seg &&
  40a3a0:	2b00      	cmp	r3, #0
  40a3a2:	dbe6      	blt.n	40a372 <tcp_output+0x1e6>
            TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
          }
          seg->next = (*cur_seg);
  40a3a4:	697b      	ldr	r3, [r7, #20]
  40a3a6:	681a      	ldr	r2, [r3, #0]
  40a3a8:	69fb      	ldr	r3, [r7, #28]
  40a3aa:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
  40a3ac:	697b      	ldr	r3, [r7, #20]
  40a3ae:	69fa      	ldr	r2, [r7, #28]
  40a3b0:	601a      	str	r2, [r3, #0]
  40a3b2:	e009      	b.n	40a3c8 <tcp_output+0x23c>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
  40a3b4:	69bb      	ldr	r3, [r7, #24]
  40a3b6:	69fa      	ldr	r2, [r7, #28]
  40a3b8:	601a      	str	r2, [r3, #0]
          useg = useg->next;
  40a3ba:	69bb      	ldr	r3, [r7, #24]
  40a3bc:	681b      	ldr	r3, [r3, #0]
  40a3be:	61bb      	str	r3, [r7, #24]
  40a3c0:	e002      	b.n	40a3c8 <tcp_output+0x23c>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
  40a3c2:	69f8      	ldr	r0, [r7, #28]
  40a3c4:	4b12      	ldr	r3, [pc, #72]	; (40a410 <tcp_output+0x284>)
  40a3c6:	4798      	blx	r3
    }
    seg = pcb->unsent;
  40a3c8:	687b      	ldr	r3, [r7, #4]
  40a3ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
  40a3cc:	61fb      	str	r3, [r7, #28]
                 ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 ntohl(seg->tcphdr->seqno), pcb->lastack));
  }
#endif /* TCP_CWND_DEBUG */
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
  40a3ce:	69fb      	ldr	r3, [r7, #28]
  40a3d0:	2b00      	cmp	r3, #0
  40a3d2:	d020      	beq.n	40a416 <tcp_output+0x28a>
         ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
  40a3d4:	69fb      	ldr	r3, [r7, #28]
  40a3d6:	68db      	ldr	r3, [r3, #12]
  40a3d8:	685b      	ldr	r3, [r3, #4]
  40a3da:	4618      	mov	r0, r3
  40a3dc:	4b07      	ldr	r3, [pc, #28]	; (40a3fc <tcp_output+0x270>)
  40a3de:	4798      	blx	r3
  40a3e0:	4602      	mov	r2, r0
  40a3e2:	687b      	ldr	r3, [r7, #4]
  40a3e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  40a3e6:	1ad3      	subs	r3, r2, r3
  40a3e8:	69fa      	ldr	r2, [r7, #28]
  40a3ea:	8912      	ldrh	r2, [r2, #8]
  40a3ec:	441a      	add	r2, r3
                 ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 ntohl(seg->tcphdr->seqno), pcb->lastack));
  }
#endif /* TCP_CWND_DEBUG */
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
  40a3ee:	693b      	ldr	r3, [r7, #16]
  40a3f0:	429a      	cmp	r2, r3
  40a3f2:	f67f af12 	bls.w	40a21a <tcp_output+0x8e>
  40a3f6:	e00e      	b.n	40a416 <tcp_output+0x28a>
  40a3f8:	20404998 	.word	0x20404998
  40a3fc:	00402389 	.word	0x00402389
  40a400:	0040a0e5 	.word	0x0040a0e5
  40a404:	00402309 	.word	0x00402309
  40a408:	0040a441 	.word	0x0040a441
  40a40c:	00402335 	.word	0x00402335
  40a410:	00407151 	.word	0x00407151
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if((tcp_do_output_nagle(pcb) == 0) &&
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)){
      break;
  40a414:	bf00      	nop
      tcp_seg_free(seg);
    }
    seg = pcb->unsent;
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
  40a416:	687b      	ldr	r3, [r7, #4]
  40a418:	6edb      	ldr	r3, [r3, #108]	; 0x6c
  40a41a:	2b00      	cmp	r3, #0
  40a41c:	d103      	bne.n	40a426 <tcp_output+0x29a>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
  40a41e:	687b      	ldr	r3, [r7, #4]
  40a420:	2200      	movs	r2, #0
  40a422:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
  40a426:	687b      	ldr	r3, [r7, #4]
  40a428:	7f9b      	ldrb	r3, [r3, #30]
  40a42a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  40a42e:	b2da      	uxtb	r2, r3
  40a430:	687b      	ldr	r3, [r7, #4]
  40a432:	779a      	strb	r2, [r3, #30]
  return ERR_OK;
  40a434:	2300      	movs	r3, #0
}
  40a436:	4618      	mov	r0, r3
  40a438:	3720      	adds	r7, #32
  40a43a:	46bd      	mov	sp, r7
  40a43c:	bdb0      	pop	{r4, r5, r7, pc}
  40a43e:	bf00      	nop

0040a440 <tcp_output_segment>:
 * @param seg the tcp_seg to send
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 */
static void
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb)
{
  40a440:	b5b0      	push	{r4, r5, r7, lr}
  40a442:	b088      	sub	sp, #32
  40a444:	af02      	add	r7, sp, #8
  40a446:	6078      	str	r0, [r7, #4]
  40a448:	6039      	str	r1, [r7, #0]
  /** @bug Exclude retransmitted segments from this count. */
  snmp_inc_tcpoutsegs();

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = htonl(pcb->rcv_nxt);
  40a44a:	687b      	ldr	r3, [r7, #4]
  40a44c:	68dc      	ldr	r4, [r3, #12]
  40a44e:	683b      	ldr	r3, [r7, #0]
  40a450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  40a452:	4618      	mov	r0, r3
  40a454:	4b55      	ldr	r3, [pc, #340]	; (40a5ac <tcp_output_segment+0x16c>)
  40a456:	4798      	blx	r3
  40a458:	4603      	mov	r3, r0
  40a45a:	60a3      	str	r3, [r4, #8]

  /* advertise our receive window size in this TCP segment */
  seg->tcphdr->wnd = htons(pcb->rcv_ann_wnd);
  40a45c:	687b      	ldr	r3, [r7, #4]
  40a45e:	68dc      	ldr	r4, [r3, #12]
  40a460:	683b      	ldr	r3, [r7, #0]
  40a462:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
  40a464:	4618      	mov	r0, r3
  40a466:	4b52      	ldr	r3, [pc, #328]	; (40a5b0 <tcp_output_segment+0x170>)
  40a468:	4798      	blx	r3
  40a46a:	4603      	mov	r3, r0
  40a46c:	81e3      	strh	r3, [r4, #14]

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
  40a46e:	683b      	ldr	r3, [r7, #0]
  40a470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  40a472:	683a      	ldr	r2, [r7, #0]
  40a474:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
  40a476:	441a      	add	r2, r3
  40a478:	683b      	ldr	r3, [r7, #0]
  40a47a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
  40a47c:	687b      	ldr	r3, [r7, #4]
  40a47e:	68db      	ldr	r3, [r3, #12]
  40a480:	3314      	adds	r3, #20
  40a482:	617b      	str	r3, [r7, #20]
  if (seg->flags & TF_SEG_OPTS_MSS) {
  40a484:	687b      	ldr	r3, [r7, #4]
  40a486:	7a9b      	ldrb	r3, [r3, #10]
  40a488:	f003 0301 	and.w	r3, r3, #1
  40a48c:	2b00      	cmp	r3, #0
  40a48e:	d014      	beq.n	40a4ba <tcp_output_segment+0x7a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->remote_ip);
  40a490:	683b      	ldr	r3, [r7, #0]
  40a492:	3304      	adds	r3, #4
  40a494:	4619      	mov	r1, r3
  40a496:	f240 50b4 	movw	r0, #1460	; 0x5b4
  40a49a:	4b46      	ldr	r3, [pc, #280]	; (40a5b4 <tcp_output_segment+0x174>)
  40a49c:	4798      	blx	r3
  40a49e:	4603      	mov	r3, r0
  40a4a0:	827b      	strh	r3, [r7, #18]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
  40a4a2:	8a7b      	ldrh	r3, [r7, #18]
  40a4a4:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
  40a4a8:	4618      	mov	r0, r3
  40a4aa:	4b40      	ldr	r3, [pc, #256]	; (40a5ac <tcp_output_segment+0x16c>)
  40a4ac:	4798      	blx	r3
  40a4ae:	4602      	mov	r2, r0
  40a4b0:	697b      	ldr	r3, [r7, #20]
  40a4b2:	601a      	str	r2, [r3, #0]
    opts += 1;
  40a4b4:	697b      	ldr	r3, [r7, #20]
  40a4b6:	3304      	adds	r3, #4
  40a4b8:	617b      	str	r3, [r7, #20]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled 
     This must be set before checking the route. */
  if (pcb->rtime == -1) {
  40a4ba:	683b      	ldr	r3, [r7, #0]
  40a4bc:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
  40a4c0:	f1b3 3fff 	cmp.w	r3, #4294967295
  40a4c4:	d102      	bne.n	40a4cc <tcp_output_segment+0x8c>
    pcb->rtime = 0;
  40a4c6:	683b      	ldr	r3, [r7, #0]
  40a4c8:	2200      	movs	r2, #0
  40a4ca:	869a      	strh	r2, [r3, #52]	; 0x34
  }

  /* If we don't have a local IP address, we get one by
     calling ip_route(). */
  if (ip_addr_isany(&(pcb->local_ip))) {
  40a4cc:	683b      	ldr	r3, [r7, #0]
  40a4ce:	2b00      	cmp	r3, #0
  40a4d0:	d003      	beq.n	40a4da <tcp_output_segment+0x9a>
  40a4d2:	683b      	ldr	r3, [r7, #0]
  40a4d4:	681b      	ldr	r3, [r3, #0]
  40a4d6:	2b00      	cmp	r3, #0
  40a4d8:	d10c      	bne.n	40a4f4 <tcp_output_segment+0xb4>
    netif = ip_route(&(pcb->remote_ip));
  40a4da:	683b      	ldr	r3, [r7, #0]
  40a4dc:	3304      	adds	r3, #4
  40a4de:	4618      	mov	r0, r3
  40a4e0:	4b35      	ldr	r3, [pc, #212]	; (40a5b8 <tcp_output_segment+0x178>)
  40a4e2:	4798      	blx	r3
  40a4e4:	60f8      	str	r0, [r7, #12]
    if (netif == NULL) {
  40a4e6:	68fb      	ldr	r3, [r7, #12]
  40a4e8:	2b00      	cmp	r3, #0
  40a4ea:	d05a      	beq.n	40a5a2 <tcp_output_segment+0x162>
      return;
    }
    ip_addr_copy(pcb->local_ip, netif->ip_addr);
  40a4ec:	68fb      	ldr	r3, [r7, #12]
  40a4ee:	685a      	ldr	r2, [r3, #4]
  40a4f0:	683b      	ldr	r3, [r7, #0]
  40a4f2:	601a      	str	r2, [r3, #0]
  }

  if (pcb->rttest == 0) {
  40a4f4:	683b      	ldr	r3, [r7, #0]
  40a4f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  40a4f8:	2b00      	cmp	r3, #0
  40a4fa:	d10c      	bne.n	40a516 <tcp_output_segment+0xd6>
    pcb->rttest = tcp_ticks;
  40a4fc:	4b2f      	ldr	r3, [pc, #188]	; (40a5bc <tcp_output_segment+0x17c>)
  40a4fe:	681a      	ldr	r2, [r3, #0]
  40a500:	683b      	ldr	r3, [r7, #0]
  40a502:	639a      	str	r2, [r3, #56]	; 0x38
    pcb->rtseq = ntohl(seg->tcphdr->seqno);
  40a504:	687b      	ldr	r3, [r7, #4]
  40a506:	68db      	ldr	r3, [r3, #12]
  40a508:	685b      	ldr	r3, [r3, #4]
  40a50a:	4618      	mov	r0, r3
  40a50c:	4b2c      	ldr	r3, [pc, #176]	; (40a5c0 <tcp_output_segment+0x180>)
  40a50e:	4798      	blx	r3
  40a510:	4602      	mov	r2, r0
  40a512:	683b      	ldr	r3, [r7, #0]
  40a514:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          htonl(seg->tcphdr->seqno), htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
  40a516:	687b      	ldr	r3, [r7, #4]
  40a518:	68db      	ldr	r3, [r3, #12]
  40a51a:	461a      	mov	r2, r3
  40a51c:	687b      	ldr	r3, [r7, #4]
  40a51e:	685b      	ldr	r3, [r3, #4]
  40a520:	685b      	ldr	r3, [r3, #4]
  40a522:	1ad3      	subs	r3, r2, r3
  40a524:	817b      	strh	r3, [r7, #10]

  seg->p->len -= len;
  40a526:	687b      	ldr	r3, [r7, #4]
  40a528:	685b      	ldr	r3, [r3, #4]
  40a52a:	687a      	ldr	r2, [r7, #4]
  40a52c:	6852      	ldr	r2, [r2, #4]
  40a52e:	8951      	ldrh	r1, [r2, #10]
  40a530:	897a      	ldrh	r2, [r7, #10]
  40a532:	1a8a      	subs	r2, r1, r2
  40a534:	b292      	uxth	r2, r2
  40a536:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
  40a538:	687b      	ldr	r3, [r7, #4]
  40a53a:	685b      	ldr	r3, [r3, #4]
  40a53c:	687a      	ldr	r2, [r7, #4]
  40a53e:	6852      	ldr	r2, [r2, #4]
  40a540:	8911      	ldrh	r1, [r2, #8]
  40a542:	897a      	ldrh	r2, [r7, #10]
  40a544:	1a8a      	subs	r2, r1, r2
  40a546:	b292      	uxth	r2, r2
  40a548:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
  40a54a:	687b      	ldr	r3, [r7, #4]
  40a54c:	685b      	ldr	r3, [r3, #4]
  40a54e:	687a      	ldr	r2, [r7, #4]
  40a550:	68d2      	ldr	r2, [r2, #12]
  40a552:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
  40a554:	687b      	ldr	r3, [r7, #4]
  40a556:	68db      	ldr	r3, [r3, #12]
  40a558:	2200      	movs	r2, #0
  40a55a:	741a      	strb	r2, [r3, #16]
  40a55c:	2200      	movs	r2, #0
  40a55e:	745a      	strb	r2, [r3, #17]
      seg->tcphdr->chksum = chksum_slow;
    }
#endif /* TCP_CHECKSUM_ON_COPY_SANITY_CHECK */
  }
#else /* TCP_CHECKSUM_ON_COPY */
  seg->tcphdr->chksum = inet_chksum_pseudo(seg->p, &(pcb->local_ip),
  40a560:	687b      	ldr	r3, [r7, #4]
  40a562:	68dc      	ldr	r4, [r3, #12]
  40a564:	687b      	ldr	r3, [r7, #4]
  40a566:	6858      	ldr	r0, [r3, #4]
  40a568:	6839      	ldr	r1, [r7, #0]
  40a56a:	683b      	ldr	r3, [r7, #0]
  40a56c:	1d1a      	adds	r2, r3, #4
         &(pcb->remote_ip),
         IP_PROTO_TCP, seg->p->tot_len);
  40a56e:	687b      	ldr	r3, [r7, #4]
  40a570:	685b      	ldr	r3, [r3, #4]
      seg->tcphdr->chksum = chksum_slow;
    }
#endif /* TCP_CHECKSUM_ON_COPY_SANITY_CHECK */
  }
#else /* TCP_CHECKSUM_ON_COPY */
  seg->tcphdr->chksum = inet_chksum_pseudo(seg->p, &(pcb->local_ip),
  40a572:	891b      	ldrh	r3, [r3, #8]
  40a574:	9300      	str	r3, [sp, #0]
  40a576:	2306      	movs	r3, #6
  40a578:	4d12      	ldr	r5, [pc, #72]	; (40a5c4 <tcp_output_segment+0x184>)
  40a57a:	47a8      	blx	r5
  40a57c:	4603      	mov	r3, r0
  40a57e:	8223      	strh	r3, [r4, #16]

#if LWIP_NETIF_HWADDRHINT
  ip_output_hinted(seg->p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
      IP_PROTO_TCP, &(pcb->addr_hint));
#else /* LWIP_NETIF_HWADDRHINT*/
  ip_output(seg->p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
  40a580:	687b      	ldr	r3, [r7, #4]
  40a582:	6858      	ldr	r0, [r3, #4]
  40a584:	6839      	ldr	r1, [r7, #0]
  40a586:	683b      	ldr	r3, [r7, #0]
  40a588:	1d1c      	adds	r4, r3, #4
  40a58a:	683b      	ldr	r3, [r7, #0]
  40a58c:	7a9d      	ldrb	r5, [r3, #10]
  40a58e:	683b      	ldr	r3, [r7, #0]
  40a590:	7a5b      	ldrb	r3, [r3, #9]
  40a592:	2206      	movs	r2, #6
  40a594:	9201      	str	r2, [sp, #4]
  40a596:	9300      	str	r3, [sp, #0]
  40a598:	462b      	mov	r3, r5
  40a59a:	4622      	mov	r2, r4
  40a59c:	4c0a      	ldr	r4, [pc, #40]	; (40a5c8 <tcp_output_segment+0x188>)
  40a59e:	47a0      	blx	r4
  40a5a0:	e000      	b.n	40a5a4 <tcp_output_segment+0x164>
  /* If we don't have a local IP address, we get one by
     calling ip_route(). */
  if (ip_addr_isany(&(pcb->local_ip))) {
    netif = ip_route(&(pcb->remote_ip));
    if (netif == NULL) {
      return;
  40a5a2:	bf00      	nop
      IP_PROTO_TCP, &(pcb->addr_hint));
#else /* LWIP_NETIF_HWADDRHINT*/
  ip_output(seg->p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
      IP_PROTO_TCP);
#endif /* LWIP_NETIF_HWADDRHINT*/
}
  40a5a4:	3718      	adds	r7, #24
  40a5a6:	46bd      	mov	sp, r7
  40a5a8:	bdb0      	pop	{r4, r5, r7, pc}
  40a5aa:	bf00      	nop
  40a5ac:	00402355 	.word	0x00402355
  40a5b0:	00402309 	.word	0x00402309
  40a5b4:	00407685 	.word	0x00407685
  40a5b8:	00404251 	.word	0x00404251
  40a5bc:	20404984 	.word	0x20404984
  40a5c0:	00402389 	.word	0x00402389
  40a5c4:	0040407d 	.word	0x0040407d
  40a5c8:	004046f1 	.word	0x004046f1

0040a5cc <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  ip_addr_t *local_ip, ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
  40a5cc:	b590      	push	{r4, r7, lr}
  40a5ce:	b089      	sub	sp, #36	; 0x24
  40a5d0:	af02      	add	r7, sp, #8
  40a5d2:	60f8      	str	r0, [r7, #12]
  40a5d4:	60b9      	str	r1, [r7, #8]
  40a5d6:	607a      	str	r2, [r7, #4]
  40a5d8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
  40a5da:	2200      	movs	r2, #0
  40a5dc:	2114      	movs	r1, #20
  40a5de:	2001      	movs	r0, #1
  40a5e0:	4b2f      	ldr	r3, [pc, #188]	; (40a6a0 <tcp_rst+0xd4>)
  40a5e2:	4798      	blx	r3
  40a5e4:	6178      	str	r0, [r7, #20]
  if (p == NULL) {
  40a5e6:	697b      	ldr	r3, [r7, #20]
  40a5e8:	2b00      	cmp	r3, #0
  40a5ea:	d054      	beq.n	40a696 <tcp_rst+0xca>
      return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
  40a5ec:	697b      	ldr	r3, [r7, #20]
  40a5ee:	685b      	ldr	r3, [r3, #4]
  40a5f0:	613b      	str	r3, [r7, #16]
  tcphdr->src = htons(local_port);
  40a5f2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
  40a5f4:	4618      	mov	r0, r3
  40a5f6:	4b2b      	ldr	r3, [pc, #172]	; (40a6a4 <tcp_rst+0xd8>)
  40a5f8:	4798      	blx	r3
  40a5fa:	4603      	mov	r3, r0
  40a5fc:	461a      	mov	r2, r3
  40a5fe:	693b      	ldr	r3, [r7, #16]
  40a600:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = htons(remote_port);
  40a602:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
  40a604:	4618      	mov	r0, r3
  40a606:	4b27      	ldr	r3, [pc, #156]	; (40a6a4 <tcp_rst+0xd8>)
  40a608:	4798      	blx	r3
  40a60a:	4603      	mov	r3, r0
  40a60c:	461a      	mov	r2, r3
  40a60e:	693b      	ldr	r3, [r7, #16]
  40a610:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = htonl(seqno);
  40a612:	68f8      	ldr	r0, [r7, #12]
  40a614:	4b24      	ldr	r3, [pc, #144]	; (40a6a8 <tcp_rst+0xdc>)
  40a616:	4798      	blx	r3
  40a618:	4602      	mov	r2, r0
  40a61a:	693b      	ldr	r3, [r7, #16]
  40a61c:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = htonl(ackno);
  40a61e:	68b8      	ldr	r0, [r7, #8]
  40a620:	4b21      	ldr	r3, [pc, #132]	; (40a6a8 <tcp_rst+0xdc>)
  40a622:	4798      	blx	r3
  40a624:	4602      	mov	r2, r0
  40a626:	693b      	ldr	r3, [r7, #16]
  40a628:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
  40a62a:	f245 0014 	movw	r0, #20500	; 0x5014
  40a62e:	4b1d      	ldr	r3, [pc, #116]	; (40a6a4 <tcp_rst+0xd8>)
  40a630:	4798      	blx	r3
  40a632:	4603      	mov	r3, r0
  40a634:	461a      	mov	r2, r3
  40a636:	693b      	ldr	r3, [r7, #16]
  40a638:	819a      	strh	r2, [r3, #12]
  tcphdr->wnd = PP_HTONS(TCP_WND);
  40a63a:	693b      	ldr	r3, [r7, #16]
  40a63c:	2200      	movs	r2, #0
  40a63e:	f042 020b 	orr.w	r2, r2, #11
  40a642:	739a      	strb	r2, [r3, #14]
  40a644:	2200      	movs	r2, #0
  40a646:	f042 0268 	orr.w	r2, r2, #104	; 0x68
  40a64a:	73da      	strb	r2, [r3, #15]
  tcphdr->chksum = 0;
  40a64c:	693b      	ldr	r3, [r7, #16]
  40a64e:	2200      	movs	r2, #0
  40a650:	741a      	strb	r2, [r3, #16]
  40a652:	2200      	movs	r2, #0
  40a654:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
  40a656:	693b      	ldr	r3, [r7, #16]
  40a658:	2200      	movs	r2, #0
  40a65a:	749a      	strb	r2, [r3, #18]
  40a65c:	2200      	movs	r2, #0
  40a65e:	74da      	strb	r2, [r3, #19]

#if CHECKSUM_GEN_TCP
  tcphdr->chksum = inet_chksum_pseudo(p, local_ip, remote_ip,
  40a660:	697b      	ldr	r3, [r7, #20]
  40a662:	891b      	ldrh	r3, [r3, #8]
  40a664:	9300      	str	r3, [sp, #0]
  40a666:	2306      	movs	r3, #6
  40a668:	683a      	ldr	r2, [r7, #0]
  40a66a:	6879      	ldr	r1, [r7, #4]
  40a66c:	6978      	ldr	r0, [r7, #20]
  40a66e:	4c0f      	ldr	r4, [pc, #60]	; (40a6ac <tcp_rst+0xe0>)
  40a670:	47a0      	blx	r4
  40a672:	4603      	mov	r3, r0
  40a674:	461a      	mov	r2, r3
  40a676:	693b      	ldr	r3, [r7, #16]
  40a678:	821a      	strh	r2, [r3, #16]
              IP_PROTO_TCP, p->tot_len);
#endif
  TCP_STATS_INC(tcp.xmit);
  snmp_inc_tcpoutrsts();
   /* Send output with hardcoded TTL since we have no access to the pcb */
  ip_output(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP);
  40a67a:	2306      	movs	r3, #6
  40a67c:	9301      	str	r3, [sp, #4]
  40a67e:	2300      	movs	r3, #0
  40a680:	9300      	str	r3, [sp, #0]
  40a682:	23ff      	movs	r3, #255	; 0xff
  40a684:	683a      	ldr	r2, [r7, #0]
  40a686:	6879      	ldr	r1, [r7, #4]
  40a688:	6978      	ldr	r0, [r7, #20]
  40a68a:	4c09      	ldr	r4, [pc, #36]	; (40a6b0 <tcp_rst+0xe4>)
  40a68c:	47a0      	blx	r4
  pbuf_free(p);
  40a68e:	6978      	ldr	r0, [r7, #20]
  40a690:	4b08      	ldr	r3, [pc, #32]	; (40a6b4 <tcp_rst+0xe8>)
  40a692:	4798      	blx	r3
  40a694:	e000      	b.n	40a698 <tcp_rst+0xcc>
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
  if (p == NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
      return;
  40a696:	bf00      	nop
  snmp_inc_tcpoutrsts();
   /* Send output with hardcoded TTL since we have no access to the pcb */
  ip_output(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP);
  pbuf_free(p);
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
  40a698:	371c      	adds	r7, #28
  40a69a:	46bd      	mov	sp, r7
  40a69c:	bd90      	pop	{r4, r7, pc}
  40a69e:	bf00      	nop
  40a6a0:	00405cc5 	.word	0x00405cc5
  40a6a4:	00402309 	.word	0x00402309
  40a6a8:	00402355 	.word	0x00402355
  40a6ac:	0040407d 	.word	0x0040407d
  40a6b0:	004046f1 	.word	0x004046f1
  40a6b4:	00406069 	.word	0x00406069

0040a6b8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
  40a6b8:	b580      	push	{r7, lr}
  40a6ba:	b084      	sub	sp, #16
  40a6bc:	af00      	add	r7, sp, #0
  40a6be:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
  40a6c0:	687b      	ldr	r3, [r7, #4]
  40a6c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40a6c4:	2b00      	cmp	r3, #0
  40a6c6:	d024      	beq.n	40a712 <tcp_rexmit_rto+0x5a>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
  40a6c8:	687b      	ldr	r3, [r7, #4]
  40a6ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40a6cc:	60fb      	str	r3, [r7, #12]
  40a6ce:	e002      	b.n	40a6d6 <tcp_rexmit_rto+0x1e>
  40a6d0:	68fb      	ldr	r3, [r7, #12]
  40a6d2:	681b      	ldr	r3, [r3, #0]
  40a6d4:	60fb      	str	r3, [r7, #12]
  40a6d6:	68fb      	ldr	r3, [r7, #12]
  40a6d8:	681b      	ldr	r3, [r3, #0]
  40a6da:	2b00      	cmp	r3, #0
  40a6dc:	d1f8      	bne.n	40a6d0 <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
  40a6de:	687b      	ldr	r3, [r7, #4]
  40a6e0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
  40a6e2:	68fb      	ldr	r3, [r7, #12]
  40a6e4:	601a      	str	r2, [r3, #0]
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
  40a6e6:	687b      	ldr	r3, [r7, #4]
  40a6e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40a6ea:	687b      	ldr	r3, [r7, #4]
  40a6ec:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
  40a6ee:	687b      	ldr	r3, [r7, #4]
  40a6f0:	2200      	movs	r2, #0
  40a6f2:	671a      	str	r2, [r3, #112]	; 0x70
  /* last unsent hasn't changed, no need to reset unsent_oversize */

  /* increment number of retransmissions */
  ++pcb->nrtx;
  40a6f4:	687b      	ldr	r3, [r7, #4]
  40a6f6:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
  40a6fa:	3301      	adds	r3, #1
  40a6fc:	b2da      	uxtb	r2, r3
  40a6fe:	687b      	ldr	r3, [r7, #4]
  40a700:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
  40a704:	687b      	ldr	r3, [r7, #4]
  40a706:	2200      	movs	r2, #0
  40a708:	639a      	str	r2, [r3, #56]	; 0x38

  /* Do the actual retransmission */
  tcp_output(pcb);
  40a70a:	6878      	ldr	r0, [r7, #4]
  40a70c:	4b03      	ldr	r3, [pc, #12]	; (40a71c <tcp_rexmit_rto+0x64>)
  40a70e:	4798      	blx	r3
  40a710:	e000      	b.n	40a714 <tcp_rexmit_rto+0x5c>
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
    return;
  40a712:	bf00      	nop
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;

  /* Do the actual retransmission */
  tcp_output(pcb);
}
  40a714:	3710      	adds	r7, #16
  40a716:	46bd      	mov	sp, r7
  40a718:	bd80      	pop	{r7, pc}
  40a71a:	bf00      	nop
  40a71c:	0040a18d 	.word	0x0040a18d

0040a720 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
  40a720:	b590      	push	{r4, r7, lr}
  40a722:	b085      	sub	sp, #20
  40a724:	af00      	add	r7, sp, #0
  40a726:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
  40a728:	687b      	ldr	r3, [r7, #4]
  40a72a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40a72c:	2b00      	cmp	r3, #0
  40a72e:	d03e      	beq.n	40a7ae <tcp_rexmit+0x8e>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  40a730:	687b      	ldr	r3, [r7, #4]
  40a732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40a734:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
  40a736:	68bb      	ldr	r3, [r7, #8]
  40a738:	681a      	ldr	r2, [r3, #0]
  40a73a:	687b      	ldr	r3, [r7, #4]
  40a73c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
  40a73e:	687b      	ldr	r3, [r7, #4]
  40a740:	336c      	adds	r3, #108	; 0x6c
  40a742:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
  40a744:	e002      	b.n	40a74c <tcp_rexmit+0x2c>
    TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
  40a746:	68fb      	ldr	r3, [r7, #12]
  40a748:	681b      	ldr	r3, [r3, #0]
  40a74a:	60fb      	str	r3, [r7, #12]
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  pcb->unacked = seg->next;

  cur_seg = &(pcb->unsent);
  while (*cur_seg &&
  40a74c:	68fb      	ldr	r3, [r7, #12]
  40a74e:	681b      	ldr	r3, [r3, #0]
  40a750:	2b00      	cmp	r3, #0
  40a752:	d011      	beq.n	40a778 <tcp_rexmit+0x58>
    TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
  40a754:	68fb      	ldr	r3, [r7, #12]
  40a756:	681b      	ldr	r3, [r3, #0]
  40a758:	68db      	ldr	r3, [r3, #12]
  40a75a:	685b      	ldr	r3, [r3, #4]
  40a75c:	4618      	mov	r0, r3
  40a75e:	4b16      	ldr	r3, [pc, #88]	; (40a7b8 <tcp_rexmit+0x98>)
  40a760:	4798      	blx	r3
  40a762:	4604      	mov	r4, r0
  40a764:	68bb      	ldr	r3, [r7, #8]
  40a766:	68db      	ldr	r3, [r3, #12]
  40a768:	685b      	ldr	r3, [r3, #4]
  40a76a:	4618      	mov	r0, r3
  40a76c:	4b12      	ldr	r3, [pc, #72]	; (40a7b8 <tcp_rexmit+0x98>)
  40a76e:	4798      	blx	r3
  40a770:	4603      	mov	r3, r0
  40a772:	1ae3      	subs	r3, r4, r3
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  pcb->unacked = seg->next;

  cur_seg = &(pcb->unsent);
  while (*cur_seg &&
  40a774:	2b00      	cmp	r3, #0
  40a776:	dbe6      	blt.n	40a746 <tcp_rexmit+0x26>
    TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
  }
  seg->next = *cur_seg;
  40a778:	68fb      	ldr	r3, [r7, #12]
  40a77a:	681a      	ldr	r2, [r3, #0]
  40a77c:	68bb      	ldr	r3, [r7, #8]
  40a77e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
  40a780:	68fb      	ldr	r3, [r7, #12]
  40a782:	68ba      	ldr	r2, [r7, #8]
  40a784:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
  40a786:	68bb      	ldr	r3, [r7, #8]
  40a788:	681b      	ldr	r3, [r3, #0]
  40a78a:	2b00      	cmp	r3, #0
  40a78c:	d103      	bne.n	40a796 <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
  40a78e:	687b      	ldr	r3, [r7, #4]
  40a790:	2200      	movs	r2, #0
  40a792:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  }
#endif /* TCP_OVERSIZE */

  ++pcb->nrtx;
  40a796:	687b      	ldr	r3, [r7, #4]
  40a798:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
  40a79c:	3301      	adds	r3, #1
  40a79e:	b2da      	uxtb	r2, r3
  40a7a0:	687b      	ldr	r3, [r7, #4]
  40a7a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
  40a7a6:	687b      	ldr	r3, [r7, #4]
  40a7a8:	2200      	movs	r2, #0
  40a7aa:	639a      	str	r2, [r3, #56]	; 0x38
  40a7ac:	e000      	b.n	40a7b0 <tcp_rexmit+0x90>
{
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
    return;
  40a7ae:	bf00      	nop

  /* Do the actual retransmission. */
  snmp_inc_tcpretranssegs();
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
  40a7b0:	3714      	adds	r7, #20
  40a7b2:	46bd      	mov	sp, r7
  40a7b4:	bd90      	pop	{r4, r7, pc}
  40a7b6:	bf00      	nop
  40a7b8:	00402389 	.word	0x00402389

0040a7bc <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void 
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
  40a7bc:	b580      	push	{r7, lr}
  40a7be:	b082      	sub	sp, #8
  40a7c0:	af00      	add	r7, sp, #0
  40a7c2:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
  40a7c4:	687b      	ldr	r3, [r7, #4]
  40a7c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40a7c8:	2b00      	cmp	r3, #0
  40a7ca:	d046      	beq.n	40a85a <tcp_rexmit_fast+0x9e>
  40a7cc:	687b      	ldr	r3, [r7, #4]
  40a7ce:	7f9b      	ldrb	r3, [r3, #30]
  40a7d0:	f003 0304 	and.w	r3, r3, #4
  40a7d4:	2b00      	cmp	r3, #0
  40a7d6:	d140      	bne.n	40a85a <tcp_rexmit_fast+0x9e>
    LWIP_DEBUGF(TCP_FR_DEBUG, 
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
  40a7d8:	6878      	ldr	r0, [r7, #4]
  40a7da:	4b22      	ldr	r3, [pc, #136]	; (40a864 <tcp_rexmit_fast+0xa8>)
  40a7dc:	4798      	blx	r3

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    if (pcb->cwnd > pcb->snd_wnd) {
  40a7de:	687b      	ldr	r3, [r7, #4]
  40a7e0:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
  40a7e4:	687b      	ldr	r3, [r7, #4]
  40a7e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
  40a7ea:	429a      	cmp	r2, r3
  40a7ec:	d908      	bls.n	40a800 <tcp_rexmit_fast+0x44>
      pcb->ssthresh = pcb->snd_wnd / 2;
  40a7ee:	687b      	ldr	r3, [r7, #4]
  40a7f0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
  40a7f4:	085b      	lsrs	r3, r3, #1
  40a7f6:	b29a      	uxth	r2, r3
  40a7f8:	687b      	ldr	r3, [r7, #4]
  40a7fa:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  40a7fe:	e007      	b.n	40a810 <tcp_rexmit_fast+0x54>
    } else {
      pcb->ssthresh = pcb->cwnd / 2;
  40a800:	687b      	ldr	r3, [r7, #4]
  40a802:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
  40a806:	085b      	lsrs	r3, r3, #1
  40a808:	b29a      	uxth	r2, r3
  40a80a:	687b      	ldr	r3, [r7, #4]
  40a80c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
    }
    
    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < 2*pcb->mss) {
  40a810:	687b      	ldr	r3, [r7, #4]
  40a812:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
  40a816:	461a      	mov	r2, r3
  40a818:	687b      	ldr	r3, [r7, #4]
  40a81a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
  40a81c:	005b      	lsls	r3, r3, #1
  40a81e:	429a      	cmp	r2, r3
  40a820:	da06      	bge.n	40a830 <tcp_rexmit_fast+0x74>
      LWIP_DEBUGF(TCP_FR_DEBUG, 
                  ("tcp_receive: The minimum value for ssthresh %"U16_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, 2*pcb->mss));
      pcb->ssthresh = 2*pcb->mss;
  40a822:	687b      	ldr	r3, [r7, #4]
  40a824:	8edb      	ldrh	r3, [r3, #54]	; 0x36
  40a826:	005b      	lsls	r3, r3, #1
  40a828:	b29a      	uxth	r2, r3
  40a82a:	687b      	ldr	r3, [r7, #4]
  40a82c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
    }
    
    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
  40a830:	687b      	ldr	r3, [r7, #4]
  40a832:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
  40a836:	687b      	ldr	r3, [r7, #4]
  40a838:	8edb      	ldrh	r3, [r3, #54]	; 0x36
  40a83a:	4619      	mov	r1, r3
  40a83c:	0049      	lsls	r1, r1, #1
  40a83e:	440b      	add	r3, r1
  40a840:	b29b      	uxth	r3, r3
  40a842:	4413      	add	r3, r2
  40a844:	b29a      	uxth	r2, r3
  40a846:	687b      	ldr	r3, [r7, #4]
  40a848:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    pcb->flags |= TF_INFR;
  40a84c:	687b      	ldr	r3, [r7, #4]
  40a84e:	7f9b      	ldrb	r3, [r3, #30]
  40a850:	f043 0304 	orr.w	r3, r3, #4
  40a854:	b2da      	uxtb	r2, r3
  40a856:	687b      	ldr	r3, [r7, #4]
  40a858:	779a      	strb	r2, [r3, #30]
  } 
}
  40a85a:	bf00      	nop
  40a85c:	3708      	adds	r7, #8
  40a85e:	46bd      	mov	sp, r7
  40a860:	bd80      	pop	{r7, pc}
  40a862:	bf00      	nop
  40a864:	0040a721 	.word	0x0040a721

0040a868 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
void
tcp_keepalive(struct tcp_pcb *pcb)
{
  40a868:	b590      	push	{r4, r7, lr}
  40a86a:	b087      	sub	sp, #28
  40a86c:	af02      	add	r7, sp, #8
  40a86e:	6078      	str	r0, [r7, #4]
                          ip4_addr3_16(&pcb->remote_ip), ip4_addr4_16(&pcb->remote_ip)));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n", 
                          tcp_ticks, pcb->tmr, pcb->keep_cnt_sent));
   
  p = tcp_output_alloc_header(pcb, 0, 0, htonl(pcb->snd_nxt - 1));
  40a870:	687b      	ldr	r3, [r7, #4]
  40a872:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  40a874:	3b01      	subs	r3, #1
  40a876:	4618      	mov	r0, r3
  40a878:	4b18      	ldr	r3, [pc, #96]	; (40a8dc <tcp_keepalive+0x74>)
  40a87a:	4798      	blx	r3
  40a87c:	4603      	mov	r3, r0
  40a87e:	2200      	movs	r2, #0
  40a880:	2100      	movs	r1, #0
  40a882:	6878      	ldr	r0, [r7, #4]
  40a884:	4c16      	ldr	r4, [pc, #88]	; (40a8e0 <tcp_keepalive+0x78>)
  40a886:	47a0      	blx	r4
  40a888:	60f8      	str	r0, [r7, #12]
  if(p == NULL) {
  40a88a:	68fb      	ldr	r3, [r7, #12]
  40a88c:	2b00      	cmp	r3, #0
  40a88e:	d021      	beq.n	40a8d4 <tcp_keepalive+0x6c>
    LWIP_DEBUGF(TCP_DEBUG, 
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
  40a890:	68fb      	ldr	r3, [r7, #12]
  40a892:	685b      	ldr	r3, [r3, #4]
  40a894:	60bb      	str	r3, [r7, #8]

#if CHECKSUM_GEN_TCP
  tcphdr->chksum = inet_chksum_pseudo(p, &pcb->local_ip, &pcb->remote_ip,
  40a896:	6879      	ldr	r1, [r7, #4]
  40a898:	687b      	ldr	r3, [r7, #4]
  40a89a:	1d1a      	adds	r2, r3, #4
  40a89c:	68fb      	ldr	r3, [r7, #12]
  40a89e:	891b      	ldrh	r3, [r3, #8]
  40a8a0:	9300      	str	r3, [sp, #0]
  40a8a2:	2306      	movs	r3, #6
  40a8a4:	68f8      	ldr	r0, [r7, #12]
  40a8a6:	4c0f      	ldr	r4, [pc, #60]	; (40a8e4 <tcp_keepalive+0x7c>)
  40a8a8:	47a0      	blx	r4
  40a8aa:	4603      	mov	r3, r0
  40a8ac:	461a      	mov	r2, r3
  40a8ae:	68bb      	ldr	r3, [r7, #8]
  40a8b0:	821a      	strh	r2, [r3, #16]
  /* Send output to IP */
#if LWIP_NETIF_HWADDRHINT
  ip_output_hinted(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP,
    &(pcb->addr_hint));
#else /* LWIP_NETIF_HWADDRHINT*/
  ip_output(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP);
  40a8b2:	6879      	ldr	r1, [r7, #4]
  40a8b4:	687b      	ldr	r3, [r7, #4]
  40a8b6:	1d1a      	adds	r2, r3, #4
  40a8b8:	687b      	ldr	r3, [r7, #4]
  40a8ba:	7a98      	ldrb	r0, [r3, #10]
  40a8bc:	2306      	movs	r3, #6
  40a8be:	9301      	str	r3, [sp, #4]
  40a8c0:	2300      	movs	r3, #0
  40a8c2:	9300      	str	r3, [sp, #0]
  40a8c4:	4603      	mov	r3, r0
  40a8c6:	68f8      	ldr	r0, [r7, #12]
  40a8c8:	4c07      	ldr	r4, [pc, #28]	; (40a8e8 <tcp_keepalive+0x80>)
  40a8ca:	47a0      	blx	r4
#endif /* LWIP_NETIF_HWADDRHINT*/

  pbuf_free(p);
  40a8cc:	68f8      	ldr	r0, [r7, #12]
  40a8ce:	4b07      	ldr	r3, [pc, #28]	; (40a8ec <tcp_keepalive+0x84>)
  40a8d0:	4798      	blx	r3
  40a8d2:	e000      	b.n	40a8d6 <tcp_keepalive+0x6e>
   
  p = tcp_output_alloc_header(pcb, 0, 0, htonl(pcb->snd_nxt - 1));
  if(p == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, 
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return;
  40a8d4:	bf00      	nop

  pbuf_free(p);

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F".\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt));
}
  40a8d6:	3714      	adds	r7, #20
  40a8d8:	46bd      	mov	sp, r7
  40a8da:	bd90      	pop	{r4, r7, pc}
  40a8dc:	00402355 	.word	0x00402355
  40a8e0:	00409765 	.word	0x00409765
  40a8e4:	0040407d 	.word	0x0040407d
  40a8e8:	004046f1 	.word	0x004046f1
  40a8ec:	00406069 	.word	0x00406069

0040a8f0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
void
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
  40a8f0:	b590      	push	{r4, r7, lr}
  40a8f2:	b08b      	sub	sp, #44	; 0x2c
  40a8f4:	af02      	add	r7, sp, #8
  40a8f6:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, 
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n", 
               tcp_ticks, pcb->tmr, pcb->keep_cnt_sent));

  seg = pcb->unacked;
  40a8f8:	687b      	ldr	r3, [r7, #4]
  40a8fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40a8fc:	61fb      	str	r3, [r7, #28]

  if(seg == NULL) {
  40a8fe:	69fb      	ldr	r3, [r7, #28]
  40a900:	2b00      	cmp	r3, #0
  40a902:	d102      	bne.n	40a90a <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
  40a904:	687b      	ldr	r3, [r7, #4]
  40a906:	6edb      	ldr	r3, [r3, #108]	; 0x6c
  40a908:	61fb      	str	r3, [r7, #28]
  }
  if(seg == NULL) {
  40a90a:	69fb      	ldr	r3, [r7, #28]
  40a90c:	2b00      	cmp	r3, #0
  40a90e:	d06e      	beq.n	40a9ee <tcp_zero_window_probe+0xfe>
    return;
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
  40a910:	69fb      	ldr	r3, [r7, #28]
  40a912:	68db      	ldr	r3, [r3, #12]
  40a914:	899b      	ldrh	r3, [r3, #12]
  40a916:	b29b      	uxth	r3, r3
  40a918:	4618      	mov	r0, r3
  40a91a:	4b38      	ldr	r3, [pc, #224]	; (40a9fc <tcp_zero_window_probe+0x10c>)
  40a91c:	4798      	blx	r3
  40a91e:	4603      	mov	r3, r0
  40a920:	f003 0301 	and.w	r3, r3, #1
  40a924:	2b00      	cmp	r3, #0
  40a926:	d005      	beq.n	40a934 <tcp_zero_window_probe+0x44>
  40a928:	69fb      	ldr	r3, [r7, #28]
  40a92a:	891b      	ldrh	r3, [r3, #8]
  40a92c:	2b00      	cmp	r3, #0
  40a92e:	d101      	bne.n	40a934 <tcp_zero_window_probe+0x44>
  40a930:	2301      	movs	r3, #1
  40a932:	e000      	b.n	40a936 <tcp_zero_window_probe+0x46>
  40a934:	2300      	movs	r3, #0
  40a936:	76fb      	strb	r3, [r7, #27]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
  40a938:	7efb      	ldrb	r3, [r7, #27]
  40a93a:	2b00      	cmp	r3, #0
  40a93c:	bf0c      	ite	eq
  40a93e:	2301      	moveq	r3, #1
  40a940:	2300      	movne	r3, #0
  40a942:	b2db      	uxtb	r3, r3
  40a944:	833b      	strh	r3, [r7, #24]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
  40a946:	69fb      	ldr	r3, [r7, #28]
  40a948:	68db      	ldr	r3, [r3, #12]
  40a94a:	685b      	ldr	r3, [r3, #4]
  40a94c:	8b3a      	ldrh	r2, [r7, #24]
  40a94e:	2100      	movs	r1, #0
  40a950:	6878      	ldr	r0, [r7, #4]
  40a952:	4c2b      	ldr	r4, [pc, #172]	; (40aa00 <tcp_zero_window_probe+0x110>)
  40a954:	47a0      	blx	r4
  40a956:	6178      	str	r0, [r7, #20]
  if(p == NULL) {
  40a958:	697b      	ldr	r3, [r7, #20]
  40a95a:	2b00      	cmp	r3, #0
  40a95c:	d049      	beq.n	40a9f2 <tcp_zero_window_probe+0x102>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
  40a95e:	697b      	ldr	r3, [r7, #20]
  40a960:	685b      	ldr	r3, [r3, #4]
  40a962:	613b      	str	r3, [r7, #16]

  if (is_fin) {
  40a964:	7efb      	ldrb	r3, [r7, #27]
  40a966:	2b00      	cmp	r3, #0
  40a968:	d011      	beq.n	40a98e <tcp_zero_window_probe+0x9e>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
  40a96a:	693b      	ldr	r3, [r7, #16]
  40a96c:	899b      	ldrh	r3, [r3, #12]
  40a96e:	b29b      	uxth	r3, r3
  40a970:	b21b      	sxth	r3, r3
  40a972:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
  40a976:	b21c      	sxth	r4, r3
  40a978:	2011      	movs	r0, #17
  40a97a:	4b22      	ldr	r3, [pc, #136]	; (40aa04 <tcp_zero_window_probe+0x114>)
  40a97c:	4798      	blx	r3
  40a97e:	4603      	mov	r3, r0
  40a980:	b21b      	sxth	r3, r3
  40a982:	4323      	orrs	r3, r4
  40a984:	b21b      	sxth	r3, r3
  40a986:	b29a      	uxth	r2, r3
  40a988:	693b      	ldr	r3, [r7, #16]
  40a98a:	819a      	strh	r2, [r3, #12]
  40a98c:	e010      	b.n	40a9b0 <tcp_zero_window_probe+0xc0>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
  40a98e:	697b      	ldr	r3, [r7, #20]
  40a990:	685b      	ldr	r3, [r3, #4]
  40a992:	3314      	adds	r3, #20
  40a994:	60fb      	str	r3, [r7, #12]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  40a996:	69fb      	ldr	r3, [r7, #28]
  40a998:	6858      	ldr	r0, [r3, #4]
  40a99a:	69fb      	ldr	r3, [r7, #28]
  40a99c:	685b      	ldr	r3, [r3, #4]
  40a99e:	891a      	ldrh	r2, [r3, #8]
  40a9a0:	69fb      	ldr	r3, [r7, #28]
  40a9a2:	891b      	ldrh	r3, [r3, #8]
  40a9a4:	1ad3      	subs	r3, r2, r3
  40a9a6:	b29b      	uxth	r3, r3
  40a9a8:	2201      	movs	r2, #1
  40a9aa:	68f9      	ldr	r1, [r7, #12]
  40a9ac:	4c16      	ldr	r4, [pc, #88]	; (40aa08 <tcp_zero_window_probe+0x118>)
  40a9ae:	47a0      	blx	r4
  }

#if CHECKSUM_GEN_TCP
  tcphdr->chksum = inet_chksum_pseudo(p, &pcb->local_ip, &pcb->remote_ip,
  40a9b0:	6879      	ldr	r1, [r7, #4]
  40a9b2:	687b      	ldr	r3, [r7, #4]
  40a9b4:	1d1a      	adds	r2, r3, #4
  40a9b6:	697b      	ldr	r3, [r7, #20]
  40a9b8:	891b      	ldrh	r3, [r3, #8]
  40a9ba:	9300      	str	r3, [sp, #0]
  40a9bc:	2306      	movs	r3, #6
  40a9be:	6978      	ldr	r0, [r7, #20]
  40a9c0:	4c12      	ldr	r4, [pc, #72]	; (40aa0c <tcp_zero_window_probe+0x11c>)
  40a9c2:	47a0      	blx	r4
  40a9c4:	4603      	mov	r3, r0
  40a9c6:	461a      	mov	r2, r3
  40a9c8:	693b      	ldr	r3, [r7, #16]
  40a9ca:	821a      	strh	r2, [r3, #16]
  /* Send output to IP */
#if LWIP_NETIF_HWADDRHINT
  ip_output_hinted(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP,
    &(pcb->addr_hint));
#else /* LWIP_NETIF_HWADDRHINT*/
  ip_output(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP);
  40a9cc:	6879      	ldr	r1, [r7, #4]
  40a9ce:	687b      	ldr	r3, [r7, #4]
  40a9d0:	1d1a      	adds	r2, r3, #4
  40a9d2:	687b      	ldr	r3, [r7, #4]
  40a9d4:	7a98      	ldrb	r0, [r3, #10]
  40a9d6:	2306      	movs	r3, #6
  40a9d8:	9301      	str	r3, [sp, #4]
  40a9da:	2300      	movs	r3, #0
  40a9dc:	9300      	str	r3, [sp, #0]
  40a9de:	4603      	mov	r3, r0
  40a9e0:	6978      	ldr	r0, [r7, #20]
  40a9e2:	4c0b      	ldr	r4, [pc, #44]	; (40aa10 <tcp_zero_window_probe+0x120>)
  40a9e4:	47a0      	blx	r4
#endif /* LWIP_NETIF_HWADDRHINT*/

  pbuf_free(p);
  40a9e6:	6978      	ldr	r0, [r7, #20]
  40a9e8:	4b0a      	ldr	r3, [pc, #40]	; (40aa14 <tcp_zero_window_probe+0x124>)
  40a9ea:	4798      	blx	r3
  40a9ec:	e002      	b.n	40a9f4 <tcp_zero_window_probe+0x104>

  if(seg == NULL) {
    seg = pcb->unsent;
  }
  if(seg == NULL) {
    return;
  40a9ee:	bf00      	nop
  40a9f0:	e000      	b.n	40a9f4 <tcp_zero_window_probe+0x104>
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
  if(p == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return;
  40a9f2:	bf00      	nop
  pbuf_free(p);

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F".\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt));
}
  40a9f4:	3724      	adds	r7, #36	; 0x24
  40a9f6:	46bd      	mov	sp, r7
  40a9f8:	bd90      	pop	{r4, r7, pc}
  40a9fa:	bf00      	nop
  40a9fc:	00402335 	.word	0x00402335
  40aa00:	00409765 	.word	0x00409765
  40aa04:	00402309 	.word	0x00402309
  40aa08:	004062dd 	.word	0x004062dd
  40aa0c:	0040407d 	.word	0x0040407d
  40aa10:	004046f1 	.word	0x004046f1
  40aa14:	00406069 	.word	0x00406069

0040aa18 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
  40aa18:	b480      	push	{r7}
  40aa1a:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
  40aa1c:	bf00      	nop
  40aa1e:	46bd      	mov	sp, r7
  40aa20:	f85d 7b04 	ldr.w	r7, [sp], #4
  40aa24:	4770      	bx	lr
  40aa26:	bf00      	nop

0040aa28 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
  40aa28:	b480      	push	{r7}
  40aa2a:	b083      	sub	sp, #12
  40aa2c:	af00      	add	r7, sp, #0
  u16_t n = 0;
  40aa2e:	2300      	movs	r3, #0
  40aa30:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;
  
again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
  40aa32:	4b17      	ldr	r3, [pc, #92]	; (40aa90 <udp_new_port+0x68>)
  40aa34:	881b      	ldrh	r3, [r3, #0]
  40aa36:	1c5a      	adds	r2, r3, #1
  40aa38:	b291      	uxth	r1, r2
  40aa3a:	4a15      	ldr	r2, [pc, #84]	; (40aa90 <udp_new_port+0x68>)
  40aa3c:	8011      	strh	r1, [r2, #0]
  40aa3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
  40aa42:	4293      	cmp	r3, r2
  40aa44:	d103      	bne.n	40aa4e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
  40aa46:	4b12      	ldr	r3, [pc, #72]	; (40aa90 <udp_new_port+0x68>)
  40aa48:	f44f 4240 	mov.w	r2, #49152	; 0xc000
  40aa4c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for(pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
  40aa4e:	4b11      	ldr	r3, [pc, #68]	; (40aa94 <udp_new_port+0x6c>)
  40aa50:	681b      	ldr	r3, [r3, #0]
  40aa52:	603b      	str	r3, [r7, #0]
  40aa54:	e011      	b.n	40aa7a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
  40aa56:	683b      	ldr	r3, [r7, #0]
  40aa58:	8a5a      	ldrh	r2, [r3, #18]
  40aa5a:	4b0d      	ldr	r3, [pc, #52]	; (40aa90 <udp_new_port+0x68>)
  40aa5c:	881b      	ldrh	r3, [r3, #0]
  40aa5e:	429a      	cmp	r2, r3
  40aa60:	d108      	bne.n	40aa74 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
  40aa62:	88fb      	ldrh	r3, [r7, #6]
  40aa64:	3301      	adds	r3, #1
  40aa66:	80fb      	strh	r3, [r7, #6]
  40aa68:	88fb      	ldrh	r3, [r7, #6]
  40aa6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
  40aa6e:	d3e0      	bcc.n	40aa32 <udp_new_port+0xa>
        return 0;
  40aa70:	2300      	movs	r3, #0
  40aa72:	e007      	b.n	40aa84 <udp_new_port+0x5c>
again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
    udp_port = UDP_LOCAL_PORT_RANGE_START;
  }
  /* Check all PCBs. */
  for(pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
  40aa74:	683b      	ldr	r3, [r7, #0]
  40aa76:	68db      	ldr	r3, [r3, #12]
  40aa78:	603b      	str	r3, [r7, #0]
  40aa7a:	683b      	ldr	r3, [r7, #0]
  40aa7c:	2b00      	cmp	r3, #0
  40aa7e:	d1ea      	bne.n	40aa56 <udp_new_port+0x2e>
        return 0;
      }
      goto again;
    }
  }
  return udp_port;
  40aa80:	4b03      	ldr	r3, [pc, #12]	; (40aa90 <udp_new_port+0x68>)
  40aa82:	881b      	ldrh	r3, [r3, #0]
  if (ipcb != NULL) {
    return 0;
  }
  return udp_port;
#endif
}
  40aa84:	4618      	mov	r0, r3
  40aa86:	370c      	adds	r7, #12
  40aa88:	46bd      	mov	sp, r7
  40aa8a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40aa8e:	4770      	bx	lr
  40aa90:	20400014 	.word	0x20400014
  40aa94:	2040499c 	.word	0x2040499c

0040aa98 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
  40aa98:	b590      	push	{r4, r7, lr}
  40aa9a:	b08d      	sub	sp, #52	; 0x34
  40aa9c:	af02      	add	r7, sp, #8
  40aa9e:	6078      	str	r0, [r7, #4]
  40aaa0:	6039      	str	r1, [r7, #0]

  PERF_START;

  UDP_STATS_INC(udp.recv);

  iphdr = (struct ip_hdr *)p->payload;
  40aaa2:	687b      	ldr	r3, [r7, #4]
  40aaa4:	685b      	ldr	r3, [r3, #4]
  40aaa6:	617b      	str	r3, [r7, #20]

  /* Check minimum length (IP header + UDP header)
   * and move payload pointer to UDP header */
  if (p->tot_len < (IPH_HL(iphdr) * 4 + UDP_HLEN) || pbuf_header(p, -(s16_t)(IPH_HL(iphdr) * 4))) {
  40aaa8:	687b      	ldr	r3, [r7, #4]
  40aaaa:	891b      	ldrh	r3, [r3, #8]
  40aaac:	461a      	mov	r2, r3
  40aaae:	697b      	ldr	r3, [r7, #20]
  40aab0:	781b      	ldrb	r3, [r3, #0]
  40aab2:	f003 030f 	and.w	r3, r3, #15
  40aab6:	3302      	adds	r3, #2
  40aab8:	009b      	lsls	r3, r3, #2
  40aaba:	429a      	cmp	r2, r3
  40aabc:	db11      	blt.n	40aae2 <udp_input+0x4a>
  40aabe:	697b      	ldr	r3, [r7, #20]
  40aac0:	781b      	ldrb	r3, [r3, #0]
  40aac2:	b29b      	uxth	r3, r3
  40aac4:	f003 030f 	and.w	r3, r3, #15
  40aac8:	b29b      	uxth	r3, r3
  40aaca:	009b      	lsls	r3, r3, #2
  40aacc:	b29b      	uxth	r3, r3
  40aace:	425b      	negs	r3, r3
  40aad0:	b29b      	uxth	r3, r3
  40aad2:	b21b      	sxth	r3, r3
  40aad4:	4619      	mov	r1, r3
  40aad6:	6878      	ldr	r0, [r7, #4]
  40aad8:	4b92      	ldr	r3, [pc, #584]	; (40ad24 <udp_input+0x28c>)
  40aada:	4798      	blx	r3
  40aadc:	4603      	mov	r3, r0
  40aade:	2b00      	cmp	r3, #0
  40aae0:	d003      	beq.n	40aaea <udp_input+0x52>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    snmp_inc_udpinerrors();
    pbuf_free(p);
  40aae2:	6878      	ldr	r0, [r7, #4]
  40aae4:	4b90      	ldr	r3, [pc, #576]	; (40ad28 <udp_input+0x290>)
  40aae6:	4798      	blx	r3
    goto end;
  40aae8:	e131      	b.n	40ad4e <udp_input+0x2b6>
  }

  udphdr = (struct udp_hdr *)p->payload;
  40aaea:	687b      	ldr	r3, [r7, #4]
  40aaec:	685b      	ldr	r3, [r3, #4]
  40aaee:	613b      	str	r3, [r7, #16]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(&current_iphdr_dest, inp);
  40aaf0:	4b8e      	ldr	r3, [pc, #568]	; (40ad2c <udp_input+0x294>)
  40aaf2:	681b      	ldr	r3, [r3, #0]
  40aaf4:	6839      	ldr	r1, [r7, #0]
  40aaf6:	4618      	mov	r0, r3
  40aaf8:	4b8d      	ldr	r3, [pc, #564]	; (40ad30 <udp_input+0x298>)
  40aafa:	4798      	blx	r3
  40aafc:	4603      	mov	r3, r0
  40aafe:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = ntohs(udphdr->src);
  40ab00:	693b      	ldr	r3, [r7, #16]
  40ab02:	881b      	ldrh	r3, [r3, #0]
  40ab04:	b29b      	uxth	r3, r3
  40ab06:	4618      	mov	r0, r3
  40ab08:	4b8a      	ldr	r3, [pc, #552]	; (40ad34 <udp_input+0x29c>)
  40ab0a:	4798      	blx	r3
  40ab0c:	4603      	mov	r3, r0
  40ab0e:	81bb      	strh	r3, [r7, #12]
  dest = ntohs(udphdr->dest);
  40ab10:	693b      	ldr	r3, [r7, #16]
  40ab12:	885b      	ldrh	r3, [r3, #2]
  40ab14:	b29b      	uxth	r3, r3
  40ab16:	4618      	mov	r0, r3
  40ab18:	4b86      	ldr	r3, [pc, #536]	; (40ad34 <udp_input+0x29c>)
  40ab1a:	4798      	blx	r3
  40ab1c:	4603      	mov	r3, r0
  40ab1e:	817b      	strh	r3, [r7, #10]
               ip4_addr3_16(&iphdr->dest), ip4_addr4_16(&iphdr->dest), ntohs(udphdr->dest),
               ip4_addr1_16(&iphdr->src), ip4_addr2_16(&iphdr->src),
               ip4_addr3_16(&iphdr->src), ip4_addr4_16(&iphdr->src), ntohs(udphdr->src)));

#if LWIP_DHCP
  pcb = NULL;
  40ab20:	2300      	movs	r3, #0
  40ab22:	627b      	str	r3, [r7, #36]	; 0x24
  /* when LWIP_DHCP is active, packets to DHCP_CLIENT_PORT may only be processed by
     the dhcp module, no other UDP pcb may use the local UDP port DHCP_CLIENT_PORT */
  if (dest == DHCP_CLIENT_PORT) {
  40ab24:	897b      	ldrh	r3, [r7, #10]
  40ab26:	2b44      	cmp	r3, #68	; 0x44
  40ab28:	d127      	bne.n	40ab7a <udp_input+0xe2>
    /* all packets for DHCP_CLIENT_PORT not coming from DHCP_SERVER_PORT are dropped! */
    if (src == DHCP_SERVER_PORT) {
  40ab2a:	89bb      	ldrh	r3, [r7, #12]
  40ab2c:	2b43      	cmp	r3, #67	; 0x43
  40ab2e:	f040 809a 	bne.w	40ac66 <udp_input+0x1ce>
      if ((inp->dhcp != NULL) && (inp->dhcp->pcb != NULL)) {
  40ab32:	683b      	ldr	r3, [r7, #0]
  40ab34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  40ab36:	2b00      	cmp	r3, #0
  40ab38:	f000 8095 	beq.w	40ac66 <udp_input+0x1ce>
  40ab3c:	683b      	ldr	r3, [r7, #0]
  40ab3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  40ab40:	685b      	ldr	r3, [r3, #4]
  40ab42:	2b00      	cmp	r3, #0
  40ab44:	f000 808f 	beq.w	40ac66 <udp_input+0x1ce>
        /* accept the packe if 
           (- broadcast or directed to us) -> DHCP is link-layer-addressed, local ip is always ANY!
           - inp->dhcp->pcb->remote == ANY or iphdr->src */
        if ((ip_addr_isany(&inp->dhcp->pcb->remote_ip) ||
  40ab48:	683b      	ldr	r3, [r7, #0]
  40ab4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  40ab4c:	685b      	ldr	r3, [r3, #4]
  40ab4e:	3304      	adds	r3, #4
  40ab50:	2b00      	cmp	r3, #0
  40ab52:	d00d      	beq.n	40ab70 <udp_input+0xd8>
  40ab54:	683b      	ldr	r3, [r7, #0]
  40ab56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  40ab58:	685b      	ldr	r3, [r3, #4]
  40ab5a:	685b      	ldr	r3, [r3, #4]
  40ab5c:	2b00      	cmp	r3, #0
  40ab5e:	d007      	beq.n	40ab70 <udp_input+0xd8>
           ip_addr_cmp(&(inp->dhcp->pcb->remote_ip), &current_iphdr_src))) {
  40ab60:	683b      	ldr	r3, [r7, #0]
  40ab62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  40ab64:	685b      	ldr	r3, [r3, #4]
  40ab66:	685a      	ldr	r2, [r3, #4]
  40ab68:	4b73      	ldr	r3, [pc, #460]	; (40ad38 <udp_input+0x2a0>)
  40ab6a:	681b      	ldr	r3, [r3, #0]
    if (src == DHCP_SERVER_PORT) {
      if ((inp->dhcp != NULL) && (inp->dhcp->pcb != NULL)) {
        /* accept the packe if 
           (- broadcast or directed to us) -> DHCP is link-layer-addressed, local ip is always ANY!
           - inp->dhcp->pcb->remote == ANY or iphdr->src */
        if ((ip_addr_isany(&inp->dhcp->pcb->remote_ip) ||
  40ab6c:	429a      	cmp	r2, r3
  40ab6e:	d17a      	bne.n	40ac66 <udp_input+0x1ce>
           ip_addr_cmp(&(inp->dhcp->pcb->remote_ip), &current_iphdr_src))) {
          pcb = inp->dhcp->pcb;
  40ab70:	683b      	ldr	r3, [r7, #0]
  40ab72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  40ab74:	685b      	ldr	r3, [r3, #4]
  40ab76:	627b      	str	r3, [r7, #36]	; 0x24
  40ab78:	e075      	b.n	40ac66 <udp_input+0x1ce>
      }
    }
  } else
#endif /* LWIP_DHCP */
  {
    prev = NULL;
  40ab7a:	2300      	movs	r3, #0
  40ab7c:	623b      	str	r3, [r7, #32]
    local_match = 0;
  40ab7e:	2300      	movs	r3, #0
  40ab80:	76fb      	strb	r3, [r7, #27]
    uncon_pcb = NULL;
  40ab82:	2300      	movs	r3, #0
  40ab84:	61fb      	str	r3, [r7, #28]
    /* Iterate through the UDP pcb list for a matching pcb.
     * 'Perfect match' pcbs (connected to the remote port & ip address) are
     * preferred. If no perfect match is found, the first unconnected pcb that
     * matches the local port and ip address gets the datagram. */
    for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
  40ab86:	4b6d      	ldr	r3, [pc, #436]	; (40ad3c <udp_input+0x2a4>)
  40ab88:	681b      	ldr	r3, [r3, #0]
  40ab8a:	627b      	str	r3, [r7, #36]	; 0x24
  40ab8c:	e061      	b.n	40ac52 <udp_input+0x1ba>
      local_match = 0;
  40ab8e:	2300      	movs	r3, #0
  40ab90:	76fb      	strb	r3, [r7, #27]
                   ip4_addr3_16(&pcb->local_ip), ip4_addr4_16(&pcb->local_ip), pcb->local_port,
                   ip4_addr1_16(&pcb->remote_ip), ip4_addr2_16(&pcb->remote_ip),
                   ip4_addr3_16(&pcb->remote_ip), ip4_addr4_16(&pcb->remote_ip), pcb->remote_port));

      /* compare PCB local addr+port to UDP destination addr+port */
      if (pcb->local_port == dest) {
  40ab92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40ab94:	8a5b      	ldrh	r3, [r3, #18]
  40ab96:	897a      	ldrh	r2, [r7, #10]
  40ab98:	429a      	cmp	r2, r3
  40ab9a:	d130      	bne.n	40abfe <udp_input+0x166>
        if (
  40ab9c:	7bfb      	ldrb	r3, [r7, #15]
  40ab9e:	2b00      	cmp	r3, #0
  40aba0:	d106      	bne.n	40abb0 <udp_input+0x118>
           (!broadcast && ip_addr_isany(&pcb->local_ip)) ||
  40aba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40aba4:	2b00      	cmp	r3, #0
  40aba6:	d01d      	beq.n	40abe4 <udp_input+0x14c>
  40aba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40abaa:	681b      	ldr	r3, [r3, #0]
  40abac:	2b00      	cmp	r3, #0
  40abae:	d019      	beq.n	40abe4 <udp_input+0x14c>
           ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest) ||
  40abb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40abb2:	681a      	ldr	r2, [r3, #0]
  40abb4:	4b5d      	ldr	r3, [pc, #372]	; (40ad2c <udp_input+0x294>)
  40abb6:	681b      	ldr	r3, [r3, #0]
                   ip4_addr3_16(&pcb->remote_ip), ip4_addr4_16(&pcb->remote_ip), pcb->remote_port));

      /* compare PCB local addr+port to UDP destination addr+port */
      if (pcb->local_port == dest) {
        if (
           (!broadcast && ip_addr_isany(&pcb->local_ip)) ||
  40abb8:	429a      	cmp	r2, r3
  40abba:	d013      	beq.n	40abe4 <udp_input+0x14c>
           ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest) ||
  40abbc:	7bfb      	ldrb	r3, [r7, #15]
  40abbe:	2b00      	cmp	r3, #0
  40abc0:	d01d      	beq.n	40abfe <udp_input+0x166>
            (broadcast && ip_get_option(pcb, SOF_BROADCAST) &&
             (ip_addr_isany(&pcb->local_ip) ||
              ip_addr_netcmp(&pcb->local_ip, ip_current_dest_addr(), &inp->netmask)))) {
#else /* IP_SOF_BROADCAST_RECV */
            (broadcast &&
             (ip_addr_isany(&pcb->local_ip) ||
  40abc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
#if IP_SOF_BROADCAST_RECV
            (broadcast && ip_get_option(pcb, SOF_BROADCAST) &&
             (ip_addr_isany(&pcb->local_ip) ||
              ip_addr_netcmp(&pcb->local_ip, ip_current_dest_addr(), &inp->netmask)))) {
#else /* IP_SOF_BROADCAST_RECV */
            (broadcast &&
  40abc4:	2b00      	cmp	r3, #0
  40abc6:	d00d      	beq.n	40abe4 <udp_input+0x14c>
             (ip_addr_isany(&pcb->local_ip) ||
  40abc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40abca:	681b      	ldr	r3, [r3, #0]
  40abcc:	2b00      	cmp	r3, #0
  40abce:	d009      	beq.n	40abe4 <udp_input+0x14c>
              ip_addr_netcmp(&pcb->local_ip, ip_current_dest_addr(), &inp->netmask)))) {
  40abd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40abd2:	681a      	ldr	r2, [r3, #0]
  40abd4:	4b55      	ldr	r3, [pc, #340]	; (40ad2c <udp_input+0x294>)
  40abd6:	681b      	ldr	r3, [r3, #0]
  40abd8:	405a      	eors	r2, r3
  40abda:	683b      	ldr	r3, [r7, #0]
  40abdc:	689b      	ldr	r3, [r3, #8]
  40abde:	4013      	ands	r3, r2
            (broadcast && ip_get_option(pcb, SOF_BROADCAST) &&
             (ip_addr_isany(&pcb->local_ip) ||
              ip_addr_netcmp(&pcb->local_ip, ip_current_dest_addr(), &inp->netmask)))) {
#else /* IP_SOF_BROADCAST_RECV */
            (broadcast &&
             (ip_addr_isany(&pcb->local_ip) ||
  40abe0:	2b00      	cmp	r3, #0
  40abe2:	d10c      	bne.n	40abfe <udp_input+0x166>
              ip_addr_netcmp(&pcb->local_ip, ip_current_dest_addr(), &inp->netmask)))) {
#endif /* IP_SOF_BROADCAST_RECV */ 
          local_match = 1;
  40abe4:	2301      	movs	r3, #1
  40abe6:	76fb      	strb	r3, [r7, #27]
          if ((uncon_pcb == NULL) && 
  40abe8:	69fb      	ldr	r3, [r7, #28]
  40abea:	2b00      	cmp	r3, #0
  40abec:	d107      	bne.n	40abfe <udp_input+0x166>
              ((pcb->flags & UDP_FLAGS_CONNECTED) == 0)) {
  40abee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40abf0:	7c1b      	ldrb	r3, [r3, #16]
  40abf2:	f003 0304 	and.w	r3, r3, #4
            (broadcast &&
             (ip_addr_isany(&pcb->local_ip) ||
              ip_addr_netcmp(&pcb->local_ip, ip_current_dest_addr(), &inp->netmask)))) {
#endif /* IP_SOF_BROADCAST_RECV */ 
          local_match = 1;
          if ((uncon_pcb == NULL) && 
  40abf6:	2b00      	cmp	r3, #0
  40abf8:	d101      	bne.n	40abfe <udp_input+0x166>
              ((pcb->flags & UDP_FLAGS_CONNECTED) == 0)) {
            /* the first unconnected matching PCB */
            uncon_pcb = pcb;
  40abfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40abfc:	61fb      	str	r3, [r7, #28]
          }
        }
      }
      /* compare PCB remote addr+port to UDP source addr+port */
      if ((local_match != 0) &&
  40abfe:	7efb      	ldrb	r3, [r7, #27]
  40ac00:	2b00      	cmp	r3, #0
  40ac02:	d021      	beq.n	40ac48 <udp_input+0x1b0>
          (pcb->remote_port == src) &&
  40ac04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40ac06:	8a9b      	ldrh	r3, [r3, #20]
            uncon_pcb = pcb;
          }
        }
      }
      /* compare PCB remote addr+port to UDP source addr+port */
      if ((local_match != 0) &&
  40ac08:	89ba      	ldrh	r2, [r7, #12]
  40ac0a:	429a      	cmp	r2, r3
  40ac0c:	d11c      	bne.n	40ac48 <udp_input+0x1b0>
          (pcb->remote_port == src) &&
          (ip_addr_isany(&pcb->remote_ip) ||
  40ac0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40ac10:	3304      	adds	r3, #4
          }
        }
      }
      /* compare PCB remote addr+port to UDP source addr+port */
      if ((local_match != 0) &&
          (pcb->remote_port == src) &&
  40ac12:	2b00      	cmp	r3, #0
  40ac14:	d009      	beq.n	40ac2a <udp_input+0x192>
          (ip_addr_isany(&pcb->remote_ip) ||
  40ac16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40ac18:	685b      	ldr	r3, [r3, #4]
  40ac1a:	2b00      	cmp	r3, #0
  40ac1c:	d005      	beq.n	40ac2a <udp_input+0x192>
           ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src))) {
  40ac1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40ac20:	685a      	ldr	r2, [r3, #4]
  40ac22:	4b45      	ldr	r3, [pc, #276]	; (40ad38 <udp_input+0x2a0>)
  40ac24:	681b      	ldr	r3, [r3, #0]
        }
      }
      /* compare PCB remote addr+port to UDP source addr+port */
      if ((local_match != 0) &&
          (pcb->remote_port == src) &&
          (ip_addr_isany(&pcb->remote_ip) ||
  40ac26:	429a      	cmp	r2, r3
  40ac28:	d10e      	bne.n	40ac48 <udp_input+0x1b0>
           ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src))) {
        /* the first fully matching PCB */
        if (prev != NULL) {
  40ac2a:	6a3b      	ldr	r3, [r7, #32]
  40ac2c:	2b00      	cmp	r3, #0
  40ac2e:	d014      	beq.n	40ac5a <udp_input+0x1c2>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
  40ac30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40ac32:	68da      	ldr	r2, [r3, #12]
  40ac34:	6a3b      	ldr	r3, [r7, #32]
  40ac36:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
  40ac38:	4b40      	ldr	r3, [pc, #256]	; (40ad3c <udp_input+0x2a4>)
  40ac3a:	681a      	ldr	r2, [r3, #0]
  40ac3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40ac3e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
  40ac40:	4a3e      	ldr	r2, [pc, #248]	; (40ad3c <udp_input+0x2a4>)
  40ac42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40ac44:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
  40ac46:	e008      	b.n	40ac5a <udp_input+0x1c2>
      }
      prev = pcb;
  40ac48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40ac4a:	623b      	str	r3, [r7, #32]
    uncon_pcb = NULL;
    /* Iterate through the UDP pcb list for a matching pcb.
     * 'Perfect match' pcbs (connected to the remote port & ip address) are
     * preferred. If no perfect match is found, the first unconnected pcb that
     * matches the local port and ip address gets the datagram. */
    for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
  40ac4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40ac4e:	68db      	ldr	r3, [r3, #12]
  40ac50:	627b      	str	r3, [r7, #36]	; 0x24
  40ac52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40ac54:	2b00      	cmp	r3, #0
  40ac56:	d19a      	bne.n	40ab8e <udp_input+0xf6>
  40ac58:	e000      	b.n	40ac5c <udp_input+0x1c4>
          pcb->next = udp_pcbs;
          udp_pcbs = pcb;
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
  40ac5a:	bf00      	nop
      }
      prev = pcb;
    }
    /* no fully matching pcb found? then look for an unconnected pcb */
    if (pcb == NULL) {
  40ac5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40ac5e:	2b00      	cmp	r3, #0
  40ac60:	d101      	bne.n	40ac66 <udp_input+0x1ce>
      pcb = uncon_pcb;
  40ac62:	69fb      	ldr	r3, [r7, #28]
  40ac64:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL || ip_addr_cmp(&inp->ip_addr, &current_iphdr_dest)) {
  40ac66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40ac68:	2b00      	cmp	r3, #0
  40ac6a:	d105      	bne.n	40ac78 <udp_input+0x1e0>
  40ac6c:	683b      	ldr	r3, [r7, #0]
  40ac6e:	685a      	ldr	r2, [r3, #4]
  40ac70:	4b2e      	ldr	r3, [pc, #184]	; (40ad2c <udp_input+0x294>)
  40ac72:	681b      	ldr	r3, [r3, #0]
  40ac74:	429a      	cmp	r2, r3
  40ac76:	d167      	bne.n	40ad48 <udp_input+0x2b0>
#endif /* CHECKSUM_CHECK_UDP */
    } else
#endif /* LWIP_UDPLITE */
    {
#if CHECKSUM_CHECK_UDP
      if (udphdr->chksum != 0) {
  40ac78:	693b      	ldr	r3, [r7, #16]
  40ac7a:	88db      	ldrh	r3, [r3, #6]
  40ac7c:	b29b      	uxth	r3, r3
  40ac7e:	2b00      	cmp	r3, #0
  40ac80:	d00f      	beq.n	40aca2 <udp_input+0x20a>
        if (inet_chksum_pseudo(p, ip_current_src_addr(), ip_current_dest_addr(),
  40ac82:	687b      	ldr	r3, [r7, #4]
  40ac84:	891b      	ldrh	r3, [r3, #8]
  40ac86:	9300      	str	r3, [sp, #0]
  40ac88:	2311      	movs	r3, #17
  40ac8a:	4a28      	ldr	r2, [pc, #160]	; (40ad2c <udp_input+0x294>)
  40ac8c:	492a      	ldr	r1, [pc, #168]	; (40ad38 <udp_input+0x2a0>)
  40ac8e:	6878      	ldr	r0, [r7, #4]
  40ac90:	4c2b      	ldr	r4, [pc, #172]	; (40ad40 <udp_input+0x2a8>)
  40ac92:	47a0      	blx	r4
  40ac94:	4603      	mov	r3, r0
  40ac96:	2b00      	cmp	r3, #0
  40ac98:	d003      	beq.n	40aca2 <udp_input+0x20a>
          LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                      ("udp_input: UDP datagram discarded due to failing checksum\n"));
          UDP_STATS_INC(udp.chkerr);
          UDP_STATS_INC(udp.drop);
          snmp_inc_udpinerrors();
          pbuf_free(p);
  40ac9a:	6878      	ldr	r0, [r7, #4]
  40ac9c:	4b22      	ldr	r3, [pc, #136]	; (40ad28 <udp_input+0x290>)
  40ac9e:	4798      	blx	r3
          goto end;
  40aca0:	e055      	b.n	40ad4e <udp_input+0x2b6>
        }
      }
#endif /* CHECKSUM_CHECK_UDP */
    }
    if(pbuf_header(p, -UDP_HLEN)) {
  40aca2:	f06f 0107 	mvn.w	r1, #7
  40aca6:	6878      	ldr	r0, [r7, #4]
  40aca8:	4b1e      	ldr	r3, [pc, #120]	; (40ad24 <udp_input+0x28c>)
  40acaa:	4798      	blx	r3
  40acac:	4603      	mov	r3, r0
  40acae:	2b00      	cmp	r3, #0
  40acb0:	d003      	beq.n	40acba <udp_input+0x222>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
      UDP_STATS_INC(udp.drop);
      snmp_inc_udpinerrors();
      pbuf_free(p);
  40acb2:	6878      	ldr	r0, [r7, #4]
  40acb4:	4b1c      	ldr	r3, [pc, #112]	; (40ad28 <udp_input+0x290>)
  40acb6:	4798      	blx	r3
      goto end;
  40acb8:	e049      	b.n	40ad4e <udp_input+0x2b6>
    }
    if (pcb != NULL) {
  40acba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40acbc:	2b00      	cmp	r3, #0
  40acbe:	d012      	beq.n	40ace6 <udp_input+0x24e>
          pbuf_header(p, -(s16_t)((IPH_HL(iphdr) * 4) + UDP_HLEN));
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
  40acc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40acc2:	699b      	ldr	r3, [r3, #24]
  40acc4:	2b00      	cmp	r3, #0
  40acc6:	d00a      	beq.n	40acde <udp_input+0x246>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
  40acc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40acca:	699c      	ldr	r4, [r3, #24]
  40accc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40acce:	69d8      	ldr	r0, [r3, #28]
  40acd0:	89bb      	ldrh	r3, [r7, #12]
  40acd2:	9300      	str	r3, [sp, #0]
  40acd4:	4b18      	ldr	r3, [pc, #96]	; (40ad38 <udp_input+0x2a0>)
  40acd6:	687a      	ldr	r2, [r7, #4]
  40acd8:	6a79      	ldr	r1, [r7, #36]	; 0x24
  40acda:	47a0      	blx	r4
      UDP_STATS_INC(udp.drop);
      snmp_inc_udpinerrors();
      pbuf_free(p);
      goto end;
    }
    if (pcb != NULL) {
  40acdc:	e037      	b.n	40ad4e <udp_input+0x2b6>
      if (pcb->recv != NULL) {
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
      } else {
        /* no recv function registered? then we have to free the pbuf! */
        pbuf_free(p);
  40acde:	6878      	ldr	r0, [r7, #4]
  40ace0:	4b11      	ldr	r3, [pc, #68]	; (40ad28 <udp_input+0x290>)
  40ace2:	4798      	blx	r3
        goto end;
  40ace4:	e033      	b.n	40ad4e <udp_input+0x2b6>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: not for us.\n"));

#if LWIP_ICMP
      /* No match was found, send ICMP destination port unreachable unless
         destination address was broadcast/multicast. */
      if (!broadcast &&
  40ace6:	7bfb      	ldrb	r3, [r7, #15]
  40ace8:	2b00      	cmp	r3, #0
  40acea:	d116      	bne.n	40ad1a <udp_input+0x282>
          !ip_addr_ismulticast(&current_iphdr_dest)) {
  40acec:	4b0f      	ldr	r3, [pc, #60]	; (40ad2c <udp_input+0x294>)
  40acee:	681b      	ldr	r3, [r3, #0]
  40acf0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: not for us.\n"));

#if LWIP_ICMP
      /* No match was found, send ICMP destination port unreachable unless
         destination address was broadcast/multicast. */
      if (!broadcast &&
  40acf4:	2be0      	cmp	r3, #224	; 0xe0
  40acf6:	d010      	beq.n	40ad1a <udp_input+0x282>
          !ip_addr_ismulticast(&current_iphdr_dest)) {
        /* move payload pointer back to ip header */
        pbuf_header(p, (IPH_HL(iphdr) * 4) + UDP_HLEN);
  40acf8:	697b      	ldr	r3, [r7, #20]
  40acfa:	781b      	ldrb	r3, [r3, #0]
  40acfc:	f003 030f 	and.w	r3, r3, #15
  40ad00:	3302      	adds	r3, #2
  40ad02:	b29b      	uxth	r3, r3
  40ad04:	009b      	lsls	r3, r3, #2
  40ad06:	b29b      	uxth	r3, r3
  40ad08:	b21b      	sxth	r3, r3
  40ad0a:	4619      	mov	r1, r3
  40ad0c:	6878      	ldr	r0, [r7, #4]
  40ad0e:	4b05      	ldr	r3, [pc, #20]	; (40ad24 <udp_input+0x28c>)
  40ad10:	4798      	blx	r3
        LWIP_ASSERT("p->payload == iphdr", (p->payload == iphdr));
        icmp_dest_unreach(p, ICMP_DUR_PORT);
  40ad12:	2103      	movs	r1, #3
  40ad14:	6878      	ldr	r0, [r7, #4]
  40ad16:	4b0b      	ldr	r3, [pc, #44]	; (40ad44 <udp_input+0x2ac>)
  40ad18:	4798      	blx	r3
      }
#endif /* LWIP_ICMP */
      UDP_STATS_INC(udp.proterr);
      UDP_STATS_INC(udp.drop);
      snmp_inc_udpnoports();
      pbuf_free(p);
  40ad1a:	6878      	ldr	r0, [r7, #4]
  40ad1c:	4b02      	ldr	r3, [pc, #8]	; (40ad28 <udp_input+0x290>)
  40ad1e:	4798      	blx	r3
      UDP_STATS_INC(udp.drop);
      snmp_inc_udpinerrors();
      pbuf_free(p);
      goto end;
    }
    if (pcb != NULL) {
  40ad20:	e015      	b.n	40ad4e <udp_input+0x2b6>
  40ad22:	bf00      	nop
  40ad24:	00405f8d 	.word	0x00405f8d
  40ad28:	00406069 	.word	0x00406069
  40ad2c:	20403954 	.word	0x20403954
  40ad30:	00404745 	.word	0x00404745
  40ad34:	00402335 	.word	0x00402335
  40ad38:	2040394c 	.word	0x2040394c
  40ad3c:	2040499c 	.word	0x2040499c
  40ad40:	0040407d 	.word	0x0040407d
  40ad44:	00403eb9 	.word	0x00403eb9
      UDP_STATS_INC(udp.drop);
      snmp_inc_udpnoports();
      pbuf_free(p);
    }
  } else {
    pbuf_free(p);
  40ad48:	6878      	ldr	r0, [r7, #4]
  40ad4a:	4b03      	ldr	r3, [pc, #12]	; (40ad58 <udp_input+0x2c0>)
  40ad4c:	4798      	blx	r3
  }
end:
  PERF_STOP("udp_input");
}
  40ad4e:	bf00      	nop
  40ad50:	372c      	adds	r7, #44	; 0x2c
  40ad52:	46bd      	mov	sp, r7
  40ad54:	bd90      	pop	{r4, r7, pc}
  40ad56:	bf00      	nop
  40ad58:	00406069 	.word	0x00406069

0040ad5c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
  ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
  40ad5c:	b590      	push	{r4, r7, lr}
  40ad5e:	b08d      	sub	sp, #52	; 0x34
  40ad60:	af04      	add	r7, sp, #16
  40ad62:	60f8      	str	r0, [r7, #12]
  40ad64:	60b9      	str	r1, [r7, #8]
  40ad66:	607a      	str	r2, [r7, #4]
  40ad68:	807b      	strh	r3, [r7, #2]
    return ERR_VAL;
  }
#endif /* IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
  40ad6a:	68fb      	ldr	r3, [r7, #12]
  40ad6c:	8a5b      	ldrh	r3, [r3, #18]
  40ad6e:	2b00      	cmp	r3, #0
  40ad70:	d10f      	bne.n	40ad92 <udp_sendto_if+0x36>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
  40ad72:	68f9      	ldr	r1, [r7, #12]
  40ad74:	68fb      	ldr	r3, [r7, #12]
  40ad76:	8a5b      	ldrh	r3, [r3, #18]
  40ad78:	461a      	mov	r2, r3
  40ad7a:	68f8      	ldr	r0, [r7, #12]
  40ad7c:	4b51      	ldr	r3, [pc, #324]	; (40aec4 <udp_sendto_if+0x168>)
  40ad7e:	4798      	blx	r3
  40ad80:	4603      	mov	r3, r0
  40ad82:	757b      	strb	r3, [r7, #21]
    if (err != ERR_OK) {
  40ad84:	f997 3015 	ldrsb.w	r3, [r7, #21]
  40ad88:	2b00      	cmp	r3, #0
  40ad8a:	d002      	beq.n	40ad92 <udp_sendto_if+0x36>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
  40ad8c:	f997 3015 	ldrsb.w	r3, [r7, #21]
  40ad90:	e094      	b.n	40aebc <udp_sendto_if+0x160>
    }
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
  40ad92:	2108      	movs	r1, #8
  40ad94:	68b8      	ldr	r0, [r7, #8]
  40ad96:	4b4c      	ldr	r3, [pc, #304]	; (40aec8 <udp_sendto_if+0x16c>)
  40ad98:	4798      	blx	r3
  40ad9a:	4603      	mov	r3, r0
  40ad9c:	2b00      	cmp	r3, #0
  40ad9e:	d014      	beq.n	40adca <udp_sendto_if+0x6e>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
  40ada0:	2200      	movs	r2, #0
  40ada2:	2108      	movs	r1, #8
  40ada4:	2001      	movs	r0, #1
  40ada6:	4b49      	ldr	r3, [pc, #292]	; (40aecc <udp_sendto_if+0x170>)
  40ada8:	4798      	blx	r3
  40adaa:	61b8      	str	r0, [r7, #24]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
  40adac:	69bb      	ldr	r3, [r7, #24]
  40adae:	2b00      	cmp	r3, #0
  40adb0:	d102      	bne.n	40adb8 <udp_sendto_if+0x5c>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
  40adb2:	f04f 33ff 	mov.w	r3, #4294967295
  40adb6:	e081      	b.n	40aebc <udp_sendto_if+0x160>
    }
    if (p->tot_len != 0) {
  40adb8:	68bb      	ldr	r3, [r7, #8]
  40adba:	891b      	ldrh	r3, [r3, #8]
  40adbc:	2b00      	cmp	r3, #0
  40adbe:	d006      	beq.n	40adce <udp_sendto_if+0x72>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
  40adc0:	68b9      	ldr	r1, [r7, #8]
  40adc2:	69b8      	ldr	r0, [r7, #24]
  40adc4:	4b42      	ldr	r3, [pc, #264]	; (40aed0 <udp_sendto_if+0x174>)
  40adc6:	4798      	blx	r3
  40adc8:	e001      	b.n	40adce <udp_sendto_if+0x72>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
  40adca:	68bb      	ldr	r3, [r7, #8]
  40adcc:	61bb      	str	r3, [r7, #24]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
  40adce:	69bb      	ldr	r3, [r7, #24]
  40add0:	685b      	ldr	r3, [r3, #4]
  40add2:	613b      	str	r3, [r7, #16]
  udphdr->src = htons(pcb->local_port);
  40add4:	68fb      	ldr	r3, [r7, #12]
  40add6:	8a5b      	ldrh	r3, [r3, #18]
  40add8:	4618      	mov	r0, r3
  40adda:	4b3e      	ldr	r3, [pc, #248]	; (40aed4 <udp_sendto_if+0x178>)
  40addc:	4798      	blx	r3
  40adde:	4603      	mov	r3, r0
  40ade0:	461a      	mov	r2, r3
  40ade2:	693b      	ldr	r3, [r7, #16]
  40ade4:	801a      	strh	r2, [r3, #0]
  udphdr->dest = htons(dst_port);
  40ade6:	887b      	ldrh	r3, [r7, #2]
  40ade8:	4618      	mov	r0, r3
  40adea:	4b3a      	ldr	r3, [pc, #232]	; (40aed4 <udp_sendto_if+0x178>)
  40adec:	4798      	blx	r3
  40adee:	4603      	mov	r3, r0
  40adf0:	461a      	mov	r2, r3
  40adf2:	693b      	ldr	r3, [r7, #16]
  40adf4:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000; 
  40adf6:	693b      	ldr	r3, [r7, #16]
  40adf8:	2200      	movs	r2, #0
  40adfa:	719a      	strb	r2, [r3, #6]
  40adfc:	2200      	movs	r2, #0
  40adfe:	71da      	strb	r2, [r3, #7]
  }
#endif /* LWIP_IGMP */


  /* PCB local address is IP_ANY_ADDR? */
  if (ip_addr_isany(&pcb->local_ip)) {
  40ae00:	68fb      	ldr	r3, [r7, #12]
  40ae02:	2b00      	cmp	r3, #0
  40ae04:	d003      	beq.n	40ae0e <udp_sendto_if+0xb2>
  40ae06:	68fb      	ldr	r3, [r7, #12]
  40ae08:	681b      	ldr	r3, [r3, #0]
  40ae0a:	2b00      	cmp	r3, #0
  40ae0c:	d103      	bne.n	40ae16 <udp_sendto_if+0xba>
    /* use outgoing network interface IP address as source address */
    src_ip = &(netif->ip_addr);
  40ae0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  40ae10:	3304      	adds	r3, #4
  40ae12:	61fb      	str	r3, [r7, #28]
  40ae14:	e013      	b.n	40ae3e <udp_sendto_if+0xe2>
  } else {
    /* check if UDP PCB local IP address is correct
     * this could be an old address if netif->ip_addr has changed */
    if (!ip_addr_cmp(&(pcb->local_ip), &(netif->ip_addr))) {
  40ae16:	68fb      	ldr	r3, [r7, #12]
  40ae18:	681a      	ldr	r2, [r3, #0]
  40ae1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  40ae1c:	685b      	ldr	r3, [r3, #4]
  40ae1e:	429a      	cmp	r2, r3
  40ae20:	d00b      	beq.n	40ae3a <udp_sendto_if+0xde>
      /* local_ip doesn't match, drop the packet */
      if (q != p) {
  40ae22:	69ba      	ldr	r2, [r7, #24]
  40ae24:	68bb      	ldr	r3, [r7, #8]
  40ae26:	429a      	cmp	r2, r3
  40ae28:	d004      	beq.n	40ae34 <udp_sendto_if+0xd8>
        /* free the header pbuf */
        pbuf_free(q);
  40ae2a:	69b8      	ldr	r0, [r7, #24]
  40ae2c:	4b2a      	ldr	r3, [pc, #168]	; (40aed8 <udp_sendto_if+0x17c>)
  40ae2e:	4798      	blx	r3
        q = NULL;
  40ae30:	2300      	movs	r3, #0
  40ae32:	61bb      	str	r3, [r7, #24]
        /* p is still referenced by the caller, and will live on */
      }
      return ERR_VAL;
  40ae34:	f06f 0305 	mvn.w	r3, #5
  40ae38:	e040      	b.n	40aebc <udp_sendto_if+0x160>
    }
    /* use UDP PCB local IP address as source address */
    src_ip = &(pcb->local_ip);
  40ae3a:	68fb      	ldr	r3, [r7, #12]
  40ae3c:	61fb      	str	r3, [r7, #28]
    NETIF_SET_HWADDRHINT(netif, NULL);
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = htons(q->tot_len);
  40ae3e:	69bb      	ldr	r3, [r7, #24]
  40ae40:	891b      	ldrh	r3, [r3, #8]
  40ae42:	4618      	mov	r0, r3
  40ae44:	4b23      	ldr	r3, [pc, #140]	; (40aed4 <udp_sendto_if+0x178>)
  40ae46:	4798      	blx	r3
  40ae48:	4603      	mov	r3, r0
  40ae4a:	461a      	mov	r2, r3
  40ae4c:	693b      	ldr	r3, [r7, #16]
  40ae4e:	809a      	strh	r2, [r3, #4]
    /* calculate checksum */
#if CHECKSUM_GEN_UDP
    if ((pcb->flags & UDP_FLAGS_NOCHKSUM) == 0) {
  40ae50:	68fb      	ldr	r3, [r7, #12]
  40ae52:	7c1b      	ldrb	r3, [r3, #16]
  40ae54:	f003 0301 	and.w	r3, r3, #1
  40ae58:	2b00      	cmp	r3, #0
  40ae5a:	d113      	bne.n	40ae84 <udp_sendto_if+0x128>
        acc = udpchksum + (u16_t)~(chksum);
        udpchksum = FOLD_U32T(acc);
      } else
#endif /* LWIP_CHECKSUM_ON_COPY */
      {
        udpchksum = inet_chksum_pseudo(q, src_ip, dst_ip, IP_PROTO_UDP, q->tot_len);
  40ae5c:	69bb      	ldr	r3, [r7, #24]
  40ae5e:	891b      	ldrh	r3, [r3, #8]
  40ae60:	9300      	str	r3, [sp, #0]
  40ae62:	2311      	movs	r3, #17
  40ae64:	687a      	ldr	r2, [r7, #4]
  40ae66:	69f9      	ldr	r1, [r7, #28]
  40ae68:	69b8      	ldr	r0, [r7, #24]
  40ae6a:	4c1c      	ldr	r4, [pc, #112]	; (40aedc <udp_sendto_if+0x180>)
  40ae6c:	47a0      	blx	r4
  40ae6e:	4603      	mov	r3, r0
  40ae70:	82fb      	strh	r3, [r7, #22]
      }

      /* chksum zero must become 0xffff, as zero means 'no checksum' */
      if (udpchksum == 0x0000) {
  40ae72:	8afb      	ldrh	r3, [r7, #22]
  40ae74:	2b00      	cmp	r3, #0
  40ae76:	d102      	bne.n	40ae7e <udp_sendto_if+0x122>
        udpchksum = 0xffff;
  40ae78:	f64f 73ff 	movw	r3, #65535	; 0xffff
  40ae7c:	82fb      	strh	r3, [r7, #22]
      }
      udphdr->chksum = udpchksum;
  40ae7e:	693b      	ldr	r3, [r7, #16]
  40ae80:	8afa      	ldrh	r2, [r7, #22]
  40ae82:	80da      	strh	r2, [r3, #6]
#endif /* CHECKSUM_GEN_UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,IP_PROTO_UDP,)\n"));
    /* output to IP */
    NETIF_SET_HWADDRHINT(netif, &pcb->addr_hint);
    err = ip_output_if(q, src_ip, dst_ip, pcb->ttl, pcb->tos, IP_PROTO_UDP, netif);
  40ae84:	68fb      	ldr	r3, [r7, #12]
  40ae86:	7a99      	ldrb	r1, [r3, #10]
  40ae88:	68fb      	ldr	r3, [r7, #12]
  40ae8a:	7a5b      	ldrb	r3, [r3, #9]
  40ae8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
  40ae8e:	9202      	str	r2, [sp, #8]
  40ae90:	2211      	movs	r2, #17
  40ae92:	9201      	str	r2, [sp, #4]
  40ae94:	9300      	str	r3, [sp, #0]
  40ae96:	460b      	mov	r3, r1
  40ae98:	687a      	ldr	r2, [r7, #4]
  40ae9a:	69f9      	ldr	r1, [r7, #28]
  40ae9c:	69b8      	ldr	r0, [r7, #24]
  40ae9e:	4c10      	ldr	r4, [pc, #64]	; (40aee0 <udp_sendto_if+0x184>)
  40aea0:	47a0      	blx	r4
  40aea2:	4603      	mov	r3, r0
  40aea4:	757b      	strb	r3, [r7, #21]
  }
  /* TODO: must this be increased even if error occured? */
  snmp_inc_udpoutdatagrams();

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
  40aea6:	69ba      	ldr	r2, [r7, #24]
  40aea8:	68bb      	ldr	r3, [r7, #8]
  40aeaa:	429a      	cmp	r2, r3
  40aeac:	d004      	beq.n	40aeb8 <udp_sendto_if+0x15c>
    /* free the header pbuf */
    pbuf_free(q);
  40aeae:	69b8      	ldr	r0, [r7, #24]
  40aeb0:	4b09      	ldr	r3, [pc, #36]	; (40aed8 <udp_sendto_if+0x17c>)
  40aeb2:	4798      	blx	r3
    q = NULL;
  40aeb4:	2300      	movs	r3, #0
  40aeb6:	61bb      	str	r3, [r7, #24]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
  40aeb8:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
  40aebc:	4618      	mov	r0, r3
  40aebe:	3724      	adds	r7, #36	; 0x24
  40aec0:	46bd      	mov	sp, r7
  40aec2:	bd90      	pop	{r4, r7, pc}
  40aec4:	0040aee5 	.word	0x0040aee5
  40aec8:	00405f8d 	.word	0x00405f8d
  40aecc:	00405cc5 	.word	0x00405cc5
  40aed0:	004061b1 	.word	0x004061b1
  40aed4:	00402309 	.word	0x00402309
  40aed8:	00406069 	.word	0x00406069
  40aedc:	0040407d 	.word	0x0040407d
  40aee0:	0040453d 	.word	0x0040453d

0040aee4 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, ip_addr_t *ipaddr, u16_t port)
{
  40aee4:	b580      	push	{r7, lr}
  40aee6:	b086      	sub	sp, #24
  40aee8:	af00      	add	r7, sp, #0
  40aeea:	60f8      	str	r0, [r7, #12]
  40aeec:	60b9      	str	r1, [r7, #8]
  40aeee:	4613      	mov	r3, r2
  40aef0:	80fb      	strh	r3, [r7, #6]

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  40aef2:	2300      	movs	r3, #0
  40aef4:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
  40aef6:	4b2a      	ldr	r3, [pc, #168]	; (40afa0 <udp_bind+0xbc>)
  40aef8:	681b      	ldr	r3, [r3, #0]
  40aefa:	617b      	str	r3, [r7, #20]
  40aefc:	e025      	b.n	40af4a <udp_bind+0x66>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
  40aefe:	68fa      	ldr	r2, [r7, #12]
  40af00:	697b      	ldr	r3, [r7, #20]
  40af02:	429a      	cmp	r2, r3
  40af04:	d102      	bne.n	40af0c <udp_bind+0x28>
      /* pcb may occur at most once in active list */
      LWIP_ASSERT("rebind == 0", rebind == 0);
      /* pcb already in list, just rebind */
      rebind = 1;
  40af06:	2301      	movs	r3, #1
  40af08:	74fb      	strb	r3, [r7, #19]
  40af0a:	e01b      	b.n	40af44 <udp_bind+0x60>
             !ip_get_option(ipcb, SOF_REUSEADDR)) {
#else /* SO_REUSE */
    /* port matches that of PCB in list and REUSEADDR not set -> reject */
    else {
#endif /* SO_REUSE */
      if ((ipcb->local_port == port) &&
  40af0c:	697b      	ldr	r3, [r7, #20]
  40af0e:	8a5b      	ldrh	r3, [r3, #18]
  40af10:	88fa      	ldrh	r2, [r7, #6]
  40af12:	429a      	cmp	r2, r3
  40af14:	d116      	bne.n	40af44 <udp_bind+0x60>
          /* IP address matches, or one is IP_ADDR_ANY? */
          (ip_addr_isany(&(ipcb->local_ip)) ||
  40af16:	697b      	ldr	r3, [r7, #20]
             !ip_get_option(ipcb, SOF_REUSEADDR)) {
#else /* SO_REUSE */
    /* port matches that of PCB in list and REUSEADDR not set -> reject */
    else {
#endif /* SO_REUSE */
      if ((ipcb->local_port == port) &&
  40af18:	2b00      	cmp	r3, #0
  40af1a:	d010      	beq.n	40af3e <udp_bind+0x5a>
          /* IP address matches, or one is IP_ADDR_ANY? */
          (ip_addr_isany(&(ipcb->local_ip)) ||
  40af1c:	697b      	ldr	r3, [r7, #20]
  40af1e:	681b      	ldr	r3, [r3, #0]
  40af20:	2b00      	cmp	r3, #0
  40af22:	d00c      	beq.n	40af3e <udp_bind+0x5a>
  40af24:	68bb      	ldr	r3, [r7, #8]
  40af26:	2b00      	cmp	r3, #0
  40af28:	d009      	beq.n	40af3e <udp_bind+0x5a>
           ip_addr_isany(ipaddr) ||
  40af2a:	68bb      	ldr	r3, [r7, #8]
  40af2c:	681b      	ldr	r3, [r3, #0]
  40af2e:	2b00      	cmp	r3, #0
  40af30:	d005      	beq.n	40af3e <udp_bind+0x5a>
           ip_addr_cmp(&(ipcb->local_ip), ipaddr))) {
  40af32:	697b      	ldr	r3, [r7, #20]
  40af34:	681a      	ldr	r2, [r3, #0]
  40af36:	68bb      	ldr	r3, [r7, #8]
  40af38:	681b      	ldr	r3, [r3, #0]
    else {
#endif /* SO_REUSE */
      if ((ipcb->local_port == port) &&
          /* IP address matches, or one is IP_ADDR_ANY? */
          (ip_addr_isany(&(ipcb->local_ip)) ||
           ip_addr_isany(ipaddr) ||
  40af3a:	429a      	cmp	r2, r3
  40af3c:	d102      	bne.n	40af44 <udp_bind+0x60>
           ip_addr_cmp(&(ipcb->local_ip), ipaddr))) {
        /* other PCB already binds to this local IP and port */
        LWIP_DEBUGF(UDP_DEBUG,
                    ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
        return ERR_USE;
  40af3e:	f06f 0307 	mvn.w	r3, #7
  40af42:	e029      	b.n	40af98 <udp_bind+0xb4>
  ip_addr_debug_print(UDP_DEBUG, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
  40af44:	697b      	ldr	r3, [r7, #20]
  40af46:	68db      	ldr	r3, [r3, #12]
  40af48:	617b      	str	r3, [r7, #20]
  40af4a:	697b      	ldr	r3, [r7, #20]
  40af4c:	2b00      	cmp	r3, #0
  40af4e:	d1d6      	bne.n	40aefe <udp_bind+0x1a>
        return ERR_USE;
      }
    }
  }

  ip_addr_set(&pcb->local_ip, ipaddr);
  40af50:	68bb      	ldr	r3, [r7, #8]
  40af52:	2b00      	cmp	r3, #0
  40af54:	d002      	beq.n	40af5c <udp_bind+0x78>
  40af56:	68bb      	ldr	r3, [r7, #8]
  40af58:	681b      	ldr	r3, [r3, #0]
  40af5a:	e000      	b.n	40af5e <udp_bind+0x7a>
  40af5c:	2300      	movs	r3, #0
  40af5e:	68fa      	ldr	r2, [r7, #12]
  40af60:	6013      	str	r3, [r2, #0]

  /* no port specified? */
  if (port == 0) {
  40af62:	88fb      	ldrh	r3, [r7, #6]
  40af64:	2b00      	cmp	r3, #0
  40af66:	d109      	bne.n	40af7c <udp_bind+0x98>
    port = udp_new_port();
  40af68:	4b0e      	ldr	r3, [pc, #56]	; (40afa4 <udp_bind+0xc0>)
  40af6a:	4798      	blx	r3
  40af6c:	4603      	mov	r3, r0
  40af6e:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
  40af70:	88fb      	ldrh	r3, [r7, #6]
  40af72:	2b00      	cmp	r3, #0
  40af74:	d102      	bne.n	40af7c <udp_bind+0x98>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
  40af76:	f06f 0307 	mvn.w	r3, #7
  40af7a:	e00d      	b.n	40af98 <udp_bind+0xb4>
    }
  }
  pcb->local_port = port;
  40af7c:	68fb      	ldr	r3, [r7, #12]
  40af7e:	88fa      	ldrh	r2, [r7, #6]
  40af80:	825a      	strh	r2, [r3, #18]
  snmp_insert_udpidx_tree(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
  40af82:	7cfb      	ldrb	r3, [r7, #19]
  40af84:	2b00      	cmp	r3, #0
  40af86:	d106      	bne.n	40af96 <udp_bind+0xb2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
  40af88:	4b05      	ldr	r3, [pc, #20]	; (40afa0 <udp_bind+0xbc>)
  40af8a:	681a      	ldr	r2, [r3, #0]
  40af8c:	68fb      	ldr	r3, [r7, #12]
  40af8e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
  40af90:	4a03      	ldr	r2, [pc, #12]	; (40afa0 <udp_bind+0xbc>)
  40af92:	68fb      	ldr	r3, [r7, #12]
  40af94:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
              ("udp_bind: bound to %"U16_F".%"U16_F".%"U16_F".%"U16_F", port %"U16_F"\n",
               ip4_addr1_16(&pcb->local_ip), ip4_addr2_16(&pcb->local_ip),
               ip4_addr3_16(&pcb->local_ip), ip4_addr4_16(&pcb->local_ip),
               pcb->local_port));
  return ERR_OK;
  40af96:	2300      	movs	r3, #0
}
  40af98:	4618      	mov	r0, r3
  40af9a:	3718      	adds	r7, #24
  40af9c:	46bd      	mov	sp, r7
  40af9e:	bd80      	pop	{r7, pc}
  40afa0:	2040499c 	.word	0x2040499c
  40afa4:	0040aa29 	.word	0x0040aa29

0040afa8 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, ip_addr_t *ipaddr, u16_t port)
{
  40afa8:	b580      	push	{r7, lr}
  40afaa:	b086      	sub	sp, #24
  40afac:	af00      	add	r7, sp, #0
  40afae:	60f8      	str	r0, [r7, #12]
  40afb0:	60b9      	str	r1, [r7, #8]
  40afb2:	4613      	mov	r3, r2
  40afb4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  if (pcb->local_port == 0) {
  40afb6:	68fb      	ldr	r3, [r7, #12]
  40afb8:	8a5b      	ldrh	r3, [r3, #18]
  40afba:	2b00      	cmp	r3, #0
  40afbc:	d10f      	bne.n	40afde <udp_connect+0x36>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
  40afbe:	68f9      	ldr	r1, [r7, #12]
  40afc0:	68fb      	ldr	r3, [r7, #12]
  40afc2:	8a5b      	ldrh	r3, [r3, #18]
  40afc4:	461a      	mov	r2, r3
  40afc6:	68f8      	ldr	r0, [r7, #12]
  40afc8:	4b1c      	ldr	r3, [pc, #112]	; (40b03c <udp_connect+0x94>)
  40afca:	4798      	blx	r3
  40afcc:	4603      	mov	r3, r0
  40afce:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
  40afd0:	f997 3013 	ldrsb.w	r3, [r7, #19]
  40afd4:	2b00      	cmp	r3, #0
  40afd6:	d002      	beq.n	40afde <udp_connect+0x36>
      return err;
  40afd8:	f997 3013 	ldrsb.w	r3, [r7, #19]
  40afdc:	e02a      	b.n	40b034 <udp_connect+0x8c>
    }
  }

  ip_addr_set(&pcb->remote_ip, ipaddr);
  40afde:	68bb      	ldr	r3, [r7, #8]
  40afe0:	2b00      	cmp	r3, #0
  40afe2:	d002      	beq.n	40afea <udp_connect+0x42>
  40afe4:	68bb      	ldr	r3, [r7, #8]
  40afe6:	681b      	ldr	r3, [r3, #0]
  40afe8:	e000      	b.n	40afec <udp_connect+0x44>
  40afea:	2300      	movs	r3, #0
  40afec:	68fa      	ldr	r2, [r7, #12]
  40afee:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
  40aff0:	68fb      	ldr	r3, [r7, #12]
  40aff2:	88fa      	ldrh	r2, [r7, #6]
  40aff4:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
  40aff6:	68fb      	ldr	r3, [r7, #12]
  40aff8:	7c1b      	ldrb	r3, [r3, #16]
  40affa:	f043 0304 	orr.w	r3, r3, #4
  40affe:	b2da      	uxtb	r2, r3
  40b000:	68fb      	ldr	r3, [r7, #12]
  40b002:	741a      	strb	r2, [r3, #16]
               ip4_addr1_16(&pcb->local_ip), ip4_addr2_16(&pcb->local_ip),
               ip4_addr3_16(&pcb->local_ip), ip4_addr4_16(&pcb->local_ip),
               pcb->local_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
  40b004:	4b0e      	ldr	r3, [pc, #56]	; (40b040 <udp_connect+0x98>)
  40b006:	681b      	ldr	r3, [r3, #0]
  40b008:	617b      	str	r3, [r7, #20]
  40b00a:	e008      	b.n	40b01e <udp_connect+0x76>
    if (pcb == ipcb) {
  40b00c:	68fa      	ldr	r2, [r7, #12]
  40b00e:	697b      	ldr	r3, [r7, #20]
  40b010:	429a      	cmp	r2, r3
  40b012:	d101      	bne.n	40b018 <udp_connect+0x70>
      /* already on the list, just return */
      return ERR_OK;
  40b014:	2300      	movs	r3, #0
  40b016:	e00d      	b.n	40b034 <udp_connect+0x8c>
               ip4_addr1_16(&pcb->local_ip), ip4_addr2_16(&pcb->local_ip),
               ip4_addr3_16(&pcb->local_ip), ip4_addr4_16(&pcb->local_ip),
               pcb->local_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
  40b018:	697b      	ldr	r3, [r7, #20]
  40b01a:	68db      	ldr	r3, [r3, #12]
  40b01c:	617b      	str	r3, [r7, #20]
  40b01e:	697b      	ldr	r3, [r7, #20]
  40b020:	2b00      	cmp	r3, #0
  40b022:	d1f3      	bne.n	40b00c <udp_connect+0x64>
      /* already on the list, just return */
      return ERR_OK;
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
  40b024:	4b06      	ldr	r3, [pc, #24]	; (40b040 <udp_connect+0x98>)
  40b026:	681a      	ldr	r2, [r3, #0]
  40b028:	68fb      	ldr	r3, [r7, #12]
  40b02a:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
  40b02c:	4a04      	ldr	r2, [pc, #16]	; (40b040 <udp_connect+0x98>)
  40b02e:	68fb      	ldr	r3, [r7, #12]
  40b030:	6013      	str	r3, [r2, #0]
  return ERR_OK;
  40b032:	2300      	movs	r3, #0
}
  40b034:	4618      	mov	r0, r3
  40b036:	3718      	adds	r7, #24
  40b038:	46bd      	mov	sp, r7
  40b03a:	bd80      	pop	{r7, pc}
  40b03c:	0040aee5 	.word	0x0040aee5
  40b040:	2040499c 	.word	0x2040499c

0040b044 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
  40b044:	b480      	push	{r7}
  40b046:	b085      	sub	sp, #20
  40b048:	af00      	add	r7, sp, #0
  40b04a:	60f8      	str	r0, [r7, #12]
  40b04c:	60b9      	str	r1, [r7, #8]
  40b04e:	607a      	str	r2, [r7, #4]
  /* remember recv() callback and user data */
  pcb->recv = recv;
  40b050:	68fb      	ldr	r3, [r7, #12]
  40b052:	68ba      	ldr	r2, [r7, #8]
  40b054:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
  40b056:	68fb      	ldr	r3, [r7, #12]
  40b058:	687a      	ldr	r2, [r7, #4]
  40b05a:	61da      	str	r2, [r3, #28]
}
  40b05c:	bf00      	nop
  40b05e:	3714      	adds	r7, #20
  40b060:	46bd      	mov	sp, r7
  40b062:	f85d 7b04 	ldr.w	r7, [sp], #4
  40b066:	4770      	bx	lr

0040b068 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
  40b068:	b580      	push	{r7, lr}
  40b06a:	b084      	sub	sp, #16
  40b06c:	af00      	add	r7, sp, #0
  40b06e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  snmp_delete_udpidx_tree(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
  40b070:	4b14      	ldr	r3, [pc, #80]	; (40b0c4 <udp_remove+0x5c>)
  40b072:	681a      	ldr	r2, [r3, #0]
  40b074:	687b      	ldr	r3, [r7, #4]
  40b076:	429a      	cmp	r2, r3
  40b078:	d105      	bne.n	40b086 <udp_remove+0x1e>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
  40b07a:	4b12      	ldr	r3, [pc, #72]	; (40b0c4 <udp_remove+0x5c>)
  40b07c:	681b      	ldr	r3, [r3, #0]
  40b07e:	68db      	ldr	r3, [r3, #12]
  40b080:	4a10      	ldr	r2, [pc, #64]	; (40b0c4 <udp_remove+0x5c>)
  40b082:	6013      	str	r3, [r2, #0]
  40b084:	e016      	b.n	40b0b4 <udp_remove+0x4c>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
  40b086:	4b0f      	ldr	r3, [pc, #60]	; (40b0c4 <udp_remove+0x5c>)
  40b088:	681b      	ldr	r3, [r3, #0]
  40b08a:	60fb      	str	r3, [r7, #12]
  40b08c:	e00f      	b.n	40b0ae <udp_remove+0x46>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
  40b08e:	68fb      	ldr	r3, [r7, #12]
  40b090:	68db      	ldr	r3, [r3, #12]
  40b092:	2b00      	cmp	r3, #0
  40b094:	d008      	beq.n	40b0a8 <udp_remove+0x40>
  40b096:	68fb      	ldr	r3, [r7, #12]
  40b098:	68da      	ldr	r2, [r3, #12]
  40b09a:	687b      	ldr	r3, [r7, #4]
  40b09c:	429a      	cmp	r2, r3
  40b09e:	d103      	bne.n	40b0a8 <udp_remove+0x40>
        /* remove pcb from list */
        pcb2->next = pcb->next;
  40b0a0:	687b      	ldr	r3, [r7, #4]
  40b0a2:	68da      	ldr	r2, [r3, #12]
  40b0a4:	68fb      	ldr	r3, [r7, #12]
  40b0a6:	60da      	str	r2, [r3, #12]
  if (udp_pcbs == pcb) {
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
  40b0a8:	68fb      	ldr	r3, [r7, #12]
  40b0aa:	68db      	ldr	r3, [r3, #12]
  40b0ac:	60fb      	str	r3, [r7, #12]
  40b0ae:	68fb      	ldr	r3, [r7, #12]
  40b0b0:	2b00      	cmp	r3, #0
  40b0b2:	d1ec      	bne.n	40b08e <udp_remove+0x26>
        /* remove pcb from list */
        pcb2->next = pcb->next;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
  40b0b4:	6879      	ldr	r1, [r7, #4]
  40b0b6:	2000      	movs	r0, #0
  40b0b8:	4b03      	ldr	r3, [pc, #12]	; (40b0c8 <udp_remove+0x60>)
  40b0ba:	4798      	blx	r3
}
  40b0bc:	bf00      	nop
  40b0be:	3710      	adds	r7, #16
  40b0c0:	46bd      	mov	sp, r7
  40b0c2:	bd80      	pop	{r7, pc}
  40b0c4:	2040499c 	.word	0x2040499c
  40b0c8:	00405981 	.word	0x00405981

0040b0cc <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
  40b0cc:	b580      	push	{r7, lr}
  40b0ce:	b082      	sub	sp, #8
  40b0d0:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
  40b0d2:	2000      	movs	r0, #0
  40b0d4:	4b09      	ldr	r3, [pc, #36]	; (40b0fc <udp_new+0x30>)
  40b0d6:	4798      	blx	r3
  40b0d8:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
  40b0da:	687b      	ldr	r3, [r7, #4]
  40b0dc:	2b00      	cmp	r3, #0
  40b0de:	d007      	beq.n	40b0f0 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
  40b0e0:	2220      	movs	r2, #32
  40b0e2:	2100      	movs	r1, #0
  40b0e4:	6878      	ldr	r0, [r7, #4]
  40b0e6:	4b06      	ldr	r3, [pc, #24]	; (40b100 <udp_new+0x34>)
  40b0e8:	4798      	blx	r3
    pcb->ttl = UDP_TTL;
  40b0ea:	687b      	ldr	r3, [r7, #4]
  40b0ec:	22ff      	movs	r2, #255	; 0xff
  40b0ee:	729a      	strb	r2, [r3, #10]
  }
  return pcb;
  40b0f0:	687b      	ldr	r3, [r7, #4]
}
  40b0f2:	4618      	mov	r0, r3
  40b0f4:	3708      	adds	r7, #8
  40b0f6:	46bd      	mov	sp, r7
  40b0f8:	bd80      	pop	{r7, pc}
  40b0fa:	bf00      	nop
  40b0fc:	00405941 	.word	0x00405941
  40b100:	0040d98d 	.word	0x0040d98d

0040b104 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
  40b104:	b580      	push	{r7, lr}
  40b106:	b082      	sub	sp, #8
  40b108:	af00      	add	r7, sp, #0
  40b10a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  snmp_delete_arpidx_tree(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
  40b10c:	4915      	ldr	r1, [pc, #84]	; (40b164 <etharp_free_entry+0x60>)
  40b10e:	687a      	ldr	r2, [r7, #4]
  40b110:	4613      	mov	r3, r2
  40b112:	009b      	lsls	r3, r3, #2
  40b114:	4413      	add	r3, r2
  40b116:	009b      	lsls	r3, r3, #2
  40b118:	440b      	add	r3, r1
  40b11a:	681b      	ldr	r3, [r3, #0]
  40b11c:	2b00      	cmp	r3, #0
  40b11e:	d013      	beq.n	40b148 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
  40b120:	4910      	ldr	r1, [pc, #64]	; (40b164 <etharp_free_entry+0x60>)
  40b122:	687a      	ldr	r2, [r7, #4]
  40b124:	4613      	mov	r3, r2
  40b126:	009b      	lsls	r3, r3, #2
  40b128:	4413      	add	r3, r2
  40b12a:	009b      	lsls	r3, r3, #2
  40b12c:	440b      	add	r3, r1
  40b12e:	681b      	ldr	r3, [r3, #0]
  40b130:	4618      	mov	r0, r3
  40b132:	4b0d      	ldr	r3, [pc, #52]	; (40b168 <etharp_free_entry+0x64>)
  40b134:	4798      	blx	r3
    arp_table[i].q = NULL;
  40b136:	490b      	ldr	r1, [pc, #44]	; (40b164 <etharp_free_entry+0x60>)
  40b138:	687a      	ldr	r2, [r7, #4]
  40b13a:	4613      	mov	r3, r2
  40b13c:	009b      	lsls	r3, r3, #2
  40b13e:	4413      	add	r3, r2
  40b140:	009b      	lsls	r3, r3, #2
  40b142:	440b      	add	r3, r1
  40b144:	2200      	movs	r2, #0
  40b146:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
  40b148:	4906      	ldr	r1, [pc, #24]	; (40b164 <etharp_free_entry+0x60>)
  40b14a:	687a      	ldr	r2, [r7, #4]
  40b14c:	4613      	mov	r3, r2
  40b14e:	009b      	lsls	r3, r3, #2
  40b150:	4413      	add	r3, r2
  40b152:	009b      	lsls	r3, r3, #2
  40b154:	440b      	add	r3, r1
  40b156:	3312      	adds	r3, #18
  40b158:	2200      	movs	r2, #0
  40b15a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
  40b15c:	bf00      	nop
  40b15e:	3708      	adds	r7, #8
  40b160:	46bd      	mov	sp, r7
  40b162:	bd80      	pop	{r7, pc}
  40b164:	204025d8 	.word	0x204025d8
  40b168:	00406069 	.word	0x00406069

0040b16c <etharp_tmr>:
 * This function should be called every ETHARP_TMR_INTERVAL milliseconds (5 seconds),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
  40b16c:	b580      	push	{r7, lr}
  40b16e:	b082      	sub	sp, #8
  40b170:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
  40b172:	2300      	movs	r3, #0
  40b174:	71fb      	strb	r3, [r7, #7]
  40b176:	e05e      	b.n	40b236 <etharp_tmr+0xca>
    u8_t state = arp_table[i].state;
  40b178:	79fa      	ldrb	r2, [r7, #7]
  40b17a:	4932      	ldr	r1, [pc, #200]	; (40b244 <etharp_tmr+0xd8>)
  40b17c:	4613      	mov	r3, r2
  40b17e:	009b      	lsls	r3, r3, #2
  40b180:	4413      	add	r3, r2
  40b182:	009b      	lsls	r3, r3, #2
  40b184:	440b      	add	r3, r1
  40b186:	3312      	adds	r3, #18
  40b188:	781b      	ldrb	r3, [r3, #0]
  40b18a:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
  40b18c:	79bb      	ldrb	r3, [r7, #6]
  40b18e:	2b00      	cmp	r3, #0
  40b190:	d04e      	beq.n	40b230 <etharp_tmr+0xc4>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
  40b192:	79fa      	ldrb	r2, [r7, #7]
  40b194:	492b      	ldr	r1, [pc, #172]	; (40b244 <etharp_tmr+0xd8>)
  40b196:	4613      	mov	r3, r2
  40b198:	009b      	lsls	r3, r3, #2
  40b19a:	4413      	add	r3, r2
  40b19c:	009b      	lsls	r3, r3, #2
  40b19e:	440b      	add	r3, r1
  40b1a0:	3313      	adds	r3, #19
  40b1a2:	781b      	ldrb	r3, [r3, #0]
  40b1a4:	3301      	adds	r3, #1
  40b1a6:	b2d8      	uxtb	r0, r3
  40b1a8:	4926      	ldr	r1, [pc, #152]	; (40b244 <etharp_tmr+0xd8>)
  40b1aa:	4613      	mov	r3, r2
  40b1ac:	009b      	lsls	r3, r3, #2
  40b1ae:	4413      	add	r3, r2
  40b1b0:	009b      	lsls	r3, r3, #2
  40b1b2:	440b      	add	r3, r1
  40b1b4:	3313      	adds	r3, #19
  40b1b6:	4602      	mov	r2, r0
  40b1b8:	701a      	strb	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
  40b1ba:	79fa      	ldrb	r2, [r7, #7]
  40b1bc:	4921      	ldr	r1, [pc, #132]	; (40b244 <etharp_tmr+0xd8>)
  40b1be:	4613      	mov	r3, r2
  40b1c0:	009b      	lsls	r3, r3, #2
  40b1c2:	4413      	add	r3, r2
  40b1c4:	009b      	lsls	r3, r3, #2
  40b1c6:	440b      	add	r3, r1
  40b1c8:	3313      	adds	r3, #19
  40b1ca:	781b      	ldrb	r3, [r3, #0]
  40b1cc:	2bef      	cmp	r3, #239	; 0xef
  40b1ce:	d815      	bhi.n	40b1fc <etharp_tmr+0x90>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
  40b1d0:	79fa      	ldrb	r2, [r7, #7]
  40b1d2:	491c      	ldr	r1, [pc, #112]	; (40b244 <etharp_tmr+0xd8>)
  40b1d4:	4613      	mov	r3, r2
  40b1d6:	009b      	lsls	r3, r3, #2
  40b1d8:	4413      	add	r3, r2
  40b1da:	009b      	lsls	r3, r3, #2
  40b1dc:	440b      	add	r3, r1
  40b1de:	3312      	adds	r3, #18
  40b1e0:	781b      	ldrb	r3, [r3, #0]
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
  40b1e2:	2b01      	cmp	r3, #1
  40b1e4:	d10f      	bne.n	40b206 <etharp_tmr+0x9a>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
  40b1e6:	79fa      	ldrb	r2, [r7, #7]
  40b1e8:	4916      	ldr	r1, [pc, #88]	; (40b244 <etharp_tmr+0xd8>)
  40b1ea:	4613      	mov	r3, r2
  40b1ec:	009b      	lsls	r3, r3, #2
  40b1ee:	4413      	add	r3, r2
  40b1f0:	009b      	lsls	r3, r3, #2
  40b1f2:	440b      	add	r3, r1
  40b1f4:	3313      	adds	r3, #19
  40b1f6:	781b      	ldrb	r3, [r3, #0]
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
  40b1f8:	2b01      	cmp	r3, #1
  40b1fa:	d904      	bls.n	40b206 <etharp_tmr+0x9a>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
  40b1fc:	79fb      	ldrb	r3, [r7, #7]
  40b1fe:	4618      	mov	r0, r3
  40b200:	4b11      	ldr	r3, [pc, #68]	; (40b248 <etharp_tmr+0xdc>)
  40b202:	4798      	blx	r3
  40b204:	e014      	b.n	40b230 <etharp_tmr+0xc4>
      }
      else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING) {
  40b206:	79fa      	ldrb	r2, [r7, #7]
  40b208:	490e      	ldr	r1, [pc, #56]	; (40b244 <etharp_tmr+0xd8>)
  40b20a:	4613      	mov	r3, r2
  40b20c:	009b      	lsls	r3, r3, #2
  40b20e:	4413      	add	r3, r2
  40b210:	009b      	lsls	r3, r3, #2
  40b212:	440b      	add	r3, r1
  40b214:	3312      	adds	r3, #18
  40b216:	781b      	ldrb	r3, [r3, #0]
  40b218:	2b03      	cmp	r3, #3
  40b21a:	d109      	bne.n	40b230 <etharp_tmr+0xc4>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
  40b21c:	79fa      	ldrb	r2, [r7, #7]
  40b21e:	4909      	ldr	r1, [pc, #36]	; (40b244 <etharp_tmr+0xd8>)
  40b220:	4613      	mov	r3, r2
  40b222:	009b      	lsls	r3, r3, #2
  40b224:	4413      	add	r3, r2
  40b226:	009b      	lsls	r3, r3, #2
  40b228:	440b      	add	r3, r1
  40b22a:	3312      	adds	r3, #18
  40b22c:	2202      	movs	r2, #2
  40b22e:	701a      	strb	r2, [r3, #0]
{
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
  40b230:	79fb      	ldrb	r3, [r7, #7]
  40b232:	3301      	adds	r3, #1
  40b234:	71fb      	strb	r3, [r7, #7]
  40b236:	79fb      	ldrb	r3, [r7, #7]
  40b238:	2b09      	cmp	r3, #9
  40b23a:	d99d      	bls.n	40b178 <etharp_tmr+0xc>
        /* resend an ARP query here? */
      }
#endif /* ARP_QUEUEING */
    }
  }
}
  40b23c:	bf00      	nop
  40b23e:	3708      	adds	r7, #8
  40b240:	46bd      	mov	sp, r7
  40b242:	bd80      	pop	{r7, pc}
  40b244:	204025d8 	.word	0x204025d8
  40b248:	0040b105 	.word	0x0040b105

0040b24c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(ip_addr_t *ipaddr, u8_t flags)
{
  40b24c:	b580      	push	{r7, lr}
  40b24e:	b086      	sub	sp, #24
  40b250:	af00      	add	r7, sp, #0
  40b252:	6078      	str	r0, [r7, #4]
  40b254:	460b      	mov	r3, r1
  40b256:	70fb      	strb	r3, [r7, #3]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  40b258:	230a      	movs	r3, #10
  40b25a:	75fb      	strb	r3, [r7, #23]
  40b25c:	230a      	movs	r3, #10
  40b25e:	75bb      	strb	r3, [r7, #22]
  s8_t empty = ARP_TABLE_SIZE;
  40b260:	230a      	movs	r3, #10
  40b262:	757b      	strb	r3, [r7, #21]
  u8_t i = 0, age_pending = 0, age_stable = 0;
  40b264:	2300      	movs	r3, #0
  40b266:	753b      	strb	r3, [r7, #20]
  40b268:	2300      	movs	r3, #0
  40b26a:	74fb      	strb	r3, [r7, #19]
  40b26c:	2300      	movs	r3, #0
  40b26e:	74bb      	strb	r3, [r7, #18]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
  40b270:	230a      	movs	r3, #10
  40b272:	747b      	strb	r3, [r7, #17]
  /* its age */
  u8_t age_queue = 0;
  40b274:	2300      	movs	r3, #0
  40b276:	743b      	strb	r3, [r7, #16]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
  40b278:	2300      	movs	r3, #0
  40b27a:	753b      	strb	r3, [r7, #20]
  40b27c:	e086      	b.n	40b38c <etharp_find_entry+0x140>
    u8_t state = arp_table[i].state;
  40b27e:	7d3a      	ldrb	r2, [r7, #20]
  40b280:	496d      	ldr	r1, [pc, #436]	; (40b438 <etharp_find_entry+0x1ec>)
  40b282:	4613      	mov	r3, r2
  40b284:	009b      	lsls	r3, r3, #2
  40b286:	4413      	add	r3, r2
  40b288:	009b      	lsls	r3, r3, #2
  40b28a:	440b      	add	r3, r1
  40b28c:	3312      	adds	r3, #18
  40b28e:	781b      	ldrb	r3, [r3, #0]
  40b290:	73fb      	strb	r3, [r7, #15]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
  40b292:	f997 3015 	ldrsb.w	r3, [r7, #21]
  40b296:	2b0a      	cmp	r3, #10
  40b298:	d105      	bne.n	40b2a6 <etharp_find_entry+0x5a>
  40b29a:	7bfb      	ldrb	r3, [r7, #15]
  40b29c:	2b00      	cmp	r3, #0
  40b29e:	d102      	bne.n	40b2a6 <etharp_find_entry+0x5a>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
  40b2a0:	7d3b      	ldrb	r3, [r7, #20]
  40b2a2:	757b      	strb	r3, [r7, #21]
  40b2a4:	e06f      	b.n	40b386 <etharp_find_entry+0x13a>
    } else if (state != ETHARP_STATE_EMPTY) {
  40b2a6:	7bfb      	ldrb	r3, [r7, #15]
  40b2a8:	2b00      	cmp	r3, #0
  40b2aa:	d06c      	beq.n	40b386 <etharp_find_entry+0x13a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip_addr_cmp(ipaddr, &arp_table[i].ipaddr)) {
  40b2ac:	687b      	ldr	r3, [r7, #4]
  40b2ae:	2b00      	cmp	r3, #0
  40b2b0:	d00f      	beq.n	40b2d2 <etharp_find_entry+0x86>
  40b2b2:	687b      	ldr	r3, [r7, #4]
  40b2b4:	6819      	ldr	r1, [r3, #0]
  40b2b6:	7d3a      	ldrb	r2, [r7, #20]
  40b2b8:	485f      	ldr	r0, [pc, #380]	; (40b438 <etharp_find_entry+0x1ec>)
  40b2ba:	4613      	mov	r3, r2
  40b2bc:	009b      	lsls	r3, r3, #2
  40b2be:	4413      	add	r3, r2
  40b2c0:	009b      	lsls	r3, r3, #2
  40b2c2:	4403      	add	r3, r0
  40b2c4:	3304      	adds	r3, #4
  40b2c6:	681b      	ldr	r3, [r3, #0]
  40b2c8:	4299      	cmp	r1, r3
  40b2ca:	d102      	bne.n	40b2d2 <etharp_find_entry+0x86>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
  40b2cc:	f997 3014 	ldrsb.w	r3, [r7, #20]
  40b2d0:	e0ae      	b.n	40b430 <etharp_find_entry+0x1e4>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
  40b2d2:	7bfb      	ldrb	r3, [r7, #15]
  40b2d4:	2b01      	cmp	r3, #1
  40b2d6:	d13b      	bne.n	40b350 <etharp_find_entry+0x104>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
  40b2d8:	7d3a      	ldrb	r2, [r7, #20]
  40b2da:	4957      	ldr	r1, [pc, #348]	; (40b438 <etharp_find_entry+0x1ec>)
  40b2dc:	4613      	mov	r3, r2
  40b2de:	009b      	lsls	r3, r3, #2
  40b2e0:	4413      	add	r3, r2
  40b2e2:	009b      	lsls	r3, r3, #2
  40b2e4:	440b      	add	r3, r1
  40b2e6:	681b      	ldr	r3, [r3, #0]
  40b2e8:	2b00      	cmp	r3, #0
  40b2ea:	d018      	beq.n	40b31e <etharp_find_entry+0xd2>
          if (arp_table[i].ctime >= age_queue) {
  40b2ec:	7d3a      	ldrb	r2, [r7, #20]
  40b2ee:	4952      	ldr	r1, [pc, #328]	; (40b438 <etharp_find_entry+0x1ec>)
  40b2f0:	4613      	mov	r3, r2
  40b2f2:	009b      	lsls	r3, r3, #2
  40b2f4:	4413      	add	r3, r2
  40b2f6:	009b      	lsls	r3, r3, #2
  40b2f8:	440b      	add	r3, r1
  40b2fa:	3313      	adds	r3, #19
  40b2fc:	781b      	ldrb	r3, [r3, #0]
  40b2fe:	7c3a      	ldrb	r2, [r7, #16]
  40b300:	429a      	cmp	r2, r3
  40b302:	d840      	bhi.n	40b386 <etharp_find_entry+0x13a>
            old_queue = i;
  40b304:	7d3b      	ldrb	r3, [r7, #20]
  40b306:	747b      	strb	r3, [r7, #17]
            age_queue = arp_table[i].ctime;
  40b308:	7d3a      	ldrb	r2, [r7, #20]
  40b30a:	494b      	ldr	r1, [pc, #300]	; (40b438 <etharp_find_entry+0x1ec>)
  40b30c:	4613      	mov	r3, r2
  40b30e:	009b      	lsls	r3, r3, #2
  40b310:	4413      	add	r3, r2
  40b312:	009b      	lsls	r3, r3, #2
  40b314:	440b      	add	r3, r1
  40b316:	3313      	adds	r3, #19
  40b318:	781b      	ldrb	r3, [r3, #0]
  40b31a:	743b      	strb	r3, [r7, #16]
  40b31c:	e033      	b.n	40b386 <etharp_find_entry+0x13a>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
  40b31e:	7d3a      	ldrb	r2, [r7, #20]
  40b320:	4945      	ldr	r1, [pc, #276]	; (40b438 <etharp_find_entry+0x1ec>)
  40b322:	4613      	mov	r3, r2
  40b324:	009b      	lsls	r3, r3, #2
  40b326:	4413      	add	r3, r2
  40b328:	009b      	lsls	r3, r3, #2
  40b32a:	440b      	add	r3, r1
  40b32c:	3313      	adds	r3, #19
  40b32e:	781b      	ldrb	r3, [r3, #0]
  40b330:	7cfa      	ldrb	r2, [r7, #19]
  40b332:	429a      	cmp	r2, r3
  40b334:	d827      	bhi.n	40b386 <etharp_find_entry+0x13a>
            old_pending = i;
  40b336:	7d3b      	ldrb	r3, [r7, #20]
  40b338:	75fb      	strb	r3, [r7, #23]
            age_pending = arp_table[i].ctime;
  40b33a:	7d3a      	ldrb	r2, [r7, #20]
  40b33c:	493e      	ldr	r1, [pc, #248]	; (40b438 <etharp_find_entry+0x1ec>)
  40b33e:	4613      	mov	r3, r2
  40b340:	009b      	lsls	r3, r3, #2
  40b342:	4413      	add	r3, r2
  40b344:	009b      	lsls	r3, r3, #2
  40b346:	440b      	add	r3, r1
  40b348:	3313      	adds	r3, #19
  40b34a:	781b      	ldrb	r3, [r3, #0]
  40b34c:	74fb      	strb	r3, [r7, #19]
  40b34e:	e01a      	b.n	40b386 <etharp_find_entry+0x13a>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
  40b350:	7bfb      	ldrb	r3, [r7, #15]
  40b352:	2b01      	cmp	r3, #1
  40b354:	d917      	bls.n	40b386 <etharp_find_entry+0x13a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
  40b356:	7d3a      	ldrb	r2, [r7, #20]
  40b358:	4937      	ldr	r1, [pc, #220]	; (40b438 <etharp_find_entry+0x1ec>)
  40b35a:	4613      	mov	r3, r2
  40b35c:	009b      	lsls	r3, r3, #2
  40b35e:	4413      	add	r3, r2
  40b360:	009b      	lsls	r3, r3, #2
  40b362:	440b      	add	r3, r1
  40b364:	3313      	adds	r3, #19
  40b366:	781b      	ldrb	r3, [r3, #0]
  40b368:	7cba      	ldrb	r2, [r7, #18]
  40b36a:	429a      	cmp	r2, r3
  40b36c:	d80b      	bhi.n	40b386 <etharp_find_entry+0x13a>
            old_stable = i;
  40b36e:	7d3b      	ldrb	r3, [r7, #20]
  40b370:	75bb      	strb	r3, [r7, #22]
            age_stable = arp_table[i].ctime;
  40b372:	7d3a      	ldrb	r2, [r7, #20]
  40b374:	4930      	ldr	r1, [pc, #192]	; (40b438 <etharp_find_entry+0x1ec>)
  40b376:	4613      	mov	r3, r2
  40b378:	009b      	lsls	r3, r3, #2
  40b37a:	4413      	add	r3, r2
  40b37c:	009b      	lsls	r3, r3, #2
  40b37e:	440b      	add	r3, r1
  40b380:	3313      	adds	r3, #19
  40b382:	781b      	ldrb	r3, [r3, #0]
  40b384:	74bb      	strb	r3, [r7, #18]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
  40b386:	7d3b      	ldrb	r3, [r7, #20]
  40b388:	3301      	adds	r3, #1
  40b38a:	753b      	strb	r3, [r7, #20]
  40b38c:	7d3b      	ldrb	r3, [r7, #20]
  40b38e:	2b09      	cmp	r3, #9
  40b390:	f67f af75 	bls.w	40b27e <etharp_find_entry+0x32>
    }
  }
  /* { we have no match } => try to create a new entry */
   
  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
  40b394:	78fb      	ldrb	r3, [r7, #3]
  40b396:	f003 0302 	and.w	r3, r3, #2
  40b39a:	2b00      	cmp	r3, #0
  40b39c:	d108      	bne.n	40b3b0 <etharp_find_entry+0x164>
  40b39e:	f997 3015 	ldrsb.w	r3, [r7, #21]
  40b3a2:	2b0a      	cmp	r3, #10
  40b3a4:	d107      	bne.n	40b3b6 <etharp_find_entry+0x16a>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
  40b3a6:	78fb      	ldrb	r3, [r7, #3]
  40b3a8:	f003 0301 	and.w	r3, r3, #1
  40b3ac:	2b00      	cmp	r3, #0
  40b3ae:	d102      	bne.n	40b3b6 <etharp_find_entry+0x16a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
  40b3b0:	f04f 33ff 	mov.w	r3, #4294967295
  40b3b4:	e03c      	b.n	40b430 <etharp_find_entry+0x1e4>
   * 
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */ 

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
  40b3b6:	f997 3015 	ldrsb.w	r3, [r7, #21]
  40b3ba:	2b09      	cmp	r3, #9
  40b3bc:	dc02      	bgt.n	40b3c4 <etharp_find_entry+0x178>
    i = empty;
  40b3be:	7d7b      	ldrb	r3, [r7, #21]
  40b3c0:	753b      	strb	r3, [r7, #20]
  40b3c2:	e01b      	b.n	40b3fc <etharp_find_entry+0x1b0>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
  40b3c4:	f997 3016 	ldrsb.w	r3, [r7, #22]
  40b3c8:	2b09      	cmp	r3, #9
  40b3ca:	dc02      	bgt.n	40b3d2 <etharp_find_entry+0x186>
      /* recycle oldest stable*/
      i = old_stable;
  40b3cc:	7dbb      	ldrb	r3, [r7, #22]
  40b3ce:	753b      	strb	r3, [r7, #20]
  40b3d0:	e010      	b.n	40b3f4 <etharp_find_entry+0x1a8>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
  40b3d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
  40b3d6:	2b09      	cmp	r3, #9
  40b3d8:	dc02      	bgt.n	40b3e0 <etharp_find_entry+0x194>
      /* recycle oldest pending */
      i = old_pending;
  40b3da:	7dfb      	ldrb	r3, [r7, #23]
  40b3dc:	753b      	strb	r3, [r7, #20]
  40b3de:	e009      	b.n	40b3f4 <etharp_find_entry+0x1a8>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
  40b3e0:	f997 3011 	ldrsb.w	r3, [r7, #17]
  40b3e4:	2b09      	cmp	r3, #9
  40b3e6:	dc02      	bgt.n	40b3ee <etharp_find_entry+0x1a2>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
  40b3e8:	7c7b      	ldrb	r3, [r7, #17]
  40b3ea:	753b      	strb	r3, [r7, #20]
  40b3ec:	e002      	b.n	40b3f4 <etharp_find_entry+0x1a8>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
  40b3ee:	f04f 33ff 	mov.w	r3, #4294967295
  40b3f2:	e01d      	b.n	40b430 <etharp_find_entry+0x1e4>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
  40b3f4:	7d3b      	ldrb	r3, [r7, #20]
  40b3f6:	4618      	mov	r0, r3
  40b3f8:	4b10      	ldr	r3, [pc, #64]	; (40b43c <etharp_find_entry+0x1f0>)
  40b3fa:	4798      	blx	r3
  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
  40b3fc:	687b      	ldr	r3, [r7, #4]
  40b3fe:	2b00      	cmp	r3, #0
  40b400:	d00a      	beq.n	40b418 <etharp_find_entry+0x1cc>
    /* set IP address */
    ip_addr_copy(arp_table[i].ipaddr, *ipaddr);
  40b402:	7d3a      	ldrb	r2, [r7, #20]
  40b404:	687b      	ldr	r3, [r7, #4]
  40b406:	6819      	ldr	r1, [r3, #0]
  40b408:	480b      	ldr	r0, [pc, #44]	; (40b438 <etharp_find_entry+0x1ec>)
  40b40a:	4613      	mov	r3, r2
  40b40c:	009b      	lsls	r3, r3, #2
  40b40e:	4413      	add	r3, r2
  40b410:	009b      	lsls	r3, r3, #2
  40b412:	4403      	add	r3, r0
  40b414:	3304      	adds	r3, #4
  40b416:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
  40b418:	7d3a      	ldrb	r2, [r7, #20]
  40b41a:	4907      	ldr	r1, [pc, #28]	; (40b438 <etharp_find_entry+0x1ec>)
  40b41c:	4613      	mov	r3, r2
  40b41e:	009b      	lsls	r3, r3, #2
  40b420:	4413      	add	r3, r2
  40b422:	009b      	lsls	r3, r3, #2
  40b424:	440b      	add	r3, r1
  40b426:	3313      	adds	r3, #19
  40b428:	2200      	movs	r2, #0
  40b42a:	701a      	strb	r2, [r3, #0]
  return (err_t)i;
  40b42c:	f997 3014 	ldrsb.w	r3, [r7, #20]
}
  40b430:	4618      	mov	r0, r3
  40b432:	3718      	adds	r7, #24
  40b434:	46bd      	mov	sp, r7
  40b436:	bd80      	pop	{r7, pc}
  40b438:	204025d8 	.word	0x204025d8
  40b43c:	0040b105 	.word	0x0040b105

0040b440 <etharp_send_ip>:
 * @params dst the destination MAC address to be copied into the ethernet header
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
static err_t
etharp_send_ip(struct netif *netif, struct pbuf *p, struct eth_addr *src, struct eth_addr *dst)
{
  40b440:	b580      	push	{r7, lr}
  40b442:	b086      	sub	sp, #24
  40b444:	af00      	add	r7, sp, #0
  40b446:	60f8      	str	r0, [r7, #12]
  40b448:	60b9      	str	r1, [r7, #8]
  40b44a:	607a      	str	r2, [r7, #4]
  40b44c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr = (struct eth_hdr *)p->payload;
  40b44e:	68bb      	ldr	r3, [r7, #8]
  40b450:	685b      	ldr	r3, [r3, #4]
  40b452:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETHARP_HWADDR_LEN for etharp!",
              (netif->hwaddr_len == ETHARP_HWADDR_LEN));
  ETHADDR32_COPY(&ethhdr->dest, dst);
  40b454:	697b      	ldr	r3, [r7, #20]
  40b456:	2206      	movs	r2, #6
  40b458:	6839      	ldr	r1, [r7, #0]
  40b45a:	4618      	mov	r0, r3
  40b45c:	4b0c      	ldr	r3, [pc, #48]	; (40b490 <etharp_send_ip+0x50>)
  40b45e:	4798      	blx	r3
  ETHADDR16_COPY(&ethhdr->src, src);
  40b460:	697b      	ldr	r3, [r7, #20]
  40b462:	3306      	adds	r3, #6
  40b464:	2206      	movs	r2, #6
  40b466:	6879      	ldr	r1, [r7, #4]
  40b468:	4618      	mov	r0, r3
  40b46a:	4b09      	ldr	r3, [pc, #36]	; (40b490 <etharp_send_ip+0x50>)
  40b46c:	4798      	blx	r3
  ethhdr->type = PP_HTONS(ETHTYPE_IP);
  40b46e:	697b      	ldr	r3, [r7, #20]
  40b470:	2200      	movs	r2, #0
  40b472:	f042 0208 	orr.w	r2, r2, #8
  40b476:	731a      	strb	r2, [r3, #12]
  40b478:	2200      	movs	r2, #0
  40b47a:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_send_ip: sending packet %p\n", (void *)p));
  /* send the packet */
  return netif->linkoutput(netif, p);
  40b47c:	68fb      	ldr	r3, [r7, #12]
  40b47e:	699b      	ldr	r3, [r3, #24]
  40b480:	68b9      	ldr	r1, [r7, #8]
  40b482:	68f8      	ldr	r0, [r7, #12]
  40b484:	4798      	blx	r3
  40b486:	4603      	mov	r3, r0
}
  40b488:	4618      	mov	r0, r3
  40b48a:	3718      	adds	r7, #24
  40b48c:	46bd      	mov	sp, r7
  40b48e:	bd80      	pop	{r7, pc}
  40b490:	0040d859 	.word	0x0040d859

0040b494 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, ip_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
  40b494:	b590      	push	{r4, r7, lr}
  40b496:	b087      	sub	sp, #28
  40b498:	af00      	add	r7, sp, #0
  40b49a:	60f8      	str	r0, [r7, #12]
  40b49c:	60b9      	str	r1, [r7, #8]
  40b49e:	607a      	str	r2, [r7, #4]
  40b4a0:	70fb      	strb	r3, [r7, #3]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    ethaddr->addr[0], ethaddr->addr[1], ethaddr->addr[2],
    ethaddr->addr[3], ethaddr->addr[4], ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip_addr_isany(ipaddr) ||
  40b4a2:	68bb      	ldr	r3, [r7, #8]
  40b4a4:	2b00      	cmp	r3, #0
  40b4a6:	d012      	beq.n	40b4ce <etharp_update_arp_entry+0x3a>
  40b4a8:	68bb      	ldr	r3, [r7, #8]
  40b4aa:	681b      	ldr	r3, [r3, #0]
  40b4ac:	2b00      	cmp	r3, #0
  40b4ae:	d00e      	beq.n	40b4ce <etharp_update_arp_entry+0x3a>
      ip_addr_isbroadcast(ipaddr, netif) ||
  40b4b0:	68bb      	ldr	r3, [r7, #8]
  40b4b2:	681b      	ldr	r3, [r3, #0]
  40b4b4:	68f9      	ldr	r1, [r7, #12]
  40b4b6:	4618      	mov	r0, r3
  40b4b8:	4b3d      	ldr	r3, [pc, #244]	; (40b5b0 <etharp_update_arp_entry+0x11c>)
  40b4ba:	4798      	blx	r3
  40b4bc:	4603      	mov	r3, r0
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    ethaddr->addr[0], ethaddr->addr[1], ethaddr->addr[2],
    ethaddr->addr[3], ethaddr->addr[4], ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip_addr_isany(ipaddr) ||
  40b4be:	2b00      	cmp	r3, #0
  40b4c0:	d105      	bne.n	40b4ce <etharp_update_arp_entry+0x3a>
      ip_addr_isbroadcast(ipaddr, netif) ||
      ip_addr_ismulticast(ipaddr)) {
  40b4c2:	68bb      	ldr	r3, [r7, #8]
  40b4c4:	681b      	ldr	r3, [r3, #0]
  40b4c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    ethaddr->addr[0], ethaddr->addr[1], ethaddr->addr[2],
    ethaddr->addr[3], ethaddr->addr[4], ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip_addr_isany(ipaddr) ||
      ip_addr_isbroadcast(ipaddr, netif) ||
  40b4ca:	2be0      	cmp	r3, #224	; 0xe0
  40b4cc:	d102      	bne.n	40b4d4 <etharp_update_arp_entry+0x40>
      ip_addr_ismulticast(ipaddr)) {
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
  40b4ce:	f06f 030d 	mvn.w	r3, #13
  40b4d2:	e068      	b.n	40b5a6 <etharp_update_arp_entry+0x112>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags);
  40b4d4:	78fb      	ldrb	r3, [r7, #3]
  40b4d6:	4619      	mov	r1, r3
  40b4d8:	68b8      	ldr	r0, [r7, #8]
  40b4da:	4b36      	ldr	r3, [pc, #216]	; (40b5b4 <etharp_update_arp_entry+0x120>)
  40b4dc:	4798      	blx	r3
  40b4de:	4603      	mov	r3, r0
  40b4e0:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
  40b4e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
  40b4e6:	2b00      	cmp	r3, #0
  40b4e8:	da02      	bge.n	40b4f0 <etharp_update_arp_entry+0x5c>
    return (err_t)i;
  40b4ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
  40b4ee:	e05a      	b.n	40b5a6 <etharp_update_arp_entry+0x112>
    arp_table[i].state = ETHARP_STATE_STATIC;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
  40b4f0:	f997 2017 	ldrsb.w	r2, [r7, #23]
  40b4f4:	4930      	ldr	r1, [pc, #192]	; (40b5b8 <etharp_update_arp_entry+0x124>)
  40b4f6:	4613      	mov	r3, r2
  40b4f8:	009b      	lsls	r3, r3, #2
  40b4fa:	4413      	add	r3, r2
  40b4fc:	009b      	lsls	r3, r3, #2
  40b4fe:	440b      	add	r3, r1
  40b500:	3312      	adds	r3, #18
  40b502:	2202      	movs	r2, #2
  40b504:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
  40b506:	f997 2017 	ldrsb.w	r2, [r7, #23]
  40b50a:	492b      	ldr	r1, [pc, #172]	; (40b5b8 <etharp_update_arp_entry+0x124>)
  40b50c:	4613      	mov	r3, r2
  40b50e:	009b      	lsls	r3, r3, #2
  40b510:	4413      	add	r3, r2
  40b512:	009b      	lsls	r3, r3, #2
  40b514:	440b      	add	r3, r1
  40b516:	3308      	adds	r3, #8
  40b518:	68fa      	ldr	r2, [r7, #12]
  40b51a:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  snmp_insert_arpidx_tree(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
  40b51c:	f997 2017 	ldrsb.w	r2, [r7, #23]
  40b520:	4613      	mov	r3, r2
  40b522:	009b      	lsls	r3, r3, #2
  40b524:	4413      	add	r3, r2
  40b526:	009b      	lsls	r3, r3, #2
  40b528:	3308      	adds	r3, #8
  40b52a:	4a23      	ldr	r2, [pc, #140]	; (40b5b8 <etharp_update_arp_entry+0x124>)
  40b52c:	4413      	add	r3, r2
  40b52e:	3304      	adds	r3, #4
  40b530:	2206      	movs	r2, #6
  40b532:	6879      	ldr	r1, [r7, #4]
  40b534:	4618      	mov	r0, r3
  40b536:	4b21      	ldr	r3, [pc, #132]	; (40b5bc <etharp_update_arp_entry+0x128>)
  40b538:	4798      	blx	r3
  /* reset time stamp */
  arp_table[i].ctime = 0;
  40b53a:	f997 2017 	ldrsb.w	r2, [r7, #23]
  40b53e:	491e      	ldr	r1, [pc, #120]	; (40b5b8 <etharp_update_arp_entry+0x124>)
  40b540:	4613      	mov	r3, r2
  40b542:	009b      	lsls	r3, r3, #2
  40b544:	4413      	add	r3, r2
  40b546:	009b      	lsls	r3, r3, #2
  40b548:	440b      	add	r3, r1
  40b54a:	3313      	adds	r3, #19
  40b54c:	2200      	movs	r2, #0
  40b54e:	701a      	strb	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
  40b550:	f997 2017 	ldrsb.w	r2, [r7, #23]
  40b554:	4918      	ldr	r1, [pc, #96]	; (40b5b8 <etharp_update_arp_entry+0x124>)
  40b556:	4613      	mov	r3, r2
  40b558:	009b      	lsls	r3, r3, #2
  40b55a:	4413      	add	r3, r2
  40b55c:	009b      	lsls	r3, r3, #2
  40b55e:	440b      	add	r3, r1
  40b560:	681b      	ldr	r3, [r3, #0]
  40b562:	2b00      	cmp	r3, #0
  40b564:	d01e      	beq.n	40b5a4 <etharp_update_arp_entry+0x110>
    struct pbuf *p = arp_table[i].q;
  40b566:	f997 2017 	ldrsb.w	r2, [r7, #23]
  40b56a:	4913      	ldr	r1, [pc, #76]	; (40b5b8 <etharp_update_arp_entry+0x124>)
  40b56c:	4613      	mov	r3, r2
  40b56e:	009b      	lsls	r3, r3, #2
  40b570:	4413      	add	r3, r2
  40b572:	009b      	lsls	r3, r3, #2
  40b574:	440b      	add	r3, r1
  40b576:	681b      	ldr	r3, [r3, #0]
  40b578:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
  40b57a:	f997 2017 	ldrsb.w	r2, [r7, #23]
  40b57e:	490e      	ldr	r1, [pc, #56]	; (40b5b8 <etharp_update_arp_entry+0x124>)
  40b580:	4613      	mov	r3, r2
  40b582:	009b      	lsls	r3, r3, #2
  40b584:	4413      	add	r3, r2
  40b586:	009b      	lsls	r3, r3, #2
  40b588:	440b      	add	r3, r1
  40b58a:	2200      	movs	r2, #0
  40b58c:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    etharp_send_ip(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr);
  40b58e:	68fb      	ldr	r3, [r7, #12]
  40b590:	f103 022b 	add.w	r2, r3, #43	; 0x2b
  40b594:	687b      	ldr	r3, [r7, #4]
  40b596:	6939      	ldr	r1, [r7, #16]
  40b598:	68f8      	ldr	r0, [r7, #12]
  40b59a:	4c09      	ldr	r4, [pc, #36]	; (40b5c0 <etharp_update_arp_entry+0x12c>)
  40b59c:	47a0      	blx	r4
    /* free the queued IP packet */
    pbuf_free(p);
  40b59e:	6938      	ldr	r0, [r7, #16]
  40b5a0:	4b08      	ldr	r3, [pc, #32]	; (40b5c4 <etharp_update_arp_entry+0x130>)
  40b5a2:	4798      	blx	r3
  }
  return ERR_OK;
  40b5a4:	2300      	movs	r3, #0
}
  40b5a6:	4618      	mov	r0, r3
  40b5a8:	371c      	adds	r7, #28
  40b5aa:	46bd      	mov	sp, r7
  40b5ac:	bd90      	pop	{r4, r7, pc}
  40b5ae:	bf00      	nop
  40b5b0:	00404745 	.word	0x00404745
  40b5b4:	0040b24d 	.word	0x0040b24d
  40b5b8:	204025d8 	.word	0x204025d8
  40b5bc:	0040d859 	.word	0x0040d859
  40b5c0:	0040b441 	.word	0x0040b441
  40b5c4:	00406069 	.word	0x00406069

0040b5c8 <etharp_cleanup_netif>:
 * Remove all ARP table entries of the specified netif.
 *
 * @param netif points to a network interface
 */
void etharp_cleanup_netif(struct netif *netif)
{
  40b5c8:	b580      	push	{r7, lr}
  40b5ca:	b084      	sub	sp, #16
  40b5cc:	af00      	add	r7, sp, #0
  40b5ce:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
  40b5d0:	2300      	movs	r3, #0
  40b5d2:	73fb      	strb	r3, [r7, #15]
  40b5d4:	e01f      	b.n	40b616 <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
  40b5d6:	7bfa      	ldrb	r2, [r7, #15]
  40b5d8:	4912      	ldr	r1, [pc, #72]	; (40b624 <etharp_cleanup_netif+0x5c>)
  40b5da:	4613      	mov	r3, r2
  40b5dc:	009b      	lsls	r3, r3, #2
  40b5de:	4413      	add	r3, r2
  40b5e0:	009b      	lsls	r3, r3, #2
  40b5e2:	440b      	add	r3, r1
  40b5e4:	3312      	adds	r3, #18
  40b5e6:	781b      	ldrb	r3, [r3, #0]
  40b5e8:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
  40b5ea:	7bbb      	ldrb	r3, [r7, #14]
  40b5ec:	2b00      	cmp	r3, #0
  40b5ee:	d00f      	beq.n	40b610 <etharp_cleanup_netif+0x48>
  40b5f0:	7bfa      	ldrb	r2, [r7, #15]
  40b5f2:	490c      	ldr	r1, [pc, #48]	; (40b624 <etharp_cleanup_netif+0x5c>)
  40b5f4:	4613      	mov	r3, r2
  40b5f6:	009b      	lsls	r3, r3, #2
  40b5f8:	4413      	add	r3, r2
  40b5fa:	009b      	lsls	r3, r3, #2
  40b5fc:	440b      	add	r3, r1
  40b5fe:	3308      	adds	r3, #8
  40b600:	681a      	ldr	r2, [r3, #0]
  40b602:	687b      	ldr	r3, [r7, #4]
  40b604:	429a      	cmp	r2, r3
  40b606:	d103      	bne.n	40b610 <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
  40b608:	7bfb      	ldrb	r3, [r7, #15]
  40b60a:	4618      	mov	r0, r3
  40b60c:	4b06      	ldr	r3, [pc, #24]	; (40b628 <etharp_cleanup_netif+0x60>)
  40b60e:	4798      	blx	r3
 */
void etharp_cleanup_netif(struct netif *netif)
{
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
  40b610:	7bfb      	ldrb	r3, [r7, #15]
  40b612:	3301      	adds	r3, #1
  40b614:	73fb      	strb	r3, [r7, #15]
  40b616:	7bfb      	ldrb	r3, [r7, #15]
  40b618:	2b09      	cmp	r3, #9
  40b61a:	d9dc      	bls.n	40b5d6 <etharp_cleanup_netif+0xe>
    u8_t state = arp_table[i].state;
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
      etharp_free_entry(i);
    }
  }
}
  40b61c:	bf00      	nop
  40b61e:	3710      	adds	r7, #16
  40b620:	46bd      	mov	sp, r7
  40b622:	bd80      	pop	{r7, pc}
  40b624:	204025d8 	.word	0x204025d8
  40b628:	0040b105 	.word	0x0040b105

0040b62c <etharp_arp_input>:
 *
 * @see pbuf_free()
 */
static void
etharp_arp_input(struct netif *netif, struct eth_addr *ethaddr, struct pbuf *p)
{
  40b62c:	b590      	push	{r4, r7, lr}
  40b62e:	b08b      	sub	sp, #44	; 0x2c
  40b630:	af00      	add	r7, sp, #0
  40b632:	60f8      	str	r0, [r7, #12]
  40b634:	60b9      	str	r1, [r7, #8]
  40b636:	607a      	str	r2, [r7, #4]
  u8_t for_us;
#if LWIP_AUTOIP
  const u8_t * ethdst_hwaddr;
#endif /* LWIP_AUTOIP */

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
  40b638:	68fb      	ldr	r3, [r7, #12]
  40b63a:	2b00      	cmp	r3, #0
  40b63c:	d100      	bne.n	40b640 <etharp_arp_input+0x14>
  40b63e:	e7fe      	b.n	40b63e <etharp_arp_input+0x12>

  /* drop short ARP packets: we have to check for p->len instead of p->tot_len here
     since a struct etharp_hdr is pointed to p->payload, so it musn't be chained! */
  if (p->len < SIZEOF_ETHARP_PACKET) {
  40b640:	687b      	ldr	r3, [r7, #4]
  40b642:	895b      	ldrh	r3, [r3, #10]
  40b644:	2b29      	cmp	r3, #41	; 0x29
  40b646:	d803      	bhi.n	40b650 <etharp_arp_input+0x24>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_arp_input: packet dropped, too short (%"S16_F"/%"S16_F")\n", p->tot_len,
      (s16_t)SIZEOF_ETHARP_PACKET));
    ETHARP_STATS_INC(etharp.lenerr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
  40b648:	6878      	ldr	r0, [r7, #4]
  40b64a:	4b59      	ldr	r3, [pc, #356]	; (40b7b0 <etharp_arp_input+0x184>)
  40b64c:	4798      	blx	r3
    return;
  40b64e:	e0ac      	b.n	40b7aa <etharp_arp_input+0x17e>
  }

  ethhdr = (struct eth_hdr *)p->payload;
  40b650:	687b      	ldr	r3, [r7, #4]
  40b652:	685b      	ldr	r3, [r3, #4]
  40b654:	623b      	str	r3, [r7, #32]
  hdr = (struct etharp_hdr *)((u8_t*)ethhdr + SIZEOF_ETH_HDR);
  40b656:	6a3b      	ldr	r3, [r7, #32]
  40b658:	330e      	adds	r3, #14
  40b65a:	61fb      	str	r3, [r7, #28]
    hdr = (struct etharp_hdr *)(((u8_t*)ethhdr) + SIZEOF_ETH_HDR + SIZEOF_VLAN_HDR);
  }
#endif /* ETHARP_SUPPORT_VLAN */

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
  40b65c:	69fb      	ldr	r3, [r7, #28]
  40b65e:	881b      	ldrh	r3, [r3, #0]
  40b660:	b29b      	uxth	r3, r3
  40b662:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  40b666:	d10c      	bne.n	40b682 <etharp_arp_input+0x56>
      (hdr->hwlen != ETHARP_HWADDR_LEN) ||
  40b668:	69fb      	ldr	r3, [r7, #28]
  40b66a:	791b      	ldrb	r3, [r3, #4]
    hdr = (struct etharp_hdr *)(((u8_t*)ethhdr) + SIZEOF_ETH_HDR + SIZEOF_VLAN_HDR);
  }
#endif /* ETHARP_SUPPORT_VLAN */

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
  40b66c:	2b06      	cmp	r3, #6
  40b66e:	d108      	bne.n	40b682 <etharp_arp_input+0x56>
      (hdr->hwlen != ETHARP_HWADDR_LEN) ||
      (hdr->protolen != sizeof(ip_addr_t)) ||
  40b670:	69fb      	ldr	r3, [r7, #28]
  40b672:	795b      	ldrb	r3, [r3, #5]
  }
#endif /* ETHARP_SUPPORT_VLAN */

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
      (hdr->hwlen != ETHARP_HWADDR_LEN) ||
  40b674:	2b04      	cmp	r3, #4
  40b676:	d104      	bne.n	40b682 <etharp_arp_input+0x56>
      (hdr->protolen != sizeof(ip_addr_t)) ||
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
  40b678:	69fb      	ldr	r3, [r7, #28]
  40b67a:	885b      	ldrh	r3, [r3, #2]
  40b67c:	b29b      	uxth	r3, r3
#endif /* ETHARP_SUPPORT_VLAN */

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
      (hdr->hwlen != ETHARP_HWADDR_LEN) ||
      (hdr->protolen != sizeof(ip_addr_t)) ||
  40b67e:	2b08      	cmp	r3, #8
  40b680:	d003      	beq.n	40b68a <etharp_arp_input+0x5e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_arp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, hdr->hwlen, hdr->proto, hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
  40b682:	6878      	ldr	r0, [r7, #4]
  40b684:	4b4a      	ldr	r3, [pc, #296]	; (40b7b0 <etharp_arp_input+0x184>)
  40b686:	4798      	blx	r3
    return;
  40b688:	e08f      	b.n	40b7aa <etharp_arp_input+0x17e>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip_addr2 to aligned ip_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
  40b68a:	69fb      	ldr	r3, [r7, #28]
  40b68c:	f103 010e 	add.w	r1, r3, #14
  40b690:	f107 0318 	add.w	r3, r7, #24
  40b694:	2204      	movs	r2, #4
  40b696:	4618      	mov	r0, r3
  40b698:	4b46      	ldr	r3, [pc, #280]	; (40b7b4 <etharp_arp_input+0x188>)
  40b69a:	4798      	blx	r3
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
  40b69c:	69fb      	ldr	r3, [r7, #28]
  40b69e:	f103 0118 	add.w	r1, r3, #24
  40b6a2:	f107 0314 	add.w	r3, r7, #20
  40b6a6:	2204      	movs	r2, #4
  40b6a8:	4618      	mov	r0, r3
  40b6aa:	4b42      	ldr	r3, [pc, #264]	; (40b7b4 <etharp_arp_input+0x188>)
  40b6ac:	4798      	blx	r3

  /* this interface is not configured? */
  if (ip_addr_isany(&netif->ip_addr)) {
  40b6ae:	68fb      	ldr	r3, [r7, #12]
  40b6b0:	3304      	adds	r3, #4
  40b6b2:	2b00      	cmp	r3, #0
  40b6b4:	d003      	beq.n	40b6be <etharp_arp_input+0x92>
  40b6b6:	68fb      	ldr	r3, [r7, #12]
  40b6b8:	685b      	ldr	r3, [r3, #4]
  40b6ba:	2b00      	cmp	r3, #0
  40b6bc:	d103      	bne.n	40b6c6 <etharp_arp_input+0x9a>
    for_us = 0;
  40b6be:	2300      	movs	r3, #0
  40b6c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  40b6c4:	e009      	b.n	40b6da <etharp_arp_input+0xae>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip_addr_cmp(&dipaddr, &(netif->ip_addr));
  40b6c6:	697a      	ldr	r2, [r7, #20]
  40b6c8:	68fb      	ldr	r3, [r7, #12]
  40b6ca:	685b      	ldr	r3, [r3, #4]
  40b6cc:	429a      	cmp	r2, r3
  40b6ce:	bf0c      	ite	eq
  40b6d0:	2301      	moveq	r3, #1
  40b6d2:	2300      	movne	r3, #0
  40b6d4:	b2db      	uxtb	r3, r3
  40b6d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
  40b6da:	69fb      	ldr	r3, [r7, #28]
  40b6dc:	f103 0208 	add.w	r2, r3, #8
  40b6e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  40b6e4:	2b00      	cmp	r3, #0
  40b6e6:	d001      	beq.n	40b6ec <etharp_arp_input+0xc0>
  40b6e8:	2301      	movs	r3, #1
  40b6ea:	e000      	b.n	40b6ee <etharp_arp_input+0xc2>
  40b6ec:	2302      	movs	r3, #2
  40b6ee:	f107 0118 	add.w	r1, r7, #24
  40b6f2:	68f8      	ldr	r0, [r7, #12]
  40b6f4:	4c30      	ldr	r4, [pc, #192]	; (40b7b8 <etharp_arp_input+0x18c>)
  40b6f6:	47a0      	blx	r4
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
  40b6f8:	69fb      	ldr	r3, [r7, #28]
  40b6fa:	88db      	ldrh	r3, [r3, #6]
  40b6fc:	b29b      	uxth	r3, r3
  40b6fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  40b702:	d003      	beq.n	40b70c <etharp_arp_input+0xe0>
  40b704:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40b708:	d045      	beq.n	40b796 <etharp_arp_input+0x16a>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: ARP unknown opcode type %"S16_F"\n", htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
  40b70a:	e04b      	b.n	40b7a4 <etharp_arp_input+0x178>
     * reply. In any case, we time-stamp any existing ARP entry,
     * and possiby send out an IP packet that was queued on it. */

    LWIP_DEBUGF (ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: incoming ARP request\n"));
    /* ARP request for our address? */
    if (for_us) {
  40b70c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  40b710:	2b00      	cmp	r3, #0
  40b712:	d03c      	beq.n	40b78e <etharp_arp_input+0x162>

      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: replying to ARP request for our IP address\n"));
      /* Re-use pbuf to send ARP reply.
         Since we are re-using an existing pbuf, we can't call etharp_raw since
         that would allocate a new pbuf. */
      hdr->opcode = htons(ARP_REPLY);
  40b714:	2002      	movs	r0, #2
  40b716:	4b29      	ldr	r3, [pc, #164]	; (40b7bc <etharp_arp_input+0x190>)
  40b718:	4798      	blx	r3
  40b71a:	4603      	mov	r3, r0
  40b71c:	461a      	mov	r2, r3
  40b71e:	69fb      	ldr	r3, [r7, #28]
  40b720:	80da      	strh	r2, [r3, #6]

      IPADDR2_COPY(&hdr->dipaddr, &hdr->sipaddr);
  40b722:	69fb      	ldr	r3, [r7, #28]
  40b724:	f103 0018 	add.w	r0, r3, #24
  40b728:	69fb      	ldr	r3, [r7, #28]
  40b72a:	330e      	adds	r3, #14
  40b72c:	2204      	movs	r2, #4
  40b72e:	4619      	mov	r1, r3
  40b730:	4b20      	ldr	r3, [pc, #128]	; (40b7b4 <etharp_arp_input+0x188>)
  40b732:	4798      	blx	r3
      IPADDR2_COPY(&hdr->sipaddr, &netif->ip_addr);
  40b734:	69fb      	ldr	r3, [r7, #28]
  40b736:	f103 000e 	add.w	r0, r3, #14
  40b73a:	68fb      	ldr	r3, [r7, #12]
  40b73c:	3304      	adds	r3, #4
  40b73e:	2204      	movs	r2, #4
  40b740:	4619      	mov	r1, r3
  40b742:	4b1c      	ldr	r3, [pc, #112]	; (40b7b4 <etharp_arp_input+0x188>)
  40b744:	4798      	blx	r3
       * 'sender IP address' MUST be sent using link-layer broadcast instead of
       * link-layer unicast. (See RFC3927 Section 2.5, last paragraph) */
      ethdst_hwaddr = ip_addr_islinklocal(&netif->ip_addr) ? (u8_t*)(ethbroadcast.addr) : hdr->shwaddr.addr;
#endif /* LWIP_AUTOIP */

      ETHADDR16_COPY(&hdr->dhwaddr, &hdr->shwaddr);
  40b746:	69fb      	ldr	r3, [r7, #28]
  40b748:	f103 0012 	add.w	r0, r3, #18
  40b74c:	69fb      	ldr	r3, [r7, #28]
  40b74e:	3308      	adds	r3, #8
  40b750:	2206      	movs	r2, #6
  40b752:	4619      	mov	r1, r3
  40b754:	4b17      	ldr	r3, [pc, #92]	; (40b7b4 <etharp_arp_input+0x188>)
  40b756:	4798      	blx	r3
#if LWIP_AUTOIP
      ETHADDR16_COPY(&ethhdr->dest, ethdst_hwaddr);
#else  /* LWIP_AUTOIP */
      ETHADDR16_COPY(&ethhdr->dest, &hdr->shwaddr);
  40b758:	6a38      	ldr	r0, [r7, #32]
  40b75a:	69fb      	ldr	r3, [r7, #28]
  40b75c:	3308      	adds	r3, #8
  40b75e:	2206      	movs	r2, #6
  40b760:	4619      	mov	r1, r3
  40b762:	4b14      	ldr	r3, [pc, #80]	; (40b7b4 <etharp_arp_input+0x188>)
  40b764:	4798      	blx	r3
#endif /* LWIP_AUTOIP */
      ETHADDR16_COPY(&hdr->shwaddr, ethaddr);
  40b766:	69fb      	ldr	r3, [r7, #28]
  40b768:	3308      	adds	r3, #8
  40b76a:	2206      	movs	r2, #6
  40b76c:	68b9      	ldr	r1, [r7, #8]
  40b76e:	4618      	mov	r0, r3
  40b770:	4b10      	ldr	r3, [pc, #64]	; (40b7b4 <etharp_arp_input+0x188>)
  40b772:	4798      	blx	r3
      ETHADDR16_COPY(&ethhdr->src, ethaddr);
  40b774:	6a3b      	ldr	r3, [r7, #32]
  40b776:	3306      	adds	r3, #6
  40b778:	2206      	movs	r2, #6
  40b77a:	68b9      	ldr	r1, [r7, #8]
  40b77c:	4618      	mov	r0, r3
  40b77e:	4b0d      	ldr	r3, [pc, #52]	; (40b7b4 <etharp_arp_input+0x188>)
  40b780:	4798      	blx	r3

      /* hwtype, hwaddr_len, proto, protolen and the type in the ethernet header
         are already correct, we tested that before */

      /* return ARP reply */
      netif->linkoutput(netif, p);
  40b782:	68fb      	ldr	r3, [r7, #12]
  40b784:	699b      	ldr	r3, [r3, #24]
  40b786:	6879      	ldr	r1, [r7, #4]
  40b788:	68f8      	ldr	r0, [r7, #12]
  40b78a:	4798      	blx	r3
    /* request was not directed to us */
    } else {
      /* { for_us == 0 and netif->ip_addr.addr != 0 } */
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: ARP request was not for us.\n"));
    }
    break;
  40b78c:	e00a      	b.n	40b7a4 <etharp_arp_input+0x178>
         are already correct, we tested that before */

      /* return ARP reply */
      netif->linkoutput(netif, p);
    /* we are not configured? */
    } else if (ip_addr_isany(&netif->ip_addr)) {
  40b78e:	68fb      	ldr	r3, [r7, #12]
  40b790:	3304      	adds	r3, #4
  40b792:	2b00      	cmp	r3, #0
    /* request was not directed to us */
    } else {
      /* { for_us == 0 and netif->ip_addr.addr != 0 } */
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: ARP request was not for us.\n"));
    }
    break;
  40b794:	e006      	b.n	40b7a4 <etharp_arp_input+0x178>
#if (LWIP_DHCP && DHCP_DOES_ARP_CHECK)
    /* DHCP wants to know about ARP replies from any host with an
     * IP address also offered to us by the DHCP server. We do not
     * want to take a duplicate IP address on a single network.
     * @todo How should we handle redundant (fail-over) interfaces? */
    dhcp_arp_reply(netif, &sipaddr);
  40b796:	f107 0318 	add.w	r3, r7, #24
  40b79a:	4619      	mov	r1, r3
  40b79c:	68f8      	ldr	r0, [r7, #12]
  40b79e:	4b08      	ldr	r3, [pc, #32]	; (40b7c0 <etharp_arp_input+0x194>)
  40b7a0:	4798      	blx	r3
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  40b7a2:	bf00      	nop
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: ARP unknown opcode type %"S16_F"\n", htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
  }
  /* free ARP packet */
  pbuf_free(p);
  40b7a4:	6878      	ldr	r0, [r7, #4]
  40b7a6:	4b02      	ldr	r3, [pc, #8]	; (40b7b0 <etharp_arp_input+0x184>)
  40b7a8:	4798      	blx	r3
}
  40b7aa:	372c      	adds	r7, #44	; 0x2c
  40b7ac:	46bd      	mov	sp, r7
  40b7ae:	bd90      	pop	{r4, r7, pc}
  40b7b0:	00406069 	.word	0x00406069
  40b7b4:	0040d859 	.word	0x0040d859
  40b7b8:	0040b495 	.word	0x0040b495
  40b7bc:	00402309 	.word	0x00402309
  40b7c0:	00402a49 	.word	0x00402a49

0040b7c4 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
  40b7c4:	b590      	push	{r4, r7, lr}
  40b7c6:	b085      	sub	sp, #20
  40b7c8:	af00      	add	r7, sp, #0
  40b7ca:	60f8      	str	r0, [r7, #12]
  40b7cc:	60b9      	str	r1, [r7, #8]
  40b7ce:	4613      	mov	r3, r2
  40b7d0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if ((arp_table[arp_idx].state == ETHARP_STATE_STABLE) && 
  40b7d2:	79fa      	ldrb	r2, [r7, #7]
  40b7d4:	4921      	ldr	r1, [pc, #132]	; (40b85c <etharp_output_to_arp_index+0x98>)
  40b7d6:	4613      	mov	r3, r2
  40b7d8:	009b      	lsls	r3, r3, #2
  40b7da:	4413      	add	r3, r2
  40b7dc:	009b      	lsls	r3, r3, #2
  40b7de:	440b      	add	r3, r1
  40b7e0:	3312      	adds	r3, #18
  40b7e2:	781b      	ldrb	r3, [r3, #0]
  40b7e4:	2b02      	cmp	r3, #2
  40b7e6:	d123      	bne.n	40b830 <etharp_output_to_arp_index+0x6c>
      (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED)) {
  40b7e8:	79fa      	ldrb	r2, [r7, #7]
  40b7ea:	491c      	ldr	r1, [pc, #112]	; (40b85c <etharp_output_to_arp_index+0x98>)
  40b7ec:	4613      	mov	r3, r2
  40b7ee:	009b      	lsls	r3, r3, #2
  40b7f0:	4413      	add	r3, r2
  40b7f2:	009b      	lsls	r3, r3, #2
  40b7f4:	440b      	add	r3, r1
  40b7f6:	3313      	adds	r3, #19
  40b7f8:	781b      	ldrb	r3, [r3, #0]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if ((arp_table[arp_idx].state == ETHARP_STATE_STABLE) && 
  40b7fa:	2be3      	cmp	r3, #227	; 0xe3
  40b7fc:	d918      	bls.n	40b830 <etharp_output_to_arp_index+0x6c>
      (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED)) {
    if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
  40b7fe:	79fa      	ldrb	r2, [r7, #7]
  40b800:	4613      	mov	r3, r2
  40b802:	009b      	lsls	r3, r3, #2
  40b804:	4413      	add	r3, r2
  40b806:	009b      	lsls	r3, r3, #2
  40b808:	4a14      	ldr	r2, [pc, #80]	; (40b85c <etharp_output_to_arp_index+0x98>)
  40b80a:	4413      	add	r3, r2
  40b80c:	3304      	adds	r3, #4
  40b80e:	4619      	mov	r1, r3
  40b810:	68f8      	ldr	r0, [r7, #12]
  40b812:	4b13      	ldr	r3, [pc, #76]	; (40b860 <etharp_output_to_arp_index+0x9c>)
  40b814:	4798      	blx	r3
  40b816:	4603      	mov	r3, r0
  40b818:	2b00      	cmp	r3, #0
  40b81a:	d109      	bne.n	40b830 <etharp_output_to_arp_index+0x6c>
      arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING;
  40b81c:	79fa      	ldrb	r2, [r7, #7]
  40b81e:	490f      	ldr	r1, [pc, #60]	; (40b85c <etharp_output_to_arp_index+0x98>)
  40b820:	4613      	mov	r3, r2
  40b822:	009b      	lsls	r3, r3, #2
  40b824:	4413      	add	r3, r2
  40b826:	009b      	lsls	r3, r3, #2
  40b828:	440b      	add	r3, r1
  40b82a:	3312      	adds	r3, #18
  40b82c:	2203      	movs	r2, #3
  40b82e:	701a      	strb	r2, [r3, #0]
    }
  }
  
  return etharp_send_ip(netif, q, (struct eth_addr*)(netif->hwaddr),
  40b830:	68fb      	ldr	r3, [r7, #12]
  40b832:	f103 012b 	add.w	r1, r3, #43	; 0x2b
    &arp_table[arp_idx].ethaddr);
  40b836:	79fa      	ldrb	r2, [r7, #7]
    if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
      arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING;
    }
  }
  
  return etharp_send_ip(netif, q, (struct eth_addr*)(netif->hwaddr),
  40b838:	4613      	mov	r3, r2
  40b83a:	009b      	lsls	r3, r3, #2
  40b83c:	4413      	add	r3, r2
  40b83e:	009b      	lsls	r3, r3, #2
  40b840:	3308      	adds	r3, #8
  40b842:	4a06      	ldr	r2, [pc, #24]	; (40b85c <etharp_output_to_arp_index+0x98>)
  40b844:	4413      	add	r3, r2
  40b846:	3304      	adds	r3, #4
  40b848:	460a      	mov	r2, r1
  40b84a:	68b9      	ldr	r1, [r7, #8]
  40b84c:	68f8      	ldr	r0, [r7, #12]
  40b84e:	4c05      	ldr	r4, [pc, #20]	; (40b864 <etharp_output_to_arp_index+0xa0>)
  40b850:	47a0      	blx	r4
  40b852:	4603      	mov	r3, r0
    &arp_table[arp_idx].ethaddr);
}
  40b854:	4618      	mov	r0, r3
  40b856:	3714      	adds	r7, #20
  40b858:	46bd      	mov	sp, r7
  40b85a:	bd90      	pop	{r4, r7, pc}
  40b85c:	204025d8 	.word	0x204025d8
  40b860:	0040bd31 	.word	0x0040bd31
  40b864:	0040b441 	.word	0x0040b441

0040b868 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or etharp_send_ip().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, ip_addr_t *ipaddr)
{
  40b868:	b590      	push	{r4, r7, lr}
  40b86a:	b089      	sub	sp, #36	; 0x24
  40b86c:	af00      	add	r7, sp, #0
  40b86e:	60f8      	str	r0, [r7, #12]
  40b870:	60b9      	str	r1, [r7, #8]
  40b872:	607a      	str	r2, [r7, #4]
  struct eth_addr *dest;
  struct eth_addr mcastaddr;
  ip_addr_t *dst_addr = ipaddr;
  40b874:	687b      	ldr	r3, [r7, #4]
  40b876:	61bb      	str	r3, [r7, #24]
  LWIP_ASSERT("netif != NULL", netif != NULL);
  LWIP_ASSERT("q != NULL", q != NULL);
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);

  /* make room for Ethernet header - should not fail */
  if (pbuf_header(q, sizeof(struct eth_hdr)) != 0) {
  40b878:	210e      	movs	r1, #14
  40b87a:	68b8      	ldr	r0, [r7, #8]
  40b87c:	4b5d      	ldr	r3, [pc, #372]	; (40b9f4 <etharp_output+0x18c>)
  40b87e:	4798      	blx	r3
  40b880:	4603      	mov	r3, r0
  40b882:	2b00      	cmp	r3, #0
  40b884:	d002      	beq.n	40b88c <etharp_output+0x24>
    /* bail out */
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_output: could not allocate room for header.\n"));
    LINK_STATS_INC(link.lenerr);
    return ERR_BUF;
  40b886:	f06f 0301 	mvn.w	r3, #1
  40b88a:	e0af      	b.n	40b9ec <etharp_output+0x184>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip_addr_isbroadcast(ipaddr, netif)) {
  40b88c:	687b      	ldr	r3, [r7, #4]
  40b88e:	681b      	ldr	r3, [r3, #0]
  40b890:	68f9      	ldr	r1, [r7, #12]
  40b892:	4618      	mov	r0, r3
  40b894:	4b58      	ldr	r3, [pc, #352]	; (40b9f8 <etharp_output+0x190>)
  40b896:	4798      	blx	r3
  40b898:	4603      	mov	r3, r0
  40b89a:	2b00      	cmp	r3, #0
  40b89c:	d002      	beq.n	40b8a4 <etharp_output+0x3c>
    /* broadcast on Ethernet also */
    dest = (struct eth_addr *)&ethbroadcast;
  40b89e:	4b57      	ldr	r3, [pc, #348]	; (40b9fc <etharp_output+0x194>)
  40b8a0:	61fb      	str	r3, [r7, #28]
  40b8a2:	e09a      	b.n	40b9da <etharp_output+0x172>
  /* multicast destination IP address? */
  } else if (ip_addr_ismulticast(ipaddr)) {
  40b8a4:	687b      	ldr	r3, [r7, #4]
  40b8a6:	681b      	ldr	r3, [r3, #0]
  40b8a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  40b8ac:	2be0      	cmp	r3, #224	; 0xe0
  40b8ae:	d116      	bne.n	40b8de <etharp_output+0x76>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_MULTICAST_ADDR_0;
  40b8b0:	2301      	movs	r3, #1
  40b8b2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_MULTICAST_ADDR_1;
  40b8b4:	2300      	movs	r3, #0
  40b8b6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_MULTICAST_ADDR_2;
  40b8b8:	235e      	movs	r3, #94	; 0x5e
  40b8ba:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
  40b8bc:	687b      	ldr	r3, [r7, #4]
  40b8be:	3301      	adds	r3, #1
  40b8c0:	781b      	ldrb	r3, [r3, #0]
  40b8c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  40b8c6:	b2db      	uxtb	r3, r3
  40b8c8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
  40b8ca:	687b      	ldr	r3, [r7, #4]
  40b8cc:	789b      	ldrb	r3, [r3, #2]
  40b8ce:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
  40b8d0:	687b      	ldr	r3, [r7, #4]
  40b8d2:	78db      	ldrb	r3, [r3, #3]
  40b8d4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
  40b8d6:	f107 0310 	add.w	r3, r7, #16
  40b8da:	61fb      	str	r3, [r7, #28]
  40b8dc:	e07d      	b.n	40b9da <etharp_output+0x172>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip_addr_netcmp(ipaddr, &(netif->ip_addr), &(netif->netmask)) &&
  40b8de:	687b      	ldr	r3, [r7, #4]
  40b8e0:	681a      	ldr	r2, [r3, #0]
  40b8e2:	68fb      	ldr	r3, [r7, #12]
  40b8e4:	685b      	ldr	r3, [r3, #4]
  40b8e6:	405a      	eors	r2, r3
  40b8e8:	68fb      	ldr	r3, [r7, #12]
  40b8ea:	689b      	ldr	r3, [r3, #8]
  40b8ec:	4013      	ands	r3, r2
  40b8ee:	2b00      	cmp	r3, #0
  40b8f0:	d015      	beq.n	40b91e <etharp_output+0xb6>
        !ip_addr_islinklocal(ipaddr)) {
  40b8f2:	687b      	ldr	r3, [r7, #4]
  40b8f4:	681b      	ldr	r3, [r3, #0]
  40b8f6:	b29b      	uxth	r3, r3
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip_addr_netcmp(ipaddr, &(netif->ip_addr), &(netif->netmask)) &&
  40b8f8:	f64f 62a9 	movw	r2, #65193	; 0xfea9
  40b8fc:	4293      	cmp	r3, r2
  40b8fe:	d00e      	beq.n	40b91e <etharp_output+0xb6>
         router for forwarding". */
      if (!ip_addr_islinklocal(&iphdr->src))
#endif /* LWIP_AUTOIP */
      {
        /* interface has default gateway? */
        if (!ip_addr_isany(&netif->gw)) {
  40b900:	68fb      	ldr	r3, [r7, #12]
  40b902:	330c      	adds	r3, #12
  40b904:	2b00      	cmp	r3, #0
  40b906:	d007      	beq.n	40b918 <etharp_output+0xb0>
  40b908:	68fb      	ldr	r3, [r7, #12]
  40b90a:	68db      	ldr	r3, [r3, #12]
  40b90c:	2b00      	cmp	r3, #0
  40b90e:	d003      	beq.n	40b918 <etharp_output+0xb0>
          /* send to hardware address of default gateway IP address */
          dst_addr = &(netif->gw);
  40b910:	68fb      	ldr	r3, [r7, #12]
  40b912:	330c      	adds	r3, #12
  40b914:	61bb      	str	r3, [r7, #24]
  40b916:	e002      	b.n	40b91e <etharp_output+0xb6>
        /* no default gateway available */
        } else {
          /* no route to destination error (default gateway missing) */
          return ERR_RTE;
  40b918:	f06f 0303 	mvn.w	r3, #3
  40b91c:	e066      	b.n	40b9ec <etharp_output+0x184>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
  40b91e:	4b38      	ldr	r3, [pc, #224]	; (40ba00 <etharp_output+0x198>)
  40b920:	781b      	ldrb	r3, [r3, #0]
  40b922:	4619      	mov	r1, r3
  40b924:	4a37      	ldr	r2, [pc, #220]	; (40ba04 <etharp_output+0x19c>)
  40b926:	460b      	mov	r3, r1
  40b928:	009b      	lsls	r3, r3, #2
  40b92a:	440b      	add	r3, r1
  40b92c:	009b      	lsls	r3, r3, #2
  40b92e:	4413      	add	r3, r2
  40b930:	3312      	adds	r3, #18
  40b932:	781b      	ldrb	r3, [r3, #0]
  40b934:	2b01      	cmp	r3, #1
  40b936:	d917      	bls.n	40b968 <etharp_output+0x100>
            (ip_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
  40b938:	69bb      	ldr	r3, [r7, #24]
  40b93a:	681a      	ldr	r2, [r3, #0]
  40b93c:	4b30      	ldr	r3, [pc, #192]	; (40ba00 <etharp_output+0x198>)
  40b93e:	781b      	ldrb	r3, [r3, #0]
  40b940:	4618      	mov	r0, r3
  40b942:	4930      	ldr	r1, [pc, #192]	; (40ba04 <etharp_output+0x19c>)
  40b944:	4603      	mov	r3, r0
  40b946:	009b      	lsls	r3, r3, #2
  40b948:	4403      	add	r3, r0
  40b94a:	009b      	lsls	r3, r3, #2
  40b94c:	440b      	add	r3, r1
  40b94e:	3304      	adds	r3, #4
  40b950:	681b      	ldr	r3, [r3, #0]
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
  40b952:	429a      	cmp	r2, r3
  40b954:	d108      	bne.n	40b968 <etharp_output+0x100>
            (ip_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
  40b956:	4b2a      	ldr	r3, [pc, #168]	; (40ba00 <etharp_output+0x198>)
  40b958:	781b      	ldrb	r3, [r3, #0]
  40b95a:	461a      	mov	r2, r3
  40b95c:	68b9      	ldr	r1, [r7, #8]
  40b95e:	68f8      	ldr	r0, [r7, #12]
  40b960:	4b29      	ldr	r3, [pc, #164]	; (40ba08 <etharp_output+0x1a0>)
  40b962:	4798      	blx	r3
  40b964:	4603      	mov	r3, r0
  40b966:	e041      	b.n	40b9ec <etharp_output+0x184>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
  40b968:	2300      	movs	r3, #0
  40b96a:	75fb      	strb	r3, [r7, #23]
  40b96c:	e02a      	b.n	40b9c4 <etharp_output+0x15c>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
  40b96e:	f997 2017 	ldrsb.w	r2, [r7, #23]
  40b972:	4924      	ldr	r1, [pc, #144]	; (40ba04 <etharp_output+0x19c>)
  40b974:	4613      	mov	r3, r2
  40b976:	009b      	lsls	r3, r3, #2
  40b978:	4413      	add	r3, r2
  40b97a:	009b      	lsls	r3, r3, #2
  40b97c:	440b      	add	r3, r1
  40b97e:	3312      	adds	r3, #18
  40b980:	781b      	ldrb	r3, [r3, #0]
  40b982:	2b01      	cmp	r3, #1
  40b984:	d918      	bls.n	40b9b8 <etharp_output+0x150>
          (ip_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
  40b986:	69bb      	ldr	r3, [r7, #24]
  40b988:	6819      	ldr	r1, [r3, #0]
  40b98a:	f997 2017 	ldrsb.w	r2, [r7, #23]
  40b98e:	481d      	ldr	r0, [pc, #116]	; (40ba04 <etharp_output+0x19c>)
  40b990:	4613      	mov	r3, r2
  40b992:	009b      	lsls	r3, r3, #2
  40b994:	4413      	add	r3, r2
  40b996:	009b      	lsls	r3, r3, #2
  40b998:	4403      	add	r3, r0
  40b99a:	3304      	adds	r3, #4
  40b99c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
  40b99e:	4299      	cmp	r1, r3
  40b9a0:	d10a      	bne.n	40b9b8 <etharp_output+0x150>
          (ip_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
  40b9a2:	7dfa      	ldrb	r2, [r7, #23]
  40b9a4:	4b16      	ldr	r3, [pc, #88]	; (40ba00 <etharp_output+0x198>)
  40b9a6:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
  40b9a8:	7dfb      	ldrb	r3, [r7, #23]
  40b9aa:	461a      	mov	r2, r3
  40b9ac:	68b9      	ldr	r1, [r7, #8]
  40b9ae:	68f8      	ldr	r0, [r7, #12]
  40b9b0:	4b15      	ldr	r3, [pc, #84]	; (40ba08 <etharp_output+0x1a0>)
  40b9b2:	4798      	blx	r3
  40b9b4:	4603      	mov	r3, r0
  40b9b6:	e019      	b.n	40b9ec <etharp_output+0x184>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
  40b9b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
  40b9bc:	b2db      	uxtb	r3, r3
  40b9be:	3301      	adds	r3, #1
  40b9c0:	b2db      	uxtb	r3, r3
  40b9c2:	75fb      	strb	r3, [r7, #23]
  40b9c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
  40b9c8:	2b09      	cmp	r3, #9
  40b9ca:	ddd0      	ble.n	40b96e <etharp_output+0x106>
        return etharp_output_to_arp_index(netif, q, i);
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
  40b9cc:	68ba      	ldr	r2, [r7, #8]
  40b9ce:	69b9      	ldr	r1, [r7, #24]
  40b9d0:	68f8      	ldr	r0, [r7, #12]
  40b9d2:	4b0e      	ldr	r3, [pc, #56]	; (40ba0c <etharp_output+0x1a4>)
  40b9d4:	4798      	blx	r3
  40b9d6:	4603      	mov	r3, r0
  40b9d8:	e008      	b.n	40b9ec <etharp_output+0x184>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return etharp_send_ip(netif, q, (struct eth_addr*)(netif->hwaddr), dest);
  40b9da:	68fb      	ldr	r3, [r7, #12]
  40b9dc:	f103 022b 	add.w	r2, r3, #43	; 0x2b
  40b9e0:	69fb      	ldr	r3, [r7, #28]
  40b9e2:	68b9      	ldr	r1, [r7, #8]
  40b9e4:	68f8      	ldr	r0, [r7, #12]
  40b9e6:	4c0a      	ldr	r4, [pc, #40]	; (40ba10 <etharp_output+0x1a8>)
  40b9e8:	47a0      	blx	r4
  40b9ea:	4603      	mov	r3, r0
}
  40b9ec:	4618      	mov	r0, r3
  40b9ee:	3724      	adds	r7, #36	; 0x24
  40b9f0:	46bd      	mov	sp, r7
  40b9f2:	bd90      	pop	{r4, r7, pc}
  40b9f4:	00405f8d 	.word	0x00405f8d
  40b9f8:	00404745 	.word	0x00404745
  40b9fc:	00414a78 	.word	0x00414a78
  40ba00:	204026a0 	.word	0x204026a0
  40ba04:	204025d8 	.word	0x204025d8
  40ba08:	0040b7c5 	.word	0x0040b7c5
  40ba0c:	0040ba15 	.word	0x0040ba15
  40ba10:	0040b441 	.word	0x0040b441

0040ba14 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, ip_addr_t *ipaddr, struct pbuf *q)
{
  40ba14:	b590      	push	{r4, r7, lr}
  40ba16:	b08b      	sub	sp, #44	; 0x2c
  40ba18:	af00      	add	r7, sp, #0
  40ba1a:	60f8      	str	r0, [r7, #12]
  40ba1c:	60b9      	str	r1, [r7, #8]
  40ba1e:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
  40ba20:	68fb      	ldr	r3, [r7, #12]
  40ba22:	332b      	adds	r3, #43	; 0x2b
  40ba24:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_MEM;
  40ba26:	23ff      	movs	r3, #255	; 0xff
  40ba28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip_addr_isbroadcast(ipaddr, netif) ||
  40ba2c:	68bb      	ldr	r3, [r7, #8]
  40ba2e:	681b      	ldr	r3, [r3, #0]
  40ba30:	68f9      	ldr	r1, [r7, #12]
  40ba32:	4618      	mov	r0, r3
  40ba34:	4b72      	ldr	r3, [pc, #456]	; (40bc00 <etharp_query+0x1ec>)
  40ba36:	4798      	blx	r3
  40ba38:	4603      	mov	r3, r0
  40ba3a:	2b00      	cmp	r3, #0
  40ba3c:	d10c      	bne.n	40ba58 <etharp_query+0x44>
      ip_addr_ismulticast(ipaddr) ||
  40ba3e:	68bb      	ldr	r3, [r7, #8]
  40ba40:	681b      	ldr	r3, [r3, #0]
  40ba42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
  err_t result = ERR_MEM;
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip_addr_isbroadcast(ipaddr, netif) ||
  40ba46:	2be0      	cmp	r3, #224	; 0xe0
  40ba48:	d006      	beq.n	40ba58 <etharp_query+0x44>
      ip_addr_ismulticast(ipaddr) ||
  40ba4a:	68bb      	ldr	r3, [r7, #8]
  40ba4c:	2b00      	cmp	r3, #0
  40ba4e:	d003      	beq.n	40ba58 <etharp_query+0x44>
      ip_addr_isany(ipaddr)) {
  40ba50:	68bb      	ldr	r3, [r7, #8]
  40ba52:	681b      	ldr	r3, [r3, #0]
  40ba54:	2b00      	cmp	r3, #0
  40ba56:	d102      	bne.n	40ba5e <etharp_query+0x4a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
  40ba58:	f06f 030d 	mvn.w	r3, #13
  40ba5c:	e0cc      	b.n	40bbf8 <etharp_query+0x1e4>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD);
  40ba5e:	2101      	movs	r1, #1
  40ba60:	68b8      	ldr	r0, [r7, #8]
  40ba62:	4b68      	ldr	r3, [pc, #416]	; (40bc04 <etharp_query+0x1f0>)
  40ba64:	4798      	blx	r3
  40ba66:	4603      	mov	r3, r0
  40ba68:	75fb      	strb	r3, [r7, #23]

  /* could not find or create entry? */
  if (i < 0) {
  40ba6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
  40ba6e:	2b00      	cmp	r3, #0
  40ba70:	da02      	bge.n	40ba78 <etharp_query+0x64>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
  40ba72:	f997 3017 	ldrsb.w	r3, [r7, #23]
  40ba76:	e0bf      	b.n	40bbf8 <etharp_query+0x1e4>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
  40ba78:	f997 2017 	ldrsb.w	r2, [r7, #23]
  40ba7c:	4962      	ldr	r1, [pc, #392]	; (40bc08 <etharp_query+0x1f4>)
  40ba7e:	4613      	mov	r3, r2
  40ba80:	009b      	lsls	r3, r3, #2
  40ba82:	4413      	add	r3, r2
  40ba84:	009b      	lsls	r3, r3, #2
  40ba86:	440b      	add	r3, r1
  40ba88:	3312      	adds	r3, #18
  40ba8a:	781b      	ldrb	r3, [r3, #0]
  40ba8c:	2b00      	cmp	r3, #0
  40ba8e:	d10a      	bne.n	40baa6 <etharp_query+0x92>
    arp_table[i].state = ETHARP_STATE_PENDING;
  40ba90:	f997 2017 	ldrsb.w	r2, [r7, #23]
  40ba94:	495c      	ldr	r1, [pc, #368]	; (40bc08 <etharp_query+0x1f4>)
  40ba96:	4613      	mov	r3, r2
  40ba98:	009b      	lsls	r3, r3, #2
  40ba9a:	4413      	add	r3, r2
  40ba9c:	009b      	lsls	r3, r3, #2
  40ba9e:	440b      	add	r3, r1
  40baa0:	3312      	adds	r3, #18
  40baa2:	2201      	movs	r2, #1
  40baa4:	701a      	strb	r2, [r3, #0]
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a pending entry? or an implicit query request? */
  if ((arp_table[i].state == ETHARP_STATE_PENDING) || (q == NULL)) {
  40baa6:	f997 2017 	ldrsb.w	r2, [r7, #23]
  40baaa:	4957      	ldr	r1, [pc, #348]	; (40bc08 <etharp_query+0x1f4>)
  40baac:	4613      	mov	r3, r2
  40baae:	009b      	lsls	r3, r3, #2
  40bab0:	4413      	add	r3, r2
  40bab2:	009b      	lsls	r3, r3, #2
  40bab4:	440b      	add	r3, r1
  40bab6:	3312      	adds	r3, #18
  40bab8:	781b      	ldrb	r3, [r3, #0]
  40baba:	2b01      	cmp	r3, #1
  40babc:	d002      	beq.n	40bac4 <etharp_query+0xb0>
  40babe:	687b      	ldr	r3, [r7, #4]
  40bac0:	2b00      	cmp	r3, #0
  40bac2:	d10c      	bne.n	40bade <etharp_query+0xca>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
  40bac4:	68b9      	ldr	r1, [r7, #8]
  40bac6:	68f8      	ldr	r0, [r7, #12]
  40bac8:	4b50      	ldr	r3, [pc, #320]	; (40bc0c <etharp_query+0x1f8>)
  40baca:	4798      	blx	r3
  40bacc:	4603      	mov	r3, r0
  40bace:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
  40bad2:	687b      	ldr	r3, [r7, #4]
  40bad4:	2b00      	cmp	r3, #0
  40bad6:	d102      	bne.n	40bade <etharp_query+0xca>
      return result;
  40bad8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
  40badc:	e08c      	b.n	40bbf8 <etharp_query+0x1e4>
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
  40bade:	f997 2017 	ldrsb.w	r2, [r7, #23]
  40bae2:	4949      	ldr	r1, [pc, #292]	; (40bc08 <etharp_query+0x1f4>)
  40bae4:	4613      	mov	r3, r2
  40bae6:	009b      	lsls	r3, r3, #2
  40bae8:	4413      	add	r3, r2
  40baea:	009b      	lsls	r3, r3, #2
  40baec:	440b      	add	r3, r1
  40baee:	3312      	adds	r3, #18
  40baf0:	781b      	ldrb	r3, [r3, #0]
  40baf2:	2b01      	cmp	r3, #1
  40baf4:	d915      	bls.n	40bb22 <etharp_query+0x10e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
  40baf6:	7dfa      	ldrb	r2, [r7, #23]
  40baf8:	4b45      	ldr	r3, [pc, #276]	; (40bc10 <etharp_query+0x1fc>)
  40bafa:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = etharp_send_ip(netif, q, srcaddr, &(arp_table[i].ethaddr));
  40bafc:	f997 2017 	ldrsb.w	r2, [r7, #23]
  40bb00:	4613      	mov	r3, r2
  40bb02:	009b      	lsls	r3, r3, #2
  40bb04:	4413      	add	r3, r2
  40bb06:	009b      	lsls	r3, r3, #2
  40bb08:	3308      	adds	r3, #8
  40bb0a:	4a3f      	ldr	r2, [pc, #252]	; (40bc08 <etharp_query+0x1f4>)
  40bb0c:	4413      	add	r3, r2
  40bb0e:	3304      	adds	r3, #4
  40bb10:	69ba      	ldr	r2, [r7, #24]
  40bb12:	6879      	ldr	r1, [r7, #4]
  40bb14:	68f8      	ldr	r0, [r7, #12]
  40bb16:	4c3f      	ldr	r4, [pc, #252]	; (40bc14 <etharp_query+0x200>)
  40bb18:	47a0      	blx	r4
  40bb1a:	4603      	mov	r3, r0
  40bb1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  40bb20:	e068      	b.n	40bbf4 <etharp_query+0x1e0>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
  40bb22:	f997 2017 	ldrsb.w	r2, [r7, #23]
  40bb26:	4938      	ldr	r1, [pc, #224]	; (40bc08 <etharp_query+0x1f4>)
  40bb28:	4613      	mov	r3, r2
  40bb2a:	009b      	lsls	r3, r3, #2
  40bb2c:	4413      	add	r3, r2
  40bb2e:	009b      	lsls	r3, r3, #2
  40bb30:	440b      	add	r3, r1
  40bb32:	3312      	adds	r3, #18
  40bb34:	781b      	ldrb	r3, [r3, #0]
  40bb36:	2b01      	cmp	r3, #1
  40bb38:	d15c      	bne.n	40bbf4 <etharp_query+0x1e0>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
  40bb3a:	2300      	movs	r3, #0
  40bb3c:	61fb      	str	r3, [r7, #28]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400) 
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
  40bb3e:	687b      	ldr	r3, [r7, #4]
  40bb40:	623b      	str	r3, [r7, #32]
    while (p) {
  40bb42:	e009      	b.n	40bb58 <etharp_query+0x144>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
      if(p->type != PBUF_ROM) {
  40bb44:	6a3b      	ldr	r3, [r7, #32]
  40bb46:	7b1b      	ldrb	r3, [r3, #12]
  40bb48:	2b01      	cmp	r3, #1
  40bb4a:	d002      	beq.n	40bb52 <etharp_query+0x13e>
        copy_needed = 1;
  40bb4c:	2301      	movs	r3, #1
  40bb4e:	61fb      	str	r3, [r7, #28]
        break;
  40bb50:	e005      	b.n	40bb5e <etharp_query+0x14a>
      }
      p = p->next;
  40bb52:	6a3b      	ldr	r3, [r7, #32]
  40bb54:	681b      	ldr	r3, [r3, #0]
  40bb56:	623b      	str	r3, [r7, #32]
    int copy_needed = 0;
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400) 
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
    while (p) {
  40bb58:	6a3b      	ldr	r3, [r7, #32]
  40bb5a:	2b00      	cmp	r3, #0
  40bb5c:	d1f2      	bne.n	40bb44 <etharp_query+0x130>
        copy_needed = 1;
        break;
      }
      p = p->next;
    }
    if(copy_needed) {
  40bb5e:	69fb      	ldr	r3, [r7, #28]
  40bb60:	2b00      	cmp	r3, #0
  40bb62:	d017      	beq.n	40bb94 <etharp_query+0x180>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_RAW, p->tot_len, PBUF_RAM);
  40bb64:	6a3b      	ldr	r3, [r7, #32]
  40bb66:	891b      	ldrh	r3, [r3, #8]
  40bb68:	2200      	movs	r2, #0
  40bb6a:	4619      	mov	r1, r3
  40bb6c:	2003      	movs	r0, #3
  40bb6e:	4b2a      	ldr	r3, [pc, #168]	; (40bc18 <etharp_query+0x204>)
  40bb70:	4798      	blx	r3
  40bb72:	6238      	str	r0, [r7, #32]
      if(p != NULL) {
  40bb74:	6a3b      	ldr	r3, [r7, #32]
  40bb76:	2b00      	cmp	r3, #0
  40bb78:	d011      	beq.n	40bb9e <etharp_query+0x18a>
        if (pbuf_copy(p, q) != ERR_OK) {
  40bb7a:	6879      	ldr	r1, [r7, #4]
  40bb7c:	6a38      	ldr	r0, [r7, #32]
  40bb7e:	4b27      	ldr	r3, [pc, #156]	; (40bc1c <etharp_query+0x208>)
  40bb80:	4798      	blx	r3
  40bb82:	4603      	mov	r3, r0
  40bb84:	2b00      	cmp	r3, #0
  40bb86:	d00a      	beq.n	40bb9e <etharp_query+0x18a>
          pbuf_free(p);
  40bb88:	6a38      	ldr	r0, [r7, #32]
  40bb8a:	4b25      	ldr	r3, [pc, #148]	; (40bc20 <etharp_query+0x20c>)
  40bb8c:	4798      	blx	r3
          p = NULL;
  40bb8e:	2300      	movs	r3, #0
  40bb90:	623b      	str	r3, [r7, #32]
  40bb92:	e004      	b.n	40bb9e <etharp_query+0x18a>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
  40bb94:	687b      	ldr	r3, [r7, #4]
  40bb96:	623b      	str	r3, [r7, #32]
      pbuf_ref(p);
  40bb98:	6a38      	ldr	r0, [r7, #32]
  40bb9a:	4b22      	ldr	r3, [pc, #136]	; (40bc24 <etharp_query+0x210>)
  40bb9c:	4798      	blx	r3
    }
    /* packet could be taken over? */
    if (p != NULL) {
  40bb9e:	6a3b      	ldr	r3, [r7, #32]
  40bba0:	2b00      	cmp	r3, #0
  40bba2:	d024      	beq.n	40bbee <etharp_query+0x1da>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
  40bba4:	f997 2017 	ldrsb.w	r2, [r7, #23]
  40bba8:	4917      	ldr	r1, [pc, #92]	; (40bc08 <etharp_query+0x1f4>)
  40bbaa:	4613      	mov	r3, r2
  40bbac:	009b      	lsls	r3, r3, #2
  40bbae:	4413      	add	r3, r2
  40bbb0:	009b      	lsls	r3, r3, #2
  40bbb2:	440b      	add	r3, r1
  40bbb4:	681b      	ldr	r3, [r3, #0]
  40bbb6:	2b00      	cmp	r3, #0
  40bbb8:	d00b      	beq.n	40bbd2 <etharp_query+0x1be>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
  40bbba:	f997 2017 	ldrsb.w	r2, [r7, #23]
  40bbbe:	4912      	ldr	r1, [pc, #72]	; (40bc08 <etharp_query+0x1f4>)
  40bbc0:	4613      	mov	r3, r2
  40bbc2:	009b      	lsls	r3, r3, #2
  40bbc4:	4413      	add	r3, r2
  40bbc6:	009b      	lsls	r3, r3, #2
  40bbc8:	440b      	add	r3, r1
  40bbca:	681b      	ldr	r3, [r3, #0]
  40bbcc:	4618      	mov	r0, r3
  40bbce:	4b14      	ldr	r3, [pc, #80]	; (40bc20 <etharp_query+0x20c>)
  40bbd0:	4798      	blx	r3
      }
      arp_table[i].q = p;
  40bbd2:	f997 2017 	ldrsb.w	r2, [r7, #23]
  40bbd6:	490c      	ldr	r1, [pc, #48]	; (40bc08 <etharp_query+0x1f4>)
  40bbd8:	4613      	mov	r3, r2
  40bbda:	009b      	lsls	r3, r3, #2
  40bbdc:	4413      	add	r3, r2
  40bbde:	009b      	lsls	r3, r3, #2
  40bbe0:	440b      	add	r3, r1
  40bbe2:	6a3a      	ldr	r2, [r7, #32]
  40bbe4:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
  40bbe6:	2300      	movs	r3, #0
  40bbe8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  40bbec:	e002      	b.n	40bbf4 <etharp_query+0x1e0>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
  40bbee:	23ff      	movs	r3, #255	; 0xff
  40bbf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
  40bbf4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
  40bbf8:	4618      	mov	r0, r3
  40bbfa:	372c      	adds	r7, #44	; 0x2c
  40bbfc:	46bd      	mov	sp, r7
  40bbfe:	bd90      	pop	{r4, r7, pc}
  40bc00:	00404745 	.word	0x00404745
  40bc04:	0040b24d 	.word	0x0040b24d
  40bc08:	204025d8 	.word	0x204025d8
  40bc0c:	0040bd31 	.word	0x0040bd31
  40bc10:	204026a0 	.word	0x204026a0
  40bc14:	0040b441 	.word	0x0040b441
  40bc18:	00405cc5 	.word	0x00405cc5
  40bc1c:	004061d9 	.word	0x004061d9
  40bc20:	00406069 	.word	0x00406069
  40bc24:	00406129 	.word	0x00406129

0040bc28 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip_addr_t *ipdst_addr,
           const u16_t opcode)
{
  40bc28:	b580      	push	{r7, lr}
  40bc2a:	b088      	sub	sp, #32
  40bc2c:	af00      	add	r7, sp, #0
  40bc2e:	60f8      	str	r0, [r7, #12]
  40bc30:	60b9      	str	r1, [r7, #8]
  40bc32:	607a      	str	r2, [r7, #4]
  40bc34:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
  40bc36:	2300      	movs	r3, #0
  40bc38:	77fb      	strb	r3, [r7, #31]
#endif /* LWIP_AUTOIP */

  LWIP_ASSERT("netif != NULL", netif != NULL);

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_RAW, SIZEOF_ETHARP_PACKET, PBUF_RAM);
  40bc3a:	2200      	movs	r2, #0
  40bc3c:	212a      	movs	r1, #42	; 0x2a
  40bc3e:	2003      	movs	r0, #3
  40bc40:	4b37      	ldr	r3, [pc, #220]	; (40bd20 <etharp_raw+0xf8>)
  40bc42:	4798      	blx	r3
  40bc44:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
  40bc46:	69bb      	ldr	r3, [r7, #24]
  40bc48:	2b00      	cmp	r3, #0
  40bc4a:	d102      	bne.n	40bc52 <etharp_raw+0x2a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  40bc4c:	f04f 33ff 	mov.w	r3, #4294967295
  40bc50:	e061      	b.n	40bd16 <etharp_raw+0xee>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
              (p->len >= SIZEOF_ETHARP_PACKET));

  ethhdr = (struct eth_hdr *)p->payload;
  40bc52:	69bb      	ldr	r3, [r7, #24]
  40bc54:	685b      	ldr	r3, [r3, #4]
  40bc56:	617b      	str	r3, [r7, #20]
  hdr = (struct etharp_hdr *)((u8_t*)ethhdr + SIZEOF_ETH_HDR);
  40bc58:	697b      	ldr	r3, [r7, #20]
  40bc5a:	330e      	adds	r3, #14
  40bc5c:	613b      	str	r3, [r7, #16]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = htons(opcode);
  40bc5e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
  40bc60:	4618      	mov	r0, r3
  40bc62:	4b30      	ldr	r3, [pc, #192]	; (40bd24 <etharp_raw+0xfc>)
  40bc64:	4798      	blx	r3
  40bc66:	4603      	mov	r3, r0
  40bc68:	461a      	mov	r2, r3
  40bc6a:	693b      	ldr	r3, [r7, #16]
  40bc6c:	80da      	strh	r2, [r3, #6]
   * 'sender IP address' MUST be sent using link-layer broadcast instead of
   * link-layer unicast. (See RFC3927 Section 2.5, last paragraph) */
  ethdst_hwaddr = ip_addr_islinklocal(ipsrc_addr) ? (u8_t*)(ethbroadcast.addr) : ethdst_addr->addr;
#endif /* LWIP_AUTOIP */
  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
  40bc6e:	693b      	ldr	r3, [r7, #16]
  40bc70:	3308      	adds	r3, #8
  40bc72:	2206      	movs	r2, #6
  40bc74:	6839      	ldr	r1, [r7, #0]
  40bc76:	4618      	mov	r0, r3
  40bc78:	4b2b      	ldr	r3, [pc, #172]	; (40bd28 <etharp_raw+0x100>)
  40bc7a:	4798      	blx	r3
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
  40bc7c:	693b      	ldr	r3, [r7, #16]
  40bc7e:	3312      	adds	r3, #18
  40bc80:	2206      	movs	r2, #6
  40bc82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
  40bc84:	4618      	mov	r0, r3
  40bc86:	4b28      	ldr	r3, [pc, #160]	; (40bd28 <etharp_raw+0x100>)
  40bc88:	4798      	blx	r3
  /* Write the Ethernet MAC-Addresses */
#if LWIP_AUTOIP
  ETHADDR16_COPY(&ethhdr->dest, ethdst_hwaddr);
#else  /* LWIP_AUTOIP */
  ETHADDR16_COPY(&ethhdr->dest, ethdst_addr);
  40bc8a:	697b      	ldr	r3, [r7, #20]
  40bc8c:	2206      	movs	r2, #6
  40bc8e:	6879      	ldr	r1, [r7, #4]
  40bc90:	4618      	mov	r0, r3
  40bc92:	4b25      	ldr	r3, [pc, #148]	; (40bd28 <etharp_raw+0x100>)
  40bc94:	4798      	blx	r3
#endif /* LWIP_AUTOIP */
  ETHADDR16_COPY(&ethhdr->src, ethsrc_addr);
  40bc96:	697b      	ldr	r3, [r7, #20]
  40bc98:	3306      	adds	r3, #6
  40bc9a:	2206      	movs	r2, #6
  40bc9c:	68b9      	ldr	r1, [r7, #8]
  40bc9e:	4618      	mov	r0, r3
  40bca0:	4b21      	ldr	r3, [pc, #132]	; (40bd28 <etharp_raw+0x100>)
  40bca2:	4798      	blx	r3
  /* Copy struct ip_addr2 to aligned ip_addr, to support compilers without
   * structure packing. */ 
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
  40bca4:	693b      	ldr	r3, [r7, #16]
  40bca6:	330e      	adds	r3, #14
  40bca8:	2204      	movs	r2, #4
  40bcaa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
  40bcac:	4618      	mov	r0, r3
  40bcae:	4b1e      	ldr	r3, [pc, #120]	; (40bd28 <etharp_raw+0x100>)
  40bcb0:	4798      	blx	r3
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
  40bcb2:	693b      	ldr	r3, [r7, #16]
  40bcb4:	3318      	adds	r3, #24
  40bcb6:	2204      	movs	r2, #4
  40bcb8:	6b39      	ldr	r1, [r7, #48]	; 0x30
  40bcba:	4618      	mov	r0, r3
  40bcbc:	4b1a      	ldr	r3, [pc, #104]	; (40bd28 <etharp_raw+0x100>)
  40bcbe:	4798      	blx	r3

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
  40bcc0:	693b      	ldr	r3, [r7, #16]
  40bcc2:	2200      	movs	r2, #0
  40bcc4:	701a      	strb	r2, [r3, #0]
  40bcc6:	2200      	movs	r2, #0
  40bcc8:	f042 0201 	orr.w	r2, r2, #1
  40bccc:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
  40bcce:	693b      	ldr	r3, [r7, #16]
  40bcd0:	2200      	movs	r2, #0
  40bcd2:	f042 0208 	orr.w	r2, r2, #8
  40bcd6:	709a      	strb	r2, [r3, #2]
  40bcd8:	2200      	movs	r2, #0
  40bcda:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETHARP_HWADDR_LEN;
  40bcdc:	693b      	ldr	r3, [r7, #16]
  40bcde:	2206      	movs	r2, #6
  40bce0:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip_addr_t);
  40bce2:	693b      	ldr	r3, [r7, #16]
  40bce4:	2204      	movs	r2, #4
  40bce6:	715a      	strb	r2, [r3, #5]

  ethhdr->type = PP_HTONS(ETHTYPE_ARP);
  40bce8:	697b      	ldr	r3, [r7, #20]
  40bcea:	2200      	movs	r2, #0
  40bcec:	f042 0208 	orr.w	r2, r2, #8
  40bcf0:	731a      	strb	r2, [r3, #12]
  40bcf2:	2200      	movs	r2, #0
  40bcf4:	f042 0206 	orr.w	r2, r2, #6
  40bcf8:	735a      	strb	r2, [r3, #13]
  /* send ARP query */
  result = netif->linkoutput(netif, p);
  40bcfa:	68fb      	ldr	r3, [r7, #12]
  40bcfc:	699b      	ldr	r3, [r3, #24]
  40bcfe:	69b9      	ldr	r1, [r7, #24]
  40bd00:	68f8      	ldr	r0, [r7, #12]
  40bd02:	4798      	blx	r3
  40bd04:	4603      	mov	r3, r0
  40bd06:	77fb      	strb	r3, [r7, #31]
  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
  40bd08:	69b8      	ldr	r0, [r7, #24]
  40bd0a:	4b08      	ldr	r3, [pc, #32]	; (40bd2c <etharp_raw+0x104>)
  40bd0c:	4798      	blx	r3
  p = NULL;
  40bd0e:	2300      	movs	r3, #0
  40bd10:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
  40bd12:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
  40bd16:	4618      	mov	r0, r3
  40bd18:	3720      	adds	r7, #32
  40bd1a:	46bd      	mov	sp, r7
  40bd1c:	bd80      	pop	{r7, pc}
  40bd1e:	bf00      	nop
  40bd20:	00405cc5 	.word	0x00405cc5
  40bd24:	00402309 	.word	0x00402309
  40bd28:	0040d859 	.word	0x0040d859
  40bd2c:	00406069 	.word	0x00406069

0040bd30 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, ip_addr_t *ipaddr)
{
  40bd30:	b590      	push	{r4, r7, lr}
  40bd32:	b087      	sub	sp, #28
  40bd34:	af04      	add	r7, sp, #16
  40bd36:	6078      	str	r0, [r7, #4]
  40bd38:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, &ethbroadcast,
  40bd3a:	687b      	ldr	r3, [r7, #4]
  40bd3c:	f103 012b 	add.w	r1, r3, #43	; 0x2b
                    (struct eth_addr *)netif->hwaddr, &netif->ip_addr, &ethzero,
  40bd40:	687b      	ldr	r3, [r7, #4]
  40bd42:	f103 002b 	add.w	r0, r3, #43	; 0x2b
  40bd46:	687b      	ldr	r3, [r7, #4]
  40bd48:	3304      	adds	r3, #4
 */
err_t
etharp_request(struct netif *netif, ip_addr_t *ipaddr)
{
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, &ethbroadcast,
  40bd4a:	2201      	movs	r2, #1
  40bd4c:	9203      	str	r2, [sp, #12]
  40bd4e:	683a      	ldr	r2, [r7, #0]
  40bd50:	9202      	str	r2, [sp, #8]
  40bd52:	4a06      	ldr	r2, [pc, #24]	; (40bd6c <etharp_request+0x3c>)
  40bd54:	9201      	str	r2, [sp, #4]
  40bd56:	9300      	str	r3, [sp, #0]
  40bd58:	4603      	mov	r3, r0
  40bd5a:	4a05      	ldr	r2, [pc, #20]	; (40bd70 <etharp_request+0x40>)
  40bd5c:	6878      	ldr	r0, [r7, #4]
  40bd5e:	4c05      	ldr	r4, [pc, #20]	; (40bd74 <etharp_request+0x44>)
  40bd60:	47a0      	blx	r4
  40bd62:	4603      	mov	r3, r0
                    (struct eth_addr *)netif->hwaddr, &netif->ip_addr, &ethzero,
                    ipaddr, ARP_REQUEST);
}
  40bd64:	4618      	mov	r0, r3
  40bd66:	370c      	adds	r7, #12
  40bd68:	46bd      	mov	sp, r7
  40bd6a:	bd90      	pop	{r4, r7, pc}
  40bd6c:	00414a80 	.word	0x00414a80
  40bd70:	00414a78 	.word	0x00414a78
  40bd74:	0040bc29 	.word	0x0040bc29

0040bd78 <ethernet_input>:
 * @param p the recevied packet, p->payload pointing to the ethernet header
 * @param netif the network interface on which the packet was received
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
  40bd78:	b580      	push	{r7, lr}
  40bd7a:	b086      	sub	sp, #24
  40bd7c:	af00      	add	r7, sp, #0
  40bd7e:	6078      	str	r0, [r7, #4]
  40bd80:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
  40bd82:	230e      	movs	r3, #14
  40bd84:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
  40bd86:	687b      	ldr	r3, [r7, #4]
  40bd88:	895b      	ldrh	r3, [r3, #10]
  40bd8a:	2b0e      	cmp	r3, #14
  40bd8c:	d961      	bls.n	40be52 <ethernet_input+0xda>
    ETHARP_STATS_INC(etharp.drop);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
  40bd8e:	687b      	ldr	r3, [r7, #4]
  40bd90:	685b      	ldr	r3, [r3, #4]
  40bd92:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0], (unsigned)ethhdr->src.addr[1], (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3], (unsigned)ethhdr->src.addr[4], (unsigned)ethhdr->src.addr[5],
     (unsigned)htons(ethhdr->type)));

  type = ethhdr->type;
  40bd94:	693b      	ldr	r3, [r7, #16]
  40bd96:	7b1a      	ldrb	r2, [r3, #12]
  40bd98:	7b5b      	ldrb	r3, [r3, #13]
  40bd9a:	021b      	lsls	r3, r3, #8
  40bd9c:	4313      	orrs	r3, r2
  40bd9e:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
  40bda0:	693b      	ldr	r3, [r7, #16]
  40bda2:	781b      	ldrb	r3, [r3, #0]
  40bda4:	f003 0301 	and.w	r3, r3, #1
  40bda8:	2b00      	cmp	r3, #0
  40bdaa:	d023      	beq.n	40bdf4 <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_MULTICAST_ADDR_0) {
  40bdac:	693b      	ldr	r3, [r7, #16]
  40bdae:	781b      	ldrb	r3, [r3, #0]
  40bdb0:	2b01      	cmp	r3, #1
  40bdb2:	d10f      	bne.n	40bdd4 <ethernet_input+0x5c>
      if ((ethhdr->dest.addr[1] == LL_MULTICAST_ADDR_1) &&
  40bdb4:	693b      	ldr	r3, [r7, #16]
  40bdb6:	785b      	ldrb	r3, [r3, #1]
  40bdb8:	2b00      	cmp	r3, #0
  40bdba:	d11b      	bne.n	40bdf4 <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_MULTICAST_ADDR_2)) {
  40bdbc:	693b      	ldr	r3, [r7, #16]
  40bdbe:	789b      	ldrb	r3, [r3, #2]
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_MULTICAST_ADDR_0) {
      if ((ethhdr->dest.addr[1] == LL_MULTICAST_ADDR_1) &&
  40bdc0:	2b5e      	cmp	r3, #94	; 0x5e
  40bdc2:	d117      	bne.n	40bdf4 <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_MULTICAST_ADDR_2)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
  40bdc4:	687b      	ldr	r3, [r7, #4]
  40bdc6:	7b5b      	ldrb	r3, [r3, #13]
  40bdc8:	f043 0310 	orr.w	r3, r3, #16
  40bdcc:	b2da      	uxtb	r2, r3
  40bdce:	687b      	ldr	r3, [r7, #4]
  40bdd0:	735a      	strb	r2, [r3, #13]
  40bdd2:	e00f      	b.n	40bdf4 <ethernet_input+0x7c>
      }
    } else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
  40bdd4:	693b      	ldr	r3, [r7, #16]
  40bdd6:	2206      	movs	r2, #6
  40bdd8:	4925      	ldr	r1, [pc, #148]	; (40be70 <ethernet_input+0xf8>)
  40bdda:	4618      	mov	r0, r3
  40bddc:	4b25      	ldr	r3, [pc, #148]	; (40be74 <ethernet_input+0xfc>)
  40bdde:	4798      	blx	r3
  40bde0:	4603      	mov	r3, r0
  40bde2:	2b00      	cmp	r3, #0
  40bde4:	d106      	bne.n	40bdf4 <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
  40bde6:	687b      	ldr	r3, [r7, #4]
  40bde8:	7b5b      	ldrb	r3, [r3, #13]
  40bdea:	f043 0308 	orr.w	r3, r3, #8
  40bdee:	b2da      	uxtb	r2, r3
  40bdf0:	687b      	ldr	r3, [r7, #4]
  40bdf2:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
  40bdf4:	89fb      	ldrh	r3, [r7, #14]
  40bdf6:	2b08      	cmp	r3, #8
  40bdf8:	d003      	beq.n	40be02 <ethernet_input+0x8a>
  40bdfa:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
  40bdfe:	d017      	beq.n	40be30 <ethernet_input+0xb8>
#endif /* PPPOE_SUPPORT */

    default:
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      goto free_and_return;
  40be00:	e02e      	b.n	40be60 <ethernet_input+0xe8>

  switch (type) {
#if LWIP_ARP
    /* IP packet? */
    case PP_HTONS(ETHTYPE_IP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
  40be02:	683b      	ldr	r3, [r7, #0]
  40be04:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
  40be08:	f003 0320 	and.w	r3, r3, #32
  40be0c:	2b00      	cmp	r3, #0
  40be0e:	d022      	beq.n	40be56 <ethernet_input+0xde>
#if ETHARP_TRUST_IP_MAC
      /* update ARP table */
      etharp_ip_input(netif, p);
#endif /* ETHARP_TRUST_IP_MAC */
      /* skip Ethernet header */
      if(pbuf_header(p, -ip_hdr_offset)) {
  40be10:	8afb      	ldrh	r3, [r7, #22]
  40be12:	425b      	negs	r3, r3
  40be14:	b29b      	uxth	r3, r3
  40be16:	b21b      	sxth	r3, r3
  40be18:	4619      	mov	r1, r3
  40be1a:	6878      	ldr	r0, [r7, #4]
  40be1c:	4b16      	ldr	r3, [pc, #88]	; (40be78 <ethernet_input+0x100>)
  40be1e:	4798      	blx	r3
  40be20:	4603      	mov	r3, r0
  40be22:	2b00      	cmp	r3, #0
  40be24:	d119      	bne.n	40be5a <ethernet_input+0xe2>
        LWIP_ASSERT("Can't move over header in packet", 0);
        goto free_and_return;
      } else {
        /* pass to IP layer */
        ip_input(p, netif);
  40be26:	6839      	ldr	r1, [r7, #0]
  40be28:	6878      	ldr	r0, [r7, #4]
  40be2a:	4b14      	ldr	r3, [pc, #80]	; (40be7c <ethernet_input+0x104>)
  40be2c:	4798      	blx	r3
      }
      break;
  40be2e:	e00e      	b.n	40be4e <ethernet_input+0xd6>
      
    case PP_HTONS(ETHTYPE_ARP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
  40be30:	683b      	ldr	r3, [r7, #0]
  40be32:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
  40be36:	f003 0320 	and.w	r3, r3, #32
  40be3a:	2b00      	cmp	r3, #0
  40be3c:	d00f      	beq.n	40be5e <ethernet_input+0xe6>
        goto free_and_return;
      }
      /* pass p to ARP module */
      etharp_arp_input(netif, (struct eth_addr*)(netif->hwaddr), p);
  40be3e:	683b      	ldr	r3, [r7, #0]
  40be40:	332b      	adds	r3, #43	; 0x2b
  40be42:	687a      	ldr	r2, [r7, #4]
  40be44:	4619      	mov	r1, r3
  40be46:	6838      	ldr	r0, [r7, #0]
  40be48:	4b0d      	ldr	r3, [pc, #52]	; (40be80 <ethernet_input+0x108>)
  40be4a:	4798      	blx	r3
      break;
  40be4c:	bf00      	nop
      goto free_and_return;
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
  40be4e:	2300      	movs	r3, #0
  40be50:	e00a      	b.n	40be68 <ethernet_input+0xf0>

  if (p->len <= SIZEOF_ETH_HDR) {
    /* a packet with only an ethernet header (or less) is not valid for us */
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    goto free_and_return;
  40be52:	bf00      	nop
  40be54:	e004      	b.n	40be60 <ethernet_input+0xe8>
  switch (type) {
#if LWIP_ARP
    /* IP packet? */
    case PP_HTONS(ETHTYPE_IP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
        goto free_and_return;
  40be56:	bf00      	nop
  40be58:	e002      	b.n	40be60 <ethernet_input+0xe8>
      etharp_ip_input(netif, p);
#endif /* ETHARP_TRUST_IP_MAC */
      /* skip Ethernet header */
      if(pbuf_header(p, -ip_hdr_offset)) {
        LWIP_ASSERT("Can't move over header in packet", 0);
        goto free_and_return;
  40be5a:	bf00      	nop
  40be5c:	e000      	b.n	40be60 <ethernet_input+0xe8>
      }
      break;
      
    case PP_HTONS(ETHTYPE_ARP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
        goto free_and_return;
  40be5e:	bf00      	nop
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
  40be60:	6878      	ldr	r0, [r7, #4]
  40be62:	4b08      	ldr	r3, [pc, #32]	; (40be84 <ethernet_input+0x10c>)
  40be64:	4798      	blx	r3
  return ERR_OK;
  40be66:	2300      	movs	r3, #0
}
  40be68:	4618      	mov	r0, r3
  40be6a:	3718      	adds	r7, #24
  40be6c:	46bd      	mov	sp, r7
  40be6e:	bd80      	pop	{r7, pc}
  40be70:	00414a78 	.word	0x00414a78
  40be74:	0040d7f5 	.word	0x0040d7f5
  40be78:	00405f8d 	.word	0x00405f8d
  40be7c:	004042c9 	.word	0x004042c9
  40be80:	0040b62d 	.word	0x0040b62d
  40be84:	00406069 	.word	0x00406069

0040be88 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  40be88:	b480      	push	{r7}
  40be8a:	b083      	sub	sp, #12
  40be8c:	af00      	add	r7, sp, #0
  40be8e:	4603      	mov	r3, r0
  40be90:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40be92:	4909      	ldr	r1, [pc, #36]	; (40beb8 <NVIC_EnableIRQ+0x30>)
  40be94:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40be98:	095b      	lsrs	r3, r3, #5
  40be9a:	79fa      	ldrb	r2, [r7, #7]
  40be9c:	f002 021f 	and.w	r2, r2, #31
  40bea0:	2001      	movs	r0, #1
  40bea2:	fa00 f202 	lsl.w	r2, r0, r2
  40bea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  40beaa:	bf00      	nop
  40beac:	370c      	adds	r7, #12
  40beae:	46bd      	mov	sp, r7
  40beb0:	f85d 7b04 	ldr.w	r7, [sp], #4
  40beb4:	4770      	bx	lr
  40beb6:	bf00      	nop
  40beb8:	e000e100 	.word	0xe000e100

0040bebc <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  40bebc:	b480      	push	{r7}
  40bebe:	b083      	sub	sp, #12
  40bec0:	af00      	add	r7, sp, #0
  40bec2:	4603      	mov	r3, r0
  40bec4:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  40bec6:	4909      	ldr	r1, [pc, #36]	; (40beec <NVIC_DisableIRQ+0x30>)
  40bec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40becc:	095b      	lsrs	r3, r3, #5
  40bece:	79fa      	ldrb	r2, [r7, #7]
  40bed0:	f002 021f 	and.w	r2, r2, #31
  40bed4:	2001      	movs	r0, #1
  40bed6:	fa00 f202 	lsl.w	r2, r0, r2
  40beda:	3320      	adds	r3, #32
  40bedc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  40bee0:	bf00      	nop
  40bee2:	370c      	adds	r7, #12
  40bee4:	46bd      	mov	sp, r7
  40bee6:	f85d 7b04 	ldr.w	r7, [sp], #4
  40beea:	4770      	bx	lr
  40beec:	e000e100 	.word	0xe000e100

0040bef0 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  40bef0:	b480      	push	{r7}
  40bef2:	b083      	sub	sp, #12
  40bef4:	af00      	add	r7, sp, #0
  40bef6:	4603      	mov	r3, r0
  40bef8:	6039      	str	r1, [r7, #0]
  40befa:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  40befc:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40bf00:	2b00      	cmp	r3, #0
  40bf02:	da0b      	bge.n	40bf1c <NVIC_SetPriority+0x2c>
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  40bf04:	490d      	ldr	r1, [pc, #52]	; (40bf3c <NVIC_SetPriority+0x4c>)
  40bf06:	79fb      	ldrb	r3, [r7, #7]
  40bf08:	f003 030f 	and.w	r3, r3, #15
  40bf0c:	3b04      	subs	r3, #4
  40bf0e:	683a      	ldr	r2, [r7, #0]
  40bf10:	b2d2      	uxtb	r2, r2
  40bf12:	0152      	lsls	r2, r2, #5
  40bf14:	b2d2      	uxtb	r2, r2
  40bf16:	440b      	add	r3, r1
  40bf18:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
}
  40bf1a:	e009      	b.n	40bf30 <NVIC_SetPriority+0x40>
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  40bf1c:	4908      	ldr	r1, [pc, #32]	; (40bf40 <NVIC_SetPriority+0x50>)
  40bf1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40bf22:	683a      	ldr	r2, [r7, #0]
  40bf24:	b2d2      	uxtb	r2, r2
  40bf26:	0152      	lsls	r2, r2, #5
  40bf28:	b2d2      	uxtb	r2, r2
  40bf2a:	440b      	add	r3, r1
  40bf2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  40bf30:	bf00      	nop
  40bf32:	370c      	adds	r7, #12
  40bf34:	46bd      	mov	sp, r7
  40bf36:	f85d 7b04 	ldr.w	r7, [sp], #4
  40bf3a:	4770      	bx	lr
  40bf3c:	e000ed00 	.word	0xe000ed00
  40bf40:	e000e100 	.word	0xe000e100

0040bf44 <gmac_network_control>:
 *
 * \param p_gmac   Pointer to the GMAC instance.
 * \param ul_ncr   Network control value.
 */
static inline void gmac_network_control(Gmac* p_gmac, uint32_t ul_ncr)
{
  40bf44:	b480      	push	{r7}
  40bf46:	b083      	sub	sp, #12
  40bf48:	af00      	add	r7, sp, #0
  40bf4a:	6078      	str	r0, [r7, #4]
  40bf4c:	6039      	str	r1, [r7, #0]
	p_gmac->GMAC_NCR = ul_ncr;
  40bf4e:	687b      	ldr	r3, [r7, #4]
  40bf50:	683a      	ldr	r2, [r7, #0]
  40bf52:	601a      	str	r2, [r3, #0]
}
  40bf54:	bf00      	nop
  40bf56:	370c      	adds	r7, #12
  40bf58:	46bd      	mov	sp, r7
  40bf5a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40bf5e:	4770      	bx	lr

0040bf60 <gmac_enable_receive>:
 *
 * \param p_gmac   Pointer to the GMAC instance.
 * \param uc_enable   0 to disable GMAC receiver, else to enable it.
 */
static inline void gmac_enable_receive(Gmac* p_gmac, uint8_t uc_enable)
{
  40bf60:	b480      	push	{r7}
  40bf62:	b083      	sub	sp, #12
  40bf64:	af00      	add	r7, sp, #0
  40bf66:	6078      	str	r0, [r7, #4]
  40bf68:	460b      	mov	r3, r1
  40bf6a:	70fb      	strb	r3, [r7, #3]
	if (uc_enable) {
  40bf6c:	78fb      	ldrb	r3, [r7, #3]
  40bf6e:	2b00      	cmp	r3, #0
  40bf70:	d006      	beq.n	40bf80 <gmac_enable_receive+0x20>
		p_gmac->GMAC_NCR |= GMAC_NCR_RXEN;
  40bf72:	687b      	ldr	r3, [r7, #4]
  40bf74:	681b      	ldr	r3, [r3, #0]
  40bf76:	f043 0204 	orr.w	r2, r3, #4
  40bf7a:	687b      	ldr	r3, [r7, #4]
  40bf7c:	601a      	str	r2, [r3, #0]
	} else {
		p_gmac->GMAC_NCR &= ~GMAC_NCR_RXEN;
	}
}
  40bf7e:	e005      	b.n	40bf8c <gmac_enable_receive+0x2c>
static inline void gmac_enable_receive(Gmac* p_gmac, uint8_t uc_enable)
{
	if (uc_enable) {
		p_gmac->GMAC_NCR |= GMAC_NCR_RXEN;
	} else {
		p_gmac->GMAC_NCR &= ~GMAC_NCR_RXEN;
  40bf80:	687b      	ldr	r3, [r7, #4]
  40bf82:	681b      	ldr	r3, [r3, #0]
  40bf84:	f023 0204 	bic.w	r2, r3, #4
  40bf88:	687b      	ldr	r3, [r7, #4]
  40bf8a:	601a      	str	r2, [r3, #0]
	}
}
  40bf8c:	bf00      	nop
  40bf8e:	370c      	adds	r7, #12
  40bf90:	46bd      	mov	sp, r7
  40bf92:	f85d 7b04 	ldr.w	r7, [sp], #4
  40bf96:	4770      	bx	lr

0040bf98 <gmac_enable_transmit>:
 *
 * \param p_gmac   Pointer to the GMAC instance.
 * \param uc_enable   0 to disable GMAC transmit, else to enable it.
 */
static inline void gmac_enable_transmit(Gmac* p_gmac, uint8_t uc_enable)
{
  40bf98:	b480      	push	{r7}
  40bf9a:	b083      	sub	sp, #12
  40bf9c:	af00      	add	r7, sp, #0
  40bf9e:	6078      	str	r0, [r7, #4]
  40bfa0:	460b      	mov	r3, r1
  40bfa2:	70fb      	strb	r3, [r7, #3]
	if (uc_enable) {
  40bfa4:	78fb      	ldrb	r3, [r7, #3]
  40bfa6:	2b00      	cmp	r3, #0
  40bfa8:	d006      	beq.n	40bfb8 <gmac_enable_transmit+0x20>
		p_gmac->GMAC_NCR |= GMAC_NCR_TXEN;
  40bfaa:	687b      	ldr	r3, [r7, #4]
  40bfac:	681b      	ldr	r3, [r3, #0]
  40bfae:	f043 0208 	orr.w	r2, r3, #8
  40bfb2:	687b      	ldr	r3, [r7, #4]
  40bfb4:	601a      	str	r2, [r3, #0]
	} else {
		p_gmac->GMAC_NCR &= ~GMAC_NCR_TXEN;
	}
}
  40bfb6:	e005      	b.n	40bfc4 <gmac_enable_transmit+0x2c>
static inline void gmac_enable_transmit(Gmac* p_gmac, uint8_t uc_enable)
{
	if (uc_enable) {
		p_gmac->GMAC_NCR |= GMAC_NCR_TXEN;
	} else {
		p_gmac->GMAC_NCR &= ~GMAC_NCR_TXEN;
  40bfb8:	687b      	ldr	r3, [r7, #4]
  40bfba:	681b      	ldr	r3, [r3, #0]
  40bfbc:	f023 0208 	bic.w	r2, r3, #8
  40bfc0:	687b      	ldr	r3, [r7, #4]
  40bfc2:	601a      	str	r2, [r3, #0]
	}
}
  40bfc4:	bf00      	nop
  40bfc6:	370c      	adds	r7, #12
  40bfc8:	46bd      	mov	sp, r7
  40bfca:	f85d 7b04 	ldr.w	r7, [sp], #4
  40bfce:	4770      	bx	lr

0040bfd0 <gmac_clear_statistics>:
 * \brief Clear all statistics registers.
 *
 * \param p_gmac   Pointer to the GMAC instance.
 */
static inline void gmac_clear_statistics(Gmac* p_gmac)
{
  40bfd0:	b480      	push	{r7}
  40bfd2:	b083      	sub	sp, #12
  40bfd4:	af00      	add	r7, sp, #0
  40bfd6:	6078      	str	r0, [r7, #4]
	p_gmac->GMAC_NCR |= GMAC_NCR_CLRSTAT;
  40bfd8:	687b      	ldr	r3, [r7, #4]
  40bfda:	681b      	ldr	r3, [r3, #0]
  40bfdc:	f043 0220 	orr.w	r2, r3, #32
  40bfe0:	687b      	ldr	r3, [r7, #4]
  40bfe2:	601a      	str	r2, [r3, #0]
}
  40bfe4:	bf00      	nop
  40bfe6:	370c      	adds	r7, #12
  40bfe8:	46bd      	mov	sp, r7
  40bfea:	f85d 7b04 	ldr.w	r7, [sp], #4
  40bfee:	4770      	bx	lr

0040bff0 <gmac_enable_statistics_write>:
 * \param p_gmac   Pointer to the GMAC instance.
 * \param uc_enable   0 to disable the statistics registers writing, else to enable it.
 */
static inline void gmac_enable_statistics_write(Gmac* p_gmac,
		uint8_t uc_enable)
{
  40bff0:	b480      	push	{r7}
  40bff2:	b083      	sub	sp, #12
  40bff4:	af00      	add	r7, sp, #0
  40bff6:	6078      	str	r0, [r7, #4]
  40bff8:	460b      	mov	r3, r1
  40bffa:	70fb      	strb	r3, [r7, #3]
	if (uc_enable) {
  40bffc:	78fb      	ldrb	r3, [r7, #3]
  40bffe:	2b00      	cmp	r3, #0
  40c000:	d006      	beq.n	40c010 <gmac_enable_statistics_write+0x20>
		p_gmac->GMAC_NCR |= GMAC_NCR_WESTAT;
  40c002:	687b      	ldr	r3, [r7, #4]
  40c004:	681b      	ldr	r3, [r3, #0]
  40c006:	f043 0280 	orr.w	r2, r3, #128	; 0x80
  40c00a:	687b      	ldr	r3, [r7, #4]
  40c00c:	601a      	str	r2, [r3, #0]
	} else {
		p_gmac->GMAC_NCR &= ~GMAC_NCR_WESTAT;
	}
}
  40c00e:	e005      	b.n	40c01c <gmac_enable_statistics_write+0x2c>
		uint8_t uc_enable)
{
	if (uc_enable) {
		p_gmac->GMAC_NCR |= GMAC_NCR_WESTAT;
	} else {
		p_gmac->GMAC_NCR &= ~GMAC_NCR_WESTAT;
  40c010:	687b      	ldr	r3, [r7, #4]
  40c012:	681b      	ldr	r3, [r3, #0]
  40c014:	f023 0280 	bic.w	r2, r3, #128	; 0x80
  40c018:	687b      	ldr	r3, [r7, #4]
  40c01a:	601a      	str	r2, [r3, #0]
	}
}
  40c01c:	bf00      	nop
  40c01e:	370c      	adds	r7, #12
  40c020:	46bd      	mov	sp, r7
  40c022:	f85d 7b04 	ldr.w	r7, [sp], #4
  40c026:	4770      	bx	lr

0040c028 <gmac_start_transmission>:
 * \brief Start transmission.
 *
 * \param p_gmac   Pointer to the GMAC instance.
 */
static inline void gmac_start_transmission(Gmac* p_gmac)
{
  40c028:	b480      	push	{r7}
  40c02a:	b083      	sub	sp, #12
  40c02c:	af00      	add	r7, sp, #0
  40c02e:	6078      	str	r0, [r7, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  40c030:	f3bf 8f4f 	dsb	sy
	__DSB();
	p_gmac->GMAC_NCR |= GMAC_NCR_TSTART;
  40c034:	687b      	ldr	r3, [r7, #4]
  40c036:	681b      	ldr	r3, [r3, #0]
  40c038:	f443 7200 	orr.w	r2, r3, #512	; 0x200
  40c03c:	687b      	ldr	r3, [r7, #4]
  40c03e:	601a      	str	r2, [r3, #0]
}
  40c040:	bf00      	nop
  40c042:	370c      	adds	r7, #12
  40c044:	46bd      	mov	sp, r7
  40c046:	f85d 7b04 	ldr.w	r7, [sp], #4
  40c04a:	4770      	bx	lr

0040c04c <gmac_enable_copy_all>:
 *
 * \param p_gmac   Pointer to the GMAC instance.
 * \param uc_enable   0 to disable copying all valid frames, else to enable it.
 */
static inline void gmac_enable_copy_all(Gmac* p_gmac, uint8_t uc_enable)
{
  40c04c:	b480      	push	{r7}
  40c04e:	b083      	sub	sp, #12
  40c050:	af00      	add	r7, sp, #0
  40c052:	6078      	str	r0, [r7, #4]
  40c054:	460b      	mov	r3, r1
  40c056:	70fb      	strb	r3, [r7, #3]
	if (uc_enable) {
  40c058:	78fb      	ldrb	r3, [r7, #3]
  40c05a:	2b00      	cmp	r3, #0
  40c05c:	d006      	beq.n	40c06c <gmac_enable_copy_all+0x20>
		p_gmac->GMAC_NCFGR |= GMAC_NCFGR_CAF;
  40c05e:	687b      	ldr	r3, [r7, #4]
  40c060:	685b      	ldr	r3, [r3, #4]
  40c062:	f043 0210 	orr.w	r2, r3, #16
  40c066:	687b      	ldr	r3, [r7, #4]
  40c068:	605a      	str	r2, [r3, #4]
	} else {
		p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_CAF;
	}
}
  40c06a:	e005      	b.n	40c078 <gmac_enable_copy_all+0x2c>
static inline void gmac_enable_copy_all(Gmac* p_gmac, uint8_t uc_enable)
{
	if (uc_enable) {
		p_gmac->GMAC_NCFGR |= GMAC_NCFGR_CAF;
	} else {
		p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_CAF;
  40c06c:	687b      	ldr	r3, [r7, #4]
  40c06e:	685b      	ldr	r3, [r3, #4]
  40c070:	f023 0210 	bic.w	r2, r3, #16
  40c074:	687b      	ldr	r3, [r7, #4]
  40c076:	605a      	str	r2, [r3, #4]
	}
}
  40c078:	bf00      	nop
  40c07a:	370c      	adds	r7, #12
  40c07c:	46bd      	mov	sp, r7
  40c07e:	f85d 7b04 	ldr.w	r7, [sp], #4
  40c082:	4770      	bx	lr

0040c084 <gmac_disable_broadcast>:
 *
 * \param p_gmac   Pointer to the GMAC instance.
 * \param uc_enable   1 to disable the broadcast, else to enable it.
 */
static inline void gmac_disable_broadcast(Gmac* p_gmac, uint8_t uc_enable)
{
  40c084:	b480      	push	{r7}
  40c086:	b083      	sub	sp, #12
  40c088:	af00      	add	r7, sp, #0
  40c08a:	6078      	str	r0, [r7, #4]
  40c08c:	460b      	mov	r3, r1
  40c08e:	70fb      	strb	r3, [r7, #3]
	if (uc_enable) {
  40c090:	78fb      	ldrb	r3, [r7, #3]
  40c092:	2b00      	cmp	r3, #0
  40c094:	d006      	beq.n	40c0a4 <gmac_disable_broadcast+0x20>
		p_gmac->GMAC_NCFGR |= GMAC_NCFGR_NBC;
  40c096:	687b      	ldr	r3, [r7, #4]
  40c098:	685b      	ldr	r3, [r3, #4]
  40c09a:	f043 0220 	orr.w	r2, r3, #32
  40c09e:	687b      	ldr	r3, [r7, #4]
  40c0a0:	605a      	str	r2, [r3, #4]
	} else {
		p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_NBC;
	}
}
  40c0a2:	e005      	b.n	40c0b0 <gmac_disable_broadcast+0x2c>
static inline void gmac_disable_broadcast(Gmac* p_gmac, uint8_t uc_enable)
{
	if (uc_enable) {
		p_gmac->GMAC_NCFGR |= GMAC_NCFGR_NBC;
	} else {
		p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_NBC;
  40c0a4:	687b      	ldr	r3, [r7, #4]
  40c0a6:	685b      	ldr	r3, [r3, #4]
  40c0a8:	f023 0220 	bic.w	r2, r3, #32
  40c0ac:	687b      	ldr	r3, [r7, #4]
  40c0ae:	605a      	str	r2, [r3, #4]
	}
}
  40c0b0:	bf00      	nop
  40c0b2:	370c      	adds	r7, #12
  40c0b4:	46bd      	mov	sp, r7
  40c0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
  40c0ba:	4770      	bx	lr

0040c0bc <gmac_get_tx_status>:
 * \param p_gmac   Pointer to the GMAC instance.
 *
 * \return  Transmit status.
 */
static inline uint32_t gmac_get_tx_status(Gmac* p_gmac)
{
  40c0bc:	b480      	push	{r7}
  40c0be:	b083      	sub	sp, #12
  40c0c0:	af00      	add	r7, sp, #0
  40c0c2:	6078      	str	r0, [r7, #4]
	return p_gmac->GMAC_TSR;
  40c0c4:	687b      	ldr	r3, [r7, #4]
  40c0c6:	695b      	ldr	r3, [r3, #20]
}
  40c0c8:	4618      	mov	r0, r3
  40c0ca:	370c      	adds	r7, #12
  40c0cc:	46bd      	mov	sp, r7
  40c0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
  40c0d2:	4770      	bx	lr

0040c0d4 <gmac_clear_tx_status>:
 *
 * \param p_gmac   Pointer to the GMAC instance.
 * \param ul_status   Transmit status.
 */
static inline void gmac_clear_tx_status(Gmac* p_gmac, uint32_t ul_status)
{
  40c0d4:	b480      	push	{r7}
  40c0d6:	b083      	sub	sp, #12
  40c0d8:	af00      	add	r7, sp, #0
  40c0da:	6078      	str	r0, [r7, #4]
  40c0dc:	6039      	str	r1, [r7, #0]
	p_gmac->GMAC_TSR = ul_status;
  40c0de:	687b      	ldr	r3, [r7, #4]
  40c0e0:	683a      	ldr	r2, [r7, #0]
  40c0e2:	615a      	str	r2, [r3, #20]
}
  40c0e4:	bf00      	nop
  40c0e6:	370c      	adds	r7, #12
  40c0e8:	46bd      	mov	sp, r7
  40c0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
  40c0ee:	4770      	bx	lr

0040c0f0 <gmac_get_rx_status>:
 * \brief Return receive status.
 *
 * \param p_gmac   Pointer to the GMAC instance.
 */
static inline uint32_t gmac_get_rx_status(Gmac* p_gmac)
{
  40c0f0:	b480      	push	{r7}
  40c0f2:	b083      	sub	sp, #12
  40c0f4:	af00      	add	r7, sp, #0
  40c0f6:	6078      	str	r0, [r7, #4]
	return p_gmac->GMAC_RSR;
  40c0f8:	687b      	ldr	r3, [r7, #4]
  40c0fa:	6a1b      	ldr	r3, [r3, #32]
}
  40c0fc:	4618      	mov	r0, r3
  40c0fe:	370c      	adds	r7, #12
  40c100:	46bd      	mov	sp, r7
  40c102:	f85d 7b04 	ldr.w	r7, [sp], #4
  40c106:	4770      	bx	lr

0040c108 <gmac_clear_rx_status>:
 *
 * \param p_gmac   Pointer to the GMAC instance.
 * \param ul_status   Receive status.
 */
static inline void gmac_clear_rx_status(Gmac* p_gmac, uint32_t ul_status)
{
  40c108:	b480      	push	{r7}
  40c10a:	b083      	sub	sp, #12
  40c10c:	af00      	add	r7, sp, #0
  40c10e:	6078      	str	r0, [r7, #4]
  40c110:	6039      	str	r1, [r7, #0]
	p_gmac->GMAC_RSR = ul_status;
  40c112:	687b      	ldr	r3, [r7, #4]
  40c114:	683a      	ldr	r2, [r7, #0]
  40c116:	621a      	str	r2, [r3, #32]
}
  40c118:	bf00      	nop
  40c11a:	370c      	adds	r7, #12
  40c11c:	46bd      	mov	sp, r7
  40c11e:	f85d 7b04 	ldr.w	r7, [sp], #4
  40c122:	4770      	bx	lr

0040c124 <gmac_set_rx_queue>:
 *
 * \param p_gmac   Pointer to the GMAC instance.
 * \param ul_addr   Rx queue address.
 */
static inline void gmac_set_rx_queue(Gmac* p_gmac, uint32_t ul_addr)
{
  40c124:	b480      	push	{r7}
  40c126:	b083      	sub	sp, #12
  40c128:	af00      	add	r7, sp, #0
  40c12a:	6078      	str	r0, [r7, #4]
  40c12c:	6039      	str	r1, [r7, #0]
	p_gmac->GMAC_RBQB = GMAC_RBQB_ADDR_Msk & ul_addr;
  40c12e:	683b      	ldr	r3, [r7, #0]
  40c130:	f023 0203 	bic.w	r2, r3, #3
  40c134:	687b      	ldr	r3, [r7, #4]
  40c136:	619a      	str	r2, [r3, #24]
}
  40c138:	bf00      	nop
  40c13a:	370c      	adds	r7, #12
  40c13c:	46bd      	mov	sp, r7
  40c13e:	f85d 7b04 	ldr.w	r7, [sp], #4
  40c142:	4770      	bx	lr

0040c144 <gmac_set_rx_bufsize>:
 *
 * \param p_gmac   Pointer to the GMAC instance.
 * \param ul_addr   Rx buffer.
 */
static inline void gmac_set_rx_bufsize(Gmac* p_gmac, uint32_t ul_code)
{
  40c144:	b480      	push	{r7}
  40c146:	b083      	sub	sp, #12
  40c148:	af00      	add	r7, sp, #0
  40c14a:	6078      	str	r0, [r7, #4]
  40c14c:	6039      	str	r1, [r7, #0]
	p_gmac->GMAC_DCFGR = (p_gmac->GMAC_DCFGR & ~GMAC_DCFGR_DRBS_Msk)
  40c14e:	687b      	ldr	r3, [r7, #4]
  40c150:	691b      	ldr	r3, [r3, #16]
  40c152:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
			| GMAC_DCFGR_DRBS(ul_code);
  40c156:	683b      	ldr	r3, [r7, #0]
  40c158:	041b      	lsls	r3, r3, #16
  40c15a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  40c15e:	431a      	orrs	r2, r3
 * \param p_gmac   Pointer to the GMAC instance.
 * \param ul_addr   Rx buffer.
 */
static inline void gmac_set_rx_bufsize(Gmac* p_gmac, uint32_t ul_code)
{
	p_gmac->GMAC_DCFGR = (p_gmac->GMAC_DCFGR & ~GMAC_DCFGR_DRBS_Msk)
  40c160:	687b      	ldr	r3, [r7, #4]
  40c162:	611a      	str	r2, [r3, #16]
			| GMAC_DCFGR_DRBS(ul_code);
}
  40c164:	bf00      	nop
  40c166:	370c      	adds	r7, #12
  40c168:	46bd      	mov	sp, r7
  40c16a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40c16e:	4770      	bx	lr

0040c170 <gmac_set_tx_queue>:
 *
 * \param p_gmac   Pointer to the GMAC instance.
 * \param ul_addr  Tx queue address.
 */
static inline void gmac_set_tx_queue(Gmac* p_gmac, uint32_t ul_addr)
{
  40c170:	b480      	push	{r7}
  40c172:	b083      	sub	sp, #12
  40c174:	af00      	add	r7, sp, #0
  40c176:	6078      	str	r0, [r7, #4]
  40c178:	6039      	str	r1, [r7, #0]
	p_gmac->GMAC_TBQB = GMAC_TBQB_ADDR_Msk & ul_addr;
  40c17a:	683b      	ldr	r3, [r7, #0]
  40c17c:	f023 0203 	bic.w	r2, r3, #3
  40c180:	687b      	ldr	r3, [r7, #4]
  40c182:	61da      	str	r2, [r3, #28]
}
  40c184:	bf00      	nop
  40c186:	370c      	adds	r7, #12
  40c188:	46bd      	mov	sp, r7
  40c18a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40c18e:	4770      	bx	lr

0040c190 <gmac_enable_interrupt>:
 *
 * \param p_gmac   Pointer to the GMAC instance.
 * \param ul_source   Interrupt source(s) to be enabled.
 */
static inline void gmac_enable_interrupt(Gmac* p_gmac, uint32_t ul_source)
{
  40c190:	b480      	push	{r7}
  40c192:	b083      	sub	sp, #12
  40c194:	af00      	add	r7, sp, #0
  40c196:	6078      	str	r0, [r7, #4]
  40c198:	6039      	str	r1, [r7, #0]
	p_gmac->GMAC_IER = ul_source;
  40c19a:	687b      	ldr	r3, [r7, #4]
  40c19c:	683a      	ldr	r2, [r7, #0]
  40c19e:	629a      	str	r2, [r3, #40]	; 0x28
}
  40c1a0:	bf00      	nop
  40c1a2:	370c      	adds	r7, #12
  40c1a4:	46bd      	mov	sp, r7
  40c1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
  40c1aa:	4770      	bx	lr

0040c1ac <gmac_disable_interrupt>:
 *
 * \param p_gmac   Pointer to the GMAC instance.
 * \param ul_source   Interrupt source(s) to be disabled.
 */
static inline void gmac_disable_interrupt(Gmac* p_gmac, uint32_t ul_source)
{
  40c1ac:	b480      	push	{r7}
  40c1ae:	b083      	sub	sp, #12
  40c1b0:	af00      	add	r7, sp, #0
  40c1b2:	6078      	str	r0, [r7, #4]
  40c1b4:	6039      	str	r1, [r7, #0]
	p_gmac->GMAC_IDR = ul_source;
  40c1b6:	687b      	ldr	r3, [r7, #4]
  40c1b8:	683a      	ldr	r2, [r7, #0]
  40c1ba:	62da      	str	r2, [r3, #44]	; 0x2c
}
  40c1bc:	bf00      	nop
  40c1be:	370c      	adds	r7, #12
  40c1c0:	46bd      	mov	sp, r7
  40c1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
  40c1c6:	4770      	bx	lr

0040c1c8 <gmac_get_interrupt_status>:
 * \param p_gmac   Pointer to the GMAC instance.
 *
 * \return Interrupt status.
 */
static inline uint32_t gmac_get_interrupt_status(Gmac* p_gmac)
{
  40c1c8:	b480      	push	{r7}
  40c1ca:	b083      	sub	sp, #12
  40c1cc:	af00      	add	r7, sp, #0
  40c1ce:	6078      	str	r0, [r7, #4]
	return p_gmac->GMAC_ISR;
  40c1d0:	687b      	ldr	r3, [r7, #4]
  40c1d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
  40c1d4:	4618      	mov	r0, r3
  40c1d6:	370c      	adds	r7, #12
  40c1d8:	46bd      	mov	sp, r7
  40c1da:	f85d 7b04 	ldr.w	r7, [sp], #4
  40c1de:	4770      	bx	lr

0040c1e0 <gmac_set_address>:
 * \param uc_index  GMAC specific address register index.
 * \param p_mac_addr  GMAC address.
 */
static inline void gmac_set_address(Gmac* p_gmac, uint8_t uc_index,
		uint8_t* p_mac_addr)
{
  40c1e0:	b480      	push	{r7}
  40c1e2:	b085      	sub	sp, #20
  40c1e4:	af00      	add	r7, sp, #0
  40c1e6:	60f8      	str	r0, [r7, #12]
  40c1e8:	460b      	mov	r3, r1
  40c1ea:	607a      	str	r2, [r7, #4]
  40c1ec:	72fb      	strb	r3, [r7, #11]
	p_gmac->GMAC_SA[uc_index].GMAC_SAB = (p_mac_addr[3] << 24)
  40c1ee:	7afa      	ldrb	r2, [r7, #11]
  40c1f0:	687b      	ldr	r3, [r7, #4]
  40c1f2:	3303      	adds	r3, #3
  40c1f4:	781b      	ldrb	r3, [r3, #0]
  40c1f6:	0619      	lsls	r1, r3, #24
			| (p_mac_addr[2] << 16)
  40c1f8:	687b      	ldr	r3, [r7, #4]
  40c1fa:	3302      	adds	r3, #2
  40c1fc:	781b      	ldrb	r3, [r3, #0]
  40c1fe:	041b      	lsls	r3, r3, #16
  40c200:	4319      	orrs	r1, r3
			| (p_mac_addr[1] << 8)
  40c202:	687b      	ldr	r3, [r7, #4]
  40c204:	3301      	adds	r3, #1
  40c206:	781b      	ldrb	r3, [r3, #0]
  40c208:	021b      	lsls	r3, r3, #8
  40c20a:	430b      	orrs	r3, r1
			| (p_mac_addr[0]);
  40c20c:	6879      	ldr	r1, [r7, #4]
  40c20e:	7809      	ldrb	r1, [r1, #0]
  40c210:	430b      	orrs	r3, r1
 * \param p_mac_addr  GMAC address.
 */
static inline void gmac_set_address(Gmac* p_gmac, uint8_t uc_index,
		uint8_t* p_mac_addr)
{
	p_gmac->GMAC_SA[uc_index].GMAC_SAB = (p_mac_addr[3] << 24)
  40c212:	4619      	mov	r1, r3
  40c214:	68fb      	ldr	r3, [r7, #12]
  40c216:	3211      	adds	r2, #17
  40c218:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
			| (p_mac_addr[2] << 16)
			| (p_mac_addr[1] << 8)
			| (p_mac_addr[0]);
	p_gmac->GMAC_SA[uc_index].GMAC_SAT = (p_mac_addr[5] << 8)
  40c21c:	7afb      	ldrb	r3, [r7, #11]
  40c21e:	687a      	ldr	r2, [r7, #4]
  40c220:	3205      	adds	r2, #5
  40c222:	7812      	ldrb	r2, [r2, #0]
  40c224:	0212      	lsls	r2, r2, #8
			| (p_mac_addr[4]);
  40c226:	6879      	ldr	r1, [r7, #4]
  40c228:	3104      	adds	r1, #4
  40c22a:	7809      	ldrb	r1, [r1, #0]
  40c22c:	430a      	orrs	r2, r1
{
	p_gmac->GMAC_SA[uc_index].GMAC_SAB = (p_mac_addr[3] << 24)
			| (p_mac_addr[2] << 16)
			| (p_mac_addr[1] << 8)
			| (p_mac_addr[0]);
	p_gmac->GMAC_SA[uc_index].GMAC_SAT = (p_mac_addr[5] << 8)
  40c22e:	4611      	mov	r1, r2
  40c230:	68fa      	ldr	r2, [r7, #12]
  40c232:	3311      	adds	r3, #17
  40c234:	00db      	lsls	r3, r3, #3
  40c236:	4413      	add	r3, r2
  40c238:	6059      	str	r1, [r3, #4]
			| (p_mac_addr[4]);
}
  40c23a:	bf00      	nop
  40c23c:	3714      	adds	r7, #20
  40c23e:	46bd      	mov	sp, r7
  40c240:	f85d 7b04 	ldr.w	r7, [sp], #4
  40c244:	4770      	bx	lr
  40c246:	bf00      	nop

0040c248 <gmac_get_priority_interrupt_status>:
 * \param queue_idx   Index of queue, start from 1
 *
 * \return Interrupt status.
 */
static inline uint32_t gmac_get_priority_interrupt_status(Gmac* p_gmac, gmac_quelist_t queue_idx)
{
  40c248:	b480      	push	{r7}
  40c24a:	b083      	sub	sp, #12
  40c24c:	af00      	add	r7, sp, #0
  40c24e:	6078      	str	r0, [r7, #4]
  40c250:	460b      	mov	r3, r1
  40c252:	70fb      	strb	r3, [r7, #3]
	return p_gmac->GMAC_ISRPQ[queue_idx - 1];
  40c254:	78fb      	ldrb	r3, [r7, #3]
  40c256:	1e5a      	subs	r2, r3, #1
  40c258:	687b      	ldr	r3, [r7, #4]
  40c25a:	f502 7280 	add.w	r2, r2, #256	; 0x100
  40c25e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
  40c262:	4618      	mov	r0, r3
  40c264:	370c      	adds	r7, #12
  40c266:	46bd      	mov	sp, r7
  40c268:	f85d 7b04 	ldr.w	r7, [sp], #4
  40c26c:	4770      	bx	lr
  40c26e:	bf00      	nop

0040c270 <gmac_set_tx_priority_queue>:
 *
 * \param p_gmac   Pointer to the GMAC instance.
 * \param queue_idx   Index of queue, start from 1
 */
static inline void gmac_set_tx_priority_queue(Gmac* p_gmac, uint32_t ul_addr, gmac_quelist_t queue_idx)
{
  40c270:	b480      	push	{r7}
  40c272:	b085      	sub	sp, #20
  40c274:	af00      	add	r7, sp, #0
  40c276:	60f8      	str	r0, [r7, #12]
  40c278:	60b9      	str	r1, [r7, #8]
  40c27a:	4613      	mov	r3, r2
  40c27c:	71fb      	strb	r3, [r7, #7]
    p_gmac->GMAC_TBQBAPQ[queue_idx - 1] = GMAC_TBQB_ADDR_Msk & ul_addr;
  40c27e:	79fb      	ldrb	r3, [r7, #7]
  40c280:	1e5a      	subs	r2, r3, #1
  40c282:	68bb      	ldr	r3, [r7, #8]
  40c284:	f023 0103 	bic.w	r1, r3, #3
  40c288:	68fb      	ldr	r3, [r7, #12]
  40c28a:	f502 7288 	add.w	r2, r2, #272	; 0x110
  40c28e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  40c292:	bf00      	nop
  40c294:	3714      	adds	r7, #20
  40c296:	46bd      	mov	sp, r7
  40c298:	f85d 7b04 	ldr.w	r7, [sp], #4
  40c29c:	4770      	bx	lr
  40c29e:	bf00      	nop

0040c2a0 <gmac_set_rx_priority_queue>:
 *
 * \param p_gmac   Pointer to the GMAC instance.
 * \param queue_idx   Index of queue, start from 1
 */
static inline void gmac_set_rx_priority_queue(Gmac* p_gmac, uint32_t ul_addr, gmac_quelist_t queue_idx)
{
  40c2a0:	b480      	push	{r7}
  40c2a2:	b085      	sub	sp, #20
  40c2a4:	af00      	add	r7, sp, #0
  40c2a6:	60f8      	str	r0, [r7, #12]
  40c2a8:	60b9      	str	r1, [r7, #8]
  40c2aa:	4613      	mov	r3, r2
  40c2ac:	71fb      	strb	r3, [r7, #7]
    p_gmac->GMAC_RBQBAPQ[queue_idx - 1] = GMAC_RBQB_ADDR_Msk & ul_addr;
  40c2ae:	79fb      	ldrb	r3, [r7, #7]
  40c2b0:	1e5a      	subs	r2, r3, #1
  40c2b2:	68bb      	ldr	r3, [r7, #8]
  40c2b4:	f023 0103 	bic.w	r1, r3, #3
  40c2b8:	68fb      	ldr	r3, [r7, #12]
  40c2ba:	f502 7290 	add.w	r2, r2, #288	; 0x120
  40c2be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  40c2c2:	bf00      	nop
  40c2c4:	3714      	adds	r7, #20
  40c2c6:	46bd      	mov	sp, r7
  40c2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
  40c2cc:	4770      	bx	lr
  40c2ce:	bf00      	nop

0040c2d0 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  40c2d0:	b480      	push	{r7}
  40c2d2:	b083      	sub	sp, #12
  40c2d4:	af00      	add	r7, sp, #0
  40c2d6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40c2d8:	687b      	ldr	r3, [r7, #4]
  40c2da:	2b07      	cmp	r3, #7
  40c2dc:	d825      	bhi.n	40c32a <osc_get_rate+0x5a>
  40c2de:	a201      	add	r2, pc, #4	; (adr r2, 40c2e4 <osc_get_rate+0x14>)
  40c2e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40c2e4:	0040c305 	.word	0x0040c305
  40c2e8:	0040c30b 	.word	0x0040c30b
  40c2ec:	0040c311 	.word	0x0040c311
  40c2f0:	0040c317 	.word	0x0040c317
  40c2f4:	0040c31b 	.word	0x0040c31b
  40c2f8:	0040c31f 	.word	0x0040c31f
  40c2fc:	0040c323 	.word	0x0040c323
  40c300:	0040c327 	.word	0x0040c327
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  40c304:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  40c308:	e010      	b.n	40c32c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  40c30a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40c30e:	e00d      	b.n	40c32c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  40c310:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40c314:	e00a      	b.n	40c32c <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  40c316:	4b08      	ldr	r3, [pc, #32]	; (40c338 <osc_get_rate+0x68>)
  40c318:	e008      	b.n	40c32c <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  40c31a:	4b08      	ldr	r3, [pc, #32]	; (40c33c <osc_get_rate+0x6c>)
  40c31c:	e006      	b.n	40c32c <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  40c31e:	4b08      	ldr	r3, [pc, #32]	; (40c340 <osc_get_rate+0x70>)
  40c320:	e004      	b.n	40c32c <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  40c322:	4b07      	ldr	r3, [pc, #28]	; (40c340 <osc_get_rate+0x70>)
  40c324:	e002      	b.n	40c32c <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  40c326:	4b06      	ldr	r3, [pc, #24]	; (40c340 <osc_get_rate+0x70>)
  40c328:	e000      	b.n	40c32c <osc_get_rate+0x5c>
	}

	return 0;
  40c32a:	2300      	movs	r3, #0
}
  40c32c:	4618      	mov	r0, r3
  40c32e:	370c      	adds	r7, #12
  40c330:	46bd      	mov	sp, r7
  40c332:	f85d 7b04 	ldr.w	r7, [sp], #4
  40c336:	4770      	bx	lr
  40c338:	003d0900 	.word	0x003d0900
  40c33c:	007a1200 	.word	0x007a1200
  40c340:	00b71b00 	.word	0x00b71b00

0040c344 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  40c344:	b580      	push	{r7, lr}
  40c346:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  40c348:	2006      	movs	r0, #6
  40c34a:	4b05      	ldr	r3, [pc, #20]	; (40c360 <sysclk_get_main_hz+0x1c>)
  40c34c:	4798      	blx	r3
  40c34e:	4602      	mov	r2, r0
  40c350:	4613      	mov	r3, r2
  40c352:	009b      	lsls	r3, r3, #2
  40c354:	4413      	add	r3, r2
  40c356:	009a      	lsls	r2, r3, #2
  40c358:	4413      	add	r3, r2
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  40c35a:	4618      	mov	r0, r3
  40c35c:	bd80      	pop	{r7, pc}
  40c35e:	bf00      	nop
  40c360:	0040c2d1 	.word	0x0040c2d1

0040c364 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  40c364:	b580      	push	{r7, lr}
  40c366:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  40c368:	4b02      	ldr	r3, [pc, #8]	; (40c374 <sysclk_get_cpu_hz+0x10>)
  40c36a:	4798      	blx	r3
  40c36c:	4603      	mov	r3, r0
  40c36e:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  40c370:	4618      	mov	r0, r3
  40c372:	bd80      	pop	{r7, pc}
  40c374:	0040c345 	.word	0x0040c345

0040c378 <GMAC_Handler>:

/**
 * \brief GMAC interrupt handler.
 */
void GMAC_Handler(void)
{
  40c378:	b580      	push	{r7, lr}
  40c37a:	af00      	add	r7, sp, #0
#if NO_SYS == 1
    NVIC_DisableIRQ(GMAC_IRQn);
  40c37c:	2027      	movs	r0, #39	; 0x27
  40c37e:	4b02      	ldr	r3, [pc, #8]	; (40c388 <GMAC_Handler+0x10>)
  40c380:	4798      	blx	r3
		xSemaphoreGiveFromISR(gs_gmac_dev.rx_sem, &xGMACTaskWoken);
	}

	portEND_SWITCHING_ISR(xGMACTaskWoken);
#endif
}
  40c382:	bf00      	nop
  40c384:	bd80      	pop	{r7, pc}
  40c386:	bf00      	nop
  40c388:	0040bebd 	.word	0x0040bebd

0040c38c <gmac_rx_populate_queue>:
 * (since the lsb are used as status bits by GMAC).
 *
 * \param p_gmac_dev Pointer to driver data structure.
 */
static void gmac_rx_populate_queue(struct gmac_device *p_gmac_dev)
{
  40c38c:	b580      	push	{r7, lr}
  40c38e:	b084      	sub	sp, #16
  40c390:	af00      	add	r7, sp, #0
  40c392:	6078      	str	r0, [r7, #4]
	uint32_t ul_index = 0;
  40c394:	2300      	movs	r3, #0
  40c396:	60fb      	str	r3, [r7, #12]
	struct pbuf *p = 0;
  40c398:	2300      	movs	r3, #0
  40c39a:	60bb      	str	r3, [r7, #8]

	/* Set up the RX descriptors. */
	for (ul_index = 0; ul_index < GMAC_RX_BUFFERS; ul_index++) {
  40c39c:	2300      	movs	r3, #0
  40c39e:	60fb      	str	r3, [r7, #12]
  40c3a0:	e032      	b.n	40c408 <gmac_rx_populate_queue+0x7c>
		if (p_gmac_dev->rx_pbuf[ul_index] == 0) {
  40c3a2:	687b      	ldr	r3, [r7, #4]
  40c3a4:	68fa      	ldr	r2, [r7, #12]
  40c3a6:	320c      	adds	r2, #12
  40c3a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40c3ac:	2b00      	cmp	r3, #0
  40c3ae:	d128      	bne.n	40c402 <gmac_rx_populate_queue+0x76>

			/* Allocate a new pbuf with the maximum size. */
			p = pbuf_alloc(PBUF_RAW, (u16_t) GMAC_FRAME_LENTGH_MAX, PBUF_POOL);
  40c3b0:	2203      	movs	r2, #3
  40c3b2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  40c3b6:	2003      	movs	r0, #3
  40c3b8:	4b18      	ldr	r3, [pc, #96]	; (40c41c <gmac_rx_populate_queue+0x90>)
  40c3ba:	4798      	blx	r3
  40c3bc:	60b8      	str	r0, [r7, #8]
			if (p == NULL) {
  40c3be:	68bb      	ldr	r3, [r7, #8]
  40c3c0:	2b00      	cmp	r3, #0
  40c3c2:	d025      	beq.n	40c410 <gmac_rx_populate_queue+0x84>

			/* Make sure that the payload buffer is properly aligned. */
			LWIP_ASSERT("gmac_rx_populate_queue: unaligned p->payload buffer address",
					(((uint32_t)p->payload & 0xFFFFFFFC) == (uint32_t)p->payload));

			if (ul_index == GMAC_RX_BUFFERS - 1)
  40c3c4:	68fb      	ldr	r3, [r7, #12]
  40c3c6:	2b02      	cmp	r3, #2
  40c3c8:	d108      	bne.n	40c3dc <gmac_rx_populate_queue+0x50>
				p_gmac_dev->rx_desc[ul_index].addr.val = (u32_t) p->payload | GMAC_RXD_WRAP;
  40c3ca:	68bb      	ldr	r3, [r7, #8]
  40c3cc:	685b      	ldr	r3, [r3, #4]
  40c3ce:	f043 0102 	orr.w	r1, r3, #2
  40c3d2:	687b      	ldr	r3, [r7, #4]
  40c3d4:	68fa      	ldr	r2, [r7, #12]
  40c3d6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
  40c3da:	e006      	b.n	40c3ea <gmac_rx_populate_queue+0x5e>
			else
				p_gmac_dev->rx_desc[ul_index].addr.val = (u32_t) p->payload;
  40c3dc:	68bb      	ldr	r3, [r7, #8]
  40c3de:	685b      	ldr	r3, [r3, #4]
  40c3e0:	4619      	mov	r1, r3
  40c3e2:	687b      	ldr	r3, [r7, #4]
  40c3e4:	68fa      	ldr	r2, [r7, #12]
  40c3e6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

			/* Reset status value. */
			p_gmac_dev->rx_desc[ul_index].status.val = 0;
  40c3ea:	687a      	ldr	r2, [r7, #4]
  40c3ec:	68fb      	ldr	r3, [r7, #12]
  40c3ee:	00db      	lsls	r3, r3, #3
  40c3f0:	4413      	add	r3, r2
  40c3f2:	2200      	movs	r2, #0
  40c3f4:	605a      	str	r2, [r3, #4]

			/* Save pbuf pointer to be sent to lwIP upper layer. */
			p_gmac_dev->rx_pbuf[ul_index] = p;
  40c3f6:	687b      	ldr	r3, [r7, #4]
  40c3f8:	68fa      	ldr	r2, [r7, #12]
  40c3fa:	320c      	adds	r2, #12
  40c3fc:	68b9      	ldr	r1, [r7, #8]
  40c3fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
{
	uint32_t ul_index = 0;
	struct pbuf *p = 0;

	/* Set up the RX descriptors. */
	for (ul_index = 0; ul_index < GMAC_RX_BUFFERS; ul_index++) {
  40c402:	68fb      	ldr	r3, [r7, #12]
  40c404:	3301      	adds	r3, #1
  40c406:	60fb      	str	r3, [r7, #12]
  40c408:	68fb      	ldr	r3, [r7, #12]
  40c40a:	2b02      	cmp	r3, #2
  40c40c:	d9c9      	bls.n	40c3a2 <gmac_rx_populate_queue+0x16>
			LWIP_DEBUGF(NETIF_DEBUG,
					("gmac_rx_populate_queue: new pbuf allocated: %p [idx=%u]\n",
					p, ul_index));
		}
	}
}
  40c40e:	e000      	b.n	40c412 <gmac_rx_populate_queue+0x86>

			/* Allocate a new pbuf with the maximum size. */
			p = pbuf_alloc(PBUF_RAW, (u16_t) GMAC_FRAME_LENTGH_MAX, PBUF_POOL);
			if (p == NULL) {
				LWIP_DEBUGF(NETIF_DEBUG, ("gmac_rx_populate_queue: pbuf allocation failure\n"));
				break;
  40c410:	bf00      	nop
			LWIP_DEBUGF(NETIF_DEBUG,
					("gmac_rx_populate_queue: new pbuf allocated: %p [idx=%u]\n",
					p, ul_index));
		}
	}
}
  40c412:	bf00      	nop
  40c414:	3710      	adds	r7, #16
  40c416:	46bd      	mov	sp, r7
  40c418:	bd80      	pop	{r7, pc}
  40c41a:	bf00      	nop
  40c41c:	00405cc5 	.word	0x00405cc5

0040c420 <gmac_rx_init>:
 * This function sets up the descriptor list used for receive packets.
 *
 * \param ps_gmac_dev Pointer to driver data structure.
 */
static void gmac_rx_init(struct gmac_device *ps_gmac_dev)
{
  40c420:	b580      	push	{r7, lr}
  40c422:	b084      	sub	sp, #16
  40c424:	af00      	add	r7, sp, #0
  40c426:	6078      	str	r0, [r7, #4]
	uint32_t ul_index = 0;
  40c428:	2300      	movs	r3, #0
  40c42a:	60fb      	str	r3, [r7, #12]

	/* Init RX index. */
	ps_gmac_dev->us_rx_idx = 0;
  40c42c:	687a      	ldr	r2, [r7, #4]
  40c42e:	f241 2308 	movw	r3, #4616	; 0x1208
  40c432:	4413      	add	r3, r2
  40c434:	2200      	movs	r2, #0
  40c436:	601a      	str	r2, [r3, #0]

	/* Set up the RX descriptors. */
	for (ul_index = 0; ul_index < GMAC_RX_BUFFERS; ul_index++) {
  40c438:	2300      	movs	r3, #0
  40c43a:	60fb      	str	r3, [r7, #12]
  40c43c:	e013      	b.n	40c466 <gmac_rx_init+0x46>
		ps_gmac_dev->rx_pbuf[ul_index] = 0;
  40c43e:	687b      	ldr	r3, [r7, #4]
  40c440:	68fa      	ldr	r2, [r7, #12]
  40c442:	320c      	adds	r2, #12
  40c444:	2100      	movs	r1, #0
  40c446:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		ps_gmac_dev->rx_desc[ul_index].addr.val = 0;
  40c44a:	687b      	ldr	r3, [r7, #4]
  40c44c:	68fa      	ldr	r2, [r7, #12]
  40c44e:	2100      	movs	r1, #0
  40c450:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
		ps_gmac_dev->rx_desc[ul_index].status.val = 0;
  40c454:	687a      	ldr	r2, [r7, #4]
  40c456:	68fb      	ldr	r3, [r7, #12]
  40c458:	00db      	lsls	r3, r3, #3
  40c45a:	4413      	add	r3, r2
  40c45c:	2200      	movs	r2, #0
  40c45e:	605a      	str	r2, [r3, #4]

	/* Init RX index. */
	ps_gmac_dev->us_rx_idx = 0;

	/* Set up the RX descriptors. */
	for (ul_index = 0; ul_index < GMAC_RX_BUFFERS; ul_index++) {
  40c460:	68fb      	ldr	r3, [r7, #12]
  40c462:	3301      	adds	r3, #1
  40c464:	60fb      	str	r3, [r7, #12]
  40c466:	68fb      	ldr	r3, [r7, #12]
  40c468:	2b02      	cmp	r3, #2
  40c46a:	d9e8      	bls.n	40c43e <gmac_rx_init+0x1e>
		ps_gmac_dev->rx_pbuf[ul_index] = 0;
		ps_gmac_dev->rx_desc[ul_index].addr.val = 0;
		ps_gmac_dev->rx_desc[ul_index].status.val = 0;
	}
	ps_gmac_dev->rx_desc[ul_index - 1].addr.val |= GMAC_RXD_WRAP;
  40c46c:	68fb      	ldr	r3, [r7, #12]
  40c46e:	1e5a      	subs	r2, r3, #1
  40c470:	68fb      	ldr	r3, [r7, #12]
  40c472:	1e59      	subs	r1, r3, #1
  40c474:	687b      	ldr	r3, [r7, #4]
  40c476:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
  40c47a:	f043 0102 	orr.w	r1, r3, #2
  40c47e:	687b      	ldr	r3, [r7, #4]
  40c480:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

	/* Build RX buffer and descriptors. */
	gmac_rx_populate_queue(ps_gmac_dev);
  40c484:	6878      	ldr	r0, [r7, #4]
  40c486:	4b05      	ldr	r3, [pc, #20]	; (40c49c <gmac_rx_init+0x7c>)
  40c488:	4798      	blx	r3

	/* Set receive buffer queue base address pointer. */
	gmac_set_rx_queue(GMAC, (uint32_t) &ps_gmac_dev->rx_desc[0]);
  40c48a:	687b      	ldr	r3, [r7, #4]
  40c48c:	4619      	mov	r1, r3
  40c48e:	4804      	ldr	r0, [pc, #16]	; (40c4a0 <gmac_rx_init+0x80>)
  40c490:	4b04      	ldr	r3, [pc, #16]	; (40c4a4 <gmac_rx_init+0x84>)
  40c492:	4798      	blx	r3
}
  40c494:	bf00      	nop
  40c496:	3710      	adds	r7, #16
  40c498:	46bd      	mov	sp, r7
  40c49a:	bd80      	pop	{r7, pc}
  40c49c:	0040c38d 	.word	0x0040c38d
  40c4a0:	40050000 	.word	0x40050000
  40c4a4:	0040c125 	.word	0x0040c125

0040c4a8 <gmac_tx_init>:
 * This function sets up the descriptor list used for receive packets.
 *
 * \param ps_gmac_dev Pointer to driver data structure.
 */
static void gmac_tx_init(struct gmac_device *ps_gmac_dev)
{
  40c4a8:	b580      	push	{r7, lr}
  40c4aa:	b084      	sub	sp, #16
  40c4ac:	af00      	add	r7, sp, #0
  40c4ae:	6078      	str	r0, [r7, #4]
	uint32_t ul_index;

	/* Init TX index pointer. */
	ps_gmac_dev->us_tx_idx = 0;
  40c4b0:	687a      	ldr	r2, [r7, #4]
  40c4b2:	f241 230c 	movw	r3, #4620	; 0x120c
  40c4b6:	4413      	add	r3, r2
  40c4b8:	2200      	movs	r2, #0
  40c4ba:	601a      	str	r2, [r3, #0]

	/* Set up the TX descriptors. */
	for (ul_index = 0; ul_index < GMAC_TX_BUFFERS; ul_index++) {
  40c4bc:	2300      	movs	r3, #0
  40c4be:	60fb      	str	r3, [r7, #12]
  40c4c0:	e019      	b.n	40c4f6 <gmac_tx_init+0x4e>
		ps_gmac_dev->tx_desc[ul_index].addr = (uint32_t)&ps_gmac_dev->tx_buf[ul_index][0];
  40c4c2:	68fb      	ldr	r3, [r7, #12]
  40c4c4:	f240 52ee 	movw	r2, #1518	; 0x5ee
  40c4c8:	fb02 f303 	mul.w	r3, r2, r3
  40c4cc:	3338      	adds	r3, #56	; 0x38
  40c4ce:	687a      	ldr	r2, [r7, #4]
  40c4d0:	4413      	add	r3, r2
  40c4d2:	3304      	adds	r3, #4
  40c4d4:	4619      	mov	r1, r3
  40c4d6:	687b      	ldr	r3, [r7, #4]
  40c4d8:	68fa      	ldr	r2, [r7, #12]
  40c4da:	3203      	adds	r2, #3
  40c4dc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
		ps_gmac_dev->tx_desc[ul_index].status.val = GMAC_TXD_USED | GMAC_TXD_LAST;
  40c4e0:	687a      	ldr	r2, [r7, #4]
  40c4e2:	68fb      	ldr	r3, [r7, #12]
  40c4e4:	3303      	adds	r3, #3
  40c4e6:	00db      	lsls	r3, r3, #3
  40c4e8:	4413      	add	r3, r2
  40c4ea:	f04f 2280 	mov.w	r2, #2147516416	; 0x80008000
  40c4ee:	605a      	str	r2, [r3, #4]

	/* Init TX index pointer. */
	ps_gmac_dev->us_tx_idx = 0;

	/* Set up the TX descriptors. */
	for (ul_index = 0; ul_index < GMAC_TX_BUFFERS; ul_index++) {
  40c4f0:	68fb      	ldr	r3, [r7, #12]
  40c4f2:	3301      	adds	r3, #1
  40c4f4:	60fb      	str	r3, [r7, #12]
  40c4f6:	68fb      	ldr	r3, [r7, #12]
  40c4f8:	2b02      	cmp	r3, #2
  40c4fa:	d9e2      	bls.n	40c4c2 <gmac_tx_init+0x1a>
		ps_gmac_dev->tx_desc[ul_index].addr = (uint32_t)&ps_gmac_dev->tx_buf[ul_index][0];
		ps_gmac_dev->tx_desc[ul_index].status.val = GMAC_TXD_USED | GMAC_TXD_LAST;
	}
	ps_gmac_dev->tx_desc[ul_index - 1].status.val |= GMAC_TXD_WRAP;
  40c4fc:	68fb      	ldr	r3, [r7, #12]
  40c4fe:	1e58      	subs	r0, r3, #1
  40c500:	68fb      	ldr	r3, [r7, #12]
  40c502:	3b01      	subs	r3, #1
  40c504:	687a      	ldr	r2, [r7, #4]
  40c506:	3303      	adds	r3, #3
  40c508:	00db      	lsls	r3, r3, #3
  40c50a:	4413      	add	r3, r2
  40c50c:	685b      	ldr	r3, [r3, #4]
  40c50e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
  40c512:	6879      	ldr	r1, [r7, #4]
  40c514:	1cc3      	adds	r3, r0, #3
  40c516:	00db      	lsls	r3, r3, #3
  40c518:	440b      	add	r3, r1
  40c51a:	605a      	str	r2, [r3, #4]

	/* Set receive buffer queue base address pointer. */
	gmac_set_tx_queue(GMAC, (uint32_t) &ps_gmac_dev->tx_desc[0]);
  40c51c:	687b      	ldr	r3, [r7, #4]
  40c51e:	3318      	adds	r3, #24
  40c520:	4619      	mov	r1, r3
  40c522:	4803      	ldr	r0, [pc, #12]	; (40c530 <gmac_tx_init+0x88>)
  40c524:	4b03      	ldr	r3, [pc, #12]	; (40c534 <gmac_tx_init+0x8c>)
  40c526:	4798      	blx	r3
}
  40c528:	bf00      	nop
  40c52a:	3710      	adds	r7, #16
  40c52c:	46bd      	mov	sp, r7
  40c52e:	bd80      	pop	{r7, pc}
  40c530:	40050000 	.word	0x40050000
  40c534:	0040c171 	.word	0x0040c171

0040c538 <gmac_low_level_init>:
 * \note Called from ethernetif_init().
 *
 * \param netif the lwIP network interface structure for this ethernetif.
 */
static void gmac_low_level_init(struct netif *netif)
{
  40c538:	b580      	push	{r7, lr}
  40c53a:	b084      	sub	sp, #16
  40c53c:	af00      	add	r7, sp, #0
  40c53e:	6078      	str	r0, [r7, #4]
	volatile uint32_t ul_delay;

	/* Set MAC hardware address length. */
	netif->hwaddr_len = sizeof(gs_uc_mac_address);
  40c540:	687b      	ldr	r3, [r7, #4]
  40c542:	2206      	movs	r2, #6
  40c544:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	/* Set MAC hardware address. */
	netif->hwaddr[0] = gs_uc_mac_address[0];
  40c548:	4b74      	ldr	r3, [pc, #464]	; (40c71c <gmac_low_level_init+0x1e4>)
  40c54a:	781a      	ldrb	r2, [r3, #0]
  40c54c:	687b      	ldr	r3, [r7, #4]
  40c54e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	netif->hwaddr[1] = gs_uc_mac_address[1];
  40c552:	4b72      	ldr	r3, [pc, #456]	; (40c71c <gmac_low_level_init+0x1e4>)
  40c554:	785a      	ldrb	r2, [r3, #1]
  40c556:	687b      	ldr	r3, [r7, #4]
  40c558:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	netif->hwaddr[2] = gs_uc_mac_address[2];
  40c55c:	4b6f      	ldr	r3, [pc, #444]	; (40c71c <gmac_low_level_init+0x1e4>)
  40c55e:	789a      	ldrb	r2, [r3, #2]
  40c560:	687b      	ldr	r3, [r7, #4]
  40c562:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	netif->hwaddr[3] = gs_uc_mac_address[3];
  40c566:	4b6d      	ldr	r3, [pc, #436]	; (40c71c <gmac_low_level_init+0x1e4>)
  40c568:	78da      	ldrb	r2, [r3, #3]
  40c56a:	687b      	ldr	r3, [r7, #4]
  40c56c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	netif->hwaddr[4] = gs_uc_mac_address[4];
  40c570:	4b6a      	ldr	r3, [pc, #424]	; (40c71c <gmac_low_level_init+0x1e4>)
  40c572:	791a      	ldrb	r2, [r3, #4]
  40c574:	687b      	ldr	r3, [r7, #4]
  40c576:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	netif->hwaddr[5] = gs_uc_mac_address[5];
  40c57a:	4b68      	ldr	r3, [pc, #416]	; (40c71c <gmac_low_level_init+0x1e4>)
  40c57c:	795a      	ldrb	r2, [r3, #5]
  40c57e:	687b      	ldr	r3, [r7, #4]
  40c580:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	/* Set maximum transfer unit. */
	netif->mtu = NET_MTU;
  40c584:	687b      	ldr	r3, [r7, #4]
  40c586:	f240 52dc 	movw	r2, #1500	; 0x5dc
  40c58a:	851a      	strh	r2, [r3, #40]	; 0x28

	/* Device capabilities. */
	netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP
  40c58c:	687b      	ldr	r3, [r7, #4]
  40c58e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
  40c592:	f043 0322 	orr.w	r3, r3, #34	; 0x22
  40c596:	b2da      	uxtb	r2, r3
  40c598:	687b      	ldr	r3, [r7, #4]
  40c59a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			| NETIF_FLAG_DHCP
#endif
	;

	/* Wait for PHY to be ready (CAT811: Max400ms). */
	ul_delay = sysclk_get_cpu_hz() / 1000 / 3 * 400;
  40c59e:	4b60      	ldr	r3, [pc, #384]	; (40c720 <gmac_low_level_init+0x1e8>)
  40c5a0:	4798      	blx	r3
  40c5a2:	4602      	mov	r2, r0
  40c5a4:	4b5f      	ldr	r3, [pc, #380]	; (40c724 <gmac_low_level_init+0x1ec>)
  40c5a6:	fba3 2302 	umull	r2, r3, r3, r2
  40c5aa:	099b      	lsrs	r3, r3, #6
  40c5ac:	f44f 72c8 	mov.w	r2, #400	; 0x190
  40c5b0:	fb02 f303 	mul.w	r3, r2, r3
  40c5b4:	60fb      	str	r3, [r7, #12]
	while (ul_delay--) {
  40c5b6:	bf00      	nop
  40c5b8:	68fb      	ldr	r3, [r7, #12]
  40c5ba:	1e5a      	subs	r2, r3, #1
  40c5bc:	60fa      	str	r2, [r7, #12]
  40c5be:	2b00      	cmp	r3, #0
  40c5c0:	d1fa      	bne.n	40c5b8 <gmac_low_level_init+0x80>
	}

	/* Enable GMAC clock. */
	pmc_enable_periph_clk(ID_GMAC);
  40c5c2:	2027      	movs	r0, #39	; 0x27
  40c5c4:	4b58      	ldr	r3, [pc, #352]	; (40c728 <gmac_low_level_init+0x1f0>)
  40c5c6:	4798      	blx	r3

	/* Disable TX & RX and more. */
	gmac_network_control(GMAC, 0);
  40c5c8:	2100      	movs	r1, #0
  40c5ca:	4858      	ldr	r0, [pc, #352]	; (40c72c <gmac_low_level_init+0x1f4>)
  40c5cc:	4b58      	ldr	r3, [pc, #352]	; (40c730 <gmac_low_level_init+0x1f8>)
  40c5ce:	4798      	blx	r3
	gmac_disable_interrupt(GMAC, ~0u);
  40c5d0:	f04f 31ff 	mov.w	r1, #4294967295
  40c5d4:	4855      	ldr	r0, [pc, #340]	; (40c72c <gmac_low_level_init+0x1f4>)
  40c5d6:	4b57      	ldr	r3, [pc, #348]	; (40c734 <gmac_low_level_init+0x1fc>)
  40c5d8:	4798      	blx	r3

	gmac_clear_statistics(GMAC);
  40c5da:	4854      	ldr	r0, [pc, #336]	; (40c72c <gmac_low_level_init+0x1f4>)
  40c5dc:	4b56      	ldr	r3, [pc, #344]	; (40c738 <gmac_low_level_init+0x200>)
  40c5de:	4798      	blx	r3

	/* Clear all status bits in the receive status register. */
	gmac_clear_rx_status(GMAC, GMAC_RSR_BNA | GMAC_RSR_REC | GMAC_RSR_RXOVR
  40c5e0:	210f      	movs	r1, #15
  40c5e2:	4852      	ldr	r0, [pc, #328]	; (40c72c <gmac_low_level_init+0x1f4>)
  40c5e4:	4b55      	ldr	r3, [pc, #340]	; (40c73c <gmac_low_level_init+0x204>)
  40c5e6:	4798      	blx	r3
			| GMAC_RSR_HNO);

	/* Clear all status bits in the transmit status register. */
	gmac_clear_tx_status(GMAC, GMAC_TSR_UBR | GMAC_TSR_COL | GMAC_TSR_RLE
  40c5e8:	f240 113f 	movw	r1, #319	; 0x13f
  40c5ec:	484f      	ldr	r0, [pc, #316]	; (40c72c <gmac_low_level_init+0x1f4>)
  40c5ee:	4b54      	ldr	r3, [pc, #336]	; (40c740 <gmac_low_level_init+0x208>)
  40c5f0:	4798      	blx	r3
			| GMAC_TSR_TXGO | GMAC_TSR_TFC | GMAC_TSR_TXCOMP
			| GMAC_TSR_HRESP);

	/* Clear interrupts. */
	gmac_get_interrupt_status(GMAC);
  40c5f2:	484e      	ldr	r0, [pc, #312]	; (40c72c <gmac_low_level_init+0x1f4>)
  40c5f4:	4b53      	ldr	r3, [pc, #332]	; (40c744 <gmac_low_level_init+0x20c>)
  40c5f6:	4798      	blx	r3

	/* Enable the copy of data into the buffers
	   ignore broadcasts, and not copy FCS. */
	gmac_enable_copy_all(GMAC, false);
  40c5f8:	2100      	movs	r1, #0
  40c5fa:	484c      	ldr	r0, [pc, #304]	; (40c72c <gmac_low_level_init+0x1f4>)
  40c5fc:	4b52      	ldr	r3, [pc, #328]	; (40c748 <gmac_low_level_init+0x210>)
  40c5fe:	4798      	blx	r3
	gmac_disable_broadcast(GMAC, false);
  40c600:	2100      	movs	r1, #0
  40c602:	484a      	ldr	r0, [pc, #296]	; (40c72c <gmac_low_level_init+0x1f4>)
  40c604:	4b51      	ldr	r3, [pc, #324]	; (40c74c <gmac_low_level_init+0x214>)
  40c606:	4798      	blx	r3

	/* Set RX buffer size to 1536. */
	gmac_set_rx_bufsize(GMAC, 0x18);
  40c608:	2118      	movs	r1, #24
  40c60a:	4848      	ldr	r0, [pc, #288]	; (40c72c <gmac_low_level_init+0x1f4>)
  40c60c:	4b50      	ldr	r3, [pc, #320]	; (40c750 <gmac_low_level_init+0x218>)
  40c60e:	4798      	blx	r3

	/* Clear interrupts */
	gmac_get_priority_interrupt_status(GMAC, GMAC_QUE_2);
  40c610:	2102      	movs	r1, #2
  40c612:	4846      	ldr	r0, [pc, #280]	; (40c72c <gmac_low_level_init+0x1f4>)
  40c614:	4b4f      	ldr	r3, [pc, #316]	; (40c754 <gmac_low_level_init+0x21c>)
  40c616:	4798      	blx	r3
	gmac_get_priority_interrupt_status(GMAC, GMAC_QUE_1);
  40c618:	2101      	movs	r1, #1
  40c61a:	4844      	ldr	r0, [pc, #272]	; (40c72c <gmac_low_level_init+0x1f4>)
  40c61c:	4b4d      	ldr	r3, [pc, #308]	; (40c754 <gmac_low_level_init+0x21c>)
  40c61e:	4798      	blx	r3

	/* Set Tx Priority */
	gs_tx_desc_null.addr = (uint32_t)0xFFFFFFFF;
  40c620:	4b4d      	ldr	r3, [pc, #308]	; (40c758 <gmac_low_level_init+0x220>)
  40c622:	f04f 32ff 	mov.w	r2, #4294967295
  40c626:	601a      	str	r2, [r3, #0]
	gs_tx_desc_null.status.val = GMAC_TXD_WRAP | GMAC_TXD_USED;
  40c628:	4b4b      	ldr	r3, [pc, #300]	; (40c758 <gmac_low_level_init+0x220>)
  40c62a:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
  40c62e:	605a      	str	r2, [r3, #4]
	gmac_set_tx_priority_queue(GMAC, (uint32_t)&gs_tx_desc_null, GMAC_QUE_2);
  40c630:	4b49      	ldr	r3, [pc, #292]	; (40c758 <gmac_low_level_init+0x220>)
  40c632:	2202      	movs	r2, #2
  40c634:	4619      	mov	r1, r3
  40c636:	483d      	ldr	r0, [pc, #244]	; (40c72c <gmac_low_level_init+0x1f4>)
  40c638:	4b48      	ldr	r3, [pc, #288]	; (40c75c <gmac_low_level_init+0x224>)
  40c63a:	4798      	blx	r3
	gmac_set_tx_priority_queue(GMAC, (uint32_t)&gs_tx_desc_null, GMAC_QUE_1);
  40c63c:	4b46      	ldr	r3, [pc, #280]	; (40c758 <gmac_low_level_init+0x220>)
  40c63e:	2201      	movs	r2, #1
  40c640:	4619      	mov	r1, r3
  40c642:	483a      	ldr	r0, [pc, #232]	; (40c72c <gmac_low_level_init+0x1f4>)
  40c644:	4b45      	ldr	r3, [pc, #276]	; (40c75c <gmac_low_level_init+0x224>)
  40c646:	4798      	blx	r3
	
	/* Set Rx Priority */
	gs_rx_desc_null.addr.val = (uint32_t)0xFFFFFFFF & GMAC_RXD_ADDR_MASK;
  40c648:	4b45      	ldr	r3, [pc, #276]	; (40c760 <gmac_low_level_init+0x228>)
  40c64a:	f06f 0203 	mvn.w	r2, #3
  40c64e:	601a      	str	r2, [r3, #0]
	gs_rx_desc_null.addr.val |= GMAC_RXD_WRAP;
  40c650:	4b43      	ldr	r3, [pc, #268]	; (40c760 <gmac_low_level_init+0x228>)
  40c652:	681b      	ldr	r3, [r3, #0]
  40c654:	f043 0302 	orr.w	r3, r3, #2
  40c658:	4a41      	ldr	r2, [pc, #260]	; (40c760 <gmac_low_level_init+0x228>)
  40c65a:	6013      	str	r3, [r2, #0]
	gs_rx_desc_null.status.val = 0;
  40c65c:	4b40      	ldr	r3, [pc, #256]	; (40c760 <gmac_low_level_init+0x228>)
  40c65e:	2200      	movs	r2, #0
  40c660:	605a      	str	r2, [r3, #4]
	gmac_set_rx_priority_queue(GMAC, (uint32_t)&gs_rx_desc_null, GMAC_QUE_2);
  40c662:	4b3f      	ldr	r3, [pc, #252]	; (40c760 <gmac_low_level_init+0x228>)
  40c664:	2202      	movs	r2, #2
  40c666:	4619      	mov	r1, r3
  40c668:	4830      	ldr	r0, [pc, #192]	; (40c72c <gmac_low_level_init+0x1f4>)
  40c66a:	4b3e      	ldr	r3, [pc, #248]	; (40c764 <gmac_low_level_init+0x22c>)
  40c66c:	4798      	blx	r3
	gmac_set_rx_priority_queue(GMAC, (uint32_t)&gs_rx_desc_null, GMAC_QUE_1);
  40c66e:	4b3c      	ldr	r3, [pc, #240]	; (40c760 <gmac_low_level_init+0x228>)
  40c670:	2201      	movs	r2, #1
  40c672:	4619      	mov	r1, r3
  40c674:	482d      	ldr	r0, [pc, #180]	; (40c72c <gmac_low_level_init+0x1f4>)
  40c676:	4b3b      	ldr	r3, [pc, #236]	; (40c764 <gmac_low_level_init+0x22c>)
  40c678:	4798      	blx	r3

	gmac_rx_init(&gs_gmac_dev);
  40c67a:	483b      	ldr	r0, [pc, #236]	; (40c768 <gmac_low_level_init+0x230>)
  40c67c:	4b3b      	ldr	r3, [pc, #236]	; (40c76c <gmac_low_level_init+0x234>)
  40c67e:	4798      	blx	r3
	gmac_tx_init(&gs_gmac_dev);
  40c680:	4839      	ldr	r0, [pc, #228]	; (40c768 <gmac_low_level_init+0x230>)
  40c682:	4b3b      	ldr	r3, [pc, #236]	; (40c770 <gmac_low_level_init+0x238>)
  40c684:	4798      	blx	r3

	/* Enable Rx, Tx and the statistics register. */
	gmac_enable_transmit(GMAC, true);
  40c686:	2101      	movs	r1, #1
  40c688:	4828      	ldr	r0, [pc, #160]	; (40c72c <gmac_low_level_init+0x1f4>)
  40c68a:	4b3a      	ldr	r3, [pc, #232]	; (40c774 <gmac_low_level_init+0x23c>)
  40c68c:	4798      	blx	r3
	gmac_enable_receive(GMAC, true);
  40c68e:	2101      	movs	r1, #1
  40c690:	4826      	ldr	r0, [pc, #152]	; (40c72c <gmac_low_level_init+0x1f4>)
  40c692:	4b39      	ldr	r3, [pc, #228]	; (40c778 <gmac_low_level_init+0x240>)
  40c694:	4798      	blx	r3
	gmac_enable_statistics_write(GMAC, true);
  40c696:	2101      	movs	r1, #1
  40c698:	4824      	ldr	r0, [pc, #144]	; (40c72c <gmac_low_level_init+0x1f4>)
  40c69a:	4b38      	ldr	r3, [pc, #224]	; (40c77c <gmac_low_level_init+0x244>)
  40c69c:	4798      	blx	r3

	/* Set up the interrupts for transmission and errors. */
	gmac_enable_interrupt(GMAC, GMAC_INT_GROUP);
  40c69e:	2100      	movs	r1, #0
  40c6a0:	4822      	ldr	r0, [pc, #136]	; (40c72c <gmac_low_level_init+0x1f4>)
  40c6a2:	4b37      	ldr	r3, [pc, #220]	; (40c780 <gmac_low_level_init+0x248>)
  40c6a4:	4798      	blx	r3


	/* Set GMAC address. */
	gmac_set_address(GMAC, 0, netif->hwaddr);
  40c6a6:	687b      	ldr	r3, [r7, #4]
  40c6a8:	332b      	adds	r3, #43	; 0x2b
  40c6aa:	461a      	mov	r2, r3
  40c6ac:	2100      	movs	r1, #0
  40c6ae:	481f      	ldr	r0, [pc, #124]	; (40c72c <gmac_low_level_init+0x1f4>)
  40c6b0:	4b34      	ldr	r3, [pc, #208]	; (40c784 <gmac_low_level_init+0x24c>)
  40c6b2:	4798      	blx	r3

	/* Enable NVIC GMAC interrupt. */
	NVIC_SetPriority(GMAC_IRQn, INT_PRIORITY_GMAC);
  40c6b4:	2100      	movs	r1, #0
  40c6b6:	2027      	movs	r0, #39	; 0x27
  40c6b8:	4b33      	ldr	r3, [pc, #204]	; (40c788 <gmac_low_level_init+0x250>)
  40c6ba:	4798      	blx	r3
	NVIC_EnableIRQ(GMAC_IRQn);
  40c6bc:	2027      	movs	r0, #39	; 0x27
  40c6be:	4b33      	ldr	r3, [pc, #204]	; (40c78c <gmac_low_level_init+0x254>)
  40c6c0:	4798      	blx	r3

	/* Init MAC PHY driver. */
	if (ethernet_phy_init(GMAC, BOARD_GMAC_PHY_ADDR, sysclk_get_cpu_hz()) != GMAC_OK) {
  40c6c2:	4b17      	ldr	r3, [pc, #92]	; (40c720 <gmac_low_level_init+0x1e8>)
  40c6c4:	4798      	blx	r3
  40c6c6:	4603      	mov	r3, r0
  40c6c8:	461a      	mov	r2, r3
  40c6ca:	2100      	movs	r1, #0
  40c6cc:	4817      	ldr	r0, [pc, #92]	; (40c72c <gmac_low_level_init+0x1f4>)
  40c6ce:	4b30      	ldr	r3, [pc, #192]	; (40c790 <gmac_low_level_init+0x258>)
  40c6d0:	4798      	blx	r3
  40c6d2:	4603      	mov	r3, r0
  40c6d4:	2b00      	cmp	r3, #0
  40c6d6:	d119      	bne.n	40c70c <gmac_low_level_init+0x1d4>
		LWIP_DEBUGF(NETIF_DEBUG, ("gmac_low_level_init: PHY init ERROR!\n"));
		return;
	}

	/* Auto Negotiate, work in RMII mode. */
	if (ethernet_phy_auto_negotiate(GMAC, BOARD_GMAC_PHY_ADDR) != GMAC_OK) {
  40c6d8:	2100      	movs	r1, #0
  40c6da:	4814      	ldr	r0, [pc, #80]	; (40c72c <gmac_low_level_init+0x1f4>)
  40c6dc:	4b2d      	ldr	r3, [pc, #180]	; (40c794 <gmac_low_level_init+0x25c>)
  40c6de:	4798      	blx	r3
  40c6e0:	4603      	mov	r3, r0
  40c6e2:	2b00      	cmp	r3, #0
  40c6e4:	d114      	bne.n	40c710 <gmac_low_level_init+0x1d8>
		LWIP_DEBUGF(NETIF_DEBUG, ("gmac_low_level_init: auto negotiate ERROR!\n"));
		return;
	}

	/* Establish ethernet link. */
	while (ethernet_phy_set_link(GMAC, BOARD_GMAC_PHY_ADDR, 1) != GMAC_OK) {
  40c6e6:	bf00      	nop
  40c6e8:	2201      	movs	r2, #1
  40c6ea:	2100      	movs	r1, #0
  40c6ec:	480f      	ldr	r0, [pc, #60]	; (40c72c <gmac_low_level_init+0x1f4>)
  40c6ee:	4b2a      	ldr	r3, [pc, #168]	; (40c798 <gmac_low_level_init+0x260>)
  40c6f0:	4798      	blx	r3
  40c6f2:	4603      	mov	r3, r0
  40c6f4:	2b00      	cmp	r3, #0
  40c6f6:	d10d      	bne.n	40c714 <gmac_low_level_init+0x1dc>
		LWIP_DEBUGF(NETIF_DEBUG, ("gmac_low_level_init: set link ERROR!\n"));
		return;
	}

	/* Set link up*/
	netif->flags |= NETIF_FLAG_LINK_UP;
  40c6f8:	687b      	ldr	r3, [r7, #4]
  40c6fa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
  40c6fe:	f043 0310 	orr.w	r3, r3, #16
  40c702:	b2da      	uxtb	r2, r3
  40c704:	687b      	ldr	r3, [r7, #4]
  40c706:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  40c70a:	e004      	b.n	40c716 <gmac_low_level_init+0x1de>
	NVIC_EnableIRQ(GMAC_IRQn);

	/* Init MAC PHY driver. */
	if (ethernet_phy_init(GMAC, BOARD_GMAC_PHY_ADDR, sysclk_get_cpu_hz()) != GMAC_OK) {
		LWIP_DEBUGF(NETIF_DEBUG, ("gmac_low_level_init: PHY init ERROR!\n"));
		return;
  40c70c:	bf00      	nop
  40c70e:	e002      	b.n	40c716 <gmac_low_level_init+0x1de>
	}

	/* Auto Negotiate, work in RMII mode. */
	if (ethernet_phy_auto_negotiate(GMAC, BOARD_GMAC_PHY_ADDR) != GMAC_OK) {
		LWIP_DEBUGF(NETIF_DEBUG, ("gmac_low_level_init: auto negotiate ERROR!\n"));
		return;
  40c710:	bf00      	nop
  40c712:	e000      	b.n	40c716 <gmac_low_level_init+0x1de>
	}

	/* Establish ethernet link. */
	while (ethernet_phy_set_link(GMAC, BOARD_GMAC_PHY_ADDR, 1) != GMAC_OK) {
		LWIP_DEBUGF(NETIF_DEBUG, ("gmac_low_level_init: set link ERROR!\n"));
		return;
  40c714:	bf00      	nop
	}

	/* Set link up*/
	netif->flags |= NETIF_FLAG_LINK_UP;
}
  40c716:	3710      	adds	r7, #16
  40c718:	46bd      	mov	sp, r7
  40c71a:	bd80      	pop	{r7, pc}
  40c71c:	20400018 	.word	0x20400018
  40c720:	0040c365 	.word	0x0040c365
  40c724:	057619f1 	.word	0x057619f1
  40c728:	004019bd 	.word	0x004019bd
  40c72c:	40050000 	.word	0x40050000
  40c730:	0040bf45 	.word	0x0040bf45
  40c734:	0040c1ad 	.word	0x0040c1ad
  40c738:	0040bfd1 	.word	0x0040bfd1
  40c73c:	0040c109 	.word	0x0040c109
  40c740:	0040c0d5 	.word	0x0040c0d5
  40c744:	0040c1c9 	.word	0x0040c1c9
  40c748:	0040c04d 	.word	0x0040c04d
  40c74c:	0040c085 	.word	0x0040c085
  40c750:	0040c145 	.word	0x0040c145
  40c754:	0040c249 	.word	0x0040c249
  40c758:	204026a8 	.word	0x204026a8
  40c75c:	0040c271 	.word	0x0040c271
  40c760:	204026b0 	.word	0x204026b0
  40c764:	0040c2a1 	.word	0x0040c2a1
  40c768:	204026b8 	.word	0x204026b8
  40c76c:	0040c421 	.word	0x0040c421
  40c770:	0040c4a9 	.word	0x0040c4a9
  40c774:	0040bf99 	.word	0x0040bf99
  40c778:	0040bf61 	.word	0x0040bf61
  40c77c:	0040bff1 	.word	0x0040bff1
  40c780:	0040c191 	.word	0x0040c191
  40c784:	0040c1e1 	.word	0x0040c1e1
  40c788:	0040bef1 	.word	0x0040bef1
  40c78c:	0040be89 	.word	0x0040be89
  40c790:	00400cdd 	.word	0x00400cdd
  40c794:	00400ec9 	.word	0x00400ec9
  40c798:	00400d95 	.word	0x00400d95

0040c79c <gmac_low_level_output>:
 *
 * \return ERR_OK if the packet could be sent.
 * an err_t value if the packet couldn't be sent.
 */
static err_t gmac_low_level_output(struct netif *netif, struct pbuf *p)
{
  40c79c:	b580      	push	{r7, lr}
  40c79e:	b086      	sub	sp, #24
  40c7a0:	af00      	add	r7, sp, #0
  40c7a2:	6078      	str	r0, [r7, #4]
  40c7a4:	6039      	str	r1, [r7, #0]
	struct gmac_device *ps_gmac_dev = netif->state;
  40c7a6:	687b      	ldr	r3, [r7, #4]
  40c7a8:	6a1b      	ldr	r3, [r3, #32]
  40c7aa:	60fb      	str	r3, [r7, #12]
	struct pbuf *q = NULL;
  40c7ac:	2300      	movs	r3, #0
  40c7ae:	617b      	str	r3, [r7, #20]
	uint8_t *buffer = 0;
  40c7b0:	2300      	movs	r3, #0
  40c7b2:	613b      	str	r3, [r7, #16]

	/* Handle GMAC underrun or AHB errors. */
	if (gmac_get_tx_status(GMAC) & GMAC_TX_ERRORS) {
  40c7b4:	482e      	ldr	r0, [pc, #184]	; (40c870 <gmac_low_level_output+0xd4>)
  40c7b6:	4b2f      	ldr	r3, [pc, #188]	; (40c874 <gmac_low_level_output+0xd8>)
  40c7b8:	4798      	blx	r3
		gmac_clear_tx_status(GMAC, GMAC_TX_ERRORS);

		gmac_enable_transmit(GMAC, true);
	}

	buffer = (uint8_t*)ps_gmac_dev->tx_desc[ps_gmac_dev->us_tx_idx].addr;
  40c7ba:	68fa      	ldr	r2, [r7, #12]
  40c7bc:	f241 230c 	movw	r3, #4620	; 0x120c
  40c7c0:	4413      	add	r3, r2
  40c7c2:	681a      	ldr	r2, [r3, #0]
  40c7c4:	68fb      	ldr	r3, [r7, #12]
  40c7c6:	3203      	adds	r2, #3
  40c7c8:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
  40c7cc:	613b      	str	r3, [r7, #16]

	/* Copy pbuf chain into TX buffer. */
	for (q = p; q != NULL; q = q->next) {
  40c7ce:	683b      	ldr	r3, [r7, #0]
  40c7d0:	617b      	str	r3, [r7, #20]
  40c7d2:	e010      	b.n	40c7f6 <gmac_low_level_output+0x5a>
		memcpy(buffer, q->payload, q->len);
  40c7d4:	697b      	ldr	r3, [r7, #20]
  40c7d6:	6859      	ldr	r1, [r3, #4]
  40c7d8:	697b      	ldr	r3, [r7, #20]
  40c7da:	895b      	ldrh	r3, [r3, #10]
  40c7dc:	461a      	mov	r2, r3
  40c7de:	6938      	ldr	r0, [r7, #16]
  40c7e0:	4b25      	ldr	r3, [pc, #148]	; (40c878 <gmac_low_level_output+0xdc>)
  40c7e2:	4798      	blx	r3
		buffer += q->len;
  40c7e4:	697b      	ldr	r3, [r7, #20]
  40c7e6:	895b      	ldrh	r3, [r3, #10]
  40c7e8:	461a      	mov	r2, r3
  40c7ea:	693b      	ldr	r3, [r7, #16]
  40c7ec:	4413      	add	r3, r2
  40c7ee:	613b      	str	r3, [r7, #16]
	}

	buffer = (uint8_t*)ps_gmac_dev->tx_desc[ps_gmac_dev->us_tx_idx].addr;

	/* Copy pbuf chain into TX buffer. */
	for (q = p; q != NULL; q = q->next) {
  40c7f0:	697b      	ldr	r3, [r7, #20]
  40c7f2:	681b      	ldr	r3, [r3, #0]
  40c7f4:	617b      	str	r3, [r7, #20]
  40c7f6:	697b      	ldr	r3, [r7, #20]
  40c7f8:	2b00      	cmp	r3, #0
  40c7fa:	d1eb      	bne.n	40c7d4 <gmac_low_level_output+0x38>
		memcpy(buffer, q->payload, q->len);
		buffer += q->len;
	}

	/* Set len and mark the buffer to be sent by GMAC. */
	ps_gmac_dev->tx_desc[ps_gmac_dev->us_tx_idx].status.bm.b_len = p->tot_len;
  40c7fc:	68fa      	ldr	r2, [r7, #12]
  40c7fe:	f241 230c 	movw	r3, #4620	; 0x120c
  40c802:	4413      	add	r3, r2
  40c804:	681b      	ldr	r3, [r3, #0]
  40c806:	683a      	ldr	r2, [r7, #0]
  40c808:	8912      	ldrh	r2, [r2, #8]
  40c80a:	f3c2 020d 	ubfx	r2, r2, #0, #14
  40c80e:	b291      	uxth	r1, r2
  40c810:	68fa      	ldr	r2, [r7, #12]
  40c812:	3303      	adds	r3, #3
  40c814:	00db      	lsls	r3, r3, #3
  40c816:	4413      	add	r3, r2
  40c818:	889a      	ldrh	r2, [r3, #4]
  40c81a:	f361 020d 	bfi	r2, r1, #0, #14
  40c81e:	809a      	strh	r2, [r3, #4]
	ps_gmac_dev->tx_desc[ps_gmac_dev->us_tx_idx].status.bm.b_used = 0;
  40c820:	68fa      	ldr	r2, [r7, #12]
  40c822:	f241 230c 	movw	r3, #4620	; 0x120c
  40c826:	4413      	add	r3, r2
  40c828:	681b      	ldr	r3, [r3, #0]
  40c82a:	68fa      	ldr	r2, [r7, #12]
  40c82c:	3303      	adds	r3, #3
  40c82e:	00db      	lsls	r3, r3, #3
  40c830:	4413      	add	r3, r2
  40c832:	79da      	ldrb	r2, [r3, #7]
  40c834:	f36f 12c7 	bfc	r2, #7, #1
  40c838:	71da      	strb	r2, [r3, #7]

	LWIP_DEBUGF(NETIF_DEBUG,
			("gmac_low_level_output: DMA buffer sent, size=%d [idx=%u]\n",
			p->tot_len, ps_gmac_dev->us_tx_idx));

	ps_gmac_dev->us_tx_idx = (ps_gmac_dev->us_tx_idx + 1) % GMAC_TX_BUFFERS;
  40c83a:	68fa      	ldr	r2, [r7, #12]
  40c83c:	f241 230c 	movw	r3, #4620	; 0x120c
  40c840:	4413      	add	r3, r2
  40c842:	681b      	ldr	r3, [r3, #0]
  40c844:	1c59      	adds	r1, r3, #1
  40c846:	4b0d      	ldr	r3, [pc, #52]	; (40c87c <gmac_low_level_output+0xe0>)
  40c848:	fba3 2301 	umull	r2, r3, r3, r1
  40c84c:	085a      	lsrs	r2, r3, #1
  40c84e:	4613      	mov	r3, r2
  40c850:	005b      	lsls	r3, r3, #1
  40c852:	4413      	add	r3, r2
  40c854:	1aca      	subs	r2, r1, r3
  40c856:	68f9      	ldr	r1, [r7, #12]
  40c858:	f241 230c 	movw	r3, #4620	; 0x120c
  40c85c:	440b      	add	r3, r1
  40c85e:	601a      	str	r2, [r3, #0]

	/* Now start to transmission. */
	gmac_start_transmission(GMAC);
  40c860:	4803      	ldr	r0, [pc, #12]	; (40c870 <gmac_low_level_output+0xd4>)
  40c862:	4b07      	ldr	r3, [pc, #28]	; (40c880 <gmac_low_level_output+0xe4>)
  40c864:	4798      	blx	r3
#if LWIP_STATS
	lwip_tx_count += p->tot_len;
#endif
	LINK_STATS_INC(link.xmit);

	return ERR_OK;
  40c866:	2300      	movs	r3, #0
}
  40c868:	4618      	mov	r0, r3
  40c86a:	3718      	adds	r7, #24
  40c86c:	46bd      	mov	sp, r7
  40c86e:	bd80      	pop	{r7, pc}
  40c870:	40050000 	.word	0x40050000
  40c874:	0040c0bd 	.word	0x0040c0bd
  40c878:	0040d859 	.word	0x0040d859
  40c87c:	aaaaaaab 	.word	0xaaaaaaab
  40c880:	0040c029 	.word	0x0040c029

0040c884 <gmac_low_level_input>:
 *
 * \return a pbuf filled with the received packet (including MAC header).
 * 0 on memory error.
 */
static struct pbuf *gmac_low_level_input(struct netif *netif)
{
  40c884:	b580      	push	{r7, lr}
  40c886:	b088      	sub	sp, #32
  40c888:	af00      	add	r7, sp, #0
  40c88a:	6078      	str	r0, [r7, #4]
	struct gmac_device *ps_gmac_dev = netif->state;
  40c88c:	687b      	ldr	r3, [r7, #4]
  40c88e:	6a1b      	ldr	r3, [r3, #32]
  40c890:	61bb      	str	r3, [r7, #24]
	struct pbuf *p = 0;
  40c892:	2300      	movs	r3, #0
  40c894:	61fb      	str	r3, [r7, #28]
	uint32_t length = 0;
  40c896:	2300      	movs	r3, #0
  40c898:	617b      	str	r3, [r7, #20]
	uint32_t ul_index = 0;
  40c89a:	2300      	movs	r3, #0
  40c89c:	613b      	str	r3, [r7, #16]
	gmac_rx_descriptor_t *p_rx = &ps_gmac_dev->rx_desc[ps_gmac_dev->us_rx_idx];
  40c89e:	69ba      	ldr	r2, [r7, #24]
  40c8a0:	f241 2308 	movw	r3, #4616	; 0x1208
  40c8a4:	4413      	add	r3, r2
  40c8a6:	681b      	ldr	r3, [r3, #0]
  40c8a8:	00db      	lsls	r3, r3, #3
  40c8aa:	69ba      	ldr	r2, [r7, #24]
  40c8ac:	4413      	add	r3, r2
  40c8ae:	60fb      	str	r3, [r7, #12]

	/* Handle GMAC overrun or AHB errors. */
	if (gmac_get_rx_status(GMAC) & GMAC_RX_ERRORS) {
  40c8b0:	4825      	ldr	r0, [pc, #148]	; (40c948 <gmac_low_level_input+0xc4>)
  40c8b2:	4b26      	ldr	r3, [pc, #152]	; (40c94c <gmac_low_level_input+0xc8>)
  40c8b4:	4798      	blx	r3

		gmac_enable_receive(GMAC, true);
	}

	/* Check that a packet has been received and processed by GMAC. */
	if ((p_rx->addr.val & GMAC_RXD_OWNERSHIP) == GMAC_RXD_OWNERSHIP) {
  40c8b6:	68fb      	ldr	r3, [r7, #12]
  40c8b8:	681b      	ldr	r3, [r3, #0]
  40c8ba:	f003 0301 	and.w	r3, r3, #1
  40c8be:	2b00      	cmp	r3, #0
  40c8c0:	d03c      	beq.n	40c93c <gmac_low_level_input+0xb8>
		/* Packet is a SOF since packet size is set to maximum. */
		length = p_rx->status.val & GMAC_RXD_LEN_MASK;
  40c8c2:	68fb      	ldr	r3, [r7, #12]
  40c8c4:	685b      	ldr	r3, [r3, #4]
  40c8c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  40c8ca:	617b      	str	r3, [r7, #20]

		/* Fetch pre-allocated pbuf. */
		p = ps_gmac_dev->rx_pbuf[ps_gmac_dev->us_rx_idx];
  40c8cc:	69ba      	ldr	r2, [r7, #24]
  40c8ce:	f241 2308 	movw	r3, #4616	; 0x1208
  40c8d2:	4413      	add	r3, r2
  40c8d4:	681a      	ldr	r2, [r3, #0]
  40c8d6:	69bb      	ldr	r3, [r7, #24]
  40c8d8:	320c      	adds	r2, #12
  40c8da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40c8de:	61fb      	str	r3, [r7, #28]
		p->len = length;
  40c8e0:	697b      	ldr	r3, [r7, #20]
  40c8e2:	b29a      	uxth	r2, r3
  40c8e4:	69fb      	ldr	r3, [r7, #28]
  40c8e6:	815a      	strh	r2, [r3, #10]

		/* Remove this pbuf from its desriptor. */
		ps_gmac_dev->rx_pbuf[ps_gmac_dev->us_rx_idx] = 0;
  40c8e8:	69ba      	ldr	r2, [r7, #24]
  40c8ea:	f241 2308 	movw	r3, #4616	; 0x1208
  40c8ee:	4413      	add	r3, r2
  40c8f0:	681a      	ldr	r2, [r3, #0]
  40c8f2:	69bb      	ldr	r3, [r7, #24]
  40c8f4:	320c      	adds	r2, #12
  40c8f6:	2100      	movs	r1, #0
  40c8f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		LWIP_DEBUGF(NETIF_DEBUG,
				("gmac_low_level_input: DMA buffer %p received, size=%u [idx=%u]\n",
				p, length, ps_gmac_dev->us_rx_idx));

		/* Set pbuf total packet size. */
		p->tot_len = length;
  40c8fc:	697b      	ldr	r3, [r7, #20]
  40c8fe:	b29a      	uxth	r2, r3
  40c900:	69fb      	ldr	r3, [r7, #28]
  40c902:	811a      	strh	r2, [r3, #8]
		LINK_STATS_INC(link.recv);

		/* Fill empty descriptors with new pbufs. */
		gmac_rx_populate_queue(ps_gmac_dev);
  40c904:	69b8      	ldr	r0, [r7, #24]
  40c906:	4b12      	ldr	r3, [pc, #72]	; (40c950 <gmac_low_level_input+0xcc>)
  40c908:	4798      	blx	r3

		/* Mark the descriptor ready for transfer. */
		p_rx->addr.val &= ~(GMAC_RXD_OWNERSHIP);
  40c90a:	68fb      	ldr	r3, [r7, #12]
  40c90c:	681b      	ldr	r3, [r3, #0]
  40c90e:	f023 0201 	bic.w	r2, r3, #1
  40c912:	68fb      	ldr	r3, [r7, #12]
  40c914:	601a      	str	r2, [r3, #0]

		ps_gmac_dev->us_rx_idx = (ps_gmac_dev->us_rx_idx + 1) % GMAC_RX_BUFFERS;
  40c916:	69ba      	ldr	r2, [r7, #24]
  40c918:	f241 2308 	movw	r3, #4616	; 0x1208
  40c91c:	4413      	add	r3, r2
  40c91e:	681b      	ldr	r3, [r3, #0]
  40c920:	1c59      	adds	r1, r3, #1
  40c922:	4b0c      	ldr	r3, [pc, #48]	; (40c954 <gmac_low_level_input+0xd0>)
  40c924:	fba3 2301 	umull	r2, r3, r3, r1
  40c928:	085a      	lsrs	r2, r3, #1
  40c92a:	4613      	mov	r3, r2
  40c92c:	005b      	lsls	r3, r3, #1
  40c92e:	4413      	add	r3, r2
  40c930:	1aca      	subs	r2, r1, r3
  40c932:	69b9      	ldr	r1, [r7, #24]
  40c934:	f241 2308 	movw	r3, #4616	; 0x1208
  40c938:	440b      	add	r3, r1
  40c93a:	601a      	str	r2, [r3, #0]
#if LWIP_STATS
	lwip_rx_count += length;
#endif
	}

	return p;
  40c93c:	69fb      	ldr	r3, [r7, #28]
}
  40c93e:	4618      	mov	r0, r3
  40c940:	3720      	adds	r7, #32
  40c942:	46bd      	mov	sp, r7
  40c944:	bd80      	pop	{r7, pc}
  40c946:	bf00      	nop
  40c948:	40050000 	.word	0x40050000
  40c94c:	0040c0f1 	.word	0x0040c0f1
  40c950:	0040c38d 	.word	0x0040c38d
  40c954:	aaaaaaab 	.word	0xaaaaaaab

0040c958 <ethernetif_input>:
 * input function is called.
 *
 * \param netif the lwIP network interface structure for this ethernetif.
 */
void ethernetif_input(struct netif *netif)
{
  40c958:	b580      	push	{r7, lr}
  40c95a:	b084      	sub	sp, #16
  40c95c:	af00      	add	r7, sp, #0
  40c95e:	6078      	str	r0, [r7, #4]
	struct eth_hdr *ethhdr;
	struct pbuf *p;

	/* Move received packet into a new pbuf. */
	p = gmac_low_level_input(netif);
  40c960:	6878      	ldr	r0, [r7, #4]
  40c962:	4b17      	ldr	r3, [pc, #92]	; (40c9c0 <ethernetif_input+0x68>)
  40c964:	4798      	blx	r3
  40c966:	60f8      	str	r0, [r7, #12]
	if (p == NULL)
  40c968:	68fb      	ldr	r3, [r7, #12]
  40c96a:	2b00      	cmp	r3, #0
  40c96c:	d021      	beq.n	40c9b2 <ethernetif_input+0x5a>
		return;

	/* Points to packet payload, which starts with an Ethernet header. */
	ethhdr = p->payload;
  40c96e:	68fb      	ldr	r3, [r7, #12]
  40c970:	685b      	ldr	r3, [r3, #4]
  40c972:	60bb      	str	r3, [r7, #8]

	switch (htons(ethhdr->type)) {
  40c974:	68bb      	ldr	r3, [r7, #8]
  40c976:	899b      	ldrh	r3, [r3, #12]
  40c978:	b29b      	uxth	r3, r3
  40c97a:	4618      	mov	r0, r3
  40c97c:	4b11      	ldr	r3, [pc, #68]	; (40c9c4 <ethernetif_input+0x6c>)
  40c97e:	4798      	blx	r3
  40c980:	4603      	mov	r3, r0
  40c982:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
  40c986:	d003      	beq.n	40c990 <ethernetif_input+0x38>
  40c988:	f640 0206 	movw	r2, #2054	; 0x806
  40c98c:	4293      	cmp	r3, r2
  40c98e:	d10b      	bne.n	40c9a8 <ethernetif_input+0x50>
#if PPPOE_SUPPORT
		case ETHTYPE_PPPOEDISC:
		case ETHTYPE_PPPOE:
#endif /* PPPOE_SUPPORT */
			/* Send packet to lwIP for processing. */
			if (netif->input(p, netif) != ERR_OK) {
  40c990:	687b      	ldr	r3, [r7, #4]
  40c992:	691b      	ldr	r3, [r3, #16]
  40c994:	6879      	ldr	r1, [r7, #4]
  40c996:	68f8      	ldr	r0, [r7, #12]
  40c998:	4798      	blx	r3
  40c99a:	4603      	mov	r3, r0
  40c99c:	2b00      	cmp	r3, #0
  40c99e:	d00a      	beq.n	40c9b6 <ethernetif_input+0x5e>
				LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
				/* Free buffer. */
				pbuf_free(p);
  40c9a0:	68f8      	ldr	r0, [r7, #12]
  40c9a2:	4b09      	ldr	r3, [pc, #36]	; (40c9c8 <ethernetif_input+0x70>)
  40c9a4:	4798      	blx	r3
			}
			break;
  40c9a6:	e006      	b.n	40c9b6 <ethernetif_input+0x5e>

		default:
			/* Free buffer. */
			pbuf_free(p);
  40c9a8:	68f8      	ldr	r0, [r7, #12]
  40c9aa:	4b07      	ldr	r3, [pc, #28]	; (40c9c8 <ethernetif_input+0x70>)
  40c9ac:	4798      	blx	r3
			break;
  40c9ae:	bf00      	nop
  40c9b0:	e002      	b.n	40c9b8 <ethernetif_input+0x60>
	struct pbuf *p;

	/* Move received packet into a new pbuf. */
	p = gmac_low_level_input(netif);
	if (p == NULL)
		return;
  40c9b2:	bf00      	nop
  40c9b4:	e000      	b.n	40c9b8 <ethernetif_input+0x60>
			if (netif->input(p, netif) != ERR_OK) {
				LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
				/* Free buffer. */
				pbuf_free(p);
			}
			break;
  40c9b6:	bf00      	nop
		default:
			/* Free buffer. */
			pbuf_free(p);
			break;
	}
}
  40c9b8:	3710      	adds	r7, #16
  40c9ba:	46bd      	mov	sp, r7
  40c9bc:	bd80      	pop	{r7, pc}
  40c9be:	bf00      	nop
  40c9c0:	0040c885 	.word	0x0040c885
  40c9c4:	00402309 	.word	0x00402309
  40c9c8:	00406069 	.word	0x00406069

0040c9cc <ethernetif_init>:
 * \return ERR_OK if the loopif is initialized.
 * ERR_MEM if private data couldn't be allocated.
 * any other err_t on error.
 */
err_t ethernetif_init(struct netif *netif)
{
  40c9cc:	b580      	push	{r7, lr}
  40c9ce:	b082      	sub	sp, #8
  40c9d0:	af00      	add	r7, sp, #0
  40c9d2:	6078      	str	r0, [r7, #4]
	LWIP_ASSERT("netif != NULL", (netif != NULL));

	gs_gmac_dev.netif = netif;
  40c9d4:	4a0f      	ldr	r2, [pc, #60]	; (40ca14 <ethernetif_init+0x48>)
  40c9d6:	f241 2310 	movw	r3, #4624	; 0x1210
  40c9da:	4413      	add	r3, r2
  40c9dc:	687a      	ldr	r2, [r7, #4]
  40c9de:	601a      	str	r2, [r3, #0]
	 */
#if LWIP_SNMP
	NETIF_INIT_SNMP(netif, snmp_ifType_ethernet_csmacd, NET_LINK_SPEED);
#endif /* LWIP_SNMP */

	netif->state = &gs_gmac_dev;
  40c9e0:	687b      	ldr	r3, [r7, #4]
  40c9e2:	4a0c      	ldr	r2, [pc, #48]	; (40ca14 <ethernetif_init+0x48>)
  40c9e4:	621a      	str	r2, [r3, #32]
	netif->name[0] = IFNAME0;
  40c9e6:	687b      	ldr	r3, [r7, #4]
  40c9e8:	2265      	movs	r2, #101	; 0x65
  40c9ea:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	netif->name[1] = IFNAME1;
  40c9ee:	687b      	ldr	r3, [r7, #4]
  40c9f0:	226e      	movs	r2, #110	; 0x6e
  40c9f2:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

	/* We directly use etharp_output() here to save a function call.
	 * You can instead declare your own function an call etharp_output()
	 * from it if you have to do some checks before sending (e.g. if link
	 * is available...) */
	netif->output = etharp_output;
  40c9f6:	687b      	ldr	r3, [r7, #4]
  40c9f8:	4a07      	ldr	r2, [pc, #28]	; (40ca18 <ethernetif_init+0x4c>)
  40c9fa:	615a      	str	r2, [r3, #20]
	netif->linkoutput = gmac_low_level_output;
  40c9fc:	687b      	ldr	r3, [r7, #4]
  40c9fe:	4a07      	ldr	r2, [pc, #28]	; (40ca1c <ethernetif_init+0x50>)
  40ca00:	619a      	str	r2, [r3, #24]
	/* Initialize the hardware */
	gmac_low_level_init(netif);
  40ca02:	6878      	ldr	r0, [r7, #4]
  40ca04:	4b06      	ldr	r3, [pc, #24]	; (40ca20 <ethernetif_init+0x54>)
  40ca06:	4798      	blx	r3
			(id != 0));
	if (id == 0)
		return ERR_MEM;
#endif

	return ERR_OK;
  40ca08:	2300      	movs	r3, #0
}
  40ca0a:	4618      	mov	r0, r3
  40ca0c:	3708      	adds	r7, #8
  40ca0e:	46bd      	mov	sp, r7
  40ca10:	bd80      	pop	{r7, pc}
  40ca12:	bf00      	nop
  40ca14:	204026b8 	.word	0x204026b8
  40ca18:	0040b869 	.word	0x0040b869
  40ca1c:	0040c79d 	.word	0x0040c79d
  40ca20:	0040c539 	.word	0x0040c539

0040ca24 <timers_update>:

/**
 * \brief Timer management function.
 */
static void timers_update(void)
{
  40ca24:	b580      	push	{r7, lr}
  40ca26:	b084      	sub	sp, #16
  40ca28:	af00      	add	r7, sp, #0
	static uint32_t ul_last_time;
	uint32_t ul_cur_time, ul_time_diff, ul_idx_timer;
	timers_info_t *p_tmr_inf;

	ul_cur_time = sys_get_ms();
  40ca2a:	4b24      	ldr	r3, [pc, #144]	; (40cabc <timers_update+0x98>)
  40ca2c:	4798      	blx	r3
  40ca2e:	6078      	str	r0, [r7, #4]
	if (ul_cur_time >= ul_last_time) {
  40ca30:	4b23      	ldr	r3, [pc, #140]	; (40cac0 <timers_update+0x9c>)
  40ca32:	681b      	ldr	r3, [r3, #0]
  40ca34:	687a      	ldr	r2, [r7, #4]
  40ca36:	429a      	cmp	r2, r3
  40ca38:	d305      	bcc.n	40ca46 <timers_update+0x22>
		ul_time_diff = ul_cur_time - ul_last_time;
  40ca3a:	4b21      	ldr	r3, [pc, #132]	; (40cac0 <timers_update+0x9c>)
  40ca3c:	681b      	ldr	r3, [r3, #0]
  40ca3e:	687a      	ldr	r2, [r7, #4]
  40ca40:	1ad3      	subs	r3, r2, r3
  40ca42:	60fb      	str	r3, [r7, #12]
  40ca44:	e005      	b.n	40ca52 <timers_update+0x2e>
	} else {
		ul_time_diff = 0xFFFFFFFF - ul_last_time + ul_cur_time;
  40ca46:	4b1e      	ldr	r3, [pc, #120]	; (40cac0 <timers_update+0x9c>)
  40ca48:	681b      	ldr	r3, [r3, #0]
  40ca4a:	687a      	ldr	r2, [r7, #4]
  40ca4c:	1ad3      	subs	r3, r2, r3
  40ca4e:	3b01      	subs	r3, #1
  40ca50:	60fb      	str	r3, [r7, #12]
	}

	if (ul_time_diff) {
  40ca52:	68fb      	ldr	r3, [r7, #12]
  40ca54:	2b00      	cmp	r3, #0
  40ca56:	d02d      	beq.n	40cab4 <timers_update+0x90>
		ul_last_time = ul_cur_time;
  40ca58:	4a19      	ldr	r2, [pc, #100]	; (40cac0 <timers_update+0x9c>)
  40ca5a:	687b      	ldr	r3, [r7, #4]
  40ca5c:	6013      	str	r3, [r2, #0]
		for (ul_idx_timer = 0;
  40ca5e:	2300      	movs	r3, #0
  40ca60:	60bb      	str	r3, [r7, #8]
  40ca62:	e024      	b.n	40caae <timers_update+0x8a>
			 ul_idx_timer < (sizeof(gs_timers_table) / sizeof(timers_info_t));
			 ul_idx_timer++) {
			p_tmr_inf = &gs_timers_table[ul_idx_timer];
  40ca64:	68ba      	ldr	r2, [r7, #8]
  40ca66:	4613      	mov	r3, r2
  40ca68:	005b      	lsls	r3, r3, #1
  40ca6a:	4413      	add	r3, r2
  40ca6c:	009b      	lsls	r3, r3, #2
  40ca6e:	4a15      	ldr	r2, [pc, #84]	; (40cac4 <timers_update+0xa0>)
  40ca70:	4413      	add	r3, r2
  40ca72:	603b      	str	r3, [r7, #0]
			p_tmr_inf->timer += ul_time_diff;
  40ca74:	683b      	ldr	r3, [r7, #0]
  40ca76:	681a      	ldr	r2, [r3, #0]
  40ca78:	68fb      	ldr	r3, [r7, #12]
  40ca7a:	441a      	add	r2, r3
  40ca7c:	683b      	ldr	r3, [r7, #0]
  40ca7e:	601a      	str	r2, [r3, #0]
			if (p_tmr_inf->timer > p_tmr_inf->timer_interval) {
  40ca80:	683b      	ldr	r3, [r7, #0]
  40ca82:	681a      	ldr	r2, [r3, #0]
  40ca84:	683b      	ldr	r3, [r7, #0]
  40ca86:	685b      	ldr	r3, [r3, #4]
  40ca88:	429a      	cmp	r2, r3
  40ca8a:	d90d      	bls.n	40caa8 <timers_update+0x84>
				if (p_tmr_inf->timer_func) {
  40ca8c:	683b      	ldr	r3, [r7, #0]
  40ca8e:	689b      	ldr	r3, [r3, #8]
  40ca90:	2b00      	cmp	r3, #0
  40ca92:	d002      	beq.n	40ca9a <timers_update+0x76>
					p_tmr_inf->timer_func();
  40ca94:	683b      	ldr	r3, [r7, #0]
  40ca96:	689b      	ldr	r3, [r3, #8]
  40ca98:	4798      	blx	r3
				}

				p_tmr_inf->timer -= p_tmr_inf->timer_interval;
  40ca9a:	683b      	ldr	r3, [r7, #0]
  40ca9c:	681a      	ldr	r2, [r3, #0]
  40ca9e:	683b      	ldr	r3, [r7, #0]
  40caa0:	685b      	ldr	r3, [r3, #4]
  40caa2:	1ad2      	subs	r2, r2, r3
  40caa4:	683b      	ldr	r3, [r7, #0]
  40caa6:	601a      	str	r2, [r3, #0]

	if (ul_time_diff) {
		ul_last_time = ul_cur_time;
		for (ul_idx_timer = 0;
			 ul_idx_timer < (sizeof(gs_timers_table) / sizeof(timers_info_t));
			 ul_idx_timer++) {
  40caa8:	68bb      	ldr	r3, [r7, #8]
  40caaa:	3301      	adds	r3, #1
  40caac:	60bb      	str	r3, [r7, #8]
		ul_time_diff = 0xFFFFFFFF - ul_last_time + ul_cur_time;
	}

	if (ul_time_diff) {
		ul_last_time = ul_cur_time;
		for (ul_idx_timer = 0;
  40caae:	68bb      	ldr	r3, [r7, #8]
  40cab0:	2b04      	cmp	r3, #4
  40cab2:	d9d7      	bls.n	40ca64 <timers_update+0x40>

				p_tmr_inf->timer -= p_tmr_inf->timer_interval;
			}
		}
	}
}
  40cab4:	bf00      	nop
  40cab6:	3710      	adds	r7, #16
  40cab8:	46bd      	mov	sp, r7
  40caba:	bd80      	pop	{r7, pc}
  40cabc:	0040d219 	.word	0x0040d219
  40cac0:	204038cc 	.word	0x204038cc
  40cac4:	20400020 	.word	0x20400020

0040cac8 <ethernet_configure_interface>:

/**
 * \brief Configure network interface driver.
 */
static void ethernet_configure_interface(void)
{
  40cac8:	b590      	push	{r4, r7, lr}
  40caca:	b089      	sub	sp, #36	; 0x24
  40cacc:	af04      	add	r7, sp, #16
	struct ip_addr x_ip_addr, x_net_mask, x_gateway;
	extern err_t ethernetif_init(struct netif *netif);

#if defined(DHCP_USED)
		/* DHCP mode. */
	x_ip_addr.addr = 0;
  40cace:	2300      	movs	r3, #0
  40cad0:	60fb      	str	r3, [r7, #12]
	x_net_mask.addr = 0;
  40cad2:	2300      	movs	r3, #0
  40cad4:	60bb      	str	r3, [r7, #8]
			ETHERNET_CONF_GATEWAY_ADDR2,
			ETHERNET_CONF_GATEWAY_ADDR3);
#endif

	/* Add data to netif */
	if (NULL == netif_add(&gs_net_if, &x_ip_addr, &x_net_mask, &x_gateway, NULL,
  40cad6:	1d38      	adds	r0, r7, #4
  40cad8:	f107 0208 	add.w	r2, r7, #8
  40cadc:	f107 010c 	add.w	r1, r7, #12
  40cae0:	4b0d      	ldr	r3, [pc, #52]	; (40cb18 <ethernet_configure_interface+0x50>)
  40cae2:	9302      	str	r3, [sp, #8]
  40cae4:	4b0d      	ldr	r3, [pc, #52]	; (40cb1c <ethernet_configure_interface+0x54>)
  40cae6:	9301      	str	r3, [sp, #4]
  40cae8:	2300      	movs	r3, #0
  40caea:	9300      	str	r3, [sp, #0]
  40caec:	4603      	mov	r3, r0
  40caee:	480c      	ldr	r0, [pc, #48]	; (40cb20 <ethernet_configure_interface+0x58>)
  40caf0:	4c0c      	ldr	r4, [pc, #48]	; (40cb24 <ethernet_configure_interface+0x5c>)
  40caf2:	47a0      	blx	r4
			ethernetif_init, ethernet_input)) {
		LWIP_ASSERT("NULL == netif_add", 0);
	}

	/* Make it the default interface */
	netif_set_default(&gs_net_if);
  40caf4:	480a      	ldr	r0, [pc, #40]	; (40cb20 <ethernet_configure_interface+0x58>)
  40caf6:	4b0c      	ldr	r3, [pc, #48]	; (40cb28 <ethernet_configure_interface+0x60>)
  40caf8:	4798      	blx	r3

	/* Setup callback function for netif status change */
	netif_set_status_callback(&gs_net_if, status_callback);
  40cafa:	490c      	ldr	r1, [pc, #48]	; (40cb2c <ethernet_configure_interface+0x64>)
  40cafc:	4808      	ldr	r0, [pc, #32]	; (40cb20 <ethernet_configure_interface+0x58>)
  40cafe:	4b0c      	ldr	r3, [pc, #48]	; (40cb30 <ethernet_configure_interface+0x68>)
  40cb00:	4798      	blx	r3

	/* Bring it up */
#if defined(DHCP_USED)
	/* DHCP mode. */
	if (ERR_OK != dhcp_start(&gs_net_if)) {
  40cb02:	4807      	ldr	r0, [pc, #28]	; (40cb20 <ethernet_configure_interface+0x58>)
  40cb04:	4b0b      	ldr	r3, [pc, #44]	; (40cb34 <ethernet_configure_interface+0x6c>)
  40cb06:	4798      	blx	r3
		LWIP_ASSERT("ERR_OK != dhcp_start", 0);
	}
	printf("DHCP Started\r\n");
  40cb08:	480b      	ldr	r0, [pc, #44]	; (40cb38 <ethernet_configure_interface+0x70>)
  40cb0a:	4b0c      	ldr	r3, [pc, #48]	; (40cb3c <ethernet_configure_interface+0x74>)
  40cb0c:	4798      	blx	r3
#else
	/* Static mode. */
	netif_set_up(&gs_net_if);
	printf("Static IP Address Assigned\r\n");
#endif
}
  40cb0e:	bf00      	nop
  40cb10:	3714      	adds	r7, #20
  40cb12:	46bd      	mov	sp, r7
  40cb14:	bd90      	pop	{r4, r7, pc}
  40cb16:	bf00      	nop
  40cb18:	0040bd79 	.word	0x0040bd79
  40cb1c:	0040c9cd 	.word	0x0040c9cd
  40cb20:	204049a0 	.word	0x204049a0
  40cb24:	004059d1 	.word	0x004059d1
  40cb28:	00405ba5 	.word	0x00405ba5
  40cb2c:	0040cb61 	.word	0x0040cb61
  40cb30:	00405c89 	.word	0x00405c89
  40cb34:	004028fd 	.word	0x004028fd
  40cb38:	00414a88 	.word	0x00414a88
  40cb3c:	0040d7cd 	.word	0x0040d7cd

0040cb40 <init_ethernet>:

/**
 * \brief Initialize the lwIP TCP/IP stack with the network interface driver.
 */
void init_ethernet(void)
{
  40cb40:	b580      	push	{r7, lr}
  40cb42:	af00      	add	r7, sp, #0
	/* Initialize lwIP. */
	lwip_init();
  40cb44:	4b03      	ldr	r3, [pc, #12]	; (40cb54 <init_ethernet+0x14>)
  40cb46:	4798      	blx	r3

	/* Set hw and IP parameters, initialize MAC too. */
	ethernet_configure_interface();
  40cb48:	4b03      	ldr	r3, [pc, #12]	; (40cb58 <init_ethernet+0x18>)
  40cb4a:	4798      	blx	r3

	/* Initialize timer. */
	sys_init_timing();
  40cb4c:	4b03      	ldr	r3, [pc, #12]	; (40cb5c <init_ethernet+0x1c>)
  40cb4e:	4798      	blx	r3
}
  40cb50:	bf00      	nop
  40cb52:	bd80      	pop	{r7, pc}
  40cb54:	00405189 	.word	0x00405189
  40cb58:	0040cac9 	.word	0x0040cac9
  40cb5c:	0040d171 	.word	0x0040d171

0040cb60 <status_callback>:
 * is up.
 *
 * \param netif The network interface instance.
 */
void status_callback(struct netif *netif)
{
  40cb60:	b580      	push	{r7, lr}
  40cb62:	b088      	sub	sp, #32
  40cb64:	af00      	add	r7, sp, #0
  40cb66:	6078      	str	r0, [r7, #4]
	int8_t c_mess[20];
	if (netif_is_up(netif)) {
  40cb68:	687b      	ldr	r3, [r7, #4]
  40cb6a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
  40cb6e:	f003 0301 	and.w	r3, r3, #1
  40cb72:	2b00      	cmp	r3, #0
  40cb74:	d016      	beq.n	40cba4 <status_callback+0x44>
		strcpy((char*)c_mess, "IP=");
  40cb76:	f107 030c 	add.w	r3, r7, #12
  40cb7a:	4a0e      	ldr	r2, [pc, #56]	; (40cbb4 <status_callback+0x54>)
  40cb7c:	601a      	str	r2, [r3, #0]
		strcat((char*)c_mess, inet_ntoa(*(struct in_addr *)&(netif->ip_addr)));
  40cb7e:	687b      	ldr	r3, [r7, #4]
  40cb80:	3304      	adds	r3, #4
  40cb82:	4618      	mov	r0, r3
  40cb84:	4b0c      	ldr	r3, [pc, #48]	; (40cbb8 <status_callback+0x58>)
  40cb86:	4798      	blx	r3
  40cb88:	4602      	mov	r2, r0
  40cb8a:	f107 030c 	add.w	r3, r7, #12
  40cb8e:	4611      	mov	r1, r2
  40cb90:	4618      	mov	r0, r3
  40cb92:	4b0a      	ldr	r3, [pc, #40]	; (40cbbc <status_callback+0x5c>)
  40cb94:	4798      	blx	r3
		printf("Network up %s\r\n", (char const*)c_mess);
  40cb96:	f107 030c 	add.w	r3, r7, #12
  40cb9a:	4619      	mov	r1, r3
  40cb9c:	4808      	ldr	r0, [pc, #32]	; (40cbc0 <status_callback+0x60>)
  40cb9e:	4b09      	ldr	r3, [pc, #36]	; (40cbc4 <status_callback+0x64>)
  40cba0:	4798      	blx	r3
	} else {
		printf("Network down\r\n");
	}
}
  40cba2:	e002      	b.n	40cbaa <status_callback+0x4a>
	if (netif_is_up(netif)) {
		strcpy((char*)c_mess, "IP=");
		strcat((char*)c_mess, inet_ntoa(*(struct in_addr *)&(netif->ip_addr)));
		printf("Network up %s\r\n", (char const*)c_mess);
	} else {
		printf("Network down\r\n");
  40cba4:	4808      	ldr	r0, [pc, #32]	; (40cbc8 <status_callback+0x68>)
  40cba6:	4b07      	ldr	r3, [pc, #28]	; (40cbc4 <status_callback+0x64>)
  40cba8:	4798      	blx	r3
	}
}
  40cbaa:	bf00      	nop
  40cbac:	3720      	adds	r7, #32
  40cbae:	46bd      	mov	sp, r7
  40cbb0:	bd80      	pop	{r7, pc}
  40cbb2:	bf00      	nop
  40cbb4:	003d5049 	.word	0x003d5049
  40cbb8:	004047bd 	.word	0x004047bd
  40cbbc:	0040dc9d 	.word	0x0040dc9d
  40cbc0:	00414a98 	.word	0x00414a98
  40cbc4:	0040d7cd 	.word	0x0040d7cd
  40cbc8:	00414aa8 	.word	0x00414aa8

0040cbcc <ethernet_task>:

/**
 * \brief Process incoming ethernet frames, then update timers.
 */
void ethernet_task(void)
{
  40cbcc:	b580      	push	{r7, lr}
  40cbce:	af00      	add	r7, sp, #0
	/* Poll the network interface driver for incoming ethernet frames. */
	ethernetif_input(&gs_net_if);
  40cbd0:	4803      	ldr	r0, [pc, #12]	; (40cbe0 <ethernet_task+0x14>)
  40cbd2:	4b04      	ldr	r3, [pc, #16]	; (40cbe4 <ethernet_task+0x18>)
  40cbd4:	4798      	blx	r3

	/* Update the periodic timer. */
	timers_update();
  40cbd6:	4b04      	ldr	r3, [pc, #16]	; (40cbe8 <ethernet_task+0x1c>)
  40cbd8:	4798      	blx	r3
}
  40cbda:	bf00      	nop
  40cbdc:	bd80      	pop	{r7, pc}
  40cbde:	bf00      	nop
  40cbe0:	204049a0 	.word	0x204049a0
  40cbe4:	0040c959 	.word	0x0040c959
  40cbe8:	0040ca25 	.word	0x0040ca25

0040cbec <fs_open>:
 * if the specified filename is found.
 *
 * \return 1 on success, 0 otherwise.
 */
int fs_open(char *name, struct fs_file *file)
{
  40cbec:	b580      	push	{r7, lr}
  40cbee:	b084      	sub	sp, #16
  40cbf0:	af00      	add	r7, sp, #0
  40cbf2:	6078      	str	r0, [r7, #4]
  40cbf4:	6039      	str	r1, [r7, #0]
	struct fsdata_file_noconst *f;

	for (f = (struct fsdata_file_noconst *)FS_ROOT;
  40cbf6:	4b10      	ldr	r3, [pc, #64]	; (40cc38 <fs_open+0x4c>)
  40cbf8:	60fb      	str	r3, [r7, #12]
  40cbfa:	e015      	b.n	40cc28 <fs_open+0x3c>
			f != NULL;
			f = (struct fsdata_file_noconst *)f->next) {
		if (!strcmp(name, (char *)f->name)) {
  40cbfc:	68fb      	ldr	r3, [r7, #12]
  40cbfe:	685b      	ldr	r3, [r3, #4]
  40cc00:	4619      	mov	r1, r3
  40cc02:	6878      	ldr	r0, [r7, #4]
  40cc04:	4b0d      	ldr	r3, [pc, #52]	; (40cc3c <fs_open+0x50>)
  40cc06:	4798      	blx	r3
  40cc08:	4603      	mov	r3, r0
  40cc0a:	2b00      	cmp	r3, #0
  40cc0c:	d109      	bne.n	40cc22 <fs_open+0x36>
			file->data = (char *)f->data;
  40cc0e:	68fb      	ldr	r3, [r7, #12]
  40cc10:	689a      	ldr	r2, [r3, #8]
  40cc12:	683b      	ldr	r3, [r7, #0]
  40cc14:	601a      	str	r2, [r3, #0]
			file->len = f->len;
  40cc16:	68fb      	ldr	r3, [r7, #12]
  40cc18:	68da      	ldr	r2, [r3, #12]
  40cc1a:	683b      	ldr	r3, [r7, #0]
  40cc1c:	605a      	str	r2, [r3, #4]
			return 1;
  40cc1e:	2301      	movs	r3, #1
  40cc20:	e006      	b.n	40cc30 <fs_open+0x44>
{
	struct fsdata_file_noconst *f;

	for (f = (struct fsdata_file_noconst *)FS_ROOT;
			f != NULL;
			f = (struct fsdata_file_noconst *)f->next) {
  40cc22:	68fb      	ldr	r3, [r7, #12]
  40cc24:	681b      	ldr	r3, [r3, #0]
  40cc26:	60fb      	str	r3, [r7, #12]
 */
int fs_open(char *name, struct fs_file *file)
{
	struct fsdata_file_noconst *f;

	for (f = (struct fsdata_file_noconst *)FS_ROOT;
  40cc28:	68fb      	ldr	r3, [r7, #12]
  40cc2a:	2b00      	cmp	r3, #0
  40cc2c:	d1e6      	bne.n	40cbfc <fs_open+0x10>
			file->data = (char *)f->data;
			file->len = f->len;
			return 1;
		}
	}
	return 0;
  40cc2e:	2300      	movs	r3, #0
}
  40cc30:	4618      	mov	r0, r3
  40cc32:	3710      	adds	r7, #16
  40cc34:	46bd      	mov	sp, r7
  40cc36:	bd80      	pop	{r7, pc}
  40cc38:	00417640 	.word	0x00417640
  40cc3c:	0040dce9 	.word	0x0040dce9

0040cc40 <http_conn_err>:
 *
 * \param arg Pointer to structure representing the HTTP state.
 * \param err Error code.
 */
static void http_conn_err(void *arg, err_t err)
{
  40cc40:	b580      	push	{r7, lr}
  40cc42:	b084      	sub	sp, #16
  40cc44:	af00      	add	r7, sp, #0
  40cc46:	6078      	str	r0, [r7, #4]
  40cc48:	460b      	mov	r3, r1
  40cc4a:	70fb      	strb	r3, [r7, #3]
	struct http_state *hs;

	LWIP_UNUSED_ARG(err);

	hs = arg;
  40cc4c:	687b      	ldr	r3, [r7, #4]
  40cc4e:	60fb      	str	r3, [r7, #12]
	mem_free(hs);
  40cc50:	68f8      	ldr	r0, [r7, #12]
  40cc52:	4b03      	ldr	r3, [pc, #12]	; (40cc60 <http_conn_err+0x20>)
  40cc54:	4798      	blx	r3
}
  40cc56:	bf00      	nop
  40cc58:	3710      	adds	r7, #16
  40cc5a:	46bd      	mov	sp, r7
  40cc5c:	bd80      	pop	{r7, pc}
  40cc5e:	bf00      	nop
  40cc60:	00405585 	.word	0x00405585

0040cc64 <http_close_conn>:
 *
 * \param pcb Pointer to a TCP connection structure.
 * \param hs Pointer to structure representing the HTTP state.
 */
static void http_close_conn(struct tcp_pcb *pcb, struct http_state *hs)
{
  40cc64:	b580      	push	{r7, lr}
  40cc66:	b082      	sub	sp, #8
  40cc68:	af00      	add	r7, sp, #0
  40cc6a:	6078      	str	r0, [r7, #4]
  40cc6c:	6039      	str	r1, [r7, #0]
	tcp_arg(pcb, NULL);
  40cc6e:	2100      	movs	r1, #0
  40cc70:	6878      	ldr	r0, [r7, #4]
  40cc72:	4b0a      	ldr	r3, [pc, #40]	; (40cc9c <http_close_conn+0x38>)
  40cc74:	4798      	blx	r3
	tcp_sent(pcb, NULL);
  40cc76:	2100      	movs	r1, #0
  40cc78:	6878      	ldr	r0, [r7, #4]
  40cc7a:	4b09      	ldr	r3, [pc, #36]	; (40cca0 <http_close_conn+0x3c>)
  40cc7c:	4798      	blx	r3
	tcp_recv(pcb, NULL);
  40cc7e:	2100      	movs	r1, #0
  40cc80:	6878      	ldr	r0, [r7, #4]
  40cc82:	4b08      	ldr	r3, [pc, #32]	; (40cca4 <http_close_conn+0x40>)
  40cc84:	4798      	blx	r3
	mem_free(hs);
  40cc86:	6838      	ldr	r0, [r7, #0]
  40cc88:	4b07      	ldr	r3, [pc, #28]	; (40cca8 <http_close_conn+0x44>)
  40cc8a:	4798      	blx	r3
	tcp_close(pcb);
  40cc8c:	6878      	ldr	r0, [r7, #4]
  40cc8e:	4b07      	ldr	r3, [pc, #28]	; (40ccac <http_close_conn+0x48>)
  40cc90:	4798      	blx	r3
}
  40cc92:	bf00      	nop
  40cc94:	3708      	adds	r7, #8
  40cc96:	46bd      	mov	sp, r7
  40cc98:	bd80      	pop	{r7, pc}
  40cc9a:	bf00      	nop
  40cc9c:	00407465 	.word	0x00407465
  40cca0:	004074a1 	.word	0x004074a1
  40cca4:	00407481 	.word	0x00407481
  40cca8:	00405585 	.word	0x00405585
  40ccac:	00406659 	.word	0x00406659

0040ccb0 <http_send_data>:
 *
 * \param pcb Pointer to a TCP connection structure.
 * \param hs Pointer to structure representing the HTTP state.
 */
static void http_send_data(struct tcp_pcb *pcb, struct http_state *hs)
{
  40ccb0:	b590      	push	{r4, r7, lr}
  40ccb2:	b085      	sub	sp, #20
  40ccb4:	af00      	add	r7, sp, #0
  40ccb6:	6078      	str	r0, [r7, #4]
  40ccb8:	6039      	str	r1, [r7, #0]
	err_t err;
	u32_t len;

	/* We cannot send more data than space available in the send buffer. */
	if (tcp_sndbuf(pcb) < hs->left) {
  40ccba:	687b      	ldr	r3, [r7, #4]
  40ccbc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
  40ccc0:	461a      	mov	r2, r3
  40ccc2:	683b      	ldr	r3, [r7, #0]
  40ccc4:	685b      	ldr	r3, [r3, #4]
  40ccc6:	429a      	cmp	r2, r3
  40ccc8:	d204      	bcs.n	40ccd4 <http_send_data+0x24>
		len = tcp_sndbuf(pcb);
  40ccca:	687b      	ldr	r3, [r7, #4]
  40cccc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
  40ccd0:	60fb      	str	r3, [r7, #12]
  40ccd2:	e002      	b.n	40ccda <http_send_data+0x2a>
	} else {
		len = hs->left;
  40ccd4:	683b      	ldr	r3, [r7, #0]
  40ccd6:	685b      	ldr	r3, [r3, #4]
  40ccd8:	60fb      	str	r3, [r7, #12]
	}

	do {
		/* Use copy flag to avoid using flash as a DMA source (forbidden). */
		err = tcp_write(pcb, hs->file, len, TCP_WRITE_FLAG_COPY);
  40ccda:	683b      	ldr	r3, [r7, #0]
  40ccdc:	6819      	ldr	r1, [r3, #0]
  40ccde:	68fb      	ldr	r3, [r7, #12]
  40cce0:	b29a      	uxth	r2, r3
  40cce2:	2301      	movs	r3, #1
  40cce4:	6878      	ldr	r0, [r7, #4]
  40cce6:	4c14      	ldr	r4, [pc, #80]	; (40cd38 <http_send_data+0x88>)
  40cce8:	47a0      	blx	r4
  40ccea:	4603      	mov	r3, r0
  40ccec:	72fb      	strb	r3, [r7, #11]
		if (err == ERR_MEM) {
  40ccee:	f997 300b 	ldrsb.w	r3, [r7, #11]
  40ccf2:	f1b3 3fff 	cmp.w	r3, #4294967295
  40ccf6:	d102      	bne.n	40ccfe <http_send_data+0x4e>
			len /= 2;
  40ccf8:	68fb      	ldr	r3, [r7, #12]
  40ccfa:	085b      	lsrs	r3, r3, #1
  40ccfc:	60fb      	str	r3, [r7, #12]
		}
	} while (err == ERR_MEM && len > 1);
  40ccfe:	f997 300b 	ldrsb.w	r3, [r7, #11]
  40cd02:	f1b3 3fff 	cmp.w	r3, #4294967295
  40cd06:	d102      	bne.n	40cd0e <http_send_data+0x5e>
  40cd08:	68fb      	ldr	r3, [r7, #12]
  40cd0a:	2b01      	cmp	r3, #1
  40cd0c:	d8e5      	bhi.n	40ccda <http_send_data+0x2a>

	if (err == ERR_OK) {
  40cd0e:	f997 300b 	ldrsb.w	r3, [r7, #11]
  40cd12:	2b00      	cmp	r3, #0
  40cd14:	d10b      	bne.n	40cd2e <http_send_data+0x7e>
		hs->file += len;
  40cd16:	683b      	ldr	r3, [r7, #0]
  40cd18:	681a      	ldr	r2, [r3, #0]
  40cd1a:	68fb      	ldr	r3, [r7, #12]
  40cd1c:	441a      	add	r2, r3
  40cd1e:	683b      	ldr	r3, [r7, #0]
  40cd20:	601a      	str	r2, [r3, #0]
		hs->left -= len;
  40cd22:	683b      	ldr	r3, [r7, #0]
  40cd24:	685a      	ldr	r2, [r3, #4]
  40cd26:	68fb      	ldr	r3, [r7, #12]
  40cd28:	1ad2      	subs	r2, r2, r3
  40cd2a:	683b      	ldr	r3, [r7, #0]
  40cd2c:	605a      	str	r2, [r3, #4]
	}
}
  40cd2e:	bf00      	nop
  40cd30:	3714      	adds	r7, #20
  40cd32:	46bd      	mov	sp, r7
  40cd34:	bd90      	pop	{r4, r7, pc}
  40cd36:	bf00      	nop
  40cd38:	00409add 	.word	0x00409add

0040cd3c <http_poll>:
 * \param pcb Pointer to a TCP connection structure.
 *
 * \return ERR_OK on success, ERR_ABRT otherwise.
 */
static err_t http_poll(void *arg, struct tcp_pcb *pcb)
{
  40cd3c:	b580      	push	{r7, lr}
  40cd3e:	b084      	sub	sp, #16
  40cd40:	af00      	add	r7, sp, #0
  40cd42:	6078      	str	r0, [r7, #4]
  40cd44:	6039      	str	r1, [r7, #0]
	struct http_state *hs;

	hs = arg;
  40cd46:	687b      	ldr	r3, [r7, #4]
  40cd48:	60fb      	str	r3, [r7, #12]

	if (hs == NULL) {
  40cd4a:	68fb      	ldr	r3, [r7, #12]
  40cd4c:	2b00      	cmp	r3, #0
  40cd4e:	d105      	bne.n	40cd5c <http_poll+0x20>
		tcp_abort(pcb);
  40cd50:	6838      	ldr	r0, [r7, #0]
  40cd52:	4b14      	ldr	r3, [pc, #80]	; (40cda4 <http_poll+0x68>)
  40cd54:	4798      	blx	r3
		return ERR_ABRT;
  40cd56:	f06f 0309 	mvn.w	r3, #9
  40cd5a:	e01e      	b.n	40cd9a <http_poll+0x5e>
	} else {
		if (hs->file == 0) {
  40cd5c:	68fb      	ldr	r3, [r7, #12]
  40cd5e:	681b      	ldr	r3, [r3, #0]
  40cd60:	2b00      	cmp	r3, #0
  40cd62:	d105      	bne.n	40cd70 <http_poll+0x34>
			tcp_abort(pcb);
  40cd64:	6838      	ldr	r0, [r7, #0]
  40cd66:	4b0f      	ldr	r3, [pc, #60]	; (40cda4 <http_poll+0x68>)
  40cd68:	4798      	blx	r3
			return ERR_ABRT;
  40cd6a:	f06f 0309 	mvn.w	r3, #9
  40cd6e:	e014      	b.n	40cd9a <http_poll+0x5e>
		}

		++hs->retries;
  40cd70:	68fb      	ldr	r3, [r7, #12]
  40cd72:	7a1b      	ldrb	r3, [r3, #8]
  40cd74:	3301      	adds	r3, #1
  40cd76:	b2da      	uxtb	r2, r3
  40cd78:	68fb      	ldr	r3, [r7, #12]
  40cd7a:	721a      	strb	r2, [r3, #8]
		if (hs->retries == 4) {
  40cd7c:	68fb      	ldr	r3, [r7, #12]
  40cd7e:	7a1b      	ldrb	r3, [r3, #8]
  40cd80:	2b04      	cmp	r3, #4
  40cd82:	d105      	bne.n	40cd90 <http_poll+0x54>
			tcp_abort(pcb);
  40cd84:	6838      	ldr	r0, [r7, #0]
  40cd86:	4b07      	ldr	r3, [pc, #28]	; (40cda4 <http_poll+0x68>)
  40cd88:	4798      	blx	r3
			return ERR_ABRT;
  40cd8a:	f06f 0309 	mvn.w	r3, #9
  40cd8e:	e004      	b.n	40cd9a <http_poll+0x5e>
		}

		http_send_data(pcb, hs);
  40cd90:	68f9      	ldr	r1, [r7, #12]
  40cd92:	6838      	ldr	r0, [r7, #0]
  40cd94:	4b04      	ldr	r3, [pc, #16]	; (40cda8 <http_poll+0x6c>)
  40cd96:	4798      	blx	r3
	}

	return ERR_OK;
  40cd98:	2300      	movs	r3, #0
}
  40cd9a:	4618      	mov	r0, r3
  40cd9c:	3710      	adds	r7, #16
  40cd9e:	46bd      	mov	sp, r7
  40cda0:	bd80      	pop	{r7, pc}
  40cda2:	bf00      	nop
  40cda4:	00406771 	.word	0x00406771
  40cda8:	0040ccb1 	.word	0x0040ccb1

0040cdac <http_sent>:
 * \param len Unused.
 *
 * \return ERR_OK on success, ERR_ABRT otherwise.
 */
static err_t http_sent(void *arg, struct tcp_pcb *pcb, u16_t len)
{
  40cdac:	b580      	push	{r7, lr}
  40cdae:	b086      	sub	sp, #24
  40cdb0:	af00      	add	r7, sp, #0
  40cdb2:	60f8      	str	r0, [r7, #12]
  40cdb4:	60b9      	str	r1, [r7, #8]
  40cdb6:	4613      	mov	r3, r2
  40cdb8:	80fb      	strh	r3, [r7, #6]
	struct http_state *hs;

	LWIP_UNUSED_ARG(len);

	hs = arg;
  40cdba:	68fb      	ldr	r3, [r7, #12]
  40cdbc:	617b      	str	r3, [r7, #20]

	hs->retries = 0;
  40cdbe:	697b      	ldr	r3, [r7, #20]
  40cdc0:	2200      	movs	r2, #0
  40cdc2:	721a      	strb	r2, [r3, #8]

	if (hs->left > 0) {
  40cdc4:	697b      	ldr	r3, [r7, #20]
  40cdc6:	685b      	ldr	r3, [r3, #4]
  40cdc8:	2b00      	cmp	r3, #0
  40cdca:	d004      	beq.n	40cdd6 <http_sent+0x2a>
		http_send_data(pcb, hs);
  40cdcc:	6979      	ldr	r1, [r7, #20]
  40cdce:	68b8      	ldr	r0, [r7, #8]
  40cdd0:	4b05      	ldr	r3, [pc, #20]	; (40cde8 <http_sent+0x3c>)
  40cdd2:	4798      	blx	r3
  40cdd4:	e003      	b.n	40cdde <http_sent+0x32>
	} else {
		http_close_conn(pcb, hs);
  40cdd6:	6979      	ldr	r1, [r7, #20]
  40cdd8:	68b8      	ldr	r0, [r7, #8]
  40cdda:	4b04      	ldr	r3, [pc, #16]	; (40cdec <http_sent+0x40>)
  40cddc:	4798      	blx	r3
	}

	return ERR_OK;
  40cdde:	2300      	movs	r3, #0
}
  40cde0:	4618      	mov	r0, r3
  40cde2:	3718      	adds	r7, #24
  40cde4:	46bd      	mov	sp, r7
  40cde6:	bd80      	pop	{r7, pc}
  40cde8:	0040ccb1 	.word	0x0040ccb1
  40cdec:	0040cc65 	.word	0x0040cc65

0040cdf0 <http_recv>:
 * \param err Connection status.
 *
 * \return ERR_OK.
 */
static err_t http_recv(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
  40cdf0:	b590      	push	{r4, r7, lr}
  40cdf2:	b08b      	sub	sp, #44	; 0x2c
  40cdf4:	af00      	add	r7, sp, #0
  40cdf6:	60f8      	str	r0, [r7, #12]
  40cdf8:	60b9      	str	r1, [r7, #8]
  40cdfa:	607a      	str	r2, [r7, #4]
  40cdfc:	70fb      	strb	r3, [r7, #3]
	int i;
	char *data;
	struct fs_file file;
	struct http_state *hs;

	hs = arg;
  40cdfe:	68fb      	ldr	r3, [r7, #12]
  40ce00:	623b      	str	r3, [r7, #32]

	if (err == ERR_OK && p != NULL) {
  40ce02:	f997 3003 	ldrsb.w	r3, [r7, #3]
  40ce06:	2b00      	cmp	r3, #0
  40ce08:	f040 809a 	bne.w	40cf40 <http_recv+0x150>
  40ce0c:	687b      	ldr	r3, [r7, #4]
  40ce0e:	2b00      	cmp	r3, #0
  40ce10:	f000 8096 	beq.w	40cf40 <http_recv+0x150>
		/* Inform TCP that we have taken the data. */
		tcp_recved(pcb, p->tot_len);
  40ce14:	687b      	ldr	r3, [r7, #4]
  40ce16:	891b      	ldrh	r3, [r3, #8]
  40ce18:	4619      	mov	r1, r3
  40ce1a:	68b8      	ldr	r0, [r7, #8]
  40ce1c:	4b50      	ldr	r3, [pc, #320]	; (40cf60 <http_recv+0x170>)
  40ce1e:	4798      	blx	r3

		if (hs->file == NULL) {
  40ce20:	6a3b      	ldr	r3, [r7, #32]
  40ce22:	681b      	ldr	r3, [r3, #0]
  40ce24:	2b00      	cmp	r3, #0
  40ce26:	f040 8088 	bne.w	40cf3a <http_recv+0x14a>
			data = p->payload;
  40ce2a:	687b      	ldr	r3, [r7, #4]
  40ce2c:	685b      	ldr	r3, [r3, #4]
  40ce2e:	61fb      	str	r3, [r7, #28]

			if (strncmp(data, "GET ", 4) == 0) {
  40ce30:	2204      	movs	r2, #4
  40ce32:	494c      	ldr	r1, [pc, #304]	; (40cf64 <http_recv+0x174>)
  40ce34:	69f8      	ldr	r0, [r7, #28]
  40ce36:	4b4c      	ldr	r3, [pc, #304]	; (40cf68 <http_recv+0x178>)
  40ce38:	4798      	blx	r3
  40ce3a:	4603      	mov	r3, r0
  40ce3c:	2b00      	cmp	r3, #0
  40ce3e:	d174      	bne.n	40cf2a <http_recv+0x13a>
				for (i = 0; i < 40; i++) {
  40ce40:	2300      	movs	r3, #0
  40ce42:	627b      	str	r3, [r7, #36]	; 0x24
  40ce44:	e01d      	b.n	40ce82 <http_recv+0x92>
					if (((char *)data + 4)[i] == ' ' ||
  40ce46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40ce48:	3304      	adds	r3, #4
  40ce4a:	69fa      	ldr	r2, [r7, #28]
  40ce4c:	4413      	add	r3, r2
  40ce4e:	781b      	ldrb	r3, [r3, #0]
  40ce50:	2b20      	cmp	r3, #32
  40ce52:	d00d      	beq.n	40ce70 <http_recv+0x80>
							((char *)data + 4)[i] == '\r' ||
  40ce54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40ce56:	3304      	adds	r3, #4
  40ce58:	69fa      	ldr	r2, [r7, #28]
  40ce5a:	4413      	add	r3, r2
  40ce5c:	781b      	ldrb	r3, [r3, #0]
		if (hs->file == NULL) {
			data = p->payload;

			if (strncmp(data, "GET ", 4) == 0) {
				for (i = 0; i < 40; i++) {
					if (((char *)data + 4)[i] == ' ' ||
  40ce5e:	2b0d      	cmp	r3, #13
  40ce60:	d006      	beq.n	40ce70 <http_recv+0x80>
							((char *)data + 4)[i] == '\r' ||
							((char *)data + 4)[i] == '\n') {
  40ce62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40ce64:	3304      	adds	r3, #4
  40ce66:	69fa      	ldr	r2, [r7, #28]
  40ce68:	4413      	add	r3, r2
  40ce6a:	781b      	ldrb	r3, [r3, #0]
			data = p->payload;

			if (strncmp(data, "GET ", 4) == 0) {
				for (i = 0; i < 40; i++) {
					if (((char *)data + 4)[i] == ' ' ||
							((char *)data + 4)[i] == '\r' ||
  40ce6c:	2b0a      	cmp	r3, #10
  40ce6e:	d105      	bne.n	40ce7c <http_recv+0x8c>
							((char *)data + 4)[i] == '\n') {
						((char *)data + 4)[i] = 0;
  40ce70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40ce72:	3304      	adds	r3, #4
  40ce74:	69fa      	ldr	r2, [r7, #28]
  40ce76:	4413      	add	r3, r2
  40ce78:	2200      	movs	r2, #0
  40ce7a:	701a      	strb	r2, [r3, #0]

		if (hs->file == NULL) {
			data = p->payload;

			if (strncmp(data, "GET ", 4) == 0) {
				for (i = 0; i < 40; i++) {
  40ce7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40ce7e:	3301      	adds	r3, #1
  40ce80:	627b      	str	r3, [r7, #36]	; 0x24
  40ce82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40ce84:	2b27      	cmp	r3, #39	; 0x27
  40ce86:	ddde      	ble.n	40ce46 <http_recv+0x56>
							((char *)data + 4)[i] == '\n') {
						((char *)data + 4)[i] = 0;
					}
				}

				if (*(char *)(data + 4) == '/' &&
  40ce88:	69fb      	ldr	r3, [r7, #28]
  40ce8a:	3304      	adds	r3, #4
  40ce8c:	781b      	ldrb	r3, [r3, #0]
  40ce8e:	2b2f      	cmp	r3, #47	; 0x2f
  40ce90:	d127      	bne.n	40cee2 <http_recv+0xf2>
						*(char *)(data + 5) == 0) {
  40ce92:	69fb      	ldr	r3, [r7, #28]
  40ce94:	3305      	adds	r3, #5
  40ce96:	781b      	ldrb	r3, [r3, #0]
							((char *)data + 4)[i] == '\n') {
						((char *)data + 4)[i] = 0;
					}
				}

				if (*(char *)(data + 4) == '/' &&
  40ce98:	2b00      	cmp	r3, #0
  40ce9a:	d122      	bne.n	40cee2 <http_recv+0xf2>
						*(char *)(data + 5) == 0) {
					fs_open("/insper.html", &file);
  40ce9c:	f107 0310 	add.w	r3, r7, #16
  40cea0:	4619      	mov	r1, r3
  40cea2:	4832      	ldr	r0, [pc, #200]	; (40cf6c <http_recv+0x17c>)
  40cea4:	4b32      	ldr	r3, [pc, #200]	; (40cf70 <http_recv+0x180>)
  40cea6:	4798      	blx	r3
                    
                    char  *n;
                    n = strstr (file.data,"numero:");
  40cea8:	693b      	ldr	r3, [r7, #16]
  40ceaa:	4932      	ldr	r1, [pc, #200]	; (40cf74 <http_recv+0x184>)
  40ceac:	4618      	mov	r0, r3
  40ceae:	4b32      	ldr	r3, [pc, #200]	; (40cf78 <http_recv+0x188>)
  40ceb0:	4798      	blx	r3
  40ceb2:	61b8      	str	r0, [r7, #24]
                    snprintf(++n, 7, "%7d", nAccess++);
  40ceb4:	69bb      	ldr	r3, [r7, #24]
  40ceb6:	3301      	adds	r3, #1
  40ceb8:	61bb      	str	r3, [r7, #24]
  40ceba:	4b30      	ldr	r3, [pc, #192]	; (40cf7c <http_recv+0x18c>)
  40cebc:	681b      	ldr	r3, [r3, #0]
  40cebe:	1c5a      	adds	r2, r3, #1
  40cec0:	492e      	ldr	r1, [pc, #184]	; (40cf7c <http_recv+0x18c>)
  40cec2:	600a      	str	r2, [r1, #0]
  40cec4:	4a2e      	ldr	r2, [pc, #184]	; (40cf80 <http_recv+0x190>)
  40cec6:	2107      	movs	r1, #7
  40cec8:	69b8      	ldr	r0, [r7, #24]
  40ceca:	4c2e      	ldr	r4, [pc, #184]	; (40cf84 <http_recv+0x194>)
  40cecc:	47a0      	blx	r4
                    printf("n: %c, nAcesso: %d \n", *n, nAccess);
  40cece:	69bb      	ldr	r3, [r7, #24]
  40ced0:	781b      	ldrb	r3, [r3, #0]
  40ced2:	4619      	mov	r1, r3
  40ced4:	4b29      	ldr	r3, [pc, #164]	; (40cf7c <http_recv+0x18c>)
  40ced6:	681b      	ldr	r3, [r3, #0]
  40ced8:	461a      	mov	r2, r3
  40ceda:	482b      	ldr	r0, [pc, #172]	; (40cf88 <http_recv+0x198>)
  40cedc:	4b2b      	ldr	r3, [pc, #172]	; (40cf8c <http_recv+0x19c>)
  40cede:	4798      	blx	r3
						((char *)data + 4)[i] = 0;
					}
				}

				if (*(char *)(data + 4) == '/' &&
						*(char *)(data + 5) == 0) {
  40cee0:	e010      	b.n	40cf04 <http_recv+0x114>
                    n = strstr (file.data,"numero:");
                    snprintf(++n, 7, "%7d", nAccess++);
                    printf("n: %c, nAcesso: %d \n", *n, nAccess);
                    
				}
				else if (!fs_open((char *)data + 4, &file)) {
  40cee2:	69fb      	ldr	r3, [r7, #28]
  40cee4:	3304      	adds	r3, #4
  40cee6:	f107 0210 	add.w	r2, r7, #16
  40ceea:	4611      	mov	r1, r2
  40ceec:	4618      	mov	r0, r3
  40ceee:	4b20      	ldr	r3, [pc, #128]	; (40cf70 <http_recv+0x180>)
  40cef0:	4798      	blx	r3
  40cef2:	4603      	mov	r3, r0
  40cef4:	2b00      	cmp	r3, #0
  40cef6:	d105      	bne.n	40cf04 <http_recv+0x114>
					fs_open("/404.html", &file);
  40cef8:	f107 0310 	add.w	r3, r7, #16
  40cefc:	4619      	mov	r1, r3
  40cefe:	4824      	ldr	r0, [pc, #144]	; (40cf90 <http_recv+0x1a0>)
  40cf00:	4b1b      	ldr	r3, [pc, #108]	; (40cf70 <http_recv+0x180>)
  40cf02:	4798      	blx	r3
				}

				hs->file = file.data;
  40cf04:	693a      	ldr	r2, [r7, #16]
  40cf06:	6a3b      	ldr	r3, [r7, #32]
  40cf08:	601a      	str	r2, [r3, #0]
				hs->left = file.len;
  40cf0a:	697b      	ldr	r3, [r7, #20]
  40cf0c:	461a      	mov	r2, r3
  40cf0e:	6a3b      	ldr	r3, [r7, #32]
  40cf10:	605a      	str	r2, [r3, #4]
                
				/* printf("data %p len %ld\n", hs->file, hs->left);*/

				pbuf_free(p);
  40cf12:	6878      	ldr	r0, [r7, #4]
  40cf14:	4b1f      	ldr	r3, [pc, #124]	; (40cf94 <http_recv+0x1a4>)
  40cf16:	4798      	blx	r3
				http_send_data(pcb, hs);
  40cf18:	6a39      	ldr	r1, [r7, #32]
  40cf1a:	68b8      	ldr	r0, [r7, #8]
  40cf1c:	4b1e      	ldr	r3, [pc, #120]	; (40cf98 <http_recv+0x1a8>)
  40cf1e:	4798      	blx	r3

				/* Tell TCP that we wish be to informed of data that has been
				successfully sent by a call to the http_sent() function. */
				tcp_sent(pcb, http_sent);
  40cf20:	491e      	ldr	r1, [pc, #120]	; (40cf9c <http_recv+0x1ac>)
  40cf22:	68b8      	ldr	r0, [r7, #8]
  40cf24:	4b1e      	ldr	r3, [pc, #120]	; (40cfa0 <http_recv+0x1b0>)
  40cf26:	4798      	blx	r3
  40cf28:	e00a      	b.n	40cf40 <http_recv+0x150>
			} else {
				pbuf_free(p);
  40cf2a:	6878      	ldr	r0, [r7, #4]
  40cf2c:	4b19      	ldr	r3, [pc, #100]	; (40cf94 <http_recv+0x1a4>)
  40cf2e:	4798      	blx	r3
				http_close_conn(pcb, hs);
  40cf30:	6a39      	ldr	r1, [r7, #32]
  40cf32:	68b8      	ldr	r0, [r7, #8]
  40cf34:	4b1b      	ldr	r3, [pc, #108]	; (40cfa4 <http_recv+0x1b4>)
  40cf36:	4798      	blx	r3
  40cf38:	e002      	b.n	40cf40 <http_recv+0x150>
			}
		} else {
			pbuf_free(p);
  40cf3a:	6878      	ldr	r0, [r7, #4]
  40cf3c:	4b15      	ldr	r3, [pc, #84]	; (40cf94 <http_recv+0x1a4>)
  40cf3e:	4798      	blx	r3
		}
	}

	if (err == ERR_OK && p == NULL) {
  40cf40:	f997 3003 	ldrsb.w	r3, [r7, #3]
  40cf44:	2b00      	cmp	r3, #0
  40cf46:	d106      	bne.n	40cf56 <http_recv+0x166>
  40cf48:	687b      	ldr	r3, [r7, #4]
  40cf4a:	2b00      	cmp	r3, #0
  40cf4c:	d103      	bne.n	40cf56 <http_recv+0x166>
		http_close_conn(pcb, hs);
  40cf4e:	6a39      	ldr	r1, [r7, #32]
  40cf50:	68b8      	ldr	r0, [r7, #8]
  40cf52:	4b14      	ldr	r3, [pc, #80]	; (40cfa4 <http_recv+0x1b4>)
  40cf54:	4798      	blx	r3
	}

	return ERR_OK;
  40cf56:	2300      	movs	r3, #0
}
  40cf58:	4618      	mov	r0, r3
  40cf5a:	372c      	adds	r7, #44	; 0x2c
  40cf5c:	46bd      	mov	sp, r7
  40cf5e:	bd90      	pop	{r4, r7, pc}
  40cf60:	00406a35 	.word	0x00406a35
  40cf64:	00417650 	.word	0x00417650
  40cf68:	0040e15d 	.word	0x0040e15d
  40cf6c:	00417658 	.word	0x00417658
  40cf70:	0040cbed 	.word	0x0040cbed
  40cf74:	00417668 	.word	0x00417668
  40cf78:	0040e4b5 	.word	0x0040e4b5
  40cf7c:	204038d0 	.word	0x204038d0
  40cf80:	00417670 	.word	0x00417670
  40cf84:	0040dc01 	.word	0x0040dc01
  40cf88:	00417674 	.word	0x00417674
  40cf8c:	0040d7cd 	.word	0x0040d7cd
  40cf90:	0041768c 	.word	0x0041768c
  40cf94:	00406069 	.word	0x00406069
  40cf98:	0040ccb1 	.word	0x0040ccb1
  40cf9c:	0040cdad 	.word	0x0040cdad
  40cfa0:	004074a1 	.word	0x004074a1
  40cfa4:	0040cc65 	.word	0x0040cc65

0040cfa8 <http_accept>:
 * \param err Connection status.
 *
 * \return ERR_OK on success.
 */
static err_t http_accept(void *arg, struct tcp_pcb *pcb, err_t err)
{
  40cfa8:	b580      	push	{r7, lr}
  40cfaa:	b086      	sub	sp, #24
  40cfac:	af00      	add	r7, sp, #0
  40cfae:	60f8      	str	r0, [r7, #12]
  40cfb0:	60b9      	str	r1, [r7, #8]
  40cfb2:	4613      	mov	r3, r2
  40cfb4:	71fb      	strb	r3, [r7, #7]
	struct http_state *hs;

	LWIP_UNUSED_ARG(arg);
	LWIP_UNUSED_ARG(err);

	tcp_setprio(pcb, TCP_PRIO_MIN);
  40cfb6:	2101      	movs	r1, #1
  40cfb8:	68b8      	ldr	r0, [r7, #8]
  40cfba:	4b15      	ldr	r3, [pc, #84]	; (40d010 <http_accept+0x68>)
  40cfbc:	4798      	blx	r3

	/* Allocate memory for the structure that holds the state of the
	connection. */
	hs = (struct http_state *)mem_malloc(sizeof(struct http_state));
  40cfbe:	200c      	movs	r0, #12
  40cfc0:	4b14      	ldr	r3, [pc, #80]	; (40d014 <http_accept+0x6c>)
  40cfc2:	4798      	blx	r3
  40cfc4:	6178      	str	r0, [r7, #20]

	if (hs == NULL) {
  40cfc6:	697b      	ldr	r3, [r7, #20]
  40cfc8:	2b00      	cmp	r3, #0
  40cfca:	d102      	bne.n	40cfd2 <http_accept+0x2a>
		//printf("http_accept: Out of memory\n");
		return ERR_MEM;
  40cfcc:	f04f 33ff 	mov.w	r3, #4294967295
  40cfd0:	e01a      	b.n	40d008 <http_accept+0x60>
	}

	/* Initialize the structure. */
	hs->file = NULL;
  40cfd2:	697b      	ldr	r3, [r7, #20]
  40cfd4:	2200      	movs	r2, #0
  40cfd6:	601a      	str	r2, [r3, #0]
	hs->left = 0;
  40cfd8:	697b      	ldr	r3, [r7, #20]
  40cfda:	2200      	movs	r2, #0
  40cfdc:	605a      	str	r2, [r3, #4]
	hs->retries = 0;
  40cfde:	697b      	ldr	r3, [r7, #20]
  40cfe0:	2200      	movs	r2, #0
  40cfe2:	721a      	strb	r2, [r3, #8]

	/* Tell TCP that this is the structure we wish to be passed for our
	callbacks. */
	tcp_arg(pcb, hs);
  40cfe4:	6979      	ldr	r1, [r7, #20]
  40cfe6:	68b8      	ldr	r0, [r7, #8]
  40cfe8:	4b0b      	ldr	r3, [pc, #44]	; (40d018 <http_accept+0x70>)
  40cfea:	4798      	blx	r3

	/* Tell TCP that we wish to be informed of incoming data by a call
	to the http_recv() function. */
	tcp_recv(pcb, http_recv);
  40cfec:	490b      	ldr	r1, [pc, #44]	; (40d01c <http_accept+0x74>)
  40cfee:	68b8      	ldr	r0, [r7, #8]
  40cff0:	4b0b      	ldr	r3, [pc, #44]	; (40d020 <http_accept+0x78>)
  40cff2:	4798      	blx	r3

	tcp_err(pcb, http_conn_err);
  40cff4:	490b      	ldr	r1, [pc, #44]	; (40d024 <http_accept+0x7c>)
  40cff6:	68b8      	ldr	r0, [r7, #8]
  40cff8:	4b0b      	ldr	r3, [pc, #44]	; (40d028 <http_accept+0x80>)
  40cffa:	4798      	blx	r3

	tcp_poll(pcb, http_poll, 4);
  40cffc:	2204      	movs	r2, #4
  40cffe:	490b      	ldr	r1, [pc, #44]	; (40d02c <http_accept+0x84>)
  40d000:	68b8      	ldr	r0, [r7, #8]
  40d002:	4b0b      	ldr	r3, [pc, #44]	; (40d030 <http_accept+0x88>)
  40d004:	4798      	blx	r3
	return ERR_OK;
  40d006:	2300      	movs	r3, #0
}
  40d008:	4618      	mov	r0, r3
  40d00a:	3718      	adds	r7, #24
  40d00c:	46bd      	mov	sp, r7
  40d00e:	bd80      	pop	{r7, pc}
  40d010:	00407189 	.word	0x00407189
  40d014:	0040575d 	.word	0x0040575d
  40d018:	00407465 	.word	0x00407465
  40d01c:	0040cdf1 	.word	0x0040cdf1
  40d020:	00407481 	.word	0x00407481
  40d024:	0040cc41 	.word	0x0040cc41
  40d028:	004074bd 	.word	0x004074bd
  40d02c:	0040cd3d 	.word	0x0040cd3d
  40d030:	004074f9 	.word	0x004074f9

0040d034 <httpd_init>:

/**
 * \brief HTTP server init.
 */
void httpd_init(void)
{
  40d034:	b580      	push	{r7, lr}
  40d036:	b082      	sub	sp, #8
  40d038:	af00      	add	r7, sp, #0
	struct tcp_pcb *pcb;

	pcb = tcp_new();
  40d03a:	4b0a      	ldr	r3, [pc, #40]	; (40d064 <httpd_init+0x30>)
  40d03c:	4798      	blx	r3
  40d03e:	6078      	str	r0, [r7, #4]
	tcp_bind(pcb, IP_ADDR_ANY, 80);
  40d040:	2250      	movs	r2, #80	; 0x50
  40d042:	4909      	ldr	r1, [pc, #36]	; (40d068 <httpd_init+0x34>)
  40d044:	6878      	ldr	r0, [r7, #4]
  40d046:	4b09      	ldr	r3, [pc, #36]	; (40d06c <httpd_init+0x38>)
  40d048:	4798      	blx	r3
	pcb = tcp_listen(pcb);
  40d04a:	21ff      	movs	r1, #255	; 0xff
  40d04c:	6878      	ldr	r0, [r7, #4]
  40d04e:	4b08      	ldr	r3, [pc, #32]	; (40d070 <httpd_init+0x3c>)
  40d050:	4798      	blx	r3
  40d052:	6078      	str	r0, [r7, #4]
	tcp_accept(pcb, http_accept);
  40d054:	4907      	ldr	r1, [pc, #28]	; (40d074 <httpd_init+0x40>)
  40d056:	6878      	ldr	r0, [r7, #4]
  40d058:	4b07      	ldr	r3, [pc, #28]	; (40d078 <httpd_init+0x44>)
  40d05a:	4798      	blx	r3
}
  40d05c:	bf00      	nop
  40d05e:	3708      	adds	r7, #8
  40d060:	46bd      	mov	sp, r7
  40d062:	bd80      	pop	{r7, pc}
  40d064:	00407451 	.word	0x00407451
  40d068:	00414a28 	.word	0x00414a28
  40d06c:	0040678d 	.word	0x0040678d
  40d070:	00406891 	.word	0x00406891
  40d074:	0040cfa9 	.word	0x0040cfa9
  40d078:	004074dd 	.word	0x004074dd

0040d07c <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  40d07c:	b480      	push	{r7}
  40d07e:	b083      	sub	sp, #12
  40d080:	af00      	add	r7, sp, #0
  40d082:	4603      	mov	r3, r0
  40d084:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40d086:	4909      	ldr	r1, [pc, #36]	; (40d0ac <NVIC_EnableIRQ+0x30>)
  40d088:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40d08c:	095b      	lsrs	r3, r3, #5
  40d08e:	79fa      	ldrb	r2, [r7, #7]
  40d090:	f002 021f 	and.w	r2, r2, #31
  40d094:	2001      	movs	r0, #1
  40d096:	fa00 f202 	lsl.w	r2, r0, r2
  40d09a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  40d09e:	bf00      	nop
  40d0a0:	370c      	adds	r7, #12
  40d0a2:	46bd      	mov	sp, r7
  40d0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
  40d0a8:	4770      	bx	lr
  40d0aa:	bf00      	nop
  40d0ac:	e000e100 	.word	0xe000e100

0040d0b0 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  40d0b0:	b480      	push	{r7}
  40d0b2:	b083      	sub	sp, #12
  40d0b4:	af00      	add	r7, sp, #0
  40d0b6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40d0b8:	687b      	ldr	r3, [r7, #4]
  40d0ba:	2b07      	cmp	r3, #7
  40d0bc:	d825      	bhi.n	40d10a <osc_get_rate+0x5a>
  40d0be:	a201      	add	r2, pc, #4	; (adr r2, 40d0c4 <osc_get_rate+0x14>)
  40d0c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40d0c4:	0040d0e5 	.word	0x0040d0e5
  40d0c8:	0040d0eb 	.word	0x0040d0eb
  40d0cc:	0040d0f1 	.word	0x0040d0f1
  40d0d0:	0040d0f7 	.word	0x0040d0f7
  40d0d4:	0040d0fb 	.word	0x0040d0fb
  40d0d8:	0040d0ff 	.word	0x0040d0ff
  40d0dc:	0040d103 	.word	0x0040d103
  40d0e0:	0040d107 	.word	0x0040d107
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  40d0e4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  40d0e8:	e010      	b.n	40d10c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  40d0ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40d0ee:	e00d      	b.n	40d10c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  40d0f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40d0f4:	e00a      	b.n	40d10c <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  40d0f6:	4b08      	ldr	r3, [pc, #32]	; (40d118 <osc_get_rate+0x68>)
  40d0f8:	e008      	b.n	40d10c <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  40d0fa:	4b08      	ldr	r3, [pc, #32]	; (40d11c <osc_get_rate+0x6c>)
  40d0fc:	e006      	b.n	40d10c <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  40d0fe:	4b08      	ldr	r3, [pc, #32]	; (40d120 <osc_get_rate+0x70>)
  40d100:	e004      	b.n	40d10c <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  40d102:	4b07      	ldr	r3, [pc, #28]	; (40d120 <osc_get_rate+0x70>)
  40d104:	e002      	b.n	40d10c <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  40d106:	4b06      	ldr	r3, [pc, #24]	; (40d120 <osc_get_rate+0x70>)
  40d108:	e000      	b.n	40d10c <osc_get_rate+0x5c>
	}

	return 0;
  40d10a:	2300      	movs	r3, #0
}
  40d10c:	4618      	mov	r0, r3
  40d10e:	370c      	adds	r7, #12
  40d110:	46bd      	mov	sp, r7
  40d112:	f85d 7b04 	ldr.w	r7, [sp], #4
  40d116:	4770      	bx	lr
  40d118:	003d0900 	.word	0x003d0900
  40d11c:	007a1200 	.word	0x007a1200
  40d120:	00b71b00 	.word	0x00b71b00

0040d124 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  40d124:	b580      	push	{r7, lr}
  40d126:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  40d128:	2006      	movs	r0, #6
  40d12a:	4b05      	ldr	r3, [pc, #20]	; (40d140 <sysclk_get_main_hz+0x1c>)
  40d12c:	4798      	blx	r3
  40d12e:	4602      	mov	r2, r0
  40d130:	4613      	mov	r3, r2
  40d132:	009b      	lsls	r3, r3, #2
  40d134:	4413      	add	r3, r2
  40d136:	009a      	lsls	r2, r3, #2
  40d138:	4413      	add	r3, r2
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  40d13a:	4618      	mov	r0, r3
  40d13c:	bd80      	pop	{r7, pc}
  40d13e:	bf00      	nop
  40d140:	0040d0b1 	.word	0x0040d0b1

0040d144 <TC0_Handler>:

/**
 * TC0 Interrupt handler.
 */
void TC0_Handler(void)
{
  40d144:	b480      	push	{r7}
  40d146:	b083      	sub	sp, #12
  40d148:	af00      	add	r7, sp, #0
	/* Remove warnings. */
	volatile uint32_t ul_dummy;

	/* Clear status bit to acknowledge interrupt. */
	ul_dummy = TC0->TC_CHANNEL[0].TC_SR;
  40d14a:	4b07      	ldr	r3, [pc, #28]	; (40d168 <TC0_Handler+0x24>)
  40d14c:	6a1b      	ldr	r3, [r3, #32]
  40d14e:	607b      	str	r3, [r7, #4]

	/* Increase tick. */
	gs_ul_clk_tick++;
  40d150:	4b06      	ldr	r3, [pc, #24]	; (40d16c <TC0_Handler+0x28>)
  40d152:	681b      	ldr	r3, [r3, #0]
  40d154:	3301      	adds	r3, #1
  40d156:	4a05      	ldr	r2, [pc, #20]	; (40d16c <TC0_Handler+0x28>)
  40d158:	6013      	str	r3, [r2, #0]
}
  40d15a:	bf00      	nop
  40d15c:	370c      	adds	r7, #12
  40d15e:	46bd      	mov	sp, r7
  40d160:	f85d 7b04 	ldr.w	r7, [sp], #4
  40d164:	4770      	bx	lr
  40d166:	bf00      	nop
  40d168:	4000c000 	.word	0x4000c000
  40d16c:	204038d4 	.word	0x204038d4

0040d170 <sys_init_timing>:

/**
 * \brief Initialize the timer counter (TC0).
 */
void sys_init_timing(void)
{
  40d170:	b590      	push	{r4, r7, lr}
  40d172:	b085      	sub	sp, #20
  40d174:	af02      	add	r7, sp, #8
	uint32_t ul_div;
	uint32_t ul_tcclks;

	/* Clear tick value. */
	gs_ul_clk_tick = 0;
  40d176:	4b1d      	ldr	r3, [pc, #116]	; (40d1ec <sys_init_timing+0x7c>)
  40d178:	2200      	movs	r2, #0
  40d17a:	601a      	str	r2, [r3, #0]

	/* Configure PMC. */
	pmc_enable_periph_clk(ID_TC0);
  40d17c:	2017      	movs	r0, #23
  40d17e:	4b1c      	ldr	r3, [pc, #112]	; (40d1f0 <sys_init_timing+0x80>)
  40d180:	4798      	blx	r3

	/* Configure TC for a 1kHz frequency and trigger on RC compare. */
	tc_find_mck_divisor(1000,
  40d182:	4b1c      	ldr	r3, [pc, #112]	; (40d1f4 <sys_init_timing+0x84>)
  40d184:	4798      	blx	r3
  40d186:	4604      	mov	r4, r0
  40d188:	4b1a      	ldr	r3, [pc, #104]	; (40d1f4 <sys_init_timing+0x84>)
  40d18a:	4798      	blx	r3
  40d18c:	4601      	mov	r1, r0
  40d18e:	463b      	mov	r3, r7
  40d190:	1d3a      	adds	r2, r7, #4
  40d192:	9100      	str	r1, [sp, #0]
  40d194:	4621      	mov	r1, r4
  40d196:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  40d19a:	4c17      	ldr	r4, [pc, #92]	; (40d1f8 <sys_init_timing+0x88>)
  40d19c:	47a0      	blx	r4
			sysclk_get_main_hz(), &ul_div, &ul_tcclks,
			sysclk_get_main_hz());
	tc_init(TC0, 0, ul_tcclks | TC_CMR_CPCTRG);
  40d19e:	683b      	ldr	r3, [r7, #0]
  40d1a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  40d1a4:	461a      	mov	r2, r3
  40d1a6:	2100      	movs	r1, #0
  40d1a8:	4814      	ldr	r0, [pc, #80]	; (40d1fc <sys_init_timing+0x8c>)
  40d1aa:	4b15      	ldr	r3, [pc, #84]	; (40d200 <sys_init_timing+0x90>)
  40d1ac:	4798      	blx	r3
	tc_write_rc(TC0, 0, (sysclk_get_main_hz() / ul_div) / 1000);
  40d1ae:	4b11      	ldr	r3, [pc, #68]	; (40d1f4 <sys_init_timing+0x84>)
  40d1b0:	4798      	blx	r3
  40d1b2:	4602      	mov	r2, r0
  40d1b4:	687b      	ldr	r3, [r7, #4]
  40d1b6:	fbb2 f3f3 	udiv	r3, r2, r3
  40d1ba:	4a12      	ldr	r2, [pc, #72]	; (40d204 <sys_init_timing+0x94>)
  40d1bc:	fba2 2303 	umull	r2, r3, r2, r3
  40d1c0:	099b      	lsrs	r3, r3, #6
  40d1c2:	461a      	mov	r2, r3
  40d1c4:	2100      	movs	r1, #0
  40d1c6:	480d      	ldr	r0, [pc, #52]	; (40d1fc <sys_init_timing+0x8c>)
  40d1c8:	4b0f      	ldr	r3, [pc, #60]	; (40d208 <sys_init_timing+0x98>)
  40d1ca:	4798      	blx	r3

	/* Configure and enable interrupt on RC compare. */
	NVIC_EnableIRQ((IRQn_Type)ID_TC0);
  40d1cc:	2017      	movs	r0, #23
  40d1ce:	4b0f      	ldr	r3, [pc, #60]	; (40d20c <sys_init_timing+0x9c>)
  40d1d0:	4798      	blx	r3
	tc_enable_interrupt(TC0, 0, TC_IER_CPCS);
  40d1d2:	2210      	movs	r2, #16
  40d1d4:	2100      	movs	r1, #0
  40d1d6:	4809      	ldr	r0, [pc, #36]	; (40d1fc <sys_init_timing+0x8c>)
  40d1d8:	4b0d      	ldr	r3, [pc, #52]	; (40d210 <sys_init_timing+0xa0>)
  40d1da:	4798      	blx	r3

	/* Start timer. */
	tc_start(TC0, 0);
  40d1dc:	2100      	movs	r1, #0
  40d1de:	4807      	ldr	r0, [pc, #28]	; (40d1fc <sys_init_timing+0x8c>)
  40d1e0:	4b0c      	ldr	r3, [pc, #48]	; (40d214 <sys_init_timing+0xa4>)
  40d1e2:	4798      	blx	r3
}
  40d1e4:	bf00      	nop
  40d1e6:	370c      	adds	r7, #12
  40d1e8:	46bd      	mov	sp, r7
  40d1ea:	bd90      	pop	{r4, r7, pc}
  40d1ec:	204038d4 	.word	0x204038d4
  40d1f0:	004019bd 	.word	0x004019bd
  40d1f4:	0040d125 	.word	0x0040d125
  40d1f8:	00401af1 	.word	0x00401af1
  40d1fc:	4000c000 	.word	0x4000c000
  40d200:	00401a41 	.word	0x00401a41
  40d204:	10624dd3 	.word	0x10624dd3
  40d208:	00401aa1 	.word	0x00401aa1
  40d20c:	0040d07d 	.word	0x0040d07d
  40d210:	00401ac9 	.word	0x00401ac9
  40d214:	00401a7d 	.word	0x00401a7d

0040d218 <sys_get_ms>:

/**
 * \brief Return the number of timer ticks (ms).
 */
uint32_t sys_get_ms(void)
{
  40d218:	b480      	push	{r7}
  40d21a:	af00      	add	r7, sp, #0
	return gs_ul_clk_tick;
  40d21c:	4b03      	ldr	r3, [pc, #12]	; (40d22c <sys_get_ms+0x14>)
  40d21e:	681b      	ldr	r3, [r3, #0]
}
  40d220:	4618      	mov	r0, r3
  40d222:	46bd      	mov	sp, r7
  40d224:	f85d 7b04 	ldr.w	r7, [sp], #4
  40d228:	4770      	bx	lr
  40d22a:	bf00      	nop
  40d22c:	204038d4 	.word	0x204038d4

0040d230 <sys_now>:

#if ((LWIP_VERSION) != ((1U << 24) | (3U << 16) | (2U << 8) | (LWIP_VERSION_RC)))
u32_t sys_now(void)
{
  40d230:	b580      	push	{r7, lr}
  40d232:	af00      	add	r7, sp, #0
	return (sys_get_ms());
  40d234:	4b02      	ldr	r3, [pc, #8]	; (40d240 <sys_now+0x10>)
  40d236:	4798      	blx	r3
  40d238:	4603      	mov	r3, r0
}
  40d23a:	4618      	mov	r0, r3
  40d23c:	bd80      	pop	{r7, pc}
  40d23e:	bf00      	nop
  40d240:	0040d219 	.word	0x0040d219

0040d244 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  40d244:	b480      	push	{r7}
  40d246:	b083      	sub	sp, #12
  40d248:	af00      	add	r7, sp, #0
  40d24a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40d24c:	687b      	ldr	r3, [r7, #4]
  40d24e:	2b07      	cmp	r3, #7
  40d250:	d825      	bhi.n	40d29e <osc_get_rate+0x5a>
  40d252:	a201      	add	r2, pc, #4	; (adr r2, 40d258 <osc_get_rate+0x14>)
  40d254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40d258:	0040d279 	.word	0x0040d279
  40d25c:	0040d27f 	.word	0x0040d27f
  40d260:	0040d285 	.word	0x0040d285
  40d264:	0040d28b 	.word	0x0040d28b
  40d268:	0040d28f 	.word	0x0040d28f
  40d26c:	0040d293 	.word	0x0040d293
  40d270:	0040d297 	.word	0x0040d297
  40d274:	0040d29b 	.word	0x0040d29b
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  40d278:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  40d27c:	e010      	b.n	40d2a0 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  40d27e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40d282:	e00d      	b.n	40d2a0 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  40d284:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40d288:	e00a      	b.n	40d2a0 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  40d28a:	4b08      	ldr	r3, [pc, #32]	; (40d2ac <osc_get_rate+0x68>)
  40d28c:	e008      	b.n	40d2a0 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  40d28e:	4b08      	ldr	r3, [pc, #32]	; (40d2b0 <osc_get_rate+0x6c>)
  40d290:	e006      	b.n	40d2a0 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  40d292:	4b08      	ldr	r3, [pc, #32]	; (40d2b4 <osc_get_rate+0x70>)
  40d294:	e004      	b.n	40d2a0 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  40d296:	4b07      	ldr	r3, [pc, #28]	; (40d2b4 <osc_get_rate+0x70>)
  40d298:	e002      	b.n	40d2a0 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  40d29a:	4b06      	ldr	r3, [pc, #24]	; (40d2b4 <osc_get_rate+0x70>)
  40d29c:	e000      	b.n	40d2a0 <osc_get_rate+0x5c>
	}

	return 0;
  40d29e:	2300      	movs	r3, #0
}
  40d2a0:	4618      	mov	r0, r3
  40d2a2:	370c      	adds	r7, #12
  40d2a4:	46bd      	mov	sp, r7
  40d2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
  40d2aa:	4770      	bx	lr
  40d2ac:	003d0900 	.word	0x003d0900
  40d2b0:	007a1200 	.word	0x007a1200
  40d2b4:	00b71b00 	.word	0x00b71b00

0040d2b8 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  40d2b8:	b580      	push	{r7, lr}
  40d2ba:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  40d2bc:	2006      	movs	r0, #6
  40d2be:	4b05      	ldr	r3, [pc, #20]	; (40d2d4 <sysclk_get_main_hz+0x1c>)
  40d2c0:	4798      	blx	r3
  40d2c2:	4602      	mov	r2, r0
  40d2c4:	4613      	mov	r3, r2
  40d2c6:	009b      	lsls	r3, r3, #2
  40d2c8:	4413      	add	r3, r2
  40d2ca:	009a      	lsls	r2, r3, #2
  40d2cc:	4413      	add	r3, r2
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  40d2ce:	4618      	mov	r0, r3
  40d2d0:	bd80      	pop	{r7, pc}
  40d2d2:	bf00      	nop
  40d2d4:	0040d245 	.word	0x0040d245

0040d2d8 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  40d2d8:	b580      	push	{r7, lr}
  40d2da:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  40d2dc:	4b02      	ldr	r3, [pc, #8]	; (40d2e8 <sysclk_get_peripheral_hz+0x10>)
  40d2de:	4798      	blx	r3
  40d2e0:	4603      	mov	r3, r0
  40d2e2:	089b      	lsrs	r3, r3, #2
		(((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 : (1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos))) * CONFIG_SYSCLK_DIV);
}
  40d2e4:	4618      	mov	r0, r3
  40d2e6:	bd80      	pop	{r7, pc}
  40d2e8:	0040d2b9 	.word	0x0040d2b9

0040d2ec <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  40d2ec:	b580      	push	{r7, lr}
  40d2ee:	b082      	sub	sp, #8
  40d2f0:	af00      	add	r7, sp, #0
  40d2f2:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  40d2f4:	6878      	ldr	r0, [r7, #4]
  40d2f6:	4b03      	ldr	r3, [pc, #12]	; (40d304 <sysclk_enable_peripheral_clock+0x18>)
  40d2f8:	4798      	blx	r3
}
  40d2fa:	bf00      	nop
  40d2fc:	3708      	adds	r7, #8
  40d2fe:	46bd      	mov	sp, r7
  40d300:	bd80      	pop	{r7, pc}
  40d302:	bf00      	nop
  40d304:	004019bd 	.word	0x004019bd

0040d308 <usart_serial_init>:
 * \param opt      Options needed to set up RS232 communication (see
 * \ref usart_options_t).
 */
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
  40d308:	b580      	push	{r7, lr}
  40d30a:	b08c      	sub	sp, #48	; 0x30
  40d30c:	af00      	add	r7, sp, #0
  40d30e:	6078      	str	r0, [r7, #4]
  40d310:	6039      	str	r1, [r7, #0]
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  40d312:	4b49      	ldr	r3, [pc, #292]	; (40d438 <usart_serial_init+0x130>)
  40d314:	4798      	blx	r3
  40d316:	4603      	mov	r3, r0
  40d318:	627b      	str	r3, [r7, #36]	; 0x24
	uart_settings.ul_baudrate = opt->baudrate;
  40d31a:	683b      	ldr	r3, [r7, #0]
  40d31c:	681b      	ldr	r3, [r3, #0]
  40d31e:	62bb      	str	r3, [r7, #40]	; 0x28
	uart_settings.ul_mode = opt->paritytype;
  40d320:	683b      	ldr	r3, [r7, #0]
  40d322:	689b      	ldr	r3, [r3, #8]
  40d324:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
  40d326:	683b      	ldr	r3, [r7, #0]
  40d328:	681b      	ldr	r3, [r3, #0]
  40d32a:	60fb      	str	r3, [r7, #12]
	usart_settings.char_length = opt->charlength;
  40d32c:	683b      	ldr	r3, [r7, #0]
  40d32e:	685b      	ldr	r3, [r3, #4]
  40d330:	613b      	str	r3, [r7, #16]
	usart_settings.parity_type = opt->paritytype;
  40d332:	683b      	ldr	r3, [r7, #0]
  40d334:	689b      	ldr	r3, [r3, #8]
  40d336:	617b      	str	r3, [r7, #20]
	usart_settings.stop_bits= opt->stopbits;
  40d338:	683b      	ldr	r3, [r7, #0]
  40d33a:	68db      	ldr	r3, [r3, #12]
  40d33c:	61bb      	str	r3, [r7, #24]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  40d33e:	2300      	movs	r3, #0
  40d340:	61fb      	str	r3, [r7, #28]
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  40d342:	687b      	ldr	r3, [r7, #4]
  40d344:	4a3d      	ldr	r2, [pc, #244]	; (40d43c <usart_serial_init+0x134>)
  40d346:	4293      	cmp	r3, r2
  40d348:	d108      	bne.n	40d35c <usart_serial_init+0x54>
		sysclk_enable_peripheral_clock(ID_UART0);
  40d34a:	2007      	movs	r0, #7
  40d34c:	4b3c      	ldr	r3, [pc, #240]	; (40d440 <usart_serial_init+0x138>)
  40d34e:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  40d350:	f107 0324 	add.w	r3, r7, #36	; 0x24
  40d354:	4619      	mov	r1, r3
  40d356:	6878      	ldr	r0, [r7, #4]
  40d358:	4b3a      	ldr	r3, [pc, #232]	; (40d444 <usart_serial_init+0x13c>)
  40d35a:	4798      	blx	r3
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40d35c:	687b      	ldr	r3, [r7, #4]
  40d35e:	4a3a      	ldr	r2, [pc, #232]	; (40d448 <usart_serial_init+0x140>)
  40d360:	4293      	cmp	r3, r2
  40d362:	d108      	bne.n	40d376 <usart_serial_init+0x6e>
		sysclk_enable_peripheral_clock(ID_UART1);
  40d364:	2008      	movs	r0, #8
  40d366:	4b36      	ldr	r3, [pc, #216]	; (40d440 <usart_serial_init+0x138>)
  40d368:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  40d36a:	f107 0324 	add.w	r3, r7, #36	; 0x24
  40d36e:	4619      	mov	r1, r3
  40d370:	6878      	ldr	r0, [r7, #4]
  40d372:	4b34      	ldr	r3, [pc, #208]	; (40d444 <usart_serial_init+0x13c>)
  40d374:	4798      	blx	r3
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  40d376:	687b      	ldr	r3, [r7, #4]
  40d378:	4a34      	ldr	r2, [pc, #208]	; (40d44c <usart_serial_init+0x144>)
  40d37a:	4293      	cmp	r3, r2
  40d37c:	d108      	bne.n	40d390 <usart_serial_init+0x88>
		sysclk_enable_peripheral_clock(ID_UART2);
  40d37e:	202c      	movs	r0, #44	; 0x2c
  40d380:	4b2f      	ldr	r3, [pc, #188]	; (40d440 <usart_serial_init+0x138>)
  40d382:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  40d384:	f107 0324 	add.w	r3, r7, #36	; 0x24
  40d388:	4619      	mov	r1, r3
  40d38a:	6878      	ldr	r0, [r7, #4]
  40d38c:	4b2d      	ldr	r3, [pc, #180]	; (40d444 <usart_serial_init+0x13c>)
  40d38e:	4798      	blx	r3
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  40d390:	687b      	ldr	r3, [r7, #4]
  40d392:	4a2f      	ldr	r2, [pc, #188]	; (40d450 <usart_serial_init+0x148>)
  40d394:	4293      	cmp	r3, r2
  40d396:	d108      	bne.n	40d3aa <usart_serial_init+0xa2>
		sysclk_enable_peripheral_clock(ID_UART3);
  40d398:	202d      	movs	r0, #45	; 0x2d
  40d39a:	4b29      	ldr	r3, [pc, #164]	; (40d440 <usart_serial_init+0x138>)
  40d39c:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  40d39e:	f107 0324 	add.w	r3, r7, #36	; 0x24
  40d3a2:	4619      	mov	r1, r3
  40d3a4:	6878      	ldr	r0, [r7, #4]
  40d3a6:	4b27      	ldr	r3, [pc, #156]	; (40d444 <usart_serial_init+0x13c>)
  40d3a8:	4798      	blx	r3
		usart_enable_tx(p_usart);
		usart_enable_rx(p_usart);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  40d3aa:	687b      	ldr	r3, [r7, #4]
  40d3ac:	4a29      	ldr	r2, [pc, #164]	; (40d454 <usart_serial_init+0x14c>)
  40d3ae:	4293      	cmp	r3, r2
  40d3b0:	d111      	bne.n	40d3d6 <usart_serial_init+0xce>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM0);
		flexcom_set_opmode(FLEXCOM0, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART0);
  40d3b2:	200d      	movs	r0, #13
  40d3b4:	4b22      	ldr	r3, [pc, #136]	; (40d440 <usart_serial_init+0x138>)
  40d3b6:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  40d3b8:	4b1f      	ldr	r3, [pc, #124]	; (40d438 <usart_serial_init+0x130>)
  40d3ba:	4798      	blx	r3
  40d3bc:	4602      	mov	r2, r0
  40d3be:	f107 030c 	add.w	r3, r7, #12
  40d3c2:	4619      	mov	r1, r3
  40d3c4:	6878      	ldr	r0, [r7, #4]
  40d3c6:	4b24      	ldr	r3, [pc, #144]	; (40d458 <usart_serial_init+0x150>)
  40d3c8:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  40d3ca:	6878      	ldr	r0, [r7, #4]
  40d3cc:	4b23      	ldr	r3, [pc, #140]	; (40d45c <usart_serial_init+0x154>)
  40d3ce:	4798      	blx	r3
		usart_enable_rx(p_usart);
  40d3d0:	6878      	ldr	r0, [r7, #4]
  40d3d2:	4b23      	ldr	r3, [pc, #140]	; (40d460 <usart_serial_init+0x158>)
  40d3d4:	4798      	blx	r3
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  40d3d6:	687b      	ldr	r3, [r7, #4]
  40d3d8:	4a22      	ldr	r2, [pc, #136]	; (40d464 <usart_serial_init+0x15c>)
  40d3da:	4293      	cmp	r3, r2
  40d3dc:	d111      	bne.n	40d402 <usart_serial_init+0xfa>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM1);
		flexcom_set_opmode(FLEXCOM1, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART1);
  40d3de:	200e      	movs	r0, #14
  40d3e0:	4b17      	ldr	r3, [pc, #92]	; (40d440 <usart_serial_init+0x138>)
  40d3e2:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  40d3e4:	4b14      	ldr	r3, [pc, #80]	; (40d438 <usart_serial_init+0x130>)
  40d3e6:	4798      	blx	r3
  40d3e8:	4602      	mov	r2, r0
  40d3ea:	f107 030c 	add.w	r3, r7, #12
  40d3ee:	4619      	mov	r1, r3
  40d3f0:	6878      	ldr	r0, [r7, #4]
  40d3f2:	4b19      	ldr	r3, [pc, #100]	; (40d458 <usart_serial_init+0x150>)
  40d3f4:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  40d3f6:	6878      	ldr	r0, [r7, #4]
  40d3f8:	4b18      	ldr	r3, [pc, #96]	; (40d45c <usart_serial_init+0x154>)
  40d3fa:	4798      	blx	r3
		usart_enable_rx(p_usart);
  40d3fc:	6878      	ldr	r0, [r7, #4]
  40d3fe:	4b18      	ldr	r3, [pc, #96]	; (40d460 <usart_serial_init+0x158>)
  40d400:	4798      	blx	r3
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  40d402:	687b      	ldr	r3, [r7, #4]
  40d404:	4a18      	ldr	r2, [pc, #96]	; (40d468 <usart_serial_init+0x160>)
  40d406:	4293      	cmp	r3, r2
  40d408:	d111      	bne.n	40d42e <usart_serial_init+0x126>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM2);
		flexcom_set_opmode(FLEXCOM2, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART2);
  40d40a:	200f      	movs	r0, #15
  40d40c:	4b0c      	ldr	r3, [pc, #48]	; (40d440 <usart_serial_init+0x138>)
  40d40e:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  40d410:	4b09      	ldr	r3, [pc, #36]	; (40d438 <usart_serial_init+0x130>)
  40d412:	4798      	blx	r3
  40d414:	4602      	mov	r2, r0
  40d416:	f107 030c 	add.w	r3, r7, #12
  40d41a:	4619      	mov	r1, r3
  40d41c:	6878      	ldr	r0, [r7, #4]
  40d41e:	4b0e      	ldr	r3, [pc, #56]	; (40d458 <usart_serial_init+0x150>)
  40d420:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  40d422:	6878      	ldr	r0, [r7, #4]
  40d424:	4b0d      	ldr	r3, [pc, #52]	; (40d45c <usart_serial_init+0x154>)
  40d426:	4798      	blx	r3
		usart_enable_rx(p_usart);
  40d428:	6878      	ldr	r0, [r7, #4]
  40d42a:	4b0d      	ldr	r3, [pc, #52]	; (40d460 <usart_serial_init+0x158>)
  40d42c:	4798      	blx	r3
	}
# endif

#endif /* ifdef USART */

}
  40d42e:	bf00      	nop
  40d430:	3730      	adds	r7, #48	; 0x30
  40d432:	46bd      	mov	sp, r7
  40d434:	bd80      	pop	{r7, pc}
  40d436:	bf00      	nop
  40d438:	0040d2d9 	.word	0x0040d2d9
  40d43c:	400e0800 	.word	0x400e0800
  40d440:	0040d2ed 	.word	0x0040d2ed
  40d444:	00401b99 	.word	0x00401b99
  40d448:	400e0a00 	.word	0x400e0a00
  40d44c:	400e1a00 	.word	0x400e1a00
  40d450:	400e1c00 	.word	0x400e1c00
  40d454:	40024000 	.word	0x40024000
  40d458:	00401d35 	.word	0x00401d35
  40d45c:	00401db9 	.word	0x00401db9
  40d460:	00401df1 	.word	0x00401df1
  40d464:	40028000 	.word	0x40028000
  40d468:	4002c000 	.word	0x4002c000

0040d46c <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  40d46c:	b580      	push	{r7, lr}
  40d46e:	b082      	sub	sp, #8
  40d470:	af00      	add	r7, sp, #0
  40d472:	6078      	str	r0, [r7, #4]
  40d474:	460b      	mov	r3, r1
  40d476:	70fb      	strb	r3, [r7, #3]
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  40d478:	687b      	ldr	r3, [r7, #4]
  40d47a:	4a36      	ldr	r2, [pc, #216]	; (40d554 <usart_serial_putchar+0xe8>)
  40d47c:	4293      	cmp	r3, r2
  40d47e:	d10a      	bne.n	40d496 <usart_serial_putchar+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
  40d480:	bf00      	nop
  40d482:	78fb      	ldrb	r3, [r7, #3]
  40d484:	4619      	mov	r1, r3
  40d486:	6878      	ldr	r0, [r7, #4]
  40d488:	4b33      	ldr	r3, [pc, #204]	; (40d558 <usart_serial_putchar+0xec>)
  40d48a:	4798      	blx	r3
  40d48c:	4603      	mov	r3, r0
  40d48e:	2b00      	cmp	r3, #0
  40d490:	d1f7      	bne.n	40d482 <usart_serial_putchar+0x16>
		return 1;
  40d492:	2301      	movs	r3, #1
  40d494:	e05a      	b.n	40d54c <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40d496:	687b      	ldr	r3, [r7, #4]
  40d498:	4a30      	ldr	r2, [pc, #192]	; (40d55c <usart_serial_putchar+0xf0>)
  40d49a:	4293      	cmp	r3, r2
  40d49c:	d10a      	bne.n	40d4b4 <usart_serial_putchar+0x48>
		while (uart_write((Uart*)p_usart, c)!=0);
  40d49e:	bf00      	nop
  40d4a0:	78fb      	ldrb	r3, [r7, #3]
  40d4a2:	4619      	mov	r1, r3
  40d4a4:	6878      	ldr	r0, [r7, #4]
  40d4a6:	4b2c      	ldr	r3, [pc, #176]	; (40d558 <usart_serial_putchar+0xec>)
  40d4a8:	4798      	blx	r3
  40d4aa:	4603      	mov	r3, r0
  40d4ac:	2b00      	cmp	r3, #0
  40d4ae:	d1f7      	bne.n	40d4a0 <usart_serial_putchar+0x34>
		return 1;
  40d4b0:	2301      	movs	r3, #1
  40d4b2:	e04b      	b.n	40d54c <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  40d4b4:	687b      	ldr	r3, [r7, #4]
  40d4b6:	4a2a      	ldr	r2, [pc, #168]	; (40d560 <usart_serial_putchar+0xf4>)
  40d4b8:	4293      	cmp	r3, r2
  40d4ba:	d10a      	bne.n	40d4d2 <usart_serial_putchar+0x66>
		while (uart_write((Uart*)p_usart, c)!=0);
  40d4bc:	bf00      	nop
  40d4be:	78fb      	ldrb	r3, [r7, #3]
  40d4c0:	4619      	mov	r1, r3
  40d4c2:	6878      	ldr	r0, [r7, #4]
  40d4c4:	4b24      	ldr	r3, [pc, #144]	; (40d558 <usart_serial_putchar+0xec>)
  40d4c6:	4798      	blx	r3
  40d4c8:	4603      	mov	r3, r0
  40d4ca:	2b00      	cmp	r3, #0
  40d4cc:	d1f7      	bne.n	40d4be <usart_serial_putchar+0x52>
		return 1;
  40d4ce:	2301      	movs	r3, #1
  40d4d0:	e03c      	b.n	40d54c <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  40d4d2:	687b      	ldr	r3, [r7, #4]
  40d4d4:	4a23      	ldr	r2, [pc, #140]	; (40d564 <usart_serial_putchar+0xf8>)
  40d4d6:	4293      	cmp	r3, r2
  40d4d8:	d10a      	bne.n	40d4f0 <usart_serial_putchar+0x84>
		while (uart_write((Uart*)p_usart, c)!=0);
  40d4da:	bf00      	nop
  40d4dc:	78fb      	ldrb	r3, [r7, #3]
  40d4de:	4619      	mov	r1, r3
  40d4e0:	6878      	ldr	r0, [r7, #4]
  40d4e2:	4b1d      	ldr	r3, [pc, #116]	; (40d558 <usart_serial_putchar+0xec>)
  40d4e4:	4798      	blx	r3
  40d4e6:	4603      	mov	r3, r0
  40d4e8:	2b00      	cmp	r3, #0
  40d4ea:	d1f7      	bne.n	40d4dc <usart_serial_putchar+0x70>
		return 1;
  40d4ec:	2301      	movs	r3, #1
  40d4ee:	e02d      	b.n	40d54c <usart_serial_putchar+0xe0>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  40d4f0:	687b      	ldr	r3, [r7, #4]
  40d4f2:	4a1d      	ldr	r2, [pc, #116]	; (40d568 <usart_serial_putchar+0xfc>)
  40d4f4:	4293      	cmp	r3, r2
  40d4f6:	d10a      	bne.n	40d50e <usart_serial_putchar+0xa2>
		while (usart_write(p_usart, c)!=0);
  40d4f8:	bf00      	nop
  40d4fa:	78fb      	ldrb	r3, [r7, #3]
  40d4fc:	4619      	mov	r1, r3
  40d4fe:	6878      	ldr	r0, [r7, #4]
  40d500:	4b1a      	ldr	r3, [pc, #104]	; (40d56c <usart_serial_putchar+0x100>)
  40d502:	4798      	blx	r3
  40d504:	4603      	mov	r3, r0
  40d506:	2b00      	cmp	r3, #0
  40d508:	d1f7      	bne.n	40d4fa <usart_serial_putchar+0x8e>
		return 1;
  40d50a:	2301      	movs	r3, #1
  40d50c:	e01e      	b.n	40d54c <usart_serial_putchar+0xe0>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  40d50e:	687b      	ldr	r3, [r7, #4]
  40d510:	4a17      	ldr	r2, [pc, #92]	; (40d570 <usart_serial_putchar+0x104>)
  40d512:	4293      	cmp	r3, r2
  40d514:	d10a      	bne.n	40d52c <usart_serial_putchar+0xc0>
		while (usart_write(p_usart, c)!=0);
  40d516:	bf00      	nop
  40d518:	78fb      	ldrb	r3, [r7, #3]
  40d51a:	4619      	mov	r1, r3
  40d51c:	6878      	ldr	r0, [r7, #4]
  40d51e:	4b13      	ldr	r3, [pc, #76]	; (40d56c <usart_serial_putchar+0x100>)
  40d520:	4798      	blx	r3
  40d522:	4603      	mov	r3, r0
  40d524:	2b00      	cmp	r3, #0
  40d526:	d1f7      	bne.n	40d518 <usart_serial_putchar+0xac>
		return 1;
  40d528:	2301      	movs	r3, #1
  40d52a:	e00f      	b.n	40d54c <usart_serial_putchar+0xe0>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  40d52c:	687b      	ldr	r3, [r7, #4]
  40d52e:	4a11      	ldr	r2, [pc, #68]	; (40d574 <usart_serial_putchar+0x108>)
  40d530:	4293      	cmp	r3, r2
  40d532:	d10a      	bne.n	40d54a <usart_serial_putchar+0xde>
		while (usart_write(p_usart, c)!=0);
  40d534:	bf00      	nop
  40d536:	78fb      	ldrb	r3, [r7, #3]
  40d538:	4619      	mov	r1, r3
  40d53a:	6878      	ldr	r0, [r7, #4]
  40d53c:	4b0b      	ldr	r3, [pc, #44]	; (40d56c <usart_serial_putchar+0x100>)
  40d53e:	4798      	blx	r3
  40d540:	4603      	mov	r3, r0
  40d542:	2b00      	cmp	r3, #0
  40d544:	d1f7      	bne.n	40d536 <usart_serial_putchar+0xca>
		return 1;
  40d546:	2301      	movs	r3, #1
  40d548:	e000      	b.n	40d54c <usart_serial_putchar+0xe0>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  40d54a:	2300      	movs	r3, #0
}
  40d54c:	4618      	mov	r0, r3
  40d54e:	3708      	adds	r7, #8
  40d550:	46bd      	mov	sp, r7
  40d552:	bd80      	pop	{r7, pc}
  40d554:	400e0800 	.word	0x400e0800
  40d558:	00401bf1 	.word	0x00401bf1
  40d55c:	400e0a00 	.word	0x400e0a00
  40d560:	400e1a00 	.word	0x400e1a00
  40d564:	400e1c00 	.word	0x400e1c00
  40d568:	40024000 	.word	0x40024000
  40d56c:	00401e61 	.word	0x00401e61
  40d570:	40028000 	.word	0x40028000
  40d574:	4002c000 	.word	0x4002c000

0040d578 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  40d578:	b580      	push	{r7, lr}
  40d57a:	b084      	sub	sp, #16
  40d57c:	af00      	add	r7, sp, #0
  40d57e:	6078      	str	r0, [r7, #4]
  40d580:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
  40d582:	2300      	movs	r3, #0
  40d584:	60fb      	str	r3, [r7, #12]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  40d586:	687b      	ldr	r3, [r7, #4]
  40d588:	4a34      	ldr	r2, [pc, #208]	; (40d65c <usart_serial_getchar+0xe4>)
  40d58a:	4293      	cmp	r3, r2
  40d58c:	d107      	bne.n	40d59e <usart_serial_getchar+0x26>
		while (uart_read((Uart*)p_usart, data));
  40d58e:	bf00      	nop
  40d590:	6839      	ldr	r1, [r7, #0]
  40d592:	6878      	ldr	r0, [r7, #4]
  40d594:	4b32      	ldr	r3, [pc, #200]	; (40d660 <usart_serial_getchar+0xe8>)
  40d596:	4798      	blx	r3
  40d598:	4603      	mov	r3, r0
  40d59a:	2b00      	cmp	r3, #0
  40d59c:	d1f8      	bne.n	40d590 <usart_serial_getchar+0x18>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40d59e:	687b      	ldr	r3, [r7, #4]
  40d5a0:	4a30      	ldr	r2, [pc, #192]	; (40d664 <usart_serial_getchar+0xec>)
  40d5a2:	4293      	cmp	r3, r2
  40d5a4:	d107      	bne.n	40d5b6 <usart_serial_getchar+0x3e>
		while (uart_read((Uart*)p_usart, data));
  40d5a6:	bf00      	nop
  40d5a8:	6839      	ldr	r1, [r7, #0]
  40d5aa:	6878      	ldr	r0, [r7, #4]
  40d5ac:	4b2c      	ldr	r3, [pc, #176]	; (40d660 <usart_serial_getchar+0xe8>)
  40d5ae:	4798      	blx	r3
  40d5b0:	4603      	mov	r3, r0
  40d5b2:	2b00      	cmp	r3, #0
  40d5b4:	d1f8      	bne.n	40d5a8 <usart_serial_getchar+0x30>
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  40d5b6:	687b      	ldr	r3, [r7, #4]
  40d5b8:	4a2b      	ldr	r2, [pc, #172]	; (40d668 <usart_serial_getchar+0xf0>)
  40d5ba:	4293      	cmp	r3, r2
  40d5bc:	d107      	bne.n	40d5ce <usart_serial_getchar+0x56>
		while (uart_read((Uart*)p_usart, data));
  40d5be:	bf00      	nop
  40d5c0:	6839      	ldr	r1, [r7, #0]
  40d5c2:	6878      	ldr	r0, [r7, #4]
  40d5c4:	4b26      	ldr	r3, [pc, #152]	; (40d660 <usart_serial_getchar+0xe8>)
  40d5c6:	4798      	blx	r3
  40d5c8:	4603      	mov	r3, r0
  40d5ca:	2b00      	cmp	r3, #0
  40d5cc:	d1f8      	bne.n	40d5c0 <usart_serial_getchar+0x48>
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  40d5ce:	687b      	ldr	r3, [r7, #4]
  40d5d0:	4a26      	ldr	r2, [pc, #152]	; (40d66c <usart_serial_getchar+0xf4>)
  40d5d2:	4293      	cmp	r3, r2
  40d5d4:	d107      	bne.n	40d5e6 <usart_serial_getchar+0x6e>
		while (uart_read((Uart*)p_usart, data));
  40d5d6:	bf00      	nop
  40d5d8:	6839      	ldr	r1, [r7, #0]
  40d5da:	6878      	ldr	r0, [r7, #4]
  40d5dc:	4b20      	ldr	r3, [pc, #128]	; (40d660 <usart_serial_getchar+0xe8>)
  40d5de:	4798      	blx	r3
  40d5e0:	4603      	mov	r3, r0
  40d5e2:	2b00      	cmp	r3, #0
  40d5e4:	d1f8      	bne.n	40d5d8 <usart_serial_getchar+0x60>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  40d5e6:	687b      	ldr	r3, [r7, #4]
  40d5e8:	4a21      	ldr	r2, [pc, #132]	; (40d670 <usart_serial_getchar+0xf8>)
  40d5ea:	4293      	cmp	r3, r2
  40d5ec:	d10d      	bne.n	40d60a <usart_serial_getchar+0x92>
		while (usart_read(p_usart, &val));
  40d5ee:	bf00      	nop
  40d5f0:	f107 030c 	add.w	r3, r7, #12
  40d5f4:	4619      	mov	r1, r3
  40d5f6:	6878      	ldr	r0, [r7, #4]
  40d5f8:	4b1e      	ldr	r3, [pc, #120]	; (40d674 <usart_serial_getchar+0xfc>)
  40d5fa:	4798      	blx	r3
  40d5fc:	4603      	mov	r3, r0
  40d5fe:	2b00      	cmp	r3, #0
  40d600:	d1f6      	bne.n	40d5f0 <usart_serial_getchar+0x78>
		*data = (uint8_t)(val & 0xFF);
  40d602:	68fb      	ldr	r3, [r7, #12]
  40d604:	b2da      	uxtb	r2, r3
  40d606:	683b      	ldr	r3, [r7, #0]
  40d608:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  40d60a:	687b      	ldr	r3, [r7, #4]
  40d60c:	4a1a      	ldr	r2, [pc, #104]	; (40d678 <usart_serial_getchar+0x100>)
  40d60e:	4293      	cmp	r3, r2
  40d610:	d10d      	bne.n	40d62e <usart_serial_getchar+0xb6>
		while (usart_read(p_usart, &val));
  40d612:	bf00      	nop
  40d614:	f107 030c 	add.w	r3, r7, #12
  40d618:	4619      	mov	r1, r3
  40d61a:	6878      	ldr	r0, [r7, #4]
  40d61c:	4b15      	ldr	r3, [pc, #84]	; (40d674 <usart_serial_getchar+0xfc>)
  40d61e:	4798      	blx	r3
  40d620:	4603      	mov	r3, r0
  40d622:	2b00      	cmp	r3, #0
  40d624:	d1f6      	bne.n	40d614 <usart_serial_getchar+0x9c>
		*data = (uint8_t)(val & 0xFF);
  40d626:	68fb      	ldr	r3, [r7, #12]
  40d628:	b2da      	uxtb	r2, r3
  40d62a:	683b      	ldr	r3, [r7, #0]
  40d62c:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  40d62e:	687b      	ldr	r3, [r7, #4]
  40d630:	4a12      	ldr	r2, [pc, #72]	; (40d67c <usart_serial_getchar+0x104>)
  40d632:	4293      	cmp	r3, r2
  40d634:	d10d      	bne.n	40d652 <usart_serial_getchar+0xda>
		while (usart_read(p_usart, &val));
  40d636:	bf00      	nop
  40d638:	f107 030c 	add.w	r3, r7, #12
  40d63c:	4619      	mov	r1, r3
  40d63e:	6878      	ldr	r0, [r7, #4]
  40d640:	4b0c      	ldr	r3, [pc, #48]	; (40d674 <usart_serial_getchar+0xfc>)
  40d642:	4798      	blx	r3
  40d644:	4603      	mov	r3, r0
  40d646:	2b00      	cmp	r3, #0
  40d648:	d1f6      	bne.n	40d638 <usart_serial_getchar+0xc0>
		*data = (uint8_t)(val & 0xFF);
  40d64a:	68fb      	ldr	r3, [r7, #12]
  40d64c:	b2da      	uxtb	r2, r3
  40d64e:	683b      	ldr	r3, [r7, #0]
  40d650:	701a      	strb	r2, [r3, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  40d652:	bf00      	nop
  40d654:	3710      	adds	r7, #16
  40d656:	46bd      	mov	sp, r7
  40d658:	bd80      	pop	{r7, pc}
  40d65a:	bf00      	nop
  40d65c:	400e0800 	.word	0x400e0800
  40d660:	00401c21 	.word	0x00401c21
  40d664:	400e0a00 	.word	0x400e0a00
  40d668:	400e1a00 	.word	0x400e1a00
  40d66c:	400e1c00 	.word	0x400e1c00
  40d670:	40024000 	.word	0x40024000
  40d674:	00401e95 	.word	0x00401e95
  40d678:	40028000 	.word	0x40028000
  40d67c:	4002c000 	.word	0x4002c000

0040d680 <stdio_serial_init>:
 * \param usart       Base address of the USART instance.
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
  40d680:	b580      	push	{r7, lr}
  40d682:	b082      	sub	sp, #8
  40d684:	af00      	add	r7, sp, #0
  40d686:	6078      	str	r0, [r7, #4]
  40d688:	6039      	str	r1, [r7, #0]
	stdio_base = (void *)usart;
  40d68a:	4a0f      	ldr	r2, [pc, #60]	; (40d6c8 <stdio_serial_init+0x48>)
  40d68c:	687b      	ldr	r3, [r7, #4]
  40d68e:	6013      	str	r3, [r2, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  40d690:	4b0e      	ldr	r3, [pc, #56]	; (40d6cc <stdio_serial_init+0x4c>)
  40d692:	4a0f      	ldr	r2, [pc, #60]	; (40d6d0 <stdio_serial_init+0x50>)
  40d694:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  40d696:	4b0f      	ldr	r3, [pc, #60]	; (40d6d4 <stdio_serial_init+0x54>)
  40d698:	4a0f      	ldr	r2, [pc, #60]	; (40d6d8 <stdio_serial_init+0x58>)
  40d69a:	601a      	str	r2, [r3, #0]
# if (XMEGA || MEGA_RF)
	usart_serial_init((USART_t *)usart,opt);
# elif UC3
	usart_serial_init(usart,(usart_serial_options_t *)opt);
# elif SAM
	usart_serial_init((Usart *)usart,(usart_serial_options_t *)opt);
  40d69c:	6839      	ldr	r1, [r7, #0]
  40d69e:	6878      	ldr	r0, [r7, #4]
  40d6a0:	4b0e      	ldr	r3, [pc, #56]	; (40d6dc <stdio_serial_init+0x5c>)
  40d6a2:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  40d6a4:	4b0e      	ldr	r3, [pc, #56]	; (40d6e0 <stdio_serial_init+0x60>)
  40d6a6:	681b      	ldr	r3, [r3, #0]
  40d6a8:	689b      	ldr	r3, [r3, #8]
  40d6aa:	2100      	movs	r1, #0
  40d6ac:	4618      	mov	r0, r3
  40d6ae:	4b0d      	ldr	r3, [pc, #52]	; (40d6e4 <stdio_serial_init+0x64>)
  40d6b0:	4798      	blx	r3
	setbuf(stdin, NULL);
  40d6b2:	4b0b      	ldr	r3, [pc, #44]	; (40d6e0 <stdio_serial_init+0x60>)
  40d6b4:	681b      	ldr	r3, [r3, #0]
  40d6b6:	685b      	ldr	r3, [r3, #4]
  40d6b8:	2100      	movs	r1, #0
  40d6ba:	4618      	mov	r0, r3
  40d6bc:	4b09      	ldr	r3, [pc, #36]	; (40d6e4 <stdio_serial_init+0x64>)
  40d6be:	4798      	blx	r3
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
# endif
}
  40d6c0:	bf00      	nop
  40d6c2:	3708      	adds	r7, #8
  40d6c4:	46bd      	mov	sp, r7
  40d6c6:	bd80      	pop	{r7, pc}
  40d6c8:	20403914 	.word	0x20403914
  40d6cc:	20403910 	.word	0x20403910
  40d6d0:	0040d46d 	.word	0x0040d46d
  40d6d4:	2040390c 	.word	0x2040390c
  40d6d8:	0040d579 	.word	0x0040d579
  40d6dc:	0040d309 	.word	0x0040d309
  40d6e0:	20400568 	.word	0x20400568
  40d6e4:	0040daa1 	.word	0x0040daa1

0040d6e8 <configure_console>:

/**
 *  \brief Configure UART console.
 */
static void configure_console(void)
{
  40d6e8:	b590      	push	{r4, r7, lr}
  40d6ea:	b085      	sub	sp, #20
  40d6ec:	af00      	add	r7, sp, #0
	const usart_serial_options_t uart_serial_options = {
  40d6ee:	4b0c      	ldr	r3, [pc, #48]	; (40d720 <configure_console+0x38>)
  40d6f0:	463c      	mov	r4, r7
  40d6f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  40d6f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		.stopbits = CONF_UART_STOP_BITS,
#endif
	};

	/* Configure UART console. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
  40d6f8:	200e      	movs	r0, #14
  40d6fa:	4b0a      	ldr	r3, [pc, #40]	; (40d724 <configure_console+0x3c>)
  40d6fc:	4798      	blx	r3
	stdio_serial_init(CONF_UART, &uart_serial_options);
  40d6fe:	463b      	mov	r3, r7
  40d700:	4619      	mov	r1, r3
  40d702:	4809      	ldr	r0, [pc, #36]	; (40d728 <configure_console+0x40>)
  40d704:	4b09      	ldr	r3, [pc, #36]	; (40d72c <configure_console+0x44>)
  40d706:	4798      	blx	r3
#if defined(__GNUC__)
	setbuf(stdout, NULL);
  40d708:	4b09      	ldr	r3, [pc, #36]	; (40d730 <configure_console+0x48>)
  40d70a:	681b      	ldr	r3, [r3, #0]
  40d70c:	689b      	ldr	r3, [r3, #8]
  40d70e:	2100      	movs	r1, #0
  40d710:	4618      	mov	r0, r3
  40d712:	4b08      	ldr	r3, [pc, #32]	; (40d734 <configure_console+0x4c>)
  40d714:	4798      	blx	r3
#endif
}
  40d716:	bf00      	nop
  40d718:	3714      	adds	r7, #20
  40d71a:	46bd      	mov	sp, r7
  40d71c:	bd90      	pop	{r4, r7, pc}
  40d71e:	bf00      	nop
  40d720:	00417698 	.word	0x00417698
  40d724:	0040d2ed 	.word	0x0040d2ed
  40d728:	40028000 	.word	0x40028000
  40d72c:	0040d681 	.word	0x0040d681
  40d730:	20400568 	.word	0x20400568
  40d734:	0040daa1 	.word	0x0040daa1

0040d738 <main>:
/**
 * \brief Main program function. Configure the hardware, initialize lwIP
 * TCP/IP stack, and start HTTP service.
 */
int main(void)
{
  40d738:	b580      	push	{r7, lr}
  40d73a:	af00      	add	r7, sp, #0
	/* Initialize the SAM system. */
	sysclk_init();
  40d73c:	4b07      	ldr	r3, [pc, #28]	; (40d75c <main+0x24>)
  40d73e:	4798      	blx	r3
	board_init();
  40d740:	4b07      	ldr	r3, [pc, #28]	; (40d760 <main+0x28>)
  40d742:	4798      	blx	r3

	/* Configure debug UART */
	configure_console();
  40d744:	4b07      	ldr	r3, [pc, #28]	; (40d764 <main+0x2c>)
  40d746:	4798      	blx	r3

	/* Print example information. */
	puts(STRING_HEADER);
  40d748:	4807      	ldr	r0, [pc, #28]	; (40d768 <main+0x30>)
  40d74a:	4b08      	ldr	r3, [pc, #32]	; (40d76c <main+0x34>)
  40d74c:	4798      	blx	r3

	/* Bring up the ethernet interface & initialize timer0, channel0. */
	init_ethernet();
  40d74e:	4b08      	ldr	r3, [pc, #32]	; (40d770 <main+0x38>)
  40d750:	4798      	blx	r3

	/* Bring up the web server. */
	httpd_init();
  40d752:	4b08      	ldr	r3, [pc, #32]	; (40d774 <main+0x3c>)
  40d754:	4798      	blx	r3

	/* Program main loop. */
	while (1) {
		/* Check for input packet and process it. */
		ethernet_task();
  40d756:	4b08      	ldr	r3, [pc, #32]	; (40d778 <main+0x40>)
  40d758:	4798      	blx	r3
	}
  40d75a:	e7fc      	b.n	40d756 <main+0x1e>
  40d75c:	0040049d 	.word	0x0040049d
  40d760:	00400991 	.word	0x00400991
  40d764:	0040d6e9 	.word	0x0040d6e9
  40d768:	004176a8 	.word	0x004176a8
  40d76c:	0040da91 	.word	0x0040da91
  40d770:	0040cb41 	.word	0x0040cb41
  40d774:	0040d035 	.word	0x0040d035
  40d778:	0040cbcd 	.word	0x0040cbcd

0040d77c <__libc_init_array>:
  40d77c:	b570      	push	{r4, r5, r6, lr}
  40d77e:	4e0f      	ldr	r6, [pc, #60]	; (40d7bc <__libc_init_array+0x40>)
  40d780:	4d0f      	ldr	r5, [pc, #60]	; (40d7c0 <__libc_init_array+0x44>)
  40d782:	1b76      	subs	r6, r6, r5
  40d784:	10b6      	asrs	r6, r6, #2
  40d786:	bf18      	it	ne
  40d788:	2400      	movne	r4, #0
  40d78a:	d005      	beq.n	40d798 <__libc_init_array+0x1c>
  40d78c:	3401      	adds	r4, #1
  40d78e:	f855 3b04 	ldr.w	r3, [r5], #4
  40d792:	4798      	blx	r3
  40d794:	42a6      	cmp	r6, r4
  40d796:	d1f9      	bne.n	40d78c <__libc_init_array+0x10>
  40d798:	4e0a      	ldr	r6, [pc, #40]	; (40d7c4 <__libc_init_array+0x48>)
  40d79a:	4d0b      	ldr	r5, [pc, #44]	; (40d7c8 <__libc_init_array+0x4c>)
  40d79c:	1b76      	subs	r6, r6, r5
  40d79e:	f00a f885 	bl	4178ac <_init>
  40d7a2:	10b6      	asrs	r6, r6, #2
  40d7a4:	bf18      	it	ne
  40d7a6:	2400      	movne	r4, #0
  40d7a8:	d006      	beq.n	40d7b8 <__libc_init_array+0x3c>
  40d7aa:	3401      	adds	r4, #1
  40d7ac:	f855 3b04 	ldr.w	r3, [r5], #4
  40d7b0:	4798      	blx	r3
  40d7b2:	42a6      	cmp	r6, r4
  40d7b4:	d1f9      	bne.n	40d7aa <__libc_init_array+0x2e>
  40d7b6:	bd70      	pop	{r4, r5, r6, pc}
  40d7b8:	bd70      	pop	{r4, r5, r6, pc}
  40d7ba:	bf00      	nop
  40d7bc:	004178b8 	.word	0x004178b8
  40d7c0:	004178b8 	.word	0x004178b8
  40d7c4:	004178c0 	.word	0x004178c0
  40d7c8:	004178b8 	.word	0x004178b8

0040d7cc <iprintf>:
  40d7cc:	b40f      	push	{r0, r1, r2, r3}
  40d7ce:	b500      	push	{lr}
  40d7d0:	4907      	ldr	r1, [pc, #28]	; (40d7f0 <iprintf+0x24>)
  40d7d2:	b083      	sub	sp, #12
  40d7d4:	ab04      	add	r3, sp, #16
  40d7d6:	6808      	ldr	r0, [r1, #0]
  40d7d8:	f853 2b04 	ldr.w	r2, [r3], #4
  40d7dc:	6881      	ldr	r1, [r0, #8]
  40d7de:	9301      	str	r3, [sp, #4]
  40d7e0:	f002 fb02 	bl	40fde8 <_vfiprintf_r>
  40d7e4:	b003      	add	sp, #12
  40d7e6:	f85d eb04 	ldr.w	lr, [sp], #4
  40d7ea:	b004      	add	sp, #16
  40d7ec:	4770      	bx	lr
  40d7ee:	bf00      	nop
  40d7f0:	20400568 	.word	0x20400568

0040d7f4 <memcmp>:
  40d7f4:	2a03      	cmp	r2, #3
  40d7f6:	b470      	push	{r4, r5, r6}
  40d7f8:	d926      	bls.n	40d848 <memcmp+0x54>
  40d7fa:	ea40 0301 	orr.w	r3, r0, r1
  40d7fe:	079b      	lsls	r3, r3, #30
  40d800:	d011      	beq.n	40d826 <memcmp+0x32>
  40d802:	7804      	ldrb	r4, [r0, #0]
  40d804:	780d      	ldrb	r5, [r1, #0]
  40d806:	42ac      	cmp	r4, r5
  40d808:	d122      	bne.n	40d850 <memcmp+0x5c>
  40d80a:	4402      	add	r2, r0
  40d80c:	1c43      	adds	r3, r0, #1
  40d80e:	e005      	b.n	40d81c <memcmp+0x28>
  40d810:	f813 4b01 	ldrb.w	r4, [r3], #1
  40d814:	f811 5f01 	ldrb.w	r5, [r1, #1]!
  40d818:	42ac      	cmp	r4, r5
  40d81a:	d119      	bne.n	40d850 <memcmp+0x5c>
  40d81c:	4293      	cmp	r3, r2
  40d81e:	d1f7      	bne.n	40d810 <memcmp+0x1c>
  40d820:	2000      	movs	r0, #0
  40d822:	bc70      	pop	{r4, r5, r6}
  40d824:	4770      	bx	lr
  40d826:	460c      	mov	r4, r1
  40d828:	4603      	mov	r3, r0
  40d82a:	681e      	ldr	r6, [r3, #0]
  40d82c:	6825      	ldr	r5, [r4, #0]
  40d82e:	42ae      	cmp	r6, r5
  40d830:	4618      	mov	r0, r3
  40d832:	4621      	mov	r1, r4
  40d834:	f103 0304 	add.w	r3, r3, #4
  40d838:	f104 0404 	add.w	r4, r4, #4
  40d83c:	d1e1      	bne.n	40d802 <memcmp+0xe>
  40d83e:	3a04      	subs	r2, #4
  40d840:	2a03      	cmp	r2, #3
  40d842:	4618      	mov	r0, r3
  40d844:	4621      	mov	r1, r4
  40d846:	d8f0      	bhi.n	40d82a <memcmp+0x36>
  40d848:	2a00      	cmp	r2, #0
  40d84a:	d1da      	bne.n	40d802 <memcmp+0xe>
  40d84c:	4610      	mov	r0, r2
  40d84e:	e7e8      	b.n	40d822 <memcmp+0x2e>
  40d850:	1b60      	subs	r0, r4, r5
  40d852:	bc70      	pop	{r4, r5, r6}
  40d854:	4770      	bx	lr
  40d856:	bf00      	nop

0040d858 <memcpy>:
  40d858:	4684      	mov	ip, r0
  40d85a:	ea41 0300 	orr.w	r3, r1, r0
  40d85e:	f013 0303 	ands.w	r3, r3, #3
  40d862:	d16d      	bne.n	40d940 <memcpy+0xe8>
  40d864:	3a40      	subs	r2, #64	; 0x40
  40d866:	d341      	bcc.n	40d8ec <memcpy+0x94>
  40d868:	f851 3b04 	ldr.w	r3, [r1], #4
  40d86c:	f840 3b04 	str.w	r3, [r0], #4
  40d870:	f851 3b04 	ldr.w	r3, [r1], #4
  40d874:	f840 3b04 	str.w	r3, [r0], #4
  40d878:	f851 3b04 	ldr.w	r3, [r1], #4
  40d87c:	f840 3b04 	str.w	r3, [r0], #4
  40d880:	f851 3b04 	ldr.w	r3, [r1], #4
  40d884:	f840 3b04 	str.w	r3, [r0], #4
  40d888:	f851 3b04 	ldr.w	r3, [r1], #4
  40d88c:	f840 3b04 	str.w	r3, [r0], #4
  40d890:	f851 3b04 	ldr.w	r3, [r1], #4
  40d894:	f840 3b04 	str.w	r3, [r0], #4
  40d898:	f851 3b04 	ldr.w	r3, [r1], #4
  40d89c:	f840 3b04 	str.w	r3, [r0], #4
  40d8a0:	f851 3b04 	ldr.w	r3, [r1], #4
  40d8a4:	f840 3b04 	str.w	r3, [r0], #4
  40d8a8:	f851 3b04 	ldr.w	r3, [r1], #4
  40d8ac:	f840 3b04 	str.w	r3, [r0], #4
  40d8b0:	f851 3b04 	ldr.w	r3, [r1], #4
  40d8b4:	f840 3b04 	str.w	r3, [r0], #4
  40d8b8:	f851 3b04 	ldr.w	r3, [r1], #4
  40d8bc:	f840 3b04 	str.w	r3, [r0], #4
  40d8c0:	f851 3b04 	ldr.w	r3, [r1], #4
  40d8c4:	f840 3b04 	str.w	r3, [r0], #4
  40d8c8:	f851 3b04 	ldr.w	r3, [r1], #4
  40d8cc:	f840 3b04 	str.w	r3, [r0], #4
  40d8d0:	f851 3b04 	ldr.w	r3, [r1], #4
  40d8d4:	f840 3b04 	str.w	r3, [r0], #4
  40d8d8:	f851 3b04 	ldr.w	r3, [r1], #4
  40d8dc:	f840 3b04 	str.w	r3, [r0], #4
  40d8e0:	f851 3b04 	ldr.w	r3, [r1], #4
  40d8e4:	f840 3b04 	str.w	r3, [r0], #4
  40d8e8:	3a40      	subs	r2, #64	; 0x40
  40d8ea:	d2bd      	bcs.n	40d868 <memcpy+0x10>
  40d8ec:	3230      	adds	r2, #48	; 0x30
  40d8ee:	d311      	bcc.n	40d914 <memcpy+0xbc>
  40d8f0:	f851 3b04 	ldr.w	r3, [r1], #4
  40d8f4:	f840 3b04 	str.w	r3, [r0], #4
  40d8f8:	f851 3b04 	ldr.w	r3, [r1], #4
  40d8fc:	f840 3b04 	str.w	r3, [r0], #4
  40d900:	f851 3b04 	ldr.w	r3, [r1], #4
  40d904:	f840 3b04 	str.w	r3, [r0], #4
  40d908:	f851 3b04 	ldr.w	r3, [r1], #4
  40d90c:	f840 3b04 	str.w	r3, [r0], #4
  40d910:	3a10      	subs	r2, #16
  40d912:	d2ed      	bcs.n	40d8f0 <memcpy+0x98>
  40d914:	320c      	adds	r2, #12
  40d916:	d305      	bcc.n	40d924 <memcpy+0xcc>
  40d918:	f851 3b04 	ldr.w	r3, [r1], #4
  40d91c:	f840 3b04 	str.w	r3, [r0], #4
  40d920:	3a04      	subs	r2, #4
  40d922:	d2f9      	bcs.n	40d918 <memcpy+0xc0>
  40d924:	3204      	adds	r2, #4
  40d926:	d008      	beq.n	40d93a <memcpy+0xe2>
  40d928:	07d2      	lsls	r2, r2, #31
  40d92a:	bf1c      	itt	ne
  40d92c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40d930:	f800 3b01 	strbne.w	r3, [r0], #1
  40d934:	d301      	bcc.n	40d93a <memcpy+0xe2>
  40d936:	880b      	ldrh	r3, [r1, #0]
  40d938:	8003      	strh	r3, [r0, #0]
  40d93a:	4660      	mov	r0, ip
  40d93c:	4770      	bx	lr
  40d93e:	bf00      	nop
  40d940:	2a08      	cmp	r2, #8
  40d942:	d313      	bcc.n	40d96c <memcpy+0x114>
  40d944:	078b      	lsls	r3, r1, #30
  40d946:	d08d      	beq.n	40d864 <memcpy+0xc>
  40d948:	f010 0303 	ands.w	r3, r0, #3
  40d94c:	d08a      	beq.n	40d864 <memcpy+0xc>
  40d94e:	f1c3 0304 	rsb	r3, r3, #4
  40d952:	1ad2      	subs	r2, r2, r3
  40d954:	07db      	lsls	r3, r3, #31
  40d956:	bf1c      	itt	ne
  40d958:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40d95c:	f800 3b01 	strbne.w	r3, [r0], #1
  40d960:	d380      	bcc.n	40d864 <memcpy+0xc>
  40d962:	f831 3b02 	ldrh.w	r3, [r1], #2
  40d966:	f820 3b02 	strh.w	r3, [r0], #2
  40d96a:	e77b      	b.n	40d864 <memcpy+0xc>
  40d96c:	3a04      	subs	r2, #4
  40d96e:	d3d9      	bcc.n	40d924 <memcpy+0xcc>
  40d970:	3a01      	subs	r2, #1
  40d972:	f811 3b01 	ldrb.w	r3, [r1], #1
  40d976:	f800 3b01 	strb.w	r3, [r0], #1
  40d97a:	d2f9      	bcs.n	40d970 <memcpy+0x118>
  40d97c:	780b      	ldrb	r3, [r1, #0]
  40d97e:	7003      	strb	r3, [r0, #0]
  40d980:	784b      	ldrb	r3, [r1, #1]
  40d982:	7043      	strb	r3, [r0, #1]
  40d984:	788b      	ldrb	r3, [r1, #2]
  40d986:	7083      	strb	r3, [r0, #2]
  40d988:	4660      	mov	r0, ip
  40d98a:	4770      	bx	lr

0040d98c <memset>:
  40d98c:	b470      	push	{r4, r5, r6}
  40d98e:	0784      	lsls	r4, r0, #30
  40d990:	d046      	beq.n	40da20 <memset+0x94>
  40d992:	1e54      	subs	r4, r2, #1
  40d994:	2a00      	cmp	r2, #0
  40d996:	d041      	beq.n	40da1c <memset+0x90>
  40d998:	b2cd      	uxtb	r5, r1
  40d99a:	4603      	mov	r3, r0
  40d99c:	e002      	b.n	40d9a4 <memset+0x18>
  40d99e:	1e62      	subs	r2, r4, #1
  40d9a0:	b3e4      	cbz	r4, 40da1c <memset+0x90>
  40d9a2:	4614      	mov	r4, r2
  40d9a4:	f803 5b01 	strb.w	r5, [r3], #1
  40d9a8:	079a      	lsls	r2, r3, #30
  40d9aa:	d1f8      	bne.n	40d99e <memset+0x12>
  40d9ac:	2c03      	cmp	r4, #3
  40d9ae:	d92e      	bls.n	40da0e <memset+0x82>
  40d9b0:	b2cd      	uxtb	r5, r1
  40d9b2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40d9b6:	2c0f      	cmp	r4, #15
  40d9b8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  40d9bc:	d919      	bls.n	40d9f2 <memset+0x66>
  40d9be:	f103 0210 	add.w	r2, r3, #16
  40d9c2:	4626      	mov	r6, r4
  40d9c4:	3e10      	subs	r6, #16
  40d9c6:	2e0f      	cmp	r6, #15
  40d9c8:	f842 5c10 	str.w	r5, [r2, #-16]
  40d9cc:	f842 5c0c 	str.w	r5, [r2, #-12]
  40d9d0:	f842 5c08 	str.w	r5, [r2, #-8]
  40d9d4:	f842 5c04 	str.w	r5, [r2, #-4]
  40d9d8:	f102 0210 	add.w	r2, r2, #16
  40d9dc:	d8f2      	bhi.n	40d9c4 <memset+0x38>
  40d9de:	f1a4 0210 	sub.w	r2, r4, #16
  40d9e2:	f022 020f 	bic.w	r2, r2, #15
  40d9e6:	f004 040f 	and.w	r4, r4, #15
  40d9ea:	3210      	adds	r2, #16
  40d9ec:	2c03      	cmp	r4, #3
  40d9ee:	4413      	add	r3, r2
  40d9f0:	d90d      	bls.n	40da0e <memset+0x82>
  40d9f2:	461e      	mov	r6, r3
  40d9f4:	4622      	mov	r2, r4
  40d9f6:	3a04      	subs	r2, #4
  40d9f8:	2a03      	cmp	r2, #3
  40d9fa:	f846 5b04 	str.w	r5, [r6], #4
  40d9fe:	d8fa      	bhi.n	40d9f6 <memset+0x6a>
  40da00:	1f22      	subs	r2, r4, #4
  40da02:	f022 0203 	bic.w	r2, r2, #3
  40da06:	3204      	adds	r2, #4
  40da08:	4413      	add	r3, r2
  40da0a:	f004 0403 	and.w	r4, r4, #3
  40da0e:	b12c      	cbz	r4, 40da1c <memset+0x90>
  40da10:	b2c9      	uxtb	r1, r1
  40da12:	441c      	add	r4, r3
  40da14:	f803 1b01 	strb.w	r1, [r3], #1
  40da18:	42a3      	cmp	r3, r4
  40da1a:	d1fb      	bne.n	40da14 <memset+0x88>
  40da1c:	bc70      	pop	{r4, r5, r6}
  40da1e:	4770      	bx	lr
  40da20:	4614      	mov	r4, r2
  40da22:	4603      	mov	r3, r0
  40da24:	e7c2      	b.n	40d9ac <memset+0x20>
  40da26:	bf00      	nop

0040da28 <_puts_r>:
  40da28:	b5f0      	push	{r4, r5, r6, r7, lr}
  40da2a:	4605      	mov	r5, r0
  40da2c:	b089      	sub	sp, #36	; 0x24
  40da2e:	4608      	mov	r0, r1
  40da30:	460c      	mov	r4, r1
  40da32:	f000 fb25 	bl	40e080 <strlen>
  40da36:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40da38:	4f14      	ldr	r7, [pc, #80]	; (40da8c <_puts_r+0x64>)
  40da3a:	9404      	str	r4, [sp, #16]
  40da3c:	2601      	movs	r6, #1
  40da3e:	1c44      	adds	r4, r0, #1
  40da40:	a904      	add	r1, sp, #16
  40da42:	2202      	movs	r2, #2
  40da44:	9403      	str	r4, [sp, #12]
  40da46:	9005      	str	r0, [sp, #20]
  40da48:	68ac      	ldr	r4, [r5, #8]
  40da4a:	9706      	str	r7, [sp, #24]
  40da4c:	9607      	str	r6, [sp, #28]
  40da4e:	9101      	str	r1, [sp, #4]
  40da50:	9202      	str	r2, [sp, #8]
  40da52:	b1b3      	cbz	r3, 40da82 <_puts_r+0x5a>
  40da54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40da58:	049a      	lsls	r2, r3, #18
  40da5a:	d406      	bmi.n	40da6a <_puts_r+0x42>
  40da5c:	6e62      	ldr	r2, [r4, #100]	; 0x64
  40da5e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40da62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  40da66:	81a3      	strh	r3, [r4, #12]
  40da68:	6662      	str	r2, [r4, #100]	; 0x64
  40da6a:	4621      	mov	r1, r4
  40da6c:	4628      	mov	r0, r5
  40da6e:	aa01      	add	r2, sp, #4
  40da70:	f004 fc0c 	bl	41228c <__sfvwrite_r>
  40da74:	2800      	cmp	r0, #0
  40da76:	bf14      	ite	ne
  40da78:	f04f 30ff 	movne.w	r0, #4294967295
  40da7c:	200a      	moveq	r0, #10
  40da7e:	b009      	add	sp, #36	; 0x24
  40da80:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40da82:	4628      	mov	r0, r5
  40da84:	f004 fa50 	bl	411f28 <__sinit>
  40da88:	e7e4      	b.n	40da54 <_puts_r+0x2c>
  40da8a:	bf00      	nop
  40da8c:	00417708 	.word	0x00417708

0040da90 <puts>:
  40da90:	4b02      	ldr	r3, [pc, #8]	; (40da9c <puts+0xc>)
  40da92:	4601      	mov	r1, r0
  40da94:	6818      	ldr	r0, [r3, #0]
  40da96:	f7ff bfc7 	b.w	40da28 <_puts_r>
  40da9a:	bf00      	nop
  40da9c:	20400568 	.word	0x20400568

0040daa0 <setbuf>:
  40daa0:	2900      	cmp	r1, #0
  40daa2:	bf0c      	ite	eq
  40daa4:	2202      	moveq	r2, #2
  40daa6:	2200      	movne	r2, #0
  40daa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40daac:	f000 b800 	b.w	40dab0 <setvbuf>

0040dab0 <setvbuf>:
  40dab0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40dab4:	4c51      	ldr	r4, [pc, #324]	; (40dbfc <setvbuf+0x14c>)
  40dab6:	6825      	ldr	r5, [r4, #0]
  40dab8:	b083      	sub	sp, #12
  40daba:	4604      	mov	r4, r0
  40dabc:	460f      	mov	r7, r1
  40dabe:	4690      	mov	r8, r2
  40dac0:	461e      	mov	r6, r3
  40dac2:	b115      	cbz	r5, 40daca <setvbuf+0x1a>
  40dac4:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40dac6:	2b00      	cmp	r3, #0
  40dac8:	d079      	beq.n	40dbbe <setvbuf+0x10e>
  40daca:	f1b8 0f02 	cmp.w	r8, #2
  40dace:	d004      	beq.n	40dada <setvbuf+0x2a>
  40dad0:	f1b8 0f01 	cmp.w	r8, #1
  40dad4:	d87f      	bhi.n	40dbd6 <setvbuf+0x126>
  40dad6:	2e00      	cmp	r6, #0
  40dad8:	db7d      	blt.n	40dbd6 <setvbuf+0x126>
  40dada:	4621      	mov	r1, r4
  40dadc:	4628      	mov	r0, r5
  40dade:	f004 f98f 	bl	411e00 <_fflush_r>
  40dae2:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40dae4:	b141      	cbz	r1, 40daf8 <setvbuf+0x48>
  40dae6:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40daea:	4299      	cmp	r1, r3
  40daec:	d002      	beq.n	40daf4 <setvbuf+0x44>
  40daee:	4628      	mov	r0, r5
  40daf0:	f004 fae4 	bl	4120bc <_free_r>
  40daf4:	2300      	movs	r3, #0
  40daf6:	6323      	str	r3, [r4, #48]	; 0x30
  40daf8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40dafc:	2200      	movs	r2, #0
  40dafe:	61a2      	str	r2, [r4, #24]
  40db00:	6062      	str	r2, [r4, #4]
  40db02:	061a      	lsls	r2, r3, #24
  40db04:	d454      	bmi.n	40dbb0 <setvbuf+0x100>
  40db06:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  40db0a:	f023 0303 	bic.w	r3, r3, #3
  40db0e:	f1b8 0f02 	cmp.w	r8, #2
  40db12:	81a3      	strh	r3, [r4, #12]
  40db14:	d039      	beq.n	40db8a <setvbuf+0xda>
  40db16:	ab01      	add	r3, sp, #4
  40db18:	466a      	mov	r2, sp
  40db1a:	4621      	mov	r1, r4
  40db1c:	4628      	mov	r0, r5
  40db1e:	f004 fd6f 	bl	412600 <__swhatbuf_r>
  40db22:	89a3      	ldrh	r3, [r4, #12]
  40db24:	4318      	orrs	r0, r3
  40db26:	81a0      	strh	r0, [r4, #12]
  40db28:	b326      	cbz	r6, 40db74 <setvbuf+0xc4>
  40db2a:	b327      	cbz	r7, 40db76 <setvbuf+0xc6>
  40db2c:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40db2e:	2b00      	cmp	r3, #0
  40db30:	d04d      	beq.n	40dbce <setvbuf+0x11e>
  40db32:	9b00      	ldr	r3, [sp, #0]
  40db34:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
  40db38:	6027      	str	r7, [r4, #0]
  40db3a:	429e      	cmp	r6, r3
  40db3c:	bf1c      	itt	ne
  40db3e:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
  40db42:	81a0      	strhne	r0, [r4, #12]
  40db44:	f1b8 0f01 	cmp.w	r8, #1
  40db48:	bf08      	it	eq
  40db4a:	f040 0001 	orreq.w	r0, r0, #1
  40db4e:	b283      	uxth	r3, r0
  40db50:	bf08      	it	eq
  40db52:	81a0      	strheq	r0, [r4, #12]
  40db54:	f003 0008 	and.w	r0, r3, #8
  40db58:	b280      	uxth	r0, r0
  40db5a:	6127      	str	r7, [r4, #16]
  40db5c:	6166      	str	r6, [r4, #20]
  40db5e:	b318      	cbz	r0, 40dba8 <setvbuf+0xf8>
  40db60:	f013 0001 	ands.w	r0, r3, #1
  40db64:	d02f      	beq.n	40dbc6 <setvbuf+0x116>
  40db66:	2000      	movs	r0, #0
  40db68:	4276      	negs	r6, r6
  40db6a:	61a6      	str	r6, [r4, #24]
  40db6c:	60a0      	str	r0, [r4, #8]
  40db6e:	b003      	add	sp, #12
  40db70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40db74:	9e00      	ldr	r6, [sp, #0]
  40db76:	4630      	mov	r0, r6
  40db78:	f004 fdb6 	bl	4126e8 <malloc>
  40db7c:	4607      	mov	r7, r0
  40db7e:	b368      	cbz	r0, 40dbdc <setvbuf+0x12c>
  40db80:	89a3      	ldrh	r3, [r4, #12]
  40db82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40db86:	81a3      	strh	r3, [r4, #12]
  40db88:	e7d0      	b.n	40db2c <setvbuf+0x7c>
  40db8a:	2000      	movs	r0, #0
  40db8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40db90:	f043 0302 	orr.w	r3, r3, #2
  40db94:	2500      	movs	r5, #0
  40db96:	2101      	movs	r1, #1
  40db98:	81a3      	strh	r3, [r4, #12]
  40db9a:	60a5      	str	r5, [r4, #8]
  40db9c:	6022      	str	r2, [r4, #0]
  40db9e:	6122      	str	r2, [r4, #16]
  40dba0:	6161      	str	r1, [r4, #20]
  40dba2:	b003      	add	sp, #12
  40dba4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40dba8:	60a0      	str	r0, [r4, #8]
  40dbaa:	b003      	add	sp, #12
  40dbac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40dbb0:	6921      	ldr	r1, [r4, #16]
  40dbb2:	4628      	mov	r0, r5
  40dbb4:	f004 fa82 	bl	4120bc <_free_r>
  40dbb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40dbbc:	e7a3      	b.n	40db06 <setvbuf+0x56>
  40dbbe:	4628      	mov	r0, r5
  40dbc0:	f004 f9b2 	bl	411f28 <__sinit>
  40dbc4:	e781      	b.n	40daca <setvbuf+0x1a>
  40dbc6:	60a6      	str	r6, [r4, #8]
  40dbc8:	b003      	add	sp, #12
  40dbca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40dbce:	4628      	mov	r0, r5
  40dbd0:	f004 f9aa 	bl	411f28 <__sinit>
  40dbd4:	e7ad      	b.n	40db32 <setvbuf+0x82>
  40dbd6:	f04f 30ff 	mov.w	r0, #4294967295
  40dbda:	e7e2      	b.n	40dba2 <setvbuf+0xf2>
  40dbdc:	f8dd 9000 	ldr.w	r9, [sp]
  40dbe0:	45b1      	cmp	r9, r6
  40dbe2:	d006      	beq.n	40dbf2 <setvbuf+0x142>
  40dbe4:	4648      	mov	r0, r9
  40dbe6:	f004 fd7f 	bl	4126e8 <malloc>
  40dbea:	4607      	mov	r7, r0
  40dbec:	b108      	cbz	r0, 40dbf2 <setvbuf+0x142>
  40dbee:	464e      	mov	r6, r9
  40dbf0:	e7c6      	b.n	40db80 <setvbuf+0xd0>
  40dbf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40dbf6:	f04f 30ff 	mov.w	r0, #4294967295
  40dbfa:	e7c7      	b.n	40db8c <setvbuf+0xdc>
  40dbfc:	20400568 	.word	0x20400568

0040dc00 <snprintf>:
  40dc00:	b40c      	push	{r2, r3}
  40dc02:	b5f0      	push	{r4, r5, r6, r7, lr}
  40dc04:	4b24      	ldr	r3, [pc, #144]	; (40dc98 <snprintf+0x98>)
  40dc06:	2900      	cmp	r1, #0
  40dc08:	b09d      	sub	sp, #116	; 0x74
  40dc0a:	681d      	ldr	r5, [r3, #0]
  40dc0c:	db3e      	blt.n	40dc8c <snprintf+0x8c>
  40dc0e:	f44f 7302 	mov.w	r3, #520	; 0x208
  40dc12:	460c      	mov	r4, r1
  40dc14:	9002      	str	r0, [sp, #8]
  40dc16:	9006      	str	r0, [sp, #24]
  40dc18:	f8ad 3014 	strh.w	r3, [sp, #20]
  40dc1c:	ae23      	add	r6, sp, #140	; 0x8c
  40dc1e:	d017      	beq.n	40dc50 <snprintf+0x50>
  40dc20:	1e4c      	subs	r4, r1, #1
  40dc22:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40dc24:	9404      	str	r4, [sp, #16]
  40dc26:	4633      	mov	r3, r6
  40dc28:	f64f 77ff 	movw	r7, #65535	; 0xffff
  40dc2c:	a902      	add	r1, sp, #8
  40dc2e:	4628      	mov	r0, r5
  40dc30:	9407      	str	r4, [sp, #28]
  40dc32:	9601      	str	r6, [sp, #4]
  40dc34:	f8ad 7016 	strh.w	r7, [sp, #22]
  40dc38:	f000 fd4c 	bl	40e6d4 <_svfprintf_r>
  40dc3c:	1c42      	adds	r2, r0, #1
  40dc3e:	db1b      	blt.n	40dc78 <snprintf+0x78>
  40dc40:	9b02      	ldr	r3, [sp, #8]
  40dc42:	2200      	movs	r2, #0
  40dc44:	701a      	strb	r2, [r3, #0]
  40dc46:	b01d      	add	sp, #116	; 0x74
  40dc48:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  40dc4c:	b002      	add	sp, #8
  40dc4e:	4770      	bx	lr
  40dc50:	4633      	mov	r3, r6
  40dc52:	f64f 77ff 	movw	r7, #65535	; 0xffff
  40dc56:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40dc58:	9404      	str	r4, [sp, #16]
  40dc5a:	a902      	add	r1, sp, #8
  40dc5c:	4628      	mov	r0, r5
  40dc5e:	9407      	str	r4, [sp, #28]
  40dc60:	9601      	str	r6, [sp, #4]
  40dc62:	f8ad 7016 	strh.w	r7, [sp, #22]
  40dc66:	f000 fd35 	bl	40e6d4 <_svfprintf_r>
  40dc6a:	1c43      	adds	r3, r0, #1
  40dc6c:	db07      	blt.n	40dc7e <snprintf+0x7e>
  40dc6e:	b01d      	add	sp, #116	; 0x74
  40dc70:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  40dc74:	b002      	add	sp, #8
  40dc76:	4770      	bx	lr
  40dc78:	238b      	movs	r3, #139	; 0x8b
  40dc7a:	602b      	str	r3, [r5, #0]
  40dc7c:	e7e0      	b.n	40dc40 <snprintf+0x40>
  40dc7e:	238b      	movs	r3, #139	; 0x8b
  40dc80:	602b      	str	r3, [r5, #0]
  40dc82:	b01d      	add	sp, #116	; 0x74
  40dc84:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  40dc88:	b002      	add	sp, #8
  40dc8a:	4770      	bx	lr
  40dc8c:	238b      	movs	r3, #139	; 0x8b
  40dc8e:	602b      	str	r3, [r5, #0]
  40dc90:	f04f 30ff 	mov.w	r0, #4294967295
  40dc94:	e7eb      	b.n	40dc6e <snprintf+0x6e>
  40dc96:	bf00      	nop
  40dc98:	20400568 	.word	0x20400568

0040dc9c <strcat>:
  40dc9c:	0783      	lsls	r3, r0, #30
  40dc9e:	b510      	push	{r4, lr}
  40dca0:	4604      	mov	r4, r0
  40dca2:	d110      	bne.n	40dcc6 <strcat+0x2a>
  40dca4:	6802      	ldr	r2, [r0, #0]
  40dca6:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
  40dcaa:	ea23 0302 	bic.w	r3, r3, r2
  40dcae:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  40dcb2:	d108      	bne.n	40dcc6 <strcat+0x2a>
  40dcb4:	f850 2f04 	ldr.w	r2, [r0, #4]!
  40dcb8:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
  40dcbc:	ea23 0302 	bic.w	r3, r3, r2
  40dcc0:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  40dcc4:	d0f6      	beq.n	40dcb4 <strcat+0x18>
  40dcc6:	7803      	ldrb	r3, [r0, #0]
  40dcc8:	b11b      	cbz	r3, 40dcd2 <strcat+0x36>
  40dcca:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  40dcce:	2b00      	cmp	r3, #0
  40dcd0:	d1fb      	bne.n	40dcca <strcat+0x2e>
  40dcd2:	f000 f973 	bl	40dfbc <strcpy>
  40dcd6:	4620      	mov	r0, r4
  40dcd8:	bd10      	pop	{r4, pc}
  40dcda:	bf00      	nop
  40dcdc:	0000      	movs	r0, r0
  40dcde:	0000      	movs	r0, r0
  40dce0:	eba2 0003 	sub.w	r0, r2, r3
  40dce4:	4770      	bx	lr
  40dce6:	bf00      	nop

0040dce8 <strcmp>:
  40dce8:	7802      	ldrb	r2, [r0, #0]
  40dcea:	780b      	ldrb	r3, [r1, #0]
  40dcec:	2a01      	cmp	r2, #1
  40dcee:	bf28      	it	cs
  40dcf0:	429a      	cmpcs	r2, r3
  40dcf2:	d1f5      	bne.n	40dce0 <strcat+0x44>
  40dcf4:	e96d 4504 	strd	r4, r5, [sp, #-16]!
  40dcf8:	ea40 0401 	orr.w	r4, r0, r1
  40dcfc:	e9cd 6702 	strd	r6, r7, [sp, #8]
  40dd00:	f06f 0c00 	mvn.w	ip, #0
  40dd04:	ea4f 7244 	mov.w	r2, r4, lsl #29
  40dd08:	b312      	cbz	r2, 40dd50 <strcmp+0x68>
  40dd0a:	ea80 0401 	eor.w	r4, r0, r1
  40dd0e:	f014 0f07 	tst.w	r4, #7
  40dd12:	d16a      	bne.n	40ddea <strcmp+0x102>
  40dd14:	f000 0407 	and.w	r4, r0, #7
  40dd18:	f020 0007 	bic.w	r0, r0, #7
  40dd1c:	f004 0503 	and.w	r5, r4, #3
  40dd20:	f021 0107 	bic.w	r1, r1, #7
  40dd24:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40dd28:	e8f0 2304 	ldrd	r2, r3, [r0], #16
  40dd2c:	f014 0f04 	tst.w	r4, #4
  40dd30:	e8f1 6704 	ldrd	r6, r7, [r1], #16
  40dd34:	fa0c f405 	lsl.w	r4, ip, r5
  40dd38:	ea62 0204 	orn	r2, r2, r4
  40dd3c:	ea66 0604 	orn	r6, r6, r4
  40dd40:	d00a      	beq.n	40dd58 <strcmp+0x70>
  40dd42:	ea63 0304 	orn	r3, r3, r4
  40dd46:	4662      	mov	r2, ip
  40dd48:	ea67 0704 	orn	r7, r7, r4
  40dd4c:	4666      	mov	r6, ip
  40dd4e:	e003      	b.n	40dd58 <strcmp+0x70>
  40dd50:	e8f0 2304 	ldrd	r2, r3, [r0], #16
  40dd54:	e8f1 6704 	ldrd	r6, r7, [r1], #16
  40dd58:	fa82 f54c 	uadd8	r5, r2, ip
  40dd5c:	ea82 0406 	eor.w	r4, r2, r6
  40dd60:	faa4 f48c 	sel	r4, r4, ip
  40dd64:	bb6c      	cbnz	r4, 40ddc2 <strcmp+0xda>
  40dd66:	fa83 f54c 	uadd8	r5, r3, ip
  40dd6a:	ea83 0507 	eor.w	r5, r3, r7
  40dd6e:	faa5 f58c 	sel	r5, r5, ip
  40dd72:	b995      	cbnz	r5, 40dd9a <strcmp+0xb2>
  40dd74:	e950 2302 	ldrd	r2, r3, [r0, #-8]
  40dd78:	e951 6702 	ldrd	r6, r7, [r1, #-8]
  40dd7c:	fa82 f54c 	uadd8	r5, r2, ip
  40dd80:	ea82 0406 	eor.w	r4, r2, r6
  40dd84:	faa4 f48c 	sel	r4, r4, ip
  40dd88:	fa83 f54c 	uadd8	r5, r3, ip
  40dd8c:	ea83 0507 	eor.w	r5, r3, r7
  40dd90:	faa5 f58c 	sel	r5, r5, ip
  40dd94:	4325      	orrs	r5, r4
  40dd96:	d0db      	beq.n	40dd50 <strcmp+0x68>
  40dd98:	b99c      	cbnz	r4, 40ddc2 <strcmp+0xda>
  40dd9a:	ba2d      	rev	r5, r5
  40dd9c:	fab5 f485 	clz	r4, r5
  40dda0:	f024 0407 	bic.w	r4, r4, #7
  40dda4:	fa27 f104 	lsr.w	r1, r7, r4
  40dda8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  40ddac:	fa23 f304 	lsr.w	r3, r3, r4
  40ddb0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
  40ddb4:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40ddb8:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  40ddbc:	eba0 0001 	sub.w	r0, r0, r1
  40ddc0:	4770      	bx	lr
  40ddc2:	ba24      	rev	r4, r4
  40ddc4:	fab4 f484 	clz	r4, r4
  40ddc8:	f024 0407 	bic.w	r4, r4, #7
  40ddcc:	fa26 f104 	lsr.w	r1, r6, r4
  40ddd0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  40ddd4:	fa22 f204 	lsr.w	r2, r2, r4
  40ddd8:	f002 00ff 	and.w	r0, r2, #255	; 0xff
  40dddc:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40dde0:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  40dde4:	eba0 0001 	sub.w	r0, r0, r1
  40dde8:	4770      	bx	lr
  40ddea:	f014 0f03 	tst.w	r4, #3
  40ddee:	d13c      	bne.n	40de6a <strcmp+0x182>
  40ddf0:	f010 0403 	ands.w	r4, r0, #3
  40ddf4:	d128      	bne.n	40de48 <strcmp+0x160>
  40ddf6:	f850 2b08 	ldr.w	r2, [r0], #8
  40ddfa:	f851 3b08 	ldr.w	r3, [r1], #8
  40ddfe:	fa82 f54c 	uadd8	r5, r2, ip
  40de02:	ea82 0503 	eor.w	r5, r2, r3
  40de06:	faa5 f58c 	sel	r5, r5, ip
  40de0a:	b95d      	cbnz	r5, 40de24 <strcmp+0x13c>
  40de0c:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40de10:	f851 3c04 	ldr.w	r3, [r1, #-4]
  40de14:	fa82 f54c 	uadd8	r5, r2, ip
  40de18:	ea82 0503 	eor.w	r5, r2, r3
  40de1c:	faa5 f58c 	sel	r5, r5, ip
  40de20:	2d00      	cmp	r5, #0
  40de22:	d0e8      	beq.n	40ddf6 <strcmp+0x10e>
  40de24:	ba2d      	rev	r5, r5
  40de26:	fab5 f485 	clz	r4, r5
  40de2a:	f024 0407 	bic.w	r4, r4, #7
  40de2e:	fa23 f104 	lsr.w	r1, r3, r4
  40de32:	fa22 f204 	lsr.w	r2, r2, r4
  40de36:	f002 00ff 	and.w	r0, r2, #255	; 0xff
  40de3a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40de3e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  40de42:	eba0 0001 	sub.w	r0, r0, r1
  40de46:	4770      	bx	lr
  40de48:	ea4f 04c4 	mov.w	r4, r4, lsl #3
  40de4c:	f020 0003 	bic.w	r0, r0, #3
  40de50:	f850 2b08 	ldr.w	r2, [r0], #8
  40de54:	f021 0103 	bic.w	r1, r1, #3
  40de58:	f851 3b08 	ldr.w	r3, [r1], #8
  40de5c:	fa0c f404 	lsl.w	r4, ip, r4
  40de60:	ea62 0204 	orn	r2, r2, r4
  40de64:	ea63 0304 	orn	r3, r3, r4
  40de68:	e7c9      	b.n	40ddfe <strcmp+0x116>
  40de6a:	f010 0403 	ands.w	r4, r0, #3
  40de6e:	d01a      	beq.n	40dea6 <strcmp+0x1be>
  40de70:	eba1 0104 	sub.w	r1, r1, r4
  40de74:	f020 0003 	bic.w	r0, r0, #3
  40de78:	07e4      	lsls	r4, r4, #31
  40de7a:	f850 2b04 	ldr.w	r2, [r0], #4
  40de7e:	d006      	beq.n	40de8e <strcmp+0x1a6>
  40de80:	d20f      	bcs.n	40dea2 <strcmp+0x1ba>
  40de82:	788b      	ldrb	r3, [r1, #2]
  40de84:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
  40de88:	1ae4      	subs	r4, r4, r3
  40de8a:	d106      	bne.n	40de9a <strcmp+0x1b2>
  40de8c:	b12b      	cbz	r3, 40de9a <strcmp+0x1b2>
  40de8e:	78cb      	ldrb	r3, [r1, #3]
  40de90:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
  40de94:	1ae4      	subs	r4, r4, r3
  40de96:	d100      	bne.n	40de9a <strcmp+0x1b2>
  40de98:	b91b      	cbnz	r3, 40dea2 <strcmp+0x1ba>
  40de9a:	4620      	mov	r0, r4
  40de9c:	f85d 4b10 	ldr.w	r4, [sp], #16
  40dea0:	4770      	bx	lr
  40dea2:	f101 0104 	add.w	r1, r1, #4
  40dea6:	f850 2b04 	ldr.w	r2, [r0], #4
  40deaa:	07cc      	lsls	r4, r1, #31
  40deac:	f021 0103 	bic.w	r1, r1, #3
  40deb0:	f851 3b04 	ldr.w	r3, [r1], #4
  40deb4:	d848      	bhi.n	40df48 <strcmp+0x260>
  40deb6:	d224      	bcs.n	40df02 <strcmp+0x21a>
  40deb8:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
  40debc:	fa82 f54c 	uadd8	r5, r2, ip
  40dec0:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
  40dec4:	faa5 f58c 	sel	r5, r5, ip
  40dec8:	d10a      	bne.n	40dee0 <strcmp+0x1f8>
  40deca:	b965      	cbnz	r5, 40dee6 <strcmp+0x1fe>
  40decc:	f851 3b04 	ldr.w	r3, [r1], #4
  40ded0:	ea84 0402 	eor.w	r4, r4, r2
  40ded4:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
  40ded8:	d10e      	bne.n	40def8 <strcmp+0x210>
  40deda:	f850 2b04 	ldr.w	r2, [r0], #4
  40dede:	e7eb      	b.n	40deb8 <strcmp+0x1d0>
  40dee0:	ea4f 2313 	mov.w	r3, r3, lsr #8
  40dee4:	e055      	b.n	40df92 <strcmp+0x2aa>
  40dee6:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
  40deea:	d14d      	bne.n	40df88 <strcmp+0x2a0>
  40deec:	7808      	ldrb	r0, [r1, #0]
  40deee:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  40def2:	f1c0 0000 	rsb	r0, r0, #0
  40def6:	4770      	bx	lr
  40def8:	ea4f 6212 	mov.w	r2, r2, lsr #24
  40defc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
  40df00:	e047      	b.n	40df92 <strcmp+0x2aa>
  40df02:	ea02 441c 	and.w	r4, r2, ip, lsr #16
  40df06:	fa82 f54c 	uadd8	r5, r2, ip
  40df0a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
  40df0e:	faa5 f58c 	sel	r5, r5, ip
  40df12:	d10a      	bne.n	40df2a <strcmp+0x242>
  40df14:	b965      	cbnz	r5, 40df30 <strcmp+0x248>
  40df16:	f851 3b04 	ldr.w	r3, [r1], #4
  40df1a:	ea84 0402 	eor.w	r4, r4, r2
  40df1e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
  40df22:	d10c      	bne.n	40df3e <strcmp+0x256>
  40df24:	f850 2b04 	ldr.w	r2, [r0], #4
  40df28:	e7eb      	b.n	40df02 <strcmp+0x21a>
  40df2a:	ea4f 4313 	mov.w	r3, r3, lsr #16
  40df2e:	e030      	b.n	40df92 <strcmp+0x2aa>
  40df30:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
  40df34:	d128      	bne.n	40df88 <strcmp+0x2a0>
  40df36:	880b      	ldrh	r3, [r1, #0]
  40df38:	ea4f 4212 	mov.w	r2, r2, lsr #16
  40df3c:	e029      	b.n	40df92 <strcmp+0x2aa>
  40df3e:	ea4f 4212 	mov.w	r2, r2, lsr #16
  40df42:	ea03 431c 	and.w	r3, r3, ip, lsr #16
  40df46:	e024      	b.n	40df92 <strcmp+0x2aa>
  40df48:	f002 04ff 	and.w	r4, r2, #255	; 0xff
  40df4c:	fa82 f54c 	uadd8	r5, r2, ip
  40df50:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
  40df54:	faa5 f58c 	sel	r5, r5, ip
  40df58:	d10a      	bne.n	40df70 <strcmp+0x288>
  40df5a:	b965      	cbnz	r5, 40df76 <strcmp+0x28e>
  40df5c:	f851 3b04 	ldr.w	r3, [r1], #4
  40df60:	ea84 0402 	eor.w	r4, r4, r2
  40df64:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
  40df68:	d109      	bne.n	40df7e <strcmp+0x296>
  40df6a:	f850 2b04 	ldr.w	r2, [r0], #4
  40df6e:	e7eb      	b.n	40df48 <strcmp+0x260>
  40df70:	ea4f 6313 	mov.w	r3, r3, lsr #24
  40df74:	e00d      	b.n	40df92 <strcmp+0x2aa>
  40df76:	f015 0fff 	tst.w	r5, #255	; 0xff
  40df7a:	d105      	bne.n	40df88 <strcmp+0x2a0>
  40df7c:	680b      	ldr	r3, [r1, #0]
  40df7e:	ea4f 2212 	mov.w	r2, r2, lsr #8
  40df82:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  40df86:	e004      	b.n	40df92 <strcmp+0x2aa>
  40df88:	f04f 0000 	mov.w	r0, #0
  40df8c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  40df90:	4770      	bx	lr
  40df92:	ba12      	rev	r2, r2
  40df94:	ba1b      	rev	r3, r3
  40df96:	fa82 f44c 	uadd8	r4, r2, ip
  40df9a:	ea82 0403 	eor.w	r4, r2, r3
  40df9e:	faa4 f58c 	sel	r5, r4, ip
  40dfa2:	fab5 f485 	clz	r4, r5
  40dfa6:	fa02 f204 	lsl.w	r2, r2, r4
  40dfaa:	fa03 f304 	lsl.w	r3, r3, r4
  40dfae:	ea4f 6012 	mov.w	r0, r2, lsr #24
  40dfb2:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  40dfb6:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
  40dfba:	4770      	bx	lr

0040dfbc <strcpy>:
  40dfbc:	ea80 0201 	eor.w	r2, r0, r1
  40dfc0:	4684      	mov	ip, r0
  40dfc2:	f012 0f03 	tst.w	r2, #3
  40dfc6:	d14f      	bne.n	40e068 <strcpy+0xac>
  40dfc8:	f011 0f03 	tst.w	r1, #3
  40dfcc:	d132      	bne.n	40e034 <strcpy+0x78>
  40dfce:	f84d 4d04 	str.w	r4, [sp, #-4]!
  40dfd2:	f011 0f04 	tst.w	r1, #4
  40dfd6:	f851 3b04 	ldr.w	r3, [r1], #4
  40dfda:	d00b      	beq.n	40dff4 <strcpy+0x38>
  40dfdc:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  40dfe0:	439a      	bics	r2, r3
  40dfe2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  40dfe6:	bf04      	itt	eq
  40dfe8:	f84c 3b04 	streq.w	r3, [ip], #4
  40dfec:	f851 3b04 	ldreq.w	r3, [r1], #4
  40dff0:	d116      	bne.n	40e020 <strcpy+0x64>
  40dff2:	bf00      	nop
  40dff4:	f851 4b04 	ldr.w	r4, [r1], #4
  40dff8:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  40dffc:	439a      	bics	r2, r3
  40dffe:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  40e002:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
  40e006:	d10b      	bne.n	40e020 <strcpy+0x64>
  40e008:	f84c 3b04 	str.w	r3, [ip], #4
  40e00c:	43a2      	bics	r2, r4
  40e00e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  40e012:	bf04      	itt	eq
  40e014:	f851 3b04 	ldreq.w	r3, [r1], #4
  40e018:	f84c 4b04 	streq.w	r4, [ip], #4
  40e01c:	d0ea      	beq.n	40dff4 <strcpy+0x38>
  40e01e:	4623      	mov	r3, r4
  40e020:	f80c 3b01 	strb.w	r3, [ip], #1
  40e024:	f013 0fff 	tst.w	r3, #255	; 0xff
  40e028:	ea4f 2333 	mov.w	r3, r3, ror #8
  40e02c:	d1f8      	bne.n	40e020 <strcpy+0x64>
  40e02e:	f85d 4b04 	ldr.w	r4, [sp], #4
  40e032:	4770      	bx	lr
  40e034:	f011 0f01 	tst.w	r1, #1
  40e038:	d006      	beq.n	40e048 <strcpy+0x8c>
  40e03a:	f811 2b01 	ldrb.w	r2, [r1], #1
  40e03e:	f80c 2b01 	strb.w	r2, [ip], #1
  40e042:	2a00      	cmp	r2, #0
  40e044:	bf08      	it	eq
  40e046:	4770      	bxeq	lr
  40e048:	f011 0f02 	tst.w	r1, #2
  40e04c:	d0bf      	beq.n	40dfce <strcpy+0x12>
  40e04e:	f831 2b02 	ldrh.w	r2, [r1], #2
  40e052:	f012 0fff 	tst.w	r2, #255	; 0xff
  40e056:	bf16      	itet	ne
  40e058:	f82c 2b02 	strhne.w	r2, [ip], #2
  40e05c:	f88c 2000 	strbeq.w	r2, [ip]
  40e060:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
  40e064:	d1b3      	bne.n	40dfce <strcpy+0x12>
  40e066:	4770      	bx	lr
  40e068:	f811 2b01 	ldrb.w	r2, [r1], #1
  40e06c:	f80c 2b01 	strb.w	r2, [ip], #1
  40e070:	2a00      	cmp	r2, #0
  40e072:	d1f9      	bne.n	40e068 <strcpy+0xac>
  40e074:	4770      	bx	lr
  40e076:	bf00      	nop
	...

0040e080 <strlen>:
  40e080:	f890 f000 	pld	[r0]
  40e084:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  40e088:	f020 0107 	bic.w	r1, r0, #7
  40e08c:	f06f 0c00 	mvn.w	ip, #0
  40e090:	f010 0407 	ands.w	r4, r0, #7
  40e094:	f891 f020 	pld	[r1, #32]
  40e098:	f040 8049 	bne.w	40e12e <strlen+0xae>
  40e09c:	f04f 0400 	mov.w	r4, #0
  40e0a0:	f06f 0007 	mvn.w	r0, #7
  40e0a4:	e9d1 2300 	ldrd	r2, r3, [r1]
  40e0a8:	f891 f040 	pld	[r1, #64]	; 0x40
  40e0ac:	f100 0008 	add.w	r0, r0, #8
  40e0b0:	fa82 f24c 	uadd8	r2, r2, ip
  40e0b4:	faa4 f28c 	sel	r2, r4, ip
  40e0b8:	fa83 f34c 	uadd8	r3, r3, ip
  40e0bc:	faa2 f38c 	sel	r3, r2, ip
  40e0c0:	bb4b      	cbnz	r3, 40e116 <strlen+0x96>
  40e0c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  40e0c6:	fa82 f24c 	uadd8	r2, r2, ip
  40e0ca:	f100 0008 	add.w	r0, r0, #8
  40e0ce:	faa4 f28c 	sel	r2, r4, ip
  40e0d2:	fa83 f34c 	uadd8	r3, r3, ip
  40e0d6:	faa2 f38c 	sel	r3, r2, ip
  40e0da:	b9e3      	cbnz	r3, 40e116 <strlen+0x96>
  40e0dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  40e0e0:	fa82 f24c 	uadd8	r2, r2, ip
  40e0e4:	f100 0008 	add.w	r0, r0, #8
  40e0e8:	faa4 f28c 	sel	r2, r4, ip
  40e0ec:	fa83 f34c 	uadd8	r3, r3, ip
  40e0f0:	faa2 f38c 	sel	r3, r2, ip
  40e0f4:	b97b      	cbnz	r3, 40e116 <strlen+0x96>
  40e0f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40e0fa:	f101 0120 	add.w	r1, r1, #32
  40e0fe:	fa82 f24c 	uadd8	r2, r2, ip
  40e102:	f100 0008 	add.w	r0, r0, #8
  40e106:	faa4 f28c 	sel	r2, r4, ip
  40e10a:	fa83 f34c 	uadd8	r3, r3, ip
  40e10e:	faa2 f38c 	sel	r3, r2, ip
  40e112:	2b00      	cmp	r3, #0
  40e114:	d0c6      	beq.n	40e0a4 <strlen+0x24>
  40e116:	2a00      	cmp	r2, #0
  40e118:	bf04      	itt	eq
  40e11a:	3004      	addeq	r0, #4
  40e11c:	461a      	moveq	r2, r3
  40e11e:	ba12      	rev	r2, r2
  40e120:	fab2 f282 	clz	r2, r2
  40e124:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  40e128:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40e12c:	4770      	bx	lr
  40e12e:	e9d1 2300 	ldrd	r2, r3, [r1]
  40e132:	f004 0503 	and.w	r5, r4, #3
  40e136:	f1c4 0000 	rsb	r0, r4, #0
  40e13a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40e13e:	f014 0f04 	tst.w	r4, #4
  40e142:	f891 f040 	pld	[r1, #64]	; 0x40
  40e146:	fa0c f505 	lsl.w	r5, ip, r5
  40e14a:	ea62 0205 	orn	r2, r2, r5
  40e14e:	bf1c      	itt	ne
  40e150:	ea63 0305 	ornne	r3, r3, r5
  40e154:	4662      	movne	r2, ip
  40e156:	f04f 0400 	mov.w	r4, #0
  40e15a:	e7a9      	b.n	40e0b0 <strlen+0x30>

0040e15c <strncmp>:
  40e15c:	2a00      	cmp	r2, #0
  40e15e:	d041      	beq.n	40e1e4 <strncmp+0x88>
  40e160:	ea40 0301 	orr.w	r3, r0, r1
  40e164:	f013 0303 	ands.w	r3, r3, #3
  40e168:	b4f0      	push	{r4, r5, r6, r7}
  40e16a:	d125      	bne.n	40e1b8 <strncmp+0x5c>
  40e16c:	2a03      	cmp	r2, #3
  40e16e:	d923      	bls.n	40e1b8 <strncmp+0x5c>
  40e170:	6804      	ldr	r4, [r0, #0]
  40e172:	680d      	ldr	r5, [r1, #0]
  40e174:	42ac      	cmp	r4, r5
  40e176:	d11f      	bne.n	40e1b8 <strncmp+0x5c>
  40e178:	3a04      	subs	r2, #4
  40e17a:	d035      	beq.n	40e1e8 <strncmp+0x8c>
  40e17c:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
  40e180:	ea25 0404 	bic.w	r4, r5, r4
  40e184:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
  40e188:	d131      	bne.n	40e1ee <strncmp+0x92>
  40e18a:	1d07      	adds	r7, r0, #4
  40e18c:	1d0d      	adds	r5, r1, #4
  40e18e:	e00d      	b.n	40e1ac <strncmp+0x50>
  40e190:	f857 3b04 	ldr.w	r3, [r7], #4
  40e194:	680e      	ldr	r6, [r1, #0]
  40e196:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
  40e19a:	42b3      	cmp	r3, r6
  40e19c:	ea24 0403 	bic.w	r4, r4, r3
  40e1a0:	d10a      	bne.n	40e1b8 <strncmp+0x5c>
  40e1a2:	3a04      	subs	r2, #4
  40e1a4:	d020      	beq.n	40e1e8 <strncmp+0x8c>
  40e1a6:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
  40e1aa:	d123      	bne.n	40e1f4 <strncmp+0x98>
  40e1ac:	2a03      	cmp	r2, #3
  40e1ae:	4629      	mov	r1, r5
  40e1b0:	4638      	mov	r0, r7
  40e1b2:	f105 0504 	add.w	r5, r5, #4
  40e1b6:	d8eb      	bhi.n	40e190 <strncmp+0x34>
  40e1b8:	7803      	ldrb	r3, [r0, #0]
  40e1ba:	780c      	ldrb	r4, [r1, #0]
  40e1bc:	429c      	cmp	r4, r3
  40e1be:	f102 32ff 	add.w	r2, r2, #4294967295
  40e1c2:	d10c      	bne.n	40e1de <strncmp+0x82>
  40e1c4:	b182      	cbz	r2, 40e1e8 <strncmp+0x8c>
  40e1c6:	b914      	cbnz	r4, 40e1ce <strncmp+0x72>
  40e1c8:	e016      	b.n	40e1f8 <strncmp+0x9c>
  40e1ca:	b16a      	cbz	r2, 40e1e8 <strncmp+0x8c>
  40e1cc:	b17b      	cbz	r3, 40e1ee <strncmp+0x92>
  40e1ce:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  40e1d2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
  40e1d6:	42a3      	cmp	r3, r4
  40e1d8:	f102 32ff 	add.w	r2, r2, #4294967295
  40e1dc:	d0f5      	beq.n	40e1ca <strncmp+0x6e>
  40e1de:	1b18      	subs	r0, r3, r4
  40e1e0:	bcf0      	pop	{r4, r5, r6, r7}
  40e1e2:	4770      	bx	lr
  40e1e4:	4610      	mov	r0, r2
  40e1e6:	4770      	bx	lr
  40e1e8:	4610      	mov	r0, r2
  40e1ea:	bcf0      	pop	{r4, r5, r6, r7}
  40e1ec:	4770      	bx	lr
  40e1ee:	4618      	mov	r0, r3
  40e1f0:	bcf0      	pop	{r4, r5, r6, r7}
  40e1f2:	4770      	bx	lr
  40e1f4:	2000      	movs	r0, #0
  40e1f6:	e7f3      	b.n	40e1e0 <strncmp+0x84>
  40e1f8:	4620      	mov	r0, r4
  40e1fa:	e7f1      	b.n	40e1e0 <strncmp+0x84>

0040e1fc <critical_factorization>:
  40e1fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40e200:	f04f 0e01 	mov.w	lr, #1
  40e204:	4674      	mov	r4, lr
  40e206:	2500      	movs	r5, #0
  40e208:	f04f 36ff 	mov.w	r6, #4294967295
  40e20c:	192b      	adds	r3, r5, r4
  40e20e:	428b      	cmp	r3, r1
  40e210:	eb00 0706 	add.w	r7, r0, r6
  40e214:	d20d      	bcs.n	40e232 <critical_factorization+0x36>
  40e216:	5d3f      	ldrb	r7, [r7, r4]
  40e218:	f810 c003 	ldrb.w	ip, [r0, r3]
  40e21c:	45bc      	cmp	ip, r7
  40e21e:	d22d      	bcs.n	40e27c <critical_factorization+0x80>
  40e220:	461d      	mov	r5, r3
  40e222:	2401      	movs	r4, #1
  40e224:	ebc6 0e03 	rsb	lr, r6, r3
  40e228:	192b      	adds	r3, r5, r4
  40e22a:	428b      	cmp	r3, r1
  40e22c:	eb00 0706 	add.w	r7, r0, r6
  40e230:	d3f1      	bcc.n	40e216 <critical_factorization+0x1a>
  40e232:	f04f 0801 	mov.w	r8, #1
  40e236:	f8c2 e000 	str.w	lr, [r2]
  40e23a:	4644      	mov	r4, r8
  40e23c:	2500      	movs	r5, #0
  40e23e:	f04f 37ff 	mov.w	r7, #4294967295
  40e242:	192b      	adds	r3, r5, r4
  40e244:	4299      	cmp	r1, r3
  40e246:	eb00 0e07 	add.w	lr, r0, r7
  40e24a:	d90e      	bls.n	40e26a <critical_factorization+0x6e>
  40e24c:	f81e e004 	ldrb.w	lr, [lr, r4]
  40e250:	f810 c003 	ldrb.w	ip, [r0, r3]
  40e254:	45f4      	cmp	ip, lr
  40e256:	d918      	bls.n	40e28a <critical_factorization+0x8e>
  40e258:	461d      	mov	r5, r3
  40e25a:	2401      	movs	r4, #1
  40e25c:	ebc7 0803 	rsb	r8, r7, r3
  40e260:	192b      	adds	r3, r5, r4
  40e262:	4299      	cmp	r1, r3
  40e264:	eb00 0e07 	add.w	lr, r0, r7
  40e268:	d8f0      	bhi.n	40e24c <critical_factorization+0x50>
  40e26a:	3701      	adds	r7, #1
  40e26c:	1c70      	adds	r0, r6, #1
  40e26e:	4287      	cmp	r7, r0
  40e270:	bf24      	itt	cs
  40e272:	f8c2 8000 	strcs.w	r8, [r2]
  40e276:	4638      	movcs	r0, r7
  40e278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40e27c:	d00c      	beq.n	40e298 <critical_factorization+0x9c>
  40e27e:	f04f 0e01 	mov.w	lr, #1
  40e282:	462e      	mov	r6, r5
  40e284:	4674      	mov	r4, lr
  40e286:	4475      	add	r5, lr
  40e288:	e7c0      	b.n	40e20c <critical_factorization+0x10>
  40e28a:	d00c      	beq.n	40e2a6 <critical_factorization+0xaa>
  40e28c:	f04f 0801 	mov.w	r8, #1
  40e290:	462f      	mov	r7, r5
  40e292:	4644      	mov	r4, r8
  40e294:	4445      	add	r5, r8
  40e296:	e7d4      	b.n	40e242 <critical_factorization+0x46>
  40e298:	4574      	cmp	r4, lr
  40e29a:	bf09      	itett	eq
  40e29c:	46a6      	moveq	lr, r4
  40e29e:	3401      	addne	r4, #1
  40e2a0:	461d      	moveq	r5, r3
  40e2a2:	2401      	moveq	r4, #1
  40e2a4:	e7b2      	b.n	40e20c <critical_factorization+0x10>
  40e2a6:	4544      	cmp	r4, r8
  40e2a8:	bf09      	itett	eq
  40e2aa:	46a0      	moveq	r8, r4
  40e2ac:	3401      	addne	r4, #1
  40e2ae:	461d      	moveq	r5, r3
  40e2b0:	2401      	moveq	r4, #1
  40e2b2:	e7c6      	b.n	40e242 <critical_factorization+0x46>

0040e2b4 <two_way_long_needle>:
  40e2b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40e2b8:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
  40e2bc:	4616      	mov	r6, r2
  40e2be:	4605      	mov	r5, r0
  40e2c0:	468b      	mov	fp, r1
  40e2c2:	4610      	mov	r0, r2
  40e2c4:	4619      	mov	r1, r3
  40e2c6:	aa03      	add	r2, sp, #12
  40e2c8:	461c      	mov	r4, r3
  40e2ca:	f7ff ff97 	bl	40e1fc <critical_factorization>
  40e2ce:	ab03      	add	r3, sp, #12
  40e2d0:	4681      	mov	r9, r0
  40e2d2:	f20d 420c 	addw	r2, sp, #1036	; 0x40c
  40e2d6:	f843 4f04 	str.w	r4, [r3, #4]!
  40e2da:	4293      	cmp	r3, r2
  40e2dc:	d1fb      	bne.n	40e2d6 <two_way_long_needle+0x22>
  40e2de:	b14c      	cbz	r4, 40e2f4 <two_way_long_needle+0x40>
  40e2e0:	1e63      	subs	r3, r4, #1
  40e2e2:	4632      	mov	r2, r6
  40e2e4:	a804      	add	r0, sp, #16
  40e2e6:	f812 1b01 	ldrb.w	r1, [r2], #1
  40e2ea:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  40e2ee:	f113 33ff 	adds.w	r3, r3, #4294967295
  40e2f2:	d2f8      	bcs.n	40e2e6 <two_way_long_needle+0x32>
  40e2f4:	9903      	ldr	r1, [sp, #12]
  40e2f6:	464a      	mov	r2, r9
  40e2f8:	4431      	add	r1, r6
  40e2fa:	4630      	mov	r0, r6
  40e2fc:	f7ff fa7a 	bl	40d7f4 <memcmp>
  40e300:	2800      	cmp	r0, #0
  40e302:	d171      	bne.n	40e3e8 <two_way_long_needle+0x134>
  40e304:	f109 33ff 	add.w	r3, r9, #4294967295
  40e308:	9300      	str	r3, [sp, #0]
  40e30a:	18f3      	adds	r3, r6, r3
  40e30c:	4682      	mov	sl, r0
  40e30e:	9301      	str	r3, [sp, #4]
  40e310:	4623      	mov	r3, r4
  40e312:	4680      	mov	r8, r0
  40e314:	4654      	mov	r4, sl
  40e316:	4658      	mov	r0, fp
  40e318:	469a      	mov	sl, r3
  40e31a:	eb08 070a 	add.w	r7, r8, sl
  40e31e:	1a3a      	subs	r2, r7, r0
  40e320:	2100      	movs	r1, #0
  40e322:	4428      	add	r0, r5
  40e324:	f004 fca4 	bl	412c70 <memchr>
  40e328:	2800      	cmp	r0, #0
  40e32a:	d158      	bne.n	40e3de <two_way_long_needle+0x12a>
  40e32c:	2f00      	cmp	r7, #0
  40e32e:	d056      	beq.n	40e3de <two_way_long_needle+0x12a>
  40e330:	19eb      	adds	r3, r5, r7
  40e332:	aa04      	add	r2, sp, #16
  40e334:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  40e338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  40e33c:	b14b      	cbz	r3, 40e352 <two_way_long_needle+0x9e>
  40e33e:	b124      	cbz	r4, 40e34a <two_way_long_needle+0x96>
  40e340:	9a03      	ldr	r2, [sp, #12]
  40e342:	4293      	cmp	r3, r2
  40e344:	d201      	bcs.n	40e34a <two_way_long_needle+0x96>
  40e346:	ebc2 030a 	rsb	r3, r2, sl
  40e34a:	4498      	add	r8, r3
  40e34c:	2400      	movs	r4, #0
  40e34e:	4638      	mov	r0, r7
  40e350:	e7e3      	b.n	40e31a <two_way_long_needle+0x66>
  40e352:	454c      	cmp	r4, r9
  40e354:	4623      	mov	r3, r4
  40e356:	f10a 3eff 	add.w	lr, sl, #4294967295
  40e35a:	bf38      	it	cc
  40e35c:	464b      	movcc	r3, r9
  40e35e:	4573      	cmp	r3, lr
  40e360:	d213      	bcs.n	40e38a <two_way_long_needle+0xd6>
  40e362:	eb08 0203 	add.w	r2, r8, r3
  40e366:	f816 c003 	ldrb.w	ip, [r6, r3]
  40e36a:	5ca8      	ldrb	r0, [r5, r2]
  40e36c:	4584      	cmp	ip, r0
  40e36e:	442a      	add	r2, r5
  40e370:	eb06 0103 	add.w	r1, r6, r3
  40e374:	d006      	beq.n	40e384 <two_way_long_needle+0xd0>
  40e376:	e02e      	b.n	40e3d6 <two_way_long_needle+0x122>
  40e378:	f811 cf01 	ldrb.w	ip, [r1, #1]!
  40e37c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  40e380:	4584      	cmp	ip, r0
  40e382:	d128      	bne.n	40e3d6 <two_way_long_needle+0x122>
  40e384:	3301      	adds	r3, #1
  40e386:	4573      	cmp	r3, lr
  40e388:	d3f6      	bcc.n	40e378 <two_way_long_needle+0xc4>
  40e38a:	454c      	cmp	r4, r9
  40e38c:	9900      	ldr	r1, [sp, #0]
  40e38e:	f080 808b 	bcs.w	40e4a8 <two_way_long_needle+0x1f4>
  40e392:	9b00      	ldr	r3, [sp, #0]
  40e394:	9801      	ldr	r0, [sp, #4]
  40e396:	eb08 0203 	add.w	r2, r8, r3
  40e39a:	7803      	ldrb	r3, [r0, #0]
  40e39c:	5ca8      	ldrb	r0, [r5, r2]
  40e39e:	4283      	cmp	r3, r0
  40e3a0:	442a      	add	r2, r5
  40e3a2:	f040 8081 	bne.w	40e4a8 <two_way_long_needle+0x1f4>
  40e3a6:	9b01      	ldr	r3, [sp, #4]
  40e3a8:	eb06 0b04 	add.w	fp, r6, r4
  40e3ac:	e006      	b.n	40e3bc <two_way_long_needle+0x108>
  40e3ae:	f813 ed01 	ldrb.w	lr, [r3, #-1]!
  40e3b2:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
  40e3b6:	4586      	cmp	lr, r0
  40e3b8:	d104      	bne.n	40e3c4 <two_way_long_needle+0x110>
  40e3ba:	4661      	mov	r1, ip
  40e3bc:	459b      	cmp	fp, r3
  40e3be:	f101 3cff 	add.w	ip, r1, #4294967295
  40e3c2:	d1f4      	bne.n	40e3ae <two_way_long_needle+0xfa>
  40e3c4:	3401      	adds	r4, #1
  40e3c6:	428c      	cmp	r4, r1
  40e3c8:	d870      	bhi.n	40e4ac <two_way_long_needle+0x1f8>
  40e3ca:	9c03      	ldr	r4, [sp, #12]
  40e3cc:	4638      	mov	r0, r7
  40e3ce:	44a0      	add	r8, r4
  40e3d0:	ebc4 040a 	rsb	r4, r4, sl
  40e3d4:	e7a1      	b.n	40e31a <two_way_long_needle+0x66>
  40e3d6:	f1c9 0201 	rsb	r2, r9, #1
  40e3da:	4490      	add	r8, r2
  40e3dc:	e7b5      	b.n	40e34a <two_way_long_needle+0x96>
  40e3de:	2000      	movs	r0, #0
  40e3e0:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
  40e3e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40e3e8:	ebc9 0304 	rsb	r3, r9, r4
  40e3ec:	454b      	cmp	r3, r9
  40e3ee:	bf38      	it	cc
  40e3f0:	464b      	movcc	r3, r9
  40e3f2:	3301      	adds	r3, #1
  40e3f4:	f109 38ff 	add.w	r8, r9, #4294967295
  40e3f8:	9303      	str	r3, [sp, #12]
  40e3fa:	eb06 0308 	add.w	r3, r6, r8
  40e3fe:	4658      	mov	r0, fp
  40e400:	f04f 0a00 	mov.w	sl, #0
  40e404:	46cb      	mov	fp, r9
  40e406:	4699      	mov	r9, r3
  40e408:	eb0a 0704 	add.w	r7, sl, r4
  40e40c:	1a3a      	subs	r2, r7, r0
  40e40e:	2100      	movs	r1, #0
  40e410:	4428      	add	r0, r5
  40e412:	f004 fc2d 	bl	412c70 <memchr>
  40e416:	2800      	cmp	r0, #0
  40e418:	d1e1      	bne.n	40e3de <two_way_long_needle+0x12a>
  40e41a:	2f00      	cmp	r7, #0
  40e41c:	d0df      	beq.n	40e3de <two_way_long_needle+0x12a>
  40e41e:	19eb      	adds	r3, r5, r7
  40e420:	aa04      	add	r2, sp, #16
  40e422:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  40e426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  40e42a:	bba3      	cbnz	r3, 40e496 <two_way_long_needle+0x1e2>
  40e42c:	1e61      	subs	r1, r4, #1
  40e42e:	458b      	cmp	fp, r1
  40e430:	d215      	bcs.n	40e45e <two_way_long_needle+0x1aa>
  40e432:	eb0a 020b 	add.w	r2, sl, fp
  40e436:	f816 300b 	ldrb.w	r3, [r6, fp]
  40e43a:	f815 e002 	ldrb.w	lr, [r5, r2]
  40e43e:	459e      	cmp	lr, r3
  40e440:	442a      	add	r2, r5
  40e442:	eb06 000b 	add.w	r0, r6, fp
  40e446:	465b      	mov	r3, fp
  40e448:	d006      	beq.n	40e458 <two_way_long_needle+0x1a4>
  40e44a:	e027      	b.n	40e49c <two_way_long_needle+0x1e8>
  40e44c:	f810 cf01 	ldrb.w	ip, [r0, #1]!
  40e450:	f812 ef01 	ldrb.w	lr, [r2, #1]!
  40e454:	45f4      	cmp	ip, lr
  40e456:	d121      	bne.n	40e49c <two_way_long_needle+0x1e8>
  40e458:	3301      	adds	r3, #1
  40e45a:	428b      	cmp	r3, r1
  40e45c:	d3f6      	bcc.n	40e44c <two_way_long_needle+0x198>
  40e45e:	f1b8 3fff 	cmp.w	r8, #4294967295
  40e462:	d011      	beq.n	40e488 <two_way_long_needle+0x1d4>
  40e464:	eb0a 0208 	add.w	r2, sl, r8
  40e468:	f899 1000 	ldrb.w	r1, [r9]
  40e46c:	5cab      	ldrb	r3, [r5, r2]
  40e46e:	4299      	cmp	r1, r3
  40e470:	442a      	add	r2, r5
  40e472:	d10f      	bne.n	40e494 <two_way_long_needle+0x1e0>
  40e474:	464b      	mov	r3, r9
  40e476:	e005      	b.n	40e484 <two_way_long_needle+0x1d0>
  40e478:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
  40e47c:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
  40e480:	4288      	cmp	r0, r1
  40e482:	d107      	bne.n	40e494 <two_way_long_needle+0x1e0>
  40e484:	42b3      	cmp	r3, r6
  40e486:	d1f7      	bne.n	40e478 <two_way_long_needle+0x1c4>
  40e488:	eb05 000a 	add.w	r0, r5, sl
  40e48c:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
  40e490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40e494:	9b03      	ldr	r3, [sp, #12]
  40e496:	449a      	add	sl, r3
  40e498:	4638      	mov	r0, r7
  40e49a:	e7b5      	b.n	40e408 <two_way_long_needle+0x154>
  40e49c:	f1cb 0201 	rsb	r2, fp, #1
  40e4a0:	4492      	add	sl, r2
  40e4a2:	449a      	add	sl, r3
  40e4a4:	4638      	mov	r0, r7
  40e4a6:	e7af      	b.n	40e408 <two_way_long_needle+0x154>
  40e4a8:	4649      	mov	r1, r9
  40e4aa:	e78b      	b.n	40e3c4 <two_way_long_needle+0x110>
  40e4ac:	eb05 0008 	add.w	r0, r5, r8
  40e4b0:	e796      	b.n	40e3e0 <two_way_long_needle+0x12c>
  40e4b2:	bf00      	nop

0040e4b4 <strstr>:
  40e4b4:	7803      	ldrb	r3, [r0, #0]
  40e4b6:	2b00      	cmp	r3, #0
  40e4b8:	f000 8104 	beq.w	40e6c4 <strstr+0x210>
  40e4bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40e4c0:	f891 8000 	ldrb.w	r8, [r1]
  40e4c4:	b085      	sub	sp, #20
  40e4c6:	4644      	mov	r4, r8
  40e4c8:	f1b8 0f00 	cmp.w	r8, #0
  40e4cc:	d016      	beq.n	40e4fc <strstr+0x48>
  40e4ce:	4686      	mov	lr, r0
  40e4d0:	f101 0c01 	add.w	ip, r1, #1
  40e4d4:	2701      	movs	r7, #1
  40e4d6:	e003      	b.n	40e4e0 <strstr+0x2c>
  40e4d8:	f812 4b01 	ldrb.w	r4, [r2], #1
  40e4dc:	b16c      	cbz	r4, 40e4fa <strstr+0x46>
  40e4de:	4694      	mov	ip, r2
  40e4e0:	429c      	cmp	r4, r3
  40e4e2:	bf14      	ite	ne
  40e4e4:	2700      	movne	r7, #0
  40e4e6:	f007 0701 	andeq.w	r7, r7, #1
  40e4ea:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
  40e4ee:	4662      	mov	r2, ip
  40e4f0:	2b00      	cmp	r3, #0
  40e4f2:	d1f1      	bne.n	40e4d8 <strstr+0x24>
  40e4f4:	f89c 3000 	ldrb.w	r3, [ip]
  40e4f8:	bb0b      	cbnz	r3, 40e53e <strstr+0x8a>
  40e4fa:	b117      	cbz	r7, 40e502 <strstr+0x4e>
  40e4fc:	b005      	add	sp, #20
  40e4fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40e502:	460e      	mov	r6, r1
  40e504:	4605      	mov	r5, r0
  40e506:	4641      	mov	r1, r8
  40e508:	3001      	adds	r0, #1
  40e50a:	ebc6 040c 	rsb	r4, r6, ip
  40e50e:	f005 f9bb 	bl	413888 <strchr>
  40e512:	4607      	mov	r7, r0
  40e514:	b198      	cbz	r0, 40e53e <strstr+0x8a>
  40e516:	2c01      	cmp	r4, #1
  40e518:	d0f0      	beq.n	40e4fc <strstr+0x48>
  40e51a:	1928      	adds	r0, r5, r4
  40e51c:	4287      	cmp	r7, r0
  40e51e:	bf94      	ite	ls
  40e520:	ebc7 0b00 	rsbls	fp, r7, r0
  40e524:	f04f 0b01 	movhi.w	fp, #1
  40e528:	2c1f      	cmp	r4, #31
  40e52a:	d90c      	bls.n	40e546 <strstr+0x92>
  40e52c:	4623      	mov	r3, r4
  40e52e:	4632      	mov	r2, r6
  40e530:	4659      	mov	r1, fp
  40e532:	4638      	mov	r0, r7
  40e534:	f7ff febe 	bl	40e2b4 <two_way_long_needle>
  40e538:	b005      	add	sp, #20
  40e53a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40e53e:	2000      	movs	r0, #0
  40e540:	b005      	add	sp, #20
  40e542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40e546:	aa03      	add	r2, sp, #12
  40e548:	4621      	mov	r1, r4
  40e54a:	4630      	mov	r0, r6
  40e54c:	f7ff fe56 	bl	40e1fc <critical_factorization>
  40e550:	9903      	ldr	r1, [sp, #12]
  40e552:	4680      	mov	r8, r0
  40e554:	4602      	mov	r2, r0
  40e556:	4431      	add	r1, r6
  40e558:	4630      	mov	r0, r6
  40e55a:	f7ff f94b 	bl	40d7f4 <memcmp>
  40e55e:	2800      	cmp	r0, #0
  40e560:	d158      	bne.n	40e614 <strstr+0x160>
  40e562:	f108 33ff 	add.w	r3, r8, #4294967295
  40e566:	9301      	str	r3, [sp, #4]
  40e568:	18f3      	adds	r3, r6, r3
  40e56a:	4681      	mov	r9, r0
  40e56c:	4605      	mov	r5, r0
  40e56e:	9300      	str	r3, [sp, #0]
  40e570:	4658      	mov	r0, fp
  40e572:	46b2      	mov	sl, r6
  40e574:	1966      	adds	r6, r4, r5
  40e576:	1a32      	subs	r2, r6, r0
  40e578:	2100      	movs	r1, #0
  40e57a:	4438      	add	r0, r7
  40e57c:	f004 fb78 	bl	412c70 <memchr>
  40e580:	2800      	cmp	r0, #0
  40e582:	d1dc      	bne.n	40e53e <strstr+0x8a>
  40e584:	2e00      	cmp	r6, #0
  40e586:	d0da      	beq.n	40e53e <strstr+0x8a>
  40e588:	45c8      	cmp	r8, r9
  40e58a:	4643      	mov	r3, r8
  40e58c:	bf38      	it	cc
  40e58e:	464b      	movcc	r3, r9
  40e590:	429c      	cmp	r4, r3
  40e592:	d912      	bls.n	40e5ba <strstr+0x106>
  40e594:	195a      	adds	r2, r3, r5
  40e596:	f81a 1003 	ldrb.w	r1, [sl, r3]
  40e59a:	5cb8      	ldrb	r0, [r7, r2]
  40e59c:	4288      	cmp	r0, r1
  40e59e:	443a      	add	r2, r7
  40e5a0:	eb0a 0e03 	add.w	lr, sl, r3
  40e5a4:	d006      	beq.n	40e5b4 <strstr+0x100>
  40e5a6:	e02d      	b.n	40e604 <strstr+0x150>
  40e5a8:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
  40e5ac:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  40e5b0:	4288      	cmp	r0, r1
  40e5b2:	d127      	bne.n	40e604 <strstr+0x150>
  40e5b4:	3301      	adds	r3, #1
  40e5b6:	429c      	cmp	r4, r3
  40e5b8:	d8f6      	bhi.n	40e5a8 <strstr+0xf4>
  40e5ba:	9b01      	ldr	r3, [sp, #4]
  40e5bc:	45c8      	cmp	r8, r9
  40e5be:	4619      	mov	r1, r3
  40e5c0:	f240 8083 	bls.w	40e6ca <strstr+0x216>
  40e5c4:	18ea      	adds	r2, r5, r3
  40e5c6:	9800      	ldr	r0, [sp, #0]
  40e5c8:	7803      	ldrb	r3, [r0, #0]
  40e5ca:	5cb8      	ldrb	r0, [r7, r2]
  40e5cc:	4283      	cmp	r3, r0
  40e5ce:	443a      	add	r2, r7
  40e5d0:	d17b      	bne.n	40e6ca <strstr+0x216>
  40e5d2:	9b00      	ldr	r3, [sp, #0]
  40e5d4:	eb0a 0b09 	add.w	fp, sl, r9
  40e5d8:	e006      	b.n	40e5e8 <strstr+0x134>
  40e5da:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
  40e5de:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
  40e5e2:	45f4      	cmp	ip, lr
  40e5e4:	d104      	bne.n	40e5f0 <strstr+0x13c>
  40e5e6:	4601      	mov	r1, r0
  40e5e8:	455b      	cmp	r3, fp
  40e5ea:	f101 30ff 	add.w	r0, r1, #4294967295
  40e5ee:	d1f4      	bne.n	40e5da <strstr+0x126>
  40e5f0:	f109 0901 	add.w	r9, r9, #1
  40e5f4:	4589      	cmp	r9, r1
  40e5f6:	d857      	bhi.n	40e6a8 <strstr+0x1f4>
  40e5f8:	9b03      	ldr	r3, [sp, #12]
  40e5fa:	4630      	mov	r0, r6
  40e5fc:	441d      	add	r5, r3
  40e5fe:	ebc3 0904 	rsb	r9, r3, r4
  40e602:	e7b7      	b.n	40e574 <strstr+0xc0>
  40e604:	f1c8 0201 	rsb	r2, r8, #1
  40e608:	4415      	add	r5, r2
  40e60a:	441d      	add	r5, r3
  40e60c:	f04f 0900 	mov.w	r9, #0
  40e610:	4630      	mov	r0, r6
  40e612:	e7af      	b.n	40e574 <strstr+0xc0>
  40e614:	ebc8 0304 	rsb	r3, r8, r4
  40e618:	4543      	cmp	r3, r8
  40e61a:	bf38      	it	cc
  40e61c:	4643      	movcc	r3, r8
  40e61e:	3301      	adds	r3, #1
  40e620:	f108 39ff 	add.w	r9, r8, #4294967295
  40e624:	9303      	str	r3, [sp, #12]
  40e626:	eb06 0309 	add.w	r3, r6, r9
  40e62a:	4658      	mov	r0, fp
  40e62c:	2500      	movs	r5, #0
  40e62e:	46bb      	mov	fp, r7
  40e630:	469a      	mov	sl, r3
  40e632:	1967      	adds	r7, r4, r5
  40e634:	1a3a      	subs	r2, r7, r0
  40e636:	2100      	movs	r1, #0
  40e638:	4458      	add	r0, fp
  40e63a:	f004 fb19 	bl	412c70 <memchr>
  40e63e:	2800      	cmp	r0, #0
  40e640:	f47f af7d 	bne.w	40e53e <strstr+0x8a>
  40e644:	2f00      	cmp	r7, #0
  40e646:	f43f af7a 	beq.w	40e53e <strstr+0x8a>
  40e64a:	4544      	cmp	r4, r8
  40e64c:	d915      	bls.n	40e67a <strstr+0x1c6>
  40e64e:	eb08 0205 	add.w	r2, r8, r5
  40e652:	f816 3008 	ldrb.w	r3, [r6, r8]
  40e656:	f81b 0002 	ldrb.w	r0, [fp, r2]
  40e65a:	4298      	cmp	r0, r3
  40e65c:	445a      	add	r2, fp
  40e65e:	eb06 0108 	add.w	r1, r6, r8
  40e662:	4643      	mov	r3, r8
  40e664:	d006      	beq.n	40e674 <strstr+0x1c0>
  40e666:	e023      	b.n	40e6b0 <strstr+0x1fc>
  40e668:	f811 ef01 	ldrb.w	lr, [r1, #1]!
  40e66c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  40e670:	4586      	cmp	lr, r0
  40e672:	d11d      	bne.n	40e6b0 <strstr+0x1fc>
  40e674:	3301      	adds	r3, #1
  40e676:	429c      	cmp	r4, r3
  40e678:	d8f6      	bhi.n	40e668 <strstr+0x1b4>
  40e67a:	f1b9 3fff 	cmp.w	r9, #4294967295
  40e67e:	d012      	beq.n	40e6a6 <strstr+0x1f2>
  40e680:	eb05 0209 	add.w	r2, r5, r9
  40e684:	f89a 1000 	ldrb.w	r1, [sl]
  40e688:	f81b 3002 	ldrb.w	r3, [fp, r2]
  40e68c:	4299      	cmp	r1, r3
  40e68e:	445a      	add	r2, fp
  40e690:	d114      	bne.n	40e6bc <strstr+0x208>
  40e692:	4653      	mov	r3, sl
  40e694:	e005      	b.n	40e6a2 <strstr+0x1ee>
  40e696:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
  40e69a:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
  40e69e:	4288      	cmp	r0, r1
  40e6a0:	d10c      	bne.n	40e6bc <strstr+0x208>
  40e6a2:	42b3      	cmp	r3, r6
  40e6a4:	d1f7      	bne.n	40e696 <strstr+0x1e2>
  40e6a6:	465f      	mov	r7, fp
  40e6a8:	1978      	adds	r0, r7, r5
  40e6aa:	b005      	add	sp, #20
  40e6ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40e6b0:	f1c8 0201 	rsb	r2, r8, #1
  40e6b4:	4415      	add	r5, r2
  40e6b6:	441d      	add	r5, r3
  40e6b8:	4638      	mov	r0, r7
  40e6ba:	e7ba      	b.n	40e632 <strstr+0x17e>
  40e6bc:	9b03      	ldr	r3, [sp, #12]
  40e6be:	4638      	mov	r0, r7
  40e6c0:	441d      	add	r5, r3
  40e6c2:	e7b6      	b.n	40e632 <strstr+0x17e>
  40e6c4:	780b      	ldrb	r3, [r1, #0]
  40e6c6:	b913      	cbnz	r3, 40e6ce <strstr+0x21a>
  40e6c8:	4770      	bx	lr
  40e6ca:	4641      	mov	r1, r8
  40e6cc:	e790      	b.n	40e5f0 <strstr+0x13c>
  40e6ce:	2000      	movs	r0, #0
  40e6d0:	4770      	bx	lr
  40e6d2:	bf00      	nop

0040e6d4 <_svfprintf_r>:
  40e6d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40e6d8:	b0c1      	sub	sp, #260	; 0x104
  40e6da:	460c      	mov	r4, r1
  40e6dc:	9109      	str	r1, [sp, #36]	; 0x24
  40e6de:	4615      	mov	r5, r2
  40e6e0:	930e      	str	r3, [sp, #56]	; 0x38
  40e6e2:	900a      	str	r0, [sp, #40]	; 0x28
  40e6e4:	f003 ff88 	bl	4125f8 <_localeconv_r>
  40e6e8:	6803      	ldr	r3, [r0, #0]
  40e6ea:	9317      	str	r3, [sp, #92]	; 0x5c
  40e6ec:	4618      	mov	r0, r3
  40e6ee:	f7ff fcc7 	bl	40e080 <strlen>
  40e6f2:	89a3      	ldrh	r3, [r4, #12]
  40e6f4:	9016      	str	r0, [sp, #88]	; 0x58
  40e6f6:	061e      	lsls	r6, r3, #24
  40e6f8:	d503      	bpl.n	40e702 <_svfprintf_r+0x2e>
  40e6fa:	6923      	ldr	r3, [r4, #16]
  40e6fc:	2b00      	cmp	r3, #0
  40e6fe:	f001 8119 	beq.w	40f934 <_svfprintf_r+0x1260>
  40e702:	2300      	movs	r3, #0
  40e704:	461a      	mov	r2, r3
  40e706:	9312      	str	r3, [sp, #72]	; 0x48
  40e708:	9325      	str	r3, [sp, #148]	; 0x94
  40e70a:	9324      	str	r3, [sp, #144]	; 0x90
  40e70c:	9319      	str	r3, [sp, #100]	; 0x64
  40e70e:	930b      	str	r3, [sp, #44]	; 0x2c
  40e710:	f8df a464 	ldr.w	sl, [pc, #1124]	; 40eb78 <_svfprintf_r+0x4a4>
  40e714:	9214      	str	r2, [sp, #80]	; 0x50
  40e716:	ab30      	add	r3, sp, #192	; 0xc0
  40e718:	9323      	str	r3, [sp, #140]	; 0x8c
  40e71a:	4699      	mov	r9, r3
  40e71c:	9215      	str	r2, [sp, #84]	; 0x54
  40e71e:	46a8      	mov	r8, r5
  40e720:	f898 3000 	ldrb.w	r3, [r8]
  40e724:	4644      	mov	r4, r8
  40e726:	b1eb      	cbz	r3, 40e764 <_svfprintf_r+0x90>
  40e728:	2b25      	cmp	r3, #37	; 0x25
  40e72a:	d102      	bne.n	40e732 <_svfprintf_r+0x5e>
  40e72c:	e01a      	b.n	40e764 <_svfprintf_r+0x90>
  40e72e:	2b25      	cmp	r3, #37	; 0x25
  40e730:	d003      	beq.n	40e73a <_svfprintf_r+0x66>
  40e732:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  40e736:	2b00      	cmp	r3, #0
  40e738:	d1f9      	bne.n	40e72e <_svfprintf_r+0x5a>
  40e73a:	ebc8 0504 	rsb	r5, r8, r4
  40e73e:	b18d      	cbz	r5, 40e764 <_svfprintf_r+0x90>
  40e740:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40e742:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40e744:	f8c9 8000 	str.w	r8, [r9]
  40e748:	3301      	adds	r3, #1
  40e74a:	442a      	add	r2, r5
  40e74c:	2b07      	cmp	r3, #7
  40e74e:	f8c9 5004 	str.w	r5, [r9, #4]
  40e752:	9225      	str	r2, [sp, #148]	; 0x94
  40e754:	9324      	str	r3, [sp, #144]	; 0x90
  40e756:	f300 80a6 	bgt.w	40e8a6 <_svfprintf_r+0x1d2>
  40e75a:	f109 0908 	add.w	r9, r9, #8
  40e75e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40e760:	442b      	add	r3, r5
  40e762:	930b      	str	r3, [sp, #44]	; 0x2c
  40e764:	7823      	ldrb	r3, [r4, #0]
  40e766:	2b00      	cmp	r3, #0
  40e768:	f000 80a6 	beq.w	40e8b8 <_svfprintf_r+0x1e4>
  40e76c:	2300      	movs	r3, #0
  40e76e:	461a      	mov	r2, r3
  40e770:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  40e774:	4619      	mov	r1, r3
  40e776:	930c      	str	r3, [sp, #48]	; 0x30
  40e778:	9307      	str	r3, [sp, #28]
  40e77a:	f04f 3bff 	mov.w	fp, #4294967295
  40e77e:	7863      	ldrb	r3, [r4, #1]
  40e780:	f104 0801 	add.w	r8, r4, #1
  40e784:	465d      	mov	r5, fp
  40e786:	f108 0801 	add.w	r8, r8, #1
  40e78a:	f1a3 0020 	sub.w	r0, r3, #32
  40e78e:	2858      	cmp	r0, #88	; 0x58
  40e790:	f200 8425 	bhi.w	40efde <_svfprintf_r+0x90a>
  40e794:	e8df f010 	tbh	[pc, r0, lsl #1]
  40e798:	04230388 	.word	0x04230388
  40e79c:	03900423 	.word	0x03900423
  40e7a0:	04230423 	.word	0x04230423
  40e7a4:	04230423 	.word	0x04230423
  40e7a8:	04230423 	.word	0x04230423
  40e7ac:	03a50397 	.word	0x03a50397
  40e7b0:	005d0423 	.word	0x005d0423
  40e7b4:	042300e2 	.word	0x042300e2
  40e7b8:	010500fe 	.word	0x010500fe
  40e7bc:	01050105 	.word	0x01050105
  40e7c0:	01050105 	.word	0x01050105
  40e7c4:	01050105 	.word	0x01050105
  40e7c8:	01050105 	.word	0x01050105
  40e7cc:	04230423 	.word	0x04230423
  40e7d0:	04230423 	.word	0x04230423
  40e7d4:	04230423 	.word	0x04230423
  40e7d8:	04230423 	.word	0x04230423
  40e7dc:	04230423 	.word	0x04230423
  40e7e0:	02810115 	.word	0x02810115
  40e7e4:	02810423 	.word	0x02810423
  40e7e8:	04230423 	.word	0x04230423
  40e7ec:	04230423 	.word	0x04230423
  40e7f0:	042302c6 	.word	0x042302c6
  40e7f4:	02cd0423 	.word	0x02cd0423
  40e7f8:	04230423 	.word	0x04230423
  40e7fc:	04230423 	.word	0x04230423
  40e800:	02f70423 	.word	0x02f70423
  40e804:	04230423 	.word	0x04230423
  40e808:	04230325 	.word	0x04230325
  40e80c:	04230423 	.word	0x04230423
  40e810:	04230423 	.word	0x04230423
  40e814:	04230423 	.word	0x04230423
  40e818:	04230423 	.word	0x04230423
  40e81c:	03660423 	.word	0x03660423
  40e820:	02810379 	.word	0x02810379
  40e824:	02810281 	.word	0x02810281
  40e828:	03790381 	.word	0x03790381
  40e82c:	04230423 	.word	0x04230423
  40e830:	042303d1 	.word	0x042303d1
  40e834:	00a303db 	.word	0x00a303db
  40e838:	03ee0064 	.word	0x03ee0064
  40e83c:	03f50423 	.word	0x03f50423
  40e840:	03aa0423 	.word	0x03aa0423
  40e844:	04230423 	.word	0x04230423
  40e848:	03bc      	.short	0x03bc
  40e84a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40e84c:	930e      	str	r3, [sp, #56]	; 0x38
  40e84e:	4240      	negs	r0, r0
  40e850:	900c      	str	r0, [sp, #48]	; 0x30
  40e852:	9b07      	ldr	r3, [sp, #28]
  40e854:	f043 0304 	orr.w	r3, r3, #4
  40e858:	9307      	str	r3, [sp, #28]
  40e85a:	f898 3000 	ldrb.w	r3, [r8]
  40e85e:	e792      	b.n	40e786 <_svfprintf_r+0xb2>
  40e860:	980e      	ldr	r0, [sp, #56]	; 0x38
  40e862:	46ab      	mov	fp, r5
  40e864:	2100      	movs	r1, #0
  40e866:	6804      	ldr	r4, [r0, #0]
  40e868:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40e86c:	1d07      	adds	r7, r0, #4
  40e86e:	9807      	ldr	r0, [sp, #28]
  40e870:	2330      	movs	r3, #48	; 0x30
  40e872:	2278      	movs	r2, #120	; 0x78
  40e874:	458b      	cmp	fp, r1
  40e876:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  40e87a:	f04f 0500 	mov.w	r5, #0
  40e87e:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
  40e882:	f040 0302 	orr.w	r3, r0, #2
  40e886:	f2c0 83c7 	blt.w	40f018 <_svfprintf_r+0x944>
  40e88a:	f020 0380 	bic.w	r3, r0, #128	; 0x80
  40e88e:	f043 0302 	orr.w	r3, r3, #2
  40e892:	9307      	str	r3, [sp, #28]
  40e894:	ea54 0305 	orrs.w	r3, r4, r5
  40e898:	970e      	str	r7, [sp, #56]	; 0x38
  40e89a:	f000 8393 	beq.w	40efc4 <_svfprintf_r+0x8f0>
  40e89e:	460f      	mov	r7, r1
  40e8a0:	9211      	str	r2, [sp, #68]	; 0x44
  40e8a2:	48b3      	ldr	r0, [pc, #716]	; (40eb70 <_svfprintf_r+0x49c>)
  40e8a4:	e2ce      	b.n	40ee44 <_svfprintf_r+0x770>
  40e8a6:	aa23      	add	r2, sp, #140	; 0x8c
  40e8a8:	9909      	ldr	r1, [sp, #36]	; 0x24
  40e8aa:	980a      	ldr	r0, [sp, #40]	; 0x28
  40e8ac:	f005 f854 	bl	413958 <__ssprint_r>
  40e8b0:	b948      	cbnz	r0, 40e8c6 <_svfprintf_r+0x1f2>
  40e8b2:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40e8b6:	e752      	b.n	40e75e <_svfprintf_r+0x8a>
  40e8b8:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40e8ba:	b123      	cbz	r3, 40e8c6 <_svfprintf_r+0x1f2>
  40e8bc:	980a      	ldr	r0, [sp, #40]	; 0x28
  40e8be:	9909      	ldr	r1, [sp, #36]	; 0x24
  40e8c0:	aa23      	add	r2, sp, #140	; 0x8c
  40e8c2:	f005 f849 	bl	413958 <__ssprint_r>
  40e8c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40e8c8:	899b      	ldrh	r3, [r3, #12]
  40e8ca:	f013 0f40 	tst.w	r3, #64	; 0x40
  40e8ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40e8d0:	bf18      	it	ne
  40e8d2:	f04f 33ff 	movne.w	r3, #4294967295
  40e8d6:	4618      	mov	r0, r3
  40e8d8:	b041      	add	sp, #260	; 0x104
  40e8da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40e8de:	9311      	str	r3, [sp, #68]	; 0x44
  40e8e0:	46ab      	mov	fp, r5
  40e8e2:	2a00      	cmp	r2, #0
  40e8e4:	f041 8223 	bne.w	40fd2e <_svfprintf_r+0x165a>
  40e8e8:	9a07      	ldr	r2, [sp, #28]
  40e8ea:	f012 0320 	ands.w	r3, r2, #32
  40e8ee:	f000 822e 	beq.w	40ed4e <_svfprintf_r+0x67a>
  40e8f2:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  40e8f4:	3707      	adds	r7, #7
  40e8f6:	f027 0307 	bic.w	r3, r7, #7
  40e8fa:	2700      	movs	r7, #0
  40e8fc:	f103 0108 	add.w	r1, r3, #8
  40e900:	45bb      	cmp	fp, r7
  40e902:	910e      	str	r1, [sp, #56]	; 0x38
  40e904:	e9d3 4500 	ldrd	r4, r5, [r3]
  40e908:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  40e90c:	f2c0 8752 	blt.w	40f7b4 <_svfprintf_r+0x10e0>
  40e910:	f022 0380 	bic.w	r3, r2, #128	; 0x80
  40e914:	9307      	str	r3, [sp, #28]
  40e916:	ea54 0305 	orrs.w	r3, r4, r5
  40e91a:	f000 8375 	beq.w	40f008 <_svfprintf_r+0x934>
  40e91e:	ae30      	add	r6, sp, #192	; 0xc0
  40e920:	08e2      	lsrs	r2, r4, #3
  40e922:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  40e926:	08e9      	lsrs	r1, r5, #3
  40e928:	f004 0307 	and.w	r3, r4, #7
  40e92c:	460d      	mov	r5, r1
  40e92e:	4614      	mov	r4, r2
  40e930:	3330      	adds	r3, #48	; 0x30
  40e932:	ea54 0205 	orrs.w	r2, r4, r5
  40e936:	f806 3d01 	strb.w	r3, [r6, #-1]!
  40e93a:	d1f1      	bne.n	40e920 <_svfprintf_r+0x24c>
  40e93c:	9a07      	ldr	r2, [sp, #28]
  40e93e:	07d1      	lsls	r1, r2, #31
  40e940:	f140 8084 	bpl.w	40ea4c <_svfprintf_r+0x378>
  40e944:	2b30      	cmp	r3, #48	; 0x30
  40e946:	f000 8081 	beq.w	40ea4c <_svfprintf_r+0x378>
  40e94a:	2230      	movs	r2, #48	; 0x30
  40e94c:	1e73      	subs	r3, r6, #1
  40e94e:	f806 2c01 	strb.w	r2, [r6, #-1]
  40e952:	aa30      	add	r2, sp, #192	; 0xc0
  40e954:	1ad2      	subs	r2, r2, r3
  40e956:	920d      	str	r2, [sp, #52]	; 0x34
  40e958:	461e      	mov	r6, r3
  40e95a:	e07a      	b.n	40ea52 <_svfprintf_r+0x37e>
  40e95c:	f898 3000 	ldrb.w	r3, [r8]
  40e960:	2b2a      	cmp	r3, #42	; 0x2a
  40e962:	f108 0401 	add.w	r4, r8, #1
  40e966:	f001 81b1 	beq.w	40fccc <_svfprintf_r+0x15f8>
  40e96a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40e96e:	2809      	cmp	r0, #9
  40e970:	bf98      	it	ls
  40e972:	2500      	movls	r5, #0
  40e974:	f201 8164 	bhi.w	40fc40 <_svfprintf_r+0x156c>
  40e978:	f814 3b01 	ldrb.w	r3, [r4], #1
  40e97c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  40e980:	eb00 0545 	add.w	r5, r0, r5, lsl #1
  40e984:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40e988:	2809      	cmp	r0, #9
  40e98a:	d9f5      	bls.n	40e978 <_svfprintf_r+0x2a4>
  40e98c:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
  40e990:	46a0      	mov	r8, r4
  40e992:	e6fa      	b.n	40e78a <_svfprintf_r+0xb6>
  40e994:	9b07      	ldr	r3, [sp, #28]
  40e996:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40e99a:	9307      	str	r3, [sp, #28]
  40e99c:	f898 3000 	ldrb.w	r3, [r8]
  40e9a0:	e6f1      	b.n	40e786 <_svfprintf_r+0xb2>
  40e9a2:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40e9a6:	2300      	movs	r3, #0
  40e9a8:	461c      	mov	r4, r3
  40e9aa:	f818 3b01 	ldrb.w	r3, [r8], #1
  40e9ae:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40e9b2:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  40e9b6:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40e9ba:	2809      	cmp	r0, #9
  40e9bc:	d9f5      	bls.n	40e9aa <_svfprintf_r+0x2d6>
  40e9be:	940c      	str	r4, [sp, #48]	; 0x30
  40e9c0:	e6e3      	b.n	40e78a <_svfprintf_r+0xb6>
  40e9c2:	9311      	str	r3, [sp, #68]	; 0x44
  40e9c4:	46ab      	mov	fp, r5
  40e9c6:	2a00      	cmp	r2, #0
  40e9c8:	f041 81c9 	bne.w	40fd5e <_svfprintf_r+0x168a>
  40e9cc:	9b07      	ldr	r3, [sp, #28]
  40e9ce:	f043 0310 	orr.w	r3, r3, #16
  40e9d2:	9307      	str	r3, [sp, #28]
  40e9d4:	9b07      	ldr	r3, [sp, #28]
  40e9d6:	0698      	lsls	r0, r3, #26
  40e9d8:	f140 8530 	bpl.w	40f43c <_svfprintf_r+0xd68>
  40e9dc:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  40e9de:	3707      	adds	r7, #7
  40e9e0:	f027 0707 	bic.w	r7, r7, #7
  40e9e4:	e9d7 2300 	ldrd	r2, r3, [r7]
  40e9e8:	f107 0108 	add.w	r1, r7, #8
  40e9ec:	910e      	str	r1, [sp, #56]	; 0x38
  40e9ee:	4614      	mov	r4, r2
  40e9f0:	461d      	mov	r5, r3
  40e9f2:	2a00      	cmp	r2, #0
  40e9f4:	f173 0300 	sbcs.w	r3, r3, #0
  40e9f8:	f2c0 855b 	blt.w	40f4b2 <_svfprintf_r+0xdde>
  40e9fc:	f1bb 0f00 	cmp.w	fp, #0
  40ea00:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40ea04:	f2c0 8538 	blt.w	40f478 <_svfprintf_r+0xda4>
  40ea08:	9b07      	ldr	r3, [sp, #28]
  40ea0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  40ea0e:	9307      	str	r3, [sp, #28]
  40ea10:	ea54 0305 	orrs.w	r3, r4, r5
  40ea14:	f000 81db 	beq.w	40edce <_svfprintf_r+0x6fa>
  40ea18:	2d00      	cmp	r5, #0
  40ea1a:	bf08      	it	eq
  40ea1c:	2c0a      	cmpeq	r4, #10
  40ea1e:	f0c0 81db 	bcc.w	40edd8 <_svfprintf_r+0x704>
  40ea22:	ae30      	add	r6, sp, #192	; 0xc0
  40ea24:	4620      	mov	r0, r4
  40ea26:	4629      	mov	r1, r5
  40ea28:	220a      	movs	r2, #10
  40ea2a:	2300      	movs	r3, #0
  40ea2c:	f005 fe70 	bl	414710 <__aeabi_uldivmod>
  40ea30:	3230      	adds	r2, #48	; 0x30
  40ea32:	f806 2d01 	strb.w	r2, [r6, #-1]!
  40ea36:	4620      	mov	r0, r4
  40ea38:	4629      	mov	r1, r5
  40ea3a:	2300      	movs	r3, #0
  40ea3c:	220a      	movs	r2, #10
  40ea3e:	f005 fe67 	bl	414710 <__aeabi_uldivmod>
  40ea42:	4604      	mov	r4, r0
  40ea44:	460d      	mov	r5, r1
  40ea46:	ea54 0305 	orrs.w	r3, r4, r5
  40ea4a:	d1eb      	bne.n	40ea24 <_svfprintf_r+0x350>
  40ea4c:	ab30      	add	r3, sp, #192	; 0xc0
  40ea4e:	1b9b      	subs	r3, r3, r6
  40ea50:	930d      	str	r3, [sp, #52]	; 0x34
  40ea52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40ea54:	455b      	cmp	r3, fp
  40ea56:	bfb8      	it	lt
  40ea58:	465b      	movlt	r3, fp
  40ea5a:	9308      	str	r3, [sp, #32]
  40ea5c:	2300      	movs	r3, #0
  40ea5e:	9313      	str	r3, [sp, #76]	; 0x4c
  40ea60:	b117      	cbz	r7, 40ea68 <_svfprintf_r+0x394>
  40ea62:	9b08      	ldr	r3, [sp, #32]
  40ea64:	3301      	adds	r3, #1
  40ea66:	9308      	str	r3, [sp, #32]
  40ea68:	9b07      	ldr	r3, [sp, #28]
  40ea6a:	f013 0302 	ands.w	r3, r3, #2
  40ea6e:	930f      	str	r3, [sp, #60]	; 0x3c
  40ea70:	d002      	beq.n	40ea78 <_svfprintf_r+0x3a4>
  40ea72:	9b08      	ldr	r3, [sp, #32]
  40ea74:	3302      	adds	r3, #2
  40ea76:	9308      	str	r3, [sp, #32]
  40ea78:	9b07      	ldr	r3, [sp, #28]
  40ea7a:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  40ea7e:	9310      	str	r3, [sp, #64]	; 0x40
  40ea80:	f040 82d7 	bne.w	40f032 <_svfprintf_r+0x95e>
  40ea84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40ea86:	9a08      	ldr	r2, [sp, #32]
  40ea88:	1a9d      	subs	r5, r3, r2
  40ea8a:	2d00      	cmp	r5, #0
  40ea8c:	f340 82d1 	ble.w	40f032 <_svfprintf_r+0x95e>
  40ea90:	2d10      	cmp	r5, #16
  40ea92:	9925      	ldr	r1, [sp, #148]	; 0x94
  40ea94:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40ea96:	4f37      	ldr	r7, [pc, #220]	; (40eb74 <_svfprintf_r+0x4a0>)
  40ea98:	dd27      	ble.n	40eaea <_svfprintf_r+0x416>
  40ea9a:	9618      	str	r6, [sp, #96]	; 0x60
  40ea9c:	4648      	mov	r0, r9
  40ea9e:	2410      	movs	r4, #16
  40eaa0:	46b9      	mov	r9, r7
  40eaa2:	9e09      	ldr	r6, [sp, #36]	; 0x24
  40eaa4:	462f      	mov	r7, r5
  40eaa6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40eaa8:	e004      	b.n	40eab4 <_svfprintf_r+0x3e0>
  40eaaa:	3f10      	subs	r7, #16
  40eaac:	2f10      	cmp	r7, #16
  40eaae:	f100 0008 	add.w	r0, r0, #8
  40eab2:	dd16      	ble.n	40eae2 <_svfprintf_r+0x40e>
  40eab4:	3201      	adds	r2, #1
  40eab6:	4b2f      	ldr	r3, [pc, #188]	; (40eb74 <_svfprintf_r+0x4a0>)
  40eab8:	9224      	str	r2, [sp, #144]	; 0x90
  40eaba:	3110      	adds	r1, #16
  40eabc:	2a07      	cmp	r2, #7
  40eabe:	9125      	str	r1, [sp, #148]	; 0x94
  40eac0:	e880 0018 	stmia.w	r0, {r3, r4}
  40eac4:	ddf1      	ble.n	40eaaa <_svfprintf_r+0x3d6>
  40eac6:	aa23      	add	r2, sp, #140	; 0x8c
  40eac8:	4631      	mov	r1, r6
  40eaca:	4628      	mov	r0, r5
  40eacc:	f004 ff44 	bl	413958 <__ssprint_r>
  40ead0:	2800      	cmp	r0, #0
  40ead2:	f47f aef8 	bne.w	40e8c6 <_svfprintf_r+0x1f2>
  40ead6:	3f10      	subs	r7, #16
  40ead8:	2f10      	cmp	r7, #16
  40eada:	9925      	ldr	r1, [sp, #148]	; 0x94
  40eadc:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40eade:	a830      	add	r0, sp, #192	; 0xc0
  40eae0:	dce8      	bgt.n	40eab4 <_svfprintf_r+0x3e0>
  40eae2:	9e18      	ldr	r6, [sp, #96]	; 0x60
  40eae4:	463d      	mov	r5, r7
  40eae6:	464f      	mov	r7, r9
  40eae8:	4681      	mov	r9, r0
  40eaea:	3201      	adds	r2, #1
  40eaec:	186c      	adds	r4, r5, r1
  40eaee:	2a07      	cmp	r2, #7
  40eaf0:	9425      	str	r4, [sp, #148]	; 0x94
  40eaf2:	9224      	str	r2, [sp, #144]	; 0x90
  40eaf4:	f8c9 7000 	str.w	r7, [r9]
  40eaf8:	f8c9 5004 	str.w	r5, [r9, #4]
  40eafc:	f300 8428 	bgt.w	40f350 <_svfprintf_r+0xc7c>
  40eb00:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40eb04:	f109 0908 	add.w	r9, r9, #8
  40eb08:	b177      	cbz	r7, 40eb28 <_svfprintf_r+0x454>
  40eb0a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40eb0c:	3301      	adds	r3, #1
  40eb0e:	3401      	adds	r4, #1
  40eb10:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
  40eb14:	2201      	movs	r2, #1
  40eb16:	2b07      	cmp	r3, #7
  40eb18:	9425      	str	r4, [sp, #148]	; 0x94
  40eb1a:	9324      	str	r3, [sp, #144]	; 0x90
  40eb1c:	e889 0006 	stmia.w	r9, {r1, r2}
  40eb20:	f300 83a0 	bgt.w	40f264 <_svfprintf_r+0xb90>
  40eb24:	f109 0908 	add.w	r9, r9, #8
  40eb28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40eb2a:	b16b      	cbz	r3, 40eb48 <_svfprintf_r+0x474>
  40eb2c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40eb2e:	3301      	adds	r3, #1
  40eb30:	3402      	adds	r4, #2
  40eb32:	a91c      	add	r1, sp, #112	; 0x70
  40eb34:	2202      	movs	r2, #2
  40eb36:	2b07      	cmp	r3, #7
  40eb38:	9425      	str	r4, [sp, #148]	; 0x94
  40eb3a:	9324      	str	r3, [sp, #144]	; 0x90
  40eb3c:	e889 0006 	stmia.w	r9, {r1, r2}
  40eb40:	f300 839c 	bgt.w	40f27c <_svfprintf_r+0xba8>
  40eb44:	f109 0908 	add.w	r9, r9, #8
  40eb48:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40eb4a:	2b80      	cmp	r3, #128	; 0x80
  40eb4c:	f000 82d5 	beq.w	40f0fa <_svfprintf_r+0xa26>
  40eb50:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40eb52:	ebc3 070b 	rsb	r7, r3, fp
  40eb56:	2f00      	cmp	r7, #0
  40eb58:	dd39      	ble.n	40ebce <_svfprintf_r+0x4fa>
  40eb5a:	4a07      	ldr	r2, [pc, #28]	; (40eb78 <_svfprintf_r+0x4a4>)
  40eb5c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40eb5e:	920f      	str	r2, [sp, #60]	; 0x3c
  40eb60:	2f10      	cmp	r7, #16
  40eb62:	dd28      	ble.n	40ebb6 <_svfprintf_r+0x4e2>
  40eb64:	4622      	mov	r2, r4
  40eb66:	f04f 0b10 	mov.w	fp, #16
  40eb6a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40eb6c:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40eb6e:	e00a      	b.n	40eb86 <_svfprintf_r+0x4b2>
  40eb70:	00417740 	.word	0x00417740
  40eb74:	00417760 	.word	0x00417760
  40eb78:	0041770c 	.word	0x0041770c
  40eb7c:	3f10      	subs	r7, #16
  40eb7e:	2f10      	cmp	r7, #16
  40eb80:	f109 0908 	add.w	r9, r9, #8
  40eb84:	dd16      	ble.n	40ebb4 <_svfprintf_r+0x4e0>
  40eb86:	3301      	adds	r3, #1
  40eb88:	3210      	adds	r2, #16
  40eb8a:	2b07      	cmp	r3, #7
  40eb8c:	9225      	str	r2, [sp, #148]	; 0x94
  40eb8e:	9324      	str	r3, [sp, #144]	; 0x90
  40eb90:	e889 0c00 	stmia.w	r9, {sl, fp}
  40eb94:	ddf2      	ble.n	40eb7c <_svfprintf_r+0x4a8>
  40eb96:	aa23      	add	r2, sp, #140	; 0x8c
  40eb98:	4621      	mov	r1, r4
  40eb9a:	4628      	mov	r0, r5
  40eb9c:	f004 fedc 	bl	413958 <__ssprint_r>
  40eba0:	2800      	cmp	r0, #0
  40eba2:	f47f ae90 	bne.w	40e8c6 <_svfprintf_r+0x1f2>
  40eba6:	3f10      	subs	r7, #16
  40eba8:	2f10      	cmp	r7, #16
  40ebaa:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40ebac:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40ebae:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40ebb2:	dce8      	bgt.n	40eb86 <_svfprintf_r+0x4b2>
  40ebb4:	4614      	mov	r4, r2
  40ebb6:	3301      	adds	r3, #1
  40ebb8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40ebba:	9324      	str	r3, [sp, #144]	; 0x90
  40ebbc:	443c      	add	r4, r7
  40ebbe:	2b07      	cmp	r3, #7
  40ebc0:	9425      	str	r4, [sp, #148]	; 0x94
  40ebc2:	e889 0084 	stmia.w	r9, {r2, r7}
  40ebc6:	f300 8341 	bgt.w	40f24c <_svfprintf_r+0xb78>
  40ebca:	f109 0908 	add.w	r9, r9, #8
  40ebce:	9b07      	ldr	r3, [sp, #28]
  40ebd0:	05da      	lsls	r2, r3, #23
  40ebd2:	f100 8230 	bmi.w	40f036 <_svfprintf_r+0x962>
  40ebd6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40ebd8:	990d      	ldr	r1, [sp, #52]	; 0x34
  40ebda:	f8c9 6000 	str.w	r6, [r9]
  40ebde:	3301      	adds	r3, #1
  40ebe0:	440c      	add	r4, r1
  40ebe2:	2b07      	cmp	r3, #7
  40ebe4:	9425      	str	r4, [sp, #148]	; 0x94
  40ebe6:	f8c9 1004 	str.w	r1, [r9, #4]
  40ebea:	9324      	str	r3, [sp, #144]	; 0x90
  40ebec:	f300 8318 	bgt.w	40f220 <_svfprintf_r+0xb4c>
  40ebf0:	f109 0908 	add.w	r9, r9, #8
  40ebf4:	9b07      	ldr	r3, [sp, #28]
  40ebf6:	0759      	lsls	r1, r3, #29
  40ebf8:	d53f      	bpl.n	40ec7a <_svfprintf_r+0x5a6>
  40ebfa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40ebfc:	9a08      	ldr	r2, [sp, #32]
  40ebfe:	1a9d      	subs	r5, r3, r2
  40ec00:	2d00      	cmp	r5, #0
  40ec02:	dd3a      	ble.n	40ec7a <_svfprintf_r+0x5a6>
  40ec04:	2d10      	cmp	r5, #16
  40ec06:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40ec08:	4fbc      	ldr	r7, [pc, #752]	; (40eefc <_svfprintf_r+0x828>)
  40ec0a:	dd23      	ble.n	40ec54 <_svfprintf_r+0x580>
  40ec0c:	4622      	mov	r2, r4
  40ec0e:	2610      	movs	r6, #16
  40ec10:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  40ec14:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40ec16:	e004      	b.n	40ec22 <_svfprintf_r+0x54e>
  40ec18:	3d10      	subs	r5, #16
  40ec1a:	2d10      	cmp	r5, #16
  40ec1c:	f109 0908 	add.w	r9, r9, #8
  40ec20:	dd17      	ble.n	40ec52 <_svfprintf_r+0x57e>
  40ec22:	3301      	adds	r3, #1
  40ec24:	49b5      	ldr	r1, [pc, #724]	; (40eefc <_svfprintf_r+0x828>)
  40ec26:	9324      	str	r3, [sp, #144]	; 0x90
  40ec28:	3210      	adds	r2, #16
  40ec2a:	2b07      	cmp	r3, #7
  40ec2c:	9225      	str	r2, [sp, #148]	; 0x94
  40ec2e:	e889 0042 	stmia.w	r9, {r1, r6}
  40ec32:	ddf1      	ble.n	40ec18 <_svfprintf_r+0x544>
  40ec34:	aa23      	add	r2, sp, #140	; 0x8c
  40ec36:	4621      	mov	r1, r4
  40ec38:	4658      	mov	r0, fp
  40ec3a:	f004 fe8d 	bl	413958 <__ssprint_r>
  40ec3e:	2800      	cmp	r0, #0
  40ec40:	f47f ae41 	bne.w	40e8c6 <_svfprintf_r+0x1f2>
  40ec44:	3d10      	subs	r5, #16
  40ec46:	2d10      	cmp	r5, #16
  40ec48:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40ec4a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40ec4c:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40ec50:	dce7      	bgt.n	40ec22 <_svfprintf_r+0x54e>
  40ec52:	4614      	mov	r4, r2
  40ec54:	3301      	adds	r3, #1
  40ec56:	442c      	add	r4, r5
  40ec58:	2b07      	cmp	r3, #7
  40ec5a:	9425      	str	r4, [sp, #148]	; 0x94
  40ec5c:	9324      	str	r3, [sp, #144]	; 0x90
  40ec5e:	f8c9 7000 	str.w	r7, [r9]
  40ec62:	f8c9 5004 	str.w	r5, [r9, #4]
  40ec66:	dd08      	ble.n	40ec7a <_svfprintf_r+0x5a6>
  40ec68:	aa23      	add	r2, sp, #140	; 0x8c
  40ec6a:	9909      	ldr	r1, [sp, #36]	; 0x24
  40ec6c:	980a      	ldr	r0, [sp, #40]	; 0x28
  40ec6e:	f004 fe73 	bl	413958 <__ssprint_r>
  40ec72:	2800      	cmp	r0, #0
  40ec74:	f47f ae27 	bne.w	40e8c6 <_svfprintf_r+0x1f2>
  40ec78:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40ec7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40ec7c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40ec7e:	9908      	ldr	r1, [sp, #32]
  40ec80:	428a      	cmp	r2, r1
  40ec82:	bfac      	ite	ge
  40ec84:	189b      	addge	r3, r3, r2
  40ec86:	185b      	addlt	r3, r3, r1
  40ec88:	930b      	str	r3, [sp, #44]	; 0x2c
  40ec8a:	2c00      	cmp	r4, #0
  40ec8c:	f040 82d4 	bne.w	40f238 <_svfprintf_r+0xb64>
  40ec90:	2300      	movs	r3, #0
  40ec92:	9324      	str	r3, [sp, #144]	; 0x90
  40ec94:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40ec98:	e542      	b.n	40e720 <_svfprintf_r+0x4c>
  40ec9a:	9311      	str	r3, [sp, #68]	; 0x44
  40ec9c:	46ab      	mov	fp, r5
  40ec9e:	2a00      	cmp	r2, #0
  40eca0:	f041 8059 	bne.w	40fd56 <_svfprintf_r+0x1682>
  40eca4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  40eca6:	3707      	adds	r7, #7
  40eca8:	f027 0307 	bic.w	r3, r7, #7
  40ecac:	f103 0208 	add.w	r2, r3, #8
  40ecb0:	920e      	str	r2, [sp, #56]	; 0x38
  40ecb2:	681a      	ldr	r2, [r3, #0]
  40ecb4:	9214      	str	r2, [sp, #80]	; 0x50
  40ecb6:	685b      	ldr	r3, [r3, #4]
  40ecb8:	9315      	str	r3, [sp, #84]	; 0x54
  40ecba:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40ecbc:	9d14      	ldr	r5, [sp, #80]	; 0x50
  40ecbe:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  40ecc2:	4628      	mov	r0, r5
  40ecc4:	4621      	mov	r1, r4
  40ecc6:	f04f 32ff 	mov.w	r2, #4294967295
  40ecca:	4b8d      	ldr	r3, [pc, #564]	; (40ef00 <_svfprintf_r+0x82c>)
  40eccc:	f005 fce2 	bl	414694 <__aeabi_dcmpun>
  40ecd0:	2800      	cmp	r0, #0
  40ecd2:	f040 84c1 	bne.w	40f658 <_svfprintf_r+0xf84>
  40ecd6:	4628      	mov	r0, r5
  40ecd8:	4621      	mov	r1, r4
  40ecda:	f04f 32ff 	mov.w	r2, #4294967295
  40ecde:	4b88      	ldr	r3, [pc, #544]	; (40ef00 <_svfprintf_r+0x82c>)
  40ece0:	f005 fcba 	bl	414658 <__aeabi_dcmple>
  40ece4:	2800      	cmp	r0, #0
  40ece6:	f040 84b7 	bne.w	40f658 <_svfprintf_r+0xf84>
  40ecea:	9814      	ldr	r0, [sp, #80]	; 0x50
  40ecec:	9915      	ldr	r1, [sp, #84]	; 0x54
  40ecee:	2200      	movs	r2, #0
  40ecf0:	2300      	movs	r3, #0
  40ecf2:	f005 fca7 	bl	414644 <__aeabi_dcmplt>
  40ecf6:	2800      	cmp	r0, #0
  40ecf8:	f040 874b 	bne.w	40fb92 <_svfprintf_r+0x14be>
  40ecfc:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40ed00:	4e80      	ldr	r6, [pc, #512]	; (40ef04 <_svfprintf_r+0x830>)
  40ed02:	4b81      	ldr	r3, [pc, #516]	; (40ef08 <_svfprintf_r+0x834>)
  40ed04:	9907      	ldr	r1, [sp, #28]
  40ed06:	f021 0180 	bic.w	r1, r1, #128	; 0x80
  40ed0a:	9107      	str	r1, [sp, #28]
  40ed0c:	9911      	ldr	r1, [sp, #68]	; 0x44
  40ed0e:	2203      	movs	r2, #3
  40ed10:	f04f 0b00 	mov.w	fp, #0
  40ed14:	9208      	str	r2, [sp, #32]
  40ed16:	2947      	cmp	r1, #71	; 0x47
  40ed18:	bfd8      	it	le
  40ed1a:	461e      	movle	r6, r3
  40ed1c:	920d      	str	r2, [sp, #52]	; 0x34
  40ed1e:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
  40ed22:	e69d      	b.n	40ea60 <_svfprintf_r+0x38c>
  40ed24:	9b07      	ldr	r3, [sp, #28]
  40ed26:	f043 0308 	orr.w	r3, r3, #8
  40ed2a:	9307      	str	r3, [sp, #28]
  40ed2c:	f898 3000 	ldrb.w	r3, [r8]
  40ed30:	e529      	b.n	40e786 <_svfprintf_r+0xb2>
  40ed32:	9311      	str	r3, [sp, #68]	; 0x44
  40ed34:	46ab      	mov	fp, r5
  40ed36:	2a00      	cmp	r2, #0
  40ed38:	f041 8009 	bne.w	40fd4e <_svfprintf_r+0x167a>
  40ed3c:	9b07      	ldr	r3, [sp, #28]
  40ed3e:	f043 0310 	orr.w	r3, r3, #16
  40ed42:	9307      	str	r3, [sp, #28]
  40ed44:	9a07      	ldr	r2, [sp, #28]
  40ed46:	f012 0320 	ands.w	r3, r2, #32
  40ed4a:	f47f add2 	bne.w	40e8f2 <_svfprintf_r+0x21e>
  40ed4e:	9907      	ldr	r1, [sp, #28]
  40ed50:	f011 0210 	ands.w	r2, r1, #16
  40ed54:	f000 8507 	beq.w	40f766 <_svfprintf_r+0x1092>
  40ed58:	980e      	ldr	r0, [sp, #56]	; 0x38
  40ed5a:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  40ed5e:	f1bb 0f00 	cmp.w	fp, #0
  40ed62:	6804      	ldr	r4, [r0, #0]
  40ed64:	f100 0704 	add.w	r7, r0, #4
  40ed68:	f04f 0500 	mov.w	r5, #0
  40ed6c:	f2c0 8521 	blt.w	40f7b2 <_svfprintf_r+0x10de>
  40ed70:	460a      	mov	r2, r1
  40ed72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  40ed76:	9207      	str	r2, [sp, #28]
  40ed78:	ea54 0205 	orrs.w	r2, r4, r5
  40ed7c:	970e      	str	r7, [sp, #56]	; 0x38
  40ed7e:	f000 8143 	beq.w	40f008 <_svfprintf_r+0x934>
  40ed82:	461f      	mov	r7, r3
  40ed84:	e5cb      	b.n	40e91e <_svfprintf_r+0x24a>
  40ed86:	9311      	str	r3, [sp, #68]	; 0x44
  40ed88:	46ab      	mov	fp, r5
  40ed8a:	2a00      	cmp	r2, #0
  40ed8c:	f040 87d7 	bne.w	40fd3e <_svfprintf_r+0x166a>
  40ed90:	9b07      	ldr	r3, [sp, #28]
  40ed92:	f043 0310 	orr.w	r3, r3, #16
  40ed96:	9307      	str	r3, [sp, #28]
  40ed98:	9a07      	ldr	r2, [sp, #28]
  40ed9a:	f012 0320 	ands.w	r3, r2, #32
  40ed9e:	f000 8332 	beq.w	40f406 <_svfprintf_r+0xd32>
  40eda2:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  40eda4:	3707      	adds	r7, #7
  40eda6:	f027 0307 	bic.w	r3, r7, #7
  40edaa:	2700      	movs	r7, #0
  40edac:	f103 0108 	add.w	r1, r3, #8
  40edb0:	45bb      	cmp	fp, r7
  40edb2:	910e      	str	r1, [sp, #56]	; 0x38
  40edb4:	e9d3 4500 	ldrd	r4, r5, [r3]
  40edb8:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  40edbc:	f2c0 835c 	blt.w	40f478 <_svfprintf_r+0xda4>
  40edc0:	f022 0380 	bic.w	r3, r2, #128	; 0x80
  40edc4:	9307      	str	r3, [sp, #28]
  40edc6:	ea54 0305 	orrs.w	r3, r4, r5
  40edca:	f47f ae25 	bne.w	40ea18 <_svfprintf_r+0x344>
  40edce:	f1bb 0f00 	cmp.w	fp, #0
  40edd2:	f000 80fe 	beq.w	40efd2 <_svfprintf_r+0x8fe>
  40edd6:	2400      	movs	r4, #0
  40edd8:	ae40      	add	r6, sp, #256	; 0x100
  40edda:	3430      	adds	r4, #48	; 0x30
  40eddc:	f806 4d41 	strb.w	r4, [r6, #-65]!
  40ede0:	e634      	b.n	40ea4c <_svfprintf_r+0x378>
  40ede2:	9311      	str	r3, [sp, #68]	; 0x44
  40ede4:	46ab      	mov	fp, r5
  40ede6:	2a00      	cmp	r2, #0
  40ede8:	f040 87a5 	bne.w	40fd36 <_svfprintf_r+0x1662>
  40edec:	9b07      	ldr	r3, [sp, #28]
  40edee:	4847      	ldr	r0, [pc, #284]	; (40ef0c <_svfprintf_r+0x838>)
  40edf0:	069d      	lsls	r5, r3, #26
  40edf2:	f140 8097 	bpl.w	40ef24 <_svfprintf_r+0x850>
  40edf6:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  40edf8:	3707      	adds	r7, #7
  40edfa:	f027 0307 	bic.w	r3, r7, #7
  40edfe:	e9d3 4500 	ldrd	r4, r5, [r3]
  40ee02:	f103 0208 	add.w	r2, r3, #8
  40ee06:	920e      	str	r2, [sp, #56]	; 0x38
  40ee08:	9a07      	ldr	r2, [sp, #28]
  40ee0a:	f012 0701 	ands.w	r7, r2, #1
  40ee0e:	f000 8241 	beq.w	40f294 <_svfprintf_r+0xbc0>
  40ee12:	ea54 0305 	orrs.w	r3, r4, r5
  40ee16:	f000 84f5 	beq.w	40f804 <_svfprintf_r+0x1130>
  40ee1a:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  40ee1e:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
  40ee22:	2700      	movs	r7, #0
  40ee24:	9a07      	ldr	r2, [sp, #28]
  40ee26:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  40ee2a:	2330      	movs	r3, #48	; 0x30
  40ee2c:	45bb      	cmp	fp, r7
  40ee2e:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  40ee32:	f042 0302 	orr.w	r3, r2, #2
  40ee36:	f2c0 86a9 	blt.w	40fb8c <_svfprintf_r+0x14b8>
  40ee3a:	f022 0380 	bic.w	r3, r2, #128	; 0x80
  40ee3e:	f043 0302 	orr.w	r3, r3, #2
  40ee42:	9307      	str	r3, [sp, #28]
  40ee44:	ae30      	add	r6, sp, #192	; 0xc0
  40ee46:	0923      	lsrs	r3, r4, #4
  40ee48:	f004 010f 	and.w	r1, r4, #15
  40ee4c:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  40ee50:	092a      	lsrs	r2, r5, #4
  40ee52:	461c      	mov	r4, r3
  40ee54:	4615      	mov	r5, r2
  40ee56:	5c43      	ldrb	r3, [r0, r1]
  40ee58:	f806 3d01 	strb.w	r3, [r6, #-1]!
  40ee5c:	ea54 0305 	orrs.w	r3, r4, r5
  40ee60:	d1f1      	bne.n	40ee46 <_svfprintf_r+0x772>
  40ee62:	e5f3      	b.n	40ea4c <_svfprintf_r+0x378>
  40ee64:	990e      	ldr	r1, [sp, #56]	; 0x38
  40ee66:	9311      	str	r3, [sp, #68]	; 0x44
  40ee68:	680a      	ldr	r2, [r1, #0]
  40ee6a:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  40ee6e:	2300      	movs	r3, #0
  40ee70:	460a      	mov	r2, r1
  40ee72:	461f      	mov	r7, r3
  40ee74:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  40ee78:	3204      	adds	r2, #4
  40ee7a:	2301      	movs	r3, #1
  40ee7c:	9308      	str	r3, [sp, #32]
  40ee7e:	46bb      	mov	fp, r7
  40ee80:	9713      	str	r7, [sp, #76]	; 0x4c
  40ee82:	920e      	str	r2, [sp, #56]	; 0x38
  40ee84:	930d      	str	r3, [sp, #52]	; 0x34
  40ee86:	ae26      	add	r6, sp, #152	; 0x98
  40ee88:	e5ee      	b.n	40ea68 <_svfprintf_r+0x394>
  40ee8a:	9311      	str	r3, [sp, #68]	; 0x44
  40ee8c:	46ab      	mov	fp, r5
  40ee8e:	2a00      	cmp	r2, #0
  40ee90:	f43f ada0 	beq.w	40e9d4 <_svfprintf_r+0x300>
  40ee94:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40ee98:	e59c      	b.n	40e9d4 <_svfprintf_r+0x300>
  40ee9a:	9b07      	ldr	r3, [sp, #28]
  40ee9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40eea0:	9307      	str	r3, [sp, #28]
  40eea2:	f898 3000 	ldrb.w	r3, [r8]
  40eea6:	e46e      	b.n	40e786 <_svfprintf_r+0xb2>
  40eea8:	f898 3000 	ldrb.w	r3, [r8]
  40eeac:	2900      	cmp	r1, #0
  40eeae:	f47f ac6a 	bne.w	40e786 <_svfprintf_r+0xb2>
  40eeb2:	2201      	movs	r2, #1
  40eeb4:	2120      	movs	r1, #32
  40eeb6:	e466      	b.n	40e786 <_svfprintf_r+0xb2>
  40eeb8:	9b07      	ldr	r3, [sp, #28]
  40eeba:	f043 0301 	orr.w	r3, r3, #1
  40eebe:	9307      	str	r3, [sp, #28]
  40eec0:	f898 3000 	ldrb.w	r3, [r8]
  40eec4:	e45f      	b.n	40e786 <_svfprintf_r+0xb2>
  40eec6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  40eec8:	6823      	ldr	r3, [r4, #0]
  40eeca:	930c      	str	r3, [sp, #48]	; 0x30
  40eecc:	4618      	mov	r0, r3
  40eece:	2800      	cmp	r0, #0
  40eed0:	4623      	mov	r3, r4
  40eed2:	f103 0304 	add.w	r3, r3, #4
  40eed6:	f6ff acb8 	blt.w	40e84a <_svfprintf_r+0x176>
  40eeda:	930e      	str	r3, [sp, #56]	; 0x38
  40eedc:	f898 3000 	ldrb.w	r3, [r8]
  40eee0:	e451      	b.n	40e786 <_svfprintf_r+0xb2>
  40eee2:	f898 3000 	ldrb.w	r3, [r8]
  40eee6:	2201      	movs	r2, #1
  40eee8:	212b      	movs	r1, #43	; 0x2b
  40eeea:	e44c      	b.n	40e786 <_svfprintf_r+0xb2>
  40eeec:	9311      	str	r3, [sp, #68]	; 0x44
  40eeee:	46ab      	mov	fp, r5
  40eef0:	2a00      	cmp	r2, #0
  40eef2:	f43f af51 	beq.w	40ed98 <_svfprintf_r+0x6c4>
  40eef6:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40eefa:	e74d      	b.n	40ed98 <_svfprintf_r+0x6c4>
  40eefc:	00417760 	.word	0x00417760
  40ef00:	7fefffff 	.word	0x7fefffff
  40ef04:	00417720 	.word	0x00417720
  40ef08:	0041771c 	.word	0x0041771c
  40ef0c:	0041772c 	.word	0x0041772c
  40ef10:	9311      	str	r3, [sp, #68]	; 0x44
  40ef12:	46ab      	mov	fp, r5
  40ef14:	2a00      	cmp	r2, #0
  40ef16:	f040 8703 	bne.w	40fd20 <_svfprintf_r+0x164c>
  40ef1a:	9b07      	ldr	r3, [sp, #28]
  40ef1c:	4899      	ldr	r0, [pc, #612]	; (40f184 <_svfprintf_r+0xab0>)
  40ef1e:	069d      	lsls	r5, r3, #26
  40ef20:	f53f af69 	bmi.w	40edf6 <_svfprintf_r+0x722>
  40ef24:	9b07      	ldr	r3, [sp, #28]
  40ef26:	06dc      	lsls	r4, r3, #27
  40ef28:	f140 845e 	bpl.w	40f7e8 <_svfprintf_r+0x1114>
  40ef2c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40ef2e:	4613      	mov	r3, r2
  40ef30:	3304      	adds	r3, #4
  40ef32:	6814      	ldr	r4, [r2, #0]
  40ef34:	930e      	str	r3, [sp, #56]	; 0x38
  40ef36:	2500      	movs	r5, #0
  40ef38:	e766      	b.n	40ee08 <_svfprintf_r+0x734>
  40ef3a:	f898 3000 	ldrb.w	r3, [r8]
  40ef3e:	2b6c      	cmp	r3, #108	; 0x6c
  40ef40:	f000 84e1 	beq.w	40f906 <_svfprintf_r+0x1232>
  40ef44:	9807      	ldr	r0, [sp, #28]
  40ef46:	f040 0010 	orr.w	r0, r0, #16
  40ef4a:	9007      	str	r0, [sp, #28]
  40ef4c:	e41b      	b.n	40e786 <_svfprintf_r+0xb2>
  40ef4e:	2a00      	cmp	r2, #0
  40ef50:	f040 86db 	bne.w	40fd0a <_svfprintf_r+0x1636>
  40ef54:	9b07      	ldr	r3, [sp, #28]
  40ef56:	069b      	lsls	r3, r3, #26
  40ef58:	f140 842f 	bpl.w	40f7ba <_svfprintf_r+0x10e6>
  40ef5c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40ef5e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40ef60:	6813      	ldr	r3, [r2, #0]
  40ef62:	17cd      	asrs	r5, r1, #31
  40ef64:	4608      	mov	r0, r1
  40ef66:	3204      	adds	r2, #4
  40ef68:	4629      	mov	r1, r5
  40ef6a:	920e      	str	r2, [sp, #56]	; 0x38
  40ef6c:	e9c3 0100 	strd	r0, r1, [r3]
  40ef70:	f7ff bbd6 	b.w	40e720 <_svfprintf_r+0x4c>
  40ef74:	9b07      	ldr	r3, [sp, #28]
  40ef76:	f043 0320 	orr.w	r3, r3, #32
  40ef7a:	9307      	str	r3, [sp, #28]
  40ef7c:	f898 3000 	ldrb.w	r3, [r8]
  40ef80:	e401      	b.n	40e786 <_svfprintf_r+0xb2>
  40ef82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40ef84:	9311      	str	r3, [sp, #68]	; 0x44
  40ef86:	6816      	ldr	r6, [r2, #0]
  40ef88:	2400      	movs	r4, #0
  40ef8a:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
  40ef8e:	1d17      	adds	r7, r2, #4
  40ef90:	2e00      	cmp	r6, #0
  40ef92:	f000 85bd 	beq.w	40fb10 <_svfprintf_r+0x143c>
  40ef96:	2d00      	cmp	r5, #0
  40ef98:	f2c0 850f 	blt.w	40f9ba <_svfprintf_r+0x12e6>
  40ef9c:	462a      	mov	r2, r5
  40ef9e:	4621      	mov	r1, r4
  40efa0:	4630      	mov	r0, r6
  40efa2:	f003 fe65 	bl	412c70 <memchr>
  40efa6:	2800      	cmp	r0, #0
  40efa8:	f000 8604 	beq.w	40fbb4 <_svfprintf_r+0x14e0>
  40efac:	1b83      	subs	r3, r0, r6
  40efae:	930d      	str	r3, [sp, #52]	; 0x34
  40efb0:	46a3      	mov	fp, r4
  40efb2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40efb6:	970e      	str	r7, [sp, #56]	; 0x38
  40efb8:	9308      	str	r3, [sp, #32]
  40efba:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
  40efbe:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40efc2:	e54d      	b.n	40ea60 <_svfprintf_r+0x38c>
  40efc4:	486f      	ldr	r0, [pc, #444]	; (40f184 <_svfprintf_r+0xab0>)
  40efc6:	9211      	str	r2, [sp, #68]	; 0x44
  40efc8:	f1bb 0f00 	cmp.w	fp, #0
  40efcc:	f040 8173 	bne.w	40f2b6 <_svfprintf_r+0xbe2>
  40efd0:	465f      	mov	r7, fp
  40efd2:	f04f 0b00 	mov.w	fp, #0
  40efd6:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  40efda:	ae30      	add	r6, sp, #192	; 0xc0
  40efdc:	e539      	b.n	40ea52 <_svfprintf_r+0x37e>
  40efde:	9311      	str	r3, [sp, #68]	; 0x44
  40efe0:	2a00      	cmp	r2, #0
  40efe2:	f040 86b0 	bne.w	40fd46 <_svfprintf_r+0x1672>
  40efe6:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40efe8:	2a00      	cmp	r2, #0
  40efea:	f43f ac65 	beq.w	40e8b8 <_svfprintf_r+0x1e4>
  40efee:	2300      	movs	r3, #0
  40eff0:	2101      	movs	r1, #1
  40eff2:	461f      	mov	r7, r3
  40eff4:	9108      	str	r1, [sp, #32]
  40eff6:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  40effa:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  40effe:	469b      	mov	fp, r3
  40f000:	9313      	str	r3, [sp, #76]	; 0x4c
  40f002:	910d      	str	r1, [sp, #52]	; 0x34
  40f004:	ae26      	add	r6, sp, #152	; 0x98
  40f006:	e52f      	b.n	40ea68 <_svfprintf_r+0x394>
  40f008:	f1bb 0f00 	cmp.w	fp, #0
  40f00c:	f000 85dd 	beq.w	40fbca <_svfprintf_r+0x14f6>
  40f010:	2700      	movs	r7, #0
  40f012:	2400      	movs	r4, #0
  40f014:	2500      	movs	r5, #0
  40f016:	e482      	b.n	40e91e <_svfprintf_r+0x24a>
  40f018:	485a      	ldr	r0, [pc, #360]	; (40f184 <_svfprintf_r+0xab0>)
  40f01a:	9307      	str	r3, [sp, #28]
  40f01c:	9211      	str	r2, [sp, #68]	; 0x44
  40f01e:	ea54 0305 	orrs.w	r3, r4, r5
  40f022:	970e      	str	r7, [sp, #56]	; 0x38
  40f024:	f04f 0700 	mov.w	r7, #0
  40f028:	f47f af0c 	bne.w	40ee44 <_svfprintf_r+0x770>
  40f02c:	2400      	movs	r4, #0
  40f02e:	2500      	movs	r5, #0
  40f030:	e708      	b.n	40ee44 <_svfprintf_r+0x770>
  40f032:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40f034:	e568      	b.n	40eb08 <_svfprintf_r+0x434>
  40f036:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40f038:	2b65      	cmp	r3, #101	; 0x65
  40f03a:	f340 80a9 	ble.w	40f190 <_svfprintf_r+0xabc>
  40f03e:	9814      	ldr	r0, [sp, #80]	; 0x50
  40f040:	9915      	ldr	r1, [sp, #84]	; 0x54
  40f042:	2200      	movs	r2, #0
  40f044:	2300      	movs	r3, #0
  40f046:	f005 faf3 	bl	414630 <__aeabi_dcmpeq>
  40f04a:	2800      	cmp	r0, #0
  40f04c:	f000 8135 	beq.w	40f2ba <_svfprintf_r+0xbe6>
  40f050:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40f052:	4a4d      	ldr	r2, [pc, #308]	; (40f188 <_svfprintf_r+0xab4>)
  40f054:	f8c9 2000 	str.w	r2, [r9]
  40f058:	3301      	adds	r3, #1
  40f05a:	3401      	adds	r4, #1
  40f05c:	2201      	movs	r2, #1
  40f05e:	2b07      	cmp	r3, #7
  40f060:	9425      	str	r4, [sp, #148]	; 0x94
  40f062:	9324      	str	r3, [sp, #144]	; 0x90
  40f064:	f8c9 2004 	str.w	r2, [r9, #4]
  40f068:	f300 83e6 	bgt.w	40f838 <_svfprintf_r+0x1164>
  40f06c:	f109 0908 	add.w	r9, r9, #8
  40f070:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40f072:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40f074:	4293      	cmp	r3, r2
  40f076:	db03      	blt.n	40f080 <_svfprintf_r+0x9ac>
  40f078:	9b07      	ldr	r3, [sp, #28]
  40f07a:	07db      	lsls	r3, r3, #31
  40f07c:	f57f adba 	bpl.w	40ebf4 <_svfprintf_r+0x520>
  40f080:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40f082:	9916      	ldr	r1, [sp, #88]	; 0x58
  40f084:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  40f086:	f8c9 2000 	str.w	r2, [r9]
  40f08a:	3301      	adds	r3, #1
  40f08c:	440c      	add	r4, r1
  40f08e:	2b07      	cmp	r3, #7
  40f090:	9425      	str	r4, [sp, #148]	; 0x94
  40f092:	f8c9 1004 	str.w	r1, [r9, #4]
  40f096:	9324      	str	r3, [sp, #144]	; 0x90
  40f098:	f300 843f 	bgt.w	40f91a <_svfprintf_r+0x1246>
  40f09c:	f109 0908 	add.w	r9, r9, #8
  40f0a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40f0a2:	1e5d      	subs	r5, r3, #1
  40f0a4:	2d00      	cmp	r5, #0
  40f0a6:	f77f ada5 	ble.w	40ebf4 <_svfprintf_r+0x520>
  40f0aa:	4a38      	ldr	r2, [pc, #224]	; (40f18c <_svfprintf_r+0xab8>)
  40f0ac:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40f0ae:	920f      	str	r2, [sp, #60]	; 0x3c
  40f0b0:	2d10      	cmp	r5, #16
  40f0b2:	f340 81e6 	ble.w	40f482 <_svfprintf_r+0xdae>
  40f0b6:	2610      	movs	r6, #16
  40f0b8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40f0ba:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  40f0be:	e005      	b.n	40f0cc <_svfprintf_r+0x9f8>
  40f0c0:	f109 0908 	add.w	r9, r9, #8
  40f0c4:	3d10      	subs	r5, #16
  40f0c6:	2d10      	cmp	r5, #16
  40f0c8:	f340 81db 	ble.w	40f482 <_svfprintf_r+0xdae>
  40f0cc:	3301      	adds	r3, #1
  40f0ce:	3410      	adds	r4, #16
  40f0d0:	2b07      	cmp	r3, #7
  40f0d2:	9425      	str	r4, [sp, #148]	; 0x94
  40f0d4:	9324      	str	r3, [sp, #144]	; 0x90
  40f0d6:	f8c9 a000 	str.w	sl, [r9]
  40f0da:	f8c9 6004 	str.w	r6, [r9, #4]
  40f0de:	ddef      	ble.n	40f0c0 <_svfprintf_r+0x9ec>
  40f0e0:	aa23      	add	r2, sp, #140	; 0x8c
  40f0e2:	4659      	mov	r1, fp
  40f0e4:	4638      	mov	r0, r7
  40f0e6:	f004 fc37 	bl	413958 <__ssprint_r>
  40f0ea:	2800      	cmp	r0, #0
  40f0ec:	f47f abeb 	bne.w	40e8c6 <_svfprintf_r+0x1f2>
  40f0f0:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40f0f2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40f0f4:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40f0f8:	e7e4      	b.n	40f0c4 <_svfprintf_r+0x9f0>
  40f0fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40f0fc:	9a08      	ldr	r2, [sp, #32]
  40f0fe:	1a9f      	subs	r7, r3, r2
  40f100:	2f00      	cmp	r7, #0
  40f102:	f77f ad25 	ble.w	40eb50 <_svfprintf_r+0x47c>
  40f106:	4a21      	ldr	r2, [pc, #132]	; (40f18c <_svfprintf_r+0xab8>)
  40f108:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40f10a:	920f      	str	r2, [sp, #60]	; 0x3c
  40f10c:	2f10      	cmp	r7, #16
  40f10e:	dd2b      	ble.n	40f168 <_svfprintf_r+0xa94>
  40f110:	464a      	mov	r2, r9
  40f112:	4621      	mov	r1, r4
  40f114:	46b9      	mov	r9, r7
  40f116:	2510      	movs	r5, #16
  40f118:	4637      	mov	r7, r6
  40f11a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40f11c:	9e09      	ldr	r6, [sp, #36]	; 0x24
  40f11e:	e006      	b.n	40f12e <_svfprintf_r+0xa5a>
  40f120:	f1a9 0910 	sub.w	r9, r9, #16
  40f124:	f1b9 0f10 	cmp.w	r9, #16
  40f128:	f102 0208 	add.w	r2, r2, #8
  40f12c:	dd18      	ble.n	40f160 <_svfprintf_r+0xa8c>
  40f12e:	3301      	adds	r3, #1
  40f130:	3110      	adds	r1, #16
  40f132:	2b07      	cmp	r3, #7
  40f134:	9125      	str	r1, [sp, #148]	; 0x94
  40f136:	9324      	str	r3, [sp, #144]	; 0x90
  40f138:	f8c2 a000 	str.w	sl, [r2]
  40f13c:	6055      	str	r5, [r2, #4]
  40f13e:	ddef      	ble.n	40f120 <_svfprintf_r+0xa4c>
  40f140:	aa23      	add	r2, sp, #140	; 0x8c
  40f142:	4631      	mov	r1, r6
  40f144:	4620      	mov	r0, r4
  40f146:	f004 fc07 	bl	413958 <__ssprint_r>
  40f14a:	2800      	cmp	r0, #0
  40f14c:	f47f abbb 	bne.w	40e8c6 <_svfprintf_r+0x1f2>
  40f150:	f1a9 0910 	sub.w	r9, r9, #16
  40f154:	f1b9 0f10 	cmp.w	r9, #16
  40f158:	9925      	ldr	r1, [sp, #148]	; 0x94
  40f15a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40f15c:	aa30      	add	r2, sp, #192	; 0xc0
  40f15e:	dce6      	bgt.n	40f12e <_svfprintf_r+0xa5a>
  40f160:	463e      	mov	r6, r7
  40f162:	460c      	mov	r4, r1
  40f164:	464f      	mov	r7, r9
  40f166:	4691      	mov	r9, r2
  40f168:	3301      	adds	r3, #1
  40f16a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40f16c:	9324      	str	r3, [sp, #144]	; 0x90
  40f16e:	443c      	add	r4, r7
  40f170:	2b07      	cmp	r3, #7
  40f172:	9425      	str	r4, [sp, #148]	; 0x94
  40f174:	e889 0084 	stmia.w	r9, {r2, r7}
  40f178:	f300 8245 	bgt.w	40f606 <_svfprintf_r+0xf32>
  40f17c:	f109 0908 	add.w	r9, r9, #8
  40f180:	e4e6      	b.n	40eb50 <_svfprintf_r+0x47c>
  40f182:	bf00      	nop
  40f184:	00417740 	.word	0x00417740
  40f188:	0041775c 	.word	0x0041775c
  40f18c:	0041770c 	.word	0x0041770c
  40f190:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40f192:	9d24      	ldr	r5, [sp, #144]	; 0x90
  40f194:	2b01      	cmp	r3, #1
  40f196:	f340 8208 	ble.w	40f5aa <_svfprintf_r+0xed6>
  40f19a:	3501      	adds	r5, #1
  40f19c:	3401      	adds	r4, #1
  40f19e:	2301      	movs	r3, #1
  40f1a0:	2d07      	cmp	r5, #7
  40f1a2:	9425      	str	r4, [sp, #148]	; 0x94
  40f1a4:	9524      	str	r5, [sp, #144]	; 0x90
  40f1a6:	f8c9 6000 	str.w	r6, [r9]
  40f1aa:	f8c9 3004 	str.w	r3, [r9, #4]
  40f1ae:	f300 820d 	bgt.w	40f5cc <_svfprintf_r+0xef8>
  40f1b2:	f109 0908 	add.w	r9, r9, #8
  40f1b6:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40f1b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40f1ba:	f8c9 3000 	str.w	r3, [r9]
  40f1be:	3501      	adds	r5, #1
  40f1c0:	4414      	add	r4, r2
  40f1c2:	2d07      	cmp	r5, #7
  40f1c4:	9425      	str	r4, [sp, #148]	; 0x94
  40f1c6:	9524      	str	r5, [sp, #144]	; 0x90
  40f1c8:	f8c9 2004 	str.w	r2, [r9, #4]
  40f1cc:	f300 820e 	bgt.w	40f5ec <_svfprintf_r+0xf18>
  40f1d0:	f109 0908 	add.w	r9, r9, #8
  40f1d4:	2300      	movs	r3, #0
  40f1d6:	9814      	ldr	r0, [sp, #80]	; 0x50
  40f1d8:	9915      	ldr	r1, [sp, #84]	; 0x54
  40f1da:	2200      	movs	r2, #0
  40f1dc:	f005 fa28 	bl	414630 <__aeabi_dcmpeq>
  40f1e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40f1e2:	2800      	cmp	r0, #0
  40f1e4:	f040 80c3 	bne.w	40f36e <_svfprintf_r+0xc9a>
  40f1e8:	3b01      	subs	r3, #1
  40f1ea:	3501      	adds	r5, #1
  40f1ec:	3601      	adds	r6, #1
  40f1ee:	441c      	add	r4, r3
  40f1f0:	2d07      	cmp	r5, #7
  40f1f2:	9524      	str	r5, [sp, #144]	; 0x90
  40f1f4:	9425      	str	r4, [sp, #148]	; 0x94
  40f1f6:	f8c9 6000 	str.w	r6, [r9]
  40f1fa:	f8c9 3004 	str.w	r3, [r9, #4]
  40f1fe:	f300 80f5 	bgt.w	40f3ec <_svfprintf_r+0xd18>
  40f202:	f109 0908 	add.w	r9, r9, #8
  40f206:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40f208:	f8c9 2004 	str.w	r2, [r9, #4]
  40f20c:	3501      	adds	r5, #1
  40f20e:	4414      	add	r4, r2
  40f210:	ab1f      	add	r3, sp, #124	; 0x7c
  40f212:	2d07      	cmp	r5, #7
  40f214:	9425      	str	r4, [sp, #148]	; 0x94
  40f216:	9524      	str	r5, [sp, #144]	; 0x90
  40f218:	f8c9 3000 	str.w	r3, [r9]
  40f21c:	f77f ace8 	ble.w	40ebf0 <_svfprintf_r+0x51c>
  40f220:	aa23      	add	r2, sp, #140	; 0x8c
  40f222:	9909      	ldr	r1, [sp, #36]	; 0x24
  40f224:	980a      	ldr	r0, [sp, #40]	; 0x28
  40f226:	f004 fb97 	bl	413958 <__ssprint_r>
  40f22a:	2800      	cmp	r0, #0
  40f22c:	f47f ab4b 	bne.w	40e8c6 <_svfprintf_r+0x1f2>
  40f230:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40f232:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40f236:	e4dd      	b.n	40ebf4 <_svfprintf_r+0x520>
  40f238:	aa23      	add	r2, sp, #140	; 0x8c
  40f23a:	9909      	ldr	r1, [sp, #36]	; 0x24
  40f23c:	980a      	ldr	r0, [sp, #40]	; 0x28
  40f23e:	f004 fb8b 	bl	413958 <__ssprint_r>
  40f242:	2800      	cmp	r0, #0
  40f244:	f43f ad24 	beq.w	40ec90 <_svfprintf_r+0x5bc>
  40f248:	f7ff bb3d 	b.w	40e8c6 <_svfprintf_r+0x1f2>
  40f24c:	aa23      	add	r2, sp, #140	; 0x8c
  40f24e:	9909      	ldr	r1, [sp, #36]	; 0x24
  40f250:	980a      	ldr	r0, [sp, #40]	; 0x28
  40f252:	f004 fb81 	bl	413958 <__ssprint_r>
  40f256:	2800      	cmp	r0, #0
  40f258:	f47f ab35 	bne.w	40e8c6 <_svfprintf_r+0x1f2>
  40f25c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40f25e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40f262:	e4b4      	b.n	40ebce <_svfprintf_r+0x4fa>
  40f264:	aa23      	add	r2, sp, #140	; 0x8c
  40f266:	9909      	ldr	r1, [sp, #36]	; 0x24
  40f268:	980a      	ldr	r0, [sp, #40]	; 0x28
  40f26a:	f004 fb75 	bl	413958 <__ssprint_r>
  40f26e:	2800      	cmp	r0, #0
  40f270:	f47f ab29 	bne.w	40e8c6 <_svfprintf_r+0x1f2>
  40f274:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40f276:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40f27a:	e455      	b.n	40eb28 <_svfprintf_r+0x454>
  40f27c:	aa23      	add	r2, sp, #140	; 0x8c
  40f27e:	9909      	ldr	r1, [sp, #36]	; 0x24
  40f280:	980a      	ldr	r0, [sp, #40]	; 0x28
  40f282:	f004 fb69 	bl	413958 <__ssprint_r>
  40f286:	2800      	cmp	r0, #0
  40f288:	f47f ab1d 	bne.w	40e8c6 <_svfprintf_r+0x1f2>
  40f28c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40f28e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40f292:	e459      	b.n	40eb48 <_svfprintf_r+0x474>
  40f294:	f1bb 0f00 	cmp.w	fp, #0
  40f298:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  40f29c:	f2c0 82d8 	blt.w	40f850 <_svfprintf_r+0x117c>
  40f2a0:	f022 0380 	bic.w	r3, r2, #128	; 0x80
  40f2a4:	9307      	str	r3, [sp, #28]
  40f2a6:	ea54 0305 	orrs.w	r3, r4, r5
  40f2aa:	f47f adcb 	bne.w	40ee44 <_svfprintf_r+0x770>
  40f2ae:	f1bb 0f00 	cmp.w	fp, #0
  40f2b2:	f43f ae8d 	beq.w	40efd0 <_svfprintf_r+0x8fc>
  40f2b6:	2700      	movs	r7, #0
  40f2b8:	e6b8      	b.n	40f02c <_svfprintf_r+0x958>
  40f2ba:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  40f2bc:	2d00      	cmp	r5, #0
  40f2be:	f340 82ca 	ble.w	40f856 <_svfprintf_r+0x1182>
  40f2c2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40f2c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40f2c6:	4293      	cmp	r3, r2
  40f2c8:	bfa8      	it	ge
  40f2ca:	4613      	movge	r3, r2
  40f2cc:	2b00      	cmp	r3, #0
  40f2ce:	461d      	mov	r5, r3
  40f2d0:	dd0d      	ble.n	40f2ee <_svfprintf_r+0xc1a>
  40f2d2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40f2d4:	f8c9 6000 	str.w	r6, [r9]
  40f2d8:	3301      	adds	r3, #1
  40f2da:	442c      	add	r4, r5
  40f2dc:	2b07      	cmp	r3, #7
  40f2de:	9425      	str	r4, [sp, #148]	; 0x94
  40f2e0:	f8c9 5004 	str.w	r5, [r9, #4]
  40f2e4:	9324      	str	r3, [sp, #144]	; 0x90
  40f2e6:	f300 839c 	bgt.w	40fa22 <_svfprintf_r+0x134e>
  40f2ea:	f109 0908 	add.w	r9, r9, #8
  40f2ee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40f2f0:	2d00      	cmp	r5, #0
  40f2f2:	bfa8      	it	ge
  40f2f4:	1b5b      	subge	r3, r3, r5
  40f2f6:	2b00      	cmp	r3, #0
  40f2f8:	461d      	mov	r5, r3
  40f2fa:	f340 80f6 	ble.w	40f4ea <_svfprintf_r+0xe16>
  40f2fe:	4aba      	ldr	r2, [pc, #744]	; (40f5e8 <_svfprintf_r+0xf14>)
  40f300:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40f302:	920f      	str	r2, [sp, #60]	; 0x3c
  40f304:	2d10      	cmp	r5, #16
  40f306:	f340 828a 	ble.w	40f81e <_svfprintf_r+0x114a>
  40f30a:	4622      	mov	r2, r4
  40f30c:	2710      	movs	r7, #16
  40f30e:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  40f312:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40f314:	e005      	b.n	40f322 <_svfprintf_r+0xc4e>
  40f316:	f109 0908 	add.w	r9, r9, #8
  40f31a:	3d10      	subs	r5, #16
  40f31c:	2d10      	cmp	r5, #16
  40f31e:	f340 827d 	ble.w	40f81c <_svfprintf_r+0x1148>
  40f322:	3301      	adds	r3, #1
  40f324:	3210      	adds	r2, #16
  40f326:	2b07      	cmp	r3, #7
  40f328:	9225      	str	r2, [sp, #148]	; 0x94
  40f32a:	9324      	str	r3, [sp, #144]	; 0x90
  40f32c:	f8c9 a000 	str.w	sl, [r9]
  40f330:	f8c9 7004 	str.w	r7, [r9, #4]
  40f334:	ddef      	ble.n	40f316 <_svfprintf_r+0xc42>
  40f336:	aa23      	add	r2, sp, #140	; 0x8c
  40f338:	4621      	mov	r1, r4
  40f33a:	4658      	mov	r0, fp
  40f33c:	f004 fb0c 	bl	413958 <__ssprint_r>
  40f340:	2800      	cmp	r0, #0
  40f342:	f47f aac0 	bne.w	40e8c6 <_svfprintf_r+0x1f2>
  40f346:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40f348:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40f34a:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40f34e:	e7e4      	b.n	40f31a <_svfprintf_r+0xc46>
  40f350:	aa23      	add	r2, sp, #140	; 0x8c
  40f352:	9909      	ldr	r1, [sp, #36]	; 0x24
  40f354:	980a      	ldr	r0, [sp, #40]	; 0x28
  40f356:	f004 faff 	bl	413958 <__ssprint_r>
  40f35a:	2800      	cmp	r0, #0
  40f35c:	f47f aab3 	bne.w	40e8c6 <_svfprintf_r+0x1f2>
  40f360:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40f364:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40f366:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40f36a:	f7ff bbcd 	b.w	40eb08 <_svfprintf_r+0x434>
  40f36e:	1e5e      	subs	r6, r3, #1
  40f370:	2e00      	cmp	r6, #0
  40f372:	f77f af48 	ble.w	40f206 <_svfprintf_r+0xb32>
  40f376:	4b9c      	ldr	r3, [pc, #624]	; (40f5e8 <_svfprintf_r+0xf14>)
  40f378:	930f      	str	r3, [sp, #60]	; 0x3c
  40f37a:	2e10      	cmp	r6, #16
  40f37c:	dd2c      	ble.n	40f3d8 <_svfprintf_r+0xd04>
  40f37e:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  40f382:	2710      	movs	r7, #16
  40f384:	46b0      	mov	r8, r6
  40f386:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  40f38a:	9e09      	ldr	r6, [sp, #36]	; 0x24
  40f38c:	e006      	b.n	40f39c <_svfprintf_r+0xcc8>
  40f38e:	f1a8 0810 	sub.w	r8, r8, #16
  40f392:	f1b8 0f10 	cmp.w	r8, #16
  40f396:	f109 0908 	add.w	r9, r9, #8
  40f39a:	dd1a      	ble.n	40f3d2 <_svfprintf_r+0xcfe>
  40f39c:	3501      	adds	r5, #1
  40f39e:	3410      	adds	r4, #16
  40f3a0:	2d07      	cmp	r5, #7
  40f3a2:	9425      	str	r4, [sp, #148]	; 0x94
  40f3a4:	9524      	str	r5, [sp, #144]	; 0x90
  40f3a6:	f8c9 a000 	str.w	sl, [r9]
  40f3aa:	f8c9 7004 	str.w	r7, [r9, #4]
  40f3ae:	ddee      	ble.n	40f38e <_svfprintf_r+0xcba>
  40f3b0:	aa23      	add	r2, sp, #140	; 0x8c
  40f3b2:	4631      	mov	r1, r6
  40f3b4:	4658      	mov	r0, fp
  40f3b6:	f004 facf 	bl	413958 <__ssprint_r>
  40f3ba:	2800      	cmp	r0, #0
  40f3bc:	f47f aa83 	bne.w	40e8c6 <_svfprintf_r+0x1f2>
  40f3c0:	f1a8 0810 	sub.w	r8, r8, #16
  40f3c4:	f1b8 0f10 	cmp.w	r8, #16
  40f3c8:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40f3ca:	9d24      	ldr	r5, [sp, #144]	; 0x90
  40f3cc:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40f3d0:	dce4      	bgt.n	40f39c <_svfprintf_r+0xcc8>
  40f3d2:	4646      	mov	r6, r8
  40f3d4:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  40f3d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40f3da:	3501      	adds	r5, #1
  40f3dc:	4434      	add	r4, r6
  40f3de:	2d07      	cmp	r5, #7
  40f3e0:	9425      	str	r4, [sp, #148]	; 0x94
  40f3e2:	9524      	str	r5, [sp, #144]	; 0x90
  40f3e4:	e889 0048 	stmia.w	r9, {r3, r6}
  40f3e8:	f77f af0b 	ble.w	40f202 <_svfprintf_r+0xb2e>
  40f3ec:	aa23      	add	r2, sp, #140	; 0x8c
  40f3ee:	9909      	ldr	r1, [sp, #36]	; 0x24
  40f3f0:	980a      	ldr	r0, [sp, #40]	; 0x28
  40f3f2:	f004 fab1 	bl	413958 <__ssprint_r>
  40f3f6:	2800      	cmp	r0, #0
  40f3f8:	f47f aa65 	bne.w	40e8c6 <_svfprintf_r+0x1f2>
  40f3fc:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40f3fe:	9d24      	ldr	r5, [sp, #144]	; 0x90
  40f400:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40f404:	e6ff      	b.n	40f206 <_svfprintf_r+0xb32>
  40f406:	9907      	ldr	r1, [sp, #28]
  40f408:	f011 0210 	ands.w	r2, r1, #16
  40f40c:	f000 8108 	beq.w	40f620 <_svfprintf_r+0xf4c>
  40f410:	980e      	ldr	r0, [sp, #56]	; 0x38
  40f412:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  40f416:	f1bb 0f00 	cmp.w	fp, #0
  40f41a:	6804      	ldr	r4, [r0, #0]
  40f41c:	f100 0704 	add.w	r7, r0, #4
  40f420:	f04f 0500 	mov.w	r5, #0
  40f424:	db26      	blt.n	40f474 <_svfprintf_r+0xda0>
  40f426:	460a      	mov	r2, r1
  40f428:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  40f42c:	9207      	str	r2, [sp, #28]
  40f42e:	ea54 0205 	orrs.w	r2, r4, r5
  40f432:	970e      	str	r7, [sp, #56]	; 0x38
  40f434:	461f      	mov	r7, r3
  40f436:	f47f aaef 	bne.w	40ea18 <_svfprintf_r+0x344>
  40f43a:	e4c8      	b.n	40edce <_svfprintf_r+0x6fa>
  40f43c:	9b07      	ldr	r3, [sp, #28]
  40f43e:	06d9      	lsls	r1, r3, #27
  40f440:	d42a      	bmi.n	40f498 <_svfprintf_r+0xdc4>
  40f442:	9b07      	ldr	r3, [sp, #28]
  40f444:	065a      	lsls	r2, r3, #25
  40f446:	d527      	bpl.n	40f498 <_svfprintf_r+0xdc4>
  40f448:	990e      	ldr	r1, [sp, #56]	; 0x38
  40f44a:	f9b1 4000 	ldrsh.w	r4, [r1]
  40f44e:	3104      	adds	r1, #4
  40f450:	17e5      	asrs	r5, r4, #31
  40f452:	4622      	mov	r2, r4
  40f454:	462b      	mov	r3, r5
  40f456:	910e      	str	r1, [sp, #56]	; 0x38
  40f458:	f7ff bacb 	b.w	40e9f2 <_svfprintf_r+0x31e>
  40f45c:	990e      	ldr	r1, [sp, #56]	; 0x38
  40f45e:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  40f462:	f1bb 0f00 	cmp.w	fp, #0
  40f466:	680c      	ldr	r4, [r1, #0]
  40f468:	f101 0704 	add.w	r7, r1, #4
  40f46c:	f04f 0500 	mov.w	r5, #0
  40f470:	f280 8247 	bge.w	40f902 <_svfprintf_r+0x122e>
  40f474:	970e      	str	r7, [sp, #56]	; 0x38
  40f476:	461f      	mov	r7, r3
  40f478:	ea54 0305 	orrs.w	r3, r4, r5
  40f47c:	f47f aacc 	bne.w	40ea18 <_svfprintf_r+0x344>
  40f480:	e4aa      	b.n	40edd8 <_svfprintf_r+0x704>
  40f482:	3301      	adds	r3, #1
  40f484:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40f486:	9324      	str	r3, [sp, #144]	; 0x90
  40f488:	442c      	add	r4, r5
  40f48a:	2b07      	cmp	r3, #7
  40f48c:	9425      	str	r4, [sp, #148]	; 0x94
  40f48e:	e889 0024 	stmia.w	r9, {r2, r5}
  40f492:	f77f abad 	ble.w	40ebf0 <_svfprintf_r+0x51c>
  40f496:	e6c3      	b.n	40f220 <_svfprintf_r+0xb4c>
  40f498:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40f49a:	6814      	ldr	r4, [r2, #0]
  40f49c:	4613      	mov	r3, r2
  40f49e:	3304      	adds	r3, #4
  40f4a0:	17e5      	asrs	r5, r4, #31
  40f4a2:	4622      	mov	r2, r4
  40f4a4:	930e      	str	r3, [sp, #56]	; 0x38
  40f4a6:	2a00      	cmp	r2, #0
  40f4a8:	462b      	mov	r3, r5
  40f4aa:	f173 0300 	sbcs.w	r3, r3, #0
  40f4ae:	f6bf aaa5 	bge.w	40e9fc <_svfprintf_r+0x328>
  40f4b2:	4264      	negs	r4, r4
  40f4b4:	f04f 072d 	mov.w	r7, #45	; 0x2d
  40f4b8:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  40f4bc:	f1bb 0f00 	cmp.w	fp, #0
  40f4c0:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  40f4c4:	f6ff aaa8 	blt.w	40ea18 <_svfprintf_r+0x344>
  40f4c8:	9b07      	ldr	r3, [sp, #28]
  40f4ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  40f4ce:	9307      	str	r3, [sp, #28]
  40f4d0:	f7ff baa2 	b.w	40ea18 <_svfprintf_r+0x344>
  40f4d4:	aa23      	add	r2, sp, #140	; 0x8c
  40f4d6:	9909      	ldr	r1, [sp, #36]	; 0x24
  40f4d8:	980a      	ldr	r0, [sp, #40]	; 0x28
  40f4da:	f004 fa3d 	bl	413958 <__ssprint_r>
  40f4de:	2800      	cmp	r0, #0
  40f4e0:	f47f a9f1 	bne.w	40e8c6 <_svfprintf_r+0x1f2>
  40f4e4:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40f4e6:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40f4ea:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40f4ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40f4ee:	4432      	add	r2, r6
  40f4f0:	4617      	mov	r7, r2
  40f4f2:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40f4f4:	4293      	cmp	r3, r2
  40f4f6:	db47      	blt.n	40f588 <_svfprintf_r+0xeb4>
  40f4f8:	9a07      	ldr	r2, [sp, #28]
  40f4fa:	07d5      	lsls	r5, r2, #31
  40f4fc:	d444      	bmi.n	40f588 <_svfprintf_r+0xeb4>
  40f4fe:	9912      	ldr	r1, [sp, #72]	; 0x48
  40f500:	440e      	add	r6, r1
  40f502:	1bf5      	subs	r5, r6, r7
  40f504:	1acb      	subs	r3, r1, r3
  40f506:	429d      	cmp	r5, r3
  40f508:	bfa8      	it	ge
  40f50a:	461d      	movge	r5, r3
  40f50c:	2d00      	cmp	r5, #0
  40f50e:	462e      	mov	r6, r5
  40f510:	dd0d      	ble.n	40f52e <_svfprintf_r+0xe5a>
  40f512:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40f514:	f8c9 7000 	str.w	r7, [r9]
  40f518:	3201      	adds	r2, #1
  40f51a:	442c      	add	r4, r5
  40f51c:	2a07      	cmp	r2, #7
  40f51e:	9425      	str	r4, [sp, #148]	; 0x94
  40f520:	f8c9 5004 	str.w	r5, [r9, #4]
  40f524:	9224      	str	r2, [sp, #144]	; 0x90
  40f526:	f300 830b 	bgt.w	40fb40 <_svfprintf_r+0x146c>
  40f52a:	f109 0908 	add.w	r9, r9, #8
  40f52e:	2e00      	cmp	r6, #0
  40f530:	bfac      	ite	ge
  40f532:	1b9d      	subge	r5, r3, r6
  40f534:	461d      	movlt	r5, r3
  40f536:	2d00      	cmp	r5, #0
  40f538:	f77f ab5c 	ble.w	40ebf4 <_svfprintf_r+0x520>
  40f53c:	4a2a      	ldr	r2, [pc, #168]	; (40f5e8 <_svfprintf_r+0xf14>)
  40f53e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40f540:	920f      	str	r2, [sp, #60]	; 0x3c
  40f542:	2d10      	cmp	r5, #16
  40f544:	dd9d      	ble.n	40f482 <_svfprintf_r+0xdae>
  40f546:	2610      	movs	r6, #16
  40f548:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40f54a:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  40f54e:	e004      	b.n	40f55a <_svfprintf_r+0xe86>
  40f550:	f109 0908 	add.w	r9, r9, #8
  40f554:	3d10      	subs	r5, #16
  40f556:	2d10      	cmp	r5, #16
  40f558:	dd93      	ble.n	40f482 <_svfprintf_r+0xdae>
  40f55a:	3301      	adds	r3, #1
  40f55c:	3410      	adds	r4, #16
  40f55e:	2b07      	cmp	r3, #7
  40f560:	9425      	str	r4, [sp, #148]	; 0x94
  40f562:	9324      	str	r3, [sp, #144]	; 0x90
  40f564:	f8c9 a000 	str.w	sl, [r9]
  40f568:	f8c9 6004 	str.w	r6, [r9, #4]
  40f56c:	ddf0      	ble.n	40f550 <_svfprintf_r+0xe7c>
  40f56e:	aa23      	add	r2, sp, #140	; 0x8c
  40f570:	4659      	mov	r1, fp
  40f572:	4638      	mov	r0, r7
  40f574:	f004 f9f0 	bl	413958 <__ssprint_r>
  40f578:	2800      	cmp	r0, #0
  40f57a:	f47f a9a4 	bne.w	40e8c6 <_svfprintf_r+0x1f2>
  40f57e:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40f580:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40f582:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40f586:	e7e5      	b.n	40f554 <_svfprintf_r+0xe80>
  40f588:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40f58a:	9816      	ldr	r0, [sp, #88]	; 0x58
  40f58c:	9917      	ldr	r1, [sp, #92]	; 0x5c
  40f58e:	f8c9 1000 	str.w	r1, [r9]
  40f592:	3201      	adds	r2, #1
  40f594:	4404      	add	r4, r0
  40f596:	2a07      	cmp	r2, #7
  40f598:	9425      	str	r4, [sp, #148]	; 0x94
  40f59a:	f8c9 0004 	str.w	r0, [r9, #4]
  40f59e:	9224      	str	r2, [sp, #144]	; 0x90
  40f5a0:	f300 82a9 	bgt.w	40faf6 <_svfprintf_r+0x1422>
  40f5a4:	f109 0908 	add.w	r9, r9, #8
  40f5a8:	e7a9      	b.n	40f4fe <_svfprintf_r+0xe2a>
  40f5aa:	9b07      	ldr	r3, [sp, #28]
  40f5ac:	07d8      	lsls	r0, r3, #31
  40f5ae:	f53f adf4 	bmi.w	40f19a <_svfprintf_r+0xac6>
  40f5b2:	3501      	adds	r5, #1
  40f5b4:	3401      	adds	r4, #1
  40f5b6:	2301      	movs	r3, #1
  40f5b8:	2d07      	cmp	r5, #7
  40f5ba:	9425      	str	r4, [sp, #148]	; 0x94
  40f5bc:	9524      	str	r5, [sp, #144]	; 0x90
  40f5be:	f8c9 6000 	str.w	r6, [r9]
  40f5c2:	f8c9 3004 	str.w	r3, [r9, #4]
  40f5c6:	f77f ae1c 	ble.w	40f202 <_svfprintf_r+0xb2e>
  40f5ca:	e70f      	b.n	40f3ec <_svfprintf_r+0xd18>
  40f5cc:	aa23      	add	r2, sp, #140	; 0x8c
  40f5ce:	9909      	ldr	r1, [sp, #36]	; 0x24
  40f5d0:	980a      	ldr	r0, [sp, #40]	; 0x28
  40f5d2:	f004 f9c1 	bl	413958 <__ssprint_r>
  40f5d6:	2800      	cmp	r0, #0
  40f5d8:	f47f a975 	bne.w	40e8c6 <_svfprintf_r+0x1f2>
  40f5dc:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40f5de:	9d24      	ldr	r5, [sp, #144]	; 0x90
  40f5e0:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40f5e4:	e5e7      	b.n	40f1b6 <_svfprintf_r+0xae2>
  40f5e6:	bf00      	nop
  40f5e8:	0041770c 	.word	0x0041770c
  40f5ec:	aa23      	add	r2, sp, #140	; 0x8c
  40f5ee:	9909      	ldr	r1, [sp, #36]	; 0x24
  40f5f0:	980a      	ldr	r0, [sp, #40]	; 0x28
  40f5f2:	f004 f9b1 	bl	413958 <__ssprint_r>
  40f5f6:	2800      	cmp	r0, #0
  40f5f8:	f47f a965 	bne.w	40e8c6 <_svfprintf_r+0x1f2>
  40f5fc:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40f5fe:	9d24      	ldr	r5, [sp, #144]	; 0x90
  40f600:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40f604:	e5e6      	b.n	40f1d4 <_svfprintf_r+0xb00>
  40f606:	aa23      	add	r2, sp, #140	; 0x8c
  40f608:	9909      	ldr	r1, [sp, #36]	; 0x24
  40f60a:	980a      	ldr	r0, [sp, #40]	; 0x28
  40f60c:	f004 f9a4 	bl	413958 <__ssprint_r>
  40f610:	2800      	cmp	r0, #0
  40f612:	f47f a958 	bne.w	40e8c6 <_svfprintf_r+0x1f2>
  40f616:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40f618:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40f61c:	f7ff ba98 	b.w	40eb50 <_svfprintf_r+0x47c>
  40f620:	9907      	ldr	r1, [sp, #28]
  40f622:	f011 0340 	ands.w	r3, r1, #64	; 0x40
  40f626:	f43f af19 	beq.w	40f45c <_svfprintf_r+0xd88>
  40f62a:	980e      	ldr	r0, [sp, #56]	; 0x38
  40f62c:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  40f630:	f1bb 0f00 	cmp.w	fp, #0
  40f634:	8804      	ldrh	r4, [r0, #0]
  40f636:	f100 0704 	add.w	r7, r0, #4
  40f63a:	f04f 0500 	mov.w	r5, #0
  40f63e:	f2c0 81b9 	blt.w	40f9b4 <_svfprintf_r+0x12e0>
  40f642:	f021 0380 	bic.w	r3, r1, #128	; 0x80
  40f646:	9307      	str	r3, [sp, #28]
  40f648:	ea54 0305 	orrs.w	r3, r4, r5
  40f64c:	970e      	str	r7, [sp, #56]	; 0x38
  40f64e:	4617      	mov	r7, r2
  40f650:	f47f a9e2 	bne.w	40ea18 <_svfprintf_r+0x344>
  40f654:	f7ff bbbb 	b.w	40edce <_svfprintf_r+0x6fa>
  40f658:	9c14      	ldr	r4, [sp, #80]	; 0x50
  40f65a:	4622      	mov	r2, r4
  40f65c:	4620      	mov	r0, r4
  40f65e:	9c15      	ldr	r4, [sp, #84]	; 0x54
  40f660:	4623      	mov	r3, r4
  40f662:	4621      	mov	r1, r4
  40f664:	f005 f816 	bl	414694 <__aeabi_dcmpun>
  40f668:	2800      	cmp	r0, #0
  40f66a:	f040 8317 	bne.w	40fc9c <_svfprintf_r+0x15c8>
  40f66e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40f670:	f1bb 3fff 	cmp.w	fp, #4294967295
  40f674:	f023 0320 	bic.w	r3, r3, #32
  40f678:	930d      	str	r3, [sp, #52]	; 0x34
  40f67a:	f000 8270 	beq.w	40fb5e <_svfprintf_r+0x148a>
  40f67e:	2b47      	cmp	r3, #71	; 0x47
  40f680:	f000 8192 	beq.w	40f9a8 <_svfprintf_r+0x12d4>
  40f684:	9b07      	ldr	r3, [sp, #28]
  40f686:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  40f68a:	9310      	str	r3, [sp, #64]	; 0x40
  40f68c:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40f68e:	1e1f      	subs	r7, r3, #0
  40f690:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40f692:	9308      	str	r3, [sp, #32]
  40f694:	bfbb      	ittet	lt
  40f696:	463b      	movlt	r3, r7
  40f698:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  40f69c:	2300      	movge	r3, #0
  40f69e:	232d      	movlt	r3, #45	; 0x2d
  40f6a0:	930f      	str	r3, [sp, #60]	; 0x3c
  40f6a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40f6a4:	2b66      	cmp	r3, #102	; 0x66
  40f6a6:	f000 825d 	beq.w	40fb64 <_svfprintf_r+0x1490>
  40f6aa:	2b46      	cmp	r3, #70	; 0x46
  40f6ac:	f000 8151 	beq.w	40f952 <_svfprintf_r+0x127e>
  40f6b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40f6b2:	9a08      	ldr	r2, [sp, #32]
  40f6b4:	2b45      	cmp	r3, #69	; 0x45
  40f6b6:	a821      	add	r0, sp, #132	; 0x84
  40f6b8:	a91e      	add	r1, sp, #120	; 0x78
  40f6ba:	bf0c      	ite	eq
  40f6bc:	f10b 0501 	addeq.w	r5, fp, #1
  40f6c0:	465d      	movne	r5, fp
  40f6c2:	9004      	str	r0, [sp, #16]
  40f6c4:	9103      	str	r1, [sp, #12]
  40f6c6:	a81d      	add	r0, sp, #116	; 0x74
  40f6c8:	2102      	movs	r1, #2
  40f6ca:	463b      	mov	r3, r7
  40f6cc:	9002      	str	r0, [sp, #8]
  40f6ce:	9501      	str	r5, [sp, #4]
  40f6d0:	9100      	str	r1, [sp, #0]
  40f6d2:	980a      	ldr	r0, [sp, #40]	; 0x28
  40f6d4:	f001 fbc4 	bl	410e60 <_dtoa_r>
  40f6d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40f6da:	2b67      	cmp	r3, #103	; 0x67
  40f6dc:	4606      	mov	r6, r0
  40f6de:	f040 8290 	bne.w	40fc02 <_svfprintf_r+0x152e>
  40f6e2:	9b07      	ldr	r3, [sp, #28]
  40f6e4:	07da      	lsls	r2, r3, #31
  40f6e6:	f140 82af 	bpl.w	40fc48 <_svfprintf_r+0x1574>
  40f6ea:	1974      	adds	r4, r6, r5
  40f6ec:	9808      	ldr	r0, [sp, #32]
  40f6ee:	4639      	mov	r1, r7
  40f6f0:	2200      	movs	r2, #0
  40f6f2:	2300      	movs	r3, #0
  40f6f4:	f004 ff9c 	bl	414630 <__aeabi_dcmpeq>
  40f6f8:	2800      	cmp	r0, #0
  40f6fa:	f040 8190 	bne.w	40fa1e <_svfprintf_r+0x134a>
  40f6fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40f700:	429c      	cmp	r4, r3
  40f702:	d906      	bls.n	40f712 <_svfprintf_r+0x103e>
  40f704:	2130      	movs	r1, #48	; 0x30
  40f706:	1c5a      	adds	r2, r3, #1
  40f708:	9221      	str	r2, [sp, #132]	; 0x84
  40f70a:	7019      	strb	r1, [r3, #0]
  40f70c:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40f70e:	429c      	cmp	r4, r3
  40f710:	d8f9      	bhi.n	40f706 <_svfprintf_r+0x1032>
  40f712:	1b9b      	subs	r3, r3, r6
  40f714:	9312      	str	r3, [sp, #72]	; 0x48
  40f716:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40f718:	2b47      	cmp	r3, #71	; 0x47
  40f71a:	f000 8179 	beq.w	40fa10 <_svfprintf_r+0x133c>
  40f71e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40f720:	2b65      	cmp	r3, #101	; 0x65
  40f722:	f340 827d 	ble.w	40fc20 <_svfprintf_r+0x154c>
  40f726:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40f728:	2b66      	cmp	r3, #102	; 0x66
  40f72a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40f72c:	9313      	str	r3, [sp, #76]	; 0x4c
  40f72e:	f000 825b 	beq.w	40fbe8 <_svfprintf_r+0x1514>
  40f732:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40f734:	9912      	ldr	r1, [sp, #72]	; 0x48
  40f736:	428a      	cmp	r2, r1
  40f738:	f2c0 8230 	blt.w	40fb9c <_svfprintf_r+0x14c8>
  40f73c:	9b07      	ldr	r3, [sp, #28]
  40f73e:	07d9      	lsls	r1, r3, #31
  40f740:	f100 8284 	bmi.w	40fc4c <_svfprintf_r+0x1578>
  40f744:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  40f748:	920d      	str	r2, [sp, #52]	; 0x34
  40f74a:	2267      	movs	r2, #103	; 0x67
  40f74c:	9211      	str	r2, [sp, #68]	; 0x44
  40f74e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40f750:	2a00      	cmp	r2, #0
  40f752:	f040 8153 	bne.w	40f9fc <_svfprintf_r+0x1328>
  40f756:	9308      	str	r3, [sp, #32]
  40f758:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40f75a:	9307      	str	r3, [sp, #28]
  40f75c:	4693      	mov	fp, r2
  40f75e:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40f762:	f7ff b97d 	b.w	40ea60 <_svfprintf_r+0x38c>
  40f766:	9907      	ldr	r1, [sp, #28]
  40f768:	f011 0340 	ands.w	r3, r1, #64	; 0x40
  40f76c:	d015      	beq.n	40f79a <_svfprintf_r+0x10c6>
  40f76e:	980e      	ldr	r0, [sp, #56]	; 0x38
  40f770:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  40f774:	f1bb 0f00 	cmp.w	fp, #0
  40f778:	8804      	ldrh	r4, [r0, #0]
  40f77a:	f100 0704 	add.w	r7, r0, #4
  40f77e:	f04f 0500 	mov.w	r5, #0
  40f782:	db16      	blt.n	40f7b2 <_svfprintf_r+0x10de>
  40f784:	f021 0380 	bic.w	r3, r1, #128	; 0x80
  40f788:	9307      	str	r3, [sp, #28]
  40f78a:	ea54 0305 	orrs.w	r3, r4, r5
  40f78e:	970e      	str	r7, [sp, #56]	; 0x38
  40f790:	f43f ac3a 	beq.w	40f008 <_svfprintf_r+0x934>
  40f794:	4617      	mov	r7, r2
  40f796:	f7ff b8c2 	b.w	40e91e <_svfprintf_r+0x24a>
  40f79a:	990e      	ldr	r1, [sp, #56]	; 0x38
  40f79c:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  40f7a0:	f1bb 0f00 	cmp.w	fp, #0
  40f7a4:	680c      	ldr	r4, [r1, #0]
  40f7a6:	f101 0704 	add.w	r7, r1, #4
  40f7aa:	f04f 0500 	mov.w	r5, #0
  40f7ae:	f280 80a5 	bge.w	40f8fc <_svfprintf_r+0x1228>
  40f7b2:	970e      	str	r7, [sp, #56]	; 0x38
  40f7b4:	2700      	movs	r7, #0
  40f7b6:	f7ff b8b2 	b.w	40e91e <_svfprintf_r+0x24a>
  40f7ba:	9b07      	ldr	r3, [sp, #28]
  40f7bc:	06df      	lsls	r7, r3, #27
  40f7be:	d40b      	bmi.n	40f7d8 <_svfprintf_r+0x1104>
  40f7c0:	9b07      	ldr	r3, [sp, #28]
  40f7c2:	065e      	lsls	r6, r3, #25
  40f7c4:	d508      	bpl.n	40f7d8 <_svfprintf_r+0x1104>
  40f7c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40f7c8:	6813      	ldr	r3, [r2, #0]
  40f7ca:	3204      	adds	r2, #4
  40f7cc:	920e      	str	r2, [sp, #56]	; 0x38
  40f7ce:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
  40f7d2:	801a      	strh	r2, [r3, #0]
  40f7d4:	f7fe bfa4 	b.w	40e720 <_svfprintf_r+0x4c>
  40f7d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40f7da:	6813      	ldr	r3, [r2, #0]
  40f7dc:	3204      	adds	r2, #4
  40f7de:	920e      	str	r2, [sp, #56]	; 0x38
  40f7e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40f7e2:	601a      	str	r2, [r3, #0]
  40f7e4:	f7fe bf9c 	b.w	40e720 <_svfprintf_r+0x4c>
  40f7e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40f7ea:	9b07      	ldr	r3, [sp, #28]
  40f7ec:	f013 0f40 	tst.w	r3, #64	; 0x40
  40f7f0:	4613      	mov	r3, r2
  40f7f2:	f103 0304 	add.w	r3, r3, #4
  40f7f6:	bf0c      	ite	eq
  40f7f8:	6814      	ldreq	r4, [r2, #0]
  40f7fa:	8814      	ldrhne	r4, [r2, #0]
  40f7fc:	930e      	str	r3, [sp, #56]	; 0x38
  40f7fe:	2500      	movs	r5, #0
  40f800:	f7ff bb02 	b.w	40ee08 <_svfprintf_r+0x734>
  40f804:	2700      	movs	r7, #0
  40f806:	45bb      	cmp	fp, r7
  40f808:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  40f80c:	f6ff ac0e 	blt.w	40f02c <_svfprintf_r+0x958>
  40f810:	9b07      	ldr	r3, [sp, #28]
  40f812:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  40f816:	9307      	str	r3, [sp, #28]
  40f818:	f7ff bbd6 	b.w	40efc8 <_svfprintf_r+0x8f4>
  40f81c:	4614      	mov	r4, r2
  40f81e:	3301      	adds	r3, #1
  40f820:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40f822:	9324      	str	r3, [sp, #144]	; 0x90
  40f824:	442c      	add	r4, r5
  40f826:	2b07      	cmp	r3, #7
  40f828:	9425      	str	r4, [sp, #148]	; 0x94
  40f82a:	e889 0024 	stmia.w	r9, {r2, r5}
  40f82e:	f73f ae51 	bgt.w	40f4d4 <_svfprintf_r+0xe00>
  40f832:	f109 0908 	add.w	r9, r9, #8
  40f836:	e658      	b.n	40f4ea <_svfprintf_r+0xe16>
  40f838:	aa23      	add	r2, sp, #140	; 0x8c
  40f83a:	9909      	ldr	r1, [sp, #36]	; 0x24
  40f83c:	980a      	ldr	r0, [sp, #40]	; 0x28
  40f83e:	f004 f88b 	bl	413958 <__ssprint_r>
  40f842:	2800      	cmp	r0, #0
  40f844:	f47f a83f 	bne.w	40e8c6 <_svfprintf_r+0x1f2>
  40f848:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40f84a:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40f84e:	e40f      	b.n	40f070 <_svfprintf_r+0x99c>
  40f850:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  40f852:	f7ff bbe4 	b.w	40f01e <_svfprintf_r+0x94a>
  40f856:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40f858:	4ab5      	ldr	r2, [pc, #724]	; (40fb30 <_svfprintf_r+0x145c>)
  40f85a:	f8c9 2000 	str.w	r2, [r9]
  40f85e:	3301      	adds	r3, #1
  40f860:	3401      	adds	r4, #1
  40f862:	2201      	movs	r2, #1
  40f864:	2b07      	cmp	r3, #7
  40f866:	9425      	str	r4, [sp, #148]	; 0x94
  40f868:	9324      	str	r3, [sp, #144]	; 0x90
  40f86a:	f8c9 2004 	str.w	r2, [r9, #4]
  40f86e:	f300 808e 	bgt.w	40f98e <_svfprintf_r+0x12ba>
  40f872:	f109 0908 	add.w	r9, r9, #8
  40f876:	b92d      	cbnz	r5, 40f884 <_svfprintf_r+0x11b0>
  40f878:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40f87a:	b91b      	cbnz	r3, 40f884 <_svfprintf_r+0x11b0>
  40f87c:	9b07      	ldr	r3, [sp, #28]
  40f87e:	07df      	lsls	r7, r3, #31
  40f880:	f57f a9b8 	bpl.w	40ebf4 <_svfprintf_r+0x520>
  40f884:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40f886:	9916      	ldr	r1, [sp, #88]	; 0x58
  40f888:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  40f88a:	f8c9 2000 	str.w	r2, [r9]
  40f88e:	3301      	adds	r3, #1
  40f890:	440c      	add	r4, r1
  40f892:	2b07      	cmp	r3, #7
  40f894:	9425      	str	r4, [sp, #148]	; 0x94
  40f896:	f8c9 1004 	str.w	r1, [r9, #4]
  40f89a:	9324      	str	r3, [sp, #144]	; 0x90
  40f89c:	f300 81c2 	bgt.w	40fc24 <_svfprintf_r+0x1550>
  40f8a0:	f109 0908 	add.w	r9, r9, #8
  40f8a4:	426d      	negs	r5, r5
  40f8a6:	2d00      	cmp	r5, #0
  40f8a8:	f340 809b 	ble.w	40f9e2 <_svfprintf_r+0x130e>
  40f8ac:	4aa1      	ldr	r2, [pc, #644]	; (40fb34 <_svfprintf_r+0x1460>)
  40f8ae:	920f      	str	r2, [sp, #60]	; 0x3c
  40f8b0:	2d10      	cmp	r5, #16
  40f8b2:	f340 80c3 	ble.w	40fa3c <_svfprintf_r+0x1368>
  40f8b6:	4622      	mov	r2, r4
  40f8b8:	2710      	movs	r7, #16
  40f8ba:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  40f8be:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40f8c0:	e005      	b.n	40f8ce <_svfprintf_r+0x11fa>
  40f8c2:	f109 0908 	add.w	r9, r9, #8
  40f8c6:	3d10      	subs	r5, #16
  40f8c8:	2d10      	cmp	r5, #16
  40f8ca:	f340 80b6 	ble.w	40fa3a <_svfprintf_r+0x1366>
  40f8ce:	3301      	adds	r3, #1
  40f8d0:	3210      	adds	r2, #16
  40f8d2:	2b07      	cmp	r3, #7
  40f8d4:	9225      	str	r2, [sp, #148]	; 0x94
  40f8d6:	9324      	str	r3, [sp, #144]	; 0x90
  40f8d8:	f8c9 a000 	str.w	sl, [r9]
  40f8dc:	f8c9 7004 	str.w	r7, [r9, #4]
  40f8e0:	ddef      	ble.n	40f8c2 <_svfprintf_r+0x11ee>
  40f8e2:	aa23      	add	r2, sp, #140	; 0x8c
  40f8e4:	4621      	mov	r1, r4
  40f8e6:	4658      	mov	r0, fp
  40f8e8:	f004 f836 	bl	413958 <__ssprint_r>
  40f8ec:	2800      	cmp	r0, #0
  40f8ee:	f47e afea 	bne.w	40e8c6 <_svfprintf_r+0x1f2>
  40f8f2:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40f8f4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40f8f6:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40f8fa:	e7e4      	b.n	40f8c6 <_svfprintf_r+0x11f2>
  40f8fc:	9a07      	ldr	r2, [sp, #28]
  40f8fe:	f7ff ba38 	b.w	40ed72 <_svfprintf_r+0x69e>
  40f902:	9a07      	ldr	r2, [sp, #28]
  40f904:	e590      	b.n	40f428 <_svfprintf_r+0xd54>
  40f906:	9b07      	ldr	r3, [sp, #28]
  40f908:	f043 0320 	orr.w	r3, r3, #32
  40f90c:	9307      	str	r3, [sp, #28]
  40f90e:	f108 0801 	add.w	r8, r8, #1
  40f912:	f898 3000 	ldrb.w	r3, [r8]
  40f916:	f7fe bf36 	b.w	40e786 <_svfprintf_r+0xb2>
  40f91a:	aa23      	add	r2, sp, #140	; 0x8c
  40f91c:	9909      	ldr	r1, [sp, #36]	; 0x24
  40f91e:	980a      	ldr	r0, [sp, #40]	; 0x28
  40f920:	f004 f81a 	bl	413958 <__ssprint_r>
  40f924:	2800      	cmp	r0, #0
  40f926:	f47e afce 	bne.w	40e8c6 <_svfprintf_r+0x1f2>
  40f92a:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40f92c:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40f930:	f7ff bbb6 	b.w	40f0a0 <_svfprintf_r+0x9cc>
  40f934:	2140      	movs	r1, #64	; 0x40
  40f936:	980a      	ldr	r0, [sp, #40]	; 0x28
  40f938:	f002 fede 	bl	4126f8 <_malloc_r>
  40f93c:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40f93e:	6010      	str	r0, [r2, #0]
  40f940:	6110      	str	r0, [r2, #16]
  40f942:	2800      	cmp	r0, #0
  40f944:	f000 81e5 	beq.w	40fd12 <_svfprintf_r+0x163e>
  40f948:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40f94a:	2340      	movs	r3, #64	; 0x40
  40f94c:	6153      	str	r3, [r2, #20]
  40f94e:	f7fe bed8 	b.w	40e702 <_svfprintf_r+0x2e>
  40f952:	a821      	add	r0, sp, #132	; 0x84
  40f954:	a91e      	add	r1, sp, #120	; 0x78
  40f956:	9004      	str	r0, [sp, #16]
  40f958:	9103      	str	r1, [sp, #12]
  40f95a:	a81d      	add	r0, sp, #116	; 0x74
  40f95c:	2103      	movs	r1, #3
  40f95e:	9002      	str	r0, [sp, #8]
  40f960:	9a08      	ldr	r2, [sp, #32]
  40f962:	f8cd b004 	str.w	fp, [sp, #4]
  40f966:	463b      	mov	r3, r7
  40f968:	9100      	str	r1, [sp, #0]
  40f96a:	980a      	ldr	r0, [sp, #40]	; 0x28
  40f96c:	f001 fa78 	bl	410e60 <_dtoa_r>
  40f970:	465d      	mov	r5, fp
  40f972:	4606      	mov	r6, r0
  40f974:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40f976:	2b46      	cmp	r3, #70	; 0x46
  40f978:	eb06 0405 	add.w	r4, r6, r5
  40f97c:	f47f aeb6 	bne.w	40f6ec <_svfprintf_r+0x1018>
  40f980:	7833      	ldrb	r3, [r6, #0]
  40f982:	2b30      	cmp	r3, #48	; 0x30
  40f984:	f000 817c 	beq.w	40fc80 <_svfprintf_r+0x15ac>
  40f988:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  40f98a:	442c      	add	r4, r5
  40f98c:	e6ae      	b.n	40f6ec <_svfprintf_r+0x1018>
  40f98e:	aa23      	add	r2, sp, #140	; 0x8c
  40f990:	9909      	ldr	r1, [sp, #36]	; 0x24
  40f992:	980a      	ldr	r0, [sp, #40]	; 0x28
  40f994:	f003 ffe0 	bl	413958 <__ssprint_r>
  40f998:	2800      	cmp	r0, #0
  40f99a:	f47e af94 	bne.w	40e8c6 <_svfprintf_r+0x1f2>
  40f99e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  40f9a0:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40f9a2:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40f9a6:	e766      	b.n	40f876 <_svfprintf_r+0x11a2>
  40f9a8:	f1bb 0f00 	cmp.w	fp, #0
  40f9ac:	bf08      	it	eq
  40f9ae:	f04f 0b01 	moveq.w	fp, #1
  40f9b2:	e667      	b.n	40f684 <_svfprintf_r+0xfb0>
  40f9b4:	970e      	str	r7, [sp, #56]	; 0x38
  40f9b6:	4617      	mov	r7, r2
  40f9b8:	e55e      	b.n	40f478 <_svfprintf_r+0xda4>
  40f9ba:	4630      	mov	r0, r6
  40f9bc:	f7fe fb60 	bl	40e080 <strlen>
  40f9c0:	46a3      	mov	fp, r4
  40f9c2:	4603      	mov	r3, r0
  40f9c4:	900d      	str	r0, [sp, #52]	; 0x34
  40f9c6:	f7ff baf4 	b.w	40efb2 <_svfprintf_r+0x8de>
  40f9ca:	aa23      	add	r2, sp, #140	; 0x8c
  40f9cc:	9909      	ldr	r1, [sp, #36]	; 0x24
  40f9ce:	980a      	ldr	r0, [sp, #40]	; 0x28
  40f9d0:	f003 ffc2 	bl	413958 <__ssprint_r>
  40f9d4:	2800      	cmp	r0, #0
  40f9d6:	f47e af76 	bne.w	40e8c6 <_svfprintf_r+0x1f2>
  40f9da:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40f9dc:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40f9de:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40f9e2:	9912      	ldr	r1, [sp, #72]	; 0x48
  40f9e4:	f8c9 6000 	str.w	r6, [r9]
  40f9e8:	3301      	adds	r3, #1
  40f9ea:	440c      	add	r4, r1
  40f9ec:	2b07      	cmp	r3, #7
  40f9ee:	9425      	str	r4, [sp, #148]	; 0x94
  40f9f0:	9324      	str	r3, [sp, #144]	; 0x90
  40f9f2:	f8c9 1004 	str.w	r1, [r9, #4]
  40f9f6:	f77f a8fb 	ble.w	40ebf0 <_svfprintf_r+0x51c>
  40f9fa:	e411      	b.n	40f220 <_svfprintf_r+0xb4c>
  40f9fc:	272d      	movs	r7, #45	; 0x2d
  40f9fe:	9308      	str	r3, [sp, #32]
  40fa00:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40fa02:	9307      	str	r3, [sp, #28]
  40fa04:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  40fa08:	f04f 0b00 	mov.w	fp, #0
  40fa0c:	f7ff b829 	b.w	40ea62 <_svfprintf_r+0x38e>
  40fa10:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40fa12:	1cdd      	adds	r5, r3, #3
  40fa14:	db1e      	blt.n	40fa54 <_svfprintf_r+0x1380>
  40fa16:	459b      	cmp	fp, r3
  40fa18:	db1c      	blt.n	40fa54 <_svfprintf_r+0x1380>
  40fa1a:	9313      	str	r3, [sp, #76]	; 0x4c
  40fa1c:	e689      	b.n	40f732 <_svfprintf_r+0x105e>
  40fa1e:	4623      	mov	r3, r4
  40fa20:	e677      	b.n	40f712 <_svfprintf_r+0x103e>
  40fa22:	aa23      	add	r2, sp, #140	; 0x8c
  40fa24:	9909      	ldr	r1, [sp, #36]	; 0x24
  40fa26:	980a      	ldr	r0, [sp, #40]	; 0x28
  40fa28:	f003 ff96 	bl	413958 <__ssprint_r>
  40fa2c:	2800      	cmp	r0, #0
  40fa2e:	f47e af4a 	bne.w	40e8c6 <_svfprintf_r+0x1f2>
  40fa32:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40fa34:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40fa38:	e459      	b.n	40f2ee <_svfprintf_r+0xc1a>
  40fa3a:	4614      	mov	r4, r2
  40fa3c:	3301      	adds	r3, #1
  40fa3e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40fa40:	9324      	str	r3, [sp, #144]	; 0x90
  40fa42:	442c      	add	r4, r5
  40fa44:	2b07      	cmp	r3, #7
  40fa46:	9425      	str	r4, [sp, #148]	; 0x94
  40fa48:	e889 0024 	stmia.w	r9, {r2, r5}
  40fa4c:	dcbd      	bgt.n	40f9ca <_svfprintf_r+0x12f6>
  40fa4e:	f109 0908 	add.w	r9, r9, #8
  40fa52:	e7c6      	b.n	40f9e2 <_svfprintf_r+0x130e>
  40fa54:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40fa56:	3a02      	subs	r2, #2
  40fa58:	9211      	str	r2, [sp, #68]	; 0x44
  40fa5a:	3b01      	subs	r3, #1
  40fa5c:	2b00      	cmp	r3, #0
  40fa5e:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  40fa62:	931d      	str	r3, [sp, #116]	; 0x74
  40fa64:	bfb8      	it	lt
  40fa66:	425b      	neglt	r3, r3
  40fa68:	f88d 207c 	strb.w	r2, [sp, #124]	; 0x7c
  40fa6c:	bfb4      	ite	lt
  40fa6e:	222d      	movlt	r2, #45	; 0x2d
  40fa70:	222b      	movge	r2, #43	; 0x2b
  40fa72:	2b09      	cmp	r3, #9
  40fa74:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
  40fa78:	f340 80f1 	ble.w	40fc5e <_svfprintf_r+0x158a>
  40fa7c:	f10d 008b 	add.w	r0, sp, #139	; 0x8b
  40fa80:	4604      	mov	r4, r0
  40fa82:	4a2d      	ldr	r2, [pc, #180]	; (40fb38 <_svfprintf_r+0x1464>)
  40fa84:	fb82 2103 	smull	r2, r1, r2, r3
  40fa88:	17da      	asrs	r2, r3, #31
  40fa8a:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
  40fa8e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
  40fa92:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
  40fa96:	f103 0130 	add.w	r1, r3, #48	; 0x30
  40fa9a:	2a09      	cmp	r2, #9
  40fa9c:	4613      	mov	r3, r2
  40fa9e:	f804 1d01 	strb.w	r1, [r4, #-1]!
  40faa2:	dcee      	bgt.n	40fa82 <_svfprintf_r+0x13ae>
  40faa4:	4621      	mov	r1, r4
  40faa6:	3330      	adds	r3, #48	; 0x30
  40faa8:	b2da      	uxtb	r2, r3
  40faaa:	f801 2d01 	strb.w	r2, [r1, #-1]!
  40faae:	4288      	cmp	r0, r1
  40fab0:	f240 813a 	bls.w	40fd28 <_svfprintf_r+0x1654>
  40fab4:	f10d 017e 	add.w	r1, sp, #126	; 0x7e
  40fab8:	4623      	mov	r3, r4
  40faba:	e001      	b.n	40fac0 <_svfprintf_r+0x13ec>
  40fabc:	f813 2b01 	ldrb.w	r2, [r3], #1
  40fac0:	f801 2b01 	strb.w	r2, [r1], #1
  40fac4:	4298      	cmp	r0, r3
  40fac6:	d1f9      	bne.n	40fabc <_svfprintf_r+0x13e8>
  40fac8:	1c43      	adds	r3, r0, #1
  40faca:	1b1b      	subs	r3, r3, r4
  40facc:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
  40fad0:	4413      	add	r3, r2
  40fad2:	aa1f      	add	r2, sp, #124	; 0x7c
  40fad4:	1a9b      	subs	r3, r3, r2
  40fad6:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40fad8:	9319      	str	r3, [sp, #100]	; 0x64
  40fada:	2a01      	cmp	r2, #1
  40fadc:	4413      	add	r3, r2
  40fade:	930d      	str	r3, [sp, #52]	; 0x34
  40fae0:	f340 80ea 	ble.w	40fcb8 <_svfprintf_r+0x15e4>
  40fae4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40fae6:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40fae8:	4413      	add	r3, r2
  40faea:	2200      	movs	r2, #0
  40faec:	930d      	str	r3, [sp, #52]	; 0x34
  40faee:	9213      	str	r2, [sp, #76]	; 0x4c
  40faf0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40faf4:	e62b      	b.n	40f74e <_svfprintf_r+0x107a>
  40faf6:	aa23      	add	r2, sp, #140	; 0x8c
  40faf8:	9909      	ldr	r1, [sp, #36]	; 0x24
  40fafa:	980a      	ldr	r0, [sp, #40]	; 0x28
  40fafc:	f003 ff2c 	bl	413958 <__ssprint_r>
  40fb00:	2800      	cmp	r0, #0
  40fb02:	f47e aee0 	bne.w	40e8c6 <_svfprintf_r+0x1f2>
  40fb06:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40fb08:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40fb0a:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40fb0e:	e4f6      	b.n	40f4fe <_svfprintf_r+0xe2a>
  40fb10:	2d06      	cmp	r5, #6
  40fb12:	462b      	mov	r3, r5
  40fb14:	bf28      	it	cs
  40fb16:	2306      	movcs	r3, #6
  40fb18:	930d      	str	r3, [sp, #52]	; 0x34
  40fb1a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40fb1e:	46b3      	mov	fp, r6
  40fb20:	970e      	str	r7, [sp, #56]	; 0x38
  40fb22:	9613      	str	r6, [sp, #76]	; 0x4c
  40fb24:	4637      	mov	r7, r6
  40fb26:	9308      	str	r3, [sp, #32]
  40fb28:	4e04      	ldr	r6, [pc, #16]	; (40fb3c <_svfprintf_r+0x1468>)
  40fb2a:	f7fe bf99 	b.w	40ea60 <_svfprintf_r+0x38c>
  40fb2e:	bf00      	nop
  40fb30:	0041775c 	.word	0x0041775c
  40fb34:	0041770c 	.word	0x0041770c
  40fb38:	66666667 	.word	0x66666667
  40fb3c:	00417754 	.word	0x00417754
  40fb40:	aa23      	add	r2, sp, #140	; 0x8c
  40fb42:	9909      	ldr	r1, [sp, #36]	; 0x24
  40fb44:	980a      	ldr	r0, [sp, #40]	; 0x28
  40fb46:	f003 ff07 	bl	413958 <__ssprint_r>
  40fb4a:	2800      	cmp	r0, #0
  40fb4c:	f47e aebb 	bne.w	40e8c6 <_svfprintf_r+0x1f2>
  40fb50:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40fb52:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40fb54:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40fb56:	1ad3      	subs	r3, r2, r3
  40fb58:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40fb5c:	e4e7      	b.n	40f52e <_svfprintf_r+0xe5a>
  40fb5e:	f04f 0b06 	mov.w	fp, #6
  40fb62:	e58f      	b.n	40f684 <_svfprintf_r+0xfb0>
  40fb64:	a821      	add	r0, sp, #132	; 0x84
  40fb66:	a91e      	add	r1, sp, #120	; 0x78
  40fb68:	9004      	str	r0, [sp, #16]
  40fb6a:	9103      	str	r1, [sp, #12]
  40fb6c:	a81d      	add	r0, sp, #116	; 0x74
  40fb6e:	2103      	movs	r1, #3
  40fb70:	9002      	str	r0, [sp, #8]
  40fb72:	9a08      	ldr	r2, [sp, #32]
  40fb74:	f8cd b004 	str.w	fp, [sp, #4]
  40fb78:	463b      	mov	r3, r7
  40fb7a:	9100      	str	r1, [sp, #0]
  40fb7c:	980a      	ldr	r0, [sp, #40]	; 0x28
  40fb7e:	f001 f96f 	bl	410e60 <_dtoa_r>
  40fb82:	465d      	mov	r5, fp
  40fb84:	4606      	mov	r6, r0
  40fb86:	eb00 040b 	add.w	r4, r0, fp
  40fb8a:	e6f9      	b.n	40f980 <_svfprintf_r+0x12ac>
  40fb8c:	9307      	str	r3, [sp, #28]
  40fb8e:	f7ff b959 	b.w	40ee44 <_svfprintf_r+0x770>
  40fb92:	272d      	movs	r7, #45	; 0x2d
  40fb94:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  40fb98:	f7ff b8b2 	b.w	40ed00 <_svfprintf_r+0x62c>
  40fb9c:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40fb9e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40fba0:	4413      	add	r3, r2
  40fba2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40fba4:	930d      	str	r3, [sp, #52]	; 0x34
  40fba6:	2a00      	cmp	r2, #0
  40fba8:	dd7e      	ble.n	40fca8 <_svfprintf_r+0x15d4>
  40fbaa:	2267      	movs	r2, #103	; 0x67
  40fbac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40fbb0:	9211      	str	r2, [sp, #68]	; 0x44
  40fbb2:	e5cc      	b.n	40f74e <_svfprintf_r+0x107a>
  40fbb4:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
  40fbb8:	970e      	str	r7, [sp, #56]	; 0x38
  40fbba:	9308      	str	r3, [sp, #32]
  40fbbc:	950d      	str	r5, [sp, #52]	; 0x34
  40fbbe:	4683      	mov	fp, r0
  40fbc0:	9013      	str	r0, [sp, #76]	; 0x4c
  40fbc2:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40fbc6:	f7fe bf4b 	b.w	40ea60 <_svfprintf_r+0x38c>
  40fbca:	9b07      	ldr	r3, [sp, #28]
  40fbcc:	07db      	lsls	r3, r3, #31
  40fbce:	465f      	mov	r7, fp
  40fbd0:	d505      	bpl.n	40fbde <_svfprintf_r+0x150a>
  40fbd2:	ae40      	add	r6, sp, #256	; 0x100
  40fbd4:	2330      	movs	r3, #48	; 0x30
  40fbd6:	f806 3d41 	strb.w	r3, [r6, #-65]!
  40fbda:	f7fe bf37 	b.w	40ea4c <_svfprintf_r+0x378>
  40fbde:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  40fbe2:	ae30      	add	r6, sp, #192	; 0xc0
  40fbe4:	f7fe bf35 	b.w	40ea52 <_svfprintf_r+0x37e>
  40fbe8:	2b00      	cmp	r3, #0
  40fbea:	dd7d      	ble.n	40fce8 <_svfprintf_r+0x1614>
  40fbec:	f1bb 0f00 	cmp.w	fp, #0
  40fbf0:	d13d      	bne.n	40fc6e <_svfprintf_r+0x159a>
  40fbf2:	9a07      	ldr	r2, [sp, #28]
  40fbf4:	07d4      	lsls	r4, r2, #31
  40fbf6:	d43a      	bmi.n	40fc6e <_svfprintf_r+0x159a>
  40fbf8:	461a      	mov	r2, r3
  40fbfa:	920d      	str	r2, [sp, #52]	; 0x34
  40fbfc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40fc00:	e5a5      	b.n	40f74e <_svfprintf_r+0x107a>
  40fc02:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40fc04:	2b47      	cmp	r3, #71	; 0x47
  40fc06:	f47f ad70 	bne.w	40f6ea <_svfprintf_r+0x1016>
  40fc0a:	9b07      	ldr	r3, [sp, #28]
  40fc0c:	07db      	lsls	r3, r3, #31
  40fc0e:	f53f aeb1 	bmi.w	40f974 <_svfprintf_r+0x12a0>
  40fc12:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40fc14:	1b9b      	subs	r3, r3, r6
  40fc16:	9312      	str	r3, [sp, #72]	; 0x48
  40fc18:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40fc1a:	2b47      	cmp	r3, #71	; 0x47
  40fc1c:	f43f aef8 	beq.w	40fa10 <_svfprintf_r+0x133c>
  40fc20:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40fc22:	e71a      	b.n	40fa5a <_svfprintf_r+0x1386>
  40fc24:	aa23      	add	r2, sp, #140	; 0x8c
  40fc26:	9909      	ldr	r1, [sp, #36]	; 0x24
  40fc28:	980a      	ldr	r0, [sp, #40]	; 0x28
  40fc2a:	f003 fe95 	bl	413958 <__ssprint_r>
  40fc2e:	2800      	cmp	r0, #0
  40fc30:	f47e ae49 	bne.w	40e8c6 <_svfprintf_r+0x1f2>
  40fc34:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  40fc36:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40fc38:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40fc3a:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40fc3e:	e631      	b.n	40f8a4 <_svfprintf_r+0x11d0>
  40fc40:	46a0      	mov	r8, r4
  40fc42:	2500      	movs	r5, #0
  40fc44:	f7fe bda1 	b.w	40e78a <_svfprintf_r+0xb6>
  40fc48:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40fc4a:	e562      	b.n	40f712 <_svfprintf_r+0x103e>
  40fc4c:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40fc4e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40fc50:	4413      	add	r3, r2
  40fc52:	2267      	movs	r2, #103	; 0x67
  40fc54:	930d      	str	r3, [sp, #52]	; 0x34
  40fc56:	9211      	str	r2, [sp, #68]	; 0x44
  40fc58:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40fc5c:	e577      	b.n	40f74e <_svfprintf_r+0x107a>
  40fc5e:	3330      	adds	r3, #48	; 0x30
  40fc60:	2230      	movs	r2, #48	; 0x30
  40fc62:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
  40fc66:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
  40fc6a:	ab20      	add	r3, sp, #128	; 0x80
  40fc6c:	e731      	b.n	40fad2 <_svfprintf_r+0x13fe>
  40fc6e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40fc70:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40fc72:	189d      	adds	r5, r3, r2
  40fc74:	eb05 030b 	add.w	r3, r5, fp
  40fc78:	930d      	str	r3, [sp, #52]	; 0x34
  40fc7a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40fc7e:	e566      	b.n	40f74e <_svfprintf_r+0x107a>
  40fc80:	9808      	ldr	r0, [sp, #32]
  40fc82:	4639      	mov	r1, r7
  40fc84:	2200      	movs	r2, #0
  40fc86:	2300      	movs	r3, #0
  40fc88:	f004 fcd2 	bl	414630 <__aeabi_dcmpeq>
  40fc8c:	2800      	cmp	r0, #0
  40fc8e:	f47f ae7b 	bne.w	40f988 <_svfprintf_r+0x12b4>
  40fc92:	f1c5 0501 	rsb	r5, r5, #1
  40fc96:	951d      	str	r5, [sp, #116]	; 0x74
  40fc98:	442c      	add	r4, r5
  40fc9a:	e527      	b.n	40f6ec <_svfprintf_r+0x1018>
  40fc9c:	4e32      	ldr	r6, [pc, #200]	; (40fd68 <_svfprintf_r+0x1694>)
  40fc9e:	4b33      	ldr	r3, [pc, #204]	; (40fd6c <_svfprintf_r+0x1698>)
  40fca0:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40fca4:	f7ff b82e 	b.w	40ed04 <_svfprintf_r+0x630>
  40fca8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40fcaa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40fcac:	f1c3 0301 	rsb	r3, r3, #1
  40fcb0:	441a      	add	r2, r3
  40fcb2:	4613      	mov	r3, r2
  40fcb4:	920d      	str	r2, [sp, #52]	; 0x34
  40fcb6:	e778      	b.n	40fbaa <_svfprintf_r+0x14d6>
  40fcb8:	9b07      	ldr	r3, [sp, #28]
  40fcba:	f013 0301 	ands.w	r3, r3, #1
  40fcbe:	f47f af11 	bne.w	40fae4 <_svfprintf_r+0x1410>
  40fcc2:	9313      	str	r3, [sp, #76]	; 0x4c
  40fcc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40fcc6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40fcca:	e540      	b.n	40f74e <_svfprintf_r+0x107a>
  40fccc:	980e      	ldr	r0, [sp, #56]	; 0x38
  40fcce:	f898 3001 	ldrb.w	r3, [r8, #1]
  40fcd2:	6805      	ldr	r5, [r0, #0]
  40fcd4:	3004      	adds	r0, #4
  40fcd6:	2d00      	cmp	r5, #0
  40fcd8:	900e      	str	r0, [sp, #56]	; 0x38
  40fcda:	46a0      	mov	r8, r4
  40fcdc:	f6be ad53 	bge.w	40e786 <_svfprintf_r+0xb2>
  40fce0:	f04f 35ff 	mov.w	r5, #4294967295
  40fce4:	f7fe bd4f 	b.w	40e786 <_svfprintf_r+0xb2>
  40fce8:	f1bb 0f00 	cmp.w	fp, #0
  40fcec:	d102      	bne.n	40fcf4 <_svfprintf_r+0x1620>
  40fcee:	9b07      	ldr	r3, [sp, #28]
  40fcf0:	07d8      	lsls	r0, r3, #31
  40fcf2:	d507      	bpl.n	40fd04 <_svfprintf_r+0x1630>
  40fcf4:	9b16      	ldr	r3, [sp, #88]	; 0x58
  40fcf6:	1c5d      	adds	r5, r3, #1
  40fcf8:	eb05 030b 	add.w	r3, r5, fp
  40fcfc:	930d      	str	r3, [sp, #52]	; 0x34
  40fcfe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40fd02:	e524      	b.n	40f74e <_svfprintf_r+0x107a>
  40fd04:	2301      	movs	r3, #1
  40fd06:	930d      	str	r3, [sp, #52]	; 0x34
  40fd08:	e521      	b.n	40f74e <_svfprintf_r+0x107a>
  40fd0a:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40fd0e:	f7ff b921 	b.w	40ef54 <_svfprintf_r+0x880>
  40fd12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40fd14:	230c      	movs	r3, #12
  40fd16:	6013      	str	r3, [r2, #0]
  40fd18:	f04f 30ff 	mov.w	r0, #4294967295
  40fd1c:	f7fe bddc 	b.w	40e8d8 <_svfprintf_r+0x204>
  40fd20:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40fd24:	f7ff b8f9 	b.w	40ef1a <_svfprintf_r+0x846>
  40fd28:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
  40fd2c:	e6d1      	b.n	40fad2 <_svfprintf_r+0x13fe>
  40fd2e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40fd32:	f7fe bdd9 	b.w	40e8e8 <_svfprintf_r+0x214>
  40fd36:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40fd3a:	f7ff b857 	b.w	40edec <_svfprintf_r+0x718>
  40fd3e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40fd42:	f7ff b825 	b.w	40ed90 <_svfprintf_r+0x6bc>
  40fd46:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40fd4a:	f7ff b94c 	b.w	40efe6 <_svfprintf_r+0x912>
  40fd4e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40fd52:	f7fe bff3 	b.w	40ed3c <_svfprintf_r+0x668>
  40fd56:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40fd5a:	f7fe bfa3 	b.w	40eca4 <_svfprintf_r+0x5d0>
  40fd5e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40fd62:	f7fe be33 	b.w	40e9cc <_svfprintf_r+0x2f8>
  40fd66:	bf00      	nop
  40fd68:	00417728 	.word	0x00417728
  40fd6c:	00417724 	.word	0x00417724

0040fd70 <__sprint_r.part.0>:
  40fd70:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  40fd72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40fd76:	049c      	lsls	r4, r3, #18
  40fd78:	4692      	mov	sl, r2
  40fd7a:	d52c      	bpl.n	40fdd6 <__sprint_r.part.0+0x66>
  40fd7c:	6893      	ldr	r3, [r2, #8]
  40fd7e:	6812      	ldr	r2, [r2, #0]
  40fd80:	b33b      	cbz	r3, 40fdd2 <__sprint_r.part.0+0x62>
  40fd82:	460f      	mov	r7, r1
  40fd84:	4680      	mov	r8, r0
  40fd86:	f102 0908 	add.w	r9, r2, #8
  40fd8a:	e919 0060 	ldmdb	r9, {r5, r6}
  40fd8e:	08b6      	lsrs	r6, r6, #2
  40fd90:	d017      	beq.n	40fdc2 <__sprint_r.part.0+0x52>
  40fd92:	3d04      	subs	r5, #4
  40fd94:	2400      	movs	r4, #0
  40fd96:	e001      	b.n	40fd9c <__sprint_r.part.0+0x2c>
  40fd98:	42a6      	cmp	r6, r4
  40fd9a:	d010      	beq.n	40fdbe <__sprint_r.part.0+0x4e>
  40fd9c:	463a      	mov	r2, r7
  40fd9e:	f855 1f04 	ldr.w	r1, [r5, #4]!
  40fda2:	4640      	mov	r0, r8
  40fda4:	f002 f92a 	bl	411ffc <_fputwc_r>
  40fda8:	1c43      	adds	r3, r0, #1
  40fdaa:	f104 0401 	add.w	r4, r4, #1
  40fdae:	d1f3      	bne.n	40fd98 <__sprint_r.part.0+0x28>
  40fdb0:	2300      	movs	r3, #0
  40fdb2:	f8ca 3008 	str.w	r3, [sl, #8]
  40fdb6:	f8ca 3004 	str.w	r3, [sl, #4]
  40fdba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40fdbe:	f8da 3008 	ldr.w	r3, [sl, #8]
  40fdc2:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
  40fdc6:	f8ca 3008 	str.w	r3, [sl, #8]
  40fdca:	f109 0908 	add.w	r9, r9, #8
  40fdce:	2b00      	cmp	r3, #0
  40fdd0:	d1db      	bne.n	40fd8a <__sprint_r.part.0+0x1a>
  40fdd2:	2000      	movs	r0, #0
  40fdd4:	e7ec      	b.n	40fdb0 <__sprint_r.part.0+0x40>
  40fdd6:	f002 fa59 	bl	41228c <__sfvwrite_r>
  40fdda:	2300      	movs	r3, #0
  40fddc:	f8ca 3008 	str.w	r3, [sl, #8]
  40fde0:	f8ca 3004 	str.w	r3, [sl, #4]
  40fde4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0040fde8 <_vfiprintf_r>:
  40fde8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40fdec:	b0ab      	sub	sp, #172	; 0xac
  40fdee:	461c      	mov	r4, r3
  40fdf0:	9100      	str	r1, [sp, #0]
  40fdf2:	4690      	mov	r8, r2
  40fdf4:	9304      	str	r3, [sp, #16]
  40fdf6:	9005      	str	r0, [sp, #20]
  40fdf8:	b118      	cbz	r0, 40fe02 <_vfiprintf_r+0x1a>
  40fdfa:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40fdfc:	2b00      	cmp	r3, #0
  40fdfe:	f000 80de 	beq.w	40ffbe <_vfiprintf_r+0x1d6>
  40fe02:	9800      	ldr	r0, [sp, #0]
  40fe04:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
  40fe08:	b28a      	uxth	r2, r1
  40fe0a:	0495      	lsls	r5, r2, #18
  40fe0c:	d407      	bmi.n	40fe1e <_vfiprintf_r+0x36>
  40fe0e:	6e43      	ldr	r3, [r0, #100]	; 0x64
  40fe10:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
  40fe14:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  40fe18:	8182      	strh	r2, [r0, #12]
  40fe1a:	6643      	str	r3, [r0, #100]	; 0x64
  40fe1c:	b292      	uxth	r2, r2
  40fe1e:	0711      	lsls	r1, r2, #28
  40fe20:	f140 80b1 	bpl.w	40ff86 <_vfiprintf_r+0x19e>
  40fe24:	9b00      	ldr	r3, [sp, #0]
  40fe26:	691b      	ldr	r3, [r3, #16]
  40fe28:	2b00      	cmp	r3, #0
  40fe2a:	f000 80ac 	beq.w	40ff86 <_vfiprintf_r+0x19e>
  40fe2e:	f002 021a 	and.w	r2, r2, #26
  40fe32:	2a0a      	cmp	r2, #10
  40fe34:	f000 80b5 	beq.w	40ffa2 <_vfiprintf_r+0x1ba>
  40fe38:	2300      	movs	r3, #0
  40fe3a:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
  40fe3e:	9302      	str	r3, [sp, #8]
  40fe40:	930f      	str	r3, [sp, #60]	; 0x3c
  40fe42:	930e      	str	r3, [sp, #56]	; 0x38
  40fe44:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  40fe48:	46da      	mov	sl, fp
  40fe4a:	f898 3000 	ldrb.w	r3, [r8]
  40fe4e:	4644      	mov	r4, r8
  40fe50:	b1fb      	cbz	r3, 40fe92 <_vfiprintf_r+0xaa>
  40fe52:	2b25      	cmp	r3, #37	; 0x25
  40fe54:	d102      	bne.n	40fe5c <_vfiprintf_r+0x74>
  40fe56:	e01c      	b.n	40fe92 <_vfiprintf_r+0xaa>
  40fe58:	2b25      	cmp	r3, #37	; 0x25
  40fe5a:	d003      	beq.n	40fe64 <_vfiprintf_r+0x7c>
  40fe5c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  40fe60:	2b00      	cmp	r3, #0
  40fe62:	d1f9      	bne.n	40fe58 <_vfiprintf_r+0x70>
  40fe64:	ebc8 0504 	rsb	r5, r8, r4
  40fe68:	b19d      	cbz	r5, 40fe92 <_vfiprintf_r+0xaa>
  40fe6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40fe6c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40fe6e:	f8ca 8000 	str.w	r8, [sl]
  40fe72:	3301      	adds	r3, #1
  40fe74:	442a      	add	r2, r5
  40fe76:	2b07      	cmp	r3, #7
  40fe78:	f8ca 5004 	str.w	r5, [sl, #4]
  40fe7c:	920f      	str	r2, [sp, #60]	; 0x3c
  40fe7e:	930e      	str	r3, [sp, #56]	; 0x38
  40fe80:	dd7b      	ble.n	40ff7a <_vfiprintf_r+0x192>
  40fe82:	2a00      	cmp	r2, #0
  40fe84:	f040 8528 	bne.w	4108d8 <_vfiprintf_r+0xaf0>
  40fe88:	9b02      	ldr	r3, [sp, #8]
  40fe8a:	920e      	str	r2, [sp, #56]	; 0x38
  40fe8c:	442b      	add	r3, r5
  40fe8e:	46da      	mov	sl, fp
  40fe90:	9302      	str	r3, [sp, #8]
  40fe92:	7823      	ldrb	r3, [r4, #0]
  40fe94:	2b00      	cmp	r3, #0
  40fe96:	f000 843e 	beq.w	410716 <_vfiprintf_r+0x92e>
  40fe9a:	2100      	movs	r1, #0
  40fe9c:	f04f 0300 	mov.w	r3, #0
  40fea0:	f04f 32ff 	mov.w	r2, #4294967295
  40fea4:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  40fea8:	f104 0801 	add.w	r8, r4, #1
  40feac:	7863      	ldrb	r3, [r4, #1]
  40feae:	9201      	str	r2, [sp, #4]
  40feb0:	4608      	mov	r0, r1
  40feb2:	460e      	mov	r6, r1
  40feb4:	460c      	mov	r4, r1
  40feb6:	f108 0801 	add.w	r8, r8, #1
  40feba:	f1a3 0220 	sub.w	r2, r3, #32
  40febe:	2a58      	cmp	r2, #88	; 0x58
  40fec0:	f200 8393 	bhi.w	4105ea <_vfiprintf_r+0x802>
  40fec4:	e8df f012 	tbh	[pc, r2, lsl #1]
  40fec8:	03910346 	.word	0x03910346
  40fecc:	034e0391 	.word	0x034e0391
  40fed0:	03910391 	.word	0x03910391
  40fed4:	03910391 	.word	0x03910391
  40fed8:	03910391 	.word	0x03910391
  40fedc:	02670289 	.word	0x02670289
  40fee0:	00800391 	.word	0x00800391
  40fee4:	0391026c 	.word	0x0391026c
  40fee8:	025901c6 	.word	0x025901c6
  40feec:	02590259 	.word	0x02590259
  40fef0:	02590259 	.word	0x02590259
  40fef4:	02590259 	.word	0x02590259
  40fef8:	02590259 	.word	0x02590259
  40fefc:	03910391 	.word	0x03910391
  40ff00:	03910391 	.word	0x03910391
  40ff04:	03910391 	.word	0x03910391
  40ff08:	03910391 	.word	0x03910391
  40ff0c:	03910391 	.word	0x03910391
  40ff10:	039101cb 	.word	0x039101cb
  40ff14:	03910391 	.word	0x03910391
  40ff18:	03910391 	.word	0x03910391
  40ff1c:	03910391 	.word	0x03910391
  40ff20:	03910391 	.word	0x03910391
  40ff24:	02140391 	.word	0x02140391
  40ff28:	03910391 	.word	0x03910391
  40ff2c:	03910391 	.word	0x03910391
  40ff30:	02ee0391 	.word	0x02ee0391
  40ff34:	03910391 	.word	0x03910391
  40ff38:	03910311 	.word	0x03910311
  40ff3c:	03910391 	.word	0x03910391
  40ff40:	03910391 	.word	0x03910391
  40ff44:	03910391 	.word	0x03910391
  40ff48:	03910391 	.word	0x03910391
  40ff4c:	03340391 	.word	0x03340391
  40ff50:	0391038a 	.word	0x0391038a
  40ff54:	03910391 	.word	0x03910391
  40ff58:	038a0367 	.word	0x038a0367
  40ff5c:	03910391 	.word	0x03910391
  40ff60:	0391036c 	.word	0x0391036c
  40ff64:	02950379 	.word	0x02950379
  40ff68:	02e90085 	.word	0x02e90085
  40ff6c:	029b0391 	.word	0x029b0391
  40ff70:	02ba0391 	.word	0x02ba0391
  40ff74:	03910391 	.word	0x03910391
  40ff78:	0353      	.short	0x0353
  40ff7a:	f10a 0a08 	add.w	sl, sl, #8
  40ff7e:	9b02      	ldr	r3, [sp, #8]
  40ff80:	442b      	add	r3, r5
  40ff82:	9302      	str	r3, [sp, #8]
  40ff84:	e785      	b.n	40fe92 <_vfiprintf_r+0xaa>
  40ff86:	9900      	ldr	r1, [sp, #0]
  40ff88:	9805      	ldr	r0, [sp, #20]
  40ff8a:	f000 fe61 	bl	410c50 <__swsetup_r>
  40ff8e:	2800      	cmp	r0, #0
  40ff90:	f040 8558 	bne.w	410a44 <_vfiprintf_r+0xc5c>
  40ff94:	9b00      	ldr	r3, [sp, #0]
  40ff96:	899a      	ldrh	r2, [r3, #12]
  40ff98:	f002 021a 	and.w	r2, r2, #26
  40ff9c:	2a0a      	cmp	r2, #10
  40ff9e:	f47f af4b 	bne.w	40fe38 <_vfiprintf_r+0x50>
  40ffa2:	9900      	ldr	r1, [sp, #0]
  40ffa4:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
  40ffa8:	2b00      	cmp	r3, #0
  40ffaa:	f6ff af45 	blt.w	40fe38 <_vfiprintf_r+0x50>
  40ffae:	4623      	mov	r3, r4
  40ffb0:	4642      	mov	r2, r8
  40ffb2:	9805      	ldr	r0, [sp, #20]
  40ffb4:	f000 fe16 	bl	410be4 <__sbprintf>
  40ffb8:	b02b      	add	sp, #172	; 0xac
  40ffba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ffbe:	f001 ffb3 	bl	411f28 <__sinit>
  40ffc2:	e71e      	b.n	40fe02 <_vfiprintf_r+0x1a>
  40ffc4:	4264      	negs	r4, r4
  40ffc6:	9304      	str	r3, [sp, #16]
  40ffc8:	f046 0604 	orr.w	r6, r6, #4
  40ffcc:	f898 3000 	ldrb.w	r3, [r8]
  40ffd0:	e771      	b.n	40feb6 <_vfiprintf_r+0xce>
  40ffd2:	2130      	movs	r1, #48	; 0x30
  40ffd4:	9804      	ldr	r0, [sp, #16]
  40ffd6:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
  40ffda:	9901      	ldr	r1, [sp, #4]
  40ffdc:	9406      	str	r4, [sp, #24]
  40ffde:	f04f 0300 	mov.w	r3, #0
  40ffe2:	2278      	movs	r2, #120	; 0x78
  40ffe4:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  40ffe8:	2900      	cmp	r1, #0
  40ffea:	4603      	mov	r3, r0
  40ffec:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
  40fff0:	6804      	ldr	r4, [r0, #0]
  40fff2:	f103 0304 	add.w	r3, r3, #4
  40fff6:	f04f 0500 	mov.w	r5, #0
  40fffa:	f046 0202 	orr.w	r2, r6, #2
  40fffe:	f2c0 8525 	blt.w	410a4c <_vfiprintf_r+0xc64>
  410002:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  410006:	ea54 0205 	orrs.w	r2, r4, r5
  41000a:	f046 0602 	orr.w	r6, r6, #2
  41000e:	9304      	str	r3, [sp, #16]
  410010:	f040 84bf 	bne.w	410992 <_vfiprintf_r+0xbaa>
  410014:	48b3      	ldr	r0, [pc, #716]	; (4102e4 <_vfiprintf_r+0x4fc>)
  410016:	9b01      	ldr	r3, [sp, #4]
  410018:	2b00      	cmp	r3, #0
  41001a:	f040 841c 	bne.w	410856 <_vfiprintf_r+0xa6e>
  41001e:	4699      	mov	r9, r3
  410020:	2300      	movs	r3, #0
  410022:	9301      	str	r3, [sp, #4]
  410024:	9303      	str	r3, [sp, #12]
  410026:	465f      	mov	r7, fp
  410028:	9b01      	ldr	r3, [sp, #4]
  41002a:	9a03      	ldr	r2, [sp, #12]
  41002c:	4293      	cmp	r3, r2
  41002e:	bfb8      	it	lt
  410030:	4613      	movlt	r3, r2
  410032:	461d      	mov	r5, r3
  410034:	f1b9 0f00 	cmp.w	r9, #0
  410038:	d000      	beq.n	41003c <_vfiprintf_r+0x254>
  41003a:	3501      	adds	r5, #1
  41003c:	f016 0302 	ands.w	r3, r6, #2
  410040:	9307      	str	r3, [sp, #28]
  410042:	bf18      	it	ne
  410044:	3502      	addne	r5, #2
  410046:	f016 0384 	ands.w	r3, r6, #132	; 0x84
  41004a:	9308      	str	r3, [sp, #32]
  41004c:	f040 82f1 	bne.w	410632 <_vfiprintf_r+0x84a>
  410050:	9b06      	ldr	r3, [sp, #24]
  410052:	1b5c      	subs	r4, r3, r5
  410054:	2c00      	cmp	r4, #0
  410056:	f340 82ec 	ble.w	410632 <_vfiprintf_r+0x84a>
  41005a:	2c10      	cmp	r4, #16
  41005c:	f340 8556 	ble.w	410b0c <_vfiprintf_r+0xd24>
  410060:	f8df 9284 	ldr.w	r9, [pc, #644]	; 4102e8 <_vfiprintf_r+0x500>
  410064:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
  410068:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  41006a:	46d4      	mov	ip, sl
  41006c:	2310      	movs	r3, #16
  41006e:	46c2      	mov	sl, r8
  410070:	4670      	mov	r0, lr
  410072:	46a8      	mov	r8, r5
  410074:	464d      	mov	r5, r9
  410076:	f8dd 9014 	ldr.w	r9, [sp, #20]
  41007a:	e007      	b.n	41008c <_vfiprintf_r+0x2a4>
  41007c:	f100 0e02 	add.w	lr, r0, #2
  410080:	f10c 0c08 	add.w	ip, ip, #8
  410084:	4608      	mov	r0, r1
  410086:	3c10      	subs	r4, #16
  410088:	2c10      	cmp	r4, #16
  41008a:	dd13      	ble.n	4100b4 <_vfiprintf_r+0x2cc>
  41008c:	1c41      	adds	r1, r0, #1
  41008e:	3210      	adds	r2, #16
  410090:	2907      	cmp	r1, #7
  410092:	920f      	str	r2, [sp, #60]	; 0x3c
  410094:	f8cc 5000 	str.w	r5, [ip]
  410098:	f8cc 3004 	str.w	r3, [ip, #4]
  41009c:	910e      	str	r1, [sp, #56]	; 0x38
  41009e:	dded      	ble.n	41007c <_vfiprintf_r+0x294>
  4100a0:	2a00      	cmp	r2, #0
  4100a2:	f040 82b7 	bne.w	410614 <_vfiprintf_r+0x82c>
  4100a6:	3c10      	subs	r4, #16
  4100a8:	2c10      	cmp	r4, #16
  4100aa:	4610      	mov	r0, r2
  4100ac:	f04f 0e01 	mov.w	lr, #1
  4100b0:	46dc      	mov	ip, fp
  4100b2:	dceb      	bgt.n	41008c <_vfiprintf_r+0x2a4>
  4100b4:	46a9      	mov	r9, r5
  4100b6:	4670      	mov	r0, lr
  4100b8:	4645      	mov	r5, r8
  4100ba:	46d0      	mov	r8, sl
  4100bc:	46e2      	mov	sl, ip
  4100be:	4422      	add	r2, r4
  4100c0:	2807      	cmp	r0, #7
  4100c2:	920f      	str	r2, [sp, #60]	; 0x3c
  4100c4:	f8ca 9000 	str.w	r9, [sl]
  4100c8:	f8ca 4004 	str.w	r4, [sl, #4]
  4100cc:	900e      	str	r0, [sp, #56]	; 0x38
  4100ce:	f300 8375 	bgt.w	4107bc <_vfiprintf_r+0x9d4>
  4100d2:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  4100d6:	f10a 0a08 	add.w	sl, sl, #8
  4100da:	f100 0e01 	add.w	lr, r0, #1
  4100de:	2b00      	cmp	r3, #0
  4100e0:	f040 82b0 	bne.w	410644 <_vfiprintf_r+0x85c>
  4100e4:	9b07      	ldr	r3, [sp, #28]
  4100e6:	2b00      	cmp	r3, #0
  4100e8:	f000 82c3 	beq.w	410672 <_vfiprintf_r+0x88a>
  4100ec:	3202      	adds	r2, #2
  4100ee:	a90c      	add	r1, sp, #48	; 0x30
  4100f0:	2302      	movs	r3, #2
  4100f2:	f1be 0f07 	cmp.w	lr, #7
  4100f6:	920f      	str	r2, [sp, #60]	; 0x3c
  4100f8:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  4100fc:	e88a 000a 	stmia.w	sl, {r1, r3}
  410100:	f340 8378 	ble.w	4107f4 <_vfiprintf_r+0xa0c>
  410104:	2a00      	cmp	r2, #0
  410106:	f040 840a 	bne.w	41091e <_vfiprintf_r+0xb36>
  41010a:	9b08      	ldr	r3, [sp, #32]
  41010c:	2b80      	cmp	r3, #128	; 0x80
  41010e:	f04f 0e01 	mov.w	lr, #1
  410112:	4610      	mov	r0, r2
  410114:	46da      	mov	sl, fp
  410116:	f040 82b0 	bne.w	41067a <_vfiprintf_r+0x892>
  41011a:	9b06      	ldr	r3, [sp, #24]
  41011c:	1b5c      	subs	r4, r3, r5
  41011e:	2c00      	cmp	r4, #0
  410120:	f340 82ab 	ble.w	41067a <_vfiprintf_r+0x892>
  410124:	2c10      	cmp	r4, #16
  410126:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 4102ec <_vfiprintf_r+0x504>
  41012a:	f340 850b 	ble.w	410b44 <_vfiprintf_r+0xd5c>
  41012e:	46d6      	mov	lr, sl
  410130:	2310      	movs	r3, #16
  410132:	46c2      	mov	sl, r8
  410134:	46a8      	mov	r8, r5
  410136:	464d      	mov	r5, r9
  410138:	f8dd 9014 	ldr.w	r9, [sp, #20]
  41013c:	e007      	b.n	41014e <_vfiprintf_r+0x366>
  41013e:	f100 0c02 	add.w	ip, r0, #2
  410142:	f10e 0e08 	add.w	lr, lr, #8
  410146:	4608      	mov	r0, r1
  410148:	3c10      	subs	r4, #16
  41014a:	2c10      	cmp	r4, #16
  41014c:	dd13      	ble.n	410176 <_vfiprintf_r+0x38e>
  41014e:	1c41      	adds	r1, r0, #1
  410150:	3210      	adds	r2, #16
  410152:	2907      	cmp	r1, #7
  410154:	920f      	str	r2, [sp, #60]	; 0x3c
  410156:	f8ce 5000 	str.w	r5, [lr]
  41015a:	f8ce 3004 	str.w	r3, [lr, #4]
  41015e:	910e      	str	r1, [sp, #56]	; 0x38
  410160:	dded      	ble.n	41013e <_vfiprintf_r+0x356>
  410162:	2a00      	cmp	r2, #0
  410164:	f040 8315 	bne.w	410792 <_vfiprintf_r+0x9aa>
  410168:	3c10      	subs	r4, #16
  41016a:	2c10      	cmp	r4, #16
  41016c:	f04f 0c01 	mov.w	ip, #1
  410170:	4610      	mov	r0, r2
  410172:	46de      	mov	lr, fp
  410174:	dceb      	bgt.n	41014e <_vfiprintf_r+0x366>
  410176:	46a9      	mov	r9, r5
  410178:	4645      	mov	r5, r8
  41017a:	46d0      	mov	r8, sl
  41017c:	46f2      	mov	sl, lr
  41017e:	4422      	add	r2, r4
  410180:	f1bc 0f07 	cmp.w	ip, #7
  410184:	920f      	str	r2, [sp, #60]	; 0x3c
  410186:	f8ca 9000 	str.w	r9, [sl]
  41018a:	f8ca 4004 	str.w	r4, [sl, #4]
  41018e:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
  410192:	f300 83d2 	bgt.w	41093a <_vfiprintf_r+0xb52>
  410196:	9b01      	ldr	r3, [sp, #4]
  410198:	9903      	ldr	r1, [sp, #12]
  41019a:	1a5c      	subs	r4, r3, r1
  41019c:	2c00      	cmp	r4, #0
  41019e:	f10a 0a08 	add.w	sl, sl, #8
  4101a2:	f10c 0e01 	add.w	lr, ip, #1
  4101a6:	4660      	mov	r0, ip
  4101a8:	f300 826d 	bgt.w	410686 <_vfiprintf_r+0x89e>
  4101ac:	9903      	ldr	r1, [sp, #12]
  4101ae:	f8ca 7000 	str.w	r7, [sl]
  4101b2:	440a      	add	r2, r1
  4101b4:	f1be 0f07 	cmp.w	lr, #7
  4101b8:	920f      	str	r2, [sp, #60]	; 0x3c
  4101ba:	f8ca 1004 	str.w	r1, [sl, #4]
  4101be:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  4101c2:	f340 82ce 	ble.w	410762 <_vfiprintf_r+0x97a>
  4101c6:	2a00      	cmp	r2, #0
  4101c8:	f040 833a 	bne.w	410840 <_vfiprintf_r+0xa58>
  4101cc:	0770      	lsls	r0, r6, #29
  4101ce:	920e      	str	r2, [sp, #56]	; 0x38
  4101d0:	d538      	bpl.n	410244 <_vfiprintf_r+0x45c>
  4101d2:	9b06      	ldr	r3, [sp, #24]
  4101d4:	1b5c      	subs	r4, r3, r5
  4101d6:	2c00      	cmp	r4, #0
  4101d8:	dd34      	ble.n	410244 <_vfiprintf_r+0x45c>
  4101da:	46da      	mov	sl, fp
  4101dc:	2c10      	cmp	r4, #16
  4101de:	f340 84ab 	ble.w	410b38 <_vfiprintf_r+0xd50>
  4101e2:	f8df 9104 	ldr.w	r9, [pc, #260]	; 4102e8 <_vfiprintf_r+0x500>
  4101e6:	990e      	ldr	r1, [sp, #56]	; 0x38
  4101e8:	464f      	mov	r7, r9
  4101ea:	2610      	movs	r6, #16
  4101ec:	f8dd 9014 	ldr.w	r9, [sp, #20]
  4101f0:	e006      	b.n	410200 <_vfiprintf_r+0x418>
  4101f2:	1c88      	adds	r0, r1, #2
  4101f4:	f10a 0a08 	add.w	sl, sl, #8
  4101f8:	4619      	mov	r1, r3
  4101fa:	3c10      	subs	r4, #16
  4101fc:	2c10      	cmp	r4, #16
  4101fe:	dd13      	ble.n	410228 <_vfiprintf_r+0x440>
  410200:	1c4b      	adds	r3, r1, #1
  410202:	3210      	adds	r2, #16
  410204:	2b07      	cmp	r3, #7
  410206:	920f      	str	r2, [sp, #60]	; 0x3c
  410208:	f8ca 7000 	str.w	r7, [sl]
  41020c:	f8ca 6004 	str.w	r6, [sl, #4]
  410210:	930e      	str	r3, [sp, #56]	; 0x38
  410212:	ddee      	ble.n	4101f2 <_vfiprintf_r+0x40a>
  410214:	2a00      	cmp	r2, #0
  410216:	f040 828e 	bne.w	410736 <_vfiprintf_r+0x94e>
  41021a:	3c10      	subs	r4, #16
  41021c:	2c10      	cmp	r4, #16
  41021e:	f04f 0001 	mov.w	r0, #1
  410222:	4611      	mov	r1, r2
  410224:	46da      	mov	sl, fp
  410226:	dceb      	bgt.n	410200 <_vfiprintf_r+0x418>
  410228:	46b9      	mov	r9, r7
  41022a:	4422      	add	r2, r4
  41022c:	2807      	cmp	r0, #7
  41022e:	920f      	str	r2, [sp, #60]	; 0x3c
  410230:	f8ca 9000 	str.w	r9, [sl]
  410234:	f8ca 4004 	str.w	r4, [sl, #4]
  410238:	900e      	str	r0, [sp, #56]	; 0x38
  41023a:	f340 829b 	ble.w	410774 <_vfiprintf_r+0x98c>
  41023e:	2a00      	cmp	r2, #0
  410240:	f040 8425 	bne.w	410a8e <_vfiprintf_r+0xca6>
  410244:	9b02      	ldr	r3, [sp, #8]
  410246:	9a06      	ldr	r2, [sp, #24]
  410248:	42aa      	cmp	r2, r5
  41024a:	bfac      	ite	ge
  41024c:	189b      	addge	r3, r3, r2
  41024e:	195b      	addlt	r3, r3, r5
  410250:	9302      	str	r3, [sp, #8]
  410252:	e299      	b.n	410788 <_vfiprintf_r+0x9a0>
  410254:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  410258:	f898 3000 	ldrb.w	r3, [r8]
  41025c:	e62b      	b.n	40feb6 <_vfiprintf_r+0xce>
  41025e:	9406      	str	r4, [sp, #24]
  410260:	2900      	cmp	r1, #0
  410262:	f040 84af 	bne.w	410bc4 <_vfiprintf_r+0xddc>
  410266:	f046 0610 	orr.w	r6, r6, #16
  41026a:	06b3      	lsls	r3, r6, #26
  41026c:	f140 8312 	bpl.w	410894 <_vfiprintf_r+0xaac>
  410270:	9904      	ldr	r1, [sp, #16]
  410272:	3107      	adds	r1, #7
  410274:	f021 0107 	bic.w	r1, r1, #7
  410278:	e9d1 2300 	ldrd	r2, r3, [r1]
  41027c:	3108      	adds	r1, #8
  41027e:	9104      	str	r1, [sp, #16]
  410280:	4614      	mov	r4, r2
  410282:	461d      	mov	r5, r3
  410284:	2a00      	cmp	r2, #0
  410286:	f173 0300 	sbcs.w	r3, r3, #0
  41028a:	f2c0 8386 	blt.w	41099a <_vfiprintf_r+0xbb2>
  41028e:	9b01      	ldr	r3, [sp, #4]
  410290:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  410294:	2b00      	cmp	r3, #0
  410296:	f2c0 831a 	blt.w	4108ce <_vfiprintf_r+0xae6>
  41029a:	ea54 0305 	orrs.w	r3, r4, r5
  41029e:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4102a2:	f000 80ed 	beq.w	410480 <_vfiprintf_r+0x698>
  4102a6:	2d00      	cmp	r5, #0
  4102a8:	bf08      	it	eq
  4102aa:	2c0a      	cmpeq	r4, #10
  4102ac:	f0c0 80ed 	bcc.w	41048a <_vfiprintf_r+0x6a2>
  4102b0:	465f      	mov	r7, fp
  4102b2:	4620      	mov	r0, r4
  4102b4:	4629      	mov	r1, r5
  4102b6:	220a      	movs	r2, #10
  4102b8:	2300      	movs	r3, #0
  4102ba:	f004 fa29 	bl	414710 <__aeabi_uldivmod>
  4102be:	3230      	adds	r2, #48	; 0x30
  4102c0:	f807 2d01 	strb.w	r2, [r7, #-1]!
  4102c4:	4620      	mov	r0, r4
  4102c6:	4629      	mov	r1, r5
  4102c8:	2300      	movs	r3, #0
  4102ca:	220a      	movs	r2, #10
  4102cc:	f004 fa20 	bl	414710 <__aeabi_uldivmod>
  4102d0:	4604      	mov	r4, r0
  4102d2:	460d      	mov	r5, r1
  4102d4:	ea54 0305 	orrs.w	r3, r4, r5
  4102d8:	d1eb      	bne.n	4102b2 <_vfiprintf_r+0x4ca>
  4102da:	ebc7 030b 	rsb	r3, r7, fp
  4102de:	9303      	str	r3, [sp, #12]
  4102e0:	e6a2      	b.n	410028 <_vfiprintf_r+0x240>
  4102e2:	bf00      	nop
  4102e4:	00417740 	.word	0x00417740
  4102e8:	00417780 	.word	0x00417780
  4102ec:	00417770 	.word	0x00417770
  4102f0:	9406      	str	r4, [sp, #24]
  4102f2:	2900      	cmp	r1, #0
  4102f4:	f040 8462 	bne.w	410bbc <_vfiprintf_r+0xdd4>
  4102f8:	f046 0610 	orr.w	r6, r6, #16
  4102fc:	f016 0320 	ands.w	r3, r6, #32
  410300:	f000 82ae 	beq.w	410860 <_vfiprintf_r+0xa78>
  410304:	9b04      	ldr	r3, [sp, #16]
  410306:	3307      	adds	r3, #7
  410308:	f023 0307 	bic.w	r3, r3, #7
  41030c:	f04f 0200 	mov.w	r2, #0
  410310:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  410314:	e9d3 4500 	ldrd	r4, r5, [r3]
  410318:	f103 0208 	add.w	r2, r3, #8
  41031c:	9b01      	ldr	r3, [sp, #4]
  41031e:	9204      	str	r2, [sp, #16]
  410320:	2b00      	cmp	r3, #0
  410322:	f2c0 8174 	blt.w	41060e <_vfiprintf_r+0x826>
  410326:	ea54 0305 	orrs.w	r3, r4, r5
  41032a:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  41032e:	f040 816e 	bne.w	41060e <_vfiprintf_r+0x826>
  410332:	9b01      	ldr	r3, [sp, #4]
  410334:	2b00      	cmp	r3, #0
  410336:	f000 8430 	beq.w	410b9a <_vfiprintf_r+0xdb2>
  41033a:	f04f 0900 	mov.w	r9, #0
  41033e:	2400      	movs	r4, #0
  410340:	2500      	movs	r5, #0
  410342:	465f      	mov	r7, fp
  410344:	08e2      	lsrs	r2, r4, #3
  410346:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  41034a:	08e9      	lsrs	r1, r5, #3
  41034c:	f004 0307 	and.w	r3, r4, #7
  410350:	460d      	mov	r5, r1
  410352:	4614      	mov	r4, r2
  410354:	3330      	adds	r3, #48	; 0x30
  410356:	ea54 0205 	orrs.w	r2, r4, r5
  41035a:	f807 3d01 	strb.w	r3, [r7, #-1]!
  41035e:	d1f1      	bne.n	410344 <_vfiprintf_r+0x55c>
  410360:	07f4      	lsls	r4, r6, #31
  410362:	d5ba      	bpl.n	4102da <_vfiprintf_r+0x4f2>
  410364:	2b30      	cmp	r3, #48	; 0x30
  410366:	d0b8      	beq.n	4102da <_vfiprintf_r+0x4f2>
  410368:	2230      	movs	r2, #48	; 0x30
  41036a:	1e7b      	subs	r3, r7, #1
  41036c:	f807 2c01 	strb.w	r2, [r7, #-1]
  410370:	ebc3 020b 	rsb	r2, r3, fp
  410374:	9203      	str	r2, [sp, #12]
  410376:	461f      	mov	r7, r3
  410378:	e656      	b.n	410028 <_vfiprintf_r+0x240>
  41037a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  41037e:	2400      	movs	r4, #0
  410380:	f818 3b01 	ldrb.w	r3, [r8], #1
  410384:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  410388:	eb02 0444 	add.w	r4, r2, r4, lsl #1
  41038c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  410390:	2a09      	cmp	r2, #9
  410392:	d9f5      	bls.n	410380 <_vfiprintf_r+0x598>
  410394:	e591      	b.n	40feba <_vfiprintf_r+0xd2>
  410396:	f898 3000 	ldrb.w	r3, [r8]
  41039a:	2101      	movs	r1, #1
  41039c:	202b      	movs	r0, #43	; 0x2b
  41039e:	e58a      	b.n	40feb6 <_vfiprintf_r+0xce>
  4103a0:	f898 3000 	ldrb.w	r3, [r8]
  4103a4:	2b2a      	cmp	r3, #42	; 0x2a
  4103a6:	f108 0501 	add.w	r5, r8, #1
  4103aa:	f000 83dd 	beq.w	410b68 <_vfiprintf_r+0xd80>
  4103ae:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  4103b2:	2a09      	cmp	r2, #9
  4103b4:	46a8      	mov	r8, r5
  4103b6:	bf98      	it	ls
  4103b8:	2500      	movls	r5, #0
  4103ba:	f200 83ce 	bhi.w	410b5a <_vfiprintf_r+0xd72>
  4103be:	f818 3b01 	ldrb.w	r3, [r8], #1
  4103c2:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  4103c6:	eb02 0545 	add.w	r5, r2, r5, lsl #1
  4103ca:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  4103ce:	2a09      	cmp	r2, #9
  4103d0:	d9f5      	bls.n	4103be <_vfiprintf_r+0x5d6>
  4103d2:	ea45 72e5 	orr.w	r2, r5, r5, asr #31
  4103d6:	9201      	str	r2, [sp, #4]
  4103d8:	e56f      	b.n	40feba <_vfiprintf_r+0xd2>
  4103da:	9a04      	ldr	r2, [sp, #16]
  4103dc:	6814      	ldr	r4, [r2, #0]
  4103de:	4613      	mov	r3, r2
  4103e0:	2c00      	cmp	r4, #0
  4103e2:	f103 0304 	add.w	r3, r3, #4
  4103e6:	f6ff aded 	blt.w	40ffc4 <_vfiprintf_r+0x1dc>
  4103ea:	9304      	str	r3, [sp, #16]
  4103ec:	f898 3000 	ldrb.w	r3, [r8]
  4103f0:	e561      	b.n	40feb6 <_vfiprintf_r+0xce>
  4103f2:	9406      	str	r4, [sp, #24]
  4103f4:	2900      	cmp	r1, #0
  4103f6:	d081      	beq.n	4102fc <_vfiprintf_r+0x514>
  4103f8:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4103fc:	e77e      	b.n	4102fc <_vfiprintf_r+0x514>
  4103fe:	9a04      	ldr	r2, [sp, #16]
  410400:	9406      	str	r4, [sp, #24]
  410402:	6817      	ldr	r7, [r2, #0]
  410404:	f04f 0300 	mov.w	r3, #0
  410408:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  41040c:	1d14      	adds	r4, r2, #4
  41040e:	9b01      	ldr	r3, [sp, #4]
  410410:	2f00      	cmp	r7, #0
  410412:	f000 8386 	beq.w	410b22 <_vfiprintf_r+0xd3a>
  410416:	2b00      	cmp	r3, #0
  410418:	f2c0 835f 	blt.w	410ada <_vfiprintf_r+0xcf2>
  41041c:	461a      	mov	r2, r3
  41041e:	2100      	movs	r1, #0
  410420:	4638      	mov	r0, r7
  410422:	f002 fc25 	bl	412c70 <memchr>
  410426:	2800      	cmp	r0, #0
  410428:	f000 838f 	beq.w	410b4a <_vfiprintf_r+0xd62>
  41042c:	1bc3      	subs	r3, r0, r7
  41042e:	9303      	str	r3, [sp, #12]
  410430:	2300      	movs	r3, #0
  410432:	9404      	str	r4, [sp, #16]
  410434:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  410438:	9301      	str	r3, [sp, #4]
  41043a:	e5f5      	b.n	410028 <_vfiprintf_r+0x240>
  41043c:	9406      	str	r4, [sp, #24]
  41043e:	2900      	cmp	r1, #0
  410440:	f040 83b9 	bne.w	410bb6 <_vfiprintf_r+0xdce>
  410444:	f016 0920 	ands.w	r9, r6, #32
  410448:	d135      	bne.n	4104b6 <_vfiprintf_r+0x6ce>
  41044a:	f016 0310 	ands.w	r3, r6, #16
  41044e:	d103      	bne.n	410458 <_vfiprintf_r+0x670>
  410450:	f016 0940 	ands.w	r9, r6, #64	; 0x40
  410454:	f040 832a 	bne.w	410aac <_vfiprintf_r+0xcc4>
  410458:	9a04      	ldr	r2, [sp, #16]
  41045a:	4613      	mov	r3, r2
  41045c:	6814      	ldr	r4, [r2, #0]
  41045e:	9a01      	ldr	r2, [sp, #4]
  410460:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  410464:	2a00      	cmp	r2, #0
  410466:	f103 0304 	add.w	r3, r3, #4
  41046a:	f04f 0500 	mov.w	r5, #0
  41046e:	f2c0 8332 	blt.w	410ad6 <_vfiprintf_r+0xcee>
  410472:	ea54 0205 	orrs.w	r2, r4, r5
  410476:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  41047a:	9304      	str	r3, [sp, #16]
  41047c:	f47f af13 	bne.w	4102a6 <_vfiprintf_r+0x4be>
  410480:	9b01      	ldr	r3, [sp, #4]
  410482:	2b00      	cmp	r3, #0
  410484:	f43f adcc 	beq.w	410020 <_vfiprintf_r+0x238>
  410488:	2400      	movs	r4, #0
  41048a:	af2a      	add	r7, sp, #168	; 0xa8
  41048c:	3430      	adds	r4, #48	; 0x30
  41048e:	f807 4d41 	strb.w	r4, [r7, #-65]!
  410492:	ebc7 030b 	rsb	r3, r7, fp
  410496:	9303      	str	r3, [sp, #12]
  410498:	e5c6      	b.n	410028 <_vfiprintf_r+0x240>
  41049a:	f046 0620 	orr.w	r6, r6, #32
  41049e:	f898 3000 	ldrb.w	r3, [r8]
  4104a2:	e508      	b.n	40feb6 <_vfiprintf_r+0xce>
  4104a4:	9406      	str	r4, [sp, #24]
  4104a6:	2900      	cmp	r1, #0
  4104a8:	f040 836e 	bne.w	410b88 <_vfiprintf_r+0xda0>
  4104ac:	f046 0610 	orr.w	r6, r6, #16
  4104b0:	f016 0920 	ands.w	r9, r6, #32
  4104b4:	d0c9      	beq.n	41044a <_vfiprintf_r+0x662>
  4104b6:	9b04      	ldr	r3, [sp, #16]
  4104b8:	3307      	adds	r3, #7
  4104ba:	f023 0307 	bic.w	r3, r3, #7
  4104be:	f04f 0200 	mov.w	r2, #0
  4104c2:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  4104c6:	e9d3 4500 	ldrd	r4, r5, [r3]
  4104ca:	f103 0208 	add.w	r2, r3, #8
  4104ce:	9b01      	ldr	r3, [sp, #4]
  4104d0:	9204      	str	r2, [sp, #16]
  4104d2:	2b00      	cmp	r3, #0
  4104d4:	f2c0 81f9 	blt.w	4108ca <_vfiprintf_r+0xae2>
  4104d8:	ea54 0305 	orrs.w	r3, r4, r5
  4104dc:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4104e0:	f04f 0900 	mov.w	r9, #0
  4104e4:	f47f aedf 	bne.w	4102a6 <_vfiprintf_r+0x4be>
  4104e8:	e7ca      	b.n	410480 <_vfiprintf_r+0x698>
  4104ea:	9406      	str	r4, [sp, #24]
  4104ec:	2900      	cmp	r1, #0
  4104ee:	f040 8351 	bne.w	410b94 <_vfiprintf_r+0xdac>
  4104f2:	06b2      	lsls	r2, r6, #26
  4104f4:	48ae      	ldr	r0, [pc, #696]	; (4107b0 <_vfiprintf_r+0x9c8>)
  4104f6:	d541      	bpl.n	41057c <_vfiprintf_r+0x794>
  4104f8:	9a04      	ldr	r2, [sp, #16]
  4104fa:	3207      	adds	r2, #7
  4104fc:	f022 0207 	bic.w	r2, r2, #7
  410500:	e9d2 4500 	ldrd	r4, r5, [r2]
  410504:	f102 0108 	add.w	r1, r2, #8
  410508:	9104      	str	r1, [sp, #16]
  41050a:	f016 0901 	ands.w	r9, r6, #1
  41050e:	f000 8177 	beq.w	410800 <_vfiprintf_r+0xa18>
  410512:	ea54 0205 	orrs.w	r2, r4, r5
  410516:	f040 8226 	bne.w	410966 <_vfiprintf_r+0xb7e>
  41051a:	f04f 0300 	mov.w	r3, #0
  41051e:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  410522:	9b01      	ldr	r3, [sp, #4]
  410524:	2b00      	cmp	r3, #0
  410526:	f2c0 8196 	blt.w	410856 <_vfiprintf_r+0xa6e>
  41052a:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  41052e:	e572      	b.n	410016 <_vfiprintf_r+0x22e>
  410530:	9a04      	ldr	r2, [sp, #16]
  410532:	9406      	str	r4, [sp, #24]
  410534:	6813      	ldr	r3, [r2, #0]
  410536:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  41053a:	4613      	mov	r3, r2
  41053c:	f04f 0100 	mov.w	r1, #0
  410540:	2501      	movs	r5, #1
  410542:	3304      	adds	r3, #4
  410544:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  410548:	9304      	str	r3, [sp, #16]
  41054a:	9503      	str	r5, [sp, #12]
  41054c:	af10      	add	r7, sp, #64	; 0x40
  41054e:	2300      	movs	r3, #0
  410550:	9301      	str	r3, [sp, #4]
  410552:	e573      	b.n	41003c <_vfiprintf_r+0x254>
  410554:	f898 3000 	ldrb.w	r3, [r8]
  410558:	2800      	cmp	r0, #0
  41055a:	f47f acac 	bne.w	40feb6 <_vfiprintf_r+0xce>
  41055e:	2101      	movs	r1, #1
  410560:	2020      	movs	r0, #32
  410562:	e4a8      	b.n	40feb6 <_vfiprintf_r+0xce>
  410564:	f046 0601 	orr.w	r6, r6, #1
  410568:	f898 3000 	ldrb.w	r3, [r8]
  41056c:	e4a3      	b.n	40feb6 <_vfiprintf_r+0xce>
  41056e:	9406      	str	r4, [sp, #24]
  410570:	2900      	cmp	r1, #0
  410572:	f040 830c 	bne.w	410b8e <_vfiprintf_r+0xda6>
  410576:	06b2      	lsls	r2, r6, #26
  410578:	488e      	ldr	r0, [pc, #568]	; (4107b4 <_vfiprintf_r+0x9cc>)
  41057a:	d4bd      	bmi.n	4104f8 <_vfiprintf_r+0x710>
  41057c:	9904      	ldr	r1, [sp, #16]
  41057e:	06f7      	lsls	r7, r6, #27
  410580:	460a      	mov	r2, r1
  410582:	f100 819d 	bmi.w	4108c0 <_vfiprintf_r+0xad8>
  410586:	0675      	lsls	r5, r6, #25
  410588:	f140 819a 	bpl.w	4108c0 <_vfiprintf_r+0xad8>
  41058c:	3204      	adds	r2, #4
  41058e:	880c      	ldrh	r4, [r1, #0]
  410590:	9204      	str	r2, [sp, #16]
  410592:	2500      	movs	r5, #0
  410594:	e7b9      	b.n	41050a <_vfiprintf_r+0x722>
  410596:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  41059a:	f898 3000 	ldrb.w	r3, [r8]
  41059e:	e48a      	b.n	40feb6 <_vfiprintf_r+0xce>
  4105a0:	f898 3000 	ldrb.w	r3, [r8]
  4105a4:	2b6c      	cmp	r3, #108	; 0x6c
  4105a6:	bf03      	ittte	eq
  4105a8:	f898 3001 	ldrbeq.w	r3, [r8, #1]
  4105ac:	f046 0620 	orreq.w	r6, r6, #32
  4105b0:	f108 0801 	addeq.w	r8, r8, #1
  4105b4:	f046 0610 	orrne.w	r6, r6, #16
  4105b8:	e47d      	b.n	40feb6 <_vfiprintf_r+0xce>
  4105ba:	2900      	cmp	r1, #0
  4105bc:	f040 8309 	bne.w	410bd2 <_vfiprintf_r+0xdea>
  4105c0:	06b4      	lsls	r4, r6, #26
  4105c2:	f140 821c 	bpl.w	4109fe <_vfiprintf_r+0xc16>
  4105c6:	9a04      	ldr	r2, [sp, #16]
  4105c8:	9902      	ldr	r1, [sp, #8]
  4105ca:	6813      	ldr	r3, [r2, #0]
  4105cc:	17cd      	asrs	r5, r1, #31
  4105ce:	4608      	mov	r0, r1
  4105d0:	3204      	adds	r2, #4
  4105d2:	4629      	mov	r1, r5
  4105d4:	9204      	str	r2, [sp, #16]
  4105d6:	e9c3 0100 	strd	r0, r1, [r3]
  4105da:	e436      	b.n	40fe4a <_vfiprintf_r+0x62>
  4105dc:	9406      	str	r4, [sp, #24]
  4105de:	2900      	cmp	r1, #0
  4105e0:	f43f ae43 	beq.w	41026a <_vfiprintf_r+0x482>
  4105e4:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4105e8:	e63f      	b.n	41026a <_vfiprintf_r+0x482>
  4105ea:	9406      	str	r4, [sp, #24]
  4105ec:	2900      	cmp	r1, #0
  4105ee:	f040 82ed 	bne.w	410bcc <_vfiprintf_r+0xde4>
  4105f2:	2b00      	cmp	r3, #0
  4105f4:	f000 808f 	beq.w	410716 <_vfiprintf_r+0x92e>
  4105f8:	2501      	movs	r5, #1
  4105fa:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  4105fe:	f04f 0300 	mov.w	r3, #0
  410602:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  410606:	9503      	str	r5, [sp, #12]
  410608:	af10      	add	r7, sp, #64	; 0x40
  41060a:	e7a0      	b.n	41054e <_vfiprintf_r+0x766>
  41060c:	9304      	str	r3, [sp, #16]
  41060e:	f04f 0900 	mov.w	r9, #0
  410612:	e696      	b.n	410342 <_vfiprintf_r+0x55a>
  410614:	aa0d      	add	r2, sp, #52	; 0x34
  410616:	9900      	ldr	r1, [sp, #0]
  410618:	9309      	str	r3, [sp, #36]	; 0x24
  41061a:	4648      	mov	r0, r9
  41061c:	f7ff fba8 	bl	40fd70 <__sprint_r.part.0>
  410620:	2800      	cmp	r0, #0
  410622:	d17f      	bne.n	410724 <_vfiprintf_r+0x93c>
  410624:	980e      	ldr	r0, [sp, #56]	; 0x38
  410626:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  410628:	9b09      	ldr	r3, [sp, #36]	; 0x24
  41062a:	f100 0e01 	add.w	lr, r0, #1
  41062e:	46dc      	mov	ip, fp
  410630:	e529      	b.n	410086 <_vfiprintf_r+0x29e>
  410632:	980e      	ldr	r0, [sp, #56]	; 0x38
  410634:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  410636:	f100 0e01 	add.w	lr, r0, #1
  41063a:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  41063e:	2b00      	cmp	r3, #0
  410640:	f43f ad50 	beq.w	4100e4 <_vfiprintf_r+0x2fc>
  410644:	3201      	adds	r2, #1
  410646:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
  41064a:	2301      	movs	r3, #1
  41064c:	f1be 0f07 	cmp.w	lr, #7
  410650:	920f      	str	r2, [sp, #60]	; 0x3c
  410652:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  410656:	e88a 000a 	stmia.w	sl, {r1, r3}
  41065a:	f340 80bf 	ble.w	4107dc <_vfiprintf_r+0x9f4>
  41065e:	2a00      	cmp	r2, #0
  410660:	f040 814e 	bne.w	410900 <_vfiprintf_r+0xb18>
  410664:	9907      	ldr	r1, [sp, #28]
  410666:	2900      	cmp	r1, #0
  410668:	f040 80be 	bne.w	4107e8 <_vfiprintf_r+0xa00>
  41066c:	469e      	mov	lr, r3
  41066e:	4610      	mov	r0, r2
  410670:	46da      	mov	sl, fp
  410672:	9b08      	ldr	r3, [sp, #32]
  410674:	2b80      	cmp	r3, #128	; 0x80
  410676:	f43f ad50 	beq.w	41011a <_vfiprintf_r+0x332>
  41067a:	9b01      	ldr	r3, [sp, #4]
  41067c:	9903      	ldr	r1, [sp, #12]
  41067e:	1a5c      	subs	r4, r3, r1
  410680:	2c00      	cmp	r4, #0
  410682:	f77f ad93 	ble.w	4101ac <_vfiprintf_r+0x3c4>
  410686:	2c10      	cmp	r4, #16
  410688:	f8df 912c 	ldr.w	r9, [pc, #300]	; 4107b8 <_vfiprintf_r+0x9d0>
  41068c:	dd25      	ble.n	4106da <_vfiprintf_r+0x8f2>
  41068e:	46d4      	mov	ip, sl
  410690:	2310      	movs	r3, #16
  410692:	46c2      	mov	sl, r8
  410694:	46a8      	mov	r8, r5
  410696:	464d      	mov	r5, r9
  410698:	f8dd 9014 	ldr.w	r9, [sp, #20]
  41069c:	e007      	b.n	4106ae <_vfiprintf_r+0x8c6>
  41069e:	f100 0e02 	add.w	lr, r0, #2
  4106a2:	f10c 0c08 	add.w	ip, ip, #8
  4106a6:	4608      	mov	r0, r1
  4106a8:	3c10      	subs	r4, #16
  4106aa:	2c10      	cmp	r4, #16
  4106ac:	dd11      	ble.n	4106d2 <_vfiprintf_r+0x8ea>
  4106ae:	1c41      	adds	r1, r0, #1
  4106b0:	3210      	adds	r2, #16
  4106b2:	2907      	cmp	r1, #7
  4106b4:	920f      	str	r2, [sp, #60]	; 0x3c
  4106b6:	f8cc 5000 	str.w	r5, [ip]
  4106ba:	f8cc 3004 	str.w	r3, [ip, #4]
  4106be:	910e      	str	r1, [sp, #56]	; 0x38
  4106c0:	dded      	ble.n	41069e <_vfiprintf_r+0x8b6>
  4106c2:	b9d2      	cbnz	r2, 4106fa <_vfiprintf_r+0x912>
  4106c4:	3c10      	subs	r4, #16
  4106c6:	2c10      	cmp	r4, #16
  4106c8:	f04f 0e01 	mov.w	lr, #1
  4106cc:	4610      	mov	r0, r2
  4106ce:	46dc      	mov	ip, fp
  4106d0:	dced      	bgt.n	4106ae <_vfiprintf_r+0x8c6>
  4106d2:	46a9      	mov	r9, r5
  4106d4:	4645      	mov	r5, r8
  4106d6:	46d0      	mov	r8, sl
  4106d8:	46e2      	mov	sl, ip
  4106da:	4422      	add	r2, r4
  4106dc:	f1be 0f07 	cmp.w	lr, #7
  4106e0:	920f      	str	r2, [sp, #60]	; 0x3c
  4106e2:	f8ca 9000 	str.w	r9, [sl]
  4106e6:	f8ca 4004 	str.w	r4, [sl, #4]
  4106ea:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  4106ee:	dc2e      	bgt.n	41074e <_vfiprintf_r+0x966>
  4106f0:	f10a 0a08 	add.w	sl, sl, #8
  4106f4:	f10e 0e01 	add.w	lr, lr, #1
  4106f8:	e558      	b.n	4101ac <_vfiprintf_r+0x3c4>
  4106fa:	aa0d      	add	r2, sp, #52	; 0x34
  4106fc:	9900      	ldr	r1, [sp, #0]
  4106fe:	9301      	str	r3, [sp, #4]
  410700:	4648      	mov	r0, r9
  410702:	f7ff fb35 	bl	40fd70 <__sprint_r.part.0>
  410706:	b968      	cbnz	r0, 410724 <_vfiprintf_r+0x93c>
  410708:	980e      	ldr	r0, [sp, #56]	; 0x38
  41070a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  41070c:	9b01      	ldr	r3, [sp, #4]
  41070e:	f100 0e01 	add.w	lr, r0, #1
  410712:	46dc      	mov	ip, fp
  410714:	e7c8      	b.n	4106a8 <_vfiprintf_r+0x8c0>
  410716:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  410718:	b123      	cbz	r3, 410724 <_vfiprintf_r+0x93c>
  41071a:	9805      	ldr	r0, [sp, #20]
  41071c:	9900      	ldr	r1, [sp, #0]
  41071e:	aa0d      	add	r2, sp, #52	; 0x34
  410720:	f7ff fb26 	bl	40fd70 <__sprint_r.part.0>
  410724:	9b00      	ldr	r3, [sp, #0]
  410726:	899b      	ldrh	r3, [r3, #12]
  410728:	065a      	lsls	r2, r3, #25
  41072a:	f100 818b 	bmi.w	410a44 <_vfiprintf_r+0xc5c>
  41072e:	9802      	ldr	r0, [sp, #8]
  410730:	b02b      	add	sp, #172	; 0xac
  410732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  410736:	aa0d      	add	r2, sp, #52	; 0x34
  410738:	9900      	ldr	r1, [sp, #0]
  41073a:	4648      	mov	r0, r9
  41073c:	f7ff fb18 	bl	40fd70 <__sprint_r.part.0>
  410740:	2800      	cmp	r0, #0
  410742:	d1ef      	bne.n	410724 <_vfiprintf_r+0x93c>
  410744:	990e      	ldr	r1, [sp, #56]	; 0x38
  410746:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  410748:	1c48      	adds	r0, r1, #1
  41074a:	46da      	mov	sl, fp
  41074c:	e555      	b.n	4101fa <_vfiprintf_r+0x412>
  41074e:	2a00      	cmp	r2, #0
  410750:	f040 80fb 	bne.w	41094a <_vfiprintf_r+0xb62>
  410754:	9a03      	ldr	r2, [sp, #12]
  410756:	921b      	str	r2, [sp, #108]	; 0x6c
  410758:	2301      	movs	r3, #1
  41075a:	920f      	str	r2, [sp, #60]	; 0x3c
  41075c:	971a      	str	r7, [sp, #104]	; 0x68
  41075e:	930e      	str	r3, [sp, #56]	; 0x38
  410760:	46da      	mov	sl, fp
  410762:	f10a 0a08 	add.w	sl, sl, #8
  410766:	0771      	lsls	r1, r6, #29
  410768:	d504      	bpl.n	410774 <_vfiprintf_r+0x98c>
  41076a:	9b06      	ldr	r3, [sp, #24]
  41076c:	1b5c      	subs	r4, r3, r5
  41076e:	2c00      	cmp	r4, #0
  410770:	f73f ad34 	bgt.w	4101dc <_vfiprintf_r+0x3f4>
  410774:	9b02      	ldr	r3, [sp, #8]
  410776:	9906      	ldr	r1, [sp, #24]
  410778:	42a9      	cmp	r1, r5
  41077a:	bfac      	ite	ge
  41077c:	185b      	addge	r3, r3, r1
  41077e:	195b      	addlt	r3, r3, r5
  410780:	9302      	str	r3, [sp, #8]
  410782:	2a00      	cmp	r2, #0
  410784:	f040 80b3 	bne.w	4108ee <_vfiprintf_r+0xb06>
  410788:	2300      	movs	r3, #0
  41078a:	930e      	str	r3, [sp, #56]	; 0x38
  41078c:	46da      	mov	sl, fp
  41078e:	f7ff bb5c 	b.w	40fe4a <_vfiprintf_r+0x62>
  410792:	aa0d      	add	r2, sp, #52	; 0x34
  410794:	9900      	ldr	r1, [sp, #0]
  410796:	9307      	str	r3, [sp, #28]
  410798:	4648      	mov	r0, r9
  41079a:	f7ff fae9 	bl	40fd70 <__sprint_r.part.0>
  41079e:	2800      	cmp	r0, #0
  4107a0:	d1c0      	bne.n	410724 <_vfiprintf_r+0x93c>
  4107a2:	980e      	ldr	r0, [sp, #56]	; 0x38
  4107a4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4107a6:	9b07      	ldr	r3, [sp, #28]
  4107a8:	f100 0c01 	add.w	ip, r0, #1
  4107ac:	46de      	mov	lr, fp
  4107ae:	e4cb      	b.n	410148 <_vfiprintf_r+0x360>
  4107b0:	0041772c 	.word	0x0041772c
  4107b4:	00417740 	.word	0x00417740
  4107b8:	00417770 	.word	0x00417770
  4107bc:	2a00      	cmp	r2, #0
  4107be:	f040 8133 	bne.w	410a28 <_vfiprintf_r+0xc40>
  4107c2:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  4107c6:	2b00      	cmp	r3, #0
  4107c8:	f000 80f5 	beq.w	4109b6 <_vfiprintf_r+0xbce>
  4107cc:	2301      	movs	r3, #1
  4107ce:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
  4107d2:	461a      	mov	r2, r3
  4107d4:	931b      	str	r3, [sp, #108]	; 0x6c
  4107d6:	469e      	mov	lr, r3
  4107d8:	911a      	str	r1, [sp, #104]	; 0x68
  4107da:	46da      	mov	sl, fp
  4107dc:	4670      	mov	r0, lr
  4107de:	f10a 0a08 	add.w	sl, sl, #8
  4107e2:	f10e 0e01 	add.w	lr, lr, #1
  4107e6:	e47d      	b.n	4100e4 <_vfiprintf_r+0x2fc>
  4107e8:	a90c      	add	r1, sp, #48	; 0x30
  4107ea:	2202      	movs	r2, #2
  4107ec:	469e      	mov	lr, r3
  4107ee:	911a      	str	r1, [sp, #104]	; 0x68
  4107f0:	921b      	str	r2, [sp, #108]	; 0x6c
  4107f2:	46da      	mov	sl, fp
  4107f4:	4670      	mov	r0, lr
  4107f6:	f10a 0a08 	add.w	sl, sl, #8
  4107fa:	f10e 0e01 	add.w	lr, lr, #1
  4107fe:	e738      	b.n	410672 <_vfiprintf_r+0x88a>
  410800:	9b01      	ldr	r3, [sp, #4]
  410802:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  410806:	2b00      	cmp	r3, #0
  410808:	f2c0 812a 	blt.w	410a60 <_vfiprintf_r+0xc78>
  41080c:	ea54 0305 	orrs.w	r3, r4, r5
  410810:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  410814:	f43f abff 	beq.w	410016 <_vfiprintf_r+0x22e>
  410818:	465f      	mov	r7, fp
  41081a:	0923      	lsrs	r3, r4, #4
  41081c:	f004 010f 	and.w	r1, r4, #15
  410820:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  410824:	092a      	lsrs	r2, r5, #4
  410826:	461c      	mov	r4, r3
  410828:	4615      	mov	r5, r2
  41082a:	5c43      	ldrb	r3, [r0, r1]
  41082c:	f807 3d01 	strb.w	r3, [r7, #-1]!
  410830:	ea54 0305 	orrs.w	r3, r4, r5
  410834:	d1f1      	bne.n	41081a <_vfiprintf_r+0xa32>
  410836:	ebc7 030b 	rsb	r3, r7, fp
  41083a:	9303      	str	r3, [sp, #12]
  41083c:	f7ff bbf4 	b.w	410028 <_vfiprintf_r+0x240>
  410840:	aa0d      	add	r2, sp, #52	; 0x34
  410842:	9900      	ldr	r1, [sp, #0]
  410844:	9805      	ldr	r0, [sp, #20]
  410846:	f7ff fa93 	bl	40fd70 <__sprint_r.part.0>
  41084a:	2800      	cmp	r0, #0
  41084c:	f47f af6a 	bne.w	410724 <_vfiprintf_r+0x93c>
  410850:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  410852:	46da      	mov	sl, fp
  410854:	e787      	b.n	410766 <_vfiprintf_r+0x97e>
  410856:	f04f 0900 	mov.w	r9, #0
  41085a:	2400      	movs	r4, #0
  41085c:	2500      	movs	r5, #0
  41085e:	e7db      	b.n	410818 <_vfiprintf_r+0xa30>
  410860:	f016 0210 	ands.w	r2, r6, #16
  410864:	f000 80b2 	beq.w	4109cc <_vfiprintf_r+0xbe4>
  410868:	9904      	ldr	r1, [sp, #16]
  41086a:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  41086e:	460a      	mov	r2, r1
  410870:	680c      	ldr	r4, [r1, #0]
  410872:	9901      	ldr	r1, [sp, #4]
  410874:	2900      	cmp	r1, #0
  410876:	f102 0204 	add.w	r2, r2, #4
  41087a:	f04f 0500 	mov.w	r5, #0
  41087e:	f2c0 8159 	blt.w	410b34 <_vfiprintf_r+0xd4c>
  410882:	ea54 0105 	orrs.w	r1, r4, r5
  410886:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  41088a:	9204      	str	r2, [sp, #16]
  41088c:	f43f ad51 	beq.w	410332 <_vfiprintf_r+0x54a>
  410890:	4699      	mov	r9, r3
  410892:	e556      	b.n	410342 <_vfiprintf_r+0x55a>
  410894:	06f7      	lsls	r7, r6, #27
  410896:	d40a      	bmi.n	4108ae <_vfiprintf_r+0xac6>
  410898:	0675      	lsls	r5, r6, #25
  41089a:	d508      	bpl.n	4108ae <_vfiprintf_r+0xac6>
  41089c:	9904      	ldr	r1, [sp, #16]
  41089e:	f9b1 4000 	ldrsh.w	r4, [r1]
  4108a2:	3104      	adds	r1, #4
  4108a4:	17e5      	asrs	r5, r4, #31
  4108a6:	4622      	mov	r2, r4
  4108a8:	462b      	mov	r3, r5
  4108aa:	9104      	str	r1, [sp, #16]
  4108ac:	e4ea      	b.n	410284 <_vfiprintf_r+0x49c>
  4108ae:	9a04      	ldr	r2, [sp, #16]
  4108b0:	6814      	ldr	r4, [r2, #0]
  4108b2:	4613      	mov	r3, r2
  4108b4:	3304      	adds	r3, #4
  4108b6:	17e5      	asrs	r5, r4, #31
  4108b8:	9304      	str	r3, [sp, #16]
  4108ba:	4622      	mov	r2, r4
  4108bc:	462b      	mov	r3, r5
  4108be:	e4e1      	b.n	410284 <_vfiprintf_r+0x49c>
  4108c0:	6814      	ldr	r4, [r2, #0]
  4108c2:	3204      	adds	r2, #4
  4108c4:	9204      	str	r2, [sp, #16]
  4108c6:	2500      	movs	r5, #0
  4108c8:	e61f      	b.n	41050a <_vfiprintf_r+0x722>
  4108ca:	f04f 0900 	mov.w	r9, #0
  4108ce:	ea54 0305 	orrs.w	r3, r4, r5
  4108d2:	f47f ace8 	bne.w	4102a6 <_vfiprintf_r+0x4be>
  4108d6:	e5d8      	b.n	41048a <_vfiprintf_r+0x6a2>
  4108d8:	aa0d      	add	r2, sp, #52	; 0x34
  4108da:	9900      	ldr	r1, [sp, #0]
  4108dc:	9805      	ldr	r0, [sp, #20]
  4108de:	f7ff fa47 	bl	40fd70 <__sprint_r.part.0>
  4108e2:	2800      	cmp	r0, #0
  4108e4:	f47f af1e 	bne.w	410724 <_vfiprintf_r+0x93c>
  4108e8:	46da      	mov	sl, fp
  4108ea:	f7ff bb48 	b.w	40ff7e <_vfiprintf_r+0x196>
  4108ee:	aa0d      	add	r2, sp, #52	; 0x34
  4108f0:	9900      	ldr	r1, [sp, #0]
  4108f2:	9805      	ldr	r0, [sp, #20]
  4108f4:	f7ff fa3c 	bl	40fd70 <__sprint_r.part.0>
  4108f8:	2800      	cmp	r0, #0
  4108fa:	f43f af45 	beq.w	410788 <_vfiprintf_r+0x9a0>
  4108fe:	e711      	b.n	410724 <_vfiprintf_r+0x93c>
  410900:	aa0d      	add	r2, sp, #52	; 0x34
  410902:	9900      	ldr	r1, [sp, #0]
  410904:	9805      	ldr	r0, [sp, #20]
  410906:	f7ff fa33 	bl	40fd70 <__sprint_r.part.0>
  41090a:	2800      	cmp	r0, #0
  41090c:	f47f af0a 	bne.w	410724 <_vfiprintf_r+0x93c>
  410910:	980e      	ldr	r0, [sp, #56]	; 0x38
  410912:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  410914:	f100 0e01 	add.w	lr, r0, #1
  410918:	46da      	mov	sl, fp
  41091a:	f7ff bbe3 	b.w	4100e4 <_vfiprintf_r+0x2fc>
  41091e:	aa0d      	add	r2, sp, #52	; 0x34
  410920:	9900      	ldr	r1, [sp, #0]
  410922:	9805      	ldr	r0, [sp, #20]
  410924:	f7ff fa24 	bl	40fd70 <__sprint_r.part.0>
  410928:	2800      	cmp	r0, #0
  41092a:	f47f aefb 	bne.w	410724 <_vfiprintf_r+0x93c>
  41092e:	980e      	ldr	r0, [sp, #56]	; 0x38
  410930:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  410932:	f100 0e01 	add.w	lr, r0, #1
  410936:	46da      	mov	sl, fp
  410938:	e69b      	b.n	410672 <_vfiprintf_r+0x88a>
  41093a:	2a00      	cmp	r2, #0
  41093c:	f040 80d8 	bne.w	410af0 <_vfiprintf_r+0xd08>
  410940:	f04f 0e01 	mov.w	lr, #1
  410944:	4610      	mov	r0, r2
  410946:	46da      	mov	sl, fp
  410948:	e697      	b.n	41067a <_vfiprintf_r+0x892>
  41094a:	aa0d      	add	r2, sp, #52	; 0x34
  41094c:	9900      	ldr	r1, [sp, #0]
  41094e:	9805      	ldr	r0, [sp, #20]
  410950:	f7ff fa0e 	bl	40fd70 <__sprint_r.part.0>
  410954:	2800      	cmp	r0, #0
  410956:	f47f aee5 	bne.w	410724 <_vfiprintf_r+0x93c>
  41095a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  41095c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  41095e:	f103 0e01 	add.w	lr, r3, #1
  410962:	46da      	mov	sl, fp
  410964:	e422      	b.n	4101ac <_vfiprintf_r+0x3c4>
  410966:	2230      	movs	r2, #48	; 0x30
  410968:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
  41096c:	9a01      	ldr	r2, [sp, #4]
  41096e:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  410972:	2a00      	cmp	r2, #0
  410974:	f04f 0300 	mov.w	r3, #0
  410978:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  41097c:	f046 0302 	orr.w	r3, r6, #2
  410980:	f2c0 80cb 	blt.w	410b1a <_vfiprintf_r+0xd32>
  410984:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  410988:	f046 0602 	orr.w	r6, r6, #2
  41098c:	f04f 0900 	mov.w	r9, #0
  410990:	e742      	b.n	410818 <_vfiprintf_r+0xa30>
  410992:	f04f 0900 	mov.w	r9, #0
  410996:	4890      	ldr	r0, [pc, #576]	; (410bd8 <_vfiprintf_r+0xdf0>)
  410998:	e73e      	b.n	410818 <_vfiprintf_r+0xa30>
  41099a:	9b01      	ldr	r3, [sp, #4]
  41099c:	4264      	negs	r4, r4
  41099e:	f04f 092d 	mov.w	r9, #45	; 0x2d
  4109a2:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  4109a6:	2b00      	cmp	r3, #0
  4109a8:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  4109ac:	f6ff ac7b 	blt.w	4102a6 <_vfiprintf_r+0x4be>
  4109b0:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4109b4:	e477      	b.n	4102a6 <_vfiprintf_r+0x4be>
  4109b6:	9b07      	ldr	r3, [sp, #28]
  4109b8:	2b00      	cmp	r3, #0
  4109ba:	d072      	beq.n	410aa2 <_vfiprintf_r+0xcba>
  4109bc:	ab0c      	add	r3, sp, #48	; 0x30
  4109be:	2202      	movs	r2, #2
  4109c0:	931a      	str	r3, [sp, #104]	; 0x68
  4109c2:	921b      	str	r2, [sp, #108]	; 0x6c
  4109c4:	f04f 0e01 	mov.w	lr, #1
  4109c8:	46da      	mov	sl, fp
  4109ca:	e713      	b.n	4107f4 <_vfiprintf_r+0xa0c>
  4109cc:	f016 0940 	ands.w	r9, r6, #64	; 0x40
  4109d0:	d048      	beq.n	410a64 <_vfiprintf_r+0xc7c>
  4109d2:	9904      	ldr	r1, [sp, #16]
  4109d4:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  4109d8:	460b      	mov	r3, r1
  4109da:	880c      	ldrh	r4, [r1, #0]
  4109dc:	9901      	ldr	r1, [sp, #4]
  4109de:	2900      	cmp	r1, #0
  4109e0:	f103 0304 	add.w	r3, r3, #4
  4109e4:	f04f 0500 	mov.w	r5, #0
  4109e8:	f6ff ae10 	blt.w	41060c <_vfiprintf_r+0x824>
  4109ec:	ea54 0105 	orrs.w	r1, r4, r5
  4109f0:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4109f4:	9304      	str	r3, [sp, #16]
  4109f6:	f43f ac9c 	beq.w	410332 <_vfiprintf_r+0x54a>
  4109fa:	4691      	mov	r9, r2
  4109fc:	e4a1      	b.n	410342 <_vfiprintf_r+0x55a>
  4109fe:	06f0      	lsls	r0, r6, #27
  410a00:	d40a      	bmi.n	410a18 <_vfiprintf_r+0xc30>
  410a02:	0671      	lsls	r1, r6, #25
  410a04:	d508      	bpl.n	410a18 <_vfiprintf_r+0xc30>
  410a06:	9a04      	ldr	r2, [sp, #16]
  410a08:	6813      	ldr	r3, [r2, #0]
  410a0a:	3204      	adds	r2, #4
  410a0c:	9204      	str	r2, [sp, #16]
  410a0e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
  410a12:	801a      	strh	r2, [r3, #0]
  410a14:	f7ff ba19 	b.w	40fe4a <_vfiprintf_r+0x62>
  410a18:	9a04      	ldr	r2, [sp, #16]
  410a1a:	6813      	ldr	r3, [r2, #0]
  410a1c:	3204      	adds	r2, #4
  410a1e:	9204      	str	r2, [sp, #16]
  410a20:	9a02      	ldr	r2, [sp, #8]
  410a22:	601a      	str	r2, [r3, #0]
  410a24:	f7ff ba11 	b.w	40fe4a <_vfiprintf_r+0x62>
  410a28:	aa0d      	add	r2, sp, #52	; 0x34
  410a2a:	9900      	ldr	r1, [sp, #0]
  410a2c:	9805      	ldr	r0, [sp, #20]
  410a2e:	f7ff f99f 	bl	40fd70 <__sprint_r.part.0>
  410a32:	2800      	cmp	r0, #0
  410a34:	f47f ae76 	bne.w	410724 <_vfiprintf_r+0x93c>
  410a38:	980e      	ldr	r0, [sp, #56]	; 0x38
  410a3a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  410a3c:	f100 0e01 	add.w	lr, r0, #1
  410a40:	46da      	mov	sl, fp
  410a42:	e5fa      	b.n	41063a <_vfiprintf_r+0x852>
  410a44:	f04f 30ff 	mov.w	r0, #4294967295
  410a48:	f7ff bab6 	b.w	40ffb8 <_vfiprintf_r+0x1d0>
  410a4c:	4862      	ldr	r0, [pc, #392]	; (410bd8 <_vfiprintf_r+0xdf0>)
  410a4e:	4616      	mov	r6, r2
  410a50:	ea54 0205 	orrs.w	r2, r4, r5
  410a54:	9304      	str	r3, [sp, #16]
  410a56:	f04f 0900 	mov.w	r9, #0
  410a5a:	f47f aedd 	bne.w	410818 <_vfiprintf_r+0xa30>
  410a5e:	e6fc      	b.n	41085a <_vfiprintf_r+0xa72>
  410a60:	9b04      	ldr	r3, [sp, #16]
  410a62:	e7f5      	b.n	410a50 <_vfiprintf_r+0xc68>
  410a64:	9a04      	ldr	r2, [sp, #16]
  410a66:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  410a6a:	4613      	mov	r3, r2
  410a6c:	6814      	ldr	r4, [r2, #0]
  410a6e:	9a01      	ldr	r2, [sp, #4]
  410a70:	2a00      	cmp	r2, #0
  410a72:	f103 0304 	add.w	r3, r3, #4
  410a76:	f04f 0500 	mov.w	r5, #0
  410a7a:	f6ff adc7 	blt.w	41060c <_vfiprintf_r+0x824>
  410a7e:	ea54 0205 	orrs.w	r2, r4, r5
  410a82:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  410a86:	9304      	str	r3, [sp, #16]
  410a88:	f47f ac5b 	bne.w	410342 <_vfiprintf_r+0x55a>
  410a8c:	e451      	b.n	410332 <_vfiprintf_r+0x54a>
  410a8e:	aa0d      	add	r2, sp, #52	; 0x34
  410a90:	9900      	ldr	r1, [sp, #0]
  410a92:	9805      	ldr	r0, [sp, #20]
  410a94:	f7ff f96c 	bl	40fd70 <__sprint_r.part.0>
  410a98:	2800      	cmp	r0, #0
  410a9a:	f47f ae43 	bne.w	410724 <_vfiprintf_r+0x93c>
  410a9e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  410aa0:	e668      	b.n	410774 <_vfiprintf_r+0x98c>
  410aa2:	4610      	mov	r0, r2
  410aa4:	f04f 0e01 	mov.w	lr, #1
  410aa8:	46da      	mov	sl, fp
  410aaa:	e5e6      	b.n	41067a <_vfiprintf_r+0x892>
  410aac:	9904      	ldr	r1, [sp, #16]
  410aae:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  410ab2:	460a      	mov	r2, r1
  410ab4:	880c      	ldrh	r4, [r1, #0]
  410ab6:	9901      	ldr	r1, [sp, #4]
  410ab8:	2900      	cmp	r1, #0
  410aba:	f102 0204 	add.w	r2, r2, #4
  410abe:	f04f 0500 	mov.w	r5, #0
  410ac2:	db4e      	blt.n	410b62 <_vfiprintf_r+0xd7a>
  410ac4:	ea54 0105 	orrs.w	r1, r4, r5
  410ac8:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  410acc:	9204      	str	r2, [sp, #16]
  410ace:	4699      	mov	r9, r3
  410ad0:	f47f abe9 	bne.w	4102a6 <_vfiprintf_r+0x4be>
  410ad4:	e4d4      	b.n	410480 <_vfiprintf_r+0x698>
  410ad6:	9304      	str	r3, [sp, #16]
  410ad8:	e6f9      	b.n	4108ce <_vfiprintf_r+0xae6>
  410ada:	4638      	mov	r0, r7
  410adc:	9404      	str	r4, [sp, #16]
  410ade:	f7fd facf 	bl	40e080 <strlen>
  410ae2:	2300      	movs	r3, #0
  410ae4:	9003      	str	r0, [sp, #12]
  410ae6:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  410aea:	9301      	str	r3, [sp, #4]
  410aec:	f7ff ba9c 	b.w	410028 <_vfiprintf_r+0x240>
  410af0:	aa0d      	add	r2, sp, #52	; 0x34
  410af2:	9900      	ldr	r1, [sp, #0]
  410af4:	9805      	ldr	r0, [sp, #20]
  410af6:	f7ff f93b 	bl	40fd70 <__sprint_r.part.0>
  410afa:	2800      	cmp	r0, #0
  410afc:	f47f ae12 	bne.w	410724 <_vfiprintf_r+0x93c>
  410b00:	980e      	ldr	r0, [sp, #56]	; 0x38
  410b02:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  410b04:	f100 0e01 	add.w	lr, r0, #1
  410b08:	46da      	mov	sl, fp
  410b0a:	e5b6      	b.n	41067a <_vfiprintf_r+0x892>
  410b0c:	980e      	ldr	r0, [sp, #56]	; 0x38
  410b0e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  410b10:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 410be0 <_vfiprintf_r+0xdf8>
  410b14:	3001      	adds	r0, #1
  410b16:	f7ff bad2 	b.w	4100be <_vfiprintf_r+0x2d6>
  410b1a:	461e      	mov	r6, r3
  410b1c:	f04f 0900 	mov.w	r9, #0
  410b20:	e67a      	b.n	410818 <_vfiprintf_r+0xa30>
  410b22:	2b06      	cmp	r3, #6
  410b24:	bf28      	it	cs
  410b26:	2306      	movcs	r3, #6
  410b28:	9303      	str	r3, [sp, #12]
  410b2a:	9404      	str	r4, [sp, #16]
  410b2c:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
  410b30:	4f2a      	ldr	r7, [pc, #168]	; (410bdc <_vfiprintf_r+0xdf4>)
  410b32:	e50c      	b.n	41054e <_vfiprintf_r+0x766>
  410b34:	9204      	str	r2, [sp, #16]
  410b36:	e56a      	b.n	41060e <_vfiprintf_r+0x826>
  410b38:	980e      	ldr	r0, [sp, #56]	; 0x38
  410b3a:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 410be0 <_vfiprintf_r+0xdf8>
  410b3e:	3001      	adds	r0, #1
  410b40:	f7ff bb73 	b.w	41022a <_vfiprintf_r+0x442>
  410b44:	46f4      	mov	ip, lr
  410b46:	f7ff bb1a 	b.w	41017e <_vfiprintf_r+0x396>
  410b4a:	9b01      	ldr	r3, [sp, #4]
  410b4c:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  410b50:	9303      	str	r3, [sp, #12]
  410b52:	9404      	str	r4, [sp, #16]
  410b54:	9001      	str	r0, [sp, #4]
  410b56:	f7ff ba67 	b.w	410028 <_vfiprintf_r+0x240>
  410b5a:	2200      	movs	r2, #0
  410b5c:	9201      	str	r2, [sp, #4]
  410b5e:	f7ff b9ac 	b.w	40feba <_vfiprintf_r+0xd2>
  410b62:	9204      	str	r2, [sp, #16]
  410b64:	4699      	mov	r9, r3
  410b66:	e6b2      	b.n	4108ce <_vfiprintf_r+0xae6>
  410b68:	9a04      	ldr	r2, [sp, #16]
  410b6a:	6813      	ldr	r3, [r2, #0]
  410b6c:	9301      	str	r3, [sp, #4]
  410b6e:	3204      	adds	r2, #4
  410b70:	2b00      	cmp	r3, #0
  410b72:	9204      	str	r2, [sp, #16]
  410b74:	f898 3001 	ldrb.w	r3, [r8, #1]
  410b78:	46a8      	mov	r8, r5
  410b7a:	f6bf a99c 	bge.w	40feb6 <_vfiprintf_r+0xce>
  410b7e:	f04f 32ff 	mov.w	r2, #4294967295
  410b82:	9201      	str	r2, [sp, #4]
  410b84:	f7ff b997 	b.w	40feb6 <_vfiprintf_r+0xce>
  410b88:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  410b8c:	e48e      	b.n	4104ac <_vfiprintf_r+0x6c4>
  410b8e:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  410b92:	e4f0      	b.n	410576 <_vfiprintf_r+0x78e>
  410b94:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  410b98:	e4ab      	b.n	4104f2 <_vfiprintf_r+0x70a>
  410b9a:	4699      	mov	r9, r3
  410b9c:	07f3      	lsls	r3, r6, #31
  410b9e:	d505      	bpl.n	410bac <_vfiprintf_r+0xdc4>
  410ba0:	af2a      	add	r7, sp, #168	; 0xa8
  410ba2:	2330      	movs	r3, #48	; 0x30
  410ba4:	f807 3d41 	strb.w	r3, [r7, #-65]!
  410ba8:	f7ff bb97 	b.w	4102da <_vfiprintf_r+0x4f2>
  410bac:	9b01      	ldr	r3, [sp, #4]
  410bae:	9303      	str	r3, [sp, #12]
  410bb0:	465f      	mov	r7, fp
  410bb2:	f7ff ba39 	b.w	410028 <_vfiprintf_r+0x240>
  410bb6:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  410bba:	e443      	b.n	410444 <_vfiprintf_r+0x65c>
  410bbc:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  410bc0:	f7ff bb9a 	b.w	4102f8 <_vfiprintf_r+0x510>
  410bc4:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  410bc8:	f7ff bb4d 	b.w	410266 <_vfiprintf_r+0x47e>
  410bcc:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  410bd0:	e50f      	b.n	4105f2 <_vfiprintf_r+0x80a>
  410bd2:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  410bd6:	e4f3      	b.n	4105c0 <_vfiprintf_r+0x7d8>
  410bd8:	00417740 	.word	0x00417740
  410bdc:	00417754 	.word	0x00417754
  410be0:	00417780 	.word	0x00417780

00410be4 <__sbprintf>:
  410be4:	b5f0      	push	{r4, r5, r6, r7, lr}
  410be6:	460c      	mov	r4, r1
  410be8:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
  410bec:	8989      	ldrh	r1, [r1, #12]
  410bee:	6e66      	ldr	r6, [r4, #100]	; 0x64
  410bf0:	89e5      	ldrh	r5, [r4, #14]
  410bf2:	9619      	str	r6, [sp, #100]	; 0x64
  410bf4:	f021 0102 	bic.w	r1, r1, #2
  410bf8:	6a66      	ldr	r6, [r4, #36]	; 0x24
  410bfa:	f8ad 500e 	strh.w	r5, [sp, #14]
  410bfe:	2500      	movs	r5, #0
  410c00:	69e7      	ldr	r7, [r4, #28]
  410c02:	f8ad 100c 	strh.w	r1, [sp, #12]
  410c06:	9609      	str	r6, [sp, #36]	; 0x24
  410c08:	9506      	str	r5, [sp, #24]
  410c0a:	ae1a      	add	r6, sp, #104	; 0x68
  410c0c:	f44f 6580 	mov.w	r5, #1024	; 0x400
  410c10:	4669      	mov	r1, sp
  410c12:	9600      	str	r6, [sp, #0]
  410c14:	9604      	str	r6, [sp, #16]
  410c16:	9502      	str	r5, [sp, #8]
  410c18:	9505      	str	r5, [sp, #20]
  410c1a:	9707      	str	r7, [sp, #28]
  410c1c:	4606      	mov	r6, r0
  410c1e:	f7ff f8e3 	bl	40fde8 <_vfiprintf_r>
  410c22:	1e05      	subs	r5, r0, #0
  410c24:	db07      	blt.n	410c36 <__sbprintf+0x52>
  410c26:	4630      	mov	r0, r6
  410c28:	4669      	mov	r1, sp
  410c2a:	f001 f8e9 	bl	411e00 <_fflush_r>
  410c2e:	2800      	cmp	r0, #0
  410c30:	bf18      	it	ne
  410c32:	f04f 35ff 	movne.w	r5, #4294967295
  410c36:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  410c3a:	065b      	lsls	r3, r3, #25
  410c3c:	d503      	bpl.n	410c46 <__sbprintf+0x62>
  410c3e:	89a3      	ldrh	r3, [r4, #12]
  410c40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  410c44:	81a3      	strh	r3, [r4, #12]
  410c46:	4628      	mov	r0, r5
  410c48:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
  410c4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  410c4e:	bf00      	nop

00410c50 <__swsetup_r>:
  410c50:	b538      	push	{r3, r4, r5, lr}
  410c52:	4b30      	ldr	r3, [pc, #192]	; (410d14 <__swsetup_r+0xc4>)
  410c54:	681b      	ldr	r3, [r3, #0]
  410c56:	4605      	mov	r5, r0
  410c58:	460c      	mov	r4, r1
  410c5a:	b113      	cbz	r3, 410c62 <__swsetup_r+0x12>
  410c5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  410c5e:	2a00      	cmp	r2, #0
  410c60:	d038      	beq.n	410cd4 <__swsetup_r+0x84>
  410c62:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  410c66:	b293      	uxth	r3, r2
  410c68:	0718      	lsls	r0, r3, #28
  410c6a:	d50c      	bpl.n	410c86 <__swsetup_r+0x36>
  410c6c:	6920      	ldr	r0, [r4, #16]
  410c6e:	b1a8      	cbz	r0, 410c9c <__swsetup_r+0x4c>
  410c70:	f013 0201 	ands.w	r2, r3, #1
  410c74:	d01e      	beq.n	410cb4 <__swsetup_r+0x64>
  410c76:	6963      	ldr	r3, [r4, #20]
  410c78:	2200      	movs	r2, #0
  410c7a:	425b      	negs	r3, r3
  410c7c:	61a3      	str	r3, [r4, #24]
  410c7e:	60a2      	str	r2, [r4, #8]
  410c80:	b1f0      	cbz	r0, 410cc0 <__swsetup_r+0x70>
  410c82:	2000      	movs	r0, #0
  410c84:	bd38      	pop	{r3, r4, r5, pc}
  410c86:	06d9      	lsls	r1, r3, #27
  410c88:	d53c      	bpl.n	410d04 <__swsetup_r+0xb4>
  410c8a:	0758      	lsls	r0, r3, #29
  410c8c:	d426      	bmi.n	410cdc <__swsetup_r+0x8c>
  410c8e:	6920      	ldr	r0, [r4, #16]
  410c90:	f042 0308 	orr.w	r3, r2, #8
  410c94:	81a3      	strh	r3, [r4, #12]
  410c96:	b29b      	uxth	r3, r3
  410c98:	2800      	cmp	r0, #0
  410c9a:	d1e9      	bne.n	410c70 <__swsetup_r+0x20>
  410c9c:	f403 7220 	and.w	r2, r3, #640	; 0x280
  410ca0:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  410ca4:	d0e4      	beq.n	410c70 <__swsetup_r+0x20>
  410ca6:	4628      	mov	r0, r5
  410ca8:	4621      	mov	r1, r4
  410caa:	f001 fcd9 	bl	412660 <__smakebuf_r>
  410cae:	89a3      	ldrh	r3, [r4, #12]
  410cb0:	6920      	ldr	r0, [r4, #16]
  410cb2:	e7dd      	b.n	410c70 <__swsetup_r+0x20>
  410cb4:	0799      	lsls	r1, r3, #30
  410cb6:	bf58      	it	pl
  410cb8:	6962      	ldrpl	r2, [r4, #20]
  410cba:	60a2      	str	r2, [r4, #8]
  410cbc:	2800      	cmp	r0, #0
  410cbe:	d1e0      	bne.n	410c82 <__swsetup_r+0x32>
  410cc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  410cc4:	061a      	lsls	r2, r3, #24
  410cc6:	d5dd      	bpl.n	410c84 <__swsetup_r+0x34>
  410cc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  410ccc:	81a3      	strh	r3, [r4, #12]
  410cce:	f04f 30ff 	mov.w	r0, #4294967295
  410cd2:	bd38      	pop	{r3, r4, r5, pc}
  410cd4:	4618      	mov	r0, r3
  410cd6:	f001 f927 	bl	411f28 <__sinit>
  410cda:	e7c2      	b.n	410c62 <__swsetup_r+0x12>
  410cdc:	6b21      	ldr	r1, [r4, #48]	; 0x30
  410cde:	b151      	cbz	r1, 410cf6 <__swsetup_r+0xa6>
  410ce0:	f104 0340 	add.w	r3, r4, #64	; 0x40
  410ce4:	4299      	cmp	r1, r3
  410ce6:	d004      	beq.n	410cf2 <__swsetup_r+0xa2>
  410ce8:	4628      	mov	r0, r5
  410cea:	f001 f9e7 	bl	4120bc <_free_r>
  410cee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  410cf2:	2300      	movs	r3, #0
  410cf4:	6323      	str	r3, [r4, #48]	; 0x30
  410cf6:	2300      	movs	r3, #0
  410cf8:	6920      	ldr	r0, [r4, #16]
  410cfa:	6063      	str	r3, [r4, #4]
  410cfc:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  410d00:	6020      	str	r0, [r4, #0]
  410d02:	e7c5      	b.n	410c90 <__swsetup_r+0x40>
  410d04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  410d08:	2309      	movs	r3, #9
  410d0a:	602b      	str	r3, [r5, #0]
  410d0c:	f04f 30ff 	mov.w	r0, #4294967295
  410d10:	81a2      	strh	r2, [r4, #12]
  410d12:	bd38      	pop	{r3, r4, r5, pc}
  410d14:	20400568 	.word	0x20400568

00410d18 <register_fini>:
  410d18:	4b02      	ldr	r3, [pc, #8]	; (410d24 <register_fini+0xc>)
  410d1a:	b113      	cbz	r3, 410d22 <register_fini+0xa>
  410d1c:	4802      	ldr	r0, [pc, #8]	; (410d28 <register_fini+0x10>)
  410d1e:	f000 b805 	b.w	410d2c <atexit>
  410d22:	4770      	bx	lr
  410d24:	00000000 	.word	0x00000000
  410d28:	00411f3d 	.word	0x00411f3d

00410d2c <atexit>:
  410d2c:	2300      	movs	r3, #0
  410d2e:	4601      	mov	r1, r0
  410d30:	461a      	mov	r2, r3
  410d32:	4618      	mov	r0, r3
  410d34:	f002 bf34 	b.w	413ba0 <__register_exitproc>

00410d38 <quorem>:
  410d38:	6902      	ldr	r2, [r0, #16]
  410d3a:	690b      	ldr	r3, [r1, #16]
  410d3c:	4293      	cmp	r3, r2
  410d3e:	f300 808d 	bgt.w	410e5c <quorem+0x124>
  410d42:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  410d46:	f103 38ff 	add.w	r8, r3, #4294967295
  410d4a:	f101 0714 	add.w	r7, r1, #20
  410d4e:	f100 0b14 	add.w	fp, r0, #20
  410d52:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  410d56:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  410d5a:	ea4f 0488 	mov.w	r4, r8, lsl #2
  410d5e:	b083      	sub	sp, #12
  410d60:	3201      	adds	r2, #1
  410d62:	fbb3 f9f2 	udiv	r9, r3, r2
  410d66:	eb0b 0304 	add.w	r3, fp, r4
  410d6a:	9400      	str	r4, [sp, #0]
  410d6c:	eb07 0a04 	add.w	sl, r7, r4
  410d70:	9301      	str	r3, [sp, #4]
  410d72:	f1b9 0f00 	cmp.w	r9, #0
  410d76:	d039      	beq.n	410dec <quorem+0xb4>
  410d78:	2500      	movs	r5, #0
  410d7a:	46bc      	mov	ip, r7
  410d7c:	46de      	mov	lr, fp
  410d7e:	462b      	mov	r3, r5
  410d80:	f85c 6b04 	ldr.w	r6, [ip], #4
  410d84:	f8de 2000 	ldr.w	r2, [lr]
  410d88:	b2b4      	uxth	r4, r6
  410d8a:	fb09 5504 	mla	r5, r9, r4, r5
  410d8e:	0c36      	lsrs	r6, r6, #16
  410d90:	0c2c      	lsrs	r4, r5, #16
  410d92:	fb09 4406 	mla	r4, r9, r6, r4
  410d96:	b2ad      	uxth	r5, r5
  410d98:	1b5b      	subs	r3, r3, r5
  410d9a:	b2a6      	uxth	r6, r4
  410d9c:	fa13 f382 	uxtah	r3, r3, r2
  410da0:	ebc6 4612 	rsb	r6, r6, r2, lsr #16
  410da4:	eb06 4623 	add.w	r6, r6, r3, asr #16
  410da8:	b29b      	uxth	r3, r3
  410daa:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  410dae:	45e2      	cmp	sl, ip
  410db0:	f84e 3b04 	str.w	r3, [lr], #4
  410db4:	ea4f 4514 	mov.w	r5, r4, lsr #16
  410db8:	ea4f 4326 	mov.w	r3, r6, asr #16
  410dbc:	d2e0      	bcs.n	410d80 <quorem+0x48>
  410dbe:	9b00      	ldr	r3, [sp, #0]
  410dc0:	f85b 3003 	ldr.w	r3, [fp, r3]
  410dc4:	b993      	cbnz	r3, 410dec <quorem+0xb4>
  410dc6:	9c01      	ldr	r4, [sp, #4]
  410dc8:	1f23      	subs	r3, r4, #4
  410dca:	459b      	cmp	fp, r3
  410dcc:	d20c      	bcs.n	410de8 <quorem+0xb0>
  410dce:	f854 3c04 	ldr.w	r3, [r4, #-4]
  410dd2:	b94b      	cbnz	r3, 410de8 <quorem+0xb0>
  410dd4:	f1a4 0308 	sub.w	r3, r4, #8
  410dd8:	e002      	b.n	410de0 <quorem+0xa8>
  410dda:	681a      	ldr	r2, [r3, #0]
  410ddc:	3b04      	subs	r3, #4
  410dde:	b91a      	cbnz	r2, 410de8 <quorem+0xb0>
  410de0:	459b      	cmp	fp, r3
  410de2:	f108 38ff 	add.w	r8, r8, #4294967295
  410de6:	d3f8      	bcc.n	410dda <quorem+0xa2>
  410de8:	f8c0 8010 	str.w	r8, [r0, #16]
  410dec:	4604      	mov	r4, r0
  410dee:	f002 f9ff 	bl	4131f0 <__mcmp>
  410df2:	2800      	cmp	r0, #0
  410df4:	db2e      	blt.n	410e54 <quorem+0x11c>
  410df6:	f109 0901 	add.w	r9, r9, #1
  410dfa:	465d      	mov	r5, fp
  410dfc:	2300      	movs	r3, #0
  410dfe:	f857 1b04 	ldr.w	r1, [r7], #4
  410e02:	6828      	ldr	r0, [r5, #0]
  410e04:	b28a      	uxth	r2, r1
  410e06:	1a9a      	subs	r2, r3, r2
  410e08:	0c09      	lsrs	r1, r1, #16
  410e0a:	fa12 f280 	uxtah	r2, r2, r0
  410e0e:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
  410e12:	eb03 4322 	add.w	r3, r3, r2, asr #16
  410e16:	b291      	uxth	r1, r2
  410e18:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
  410e1c:	45ba      	cmp	sl, r7
  410e1e:	f845 1b04 	str.w	r1, [r5], #4
  410e22:	ea4f 4323 	mov.w	r3, r3, asr #16
  410e26:	d2ea      	bcs.n	410dfe <quorem+0xc6>
  410e28:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  410e2c:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  410e30:	b982      	cbnz	r2, 410e54 <quorem+0x11c>
  410e32:	1f1a      	subs	r2, r3, #4
  410e34:	4593      	cmp	fp, r2
  410e36:	d20b      	bcs.n	410e50 <quorem+0x118>
  410e38:	f853 2c04 	ldr.w	r2, [r3, #-4]
  410e3c:	b942      	cbnz	r2, 410e50 <quorem+0x118>
  410e3e:	3b08      	subs	r3, #8
  410e40:	e002      	b.n	410e48 <quorem+0x110>
  410e42:	681a      	ldr	r2, [r3, #0]
  410e44:	3b04      	subs	r3, #4
  410e46:	b91a      	cbnz	r2, 410e50 <quorem+0x118>
  410e48:	459b      	cmp	fp, r3
  410e4a:	f108 38ff 	add.w	r8, r8, #4294967295
  410e4e:	d3f8      	bcc.n	410e42 <quorem+0x10a>
  410e50:	f8c4 8010 	str.w	r8, [r4, #16]
  410e54:	4648      	mov	r0, r9
  410e56:	b003      	add	sp, #12
  410e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  410e5c:	2000      	movs	r0, #0
  410e5e:	4770      	bx	lr

00410e60 <_dtoa_r>:
  410e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  410e64:	6c01      	ldr	r1, [r0, #64]	; 0x40
  410e66:	b097      	sub	sp, #92	; 0x5c
  410e68:	4681      	mov	r9, r0
  410e6a:	9c23      	ldr	r4, [sp, #140]	; 0x8c
  410e6c:	4692      	mov	sl, r2
  410e6e:	469b      	mov	fp, r3
  410e70:	b149      	cbz	r1, 410e86 <_dtoa_r+0x26>
  410e72:	6c42      	ldr	r2, [r0, #68]	; 0x44
  410e74:	604a      	str	r2, [r1, #4]
  410e76:	2301      	movs	r3, #1
  410e78:	4093      	lsls	r3, r2
  410e7a:	608b      	str	r3, [r1, #8]
  410e7c:	f001 ffd6 	bl	412e2c <_Bfree>
  410e80:	2300      	movs	r3, #0
  410e82:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
  410e86:	f1bb 0f00 	cmp.w	fp, #0
  410e8a:	46d8      	mov	r8, fp
  410e8c:	db33      	blt.n	410ef6 <_dtoa_r+0x96>
  410e8e:	2300      	movs	r3, #0
  410e90:	6023      	str	r3, [r4, #0]
  410e92:	4ba5      	ldr	r3, [pc, #660]	; (411128 <_dtoa_r+0x2c8>)
  410e94:	461a      	mov	r2, r3
  410e96:	ea08 0303 	and.w	r3, r8, r3
  410e9a:	4293      	cmp	r3, r2
  410e9c:	d014      	beq.n	410ec8 <_dtoa_r+0x68>
  410e9e:	4650      	mov	r0, sl
  410ea0:	4659      	mov	r1, fp
  410ea2:	2200      	movs	r2, #0
  410ea4:	2300      	movs	r3, #0
  410ea6:	f003 fbc3 	bl	414630 <__aeabi_dcmpeq>
  410eaa:	4605      	mov	r5, r0
  410eac:	b348      	cbz	r0, 410f02 <_dtoa_r+0xa2>
  410eae:	9a22      	ldr	r2, [sp, #136]	; 0x88
  410eb0:	2301      	movs	r3, #1
  410eb2:	6013      	str	r3, [r2, #0]
  410eb4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  410eb6:	2b00      	cmp	r3, #0
  410eb8:	f000 80c5 	beq.w	411046 <_dtoa_r+0x1e6>
  410ebc:	489b      	ldr	r0, [pc, #620]	; (41112c <_dtoa_r+0x2cc>)
  410ebe:	6018      	str	r0, [r3, #0]
  410ec0:	3801      	subs	r0, #1
  410ec2:	b017      	add	sp, #92	; 0x5c
  410ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  410ec8:	9a22      	ldr	r2, [sp, #136]	; 0x88
  410eca:	f242 730f 	movw	r3, #9999	; 0x270f
  410ece:	6013      	str	r3, [r2, #0]
  410ed0:	f1ba 0f00 	cmp.w	sl, #0
  410ed4:	f000 80a2 	beq.w	41101c <_dtoa_r+0x1bc>
  410ed8:	4895      	ldr	r0, [pc, #596]	; (411130 <_dtoa_r+0x2d0>)
  410eda:	9b24      	ldr	r3, [sp, #144]	; 0x90
  410edc:	2b00      	cmp	r3, #0
  410ede:	d0f0      	beq.n	410ec2 <_dtoa_r+0x62>
  410ee0:	78c3      	ldrb	r3, [r0, #3]
  410ee2:	2b00      	cmp	r3, #0
  410ee4:	f000 80b1 	beq.w	41104a <_dtoa_r+0x1ea>
  410ee8:	f100 0308 	add.w	r3, r0, #8
  410eec:	9a24      	ldr	r2, [sp, #144]	; 0x90
  410eee:	6013      	str	r3, [r2, #0]
  410ef0:	b017      	add	sp, #92	; 0x5c
  410ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  410ef6:	2301      	movs	r3, #1
  410ef8:	f02b 4800 	bic.w	r8, fp, #2147483648	; 0x80000000
  410efc:	6023      	str	r3, [r4, #0]
  410efe:	46c3      	mov	fp, r8
  410f00:	e7c7      	b.n	410e92 <_dtoa_r+0x32>
  410f02:	aa14      	add	r2, sp, #80	; 0x50
  410f04:	ab15      	add	r3, sp, #84	; 0x54
  410f06:	9201      	str	r2, [sp, #4]
  410f08:	9300      	str	r3, [sp, #0]
  410f0a:	4652      	mov	r2, sl
  410f0c:	465b      	mov	r3, fp
  410f0e:	4648      	mov	r0, r9
  410f10:	f002 fa18 	bl	413344 <__d2b>
  410f14:	ea5f 5418 	movs.w	r4, r8, lsr #20
  410f18:	9008      	str	r0, [sp, #32]
  410f1a:	f040 8088 	bne.w	41102e <_dtoa_r+0x1ce>
  410f1e:	9d14      	ldr	r5, [sp, #80]	; 0x50
  410f20:	9c15      	ldr	r4, [sp, #84]	; 0x54
  410f22:	442c      	add	r4, r5
  410f24:	f204 4332 	addw	r3, r4, #1074	; 0x432
  410f28:	2b20      	cmp	r3, #32
  410f2a:	f340 8291 	ble.w	411450 <_dtoa_r+0x5f0>
  410f2e:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  410f32:	f204 4012 	addw	r0, r4, #1042	; 0x412
  410f36:	fa08 f803 	lsl.w	r8, r8, r3
  410f3a:	fa2a f000 	lsr.w	r0, sl, r0
  410f3e:	ea40 0008 	orr.w	r0, r0, r8
  410f42:	f003 f897 	bl	414074 <__aeabi_ui2d>
  410f46:	2301      	movs	r3, #1
  410f48:	3c01      	subs	r4, #1
  410f4a:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  410f4e:	9310      	str	r3, [sp, #64]	; 0x40
  410f50:	2200      	movs	r2, #0
  410f52:	4b78      	ldr	r3, [pc, #480]	; (411134 <_dtoa_r+0x2d4>)
  410f54:	f002 ff50 	bl	413df8 <__aeabi_dsub>
  410f58:	a36d      	add	r3, pc, #436	; (adr r3, 411110 <_dtoa_r+0x2b0>)
  410f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
  410f5e:	f003 f8ff 	bl	414160 <__aeabi_dmul>
  410f62:	a36d      	add	r3, pc, #436	; (adr r3, 411118 <_dtoa_r+0x2b8>)
  410f64:	e9d3 2300 	ldrd	r2, r3, [r3]
  410f68:	f002 ff48 	bl	413dfc <__adddf3>
  410f6c:	4606      	mov	r6, r0
  410f6e:	4620      	mov	r0, r4
  410f70:	460f      	mov	r7, r1
  410f72:	f003 f88f 	bl	414094 <__aeabi_i2d>
  410f76:	a36a      	add	r3, pc, #424	; (adr r3, 411120 <_dtoa_r+0x2c0>)
  410f78:	e9d3 2300 	ldrd	r2, r3, [r3]
  410f7c:	f003 f8f0 	bl	414160 <__aeabi_dmul>
  410f80:	4602      	mov	r2, r0
  410f82:	460b      	mov	r3, r1
  410f84:	4630      	mov	r0, r6
  410f86:	4639      	mov	r1, r7
  410f88:	f002 ff38 	bl	413dfc <__adddf3>
  410f8c:	4606      	mov	r6, r0
  410f8e:	460f      	mov	r7, r1
  410f90:	f003 fb96 	bl	4146c0 <__aeabi_d2iz>
  410f94:	2200      	movs	r2, #0
  410f96:	9004      	str	r0, [sp, #16]
  410f98:	2300      	movs	r3, #0
  410f9a:	4630      	mov	r0, r6
  410f9c:	4639      	mov	r1, r7
  410f9e:	f003 fb51 	bl	414644 <__aeabi_dcmplt>
  410fa2:	2800      	cmp	r0, #0
  410fa4:	f040 8230 	bne.w	411408 <_dtoa_r+0x5a8>
  410fa8:	9e04      	ldr	r6, [sp, #16]
  410faa:	2e16      	cmp	r6, #22
  410fac:	f200 8229 	bhi.w	411402 <_dtoa_r+0x5a2>
  410fb0:	4b61      	ldr	r3, [pc, #388]	; (411138 <_dtoa_r+0x2d8>)
  410fb2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
  410fb6:	e9d3 0100 	ldrd	r0, r1, [r3]
  410fba:	4652      	mov	r2, sl
  410fbc:	465b      	mov	r3, fp
  410fbe:	f003 fb5f 	bl	414680 <__aeabi_dcmpgt>
  410fc2:	2800      	cmp	r0, #0
  410fc4:	f000 8249 	beq.w	41145a <_dtoa_r+0x5fa>
  410fc8:	1e73      	subs	r3, r6, #1
  410fca:	9304      	str	r3, [sp, #16]
  410fcc:	2300      	movs	r3, #0
  410fce:	930c      	str	r3, [sp, #48]	; 0x30
  410fd0:	1b2c      	subs	r4, r5, r4
  410fd2:	1e63      	subs	r3, r4, #1
  410fd4:	9302      	str	r3, [sp, #8]
  410fd6:	f100 8232 	bmi.w	41143e <_dtoa_r+0x5de>
  410fda:	2300      	movs	r3, #0
  410fdc:	9305      	str	r3, [sp, #20]
  410fde:	9b04      	ldr	r3, [sp, #16]
  410fe0:	2b00      	cmp	r3, #0
  410fe2:	f2c0 8223 	blt.w	41142c <_dtoa_r+0x5cc>
  410fe6:	9a02      	ldr	r2, [sp, #8]
  410fe8:	930b      	str	r3, [sp, #44]	; 0x2c
  410fea:	4611      	mov	r1, r2
  410fec:	4419      	add	r1, r3
  410fee:	2300      	movs	r3, #0
  410ff0:	9102      	str	r1, [sp, #8]
  410ff2:	930a      	str	r3, [sp, #40]	; 0x28
  410ff4:	9b20      	ldr	r3, [sp, #128]	; 0x80
  410ff6:	2b09      	cmp	r3, #9
  410ff8:	d829      	bhi.n	41104e <_dtoa_r+0x1ee>
  410ffa:	2b05      	cmp	r3, #5
  410ffc:	f340 8658 	ble.w	411cb0 <_dtoa_r+0xe50>
  411000:	3b04      	subs	r3, #4
  411002:	9320      	str	r3, [sp, #128]	; 0x80
  411004:	2500      	movs	r5, #0
  411006:	9b20      	ldr	r3, [sp, #128]	; 0x80
  411008:	3b02      	subs	r3, #2
  41100a:	2b03      	cmp	r3, #3
  41100c:	f200 8635 	bhi.w	411c7a <_dtoa_r+0xe1a>
  411010:	e8df f013 	tbh	[pc, r3, lsl #1]
  411014:	0228032c 	.word	0x0228032c
  411018:	04590337 	.word	0x04590337
  41101c:	4b44      	ldr	r3, [pc, #272]	; (411130 <_dtoa_r+0x2d0>)
  41101e:	4a47      	ldr	r2, [pc, #284]	; (41113c <_dtoa_r+0x2dc>)
  411020:	f3c8 0013 	ubfx	r0, r8, #0, #20
  411024:	2800      	cmp	r0, #0
  411026:	bf14      	ite	ne
  411028:	4618      	movne	r0, r3
  41102a:	4610      	moveq	r0, r2
  41102c:	e755      	b.n	410eda <_dtoa_r+0x7a>
  41102e:	f3cb 0313 	ubfx	r3, fp, #0, #20
  411032:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  411036:	9510      	str	r5, [sp, #64]	; 0x40
  411038:	4650      	mov	r0, sl
  41103a:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
  41103e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  411042:	9d14      	ldr	r5, [sp, #80]	; 0x50
  411044:	e784      	b.n	410f50 <_dtoa_r+0xf0>
  411046:	483e      	ldr	r0, [pc, #248]	; (411140 <_dtoa_r+0x2e0>)
  411048:	e73b      	b.n	410ec2 <_dtoa_r+0x62>
  41104a:	1cc3      	adds	r3, r0, #3
  41104c:	e74e      	b.n	410eec <_dtoa_r+0x8c>
  41104e:	2100      	movs	r1, #0
  411050:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
  411054:	4648      	mov	r0, r9
  411056:	9120      	str	r1, [sp, #128]	; 0x80
  411058:	f001 fec2 	bl	412de0 <_Balloc>
  41105c:	f04f 33ff 	mov.w	r3, #4294967295
  411060:	9306      	str	r3, [sp, #24]
  411062:	9a20      	ldr	r2, [sp, #128]	; 0x80
  411064:	930d      	str	r3, [sp, #52]	; 0x34
  411066:	2301      	movs	r3, #1
  411068:	9007      	str	r0, [sp, #28]
  41106a:	9221      	str	r2, [sp, #132]	; 0x84
  41106c:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
  411070:	9309      	str	r3, [sp, #36]	; 0x24
  411072:	9b15      	ldr	r3, [sp, #84]	; 0x54
  411074:	2b00      	cmp	r3, #0
  411076:	f2c0 80d1 	blt.w	41121c <_dtoa_r+0x3bc>
  41107a:	9a04      	ldr	r2, [sp, #16]
  41107c:	2a0e      	cmp	r2, #14
  41107e:	f300 80cd 	bgt.w	41121c <_dtoa_r+0x3bc>
  411082:	4b2d      	ldr	r3, [pc, #180]	; (411138 <_dtoa_r+0x2d8>)
  411084:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  411088:	e9d3 3400 	ldrd	r3, r4, [r3]
  41108c:	e9cd 3402 	strd	r3, r4, [sp, #8]
  411090:	9b21      	ldr	r3, [sp, #132]	; 0x84
  411092:	2b00      	cmp	r3, #0
  411094:	f2c0 8300 	blt.w	411698 <_dtoa_r+0x838>
  411098:	4656      	mov	r6, sl
  41109a:	465f      	mov	r7, fp
  41109c:	4650      	mov	r0, sl
  41109e:	4659      	mov	r1, fp
  4110a0:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
  4110a4:	4652      	mov	r2, sl
  4110a6:	465b      	mov	r3, fp
  4110a8:	f003 f984 	bl	4143b4 <__aeabi_ddiv>
  4110ac:	f003 fb08 	bl	4146c0 <__aeabi_d2iz>
  4110b0:	4604      	mov	r4, r0
  4110b2:	f002 ffef 	bl	414094 <__aeabi_i2d>
  4110b6:	4652      	mov	r2, sl
  4110b8:	465b      	mov	r3, fp
  4110ba:	f003 f851 	bl	414160 <__aeabi_dmul>
  4110be:	460b      	mov	r3, r1
  4110c0:	4602      	mov	r2, r0
  4110c2:	4639      	mov	r1, r7
  4110c4:	4630      	mov	r0, r6
  4110c6:	f002 fe97 	bl	413df8 <__aeabi_dsub>
  4110ca:	9d07      	ldr	r5, [sp, #28]
  4110cc:	f104 0330 	add.w	r3, r4, #48	; 0x30
  4110d0:	702b      	strb	r3, [r5, #0]
  4110d2:	9b06      	ldr	r3, [sp, #24]
  4110d4:	2b01      	cmp	r3, #1
  4110d6:	4606      	mov	r6, r0
  4110d8:	460f      	mov	r7, r1
  4110da:	f105 0501 	add.w	r5, r5, #1
  4110de:	d062      	beq.n	4111a6 <_dtoa_r+0x346>
  4110e0:	2200      	movs	r2, #0
  4110e2:	4b18      	ldr	r3, [pc, #96]	; (411144 <_dtoa_r+0x2e4>)
  4110e4:	f003 f83c 	bl	414160 <__aeabi_dmul>
  4110e8:	2200      	movs	r2, #0
  4110ea:	2300      	movs	r3, #0
  4110ec:	4606      	mov	r6, r0
  4110ee:	460f      	mov	r7, r1
  4110f0:	f003 fa9e 	bl	414630 <__aeabi_dcmpeq>
  4110f4:	2800      	cmp	r0, #0
  4110f6:	d17e      	bne.n	4111f6 <_dtoa_r+0x396>
  4110f8:	f8cd 9014 	str.w	r9, [sp, #20]
  4110fc:	f8dd a018 	ldr.w	sl, [sp, #24]
  411100:	f8dd b01c 	ldr.w	fp, [sp, #28]
  411104:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  411108:	e029      	b.n	41115e <_dtoa_r+0x2fe>
  41110a:	bf00      	nop
  41110c:	f3af 8000 	nop.w
  411110:	636f4361 	.word	0x636f4361
  411114:	3fd287a7 	.word	0x3fd287a7
  411118:	8b60c8b3 	.word	0x8b60c8b3
  41111c:	3fc68a28 	.word	0x3fc68a28
  411120:	509f79fb 	.word	0x509f79fb
  411124:	3fd34413 	.word	0x3fd34413
  411128:	7ff00000 	.word	0x7ff00000
  41112c:	0041775d 	.word	0x0041775d
  411130:	0041779c 	.word	0x0041779c
  411134:	3ff80000 	.word	0x3ff80000
  411138:	004177b0 	.word	0x004177b0
  41113c:	00417790 	.word	0x00417790
  411140:	0041775c 	.word	0x0041775c
  411144:	40240000 	.word	0x40240000
  411148:	f003 f80a 	bl	414160 <__aeabi_dmul>
  41114c:	2200      	movs	r2, #0
  41114e:	2300      	movs	r3, #0
  411150:	4606      	mov	r6, r0
  411152:	460f      	mov	r7, r1
  411154:	f003 fa6c 	bl	414630 <__aeabi_dcmpeq>
  411158:	2800      	cmp	r0, #0
  41115a:	f040 83b7 	bne.w	4118cc <_dtoa_r+0xa6c>
  41115e:	4642      	mov	r2, r8
  411160:	464b      	mov	r3, r9
  411162:	4630      	mov	r0, r6
  411164:	4639      	mov	r1, r7
  411166:	f003 f925 	bl	4143b4 <__aeabi_ddiv>
  41116a:	f003 faa9 	bl	4146c0 <__aeabi_d2iz>
  41116e:	4604      	mov	r4, r0
  411170:	f002 ff90 	bl	414094 <__aeabi_i2d>
  411174:	4642      	mov	r2, r8
  411176:	464b      	mov	r3, r9
  411178:	f002 fff2 	bl	414160 <__aeabi_dmul>
  41117c:	4602      	mov	r2, r0
  41117e:	460b      	mov	r3, r1
  411180:	4630      	mov	r0, r6
  411182:	4639      	mov	r1, r7
  411184:	f002 fe38 	bl	413df8 <__aeabi_dsub>
  411188:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  41118c:	f805 eb01 	strb.w	lr, [r5], #1
  411190:	ebcb 0e05 	rsb	lr, fp, r5
  411194:	45d6      	cmp	lr, sl
  411196:	4606      	mov	r6, r0
  411198:	460f      	mov	r7, r1
  41119a:	f04f 0200 	mov.w	r2, #0
  41119e:	4bb0      	ldr	r3, [pc, #704]	; (411460 <_dtoa_r+0x600>)
  4111a0:	d1d2      	bne.n	411148 <_dtoa_r+0x2e8>
  4111a2:	f8dd 9014 	ldr.w	r9, [sp, #20]
  4111a6:	4632      	mov	r2, r6
  4111a8:	463b      	mov	r3, r7
  4111aa:	4630      	mov	r0, r6
  4111ac:	4639      	mov	r1, r7
  4111ae:	f002 fe25 	bl	413dfc <__adddf3>
  4111b2:	4606      	mov	r6, r0
  4111b4:	460f      	mov	r7, r1
  4111b6:	4602      	mov	r2, r0
  4111b8:	460b      	mov	r3, r1
  4111ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4111be:	f003 fa41 	bl	414644 <__aeabi_dcmplt>
  4111c2:	b940      	cbnz	r0, 4111d6 <_dtoa_r+0x376>
  4111c4:	4632      	mov	r2, r6
  4111c6:	463b      	mov	r3, r7
  4111c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4111cc:	f003 fa30 	bl	414630 <__aeabi_dcmpeq>
  4111d0:	b188      	cbz	r0, 4111f6 <_dtoa_r+0x396>
  4111d2:	07e3      	lsls	r3, r4, #31
  4111d4:	d50f      	bpl.n	4111f6 <_dtoa_r+0x396>
  4111d6:	f815 4c01 	ldrb.w	r4, [r5, #-1]
  4111da:	9a07      	ldr	r2, [sp, #28]
  4111dc:	1e6b      	subs	r3, r5, #1
  4111de:	e004      	b.n	4111ea <_dtoa_r+0x38a>
  4111e0:	429a      	cmp	r2, r3
  4111e2:	f000 842c 	beq.w	411a3e <_dtoa_r+0xbde>
  4111e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  4111ea:	2c39      	cmp	r4, #57	; 0x39
  4111ec:	f103 0501 	add.w	r5, r3, #1
  4111f0:	d0f6      	beq.n	4111e0 <_dtoa_r+0x380>
  4111f2:	3401      	adds	r4, #1
  4111f4:	701c      	strb	r4, [r3, #0]
  4111f6:	9908      	ldr	r1, [sp, #32]
  4111f8:	4648      	mov	r0, r9
  4111fa:	f001 fe17 	bl	412e2c <_Bfree>
  4111fe:	2200      	movs	r2, #0
  411200:	9b04      	ldr	r3, [sp, #16]
  411202:	702a      	strb	r2, [r5, #0]
  411204:	9a22      	ldr	r2, [sp, #136]	; 0x88
  411206:	3301      	adds	r3, #1
  411208:	6013      	str	r3, [r2, #0]
  41120a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  41120c:	2b00      	cmp	r3, #0
  41120e:	f000 83a7 	beq.w	411960 <_dtoa_r+0xb00>
  411212:	9807      	ldr	r0, [sp, #28]
  411214:	601d      	str	r5, [r3, #0]
  411216:	b017      	add	sp, #92	; 0x5c
  411218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41121c:	9a09      	ldr	r2, [sp, #36]	; 0x24
  41121e:	2a00      	cmp	r2, #0
  411220:	f000 8112 	beq.w	411448 <_dtoa_r+0x5e8>
  411224:	9a20      	ldr	r2, [sp, #128]	; 0x80
  411226:	2a01      	cmp	r2, #1
  411228:	f340 8258 	ble.w	4116dc <_dtoa_r+0x87c>
  41122c:	9b06      	ldr	r3, [sp, #24]
  41122e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  411230:	1e5f      	subs	r7, r3, #1
  411232:	42ba      	cmp	r2, r7
  411234:	f2c0 8397 	blt.w	411966 <_dtoa_r+0xb06>
  411238:	1bd7      	subs	r7, r2, r7
  41123a:	9b06      	ldr	r3, [sp, #24]
  41123c:	2b00      	cmp	r3, #0
  41123e:	f2c0 848a 	blt.w	411b56 <_dtoa_r+0xcf6>
  411242:	9d05      	ldr	r5, [sp, #20]
  411244:	9b06      	ldr	r3, [sp, #24]
  411246:	9a05      	ldr	r2, [sp, #20]
  411248:	441a      	add	r2, r3
  41124a:	9205      	str	r2, [sp, #20]
  41124c:	9a02      	ldr	r2, [sp, #8]
  41124e:	2101      	movs	r1, #1
  411250:	441a      	add	r2, r3
  411252:	4648      	mov	r0, r9
  411254:	9202      	str	r2, [sp, #8]
  411256:	f001 fe81 	bl	412f5c <__i2b>
  41125a:	4606      	mov	r6, r0
  41125c:	b165      	cbz	r5, 411278 <_dtoa_r+0x418>
  41125e:	9902      	ldr	r1, [sp, #8]
  411260:	2900      	cmp	r1, #0
  411262:	460b      	mov	r3, r1
  411264:	dd08      	ble.n	411278 <_dtoa_r+0x418>
  411266:	42a9      	cmp	r1, r5
  411268:	9a05      	ldr	r2, [sp, #20]
  41126a:	bfa8      	it	ge
  41126c:	462b      	movge	r3, r5
  41126e:	1ad2      	subs	r2, r2, r3
  411270:	1aed      	subs	r5, r5, r3
  411272:	1acb      	subs	r3, r1, r3
  411274:	9205      	str	r2, [sp, #20]
  411276:	9302      	str	r3, [sp, #8]
  411278:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  41127a:	2b00      	cmp	r3, #0
  41127c:	f340 82fc 	ble.w	411878 <_dtoa_r+0xa18>
  411280:	9a09      	ldr	r2, [sp, #36]	; 0x24
  411282:	2a00      	cmp	r2, #0
  411284:	f000 8201 	beq.w	41168a <_dtoa_r+0x82a>
  411288:	2f00      	cmp	r7, #0
  41128a:	f000 81fe 	beq.w	41168a <_dtoa_r+0x82a>
  41128e:	4631      	mov	r1, r6
  411290:	463a      	mov	r2, r7
  411292:	4648      	mov	r0, r9
  411294:	f001 ff04 	bl	4130a0 <__pow5mult>
  411298:	f8dd 8020 	ldr.w	r8, [sp, #32]
  41129c:	4601      	mov	r1, r0
  41129e:	4642      	mov	r2, r8
  4112a0:	4606      	mov	r6, r0
  4112a2:	4648      	mov	r0, r9
  4112a4:	f001 fe64 	bl	412f70 <__multiply>
  4112a8:	4641      	mov	r1, r8
  4112aa:	4604      	mov	r4, r0
  4112ac:	4648      	mov	r0, r9
  4112ae:	f001 fdbd 	bl	412e2c <_Bfree>
  4112b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4112b4:	1bdb      	subs	r3, r3, r7
  4112b6:	930a      	str	r3, [sp, #40]	; 0x28
  4112b8:	f040 81e6 	bne.w	411688 <_dtoa_r+0x828>
  4112bc:	2101      	movs	r1, #1
  4112be:	4648      	mov	r0, r9
  4112c0:	f001 fe4c 	bl	412f5c <__i2b>
  4112c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4112c6:	4680      	mov	r8, r0
  4112c8:	2b00      	cmp	r3, #0
  4112ca:	f000 8219 	beq.w	411700 <_dtoa_r+0x8a0>
  4112ce:	4601      	mov	r1, r0
  4112d0:	461a      	mov	r2, r3
  4112d2:	4648      	mov	r0, r9
  4112d4:	f001 fee4 	bl	4130a0 <__pow5mult>
  4112d8:	9b20      	ldr	r3, [sp, #128]	; 0x80
  4112da:	2b01      	cmp	r3, #1
  4112dc:	4680      	mov	r8, r0
  4112de:	f340 82f8 	ble.w	4118d2 <_dtoa_r+0xa72>
  4112e2:	2700      	movs	r7, #0
  4112e4:	f8d8 3010 	ldr.w	r3, [r8, #16]
  4112e8:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  4112ec:	6918      	ldr	r0, [r3, #16]
  4112ee:	f001 fde7 	bl	412ec0 <__hi0bits>
  4112f2:	f1c0 0020 	rsb	r0, r0, #32
  4112f6:	9a02      	ldr	r2, [sp, #8]
  4112f8:	4410      	add	r0, r2
  4112fa:	f010 001f 	ands.w	r0, r0, #31
  4112fe:	f000 81f6 	beq.w	4116ee <_dtoa_r+0x88e>
  411302:	f1c0 0320 	rsb	r3, r0, #32
  411306:	2b04      	cmp	r3, #4
  411308:	f340 84ca 	ble.w	411ca0 <_dtoa_r+0xe40>
  41130c:	9b05      	ldr	r3, [sp, #20]
  41130e:	f1c0 001c 	rsb	r0, r0, #28
  411312:	4403      	add	r3, r0
  411314:	9305      	str	r3, [sp, #20]
  411316:	4613      	mov	r3, r2
  411318:	4403      	add	r3, r0
  41131a:	4405      	add	r5, r0
  41131c:	9302      	str	r3, [sp, #8]
  41131e:	9b05      	ldr	r3, [sp, #20]
  411320:	2b00      	cmp	r3, #0
  411322:	dd05      	ble.n	411330 <_dtoa_r+0x4d0>
  411324:	4621      	mov	r1, r4
  411326:	461a      	mov	r2, r3
  411328:	4648      	mov	r0, r9
  41132a:	f001 ff09 	bl	413140 <__lshift>
  41132e:	4604      	mov	r4, r0
  411330:	9b02      	ldr	r3, [sp, #8]
  411332:	2b00      	cmp	r3, #0
  411334:	dd05      	ble.n	411342 <_dtoa_r+0x4e2>
  411336:	4641      	mov	r1, r8
  411338:	461a      	mov	r2, r3
  41133a:	4648      	mov	r0, r9
  41133c:	f001 ff00 	bl	413140 <__lshift>
  411340:	4680      	mov	r8, r0
  411342:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  411344:	2b00      	cmp	r3, #0
  411346:	f040 827c 	bne.w	411842 <_dtoa_r+0x9e2>
  41134a:	9b06      	ldr	r3, [sp, #24]
  41134c:	2b00      	cmp	r3, #0
  41134e:	f340 8295 	ble.w	41187c <_dtoa_r+0xa1c>
  411352:	9b09      	ldr	r3, [sp, #36]	; 0x24
  411354:	2b00      	cmp	r3, #0
  411356:	f040 81f5 	bne.w	411744 <_dtoa_r+0x8e4>
  41135a:	f8dd b01c 	ldr.w	fp, [sp, #28]
  41135e:	9f06      	ldr	r7, [sp, #24]
  411360:	465d      	mov	r5, fp
  411362:	e002      	b.n	41136a <_dtoa_r+0x50a>
  411364:	f001 fd6c 	bl	412e40 <__multadd>
  411368:	4604      	mov	r4, r0
  41136a:	4641      	mov	r1, r8
  41136c:	4620      	mov	r0, r4
  41136e:	f7ff fce3 	bl	410d38 <quorem>
  411372:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  411376:	f805 ab01 	strb.w	sl, [r5], #1
  41137a:	ebcb 0305 	rsb	r3, fp, r5
  41137e:	42bb      	cmp	r3, r7
  411380:	f04f 020a 	mov.w	r2, #10
  411384:	f04f 0300 	mov.w	r3, #0
  411388:	4621      	mov	r1, r4
  41138a:	4648      	mov	r0, r9
  41138c:	dbea      	blt.n	411364 <_dtoa_r+0x504>
  41138e:	9b07      	ldr	r3, [sp, #28]
  411390:	9a06      	ldr	r2, [sp, #24]
  411392:	2a01      	cmp	r2, #1
  411394:	bfac      	ite	ge
  411396:	189b      	addge	r3, r3, r2
  411398:	3301      	addlt	r3, #1
  41139a:	461d      	mov	r5, r3
  41139c:	f04f 0b00 	mov.w	fp, #0
  4113a0:	4621      	mov	r1, r4
  4113a2:	2201      	movs	r2, #1
  4113a4:	4648      	mov	r0, r9
  4113a6:	f001 fecb 	bl	413140 <__lshift>
  4113aa:	4641      	mov	r1, r8
  4113ac:	9008      	str	r0, [sp, #32]
  4113ae:	f001 ff1f 	bl	4131f0 <__mcmp>
  4113b2:	2800      	cmp	r0, #0
  4113b4:	f340 830d 	ble.w	4119d2 <_dtoa_r+0xb72>
  4113b8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  4113bc:	9907      	ldr	r1, [sp, #28]
  4113be:	1e6b      	subs	r3, r5, #1
  4113c0:	e004      	b.n	4113cc <_dtoa_r+0x56c>
  4113c2:	428b      	cmp	r3, r1
  4113c4:	f000 8278 	beq.w	4118b8 <_dtoa_r+0xa58>
  4113c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  4113cc:	2a39      	cmp	r2, #57	; 0x39
  4113ce:	f103 0501 	add.w	r5, r3, #1
  4113d2:	d0f6      	beq.n	4113c2 <_dtoa_r+0x562>
  4113d4:	3201      	adds	r2, #1
  4113d6:	701a      	strb	r2, [r3, #0]
  4113d8:	4641      	mov	r1, r8
  4113da:	4648      	mov	r0, r9
  4113dc:	f001 fd26 	bl	412e2c <_Bfree>
  4113e0:	2e00      	cmp	r6, #0
  4113e2:	f43f af08 	beq.w	4111f6 <_dtoa_r+0x396>
  4113e6:	f1bb 0f00 	cmp.w	fp, #0
  4113ea:	d005      	beq.n	4113f8 <_dtoa_r+0x598>
  4113ec:	45b3      	cmp	fp, r6
  4113ee:	d003      	beq.n	4113f8 <_dtoa_r+0x598>
  4113f0:	4659      	mov	r1, fp
  4113f2:	4648      	mov	r0, r9
  4113f4:	f001 fd1a 	bl	412e2c <_Bfree>
  4113f8:	4631      	mov	r1, r6
  4113fa:	4648      	mov	r0, r9
  4113fc:	f001 fd16 	bl	412e2c <_Bfree>
  411400:	e6f9      	b.n	4111f6 <_dtoa_r+0x396>
  411402:	2301      	movs	r3, #1
  411404:	930c      	str	r3, [sp, #48]	; 0x30
  411406:	e5e3      	b.n	410fd0 <_dtoa_r+0x170>
  411408:	f8dd 8010 	ldr.w	r8, [sp, #16]
  41140c:	4640      	mov	r0, r8
  41140e:	f002 fe41 	bl	414094 <__aeabi_i2d>
  411412:	4602      	mov	r2, r0
  411414:	460b      	mov	r3, r1
  411416:	4630      	mov	r0, r6
  411418:	4639      	mov	r1, r7
  41141a:	f003 f909 	bl	414630 <__aeabi_dcmpeq>
  41141e:	2800      	cmp	r0, #0
  411420:	f47f adc2 	bne.w	410fa8 <_dtoa_r+0x148>
  411424:	f108 33ff 	add.w	r3, r8, #4294967295
  411428:	9304      	str	r3, [sp, #16]
  41142a:	e5bd      	b.n	410fa8 <_dtoa_r+0x148>
  41142c:	9a05      	ldr	r2, [sp, #20]
  41142e:	9b04      	ldr	r3, [sp, #16]
  411430:	1ad2      	subs	r2, r2, r3
  411432:	425b      	negs	r3, r3
  411434:	930a      	str	r3, [sp, #40]	; 0x28
  411436:	2300      	movs	r3, #0
  411438:	9205      	str	r2, [sp, #20]
  41143a:	930b      	str	r3, [sp, #44]	; 0x2c
  41143c:	e5da      	b.n	410ff4 <_dtoa_r+0x194>
  41143e:	425b      	negs	r3, r3
  411440:	9305      	str	r3, [sp, #20]
  411442:	2300      	movs	r3, #0
  411444:	9302      	str	r3, [sp, #8]
  411446:	e5ca      	b.n	410fde <_dtoa_r+0x17e>
  411448:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  41144a:	9d05      	ldr	r5, [sp, #20]
  41144c:	9e09      	ldr	r6, [sp, #36]	; 0x24
  41144e:	e705      	b.n	41125c <_dtoa_r+0x3fc>
  411450:	f1c3 0820 	rsb	r8, r3, #32
  411454:	fa0a f008 	lsl.w	r0, sl, r8
  411458:	e573      	b.n	410f42 <_dtoa_r+0xe2>
  41145a:	900c      	str	r0, [sp, #48]	; 0x30
  41145c:	e5b8      	b.n	410fd0 <_dtoa_r+0x170>
  41145e:	bf00      	nop
  411460:	40240000 	.word	0x40240000
  411464:	2300      	movs	r3, #0
  411466:	9309      	str	r3, [sp, #36]	; 0x24
  411468:	9b04      	ldr	r3, [sp, #16]
  41146a:	9a21      	ldr	r2, [sp, #132]	; 0x84
  41146c:	4413      	add	r3, r2
  41146e:	930d      	str	r3, [sp, #52]	; 0x34
  411470:	3301      	adds	r3, #1
  411472:	2b00      	cmp	r3, #0
  411474:	9306      	str	r3, [sp, #24]
  411476:	f340 8283 	ble.w	411980 <_dtoa_r+0xb20>
  41147a:	9c06      	ldr	r4, [sp, #24]
  41147c:	4626      	mov	r6, r4
  41147e:	2100      	movs	r1, #0
  411480:	2e17      	cmp	r6, #23
  411482:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
  411486:	d90b      	bls.n	4114a0 <_dtoa_r+0x640>
  411488:	2201      	movs	r2, #1
  41148a:	2304      	movs	r3, #4
  41148c:	005b      	lsls	r3, r3, #1
  41148e:	f103 0014 	add.w	r0, r3, #20
  411492:	42b0      	cmp	r0, r6
  411494:	4611      	mov	r1, r2
  411496:	f102 0201 	add.w	r2, r2, #1
  41149a:	d9f7      	bls.n	41148c <_dtoa_r+0x62c>
  41149c:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
  4114a0:	4648      	mov	r0, r9
  4114a2:	f001 fc9d 	bl	412de0 <_Balloc>
  4114a6:	2c0e      	cmp	r4, #14
  4114a8:	9007      	str	r0, [sp, #28]
  4114aa:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
  4114ae:	f63f ade0 	bhi.w	411072 <_dtoa_r+0x212>
  4114b2:	2d00      	cmp	r5, #0
  4114b4:	f43f addd 	beq.w	411072 <_dtoa_r+0x212>
  4114b8:	9904      	ldr	r1, [sp, #16]
  4114ba:	4657      	mov	r7, sl
  4114bc:	46d8      	mov	r8, fp
  4114be:	2900      	cmp	r1, #0
  4114c0:	e9cd 780e 	strd	r7, r8, [sp, #56]	; 0x38
  4114c4:	f340 8292 	ble.w	4119ec <_dtoa_r+0xb8c>
  4114c8:	4b91      	ldr	r3, [pc, #580]	; (411710 <_dtoa_r+0x8b0>)
  4114ca:	f001 020f 	and.w	r2, r1, #15
  4114ce:	110e      	asrs	r6, r1, #4
  4114d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4114d4:	06f0      	lsls	r0, r6, #27
  4114d6:	e9d3 4500 	ldrd	r4, r5, [r3]
  4114da:	f140 824c 	bpl.w	411976 <_dtoa_r+0xb16>
  4114de:	4b8d      	ldr	r3, [pc, #564]	; (411714 <_dtoa_r+0x8b4>)
  4114e0:	4650      	mov	r0, sl
  4114e2:	4659      	mov	r1, fp
  4114e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  4114e8:	f002 ff64 	bl	4143b4 <__aeabi_ddiv>
  4114ec:	f006 060f 	and.w	r6, r6, #15
  4114f0:	4682      	mov	sl, r0
  4114f2:	468b      	mov	fp, r1
  4114f4:	f04f 0803 	mov.w	r8, #3
  4114f8:	b186      	cbz	r6, 41151c <_dtoa_r+0x6bc>
  4114fa:	4f86      	ldr	r7, [pc, #536]	; (411714 <_dtoa_r+0x8b4>)
  4114fc:	07f1      	lsls	r1, r6, #31
  4114fe:	d509      	bpl.n	411514 <_dtoa_r+0x6b4>
  411500:	4620      	mov	r0, r4
  411502:	4629      	mov	r1, r5
  411504:	e9d7 2300 	ldrd	r2, r3, [r7]
  411508:	f002 fe2a 	bl	414160 <__aeabi_dmul>
  41150c:	f108 0801 	add.w	r8, r8, #1
  411510:	4604      	mov	r4, r0
  411512:	460d      	mov	r5, r1
  411514:	1076      	asrs	r6, r6, #1
  411516:	f107 0708 	add.w	r7, r7, #8
  41151a:	d1ef      	bne.n	4114fc <_dtoa_r+0x69c>
  41151c:	4622      	mov	r2, r4
  41151e:	462b      	mov	r3, r5
  411520:	4650      	mov	r0, sl
  411522:	4659      	mov	r1, fp
  411524:	f002 ff46 	bl	4143b4 <__aeabi_ddiv>
  411528:	4606      	mov	r6, r0
  41152a:	460f      	mov	r7, r1
  41152c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  41152e:	b143      	cbz	r3, 411542 <_dtoa_r+0x6e2>
  411530:	2200      	movs	r2, #0
  411532:	4b79      	ldr	r3, [pc, #484]	; (411718 <_dtoa_r+0x8b8>)
  411534:	4630      	mov	r0, r6
  411536:	4639      	mov	r1, r7
  411538:	f003 f884 	bl	414644 <__aeabi_dcmplt>
  41153c:	2800      	cmp	r0, #0
  41153e:	f040 8320 	bne.w	411b82 <_dtoa_r+0xd22>
  411542:	4640      	mov	r0, r8
  411544:	f002 fda6 	bl	414094 <__aeabi_i2d>
  411548:	4632      	mov	r2, r6
  41154a:	463b      	mov	r3, r7
  41154c:	f002 fe08 	bl	414160 <__aeabi_dmul>
  411550:	4b72      	ldr	r3, [pc, #456]	; (41171c <_dtoa_r+0x8bc>)
  411552:	2200      	movs	r2, #0
  411554:	f002 fc52 	bl	413dfc <__adddf3>
  411558:	9b06      	ldr	r3, [sp, #24]
  41155a:	4604      	mov	r4, r0
  41155c:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
  411560:	2b00      	cmp	r3, #0
  411562:	f000 81df 	beq.w	411924 <_dtoa_r+0xac4>
  411566:	9b04      	ldr	r3, [sp, #16]
  411568:	f8dd 8018 	ldr.w	r8, [sp, #24]
  41156c:	9311      	str	r3, [sp, #68]	; 0x44
  41156e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  411570:	2b00      	cmp	r3, #0
  411572:	f000 8297 	beq.w	411aa4 <_dtoa_r+0xc44>
  411576:	4b66      	ldr	r3, [pc, #408]	; (411710 <_dtoa_r+0x8b0>)
  411578:	4969      	ldr	r1, [pc, #420]	; (411720 <_dtoa_r+0x8c0>)
  41157a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
  41157e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  411582:	2000      	movs	r0, #0
  411584:	f002 ff16 	bl	4143b4 <__aeabi_ddiv>
  411588:	4622      	mov	r2, r4
  41158a:	462b      	mov	r3, r5
  41158c:	f002 fc34 	bl	413df8 <__aeabi_dsub>
  411590:	4682      	mov	sl, r0
  411592:	468b      	mov	fp, r1
  411594:	4630      	mov	r0, r6
  411596:	4639      	mov	r1, r7
  411598:	f003 f892 	bl	4146c0 <__aeabi_d2iz>
  41159c:	4604      	mov	r4, r0
  41159e:	f002 fd79 	bl	414094 <__aeabi_i2d>
  4115a2:	4602      	mov	r2, r0
  4115a4:	460b      	mov	r3, r1
  4115a6:	4630      	mov	r0, r6
  4115a8:	4639      	mov	r1, r7
  4115aa:	f002 fc25 	bl	413df8 <__aeabi_dsub>
  4115ae:	3430      	adds	r4, #48	; 0x30
  4115b0:	9d07      	ldr	r5, [sp, #28]
  4115b2:	b2e4      	uxtb	r4, r4
  4115b4:	4606      	mov	r6, r0
  4115b6:	460f      	mov	r7, r1
  4115b8:	702c      	strb	r4, [r5, #0]
  4115ba:	4602      	mov	r2, r0
  4115bc:	460b      	mov	r3, r1
  4115be:	4650      	mov	r0, sl
  4115c0:	4659      	mov	r1, fp
  4115c2:	3501      	adds	r5, #1
  4115c4:	f003 f85c 	bl	414680 <__aeabi_dcmpgt>
  4115c8:	2800      	cmp	r0, #0
  4115ca:	d14c      	bne.n	411666 <_dtoa_r+0x806>
  4115cc:	4632      	mov	r2, r6
  4115ce:	463b      	mov	r3, r7
  4115d0:	2000      	movs	r0, #0
  4115d2:	4951      	ldr	r1, [pc, #324]	; (411718 <_dtoa_r+0x8b8>)
  4115d4:	f002 fc10 	bl	413df8 <__aeabi_dsub>
  4115d8:	4602      	mov	r2, r0
  4115da:	460b      	mov	r3, r1
  4115dc:	4650      	mov	r0, sl
  4115de:	4659      	mov	r1, fp
  4115e0:	f003 f84e 	bl	414680 <__aeabi_dcmpgt>
  4115e4:	2800      	cmp	r0, #0
  4115e6:	f040 830d 	bne.w	411c04 <_dtoa_r+0xda4>
  4115ea:	f1b8 0f01 	cmp.w	r8, #1
  4115ee:	f340 81b3 	ble.w	411958 <_dtoa_r+0xaf8>
  4115f2:	9b07      	ldr	r3, [sp, #28]
  4115f4:	4498      	add	r8, r3
  4115f6:	e00d      	b.n	411614 <_dtoa_r+0x7b4>
  4115f8:	2000      	movs	r0, #0
  4115fa:	4947      	ldr	r1, [pc, #284]	; (411718 <_dtoa_r+0x8b8>)
  4115fc:	f002 fbfc 	bl	413df8 <__aeabi_dsub>
  411600:	4652      	mov	r2, sl
  411602:	465b      	mov	r3, fp
  411604:	f003 f81e 	bl	414644 <__aeabi_dcmplt>
  411608:	2800      	cmp	r0, #0
  41160a:	f040 82fb 	bne.w	411c04 <_dtoa_r+0xda4>
  41160e:	4545      	cmp	r5, r8
  411610:	f000 81a2 	beq.w	411958 <_dtoa_r+0xaf8>
  411614:	4650      	mov	r0, sl
  411616:	4659      	mov	r1, fp
  411618:	2200      	movs	r2, #0
  41161a:	4b42      	ldr	r3, [pc, #264]	; (411724 <_dtoa_r+0x8c4>)
  41161c:	f002 fda0 	bl	414160 <__aeabi_dmul>
  411620:	2200      	movs	r2, #0
  411622:	4b40      	ldr	r3, [pc, #256]	; (411724 <_dtoa_r+0x8c4>)
  411624:	4682      	mov	sl, r0
  411626:	468b      	mov	fp, r1
  411628:	4630      	mov	r0, r6
  41162a:	4639      	mov	r1, r7
  41162c:	f002 fd98 	bl	414160 <__aeabi_dmul>
  411630:	460f      	mov	r7, r1
  411632:	4606      	mov	r6, r0
  411634:	f003 f844 	bl	4146c0 <__aeabi_d2iz>
  411638:	4604      	mov	r4, r0
  41163a:	f002 fd2b 	bl	414094 <__aeabi_i2d>
  41163e:	4602      	mov	r2, r0
  411640:	460b      	mov	r3, r1
  411642:	4630      	mov	r0, r6
  411644:	4639      	mov	r1, r7
  411646:	f002 fbd7 	bl	413df8 <__aeabi_dsub>
  41164a:	3430      	adds	r4, #48	; 0x30
  41164c:	b2e4      	uxtb	r4, r4
  41164e:	4652      	mov	r2, sl
  411650:	465b      	mov	r3, fp
  411652:	f805 4b01 	strb.w	r4, [r5], #1
  411656:	4606      	mov	r6, r0
  411658:	460f      	mov	r7, r1
  41165a:	f002 fff3 	bl	414644 <__aeabi_dcmplt>
  41165e:	4632      	mov	r2, r6
  411660:	463b      	mov	r3, r7
  411662:	2800      	cmp	r0, #0
  411664:	d0c8      	beq.n	4115f8 <_dtoa_r+0x798>
  411666:	9b11      	ldr	r3, [sp, #68]	; 0x44
  411668:	9304      	str	r3, [sp, #16]
  41166a:	e5c4      	b.n	4111f6 <_dtoa_r+0x396>
  41166c:	2300      	movs	r3, #0
  41166e:	9309      	str	r3, [sp, #36]	; 0x24
  411670:	9b21      	ldr	r3, [sp, #132]	; 0x84
  411672:	2b00      	cmp	r3, #0
  411674:	f340 8189 	ble.w	41198a <_dtoa_r+0xb2a>
  411678:	461e      	mov	r6, r3
  41167a:	461c      	mov	r4, r3
  41167c:	930d      	str	r3, [sp, #52]	; 0x34
  41167e:	9306      	str	r3, [sp, #24]
  411680:	e6fd      	b.n	41147e <_dtoa_r+0x61e>
  411682:	2301      	movs	r3, #1
  411684:	9309      	str	r3, [sp, #36]	; 0x24
  411686:	e7f3      	b.n	411670 <_dtoa_r+0x810>
  411688:	9408      	str	r4, [sp, #32]
  41168a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  41168c:	9908      	ldr	r1, [sp, #32]
  41168e:	4648      	mov	r0, r9
  411690:	f001 fd06 	bl	4130a0 <__pow5mult>
  411694:	4604      	mov	r4, r0
  411696:	e611      	b.n	4112bc <_dtoa_r+0x45c>
  411698:	9b06      	ldr	r3, [sp, #24]
  41169a:	2b00      	cmp	r3, #0
  41169c:	f73f acfc 	bgt.w	411098 <_dtoa_r+0x238>
  4116a0:	f040 82da 	bne.w	411c58 <_dtoa_r+0xdf8>
  4116a4:	2200      	movs	r2, #0
  4116a6:	4b20      	ldr	r3, [pc, #128]	; (411728 <_dtoa_r+0x8c8>)
  4116a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4116ac:	f002 fd58 	bl	414160 <__aeabi_dmul>
  4116b0:	4652      	mov	r2, sl
  4116b2:	465b      	mov	r3, fp
  4116b4:	f002 ffda 	bl	41466c <__aeabi_dcmpge>
  4116b8:	f8dd 8018 	ldr.w	r8, [sp, #24]
  4116bc:	4646      	mov	r6, r8
  4116be:	2800      	cmp	r0, #0
  4116c0:	f000 80f2 	beq.w	4118a8 <_dtoa_r+0xa48>
  4116c4:	9b21      	ldr	r3, [sp, #132]	; 0x84
  4116c6:	9d07      	ldr	r5, [sp, #28]
  4116c8:	43db      	mvns	r3, r3
  4116ca:	9304      	str	r3, [sp, #16]
  4116cc:	4641      	mov	r1, r8
  4116ce:	4648      	mov	r0, r9
  4116d0:	f001 fbac 	bl	412e2c <_Bfree>
  4116d4:	2e00      	cmp	r6, #0
  4116d6:	f43f ad8e 	beq.w	4111f6 <_dtoa_r+0x396>
  4116da:	e68d      	b.n	4113f8 <_dtoa_r+0x598>
  4116dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
  4116de:	2a00      	cmp	r2, #0
  4116e0:	f000 8241 	beq.w	411b66 <_dtoa_r+0xd06>
  4116e4:	f203 4333 	addw	r3, r3, #1075	; 0x433
  4116e8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  4116ea:	9d05      	ldr	r5, [sp, #20]
  4116ec:	e5ab      	b.n	411246 <_dtoa_r+0x3e6>
  4116ee:	201c      	movs	r0, #28
  4116f0:	9b05      	ldr	r3, [sp, #20]
  4116f2:	4403      	add	r3, r0
  4116f4:	9305      	str	r3, [sp, #20]
  4116f6:	9b02      	ldr	r3, [sp, #8]
  4116f8:	4403      	add	r3, r0
  4116fa:	4405      	add	r5, r0
  4116fc:	9302      	str	r3, [sp, #8]
  4116fe:	e60e      	b.n	41131e <_dtoa_r+0x4be>
  411700:	9b20      	ldr	r3, [sp, #128]	; 0x80
  411702:	2b01      	cmp	r3, #1
  411704:	f340 8282 	ble.w	411c0c <_dtoa_r+0xdac>
  411708:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
  41170a:	2001      	movs	r0, #1
  41170c:	e5f3      	b.n	4112f6 <_dtoa_r+0x496>
  41170e:	bf00      	nop
  411710:	004177b0 	.word	0x004177b0
  411714:	00417878 	.word	0x00417878
  411718:	3ff00000 	.word	0x3ff00000
  41171c:	401c0000 	.word	0x401c0000
  411720:	3fe00000 	.word	0x3fe00000
  411724:	40240000 	.word	0x40240000
  411728:	40140000 	.word	0x40140000
  41172c:	4631      	mov	r1, r6
  41172e:	2300      	movs	r3, #0
  411730:	220a      	movs	r2, #10
  411732:	4648      	mov	r0, r9
  411734:	f001 fb84 	bl	412e40 <__multadd>
  411738:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  41173a:	2b00      	cmp	r3, #0
  41173c:	4606      	mov	r6, r0
  41173e:	f340 8297 	ble.w	411c70 <_dtoa_r+0xe10>
  411742:	9306      	str	r3, [sp, #24]
  411744:	2d00      	cmp	r5, #0
  411746:	dd05      	ble.n	411754 <_dtoa_r+0x8f4>
  411748:	4631      	mov	r1, r6
  41174a:	462a      	mov	r2, r5
  41174c:	4648      	mov	r0, r9
  41174e:	f001 fcf7 	bl	413140 <__lshift>
  411752:	4606      	mov	r6, r0
  411754:	2f00      	cmp	r7, #0
  411756:	f040 817c 	bne.w	411a52 <_dtoa_r+0xbf2>
  41175a:	9605      	str	r6, [sp, #20]
  41175c:	9b06      	ldr	r3, [sp, #24]
  41175e:	9a07      	ldr	r2, [sp, #28]
  411760:	f8dd b014 	ldr.w	fp, [sp, #20]
  411764:	3b01      	subs	r3, #1
  411766:	18d3      	adds	r3, r2, r3
  411768:	9308      	str	r3, [sp, #32]
  41176a:	f00a 0301 	and.w	r3, sl, #1
  41176e:	9309      	str	r3, [sp, #36]	; 0x24
  411770:	4617      	mov	r7, r2
  411772:	46c2      	mov	sl, r8
  411774:	4651      	mov	r1, sl
  411776:	4620      	mov	r0, r4
  411778:	f7ff fade 	bl	410d38 <quorem>
  41177c:	4631      	mov	r1, r6
  41177e:	4605      	mov	r5, r0
  411780:	4620      	mov	r0, r4
  411782:	f001 fd35 	bl	4131f0 <__mcmp>
  411786:	465a      	mov	r2, fp
  411788:	9002      	str	r0, [sp, #8]
  41178a:	4651      	mov	r1, sl
  41178c:	4648      	mov	r0, r9
  41178e:	f001 fd4f 	bl	413230 <__mdiff>
  411792:	68c2      	ldr	r2, [r0, #12]
  411794:	4680      	mov	r8, r0
  411796:	f105 0330 	add.w	r3, r5, #48	; 0x30
  41179a:	2a00      	cmp	r2, #0
  41179c:	d149      	bne.n	411832 <_dtoa_r+0x9d2>
  41179e:	4601      	mov	r1, r0
  4117a0:	4620      	mov	r0, r4
  4117a2:	9306      	str	r3, [sp, #24]
  4117a4:	f001 fd24 	bl	4131f0 <__mcmp>
  4117a8:	4641      	mov	r1, r8
  4117aa:	9005      	str	r0, [sp, #20]
  4117ac:	4648      	mov	r0, r9
  4117ae:	f001 fb3d 	bl	412e2c <_Bfree>
  4117b2:	9a05      	ldr	r2, [sp, #20]
  4117b4:	9b06      	ldr	r3, [sp, #24]
  4117b6:	b92a      	cbnz	r2, 4117c4 <_dtoa_r+0x964>
  4117b8:	9920      	ldr	r1, [sp, #128]	; 0x80
  4117ba:	b919      	cbnz	r1, 4117c4 <_dtoa_r+0x964>
  4117bc:	9909      	ldr	r1, [sp, #36]	; 0x24
  4117be:	2900      	cmp	r1, #0
  4117c0:	f000 8236 	beq.w	411c30 <_dtoa_r+0xdd0>
  4117c4:	9902      	ldr	r1, [sp, #8]
  4117c6:	2900      	cmp	r1, #0
  4117c8:	f2c0 80e4 	blt.w	411994 <_dtoa_r+0xb34>
  4117cc:	d105      	bne.n	4117da <_dtoa_r+0x97a>
  4117ce:	9920      	ldr	r1, [sp, #128]	; 0x80
  4117d0:	b919      	cbnz	r1, 4117da <_dtoa_r+0x97a>
  4117d2:	9909      	ldr	r1, [sp, #36]	; 0x24
  4117d4:	2900      	cmp	r1, #0
  4117d6:	f000 80dd 	beq.w	411994 <_dtoa_r+0xb34>
  4117da:	2a00      	cmp	r2, #0
  4117dc:	f300 814d 	bgt.w	411a7a <_dtoa_r+0xc1a>
  4117e0:	9a08      	ldr	r2, [sp, #32]
  4117e2:	703b      	strb	r3, [r7, #0]
  4117e4:	f107 0801 	add.w	r8, r7, #1
  4117e8:	4297      	cmp	r7, r2
  4117ea:	4645      	mov	r5, r8
  4117ec:	f000 8154 	beq.w	411a98 <_dtoa_r+0xc38>
  4117f0:	4621      	mov	r1, r4
  4117f2:	2300      	movs	r3, #0
  4117f4:	220a      	movs	r2, #10
  4117f6:	4648      	mov	r0, r9
  4117f8:	f001 fb22 	bl	412e40 <__multadd>
  4117fc:	455e      	cmp	r6, fp
  4117fe:	4604      	mov	r4, r0
  411800:	4631      	mov	r1, r6
  411802:	f04f 0300 	mov.w	r3, #0
  411806:	f04f 020a 	mov.w	r2, #10
  41180a:	4648      	mov	r0, r9
  41180c:	d00b      	beq.n	411826 <_dtoa_r+0x9c6>
  41180e:	f001 fb17 	bl	412e40 <__multadd>
  411812:	4659      	mov	r1, fp
  411814:	4606      	mov	r6, r0
  411816:	2300      	movs	r3, #0
  411818:	220a      	movs	r2, #10
  41181a:	4648      	mov	r0, r9
  41181c:	f001 fb10 	bl	412e40 <__multadd>
  411820:	4647      	mov	r7, r8
  411822:	4683      	mov	fp, r0
  411824:	e7a6      	b.n	411774 <_dtoa_r+0x914>
  411826:	f001 fb0b 	bl	412e40 <__multadd>
  41182a:	4647      	mov	r7, r8
  41182c:	4606      	mov	r6, r0
  41182e:	4683      	mov	fp, r0
  411830:	e7a0      	b.n	411774 <_dtoa_r+0x914>
  411832:	4601      	mov	r1, r0
  411834:	4648      	mov	r0, r9
  411836:	9305      	str	r3, [sp, #20]
  411838:	f001 faf8 	bl	412e2c <_Bfree>
  41183c:	2201      	movs	r2, #1
  41183e:	9b05      	ldr	r3, [sp, #20]
  411840:	e7c0      	b.n	4117c4 <_dtoa_r+0x964>
  411842:	4641      	mov	r1, r8
  411844:	4620      	mov	r0, r4
  411846:	f001 fcd3 	bl	4131f0 <__mcmp>
  41184a:	2800      	cmp	r0, #0
  41184c:	f6bf ad7d 	bge.w	41134a <_dtoa_r+0x4ea>
  411850:	4621      	mov	r1, r4
  411852:	9c04      	ldr	r4, [sp, #16]
  411854:	2300      	movs	r3, #0
  411856:	3c01      	subs	r4, #1
  411858:	220a      	movs	r2, #10
  41185a:	4648      	mov	r0, r9
  41185c:	9404      	str	r4, [sp, #16]
  41185e:	f001 faef 	bl	412e40 <__multadd>
  411862:	9b09      	ldr	r3, [sp, #36]	; 0x24
  411864:	4604      	mov	r4, r0
  411866:	2b00      	cmp	r3, #0
  411868:	f47f af60 	bne.w	41172c <_dtoa_r+0x8cc>
  41186c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  41186e:	2b00      	cmp	r3, #0
  411870:	f340 81f6 	ble.w	411c60 <_dtoa_r+0xe00>
  411874:	9306      	str	r3, [sp, #24]
  411876:	e570      	b.n	41135a <_dtoa_r+0x4fa>
  411878:	9c08      	ldr	r4, [sp, #32]
  41187a:	e51f      	b.n	4112bc <_dtoa_r+0x45c>
  41187c:	9b20      	ldr	r3, [sp, #128]	; 0x80
  41187e:	2b02      	cmp	r3, #2
  411880:	f77f ad67 	ble.w	411352 <_dtoa_r+0x4f2>
  411884:	9b06      	ldr	r3, [sp, #24]
  411886:	2b00      	cmp	r3, #0
  411888:	f040 8179 	bne.w	411b7e <_dtoa_r+0xd1e>
  41188c:	4641      	mov	r1, r8
  41188e:	2205      	movs	r2, #5
  411890:	4648      	mov	r0, r9
  411892:	f001 fad5 	bl	412e40 <__multadd>
  411896:	4601      	mov	r1, r0
  411898:	4680      	mov	r8, r0
  41189a:	4620      	mov	r0, r4
  41189c:	f001 fca8 	bl	4131f0 <__mcmp>
  4118a0:	2800      	cmp	r0, #0
  4118a2:	9408      	str	r4, [sp, #32]
  4118a4:	f77f af0e 	ble.w	4116c4 <_dtoa_r+0x864>
  4118a8:	9a04      	ldr	r2, [sp, #16]
  4118aa:	9907      	ldr	r1, [sp, #28]
  4118ac:	2331      	movs	r3, #49	; 0x31
  4118ae:	3201      	adds	r2, #1
  4118b0:	9204      	str	r2, [sp, #16]
  4118b2:	700b      	strb	r3, [r1, #0]
  4118b4:	1c4d      	adds	r5, r1, #1
  4118b6:	e709      	b.n	4116cc <_dtoa_r+0x86c>
  4118b8:	9a04      	ldr	r2, [sp, #16]
  4118ba:	3201      	adds	r2, #1
  4118bc:	9204      	str	r2, [sp, #16]
  4118be:	9a07      	ldr	r2, [sp, #28]
  4118c0:	2331      	movs	r3, #49	; 0x31
  4118c2:	7013      	strb	r3, [r2, #0]
  4118c4:	e588      	b.n	4113d8 <_dtoa_r+0x578>
  4118c6:	2301      	movs	r3, #1
  4118c8:	9309      	str	r3, [sp, #36]	; 0x24
  4118ca:	e5cd      	b.n	411468 <_dtoa_r+0x608>
  4118cc:	f8dd 9014 	ldr.w	r9, [sp, #20]
  4118d0:	e491      	b.n	4111f6 <_dtoa_r+0x396>
  4118d2:	f1ba 0f00 	cmp.w	sl, #0
  4118d6:	f47f ad04 	bne.w	4112e2 <_dtoa_r+0x482>
  4118da:	f3cb 0313 	ubfx	r3, fp, #0, #20
  4118de:	2b00      	cmp	r3, #0
  4118e0:	f040 813f 	bne.w	411b62 <_dtoa_r+0xd02>
  4118e4:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  4118e8:	0d3f      	lsrs	r7, r7, #20
  4118ea:	053f      	lsls	r7, r7, #20
  4118ec:	b137      	cbz	r7, 4118fc <_dtoa_r+0xa9c>
  4118ee:	9b05      	ldr	r3, [sp, #20]
  4118f0:	3301      	adds	r3, #1
  4118f2:	9305      	str	r3, [sp, #20]
  4118f4:	9b02      	ldr	r3, [sp, #8]
  4118f6:	3301      	adds	r3, #1
  4118f8:	9302      	str	r3, [sp, #8]
  4118fa:	2701      	movs	r7, #1
  4118fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4118fe:	2001      	movs	r0, #1
  411900:	2b00      	cmp	r3, #0
  411902:	f43f acf8 	beq.w	4112f6 <_dtoa_r+0x496>
  411906:	e4ed      	b.n	4112e4 <_dtoa_r+0x484>
  411908:	4640      	mov	r0, r8
  41190a:	f002 fbc3 	bl	414094 <__aeabi_i2d>
  41190e:	4632      	mov	r2, r6
  411910:	463b      	mov	r3, r7
  411912:	f002 fc25 	bl	414160 <__aeabi_dmul>
  411916:	2200      	movs	r2, #0
  411918:	4bbf      	ldr	r3, [pc, #764]	; (411c18 <_dtoa_r+0xdb8>)
  41191a:	f002 fa6f 	bl	413dfc <__adddf3>
  41191e:	4604      	mov	r4, r0
  411920:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
  411924:	4630      	mov	r0, r6
  411926:	4639      	mov	r1, r7
  411928:	2200      	movs	r2, #0
  41192a:	4bbc      	ldr	r3, [pc, #752]	; (411c1c <_dtoa_r+0xdbc>)
  41192c:	f002 fa64 	bl	413df8 <__aeabi_dsub>
  411930:	4622      	mov	r2, r4
  411932:	462b      	mov	r3, r5
  411934:	4606      	mov	r6, r0
  411936:	460f      	mov	r7, r1
  411938:	f002 fea2 	bl	414680 <__aeabi_dcmpgt>
  41193c:	4680      	mov	r8, r0
  41193e:	2800      	cmp	r0, #0
  411940:	f040 8105 	bne.w	411b4e <_dtoa_r+0xcee>
  411944:	4622      	mov	r2, r4
  411946:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
  41194a:	4630      	mov	r0, r6
  41194c:	4639      	mov	r1, r7
  41194e:	f002 fe79 	bl	414644 <__aeabi_dcmplt>
  411952:	b108      	cbz	r0, 411958 <_dtoa_r+0xaf8>
  411954:	4646      	mov	r6, r8
  411956:	e6b5      	b.n	4116c4 <_dtoa_r+0x864>
  411958:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
  41195c:	f7ff bb89 	b.w	411072 <_dtoa_r+0x212>
  411960:	9807      	ldr	r0, [sp, #28]
  411962:	f7ff baae 	b.w	410ec2 <_dtoa_r+0x62>
  411966:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  411968:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  41196a:	970a      	str	r7, [sp, #40]	; 0x28
  41196c:	1afb      	subs	r3, r7, r3
  41196e:	441a      	add	r2, r3
  411970:	920b      	str	r2, [sp, #44]	; 0x2c
  411972:	2700      	movs	r7, #0
  411974:	e461      	b.n	41123a <_dtoa_r+0x3da>
  411976:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
  41197a:	f04f 0802 	mov.w	r8, #2
  41197e:	e5bb      	b.n	4114f8 <_dtoa_r+0x698>
  411980:	461c      	mov	r4, r3
  411982:	2100      	movs	r1, #0
  411984:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
  411988:	e58a      	b.n	4114a0 <_dtoa_r+0x640>
  41198a:	2401      	movs	r4, #1
  41198c:	9421      	str	r4, [sp, #132]	; 0x84
  41198e:	940d      	str	r4, [sp, #52]	; 0x34
  411990:	9406      	str	r4, [sp, #24]
  411992:	e7f6      	b.n	411982 <_dtoa_r+0xb22>
  411994:	2a00      	cmp	r2, #0
  411996:	46d0      	mov	r8, sl
  411998:	f8cd b014 	str.w	fp, [sp, #20]
  41199c:	469a      	mov	sl, r3
  41199e:	dd11      	ble.n	4119c4 <_dtoa_r+0xb64>
  4119a0:	4621      	mov	r1, r4
  4119a2:	2201      	movs	r2, #1
  4119a4:	4648      	mov	r0, r9
  4119a6:	f001 fbcb 	bl	413140 <__lshift>
  4119aa:	4641      	mov	r1, r8
  4119ac:	4604      	mov	r4, r0
  4119ae:	f001 fc1f 	bl	4131f0 <__mcmp>
  4119b2:	2800      	cmp	r0, #0
  4119b4:	f340 8149 	ble.w	411c4a <_dtoa_r+0xdea>
  4119b8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  4119bc:	f000 8106 	beq.w	411bcc <_dtoa_r+0xd6c>
  4119c0:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  4119c4:	46b3      	mov	fp, r6
  4119c6:	f887 a000 	strb.w	sl, [r7]
  4119ca:	1c7d      	adds	r5, r7, #1
  4119cc:	9e05      	ldr	r6, [sp, #20]
  4119ce:	9408      	str	r4, [sp, #32]
  4119d0:	e502      	b.n	4113d8 <_dtoa_r+0x578>
  4119d2:	d104      	bne.n	4119de <_dtoa_r+0xb7e>
  4119d4:	f01a 0f01 	tst.w	sl, #1
  4119d8:	d001      	beq.n	4119de <_dtoa_r+0xb7e>
  4119da:	e4ed      	b.n	4113b8 <_dtoa_r+0x558>
  4119dc:	4615      	mov	r5, r2
  4119de:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  4119e2:	2b30      	cmp	r3, #48	; 0x30
  4119e4:	f105 32ff 	add.w	r2, r5, #4294967295
  4119e8:	d0f8      	beq.n	4119dc <_dtoa_r+0xb7c>
  4119ea:	e4f5      	b.n	4113d8 <_dtoa_r+0x578>
  4119ec:	9b04      	ldr	r3, [sp, #16]
  4119ee:	425c      	negs	r4, r3
  4119f0:	2c00      	cmp	r4, #0
  4119f2:	f000 80bf 	beq.w	411b74 <_dtoa_r+0xd14>
  4119f6:	4b8a      	ldr	r3, [pc, #552]	; (411c20 <_dtoa_r+0xdc0>)
  4119f8:	f004 020f 	and.w	r2, r4, #15
  4119fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  411a00:	e9d3 2300 	ldrd	r2, r3, [r3]
  411a04:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  411a08:	f002 fbaa 	bl	414160 <__aeabi_dmul>
  411a0c:	1124      	asrs	r4, r4, #4
  411a0e:	4606      	mov	r6, r0
  411a10:	460f      	mov	r7, r1
  411a12:	f000 812a 	beq.w	411c6a <_dtoa_r+0xe0a>
  411a16:	4d83      	ldr	r5, [pc, #524]	; (411c24 <_dtoa_r+0xdc4>)
  411a18:	f04f 0802 	mov.w	r8, #2
  411a1c:	07e2      	lsls	r2, r4, #31
  411a1e:	d509      	bpl.n	411a34 <_dtoa_r+0xbd4>
  411a20:	4630      	mov	r0, r6
  411a22:	4639      	mov	r1, r7
  411a24:	e9d5 2300 	ldrd	r2, r3, [r5]
  411a28:	f002 fb9a 	bl	414160 <__aeabi_dmul>
  411a2c:	f108 0801 	add.w	r8, r8, #1
  411a30:	4606      	mov	r6, r0
  411a32:	460f      	mov	r7, r1
  411a34:	1064      	asrs	r4, r4, #1
  411a36:	f105 0508 	add.w	r5, r5, #8
  411a3a:	d1ef      	bne.n	411a1c <_dtoa_r+0xbbc>
  411a3c:	e576      	b.n	41152c <_dtoa_r+0x6cc>
  411a3e:	9907      	ldr	r1, [sp, #28]
  411a40:	2230      	movs	r2, #48	; 0x30
  411a42:	700a      	strb	r2, [r1, #0]
  411a44:	9a04      	ldr	r2, [sp, #16]
  411a46:	f815 4c01 	ldrb.w	r4, [r5, #-1]
  411a4a:	3201      	adds	r2, #1
  411a4c:	9204      	str	r2, [sp, #16]
  411a4e:	f7ff bbd0 	b.w	4111f2 <_dtoa_r+0x392>
  411a52:	6871      	ldr	r1, [r6, #4]
  411a54:	4648      	mov	r0, r9
  411a56:	f001 f9c3 	bl	412de0 <_Balloc>
  411a5a:	6933      	ldr	r3, [r6, #16]
  411a5c:	1c9a      	adds	r2, r3, #2
  411a5e:	4605      	mov	r5, r0
  411a60:	0092      	lsls	r2, r2, #2
  411a62:	f106 010c 	add.w	r1, r6, #12
  411a66:	300c      	adds	r0, #12
  411a68:	f7fb fef6 	bl	40d858 <memcpy>
  411a6c:	4629      	mov	r1, r5
  411a6e:	2201      	movs	r2, #1
  411a70:	4648      	mov	r0, r9
  411a72:	f001 fb65 	bl	413140 <__lshift>
  411a76:	9005      	str	r0, [sp, #20]
  411a78:	e670      	b.n	41175c <_dtoa_r+0x8fc>
  411a7a:	2b39      	cmp	r3, #57	; 0x39
  411a7c:	f8cd b014 	str.w	fp, [sp, #20]
  411a80:	46d0      	mov	r8, sl
  411a82:	f000 80a3 	beq.w	411bcc <_dtoa_r+0xd6c>
  411a86:	f103 0a01 	add.w	sl, r3, #1
  411a8a:	46b3      	mov	fp, r6
  411a8c:	f887 a000 	strb.w	sl, [r7]
  411a90:	1c7d      	adds	r5, r7, #1
  411a92:	9e05      	ldr	r6, [sp, #20]
  411a94:	9408      	str	r4, [sp, #32]
  411a96:	e49f      	b.n	4113d8 <_dtoa_r+0x578>
  411a98:	465a      	mov	r2, fp
  411a9a:	46d0      	mov	r8, sl
  411a9c:	46b3      	mov	fp, r6
  411a9e:	469a      	mov	sl, r3
  411aa0:	4616      	mov	r6, r2
  411aa2:	e47d      	b.n	4113a0 <_dtoa_r+0x540>
  411aa4:	495e      	ldr	r1, [pc, #376]	; (411c20 <_dtoa_r+0xdc0>)
  411aa6:	f108 3aff 	add.w	sl, r8, #4294967295
  411aaa:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
  411aae:	4622      	mov	r2, r4
  411ab0:	462b      	mov	r3, r5
  411ab2:	e9d1 0100 	ldrd	r0, r1, [r1]
  411ab6:	f002 fb53 	bl	414160 <__aeabi_dmul>
  411aba:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  411abe:	4639      	mov	r1, r7
  411ac0:	4630      	mov	r0, r6
  411ac2:	f002 fdfd 	bl	4146c0 <__aeabi_d2iz>
  411ac6:	4604      	mov	r4, r0
  411ac8:	f002 fae4 	bl	414094 <__aeabi_i2d>
  411acc:	4602      	mov	r2, r0
  411ace:	460b      	mov	r3, r1
  411ad0:	4630      	mov	r0, r6
  411ad2:	4639      	mov	r1, r7
  411ad4:	f002 f990 	bl	413df8 <__aeabi_dsub>
  411ad8:	9a07      	ldr	r2, [sp, #28]
  411ada:	3430      	adds	r4, #48	; 0x30
  411adc:	f1b8 0f01 	cmp.w	r8, #1
  411ae0:	4606      	mov	r6, r0
  411ae2:	460f      	mov	r7, r1
  411ae4:	7014      	strb	r4, [r2, #0]
  411ae6:	f102 0501 	add.w	r5, r2, #1
  411aea:	d01e      	beq.n	411b2a <_dtoa_r+0xcca>
  411aec:	9b07      	ldr	r3, [sp, #28]
  411aee:	eb03 0b08 	add.w	fp, r3, r8
  411af2:	46a8      	mov	r8, r5
  411af4:	2200      	movs	r2, #0
  411af6:	4b4c      	ldr	r3, [pc, #304]	; (411c28 <_dtoa_r+0xdc8>)
  411af8:	4630      	mov	r0, r6
  411afa:	4639      	mov	r1, r7
  411afc:	f002 fb30 	bl	414160 <__aeabi_dmul>
  411b00:	460f      	mov	r7, r1
  411b02:	4606      	mov	r6, r0
  411b04:	f002 fddc 	bl	4146c0 <__aeabi_d2iz>
  411b08:	4604      	mov	r4, r0
  411b0a:	f002 fac3 	bl	414094 <__aeabi_i2d>
  411b0e:	3430      	adds	r4, #48	; 0x30
  411b10:	4602      	mov	r2, r0
  411b12:	460b      	mov	r3, r1
  411b14:	4630      	mov	r0, r6
  411b16:	4639      	mov	r1, r7
  411b18:	f002 f96e 	bl	413df8 <__aeabi_dsub>
  411b1c:	f808 4b01 	strb.w	r4, [r8], #1
  411b20:	45c3      	cmp	fp, r8
  411b22:	4606      	mov	r6, r0
  411b24:	460f      	mov	r7, r1
  411b26:	d1e5      	bne.n	411af4 <_dtoa_r+0xc94>
  411b28:	4455      	add	r5, sl
  411b2a:	2200      	movs	r2, #0
  411b2c:	4b3f      	ldr	r3, [pc, #252]	; (411c2c <_dtoa_r+0xdcc>)
  411b2e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  411b32:	f002 f963 	bl	413dfc <__adddf3>
  411b36:	4632      	mov	r2, r6
  411b38:	463b      	mov	r3, r7
  411b3a:	f002 fd83 	bl	414644 <__aeabi_dcmplt>
  411b3e:	2800      	cmp	r0, #0
  411b40:	d04c      	beq.n	411bdc <_dtoa_r+0xd7c>
  411b42:	9b11      	ldr	r3, [sp, #68]	; 0x44
  411b44:	9304      	str	r3, [sp, #16]
  411b46:	f815 4c01 	ldrb.w	r4, [r5, #-1]
  411b4a:	f7ff bb46 	b.w	4111da <_dtoa_r+0x37a>
  411b4e:	f04f 0800 	mov.w	r8, #0
  411b52:	4646      	mov	r6, r8
  411b54:	e6a8      	b.n	4118a8 <_dtoa_r+0xa48>
  411b56:	9b05      	ldr	r3, [sp, #20]
  411b58:	9a06      	ldr	r2, [sp, #24]
  411b5a:	1a9d      	subs	r5, r3, r2
  411b5c:	2300      	movs	r3, #0
  411b5e:	f7ff bb72 	b.w	411246 <_dtoa_r+0x3e6>
  411b62:	2700      	movs	r7, #0
  411b64:	e6ca      	b.n	4118fc <_dtoa_r+0xa9c>
  411b66:	9b14      	ldr	r3, [sp, #80]	; 0x50
  411b68:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  411b6a:	9d05      	ldr	r5, [sp, #20]
  411b6c:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  411b70:	f7ff bb69 	b.w	411246 <_dtoa_r+0x3e6>
  411b74:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
  411b78:	f04f 0802 	mov.w	r8, #2
  411b7c:	e4d6      	b.n	41152c <_dtoa_r+0x6cc>
  411b7e:	9408      	str	r4, [sp, #32]
  411b80:	e5a0      	b.n	4116c4 <_dtoa_r+0x864>
  411b82:	9b06      	ldr	r3, [sp, #24]
  411b84:	2b00      	cmp	r3, #0
  411b86:	f43f aebf 	beq.w	411908 <_dtoa_r+0xaa8>
  411b8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  411b8c:	2b00      	cmp	r3, #0
  411b8e:	f77f aee3 	ble.w	411958 <_dtoa_r+0xaf8>
  411b92:	2200      	movs	r2, #0
  411b94:	4b24      	ldr	r3, [pc, #144]	; (411c28 <_dtoa_r+0xdc8>)
  411b96:	4630      	mov	r0, r6
  411b98:	4639      	mov	r1, r7
  411b9a:	f002 fae1 	bl	414160 <__aeabi_dmul>
  411b9e:	4606      	mov	r6, r0
  411ba0:	460f      	mov	r7, r1
  411ba2:	f108 0001 	add.w	r0, r8, #1
  411ba6:	f002 fa75 	bl	414094 <__aeabi_i2d>
  411baa:	4632      	mov	r2, r6
  411bac:	463b      	mov	r3, r7
  411bae:	f002 fad7 	bl	414160 <__aeabi_dmul>
  411bb2:	2200      	movs	r2, #0
  411bb4:	4b18      	ldr	r3, [pc, #96]	; (411c18 <_dtoa_r+0xdb8>)
  411bb6:	f002 f921 	bl	413dfc <__adddf3>
  411bba:	9a04      	ldr	r2, [sp, #16]
  411bbc:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  411bc0:	3a01      	subs	r2, #1
  411bc2:	4604      	mov	r4, r0
  411bc4:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
  411bc8:	9211      	str	r2, [sp, #68]	; 0x44
  411bca:	e4d0      	b.n	41156e <_dtoa_r+0x70e>
  411bcc:	2239      	movs	r2, #57	; 0x39
  411bce:	46b3      	mov	fp, r6
  411bd0:	9408      	str	r4, [sp, #32]
  411bd2:	9e05      	ldr	r6, [sp, #20]
  411bd4:	703a      	strb	r2, [r7, #0]
  411bd6:	1c7d      	adds	r5, r7, #1
  411bd8:	f7ff bbf0 	b.w	4113bc <_dtoa_r+0x55c>
  411bdc:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
  411be0:	2000      	movs	r0, #0
  411be2:	4912      	ldr	r1, [pc, #72]	; (411c2c <_dtoa_r+0xdcc>)
  411be4:	f002 f908 	bl	413df8 <__aeabi_dsub>
  411be8:	4632      	mov	r2, r6
  411bea:	463b      	mov	r3, r7
  411bec:	f002 fd48 	bl	414680 <__aeabi_dcmpgt>
  411bf0:	b908      	cbnz	r0, 411bf6 <_dtoa_r+0xd96>
  411bf2:	e6b1      	b.n	411958 <_dtoa_r+0xaf8>
  411bf4:	4615      	mov	r5, r2
  411bf6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  411bfa:	2b30      	cmp	r3, #48	; 0x30
  411bfc:	f105 32ff 	add.w	r2, r5, #4294967295
  411c00:	d0f8      	beq.n	411bf4 <_dtoa_r+0xd94>
  411c02:	e530      	b.n	411666 <_dtoa_r+0x806>
  411c04:	9b11      	ldr	r3, [sp, #68]	; 0x44
  411c06:	9304      	str	r3, [sp, #16]
  411c08:	f7ff bae7 	b.w	4111da <_dtoa_r+0x37a>
  411c0c:	f1ba 0f00 	cmp.w	sl, #0
  411c10:	f47f ad7a 	bne.w	411708 <_dtoa_r+0x8a8>
  411c14:	e661      	b.n	4118da <_dtoa_r+0xa7a>
  411c16:	bf00      	nop
  411c18:	401c0000 	.word	0x401c0000
  411c1c:	40140000 	.word	0x40140000
  411c20:	004177b0 	.word	0x004177b0
  411c24:	00417878 	.word	0x00417878
  411c28:	40240000 	.word	0x40240000
  411c2c:	3fe00000 	.word	0x3fe00000
  411c30:	2b39      	cmp	r3, #57	; 0x39
  411c32:	f8cd b014 	str.w	fp, [sp, #20]
  411c36:	46d0      	mov	r8, sl
  411c38:	f8dd b008 	ldr.w	fp, [sp, #8]
  411c3c:	469a      	mov	sl, r3
  411c3e:	d0c5      	beq.n	411bcc <_dtoa_r+0xd6c>
  411c40:	f1bb 0f00 	cmp.w	fp, #0
  411c44:	f73f aebc 	bgt.w	4119c0 <_dtoa_r+0xb60>
  411c48:	e6bc      	b.n	4119c4 <_dtoa_r+0xb64>
  411c4a:	f47f aebb 	bne.w	4119c4 <_dtoa_r+0xb64>
  411c4e:	f01a 0f01 	tst.w	sl, #1
  411c52:	f43f aeb7 	beq.w	4119c4 <_dtoa_r+0xb64>
  411c56:	e6af      	b.n	4119b8 <_dtoa_r+0xb58>
  411c58:	f04f 0800 	mov.w	r8, #0
  411c5c:	4646      	mov	r6, r8
  411c5e:	e531      	b.n	4116c4 <_dtoa_r+0x864>
  411c60:	9b20      	ldr	r3, [sp, #128]	; 0x80
  411c62:	2b02      	cmp	r3, #2
  411c64:	dc21      	bgt.n	411caa <_dtoa_r+0xe4a>
  411c66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  411c68:	e604      	b.n	411874 <_dtoa_r+0xa14>
  411c6a:	f04f 0802 	mov.w	r8, #2
  411c6e:	e45d      	b.n	41152c <_dtoa_r+0x6cc>
  411c70:	9b20      	ldr	r3, [sp, #128]	; 0x80
  411c72:	2b02      	cmp	r3, #2
  411c74:	dc19      	bgt.n	411caa <_dtoa_r+0xe4a>
  411c76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  411c78:	e563      	b.n	411742 <_dtoa_r+0x8e2>
  411c7a:	2400      	movs	r4, #0
  411c7c:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
  411c80:	4621      	mov	r1, r4
  411c82:	4648      	mov	r0, r9
  411c84:	f001 f8ac 	bl	412de0 <_Balloc>
  411c88:	f04f 33ff 	mov.w	r3, #4294967295
  411c8c:	9306      	str	r3, [sp, #24]
  411c8e:	930d      	str	r3, [sp, #52]	; 0x34
  411c90:	2301      	movs	r3, #1
  411c92:	9007      	str	r0, [sp, #28]
  411c94:	9421      	str	r4, [sp, #132]	; 0x84
  411c96:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
  411c9a:	9309      	str	r3, [sp, #36]	; 0x24
  411c9c:	f7ff b9e9 	b.w	411072 <_dtoa_r+0x212>
  411ca0:	f43f ab3d 	beq.w	41131e <_dtoa_r+0x4be>
  411ca4:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  411ca8:	e522      	b.n	4116f0 <_dtoa_r+0x890>
  411caa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  411cac:	9306      	str	r3, [sp, #24]
  411cae:	e5e9      	b.n	411884 <_dtoa_r+0xa24>
  411cb0:	2501      	movs	r5, #1
  411cb2:	f7ff b9a8 	b.w	411006 <_dtoa_r+0x1a6>
  411cb6:	bf00      	nop

00411cb8 <__sflush_r>:
  411cb8:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  411cbc:	b29a      	uxth	r2, r3
  411cbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  411cc2:	460d      	mov	r5, r1
  411cc4:	0711      	lsls	r1, r2, #28
  411cc6:	4680      	mov	r8, r0
  411cc8:	d43c      	bmi.n	411d44 <__sflush_r+0x8c>
  411cca:	686a      	ldr	r2, [r5, #4]
  411ccc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  411cd0:	2a00      	cmp	r2, #0
  411cd2:	81ab      	strh	r3, [r5, #12]
  411cd4:	dd73      	ble.n	411dbe <__sflush_r+0x106>
  411cd6:	6aac      	ldr	r4, [r5, #40]	; 0x28
  411cd8:	2c00      	cmp	r4, #0
  411cda:	d04b      	beq.n	411d74 <__sflush_r+0xbc>
  411cdc:	b29b      	uxth	r3, r3
  411cde:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  411ce2:	2100      	movs	r1, #0
  411ce4:	b292      	uxth	r2, r2
  411ce6:	f8d8 6000 	ldr.w	r6, [r8]
  411cea:	f8c8 1000 	str.w	r1, [r8]
  411cee:	2a00      	cmp	r2, #0
  411cf0:	d069      	beq.n	411dc6 <__sflush_r+0x10e>
  411cf2:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  411cf4:	075f      	lsls	r7, r3, #29
  411cf6:	d505      	bpl.n	411d04 <__sflush_r+0x4c>
  411cf8:	6869      	ldr	r1, [r5, #4]
  411cfa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  411cfc:	1a52      	subs	r2, r2, r1
  411cfe:	b10b      	cbz	r3, 411d04 <__sflush_r+0x4c>
  411d00:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  411d02:	1ad2      	subs	r2, r2, r3
  411d04:	2300      	movs	r3, #0
  411d06:	69e9      	ldr	r1, [r5, #28]
  411d08:	4640      	mov	r0, r8
  411d0a:	47a0      	blx	r4
  411d0c:	1c44      	adds	r4, r0, #1
  411d0e:	d03c      	beq.n	411d8a <__sflush_r+0xd2>
  411d10:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  411d14:	692a      	ldr	r2, [r5, #16]
  411d16:	602a      	str	r2, [r5, #0]
  411d18:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  411d1c:	2200      	movs	r2, #0
  411d1e:	81ab      	strh	r3, [r5, #12]
  411d20:	04db      	lsls	r3, r3, #19
  411d22:	606a      	str	r2, [r5, #4]
  411d24:	d449      	bmi.n	411dba <__sflush_r+0x102>
  411d26:	6b29      	ldr	r1, [r5, #48]	; 0x30
  411d28:	f8c8 6000 	str.w	r6, [r8]
  411d2c:	b311      	cbz	r1, 411d74 <__sflush_r+0xbc>
  411d2e:	f105 0340 	add.w	r3, r5, #64	; 0x40
  411d32:	4299      	cmp	r1, r3
  411d34:	d002      	beq.n	411d3c <__sflush_r+0x84>
  411d36:	4640      	mov	r0, r8
  411d38:	f000 f9c0 	bl	4120bc <_free_r>
  411d3c:	2000      	movs	r0, #0
  411d3e:	6328      	str	r0, [r5, #48]	; 0x30
  411d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  411d44:	692e      	ldr	r6, [r5, #16]
  411d46:	b1ae      	cbz	r6, 411d74 <__sflush_r+0xbc>
  411d48:	682c      	ldr	r4, [r5, #0]
  411d4a:	602e      	str	r6, [r5, #0]
  411d4c:	0790      	lsls	r0, r2, #30
  411d4e:	bf0c      	ite	eq
  411d50:	696b      	ldreq	r3, [r5, #20]
  411d52:	2300      	movne	r3, #0
  411d54:	1ba4      	subs	r4, r4, r6
  411d56:	60ab      	str	r3, [r5, #8]
  411d58:	e00a      	b.n	411d70 <__sflush_r+0xb8>
  411d5a:	4623      	mov	r3, r4
  411d5c:	4632      	mov	r2, r6
  411d5e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  411d60:	69e9      	ldr	r1, [r5, #28]
  411d62:	4640      	mov	r0, r8
  411d64:	47b8      	blx	r7
  411d66:	2800      	cmp	r0, #0
  411d68:	eba4 0400 	sub.w	r4, r4, r0
  411d6c:	4406      	add	r6, r0
  411d6e:	dd04      	ble.n	411d7a <__sflush_r+0xc2>
  411d70:	2c00      	cmp	r4, #0
  411d72:	dcf2      	bgt.n	411d5a <__sflush_r+0xa2>
  411d74:	2000      	movs	r0, #0
  411d76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  411d7a:	89ab      	ldrh	r3, [r5, #12]
  411d7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  411d80:	81ab      	strh	r3, [r5, #12]
  411d82:	f04f 30ff 	mov.w	r0, #4294967295
  411d86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  411d8a:	f8d8 2000 	ldr.w	r2, [r8]
  411d8e:	2a1d      	cmp	r2, #29
  411d90:	d8f3      	bhi.n	411d7a <__sflush_r+0xc2>
  411d92:	4b1a      	ldr	r3, [pc, #104]	; (411dfc <__sflush_r+0x144>)
  411d94:	40d3      	lsrs	r3, r2
  411d96:	f003 0301 	and.w	r3, r3, #1
  411d9a:	f083 0401 	eor.w	r4, r3, #1
  411d9e:	2b00      	cmp	r3, #0
  411da0:	d0eb      	beq.n	411d7a <__sflush_r+0xc2>
  411da2:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  411da6:	6929      	ldr	r1, [r5, #16]
  411da8:	6029      	str	r1, [r5, #0]
  411daa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  411dae:	04d9      	lsls	r1, r3, #19
  411db0:	606c      	str	r4, [r5, #4]
  411db2:	81ab      	strh	r3, [r5, #12]
  411db4:	d5b7      	bpl.n	411d26 <__sflush_r+0x6e>
  411db6:	2a00      	cmp	r2, #0
  411db8:	d1b5      	bne.n	411d26 <__sflush_r+0x6e>
  411dba:	6528      	str	r0, [r5, #80]	; 0x50
  411dbc:	e7b3      	b.n	411d26 <__sflush_r+0x6e>
  411dbe:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  411dc0:	2a00      	cmp	r2, #0
  411dc2:	dc88      	bgt.n	411cd6 <__sflush_r+0x1e>
  411dc4:	e7d6      	b.n	411d74 <__sflush_r+0xbc>
  411dc6:	2301      	movs	r3, #1
  411dc8:	69e9      	ldr	r1, [r5, #28]
  411dca:	4640      	mov	r0, r8
  411dcc:	47a0      	blx	r4
  411dce:	1c43      	adds	r3, r0, #1
  411dd0:	4602      	mov	r2, r0
  411dd2:	d002      	beq.n	411dda <__sflush_r+0x122>
  411dd4:	89ab      	ldrh	r3, [r5, #12]
  411dd6:	6aac      	ldr	r4, [r5, #40]	; 0x28
  411dd8:	e78c      	b.n	411cf4 <__sflush_r+0x3c>
  411dda:	f8d8 3000 	ldr.w	r3, [r8]
  411dde:	2b00      	cmp	r3, #0
  411de0:	d0f8      	beq.n	411dd4 <__sflush_r+0x11c>
  411de2:	2b1d      	cmp	r3, #29
  411de4:	d001      	beq.n	411dea <__sflush_r+0x132>
  411de6:	2b16      	cmp	r3, #22
  411de8:	d102      	bne.n	411df0 <__sflush_r+0x138>
  411dea:	f8c8 6000 	str.w	r6, [r8]
  411dee:	e7c1      	b.n	411d74 <__sflush_r+0xbc>
  411df0:	89ab      	ldrh	r3, [r5, #12]
  411df2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  411df6:	81ab      	strh	r3, [r5, #12]
  411df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  411dfc:	20400001 	.word	0x20400001

00411e00 <_fflush_r>:
  411e00:	b510      	push	{r4, lr}
  411e02:	4604      	mov	r4, r0
  411e04:	b082      	sub	sp, #8
  411e06:	b108      	cbz	r0, 411e0c <_fflush_r+0xc>
  411e08:	6b83      	ldr	r3, [r0, #56]	; 0x38
  411e0a:	b153      	cbz	r3, 411e22 <_fflush_r+0x22>
  411e0c:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  411e10:	b908      	cbnz	r0, 411e16 <_fflush_r+0x16>
  411e12:	b002      	add	sp, #8
  411e14:	bd10      	pop	{r4, pc}
  411e16:	4620      	mov	r0, r4
  411e18:	b002      	add	sp, #8
  411e1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  411e1e:	f7ff bf4b 	b.w	411cb8 <__sflush_r>
  411e22:	9101      	str	r1, [sp, #4]
  411e24:	f000 f880 	bl	411f28 <__sinit>
  411e28:	9901      	ldr	r1, [sp, #4]
  411e2a:	e7ef      	b.n	411e0c <_fflush_r+0xc>

00411e2c <_cleanup_r>:
  411e2c:	4901      	ldr	r1, [pc, #4]	; (411e34 <_cleanup_r+0x8>)
  411e2e:	f000 bbaf 	b.w	412590 <_fwalk_reent>
  411e32:	bf00      	nop
  411e34:	00413cc9 	.word	0x00413cc9

00411e38 <__sinit.part.1>:
  411e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  411e3c:	4b35      	ldr	r3, [pc, #212]	; (411f14 <__sinit.part.1+0xdc>)
  411e3e:	6845      	ldr	r5, [r0, #4]
  411e40:	63c3      	str	r3, [r0, #60]	; 0x3c
  411e42:	2400      	movs	r4, #0
  411e44:	4607      	mov	r7, r0
  411e46:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
  411e4a:	2304      	movs	r3, #4
  411e4c:	2103      	movs	r1, #3
  411e4e:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
  411e52:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
  411e56:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
  411e5a:	b083      	sub	sp, #12
  411e5c:	602c      	str	r4, [r5, #0]
  411e5e:	606c      	str	r4, [r5, #4]
  411e60:	60ac      	str	r4, [r5, #8]
  411e62:	666c      	str	r4, [r5, #100]	; 0x64
  411e64:	81ec      	strh	r4, [r5, #14]
  411e66:	612c      	str	r4, [r5, #16]
  411e68:	616c      	str	r4, [r5, #20]
  411e6a:	61ac      	str	r4, [r5, #24]
  411e6c:	81ab      	strh	r3, [r5, #12]
  411e6e:	4621      	mov	r1, r4
  411e70:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  411e74:	2208      	movs	r2, #8
  411e76:	f7fb fd89 	bl	40d98c <memset>
  411e7a:	68be      	ldr	r6, [r7, #8]
  411e7c:	f8df b098 	ldr.w	fp, [pc, #152]	; 411f18 <__sinit.part.1+0xe0>
  411e80:	f8df a098 	ldr.w	sl, [pc, #152]	; 411f1c <__sinit.part.1+0xe4>
  411e84:	f8df 9098 	ldr.w	r9, [pc, #152]	; 411f20 <__sinit.part.1+0xe8>
  411e88:	f8df 8098 	ldr.w	r8, [pc, #152]	; 411f24 <__sinit.part.1+0xec>
  411e8c:	f8c5 b020 	str.w	fp, [r5, #32]
  411e90:	2301      	movs	r3, #1
  411e92:	2209      	movs	r2, #9
  411e94:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  411e98:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  411e9c:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  411ea0:	61ed      	str	r5, [r5, #28]
  411ea2:	4621      	mov	r1, r4
  411ea4:	81f3      	strh	r3, [r6, #14]
  411ea6:	81b2      	strh	r2, [r6, #12]
  411ea8:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  411eac:	6034      	str	r4, [r6, #0]
  411eae:	6074      	str	r4, [r6, #4]
  411eb0:	60b4      	str	r4, [r6, #8]
  411eb2:	6674      	str	r4, [r6, #100]	; 0x64
  411eb4:	6134      	str	r4, [r6, #16]
  411eb6:	6174      	str	r4, [r6, #20]
  411eb8:	61b4      	str	r4, [r6, #24]
  411eba:	2208      	movs	r2, #8
  411ebc:	9301      	str	r3, [sp, #4]
  411ebe:	f7fb fd65 	bl	40d98c <memset>
  411ec2:	68fd      	ldr	r5, [r7, #12]
  411ec4:	61f6      	str	r6, [r6, #28]
  411ec6:	2012      	movs	r0, #18
  411ec8:	2202      	movs	r2, #2
  411eca:	f8c6 b020 	str.w	fp, [r6, #32]
  411ece:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
  411ed2:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
  411ed6:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
  411eda:	4621      	mov	r1, r4
  411edc:	81a8      	strh	r0, [r5, #12]
  411ede:	81ea      	strh	r2, [r5, #14]
  411ee0:	602c      	str	r4, [r5, #0]
  411ee2:	606c      	str	r4, [r5, #4]
  411ee4:	60ac      	str	r4, [r5, #8]
  411ee6:	666c      	str	r4, [r5, #100]	; 0x64
  411ee8:	612c      	str	r4, [r5, #16]
  411eea:	616c      	str	r4, [r5, #20]
  411eec:	61ac      	str	r4, [r5, #24]
  411eee:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  411ef2:	2208      	movs	r2, #8
  411ef4:	f7fb fd4a 	bl	40d98c <memset>
  411ef8:	9b01      	ldr	r3, [sp, #4]
  411efa:	61ed      	str	r5, [r5, #28]
  411efc:	f8c5 b020 	str.w	fp, [r5, #32]
  411f00:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  411f04:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  411f08:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  411f0c:	63bb      	str	r3, [r7, #56]	; 0x38
  411f0e:	b003      	add	sp, #12
  411f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  411f14:	00411e2d 	.word	0x00411e2d
  411f18:	00413801 	.word	0x00413801
  411f1c:	00413825 	.word	0x00413825
  411f20:	00413861 	.word	0x00413861
  411f24:	00413881 	.word	0x00413881

00411f28 <__sinit>:
  411f28:	6b83      	ldr	r3, [r0, #56]	; 0x38
  411f2a:	b103      	cbz	r3, 411f2e <__sinit+0x6>
  411f2c:	4770      	bx	lr
  411f2e:	f7ff bf83 	b.w	411e38 <__sinit.part.1>
  411f32:	bf00      	nop

00411f34 <__sfp_lock_acquire>:
  411f34:	4770      	bx	lr
  411f36:	bf00      	nop

00411f38 <__sfp_lock_release>:
  411f38:	4770      	bx	lr
  411f3a:	bf00      	nop

00411f3c <__libc_fini_array>:
  411f3c:	b538      	push	{r3, r4, r5, lr}
  411f3e:	4d07      	ldr	r5, [pc, #28]	; (411f5c <__libc_fini_array+0x20>)
  411f40:	4c07      	ldr	r4, [pc, #28]	; (411f60 <__libc_fini_array+0x24>)
  411f42:	1b2c      	subs	r4, r5, r4
  411f44:	10a4      	asrs	r4, r4, #2
  411f46:	d005      	beq.n	411f54 <__libc_fini_array+0x18>
  411f48:	3c01      	subs	r4, #1
  411f4a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  411f4e:	4798      	blx	r3
  411f50:	2c00      	cmp	r4, #0
  411f52:	d1f9      	bne.n	411f48 <__libc_fini_array+0xc>
  411f54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  411f58:	f005 bcb2 	b.w	4178c0 <_fini>
  411f5c:	004178d0 	.word	0x004178d0
  411f60:	004178cc 	.word	0x004178cc

00411f64 <__fputwc>:
  411f64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  411f68:	b082      	sub	sp, #8
  411f6a:	4680      	mov	r8, r0
  411f6c:	4689      	mov	r9, r1
  411f6e:	4614      	mov	r4, r2
  411f70:	f000 fb3c 	bl	4125ec <__locale_mb_cur_max>
  411f74:	2801      	cmp	r0, #1
  411f76:	d033      	beq.n	411fe0 <__fputwc+0x7c>
  411f78:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  411f7c:	464a      	mov	r2, r9
  411f7e:	a901      	add	r1, sp, #4
  411f80:	4640      	mov	r0, r8
  411f82:	f001 fdbf 	bl	413b04 <_wcrtomb_r>
  411f86:	f1b0 3fff 	cmp.w	r0, #4294967295
  411f8a:	4682      	mov	sl, r0
  411f8c:	d021      	beq.n	411fd2 <__fputwc+0x6e>
  411f8e:	b388      	cbz	r0, 411ff4 <__fputwc+0x90>
  411f90:	f89d 6004 	ldrb.w	r6, [sp, #4]
  411f94:	2500      	movs	r5, #0
  411f96:	e008      	b.n	411faa <__fputwc+0x46>
  411f98:	6823      	ldr	r3, [r4, #0]
  411f9a:	1c5a      	adds	r2, r3, #1
  411f9c:	6022      	str	r2, [r4, #0]
  411f9e:	701e      	strb	r6, [r3, #0]
  411fa0:	3501      	adds	r5, #1
  411fa2:	4555      	cmp	r5, sl
  411fa4:	d226      	bcs.n	411ff4 <__fputwc+0x90>
  411fa6:	ab01      	add	r3, sp, #4
  411fa8:	5d5e      	ldrb	r6, [r3, r5]
  411faa:	68a3      	ldr	r3, [r4, #8]
  411fac:	3b01      	subs	r3, #1
  411fae:	2b00      	cmp	r3, #0
  411fb0:	60a3      	str	r3, [r4, #8]
  411fb2:	daf1      	bge.n	411f98 <__fputwc+0x34>
  411fb4:	69a7      	ldr	r7, [r4, #24]
  411fb6:	42bb      	cmp	r3, r7
  411fb8:	4631      	mov	r1, r6
  411fba:	4622      	mov	r2, r4
  411fbc:	4640      	mov	r0, r8
  411fbe:	db01      	blt.n	411fc4 <__fputwc+0x60>
  411fc0:	2e0a      	cmp	r6, #10
  411fc2:	d1e9      	bne.n	411f98 <__fputwc+0x34>
  411fc4:	f001 fd48 	bl	413a58 <__swbuf_r>
  411fc8:	1c43      	adds	r3, r0, #1
  411fca:	d1e9      	bne.n	411fa0 <__fputwc+0x3c>
  411fcc:	b002      	add	sp, #8
  411fce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  411fd2:	89a3      	ldrh	r3, [r4, #12]
  411fd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  411fd8:	81a3      	strh	r3, [r4, #12]
  411fda:	b002      	add	sp, #8
  411fdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  411fe0:	f109 33ff 	add.w	r3, r9, #4294967295
  411fe4:	2bfe      	cmp	r3, #254	; 0xfe
  411fe6:	d8c7      	bhi.n	411f78 <__fputwc+0x14>
  411fe8:	fa5f f689 	uxtb.w	r6, r9
  411fec:	4682      	mov	sl, r0
  411fee:	f88d 6004 	strb.w	r6, [sp, #4]
  411ff2:	e7cf      	b.n	411f94 <__fputwc+0x30>
  411ff4:	4648      	mov	r0, r9
  411ff6:	b002      	add	sp, #8
  411ff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00411ffc <_fputwc_r>:
  411ffc:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  412000:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  412004:	d10a      	bne.n	41201c <_fputwc_r+0x20>
  412006:	b410      	push	{r4}
  412008:	6e54      	ldr	r4, [r2, #100]	; 0x64
  41200a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  41200e:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  412012:	6654      	str	r4, [r2, #100]	; 0x64
  412014:	8193      	strh	r3, [r2, #12]
  412016:	bc10      	pop	{r4}
  412018:	f7ff bfa4 	b.w	411f64 <__fputwc>
  41201c:	f7ff bfa2 	b.w	411f64 <__fputwc>

00412020 <_malloc_trim_r>:
  412020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  412022:	4f23      	ldr	r7, [pc, #140]	; (4120b0 <_malloc_trim_r+0x90>)
  412024:	460c      	mov	r4, r1
  412026:	4606      	mov	r6, r0
  412028:	f000 fed6 	bl	412dd8 <__malloc_lock>
  41202c:	68bb      	ldr	r3, [r7, #8]
  41202e:	685d      	ldr	r5, [r3, #4]
  412030:	f025 0503 	bic.w	r5, r5, #3
  412034:	1b29      	subs	r1, r5, r4
  412036:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
  41203a:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  41203e:	f021 010f 	bic.w	r1, r1, #15
  412042:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  412046:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  41204a:	db07      	blt.n	41205c <_malloc_trim_r+0x3c>
  41204c:	2100      	movs	r1, #0
  41204e:	4630      	mov	r0, r6
  412050:	f001 fbc4 	bl	4137dc <_sbrk_r>
  412054:	68bb      	ldr	r3, [r7, #8]
  412056:	442b      	add	r3, r5
  412058:	4298      	cmp	r0, r3
  41205a:	d004      	beq.n	412066 <_malloc_trim_r+0x46>
  41205c:	4630      	mov	r0, r6
  41205e:	f000 febd 	bl	412ddc <__malloc_unlock>
  412062:	2000      	movs	r0, #0
  412064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  412066:	4261      	negs	r1, r4
  412068:	4630      	mov	r0, r6
  41206a:	f001 fbb7 	bl	4137dc <_sbrk_r>
  41206e:	3001      	adds	r0, #1
  412070:	d00d      	beq.n	41208e <_malloc_trim_r+0x6e>
  412072:	4b10      	ldr	r3, [pc, #64]	; (4120b4 <_malloc_trim_r+0x94>)
  412074:	68ba      	ldr	r2, [r7, #8]
  412076:	6819      	ldr	r1, [r3, #0]
  412078:	1b2d      	subs	r5, r5, r4
  41207a:	f045 0501 	orr.w	r5, r5, #1
  41207e:	4630      	mov	r0, r6
  412080:	1b09      	subs	r1, r1, r4
  412082:	6055      	str	r5, [r2, #4]
  412084:	6019      	str	r1, [r3, #0]
  412086:	f000 fea9 	bl	412ddc <__malloc_unlock>
  41208a:	2001      	movs	r0, #1
  41208c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  41208e:	2100      	movs	r1, #0
  412090:	4630      	mov	r0, r6
  412092:	f001 fba3 	bl	4137dc <_sbrk_r>
  412096:	68ba      	ldr	r2, [r7, #8]
  412098:	1a83      	subs	r3, r0, r2
  41209a:	2b0f      	cmp	r3, #15
  41209c:	ddde      	ble.n	41205c <_malloc_trim_r+0x3c>
  41209e:	4c06      	ldr	r4, [pc, #24]	; (4120b8 <_malloc_trim_r+0x98>)
  4120a0:	4904      	ldr	r1, [pc, #16]	; (4120b4 <_malloc_trim_r+0x94>)
  4120a2:	6824      	ldr	r4, [r4, #0]
  4120a4:	f043 0301 	orr.w	r3, r3, #1
  4120a8:	1b00      	subs	r0, r0, r4
  4120aa:	6053      	str	r3, [r2, #4]
  4120ac:	6008      	str	r0, [r1, #0]
  4120ae:	e7d5      	b.n	41205c <_malloc_trim_r+0x3c>
  4120b0:	204005c8 	.word	0x204005c8
  4120b4:	204038e4 	.word	0x204038e4
  4120b8:	204009d4 	.word	0x204009d4

004120bc <_free_r>:
  4120bc:	2900      	cmp	r1, #0
  4120be:	d045      	beq.n	41214c <_free_r+0x90>
  4120c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4120c4:	460d      	mov	r5, r1
  4120c6:	4680      	mov	r8, r0
  4120c8:	f000 fe86 	bl	412dd8 <__malloc_lock>
  4120cc:	f855 7c04 	ldr.w	r7, [r5, #-4]
  4120d0:	496a      	ldr	r1, [pc, #424]	; (41227c <_free_r+0x1c0>)
  4120d2:	f027 0301 	bic.w	r3, r7, #1
  4120d6:	f1a5 0408 	sub.w	r4, r5, #8
  4120da:	18e2      	adds	r2, r4, r3
  4120dc:	688e      	ldr	r6, [r1, #8]
  4120de:	6850      	ldr	r0, [r2, #4]
  4120e0:	42b2      	cmp	r2, r6
  4120e2:	f020 0003 	bic.w	r0, r0, #3
  4120e6:	d062      	beq.n	4121ae <_free_r+0xf2>
  4120e8:	07fe      	lsls	r6, r7, #31
  4120ea:	6050      	str	r0, [r2, #4]
  4120ec:	d40b      	bmi.n	412106 <_free_r+0x4a>
  4120ee:	f855 7c08 	ldr.w	r7, [r5, #-8]
  4120f2:	1be4      	subs	r4, r4, r7
  4120f4:	f101 0e08 	add.w	lr, r1, #8
  4120f8:	68a5      	ldr	r5, [r4, #8]
  4120fa:	4575      	cmp	r5, lr
  4120fc:	443b      	add	r3, r7
  4120fe:	d06f      	beq.n	4121e0 <_free_r+0x124>
  412100:	68e7      	ldr	r7, [r4, #12]
  412102:	60ef      	str	r7, [r5, #12]
  412104:	60bd      	str	r5, [r7, #8]
  412106:	1815      	adds	r5, r2, r0
  412108:	686d      	ldr	r5, [r5, #4]
  41210a:	07ed      	lsls	r5, r5, #31
  41210c:	d542      	bpl.n	412194 <_free_r+0xd8>
  41210e:	f043 0201 	orr.w	r2, r3, #1
  412112:	6062      	str	r2, [r4, #4]
  412114:	50e3      	str	r3, [r4, r3]
  412116:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  41211a:	d218      	bcs.n	41214e <_free_r+0x92>
  41211c:	08db      	lsrs	r3, r3, #3
  41211e:	1c5a      	adds	r2, r3, #1
  412120:	684d      	ldr	r5, [r1, #4]
  412122:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
  412126:	60a7      	str	r7, [r4, #8]
  412128:	2001      	movs	r0, #1
  41212a:	109b      	asrs	r3, r3, #2
  41212c:	fa00 f303 	lsl.w	r3, r0, r3
  412130:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
  412134:	431d      	orrs	r5, r3
  412136:	3808      	subs	r0, #8
  412138:	60e0      	str	r0, [r4, #12]
  41213a:	604d      	str	r5, [r1, #4]
  41213c:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
  412140:	60fc      	str	r4, [r7, #12]
  412142:	4640      	mov	r0, r8
  412144:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  412148:	f000 be48 	b.w	412ddc <__malloc_unlock>
  41214c:	4770      	bx	lr
  41214e:	0a5a      	lsrs	r2, r3, #9
  412150:	2a04      	cmp	r2, #4
  412152:	d853      	bhi.n	4121fc <_free_r+0x140>
  412154:	099a      	lsrs	r2, r3, #6
  412156:	f102 0739 	add.w	r7, r2, #57	; 0x39
  41215a:	007f      	lsls	r7, r7, #1
  41215c:	f102 0538 	add.w	r5, r2, #56	; 0x38
  412160:	eb01 0087 	add.w	r0, r1, r7, lsl #2
  412164:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
  412168:	4944      	ldr	r1, [pc, #272]	; (41227c <_free_r+0x1c0>)
  41216a:	3808      	subs	r0, #8
  41216c:	4290      	cmp	r0, r2
  41216e:	d04d      	beq.n	41220c <_free_r+0x150>
  412170:	6851      	ldr	r1, [r2, #4]
  412172:	f021 0103 	bic.w	r1, r1, #3
  412176:	428b      	cmp	r3, r1
  412178:	d202      	bcs.n	412180 <_free_r+0xc4>
  41217a:	6892      	ldr	r2, [r2, #8]
  41217c:	4290      	cmp	r0, r2
  41217e:	d1f7      	bne.n	412170 <_free_r+0xb4>
  412180:	68d0      	ldr	r0, [r2, #12]
  412182:	60e0      	str	r0, [r4, #12]
  412184:	60a2      	str	r2, [r4, #8]
  412186:	6084      	str	r4, [r0, #8]
  412188:	60d4      	str	r4, [r2, #12]
  41218a:	4640      	mov	r0, r8
  41218c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  412190:	f000 be24 	b.w	412ddc <__malloc_unlock>
  412194:	6895      	ldr	r5, [r2, #8]
  412196:	4f3a      	ldr	r7, [pc, #232]	; (412280 <_free_r+0x1c4>)
  412198:	42bd      	cmp	r5, r7
  41219a:	4403      	add	r3, r0
  41219c:	d03f      	beq.n	41221e <_free_r+0x162>
  41219e:	68d0      	ldr	r0, [r2, #12]
  4121a0:	60e8      	str	r0, [r5, #12]
  4121a2:	f043 0201 	orr.w	r2, r3, #1
  4121a6:	6085      	str	r5, [r0, #8]
  4121a8:	6062      	str	r2, [r4, #4]
  4121aa:	50e3      	str	r3, [r4, r3]
  4121ac:	e7b3      	b.n	412116 <_free_r+0x5a>
  4121ae:	07ff      	lsls	r7, r7, #31
  4121b0:	4403      	add	r3, r0
  4121b2:	d407      	bmi.n	4121c4 <_free_r+0x108>
  4121b4:	f855 2c08 	ldr.w	r2, [r5, #-8]
  4121b8:	1aa4      	subs	r4, r4, r2
  4121ba:	4413      	add	r3, r2
  4121bc:	68a0      	ldr	r0, [r4, #8]
  4121be:	68e2      	ldr	r2, [r4, #12]
  4121c0:	60c2      	str	r2, [r0, #12]
  4121c2:	6090      	str	r0, [r2, #8]
  4121c4:	4a2f      	ldr	r2, [pc, #188]	; (412284 <_free_r+0x1c8>)
  4121c6:	6812      	ldr	r2, [r2, #0]
  4121c8:	f043 0001 	orr.w	r0, r3, #1
  4121cc:	4293      	cmp	r3, r2
  4121ce:	6060      	str	r0, [r4, #4]
  4121d0:	608c      	str	r4, [r1, #8]
  4121d2:	d3b6      	bcc.n	412142 <_free_r+0x86>
  4121d4:	4b2c      	ldr	r3, [pc, #176]	; (412288 <_free_r+0x1cc>)
  4121d6:	4640      	mov	r0, r8
  4121d8:	6819      	ldr	r1, [r3, #0]
  4121da:	f7ff ff21 	bl	412020 <_malloc_trim_r>
  4121de:	e7b0      	b.n	412142 <_free_r+0x86>
  4121e0:	1811      	adds	r1, r2, r0
  4121e2:	6849      	ldr	r1, [r1, #4]
  4121e4:	07c9      	lsls	r1, r1, #31
  4121e6:	d444      	bmi.n	412272 <_free_r+0x1b6>
  4121e8:	6891      	ldr	r1, [r2, #8]
  4121ea:	68d2      	ldr	r2, [r2, #12]
  4121ec:	60ca      	str	r2, [r1, #12]
  4121ee:	4403      	add	r3, r0
  4121f0:	f043 0001 	orr.w	r0, r3, #1
  4121f4:	6091      	str	r1, [r2, #8]
  4121f6:	6060      	str	r0, [r4, #4]
  4121f8:	50e3      	str	r3, [r4, r3]
  4121fa:	e7a2      	b.n	412142 <_free_r+0x86>
  4121fc:	2a14      	cmp	r2, #20
  4121fe:	d817      	bhi.n	412230 <_free_r+0x174>
  412200:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  412204:	007f      	lsls	r7, r7, #1
  412206:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  41220a:	e7a9      	b.n	412160 <_free_r+0xa4>
  41220c:	10aa      	asrs	r2, r5, #2
  41220e:	684b      	ldr	r3, [r1, #4]
  412210:	2501      	movs	r5, #1
  412212:	fa05 f202 	lsl.w	r2, r5, r2
  412216:	4313      	orrs	r3, r2
  412218:	604b      	str	r3, [r1, #4]
  41221a:	4602      	mov	r2, r0
  41221c:	e7b1      	b.n	412182 <_free_r+0xc6>
  41221e:	f043 0201 	orr.w	r2, r3, #1
  412222:	614c      	str	r4, [r1, #20]
  412224:	610c      	str	r4, [r1, #16]
  412226:	60e5      	str	r5, [r4, #12]
  412228:	60a5      	str	r5, [r4, #8]
  41222a:	6062      	str	r2, [r4, #4]
  41222c:	50e3      	str	r3, [r4, r3]
  41222e:	e788      	b.n	412142 <_free_r+0x86>
  412230:	2a54      	cmp	r2, #84	; 0x54
  412232:	d806      	bhi.n	412242 <_free_r+0x186>
  412234:	0b1a      	lsrs	r2, r3, #12
  412236:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  41223a:	007f      	lsls	r7, r7, #1
  41223c:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  412240:	e78e      	b.n	412160 <_free_r+0xa4>
  412242:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  412246:	d806      	bhi.n	412256 <_free_r+0x19a>
  412248:	0bda      	lsrs	r2, r3, #15
  41224a:	f102 0778 	add.w	r7, r2, #120	; 0x78
  41224e:	007f      	lsls	r7, r7, #1
  412250:	f102 0577 	add.w	r5, r2, #119	; 0x77
  412254:	e784      	b.n	412160 <_free_r+0xa4>
  412256:	f240 5054 	movw	r0, #1364	; 0x554
  41225a:	4282      	cmp	r2, r0
  41225c:	d806      	bhi.n	41226c <_free_r+0x1b0>
  41225e:	0c9a      	lsrs	r2, r3, #18
  412260:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  412264:	007f      	lsls	r7, r7, #1
  412266:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  41226a:	e779      	b.n	412160 <_free_r+0xa4>
  41226c:	27fe      	movs	r7, #254	; 0xfe
  41226e:	257e      	movs	r5, #126	; 0x7e
  412270:	e776      	b.n	412160 <_free_r+0xa4>
  412272:	f043 0201 	orr.w	r2, r3, #1
  412276:	6062      	str	r2, [r4, #4]
  412278:	50e3      	str	r3, [r4, r3]
  41227a:	e762      	b.n	412142 <_free_r+0x86>
  41227c:	204005c8 	.word	0x204005c8
  412280:	204005d0 	.word	0x204005d0
  412284:	204009d0 	.word	0x204009d0
  412288:	204038e0 	.word	0x204038e0

0041228c <__sfvwrite_r>:
  41228c:	6893      	ldr	r3, [r2, #8]
  41228e:	2b00      	cmp	r3, #0
  412290:	d076      	beq.n	412380 <__sfvwrite_r+0xf4>
  412292:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  412296:	898b      	ldrh	r3, [r1, #12]
  412298:	b085      	sub	sp, #20
  41229a:	460c      	mov	r4, r1
  41229c:	0719      	lsls	r1, r3, #28
  41229e:	9001      	str	r0, [sp, #4]
  4122a0:	4616      	mov	r6, r2
  4122a2:	d529      	bpl.n	4122f8 <__sfvwrite_r+0x6c>
  4122a4:	6922      	ldr	r2, [r4, #16]
  4122a6:	b33a      	cbz	r2, 4122f8 <__sfvwrite_r+0x6c>
  4122a8:	f003 0802 	and.w	r8, r3, #2
  4122ac:	fa1f f088 	uxth.w	r0, r8
  4122b0:	6835      	ldr	r5, [r6, #0]
  4122b2:	2800      	cmp	r0, #0
  4122b4:	d02f      	beq.n	412316 <__sfvwrite_r+0x8a>
  4122b6:	f04f 0900 	mov.w	r9, #0
  4122ba:	4fb4      	ldr	r7, [pc, #720]	; (41258c <__sfvwrite_r+0x300>)
  4122bc:	46c8      	mov	r8, r9
  4122be:	46b2      	mov	sl, r6
  4122c0:	45b8      	cmp	r8, r7
  4122c2:	4643      	mov	r3, r8
  4122c4:	464a      	mov	r2, r9
  4122c6:	bf28      	it	cs
  4122c8:	463b      	movcs	r3, r7
  4122ca:	9801      	ldr	r0, [sp, #4]
  4122cc:	f1b8 0f00 	cmp.w	r8, #0
  4122d0:	d050      	beq.n	412374 <__sfvwrite_r+0xe8>
  4122d2:	69e1      	ldr	r1, [r4, #28]
  4122d4:	6a66      	ldr	r6, [r4, #36]	; 0x24
  4122d6:	47b0      	blx	r6
  4122d8:	2800      	cmp	r0, #0
  4122da:	dd71      	ble.n	4123c0 <__sfvwrite_r+0x134>
  4122dc:	f8da 3008 	ldr.w	r3, [sl, #8]
  4122e0:	1a1b      	subs	r3, r3, r0
  4122e2:	4481      	add	r9, r0
  4122e4:	ebc0 0808 	rsb	r8, r0, r8
  4122e8:	f8ca 3008 	str.w	r3, [sl, #8]
  4122ec:	2b00      	cmp	r3, #0
  4122ee:	d1e7      	bne.n	4122c0 <__sfvwrite_r+0x34>
  4122f0:	2000      	movs	r0, #0
  4122f2:	b005      	add	sp, #20
  4122f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4122f8:	4621      	mov	r1, r4
  4122fa:	9801      	ldr	r0, [sp, #4]
  4122fc:	f7fe fca8 	bl	410c50 <__swsetup_r>
  412300:	2800      	cmp	r0, #0
  412302:	f040 813a 	bne.w	41257a <__sfvwrite_r+0x2ee>
  412306:	89a3      	ldrh	r3, [r4, #12]
  412308:	6835      	ldr	r5, [r6, #0]
  41230a:	f003 0802 	and.w	r8, r3, #2
  41230e:	fa1f f088 	uxth.w	r0, r8
  412312:	2800      	cmp	r0, #0
  412314:	d1cf      	bne.n	4122b6 <__sfvwrite_r+0x2a>
  412316:	f013 0901 	ands.w	r9, r3, #1
  41231a:	d15b      	bne.n	4123d4 <__sfvwrite_r+0x148>
  41231c:	464f      	mov	r7, r9
  41231e:	9602      	str	r6, [sp, #8]
  412320:	b31f      	cbz	r7, 41236a <__sfvwrite_r+0xde>
  412322:	059a      	lsls	r2, r3, #22
  412324:	f8d4 8008 	ldr.w	r8, [r4, #8]
  412328:	d52c      	bpl.n	412384 <__sfvwrite_r+0xf8>
  41232a:	4547      	cmp	r7, r8
  41232c:	46c2      	mov	sl, r8
  41232e:	f0c0 80a4 	bcc.w	41247a <__sfvwrite_r+0x1ee>
  412332:	f413 6f90 	tst.w	r3, #1152	; 0x480
  412336:	f040 80b1 	bne.w	41249c <__sfvwrite_r+0x210>
  41233a:	6820      	ldr	r0, [r4, #0]
  41233c:	4652      	mov	r2, sl
  41233e:	4649      	mov	r1, r9
  412340:	f000 fce6 	bl	412d10 <memmove>
  412344:	68a0      	ldr	r0, [r4, #8]
  412346:	6823      	ldr	r3, [r4, #0]
  412348:	ebc8 0000 	rsb	r0, r8, r0
  41234c:	4453      	add	r3, sl
  41234e:	60a0      	str	r0, [r4, #8]
  412350:	6023      	str	r3, [r4, #0]
  412352:	4638      	mov	r0, r7
  412354:	9a02      	ldr	r2, [sp, #8]
  412356:	6893      	ldr	r3, [r2, #8]
  412358:	1a1b      	subs	r3, r3, r0
  41235a:	4481      	add	r9, r0
  41235c:	1a3f      	subs	r7, r7, r0
  41235e:	6093      	str	r3, [r2, #8]
  412360:	2b00      	cmp	r3, #0
  412362:	d0c5      	beq.n	4122f0 <__sfvwrite_r+0x64>
  412364:	89a3      	ldrh	r3, [r4, #12]
  412366:	2f00      	cmp	r7, #0
  412368:	d1db      	bne.n	412322 <__sfvwrite_r+0x96>
  41236a:	f8d5 9000 	ldr.w	r9, [r5]
  41236e:	686f      	ldr	r7, [r5, #4]
  412370:	3508      	adds	r5, #8
  412372:	e7d5      	b.n	412320 <__sfvwrite_r+0x94>
  412374:	f8d5 9000 	ldr.w	r9, [r5]
  412378:	f8d5 8004 	ldr.w	r8, [r5, #4]
  41237c:	3508      	adds	r5, #8
  41237e:	e79f      	b.n	4122c0 <__sfvwrite_r+0x34>
  412380:	2000      	movs	r0, #0
  412382:	4770      	bx	lr
  412384:	6820      	ldr	r0, [r4, #0]
  412386:	6923      	ldr	r3, [r4, #16]
  412388:	4298      	cmp	r0, r3
  41238a:	d803      	bhi.n	412394 <__sfvwrite_r+0x108>
  41238c:	6961      	ldr	r1, [r4, #20]
  41238e:	428f      	cmp	r7, r1
  412390:	f080 80b7 	bcs.w	412502 <__sfvwrite_r+0x276>
  412394:	45b8      	cmp	r8, r7
  412396:	bf28      	it	cs
  412398:	46b8      	movcs	r8, r7
  41239a:	4642      	mov	r2, r8
  41239c:	4649      	mov	r1, r9
  41239e:	f000 fcb7 	bl	412d10 <memmove>
  4123a2:	68a3      	ldr	r3, [r4, #8]
  4123a4:	6822      	ldr	r2, [r4, #0]
  4123a6:	ebc8 0303 	rsb	r3, r8, r3
  4123aa:	4442      	add	r2, r8
  4123ac:	60a3      	str	r3, [r4, #8]
  4123ae:	6022      	str	r2, [r4, #0]
  4123b0:	2b00      	cmp	r3, #0
  4123b2:	d149      	bne.n	412448 <__sfvwrite_r+0x1bc>
  4123b4:	4621      	mov	r1, r4
  4123b6:	9801      	ldr	r0, [sp, #4]
  4123b8:	f7ff fd22 	bl	411e00 <_fflush_r>
  4123bc:	2800      	cmp	r0, #0
  4123be:	d043      	beq.n	412448 <__sfvwrite_r+0x1bc>
  4123c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4123c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4123c8:	f04f 30ff 	mov.w	r0, #4294967295
  4123cc:	81a3      	strh	r3, [r4, #12]
  4123ce:	b005      	add	sp, #20
  4123d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4123d4:	4680      	mov	r8, r0
  4123d6:	9002      	str	r0, [sp, #8]
  4123d8:	4682      	mov	sl, r0
  4123da:	4681      	mov	r9, r0
  4123dc:	f1b9 0f00 	cmp.w	r9, #0
  4123e0:	d02a      	beq.n	412438 <__sfvwrite_r+0x1ac>
  4123e2:	9b02      	ldr	r3, [sp, #8]
  4123e4:	2b00      	cmp	r3, #0
  4123e6:	d04c      	beq.n	412482 <__sfvwrite_r+0x1f6>
  4123e8:	6820      	ldr	r0, [r4, #0]
  4123ea:	6923      	ldr	r3, [r4, #16]
  4123ec:	6962      	ldr	r2, [r4, #20]
  4123ee:	45c8      	cmp	r8, r9
  4123f0:	46c3      	mov	fp, r8
  4123f2:	bf28      	it	cs
  4123f4:	46cb      	movcs	fp, r9
  4123f6:	4298      	cmp	r0, r3
  4123f8:	465f      	mov	r7, fp
  4123fa:	d904      	bls.n	412406 <__sfvwrite_r+0x17a>
  4123fc:	68a3      	ldr	r3, [r4, #8]
  4123fe:	4413      	add	r3, r2
  412400:	459b      	cmp	fp, r3
  412402:	f300 8090 	bgt.w	412526 <__sfvwrite_r+0x29a>
  412406:	4593      	cmp	fp, r2
  412408:	db20      	blt.n	41244c <__sfvwrite_r+0x1c0>
  41240a:	4613      	mov	r3, r2
  41240c:	6a67      	ldr	r7, [r4, #36]	; 0x24
  41240e:	69e1      	ldr	r1, [r4, #28]
  412410:	9801      	ldr	r0, [sp, #4]
  412412:	4652      	mov	r2, sl
  412414:	47b8      	blx	r7
  412416:	1e07      	subs	r7, r0, #0
  412418:	ddd2      	ble.n	4123c0 <__sfvwrite_r+0x134>
  41241a:	ebb8 0807 	subs.w	r8, r8, r7
  41241e:	d023      	beq.n	412468 <__sfvwrite_r+0x1dc>
  412420:	68b3      	ldr	r3, [r6, #8]
  412422:	1bdb      	subs	r3, r3, r7
  412424:	44ba      	add	sl, r7
  412426:	ebc7 0909 	rsb	r9, r7, r9
  41242a:	60b3      	str	r3, [r6, #8]
  41242c:	2b00      	cmp	r3, #0
  41242e:	f43f af5f 	beq.w	4122f0 <__sfvwrite_r+0x64>
  412432:	f1b9 0f00 	cmp.w	r9, #0
  412436:	d1d4      	bne.n	4123e2 <__sfvwrite_r+0x156>
  412438:	2300      	movs	r3, #0
  41243a:	f8d5 a000 	ldr.w	sl, [r5]
  41243e:	f8d5 9004 	ldr.w	r9, [r5, #4]
  412442:	9302      	str	r3, [sp, #8]
  412444:	3508      	adds	r5, #8
  412446:	e7c9      	b.n	4123dc <__sfvwrite_r+0x150>
  412448:	4640      	mov	r0, r8
  41244a:	e783      	b.n	412354 <__sfvwrite_r+0xc8>
  41244c:	465a      	mov	r2, fp
  41244e:	4651      	mov	r1, sl
  412450:	f000 fc5e 	bl	412d10 <memmove>
  412454:	68a2      	ldr	r2, [r4, #8]
  412456:	6823      	ldr	r3, [r4, #0]
  412458:	ebcb 0202 	rsb	r2, fp, r2
  41245c:	445b      	add	r3, fp
  41245e:	ebb8 0807 	subs.w	r8, r8, r7
  412462:	60a2      	str	r2, [r4, #8]
  412464:	6023      	str	r3, [r4, #0]
  412466:	d1db      	bne.n	412420 <__sfvwrite_r+0x194>
  412468:	4621      	mov	r1, r4
  41246a:	9801      	ldr	r0, [sp, #4]
  41246c:	f7ff fcc8 	bl	411e00 <_fflush_r>
  412470:	2800      	cmp	r0, #0
  412472:	d1a5      	bne.n	4123c0 <__sfvwrite_r+0x134>
  412474:	f8cd 8008 	str.w	r8, [sp, #8]
  412478:	e7d2      	b.n	412420 <__sfvwrite_r+0x194>
  41247a:	6820      	ldr	r0, [r4, #0]
  41247c:	46b8      	mov	r8, r7
  41247e:	46ba      	mov	sl, r7
  412480:	e75c      	b.n	41233c <__sfvwrite_r+0xb0>
  412482:	464a      	mov	r2, r9
  412484:	210a      	movs	r1, #10
  412486:	4650      	mov	r0, sl
  412488:	f000 fbf2 	bl	412c70 <memchr>
  41248c:	2800      	cmp	r0, #0
  41248e:	d06f      	beq.n	412570 <__sfvwrite_r+0x2e4>
  412490:	3001      	adds	r0, #1
  412492:	2301      	movs	r3, #1
  412494:	ebca 0800 	rsb	r8, sl, r0
  412498:	9302      	str	r3, [sp, #8]
  41249a:	e7a5      	b.n	4123e8 <__sfvwrite_r+0x15c>
  41249c:	6962      	ldr	r2, [r4, #20]
  41249e:	6820      	ldr	r0, [r4, #0]
  4124a0:	6921      	ldr	r1, [r4, #16]
  4124a2:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  4124a6:	ebc1 0a00 	rsb	sl, r1, r0
  4124aa:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  4124ae:	f10a 0001 	add.w	r0, sl, #1
  4124b2:	ea4f 0868 	mov.w	r8, r8, asr #1
  4124b6:	4438      	add	r0, r7
  4124b8:	4540      	cmp	r0, r8
  4124ba:	4642      	mov	r2, r8
  4124bc:	bf84      	itt	hi
  4124be:	4680      	movhi	r8, r0
  4124c0:	4642      	movhi	r2, r8
  4124c2:	055b      	lsls	r3, r3, #21
  4124c4:	d542      	bpl.n	41254c <__sfvwrite_r+0x2c0>
  4124c6:	4611      	mov	r1, r2
  4124c8:	9801      	ldr	r0, [sp, #4]
  4124ca:	f000 f915 	bl	4126f8 <_malloc_r>
  4124ce:	4683      	mov	fp, r0
  4124d0:	2800      	cmp	r0, #0
  4124d2:	d055      	beq.n	412580 <__sfvwrite_r+0x2f4>
  4124d4:	4652      	mov	r2, sl
  4124d6:	6921      	ldr	r1, [r4, #16]
  4124d8:	f7fb f9be 	bl	40d858 <memcpy>
  4124dc:	89a3      	ldrh	r3, [r4, #12]
  4124de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  4124e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4124e6:	81a3      	strh	r3, [r4, #12]
  4124e8:	ebca 0308 	rsb	r3, sl, r8
  4124ec:	eb0b 000a 	add.w	r0, fp, sl
  4124f0:	f8c4 8014 	str.w	r8, [r4, #20]
  4124f4:	f8c4 b010 	str.w	fp, [r4, #16]
  4124f8:	6020      	str	r0, [r4, #0]
  4124fa:	60a3      	str	r3, [r4, #8]
  4124fc:	46b8      	mov	r8, r7
  4124fe:	46ba      	mov	sl, r7
  412500:	e71c      	b.n	41233c <__sfvwrite_r+0xb0>
  412502:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  412506:	42bb      	cmp	r3, r7
  412508:	bf28      	it	cs
  41250a:	463b      	movcs	r3, r7
  41250c:	464a      	mov	r2, r9
  41250e:	fb93 f3f1 	sdiv	r3, r3, r1
  412512:	9801      	ldr	r0, [sp, #4]
  412514:	6a66      	ldr	r6, [r4, #36]	; 0x24
  412516:	fb01 f303 	mul.w	r3, r1, r3
  41251a:	69e1      	ldr	r1, [r4, #28]
  41251c:	47b0      	blx	r6
  41251e:	2800      	cmp	r0, #0
  412520:	f73f af18 	bgt.w	412354 <__sfvwrite_r+0xc8>
  412524:	e74c      	b.n	4123c0 <__sfvwrite_r+0x134>
  412526:	461a      	mov	r2, r3
  412528:	4651      	mov	r1, sl
  41252a:	9303      	str	r3, [sp, #12]
  41252c:	f000 fbf0 	bl	412d10 <memmove>
  412530:	6822      	ldr	r2, [r4, #0]
  412532:	9b03      	ldr	r3, [sp, #12]
  412534:	9801      	ldr	r0, [sp, #4]
  412536:	441a      	add	r2, r3
  412538:	6022      	str	r2, [r4, #0]
  41253a:	4621      	mov	r1, r4
  41253c:	f7ff fc60 	bl	411e00 <_fflush_r>
  412540:	9b03      	ldr	r3, [sp, #12]
  412542:	2800      	cmp	r0, #0
  412544:	f47f af3c 	bne.w	4123c0 <__sfvwrite_r+0x134>
  412548:	461f      	mov	r7, r3
  41254a:	e766      	b.n	41241a <__sfvwrite_r+0x18e>
  41254c:	9801      	ldr	r0, [sp, #4]
  41254e:	f000 ff55 	bl	4133fc <_realloc_r>
  412552:	4683      	mov	fp, r0
  412554:	2800      	cmp	r0, #0
  412556:	d1c7      	bne.n	4124e8 <__sfvwrite_r+0x25c>
  412558:	9d01      	ldr	r5, [sp, #4]
  41255a:	6921      	ldr	r1, [r4, #16]
  41255c:	4628      	mov	r0, r5
  41255e:	f7ff fdad 	bl	4120bc <_free_r>
  412562:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  412566:	220c      	movs	r2, #12
  412568:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  41256c:	602a      	str	r2, [r5, #0]
  41256e:	e729      	b.n	4123c4 <__sfvwrite_r+0x138>
  412570:	2301      	movs	r3, #1
  412572:	f109 0801 	add.w	r8, r9, #1
  412576:	9302      	str	r3, [sp, #8]
  412578:	e736      	b.n	4123e8 <__sfvwrite_r+0x15c>
  41257a:	f04f 30ff 	mov.w	r0, #4294967295
  41257e:	e6b8      	b.n	4122f2 <__sfvwrite_r+0x66>
  412580:	9a01      	ldr	r2, [sp, #4]
  412582:	230c      	movs	r3, #12
  412584:	6013      	str	r3, [r2, #0]
  412586:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  41258a:	e71b      	b.n	4123c4 <__sfvwrite_r+0x138>
  41258c:	7ffffc00 	.word	0x7ffffc00

00412590 <_fwalk_reent>:
  412590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  412594:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  412598:	d01f      	beq.n	4125da <_fwalk_reent+0x4a>
  41259a:	4688      	mov	r8, r1
  41259c:	4606      	mov	r6, r0
  41259e:	f04f 0900 	mov.w	r9, #0
  4125a2:	687d      	ldr	r5, [r7, #4]
  4125a4:	68bc      	ldr	r4, [r7, #8]
  4125a6:	3d01      	subs	r5, #1
  4125a8:	d411      	bmi.n	4125ce <_fwalk_reent+0x3e>
  4125aa:	89a3      	ldrh	r3, [r4, #12]
  4125ac:	2b01      	cmp	r3, #1
  4125ae:	f105 35ff 	add.w	r5, r5, #4294967295
  4125b2:	d908      	bls.n	4125c6 <_fwalk_reent+0x36>
  4125b4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  4125b8:	3301      	adds	r3, #1
  4125ba:	4621      	mov	r1, r4
  4125bc:	4630      	mov	r0, r6
  4125be:	d002      	beq.n	4125c6 <_fwalk_reent+0x36>
  4125c0:	47c0      	blx	r8
  4125c2:	ea49 0900 	orr.w	r9, r9, r0
  4125c6:	1c6b      	adds	r3, r5, #1
  4125c8:	f104 0468 	add.w	r4, r4, #104	; 0x68
  4125cc:	d1ed      	bne.n	4125aa <_fwalk_reent+0x1a>
  4125ce:	683f      	ldr	r7, [r7, #0]
  4125d0:	2f00      	cmp	r7, #0
  4125d2:	d1e6      	bne.n	4125a2 <_fwalk_reent+0x12>
  4125d4:	4648      	mov	r0, r9
  4125d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4125da:	46b9      	mov	r9, r7
  4125dc:	4648      	mov	r0, r9
  4125de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4125e2:	bf00      	nop

004125e4 <__locale_charset>:
  4125e4:	4800      	ldr	r0, [pc, #0]	; (4125e8 <__locale_charset+0x4>)
  4125e6:	4770      	bx	lr
  4125e8:	204005a4 	.word	0x204005a4

004125ec <__locale_mb_cur_max>:
  4125ec:	4b01      	ldr	r3, [pc, #4]	; (4125f4 <__locale_mb_cur_max+0x8>)
  4125ee:	6818      	ldr	r0, [r3, #0]
  4125f0:	4770      	bx	lr
  4125f2:	bf00      	nop
  4125f4:	204005c4 	.word	0x204005c4

004125f8 <_localeconv_r>:
  4125f8:	4800      	ldr	r0, [pc, #0]	; (4125fc <_localeconv_r+0x4>)
  4125fa:	4770      	bx	lr
  4125fc:	2040056c 	.word	0x2040056c

00412600 <__swhatbuf_r>:
  412600:	b570      	push	{r4, r5, r6, lr}
  412602:	460d      	mov	r5, r1
  412604:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  412608:	2900      	cmp	r1, #0
  41260a:	b090      	sub	sp, #64	; 0x40
  41260c:	4614      	mov	r4, r2
  41260e:	461e      	mov	r6, r3
  412610:	db14      	blt.n	41263c <__swhatbuf_r+0x3c>
  412612:	aa01      	add	r2, sp, #4
  412614:	f001 fb9a 	bl	413d4c <_fstat_r>
  412618:	2800      	cmp	r0, #0
  41261a:	db0f      	blt.n	41263c <__swhatbuf_r+0x3c>
  41261c:	9a02      	ldr	r2, [sp, #8]
  41261e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  412622:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  412626:	fab2 f282 	clz	r2, r2
  41262a:	0952      	lsrs	r2, r2, #5
  41262c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  412630:	f44f 6000 	mov.w	r0, #2048	; 0x800
  412634:	6032      	str	r2, [r6, #0]
  412636:	6023      	str	r3, [r4, #0]
  412638:	b010      	add	sp, #64	; 0x40
  41263a:	bd70      	pop	{r4, r5, r6, pc}
  41263c:	89a8      	ldrh	r0, [r5, #12]
  41263e:	f000 0080 	and.w	r0, r0, #128	; 0x80
  412642:	b282      	uxth	r2, r0
  412644:	2000      	movs	r0, #0
  412646:	6030      	str	r0, [r6, #0]
  412648:	b11a      	cbz	r2, 412652 <__swhatbuf_r+0x52>
  41264a:	2340      	movs	r3, #64	; 0x40
  41264c:	6023      	str	r3, [r4, #0]
  41264e:	b010      	add	sp, #64	; 0x40
  412650:	bd70      	pop	{r4, r5, r6, pc}
  412652:	f44f 6380 	mov.w	r3, #1024	; 0x400
  412656:	4610      	mov	r0, r2
  412658:	6023      	str	r3, [r4, #0]
  41265a:	b010      	add	sp, #64	; 0x40
  41265c:	bd70      	pop	{r4, r5, r6, pc}
  41265e:	bf00      	nop

00412660 <__smakebuf_r>:
  412660:	898a      	ldrh	r2, [r1, #12]
  412662:	0792      	lsls	r2, r2, #30
  412664:	460b      	mov	r3, r1
  412666:	d506      	bpl.n	412676 <__smakebuf_r+0x16>
  412668:	f101 0243 	add.w	r2, r1, #67	; 0x43
  41266c:	2101      	movs	r1, #1
  41266e:	601a      	str	r2, [r3, #0]
  412670:	611a      	str	r2, [r3, #16]
  412672:	6159      	str	r1, [r3, #20]
  412674:	4770      	bx	lr
  412676:	b5f0      	push	{r4, r5, r6, r7, lr}
  412678:	b083      	sub	sp, #12
  41267a:	ab01      	add	r3, sp, #4
  41267c:	466a      	mov	r2, sp
  41267e:	460c      	mov	r4, r1
  412680:	4605      	mov	r5, r0
  412682:	f7ff ffbd 	bl	412600 <__swhatbuf_r>
  412686:	9900      	ldr	r1, [sp, #0]
  412688:	4606      	mov	r6, r0
  41268a:	4628      	mov	r0, r5
  41268c:	f000 f834 	bl	4126f8 <_malloc_r>
  412690:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  412694:	b1d0      	cbz	r0, 4126cc <__smakebuf_r+0x6c>
  412696:	9a01      	ldr	r2, [sp, #4]
  412698:	4f12      	ldr	r7, [pc, #72]	; (4126e4 <__smakebuf_r+0x84>)
  41269a:	9900      	ldr	r1, [sp, #0]
  41269c:	63ef      	str	r7, [r5, #60]	; 0x3c
  41269e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4126a2:	81a3      	strh	r3, [r4, #12]
  4126a4:	6020      	str	r0, [r4, #0]
  4126a6:	6120      	str	r0, [r4, #16]
  4126a8:	6161      	str	r1, [r4, #20]
  4126aa:	b91a      	cbnz	r2, 4126b4 <__smakebuf_r+0x54>
  4126ac:	4333      	orrs	r3, r6
  4126ae:	81a3      	strh	r3, [r4, #12]
  4126b0:	b003      	add	sp, #12
  4126b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4126b4:	4628      	mov	r0, r5
  4126b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4126ba:	f001 fb5b 	bl	413d74 <_isatty_r>
  4126be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4126c2:	2800      	cmp	r0, #0
  4126c4:	d0f2      	beq.n	4126ac <__smakebuf_r+0x4c>
  4126c6:	f043 0301 	orr.w	r3, r3, #1
  4126ca:	e7ef      	b.n	4126ac <__smakebuf_r+0x4c>
  4126cc:	059a      	lsls	r2, r3, #22
  4126ce:	d4ef      	bmi.n	4126b0 <__smakebuf_r+0x50>
  4126d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4126d4:	f043 0302 	orr.w	r3, r3, #2
  4126d8:	2101      	movs	r1, #1
  4126da:	81a3      	strh	r3, [r4, #12]
  4126dc:	6022      	str	r2, [r4, #0]
  4126de:	6122      	str	r2, [r4, #16]
  4126e0:	6161      	str	r1, [r4, #20]
  4126e2:	e7e5      	b.n	4126b0 <__smakebuf_r+0x50>
  4126e4:	00411e2d 	.word	0x00411e2d

004126e8 <malloc>:
  4126e8:	4b02      	ldr	r3, [pc, #8]	; (4126f4 <malloc+0xc>)
  4126ea:	4601      	mov	r1, r0
  4126ec:	6818      	ldr	r0, [r3, #0]
  4126ee:	f000 b803 	b.w	4126f8 <_malloc_r>
  4126f2:	bf00      	nop
  4126f4:	20400568 	.word	0x20400568

004126f8 <_malloc_r>:
  4126f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4126fc:	f101 050b 	add.w	r5, r1, #11
  412700:	2d16      	cmp	r5, #22
  412702:	b083      	sub	sp, #12
  412704:	4606      	mov	r6, r0
  412706:	f240 809f 	bls.w	412848 <_malloc_r+0x150>
  41270a:	f035 0507 	bics.w	r5, r5, #7
  41270e:	f100 80bf 	bmi.w	412890 <_malloc_r+0x198>
  412712:	42a9      	cmp	r1, r5
  412714:	f200 80bc 	bhi.w	412890 <_malloc_r+0x198>
  412718:	f000 fb5e 	bl	412dd8 <__malloc_lock>
  41271c:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
  412720:	f0c0 829c 	bcc.w	412c5c <_malloc_r+0x564>
  412724:	0a6b      	lsrs	r3, r5, #9
  412726:	f000 80ba 	beq.w	41289e <_malloc_r+0x1a6>
  41272a:	2b04      	cmp	r3, #4
  41272c:	f200 8183 	bhi.w	412a36 <_malloc_r+0x33e>
  412730:	09a8      	lsrs	r0, r5, #6
  412732:	f100 0e39 	add.w	lr, r0, #57	; 0x39
  412736:	ea4f 034e 	mov.w	r3, lr, lsl #1
  41273a:	3038      	adds	r0, #56	; 0x38
  41273c:	4fc4      	ldr	r7, [pc, #784]	; (412a50 <_malloc_r+0x358>)
  41273e:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  412742:	f1a3 0108 	sub.w	r1, r3, #8
  412746:	685c      	ldr	r4, [r3, #4]
  412748:	42a1      	cmp	r1, r4
  41274a:	d107      	bne.n	41275c <_malloc_r+0x64>
  41274c:	e0ac      	b.n	4128a8 <_malloc_r+0x1b0>
  41274e:	2a00      	cmp	r2, #0
  412750:	f280 80ac 	bge.w	4128ac <_malloc_r+0x1b4>
  412754:	68e4      	ldr	r4, [r4, #12]
  412756:	42a1      	cmp	r1, r4
  412758:	f000 80a6 	beq.w	4128a8 <_malloc_r+0x1b0>
  41275c:	6863      	ldr	r3, [r4, #4]
  41275e:	f023 0303 	bic.w	r3, r3, #3
  412762:	1b5a      	subs	r2, r3, r5
  412764:	2a0f      	cmp	r2, #15
  412766:	ddf2      	ble.n	41274e <_malloc_r+0x56>
  412768:	49b9      	ldr	r1, [pc, #740]	; (412a50 <_malloc_r+0x358>)
  41276a:	693c      	ldr	r4, [r7, #16]
  41276c:	f101 0e08 	add.w	lr, r1, #8
  412770:	4574      	cmp	r4, lr
  412772:	f000 81b3 	beq.w	412adc <_malloc_r+0x3e4>
  412776:	6863      	ldr	r3, [r4, #4]
  412778:	f023 0303 	bic.w	r3, r3, #3
  41277c:	1b5a      	subs	r2, r3, r5
  41277e:	2a0f      	cmp	r2, #15
  412780:	f300 8199 	bgt.w	412ab6 <_malloc_r+0x3be>
  412784:	2a00      	cmp	r2, #0
  412786:	f8c1 e014 	str.w	lr, [r1, #20]
  41278a:	f8c1 e010 	str.w	lr, [r1, #16]
  41278e:	f280 809e 	bge.w	4128ce <_malloc_r+0x1d6>
  412792:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  412796:	f080 8167 	bcs.w	412a68 <_malloc_r+0x370>
  41279a:	08db      	lsrs	r3, r3, #3
  41279c:	f103 0c01 	add.w	ip, r3, #1
  4127a0:	2201      	movs	r2, #1
  4127a2:	109b      	asrs	r3, r3, #2
  4127a4:	fa02 f303 	lsl.w	r3, r2, r3
  4127a8:	684a      	ldr	r2, [r1, #4]
  4127aa:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
  4127ae:	f8c4 8008 	str.w	r8, [r4, #8]
  4127b2:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
  4127b6:	431a      	orrs	r2, r3
  4127b8:	f1a9 0308 	sub.w	r3, r9, #8
  4127bc:	60e3      	str	r3, [r4, #12]
  4127be:	604a      	str	r2, [r1, #4]
  4127c0:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
  4127c4:	f8c8 400c 	str.w	r4, [r8, #12]
  4127c8:	1083      	asrs	r3, r0, #2
  4127ca:	2401      	movs	r4, #1
  4127cc:	409c      	lsls	r4, r3
  4127ce:	4294      	cmp	r4, r2
  4127d0:	f200 808a 	bhi.w	4128e8 <_malloc_r+0x1f0>
  4127d4:	4214      	tst	r4, r2
  4127d6:	d106      	bne.n	4127e6 <_malloc_r+0xee>
  4127d8:	f020 0003 	bic.w	r0, r0, #3
  4127dc:	0064      	lsls	r4, r4, #1
  4127de:	4214      	tst	r4, r2
  4127e0:	f100 0004 	add.w	r0, r0, #4
  4127e4:	d0fa      	beq.n	4127dc <_malloc_r+0xe4>
  4127e6:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  4127ea:	46cc      	mov	ip, r9
  4127ec:	4680      	mov	r8, r0
  4127ee:	f8dc 100c 	ldr.w	r1, [ip, #12]
  4127f2:	458c      	cmp	ip, r1
  4127f4:	d107      	bne.n	412806 <_malloc_r+0x10e>
  4127f6:	e173      	b.n	412ae0 <_malloc_r+0x3e8>
  4127f8:	2a00      	cmp	r2, #0
  4127fa:	f280 8181 	bge.w	412b00 <_malloc_r+0x408>
  4127fe:	68c9      	ldr	r1, [r1, #12]
  412800:	458c      	cmp	ip, r1
  412802:	f000 816d 	beq.w	412ae0 <_malloc_r+0x3e8>
  412806:	684b      	ldr	r3, [r1, #4]
  412808:	f023 0303 	bic.w	r3, r3, #3
  41280c:	1b5a      	subs	r2, r3, r5
  41280e:	2a0f      	cmp	r2, #15
  412810:	ddf2      	ble.n	4127f8 <_malloc_r+0x100>
  412812:	460c      	mov	r4, r1
  412814:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  412818:	f854 8f08 	ldr.w	r8, [r4, #8]!
  41281c:	194b      	adds	r3, r1, r5
  41281e:	f045 0501 	orr.w	r5, r5, #1
  412822:	604d      	str	r5, [r1, #4]
  412824:	f042 0101 	orr.w	r1, r2, #1
  412828:	f8c8 c00c 	str.w	ip, [r8, #12]
  41282c:	4630      	mov	r0, r6
  41282e:	f8cc 8008 	str.w	r8, [ip, #8]
  412832:	617b      	str	r3, [r7, #20]
  412834:	613b      	str	r3, [r7, #16]
  412836:	f8c3 e00c 	str.w	lr, [r3, #12]
  41283a:	f8c3 e008 	str.w	lr, [r3, #8]
  41283e:	6059      	str	r1, [r3, #4]
  412840:	509a      	str	r2, [r3, r2]
  412842:	f000 facb 	bl	412ddc <__malloc_unlock>
  412846:	e01f      	b.n	412888 <_malloc_r+0x190>
  412848:	2910      	cmp	r1, #16
  41284a:	d821      	bhi.n	412890 <_malloc_r+0x198>
  41284c:	f000 fac4 	bl	412dd8 <__malloc_lock>
  412850:	2510      	movs	r5, #16
  412852:	2306      	movs	r3, #6
  412854:	2002      	movs	r0, #2
  412856:	4f7e      	ldr	r7, [pc, #504]	; (412a50 <_malloc_r+0x358>)
  412858:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  41285c:	f1a3 0208 	sub.w	r2, r3, #8
  412860:	685c      	ldr	r4, [r3, #4]
  412862:	4294      	cmp	r4, r2
  412864:	f000 8145 	beq.w	412af2 <_malloc_r+0x3fa>
  412868:	6863      	ldr	r3, [r4, #4]
  41286a:	68e1      	ldr	r1, [r4, #12]
  41286c:	68a5      	ldr	r5, [r4, #8]
  41286e:	f023 0303 	bic.w	r3, r3, #3
  412872:	4423      	add	r3, r4
  412874:	4630      	mov	r0, r6
  412876:	685a      	ldr	r2, [r3, #4]
  412878:	60e9      	str	r1, [r5, #12]
  41287a:	f042 0201 	orr.w	r2, r2, #1
  41287e:	608d      	str	r5, [r1, #8]
  412880:	605a      	str	r2, [r3, #4]
  412882:	f000 faab 	bl	412ddc <__malloc_unlock>
  412886:	3408      	adds	r4, #8
  412888:	4620      	mov	r0, r4
  41288a:	b003      	add	sp, #12
  41288c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  412890:	2400      	movs	r4, #0
  412892:	230c      	movs	r3, #12
  412894:	4620      	mov	r0, r4
  412896:	6033      	str	r3, [r6, #0]
  412898:	b003      	add	sp, #12
  41289a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41289e:	2380      	movs	r3, #128	; 0x80
  4128a0:	f04f 0e40 	mov.w	lr, #64	; 0x40
  4128a4:	203f      	movs	r0, #63	; 0x3f
  4128a6:	e749      	b.n	41273c <_malloc_r+0x44>
  4128a8:	4670      	mov	r0, lr
  4128aa:	e75d      	b.n	412768 <_malloc_r+0x70>
  4128ac:	4423      	add	r3, r4
  4128ae:	68e1      	ldr	r1, [r4, #12]
  4128b0:	685a      	ldr	r2, [r3, #4]
  4128b2:	68a5      	ldr	r5, [r4, #8]
  4128b4:	f042 0201 	orr.w	r2, r2, #1
  4128b8:	60e9      	str	r1, [r5, #12]
  4128ba:	4630      	mov	r0, r6
  4128bc:	608d      	str	r5, [r1, #8]
  4128be:	605a      	str	r2, [r3, #4]
  4128c0:	f000 fa8c 	bl	412ddc <__malloc_unlock>
  4128c4:	3408      	adds	r4, #8
  4128c6:	4620      	mov	r0, r4
  4128c8:	b003      	add	sp, #12
  4128ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4128ce:	4423      	add	r3, r4
  4128d0:	4630      	mov	r0, r6
  4128d2:	685a      	ldr	r2, [r3, #4]
  4128d4:	f042 0201 	orr.w	r2, r2, #1
  4128d8:	605a      	str	r2, [r3, #4]
  4128da:	f000 fa7f 	bl	412ddc <__malloc_unlock>
  4128de:	3408      	adds	r4, #8
  4128e0:	4620      	mov	r0, r4
  4128e2:	b003      	add	sp, #12
  4128e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4128e8:	68bc      	ldr	r4, [r7, #8]
  4128ea:	6863      	ldr	r3, [r4, #4]
  4128ec:	f023 0803 	bic.w	r8, r3, #3
  4128f0:	45a8      	cmp	r8, r5
  4128f2:	d304      	bcc.n	4128fe <_malloc_r+0x206>
  4128f4:	ebc5 0308 	rsb	r3, r5, r8
  4128f8:	2b0f      	cmp	r3, #15
  4128fa:	f300 808c 	bgt.w	412a16 <_malloc_r+0x31e>
  4128fe:	4b55      	ldr	r3, [pc, #340]	; (412a54 <_malloc_r+0x35c>)
  412900:	f8df 9160 	ldr.w	r9, [pc, #352]	; 412a64 <_malloc_r+0x36c>
  412904:	681a      	ldr	r2, [r3, #0]
  412906:	f8d9 3000 	ldr.w	r3, [r9]
  41290a:	3301      	adds	r3, #1
  41290c:	442a      	add	r2, r5
  41290e:	eb04 0a08 	add.w	sl, r4, r8
  412912:	f000 8160 	beq.w	412bd6 <_malloc_r+0x4de>
  412916:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
  41291a:	320f      	adds	r2, #15
  41291c:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  412920:	f022 020f 	bic.w	r2, r2, #15
  412924:	4611      	mov	r1, r2
  412926:	4630      	mov	r0, r6
  412928:	9201      	str	r2, [sp, #4]
  41292a:	f000 ff57 	bl	4137dc <_sbrk_r>
  41292e:	f1b0 3fff 	cmp.w	r0, #4294967295
  412932:	4683      	mov	fp, r0
  412934:	9a01      	ldr	r2, [sp, #4]
  412936:	f000 8158 	beq.w	412bea <_malloc_r+0x4f2>
  41293a:	4582      	cmp	sl, r0
  41293c:	f200 80fc 	bhi.w	412b38 <_malloc_r+0x440>
  412940:	4b45      	ldr	r3, [pc, #276]	; (412a58 <_malloc_r+0x360>)
  412942:	6819      	ldr	r1, [r3, #0]
  412944:	45da      	cmp	sl, fp
  412946:	4411      	add	r1, r2
  412948:	6019      	str	r1, [r3, #0]
  41294a:	f000 8153 	beq.w	412bf4 <_malloc_r+0x4fc>
  41294e:	f8d9 0000 	ldr.w	r0, [r9]
  412952:	f8df e110 	ldr.w	lr, [pc, #272]	; 412a64 <_malloc_r+0x36c>
  412956:	3001      	adds	r0, #1
  412958:	bf1b      	ittet	ne
  41295a:	ebca 0a0b 	rsbne	sl, sl, fp
  41295e:	4451      	addne	r1, sl
  412960:	f8ce b000 	streq.w	fp, [lr]
  412964:	6019      	strne	r1, [r3, #0]
  412966:	f01b 0107 	ands.w	r1, fp, #7
  41296a:	f000 8117 	beq.w	412b9c <_malloc_r+0x4a4>
  41296e:	f1c1 0008 	rsb	r0, r1, #8
  412972:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  412976:	4483      	add	fp, r0
  412978:	3108      	adds	r1, #8
  41297a:	445a      	add	r2, fp
  41297c:	f3c2 020b 	ubfx	r2, r2, #0, #12
  412980:	ebc2 0901 	rsb	r9, r2, r1
  412984:	4649      	mov	r1, r9
  412986:	4630      	mov	r0, r6
  412988:	9301      	str	r3, [sp, #4]
  41298a:	f000 ff27 	bl	4137dc <_sbrk_r>
  41298e:	1c43      	adds	r3, r0, #1
  412990:	9b01      	ldr	r3, [sp, #4]
  412992:	f000 813f 	beq.w	412c14 <_malloc_r+0x51c>
  412996:	ebcb 0200 	rsb	r2, fp, r0
  41299a:	444a      	add	r2, r9
  41299c:	f042 0201 	orr.w	r2, r2, #1
  4129a0:	6819      	ldr	r1, [r3, #0]
  4129a2:	f8c7 b008 	str.w	fp, [r7, #8]
  4129a6:	4449      	add	r1, r9
  4129a8:	42bc      	cmp	r4, r7
  4129aa:	f8cb 2004 	str.w	r2, [fp, #4]
  4129ae:	6019      	str	r1, [r3, #0]
  4129b0:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 412a58 <_malloc_r+0x360>
  4129b4:	d016      	beq.n	4129e4 <_malloc_r+0x2ec>
  4129b6:	f1b8 0f0f 	cmp.w	r8, #15
  4129ba:	f240 80fd 	bls.w	412bb8 <_malloc_r+0x4c0>
  4129be:	6862      	ldr	r2, [r4, #4]
  4129c0:	f1a8 030c 	sub.w	r3, r8, #12
  4129c4:	f023 0307 	bic.w	r3, r3, #7
  4129c8:	18e0      	adds	r0, r4, r3
  4129ca:	f002 0201 	and.w	r2, r2, #1
  4129ce:	f04f 0e05 	mov.w	lr, #5
  4129d2:	431a      	orrs	r2, r3
  4129d4:	2b0f      	cmp	r3, #15
  4129d6:	6062      	str	r2, [r4, #4]
  4129d8:	f8c0 e004 	str.w	lr, [r0, #4]
  4129dc:	f8c0 e008 	str.w	lr, [r0, #8]
  4129e0:	f200 811c 	bhi.w	412c1c <_malloc_r+0x524>
  4129e4:	4b1d      	ldr	r3, [pc, #116]	; (412a5c <_malloc_r+0x364>)
  4129e6:	68bc      	ldr	r4, [r7, #8]
  4129e8:	681a      	ldr	r2, [r3, #0]
  4129ea:	4291      	cmp	r1, r2
  4129ec:	bf88      	it	hi
  4129ee:	6019      	strhi	r1, [r3, #0]
  4129f0:	4b1b      	ldr	r3, [pc, #108]	; (412a60 <_malloc_r+0x368>)
  4129f2:	681a      	ldr	r2, [r3, #0]
  4129f4:	4291      	cmp	r1, r2
  4129f6:	6862      	ldr	r2, [r4, #4]
  4129f8:	bf88      	it	hi
  4129fa:	6019      	strhi	r1, [r3, #0]
  4129fc:	f022 0203 	bic.w	r2, r2, #3
  412a00:	4295      	cmp	r5, r2
  412a02:	eba2 0305 	sub.w	r3, r2, r5
  412a06:	d801      	bhi.n	412a0c <_malloc_r+0x314>
  412a08:	2b0f      	cmp	r3, #15
  412a0a:	dc04      	bgt.n	412a16 <_malloc_r+0x31e>
  412a0c:	4630      	mov	r0, r6
  412a0e:	f000 f9e5 	bl	412ddc <__malloc_unlock>
  412a12:	2400      	movs	r4, #0
  412a14:	e738      	b.n	412888 <_malloc_r+0x190>
  412a16:	1962      	adds	r2, r4, r5
  412a18:	f043 0301 	orr.w	r3, r3, #1
  412a1c:	f045 0501 	orr.w	r5, r5, #1
  412a20:	6065      	str	r5, [r4, #4]
  412a22:	4630      	mov	r0, r6
  412a24:	60ba      	str	r2, [r7, #8]
  412a26:	6053      	str	r3, [r2, #4]
  412a28:	f000 f9d8 	bl	412ddc <__malloc_unlock>
  412a2c:	3408      	adds	r4, #8
  412a2e:	4620      	mov	r0, r4
  412a30:	b003      	add	sp, #12
  412a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  412a36:	2b14      	cmp	r3, #20
  412a38:	d971      	bls.n	412b1e <_malloc_r+0x426>
  412a3a:	2b54      	cmp	r3, #84	; 0x54
  412a3c:	f200 80a4 	bhi.w	412b88 <_malloc_r+0x490>
  412a40:	0b28      	lsrs	r0, r5, #12
  412a42:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
  412a46:	ea4f 034e 	mov.w	r3, lr, lsl #1
  412a4a:	306e      	adds	r0, #110	; 0x6e
  412a4c:	e676      	b.n	41273c <_malloc_r+0x44>
  412a4e:	bf00      	nop
  412a50:	204005c8 	.word	0x204005c8
  412a54:	204038e0 	.word	0x204038e0
  412a58:	204038e4 	.word	0x204038e4
  412a5c:	204038dc 	.word	0x204038dc
  412a60:	204038d8 	.word	0x204038d8
  412a64:	204009d4 	.word	0x204009d4
  412a68:	0a5a      	lsrs	r2, r3, #9
  412a6a:	2a04      	cmp	r2, #4
  412a6c:	d95e      	bls.n	412b2c <_malloc_r+0x434>
  412a6e:	2a14      	cmp	r2, #20
  412a70:	f200 80b3 	bhi.w	412bda <_malloc_r+0x4e2>
  412a74:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  412a78:	0049      	lsls	r1, r1, #1
  412a7a:	325b      	adds	r2, #91	; 0x5b
  412a7c:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
  412a80:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
  412a84:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 412c64 <_malloc_r+0x56c>
  412a88:	f1ac 0c08 	sub.w	ip, ip, #8
  412a8c:	458c      	cmp	ip, r1
  412a8e:	f000 8088 	beq.w	412ba2 <_malloc_r+0x4aa>
  412a92:	684a      	ldr	r2, [r1, #4]
  412a94:	f022 0203 	bic.w	r2, r2, #3
  412a98:	4293      	cmp	r3, r2
  412a9a:	d202      	bcs.n	412aa2 <_malloc_r+0x3aa>
  412a9c:	6889      	ldr	r1, [r1, #8]
  412a9e:	458c      	cmp	ip, r1
  412aa0:	d1f7      	bne.n	412a92 <_malloc_r+0x39a>
  412aa2:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  412aa6:	687a      	ldr	r2, [r7, #4]
  412aa8:	f8c4 c00c 	str.w	ip, [r4, #12]
  412aac:	60a1      	str	r1, [r4, #8]
  412aae:	f8cc 4008 	str.w	r4, [ip, #8]
  412ab2:	60cc      	str	r4, [r1, #12]
  412ab4:	e688      	b.n	4127c8 <_malloc_r+0xd0>
  412ab6:	1963      	adds	r3, r4, r5
  412ab8:	f042 0701 	orr.w	r7, r2, #1
  412abc:	f045 0501 	orr.w	r5, r5, #1
  412ac0:	6065      	str	r5, [r4, #4]
  412ac2:	4630      	mov	r0, r6
  412ac4:	614b      	str	r3, [r1, #20]
  412ac6:	610b      	str	r3, [r1, #16]
  412ac8:	f8c3 e00c 	str.w	lr, [r3, #12]
  412acc:	f8c3 e008 	str.w	lr, [r3, #8]
  412ad0:	605f      	str	r7, [r3, #4]
  412ad2:	509a      	str	r2, [r3, r2]
  412ad4:	3408      	adds	r4, #8
  412ad6:	f000 f981 	bl	412ddc <__malloc_unlock>
  412ada:	e6d5      	b.n	412888 <_malloc_r+0x190>
  412adc:	684a      	ldr	r2, [r1, #4]
  412ade:	e673      	b.n	4127c8 <_malloc_r+0xd0>
  412ae0:	f108 0801 	add.w	r8, r8, #1
  412ae4:	f018 0f03 	tst.w	r8, #3
  412ae8:	f10c 0c08 	add.w	ip, ip, #8
  412aec:	f47f ae7f 	bne.w	4127ee <_malloc_r+0xf6>
  412af0:	e030      	b.n	412b54 <_malloc_r+0x45c>
  412af2:	68dc      	ldr	r4, [r3, #12]
  412af4:	42a3      	cmp	r3, r4
  412af6:	bf08      	it	eq
  412af8:	3002      	addeq	r0, #2
  412afa:	f43f ae35 	beq.w	412768 <_malloc_r+0x70>
  412afe:	e6b3      	b.n	412868 <_malloc_r+0x170>
  412b00:	440b      	add	r3, r1
  412b02:	460c      	mov	r4, r1
  412b04:	685a      	ldr	r2, [r3, #4]
  412b06:	68c9      	ldr	r1, [r1, #12]
  412b08:	f854 5f08 	ldr.w	r5, [r4, #8]!
  412b0c:	f042 0201 	orr.w	r2, r2, #1
  412b10:	605a      	str	r2, [r3, #4]
  412b12:	4630      	mov	r0, r6
  412b14:	60e9      	str	r1, [r5, #12]
  412b16:	608d      	str	r5, [r1, #8]
  412b18:	f000 f960 	bl	412ddc <__malloc_unlock>
  412b1c:	e6b4      	b.n	412888 <_malloc_r+0x190>
  412b1e:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
  412b22:	f103 005b 	add.w	r0, r3, #91	; 0x5b
  412b26:	ea4f 034e 	mov.w	r3, lr, lsl #1
  412b2a:	e607      	b.n	41273c <_malloc_r+0x44>
  412b2c:	099a      	lsrs	r2, r3, #6
  412b2e:	f102 0139 	add.w	r1, r2, #57	; 0x39
  412b32:	0049      	lsls	r1, r1, #1
  412b34:	3238      	adds	r2, #56	; 0x38
  412b36:	e7a1      	b.n	412a7c <_malloc_r+0x384>
  412b38:	42bc      	cmp	r4, r7
  412b3a:	4b4a      	ldr	r3, [pc, #296]	; (412c64 <_malloc_r+0x56c>)
  412b3c:	f43f af00 	beq.w	412940 <_malloc_r+0x248>
  412b40:	689c      	ldr	r4, [r3, #8]
  412b42:	6862      	ldr	r2, [r4, #4]
  412b44:	f022 0203 	bic.w	r2, r2, #3
  412b48:	e75a      	b.n	412a00 <_malloc_r+0x308>
  412b4a:	f859 3908 	ldr.w	r3, [r9], #-8
  412b4e:	4599      	cmp	r9, r3
  412b50:	f040 8082 	bne.w	412c58 <_malloc_r+0x560>
  412b54:	f010 0f03 	tst.w	r0, #3
  412b58:	f100 30ff 	add.w	r0, r0, #4294967295
  412b5c:	d1f5      	bne.n	412b4a <_malloc_r+0x452>
  412b5e:	687b      	ldr	r3, [r7, #4]
  412b60:	ea23 0304 	bic.w	r3, r3, r4
  412b64:	607b      	str	r3, [r7, #4]
  412b66:	0064      	lsls	r4, r4, #1
  412b68:	429c      	cmp	r4, r3
  412b6a:	f63f aebd 	bhi.w	4128e8 <_malloc_r+0x1f0>
  412b6e:	2c00      	cmp	r4, #0
  412b70:	f43f aeba 	beq.w	4128e8 <_malloc_r+0x1f0>
  412b74:	421c      	tst	r4, r3
  412b76:	4640      	mov	r0, r8
  412b78:	f47f ae35 	bne.w	4127e6 <_malloc_r+0xee>
  412b7c:	0064      	lsls	r4, r4, #1
  412b7e:	421c      	tst	r4, r3
  412b80:	f100 0004 	add.w	r0, r0, #4
  412b84:	d0fa      	beq.n	412b7c <_malloc_r+0x484>
  412b86:	e62e      	b.n	4127e6 <_malloc_r+0xee>
  412b88:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  412b8c:	d818      	bhi.n	412bc0 <_malloc_r+0x4c8>
  412b8e:	0be8      	lsrs	r0, r5, #15
  412b90:	f100 0e78 	add.w	lr, r0, #120	; 0x78
  412b94:	ea4f 034e 	mov.w	r3, lr, lsl #1
  412b98:	3077      	adds	r0, #119	; 0x77
  412b9a:	e5cf      	b.n	41273c <_malloc_r+0x44>
  412b9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  412ba0:	e6eb      	b.n	41297a <_malloc_r+0x282>
  412ba2:	2101      	movs	r1, #1
  412ba4:	f8d8 3004 	ldr.w	r3, [r8, #4]
  412ba8:	1092      	asrs	r2, r2, #2
  412baa:	fa01 f202 	lsl.w	r2, r1, r2
  412bae:	431a      	orrs	r2, r3
  412bb0:	f8c8 2004 	str.w	r2, [r8, #4]
  412bb4:	4661      	mov	r1, ip
  412bb6:	e777      	b.n	412aa8 <_malloc_r+0x3b0>
  412bb8:	2301      	movs	r3, #1
  412bba:	f8cb 3004 	str.w	r3, [fp, #4]
  412bbe:	e725      	b.n	412a0c <_malloc_r+0x314>
  412bc0:	f240 5254 	movw	r2, #1364	; 0x554
  412bc4:	4293      	cmp	r3, r2
  412bc6:	d820      	bhi.n	412c0a <_malloc_r+0x512>
  412bc8:	0ca8      	lsrs	r0, r5, #18
  412bca:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
  412bce:	ea4f 034e 	mov.w	r3, lr, lsl #1
  412bd2:	307c      	adds	r0, #124	; 0x7c
  412bd4:	e5b2      	b.n	41273c <_malloc_r+0x44>
  412bd6:	3210      	adds	r2, #16
  412bd8:	e6a4      	b.n	412924 <_malloc_r+0x22c>
  412bda:	2a54      	cmp	r2, #84	; 0x54
  412bdc:	d826      	bhi.n	412c2c <_malloc_r+0x534>
  412bde:	0b1a      	lsrs	r2, r3, #12
  412be0:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  412be4:	0049      	lsls	r1, r1, #1
  412be6:	326e      	adds	r2, #110	; 0x6e
  412be8:	e748      	b.n	412a7c <_malloc_r+0x384>
  412bea:	68bc      	ldr	r4, [r7, #8]
  412bec:	6862      	ldr	r2, [r4, #4]
  412bee:	f022 0203 	bic.w	r2, r2, #3
  412bf2:	e705      	b.n	412a00 <_malloc_r+0x308>
  412bf4:	f3ca 000b 	ubfx	r0, sl, #0, #12
  412bf8:	2800      	cmp	r0, #0
  412bfa:	f47f aea8 	bne.w	41294e <_malloc_r+0x256>
  412bfe:	4442      	add	r2, r8
  412c00:	68bb      	ldr	r3, [r7, #8]
  412c02:	f042 0201 	orr.w	r2, r2, #1
  412c06:	605a      	str	r2, [r3, #4]
  412c08:	e6ec      	b.n	4129e4 <_malloc_r+0x2ec>
  412c0a:	23fe      	movs	r3, #254	; 0xfe
  412c0c:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
  412c10:	207e      	movs	r0, #126	; 0x7e
  412c12:	e593      	b.n	41273c <_malloc_r+0x44>
  412c14:	2201      	movs	r2, #1
  412c16:	f04f 0900 	mov.w	r9, #0
  412c1a:	e6c1      	b.n	4129a0 <_malloc_r+0x2a8>
  412c1c:	f104 0108 	add.w	r1, r4, #8
  412c20:	4630      	mov	r0, r6
  412c22:	f7ff fa4b 	bl	4120bc <_free_r>
  412c26:	f8d9 1000 	ldr.w	r1, [r9]
  412c2a:	e6db      	b.n	4129e4 <_malloc_r+0x2ec>
  412c2c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  412c30:	d805      	bhi.n	412c3e <_malloc_r+0x546>
  412c32:	0bda      	lsrs	r2, r3, #15
  412c34:	f102 0178 	add.w	r1, r2, #120	; 0x78
  412c38:	0049      	lsls	r1, r1, #1
  412c3a:	3277      	adds	r2, #119	; 0x77
  412c3c:	e71e      	b.n	412a7c <_malloc_r+0x384>
  412c3e:	f240 5154 	movw	r1, #1364	; 0x554
  412c42:	428a      	cmp	r2, r1
  412c44:	d805      	bhi.n	412c52 <_malloc_r+0x55a>
  412c46:	0c9a      	lsrs	r2, r3, #18
  412c48:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  412c4c:	0049      	lsls	r1, r1, #1
  412c4e:	327c      	adds	r2, #124	; 0x7c
  412c50:	e714      	b.n	412a7c <_malloc_r+0x384>
  412c52:	21fe      	movs	r1, #254	; 0xfe
  412c54:	227e      	movs	r2, #126	; 0x7e
  412c56:	e711      	b.n	412a7c <_malloc_r+0x384>
  412c58:	687b      	ldr	r3, [r7, #4]
  412c5a:	e784      	b.n	412b66 <_malloc_r+0x46e>
  412c5c:	08e8      	lsrs	r0, r5, #3
  412c5e:	1c43      	adds	r3, r0, #1
  412c60:	005b      	lsls	r3, r3, #1
  412c62:	e5f8      	b.n	412856 <_malloc_r+0x15e>
  412c64:	204005c8 	.word	0x204005c8
	...

00412c70 <memchr>:
  412c70:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  412c74:	2a10      	cmp	r2, #16
  412c76:	db2b      	blt.n	412cd0 <memchr+0x60>
  412c78:	f010 0f07 	tst.w	r0, #7
  412c7c:	d008      	beq.n	412c90 <memchr+0x20>
  412c7e:	f810 3b01 	ldrb.w	r3, [r0], #1
  412c82:	3a01      	subs	r2, #1
  412c84:	428b      	cmp	r3, r1
  412c86:	d02d      	beq.n	412ce4 <memchr+0x74>
  412c88:	f010 0f07 	tst.w	r0, #7
  412c8c:	b342      	cbz	r2, 412ce0 <memchr+0x70>
  412c8e:	d1f6      	bne.n	412c7e <memchr+0xe>
  412c90:	b4f0      	push	{r4, r5, r6, r7}
  412c92:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  412c96:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  412c9a:	f022 0407 	bic.w	r4, r2, #7
  412c9e:	f07f 0700 	mvns.w	r7, #0
  412ca2:	2300      	movs	r3, #0
  412ca4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  412ca8:	3c08      	subs	r4, #8
  412caa:	ea85 0501 	eor.w	r5, r5, r1
  412cae:	ea86 0601 	eor.w	r6, r6, r1
  412cb2:	fa85 f547 	uadd8	r5, r5, r7
  412cb6:	faa3 f587 	sel	r5, r3, r7
  412cba:	fa86 f647 	uadd8	r6, r6, r7
  412cbe:	faa5 f687 	sel	r6, r5, r7
  412cc2:	b98e      	cbnz	r6, 412ce8 <memchr+0x78>
  412cc4:	d1ee      	bne.n	412ca4 <memchr+0x34>
  412cc6:	bcf0      	pop	{r4, r5, r6, r7}
  412cc8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  412ccc:	f002 0207 	and.w	r2, r2, #7
  412cd0:	b132      	cbz	r2, 412ce0 <memchr+0x70>
  412cd2:	f810 3b01 	ldrb.w	r3, [r0], #1
  412cd6:	3a01      	subs	r2, #1
  412cd8:	ea83 0301 	eor.w	r3, r3, r1
  412cdc:	b113      	cbz	r3, 412ce4 <memchr+0x74>
  412cde:	d1f8      	bne.n	412cd2 <memchr+0x62>
  412ce0:	2000      	movs	r0, #0
  412ce2:	4770      	bx	lr
  412ce4:	3801      	subs	r0, #1
  412ce6:	4770      	bx	lr
  412ce8:	2d00      	cmp	r5, #0
  412cea:	bf06      	itte	eq
  412cec:	4635      	moveq	r5, r6
  412cee:	3803      	subeq	r0, #3
  412cf0:	3807      	subne	r0, #7
  412cf2:	f015 0f01 	tst.w	r5, #1
  412cf6:	d107      	bne.n	412d08 <memchr+0x98>
  412cf8:	3001      	adds	r0, #1
  412cfa:	f415 7f80 	tst.w	r5, #256	; 0x100
  412cfe:	bf02      	ittt	eq
  412d00:	3001      	addeq	r0, #1
  412d02:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  412d06:	3001      	addeq	r0, #1
  412d08:	bcf0      	pop	{r4, r5, r6, r7}
  412d0a:	3801      	subs	r0, #1
  412d0c:	4770      	bx	lr
  412d0e:	bf00      	nop

00412d10 <memmove>:
  412d10:	4288      	cmp	r0, r1
  412d12:	b5f0      	push	{r4, r5, r6, r7, lr}
  412d14:	d90d      	bls.n	412d32 <memmove+0x22>
  412d16:	188b      	adds	r3, r1, r2
  412d18:	4298      	cmp	r0, r3
  412d1a:	d20a      	bcs.n	412d32 <memmove+0x22>
  412d1c:	1881      	adds	r1, r0, r2
  412d1e:	2a00      	cmp	r2, #0
  412d20:	d051      	beq.n	412dc6 <memmove+0xb6>
  412d22:	1a9a      	subs	r2, r3, r2
  412d24:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  412d28:	f801 4d01 	strb.w	r4, [r1, #-1]!
  412d2c:	4293      	cmp	r3, r2
  412d2e:	d1f9      	bne.n	412d24 <memmove+0x14>
  412d30:	bdf0      	pop	{r4, r5, r6, r7, pc}
  412d32:	2a0f      	cmp	r2, #15
  412d34:	d948      	bls.n	412dc8 <memmove+0xb8>
  412d36:	ea41 0300 	orr.w	r3, r1, r0
  412d3a:	079b      	lsls	r3, r3, #30
  412d3c:	d146      	bne.n	412dcc <memmove+0xbc>
  412d3e:	f100 0410 	add.w	r4, r0, #16
  412d42:	f101 0310 	add.w	r3, r1, #16
  412d46:	4615      	mov	r5, r2
  412d48:	f853 6c10 	ldr.w	r6, [r3, #-16]
  412d4c:	f844 6c10 	str.w	r6, [r4, #-16]
  412d50:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  412d54:	f844 6c0c 	str.w	r6, [r4, #-12]
  412d58:	f853 6c08 	ldr.w	r6, [r3, #-8]
  412d5c:	f844 6c08 	str.w	r6, [r4, #-8]
  412d60:	3d10      	subs	r5, #16
  412d62:	f853 6c04 	ldr.w	r6, [r3, #-4]
  412d66:	f844 6c04 	str.w	r6, [r4, #-4]
  412d6a:	2d0f      	cmp	r5, #15
  412d6c:	f103 0310 	add.w	r3, r3, #16
  412d70:	f104 0410 	add.w	r4, r4, #16
  412d74:	d8e8      	bhi.n	412d48 <memmove+0x38>
  412d76:	f1a2 0310 	sub.w	r3, r2, #16
  412d7a:	f023 030f 	bic.w	r3, r3, #15
  412d7e:	f002 0e0f 	and.w	lr, r2, #15
  412d82:	3310      	adds	r3, #16
  412d84:	f1be 0f03 	cmp.w	lr, #3
  412d88:	4419      	add	r1, r3
  412d8a:	4403      	add	r3, r0
  412d8c:	d921      	bls.n	412dd2 <memmove+0xc2>
  412d8e:	1f1e      	subs	r6, r3, #4
  412d90:	460d      	mov	r5, r1
  412d92:	4674      	mov	r4, lr
  412d94:	3c04      	subs	r4, #4
  412d96:	f855 7b04 	ldr.w	r7, [r5], #4
  412d9a:	f846 7f04 	str.w	r7, [r6, #4]!
  412d9e:	2c03      	cmp	r4, #3
  412da0:	d8f8      	bhi.n	412d94 <memmove+0x84>
  412da2:	f1ae 0404 	sub.w	r4, lr, #4
  412da6:	f024 0403 	bic.w	r4, r4, #3
  412daa:	3404      	adds	r4, #4
  412dac:	4423      	add	r3, r4
  412dae:	4421      	add	r1, r4
  412db0:	f002 0203 	and.w	r2, r2, #3
  412db4:	b162      	cbz	r2, 412dd0 <memmove+0xc0>
  412db6:	3b01      	subs	r3, #1
  412db8:	440a      	add	r2, r1
  412dba:	f811 4b01 	ldrb.w	r4, [r1], #1
  412dbe:	f803 4f01 	strb.w	r4, [r3, #1]!
  412dc2:	428a      	cmp	r2, r1
  412dc4:	d1f9      	bne.n	412dba <memmove+0xaa>
  412dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  412dc8:	4603      	mov	r3, r0
  412dca:	e7f3      	b.n	412db4 <memmove+0xa4>
  412dcc:	4603      	mov	r3, r0
  412dce:	e7f2      	b.n	412db6 <memmove+0xa6>
  412dd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  412dd2:	4672      	mov	r2, lr
  412dd4:	e7ee      	b.n	412db4 <memmove+0xa4>
  412dd6:	bf00      	nop

00412dd8 <__malloc_lock>:
  412dd8:	4770      	bx	lr
  412dda:	bf00      	nop

00412ddc <__malloc_unlock>:
  412ddc:	4770      	bx	lr
  412dde:	bf00      	nop

00412de0 <_Balloc>:
  412de0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  412de2:	b570      	push	{r4, r5, r6, lr}
  412de4:	4605      	mov	r5, r0
  412de6:	460c      	mov	r4, r1
  412de8:	b14b      	cbz	r3, 412dfe <_Balloc+0x1e>
  412dea:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  412dee:	b180      	cbz	r0, 412e12 <_Balloc+0x32>
  412df0:	6802      	ldr	r2, [r0, #0]
  412df2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  412df6:	2300      	movs	r3, #0
  412df8:	6103      	str	r3, [r0, #16]
  412dfa:	60c3      	str	r3, [r0, #12]
  412dfc:	bd70      	pop	{r4, r5, r6, pc}
  412dfe:	2221      	movs	r2, #33	; 0x21
  412e00:	2104      	movs	r1, #4
  412e02:	f000 ff1f 	bl	413c44 <_calloc_r>
  412e06:	64e8      	str	r0, [r5, #76]	; 0x4c
  412e08:	4603      	mov	r3, r0
  412e0a:	2800      	cmp	r0, #0
  412e0c:	d1ed      	bne.n	412dea <_Balloc+0xa>
  412e0e:	2000      	movs	r0, #0
  412e10:	bd70      	pop	{r4, r5, r6, pc}
  412e12:	2101      	movs	r1, #1
  412e14:	fa01 f604 	lsl.w	r6, r1, r4
  412e18:	1d72      	adds	r2, r6, #5
  412e1a:	4628      	mov	r0, r5
  412e1c:	0092      	lsls	r2, r2, #2
  412e1e:	f000 ff11 	bl	413c44 <_calloc_r>
  412e22:	2800      	cmp	r0, #0
  412e24:	d0f3      	beq.n	412e0e <_Balloc+0x2e>
  412e26:	6044      	str	r4, [r0, #4]
  412e28:	6086      	str	r6, [r0, #8]
  412e2a:	e7e4      	b.n	412df6 <_Balloc+0x16>

00412e2c <_Bfree>:
  412e2c:	b131      	cbz	r1, 412e3c <_Bfree+0x10>
  412e2e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  412e30:	684a      	ldr	r2, [r1, #4]
  412e32:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  412e36:	6008      	str	r0, [r1, #0]
  412e38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  412e3c:	4770      	bx	lr
  412e3e:	bf00      	nop

00412e40 <__multadd>:
  412e40:	b5f0      	push	{r4, r5, r6, r7, lr}
  412e42:	690c      	ldr	r4, [r1, #16]
  412e44:	b083      	sub	sp, #12
  412e46:	460d      	mov	r5, r1
  412e48:	4606      	mov	r6, r0
  412e4a:	f101 0e14 	add.w	lr, r1, #20
  412e4e:	2700      	movs	r7, #0
  412e50:	f8de 0000 	ldr.w	r0, [lr]
  412e54:	b281      	uxth	r1, r0
  412e56:	fb02 3101 	mla	r1, r2, r1, r3
  412e5a:	0c0b      	lsrs	r3, r1, #16
  412e5c:	0c00      	lsrs	r0, r0, #16
  412e5e:	fb02 3300 	mla	r3, r2, r0, r3
  412e62:	b289      	uxth	r1, r1
  412e64:	3701      	adds	r7, #1
  412e66:	eb01 4103 	add.w	r1, r1, r3, lsl #16
  412e6a:	42bc      	cmp	r4, r7
  412e6c:	f84e 1b04 	str.w	r1, [lr], #4
  412e70:	ea4f 4313 	mov.w	r3, r3, lsr #16
  412e74:	dcec      	bgt.n	412e50 <__multadd+0x10>
  412e76:	b13b      	cbz	r3, 412e88 <__multadd+0x48>
  412e78:	68aa      	ldr	r2, [r5, #8]
  412e7a:	4294      	cmp	r4, r2
  412e7c:	da07      	bge.n	412e8e <__multadd+0x4e>
  412e7e:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  412e82:	3401      	adds	r4, #1
  412e84:	6153      	str	r3, [r2, #20]
  412e86:	612c      	str	r4, [r5, #16]
  412e88:	4628      	mov	r0, r5
  412e8a:	b003      	add	sp, #12
  412e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  412e8e:	6869      	ldr	r1, [r5, #4]
  412e90:	9301      	str	r3, [sp, #4]
  412e92:	3101      	adds	r1, #1
  412e94:	4630      	mov	r0, r6
  412e96:	f7ff ffa3 	bl	412de0 <_Balloc>
  412e9a:	692a      	ldr	r2, [r5, #16]
  412e9c:	3202      	adds	r2, #2
  412e9e:	f105 010c 	add.w	r1, r5, #12
  412ea2:	4607      	mov	r7, r0
  412ea4:	0092      	lsls	r2, r2, #2
  412ea6:	300c      	adds	r0, #12
  412ea8:	f7fa fcd6 	bl	40d858 <memcpy>
  412eac:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  412eae:	6869      	ldr	r1, [r5, #4]
  412eb0:	9b01      	ldr	r3, [sp, #4]
  412eb2:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  412eb6:	6028      	str	r0, [r5, #0]
  412eb8:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  412ebc:	463d      	mov	r5, r7
  412ebe:	e7de      	b.n	412e7e <__multadd+0x3e>

00412ec0 <__hi0bits>:
  412ec0:	0c03      	lsrs	r3, r0, #16
  412ec2:	041b      	lsls	r3, r3, #16
  412ec4:	b9b3      	cbnz	r3, 412ef4 <__hi0bits+0x34>
  412ec6:	0400      	lsls	r0, r0, #16
  412ec8:	2310      	movs	r3, #16
  412eca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
  412ece:	bf04      	itt	eq
  412ed0:	0200      	lsleq	r0, r0, #8
  412ed2:	3308      	addeq	r3, #8
  412ed4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
  412ed8:	bf04      	itt	eq
  412eda:	0100      	lsleq	r0, r0, #4
  412edc:	3304      	addeq	r3, #4
  412ede:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
  412ee2:	bf04      	itt	eq
  412ee4:	0080      	lsleq	r0, r0, #2
  412ee6:	3302      	addeq	r3, #2
  412ee8:	2800      	cmp	r0, #0
  412eea:	db07      	blt.n	412efc <__hi0bits+0x3c>
  412eec:	0042      	lsls	r2, r0, #1
  412eee:	d403      	bmi.n	412ef8 <__hi0bits+0x38>
  412ef0:	2020      	movs	r0, #32
  412ef2:	4770      	bx	lr
  412ef4:	2300      	movs	r3, #0
  412ef6:	e7e8      	b.n	412eca <__hi0bits+0xa>
  412ef8:	1c58      	adds	r0, r3, #1
  412efa:	4770      	bx	lr
  412efc:	4618      	mov	r0, r3
  412efe:	4770      	bx	lr

00412f00 <__lo0bits>:
  412f00:	6803      	ldr	r3, [r0, #0]
  412f02:	f013 0207 	ands.w	r2, r3, #7
  412f06:	d007      	beq.n	412f18 <__lo0bits+0x18>
  412f08:	07d9      	lsls	r1, r3, #31
  412f0a:	d420      	bmi.n	412f4e <__lo0bits+0x4e>
  412f0c:	079a      	lsls	r2, r3, #30
  412f0e:	d420      	bmi.n	412f52 <__lo0bits+0x52>
  412f10:	089b      	lsrs	r3, r3, #2
  412f12:	6003      	str	r3, [r0, #0]
  412f14:	2002      	movs	r0, #2
  412f16:	4770      	bx	lr
  412f18:	b299      	uxth	r1, r3
  412f1a:	b909      	cbnz	r1, 412f20 <__lo0bits+0x20>
  412f1c:	0c1b      	lsrs	r3, r3, #16
  412f1e:	2210      	movs	r2, #16
  412f20:	f013 0fff 	tst.w	r3, #255	; 0xff
  412f24:	bf04      	itt	eq
  412f26:	0a1b      	lsreq	r3, r3, #8
  412f28:	3208      	addeq	r2, #8
  412f2a:	0719      	lsls	r1, r3, #28
  412f2c:	bf04      	itt	eq
  412f2e:	091b      	lsreq	r3, r3, #4
  412f30:	3204      	addeq	r2, #4
  412f32:	0799      	lsls	r1, r3, #30
  412f34:	bf04      	itt	eq
  412f36:	089b      	lsreq	r3, r3, #2
  412f38:	3202      	addeq	r2, #2
  412f3a:	07d9      	lsls	r1, r3, #31
  412f3c:	d404      	bmi.n	412f48 <__lo0bits+0x48>
  412f3e:	085b      	lsrs	r3, r3, #1
  412f40:	d101      	bne.n	412f46 <__lo0bits+0x46>
  412f42:	2020      	movs	r0, #32
  412f44:	4770      	bx	lr
  412f46:	3201      	adds	r2, #1
  412f48:	6003      	str	r3, [r0, #0]
  412f4a:	4610      	mov	r0, r2
  412f4c:	4770      	bx	lr
  412f4e:	2000      	movs	r0, #0
  412f50:	4770      	bx	lr
  412f52:	085b      	lsrs	r3, r3, #1
  412f54:	6003      	str	r3, [r0, #0]
  412f56:	2001      	movs	r0, #1
  412f58:	4770      	bx	lr
  412f5a:	bf00      	nop

00412f5c <__i2b>:
  412f5c:	b510      	push	{r4, lr}
  412f5e:	460c      	mov	r4, r1
  412f60:	2101      	movs	r1, #1
  412f62:	f7ff ff3d 	bl	412de0 <_Balloc>
  412f66:	2201      	movs	r2, #1
  412f68:	6144      	str	r4, [r0, #20]
  412f6a:	6102      	str	r2, [r0, #16]
  412f6c:	bd10      	pop	{r4, pc}
  412f6e:	bf00      	nop

00412f70 <__multiply>:
  412f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  412f74:	690d      	ldr	r5, [r1, #16]
  412f76:	6917      	ldr	r7, [r2, #16]
  412f78:	42bd      	cmp	r5, r7
  412f7a:	b083      	sub	sp, #12
  412f7c:	460c      	mov	r4, r1
  412f7e:	4616      	mov	r6, r2
  412f80:	da04      	bge.n	412f8c <__multiply+0x1c>
  412f82:	462a      	mov	r2, r5
  412f84:	4634      	mov	r4, r6
  412f86:	463d      	mov	r5, r7
  412f88:	460e      	mov	r6, r1
  412f8a:	4617      	mov	r7, r2
  412f8c:	68a3      	ldr	r3, [r4, #8]
  412f8e:	6861      	ldr	r1, [r4, #4]
  412f90:	eb05 0807 	add.w	r8, r5, r7
  412f94:	4598      	cmp	r8, r3
  412f96:	bfc8      	it	gt
  412f98:	3101      	addgt	r1, #1
  412f9a:	f7ff ff21 	bl	412de0 <_Balloc>
  412f9e:	f100 0c14 	add.w	ip, r0, #20
  412fa2:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
  412fa6:	45cc      	cmp	ip, r9
  412fa8:	9000      	str	r0, [sp, #0]
  412faa:	d205      	bcs.n	412fb8 <__multiply+0x48>
  412fac:	4663      	mov	r3, ip
  412fae:	2100      	movs	r1, #0
  412fb0:	f843 1b04 	str.w	r1, [r3], #4
  412fb4:	4599      	cmp	r9, r3
  412fb6:	d8fb      	bhi.n	412fb0 <__multiply+0x40>
  412fb8:	f106 0214 	add.w	r2, r6, #20
  412fbc:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
  412fc0:	f104 0314 	add.w	r3, r4, #20
  412fc4:	4552      	cmp	r2, sl
  412fc6:	eb03 0e85 	add.w	lr, r3, r5, lsl #2
  412fca:	d254      	bcs.n	413076 <__multiply+0x106>
  412fcc:	f8cd 9004 	str.w	r9, [sp, #4]
  412fd0:	4699      	mov	r9, r3
  412fd2:	f852 3b04 	ldr.w	r3, [r2], #4
  412fd6:	fa1f fb83 	uxth.w	fp, r3
  412fda:	f1bb 0f00 	cmp.w	fp, #0
  412fde:	d020      	beq.n	413022 <__multiply+0xb2>
  412fe0:	2000      	movs	r0, #0
  412fe2:	464f      	mov	r7, r9
  412fe4:	4666      	mov	r6, ip
  412fe6:	4605      	mov	r5, r0
  412fe8:	e000      	b.n	412fec <__multiply+0x7c>
  412fea:	461e      	mov	r6, r3
  412fec:	f857 4b04 	ldr.w	r4, [r7], #4
  412ff0:	6830      	ldr	r0, [r6, #0]
  412ff2:	b2a1      	uxth	r1, r4
  412ff4:	b283      	uxth	r3, r0
  412ff6:	fb0b 3101 	mla	r1, fp, r1, r3
  412ffa:	0c24      	lsrs	r4, r4, #16
  412ffc:	0c00      	lsrs	r0, r0, #16
  412ffe:	194b      	adds	r3, r1, r5
  413000:	fb0b 0004 	mla	r0, fp, r4, r0
  413004:	eb00 4013 	add.w	r0, r0, r3, lsr #16
  413008:	b299      	uxth	r1, r3
  41300a:	4633      	mov	r3, r6
  41300c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
  413010:	45be      	cmp	lr, r7
  413012:	ea4f 4510 	mov.w	r5, r0, lsr #16
  413016:	f843 1b04 	str.w	r1, [r3], #4
  41301a:	d8e6      	bhi.n	412fea <__multiply+0x7a>
  41301c:	6075      	str	r5, [r6, #4]
  41301e:	f852 3c04 	ldr.w	r3, [r2, #-4]
  413022:	ea5f 4b13 	movs.w	fp, r3, lsr #16
  413026:	d020      	beq.n	41306a <__multiply+0xfa>
  413028:	f8dc 3000 	ldr.w	r3, [ip]
  41302c:	4667      	mov	r7, ip
  41302e:	4618      	mov	r0, r3
  413030:	464d      	mov	r5, r9
  413032:	2100      	movs	r1, #0
  413034:	e000      	b.n	413038 <__multiply+0xc8>
  413036:	4637      	mov	r7, r6
  413038:	882c      	ldrh	r4, [r5, #0]
  41303a:	0c00      	lsrs	r0, r0, #16
  41303c:	fb0b 0004 	mla	r0, fp, r4, r0
  413040:	4401      	add	r1, r0
  413042:	b29c      	uxth	r4, r3
  413044:	463e      	mov	r6, r7
  413046:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
  41304a:	f846 3b04 	str.w	r3, [r6], #4
  41304e:	6878      	ldr	r0, [r7, #4]
  413050:	f855 4b04 	ldr.w	r4, [r5], #4
  413054:	b283      	uxth	r3, r0
  413056:	0c24      	lsrs	r4, r4, #16
  413058:	fb0b 3404 	mla	r4, fp, r4, r3
  41305c:	eb04 4311 	add.w	r3, r4, r1, lsr #16
  413060:	45ae      	cmp	lr, r5
  413062:	ea4f 4113 	mov.w	r1, r3, lsr #16
  413066:	d8e6      	bhi.n	413036 <__multiply+0xc6>
  413068:	607b      	str	r3, [r7, #4]
  41306a:	4592      	cmp	sl, r2
  41306c:	f10c 0c04 	add.w	ip, ip, #4
  413070:	d8af      	bhi.n	412fd2 <__multiply+0x62>
  413072:	f8dd 9004 	ldr.w	r9, [sp, #4]
  413076:	f1b8 0f00 	cmp.w	r8, #0
  41307a:	dd0b      	ble.n	413094 <__multiply+0x124>
  41307c:	f859 3c04 	ldr.w	r3, [r9, #-4]
  413080:	f1a9 0904 	sub.w	r9, r9, #4
  413084:	b11b      	cbz	r3, 41308e <__multiply+0x11e>
  413086:	e005      	b.n	413094 <__multiply+0x124>
  413088:	f859 3d04 	ldr.w	r3, [r9, #-4]!
  41308c:	b913      	cbnz	r3, 413094 <__multiply+0x124>
  41308e:	f1b8 0801 	subs.w	r8, r8, #1
  413092:	d1f9      	bne.n	413088 <__multiply+0x118>
  413094:	9800      	ldr	r0, [sp, #0]
  413096:	f8c0 8010 	str.w	r8, [r0, #16]
  41309a:	b003      	add	sp, #12
  41309c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004130a0 <__pow5mult>:
  4130a0:	f012 0303 	ands.w	r3, r2, #3
  4130a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4130a8:	4614      	mov	r4, r2
  4130aa:	4607      	mov	r7, r0
  4130ac:	d12e      	bne.n	41310c <__pow5mult+0x6c>
  4130ae:	460e      	mov	r6, r1
  4130b0:	10a4      	asrs	r4, r4, #2
  4130b2:	d01c      	beq.n	4130ee <__pow5mult+0x4e>
  4130b4:	6cbd      	ldr	r5, [r7, #72]	; 0x48
  4130b6:	b395      	cbz	r5, 41311e <__pow5mult+0x7e>
  4130b8:	07e3      	lsls	r3, r4, #31
  4130ba:	f04f 0800 	mov.w	r8, #0
  4130be:	d406      	bmi.n	4130ce <__pow5mult+0x2e>
  4130c0:	1064      	asrs	r4, r4, #1
  4130c2:	d014      	beq.n	4130ee <__pow5mult+0x4e>
  4130c4:	6828      	ldr	r0, [r5, #0]
  4130c6:	b1a8      	cbz	r0, 4130f4 <__pow5mult+0x54>
  4130c8:	4605      	mov	r5, r0
  4130ca:	07e3      	lsls	r3, r4, #31
  4130cc:	d5f8      	bpl.n	4130c0 <__pow5mult+0x20>
  4130ce:	462a      	mov	r2, r5
  4130d0:	4631      	mov	r1, r6
  4130d2:	4638      	mov	r0, r7
  4130d4:	f7ff ff4c 	bl	412f70 <__multiply>
  4130d8:	b1b6      	cbz	r6, 413108 <__pow5mult+0x68>
  4130da:	6872      	ldr	r2, [r6, #4]
  4130dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  4130de:	1064      	asrs	r4, r4, #1
  4130e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  4130e4:	6031      	str	r1, [r6, #0]
  4130e6:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  4130ea:	4606      	mov	r6, r0
  4130ec:	d1ea      	bne.n	4130c4 <__pow5mult+0x24>
  4130ee:	4630      	mov	r0, r6
  4130f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4130f4:	462a      	mov	r2, r5
  4130f6:	4629      	mov	r1, r5
  4130f8:	4638      	mov	r0, r7
  4130fa:	f7ff ff39 	bl	412f70 <__multiply>
  4130fe:	6028      	str	r0, [r5, #0]
  413100:	f8c0 8000 	str.w	r8, [r0]
  413104:	4605      	mov	r5, r0
  413106:	e7e0      	b.n	4130ca <__pow5mult+0x2a>
  413108:	4606      	mov	r6, r0
  41310a:	e7d9      	b.n	4130c0 <__pow5mult+0x20>
  41310c:	1e5a      	subs	r2, r3, #1
  41310e:	4d0b      	ldr	r5, [pc, #44]	; (41313c <__pow5mult+0x9c>)
  413110:	2300      	movs	r3, #0
  413112:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  413116:	f7ff fe93 	bl	412e40 <__multadd>
  41311a:	4606      	mov	r6, r0
  41311c:	e7c8      	b.n	4130b0 <__pow5mult+0x10>
  41311e:	2101      	movs	r1, #1
  413120:	4638      	mov	r0, r7
  413122:	f7ff fe5d 	bl	412de0 <_Balloc>
  413126:	f240 2171 	movw	r1, #625	; 0x271
  41312a:	2201      	movs	r2, #1
  41312c:	2300      	movs	r3, #0
  41312e:	6141      	str	r1, [r0, #20]
  413130:	6102      	str	r2, [r0, #16]
  413132:	4605      	mov	r5, r0
  413134:	64b8      	str	r0, [r7, #72]	; 0x48
  413136:	6003      	str	r3, [r0, #0]
  413138:	e7be      	b.n	4130b8 <__pow5mult+0x18>
  41313a:	bf00      	nop
  41313c:	004178a0 	.word	0x004178a0

00413140 <__lshift>:
  413140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  413144:	4691      	mov	r9, r2
  413146:	690a      	ldr	r2, [r1, #16]
  413148:	688b      	ldr	r3, [r1, #8]
  41314a:	ea4f 1469 	mov.w	r4, r9, asr #5
  41314e:	eb04 0802 	add.w	r8, r4, r2
  413152:	f108 0501 	add.w	r5, r8, #1
  413156:	429d      	cmp	r5, r3
  413158:	460e      	mov	r6, r1
  41315a:	4682      	mov	sl, r0
  41315c:	6849      	ldr	r1, [r1, #4]
  41315e:	dd04      	ble.n	41316a <__lshift+0x2a>
  413160:	005b      	lsls	r3, r3, #1
  413162:	429d      	cmp	r5, r3
  413164:	f101 0101 	add.w	r1, r1, #1
  413168:	dcfa      	bgt.n	413160 <__lshift+0x20>
  41316a:	4650      	mov	r0, sl
  41316c:	f7ff fe38 	bl	412de0 <_Balloc>
  413170:	2c00      	cmp	r4, #0
  413172:	f100 0214 	add.w	r2, r0, #20
  413176:	dd38      	ble.n	4131ea <__lshift+0xaa>
  413178:	eb02 0384 	add.w	r3, r2, r4, lsl #2
  41317c:	2100      	movs	r1, #0
  41317e:	f842 1b04 	str.w	r1, [r2], #4
  413182:	4293      	cmp	r3, r2
  413184:	d1fb      	bne.n	41317e <__lshift+0x3e>
  413186:	6934      	ldr	r4, [r6, #16]
  413188:	f106 0114 	add.w	r1, r6, #20
  41318c:	f019 091f 	ands.w	r9, r9, #31
  413190:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  413194:	d021      	beq.n	4131da <__lshift+0x9a>
  413196:	f1c9 0220 	rsb	r2, r9, #32
  41319a:	2400      	movs	r4, #0
  41319c:	680f      	ldr	r7, [r1, #0]
  41319e:	fa07 fc09 	lsl.w	ip, r7, r9
  4131a2:	ea4c 0404 	orr.w	r4, ip, r4
  4131a6:	469c      	mov	ip, r3
  4131a8:	f843 4b04 	str.w	r4, [r3], #4
  4131ac:	f851 4b04 	ldr.w	r4, [r1], #4
  4131b0:	458e      	cmp	lr, r1
  4131b2:	fa24 f402 	lsr.w	r4, r4, r2
  4131b6:	d8f1      	bhi.n	41319c <__lshift+0x5c>
  4131b8:	f8cc 4004 	str.w	r4, [ip, #4]
  4131bc:	b10c      	cbz	r4, 4131c2 <__lshift+0x82>
  4131be:	f108 0502 	add.w	r5, r8, #2
  4131c2:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
  4131c6:	6872      	ldr	r2, [r6, #4]
  4131c8:	3d01      	subs	r5, #1
  4131ca:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  4131ce:	6105      	str	r5, [r0, #16]
  4131d0:	6031      	str	r1, [r6, #0]
  4131d2:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  4131d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4131da:	3b04      	subs	r3, #4
  4131dc:	f851 2b04 	ldr.w	r2, [r1], #4
  4131e0:	f843 2f04 	str.w	r2, [r3, #4]!
  4131e4:	458e      	cmp	lr, r1
  4131e6:	d8f9      	bhi.n	4131dc <__lshift+0x9c>
  4131e8:	e7eb      	b.n	4131c2 <__lshift+0x82>
  4131ea:	4613      	mov	r3, r2
  4131ec:	e7cb      	b.n	413186 <__lshift+0x46>
  4131ee:	bf00      	nop

004131f0 <__mcmp>:
  4131f0:	6902      	ldr	r2, [r0, #16]
  4131f2:	690b      	ldr	r3, [r1, #16]
  4131f4:	1ad2      	subs	r2, r2, r3
  4131f6:	d112      	bne.n	41321e <__mcmp+0x2e>
  4131f8:	009b      	lsls	r3, r3, #2
  4131fa:	3014      	adds	r0, #20
  4131fc:	3114      	adds	r1, #20
  4131fe:	4419      	add	r1, r3
  413200:	b410      	push	{r4}
  413202:	4403      	add	r3, r0
  413204:	e001      	b.n	41320a <__mcmp+0x1a>
  413206:	4298      	cmp	r0, r3
  413208:	d20b      	bcs.n	413222 <__mcmp+0x32>
  41320a:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  41320e:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  413212:	4294      	cmp	r4, r2
  413214:	d0f7      	beq.n	413206 <__mcmp+0x16>
  413216:	d307      	bcc.n	413228 <__mcmp+0x38>
  413218:	2001      	movs	r0, #1
  41321a:	bc10      	pop	{r4}
  41321c:	4770      	bx	lr
  41321e:	4610      	mov	r0, r2
  413220:	4770      	bx	lr
  413222:	2000      	movs	r0, #0
  413224:	bc10      	pop	{r4}
  413226:	4770      	bx	lr
  413228:	f04f 30ff 	mov.w	r0, #4294967295
  41322c:	e7f5      	b.n	41321a <__mcmp+0x2a>
  41322e:	bf00      	nop

00413230 <__mdiff>:
  413230:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  413234:	690b      	ldr	r3, [r1, #16]
  413236:	460f      	mov	r7, r1
  413238:	6911      	ldr	r1, [r2, #16]
  41323a:	1a5b      	subs	r3, r3, r1
  41323c:	2b00      	cmp	r3, #0
  41323e:	4690      	mov	r8, r2
  413240:	d117      	bne.n	413272 <__mdiff+0x42>
  413242:	0089      	lsls	r1, r1, #2
  413244:	f107 0214 	add.w	r2, r7, #20
  413248:	f108 0514 	add.w	r5, r8, #20
  41324c:	1853      	adds	r3, r2, r1
  41324e:	4429      	add	r1, r5
  413250:	e001      	b.n	413256 <__mdiff+0x26>
  413252:	429a      	cmp	r2, r3
  413254:	d25e      	bcs.n	413314 <__mdiff+0xe4>
  413256:	f853 6d04 	ldr.w	r6, [r3, #-4]!
  41325a:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  41325e:	42a6      	cmp	r6, r4
  413260:	d0f7      	beq.n	413252 <__mdiff+0x22>
  413262:	d260      	bcs.n	413326 <__mdiff+0xf6>
  413264:	463b      	mov	r3, r7
  413266:	4614      	mov	r4, r2
  413268:	4647      	mov	r7, r8
  41326a:	f04f 0901 	mov.w	r9, #1
  41326e:	4698      	mov	r8, r3
  413270:	e006      	b.n	413280 <__mdiff+0x50>
  413272:	db5d      	blt.n	413330 <__mdiff+0x100>
  413274:	f107 0514 	add.w	r5, r7, #20
  413278:	f102 0414 	add.w	r4, r2, #20
  41327c:	f04f 0900 	mov.w	r9, #0
  413280:	6879      	ldr	r1, [r7, #4]
  413282:	f7ff fdad 	bl	412de0 <_Balloc>
  413286:	f8d8 3010 	ldr.w	r3, [r8, #16]
  41328a:	693e      	ldr	r6, [r7, #16]
  41328c:	f8c0 900c 	str.w	r9, [r0, #12]
  413290:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  413294:	46a6      	mov	lr, r4
  413296:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  41329a:	f100 0414 	add.w	r4, r0, #20
  41329e:	2300      	movs	r3, #0
  4132a0:	f85e 1b04 	ldr.w	r1, [lr], #4
  4132a4:	f855 8b04 	ldr.w	r8, [r5], #4
  4132a8:	b28a      	uxth	r2, r1
  4132aa:	fa13 f388 	uxtah	r3, r3, r8
  4132ae:	0c09      	lsrs	r1, r1, #16
  4132b0:	1a9a      	subs	r2, r3, r2
  4132b2:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  4132b6:	eb03 4322 	add.w	r3, r3, r2, asr #16
  4132ba:	b292      	uxth	r2, r2
  4132bc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  4132c0:	45f4      	cmp	ip, lr
  4132c2:	f844 2b04 	str.w	r2, [r4], #4
  4132c6:	ea4f 4323 	mov.w	r3, r3, asr #16
  4132ca:	d8e9      	bhi.n	4132a0 <__mdiff+0x70>
  4132cc:	42af      	cmp	r7, r5
  4132ce:	d917      	bls.n	413300 <__mdiff+0xd0>
  4132d0:	46a4      	mov	ip, r4
  4132d2:	4629      	mov	r1, r5
  4132d4:	f851 eb04 	ldr.w	lr, [r1], #4
  4132d8:	fa13 f28e 	uxtah	r2, r3, lr
  4132dc:	1413      	asrs	r3, r2, #16
  4132de:	eb03 431e 	add.w	r3, r3, lr, lsr #16
  4132e2:	b292      	uxth	r2, r2
  4132e4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  4132e8:	428f      	cmp	r7, r1
  4132ea:	f84c 2b04 	str.w	r2, [ip], #4
  4132ee:	ea4f 4323 	mov.w	r3, r3, asr #16
  4132f2:	d8ef      	bhi.n	4132d4 <__mdiff+0xa4>
  4132f4:	43ed      	mvns	r5, r5
  4132f6:	443d      	add	r5, r7
  4132f8:	f025 0503 	bic.w	r5, r5, #3
  4132fc:	3504      	adds	r5, #4
  4132fe:	442c      	add	r4, r5
  413300:	3c04      	subs	r4, #4
  413302:	b922      	cbnz	r2, 41330e <__mdiff+0xde>
  413304:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  413308:	3e01      	subs	r6, #1
  41330a:	2b00      	cmp	r3, #0
  41330c:	d0fa      	beq.n	413304 <__mdiff+0xd4>
  41330e:	6106      	str	r6, [r0, #16]
  413310:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  413314:	2100      	movs	r1, #0
  413316:	f7ff fd63 	bl	412de0 <_Balloc>
  41331a:	2201      	movs	r2, #1
  41331c:	2300      	movs	r3, #0
  41331e:	6102      	str	r2, [r0, #16]
  413320:	6143      	str	r3, [r0, #20]
  413322:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  413326:	462c      	mov	r4, r5
  413328:	f04f 0900 	mov.w	r9, #0
  41332c:	4615      	mov	r5, r2
  41332e:	e7a7      	b.n	413280 <__mdiff+0x50>
  413330:	463b      	mov	r3, r7
  413332:	f107 0414 	add.w	r4, r7, #20
  413336:	f108 0514 	add.w	r5, r8, #20
  41333a:	4647      	mov	r7, r8
  41333c:	f04f 0901 	mov.w	r9, #1
  413340:	4698      	mov	r8, r3
  413342:	e79d      	b.n	413280 <__mdiff+0x50>

00413344 <__d2b>:
  413344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  413348:	b082      	sub	sp, #8
  41334a:	2101      	movs	r1, #1
  41334c:	461c      	mov	r4, r3
  41334e:	f3c3 570a 	ubfx	r7, r3, #20, #11
  413352:	4615      	mov	r5, r2
  413354:	9e08      	ldr	r6, [sp, #32]
  413356:	f7ff fd43 	bl	412de0 <_Balloc>
  41335a:	f3c4 0413 	ubfx	r4, r4, #0, #20
  41335e:	4680      	mov	r8, r0
  413360:	b10f      	cbz	r7, 413366 <__d2b+0x22>
  413362:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  413366:	9401      	str	r4, [sp, #4]
  413368:	b31d      	cbz	r5, 4133b2 <__d2b+0x6e>
  41336a:	a802      	add	r0, sp, #8
  41336c:	f840 5d08 	str.w	r5, [r0, #-8]!
  413370:	f7ff fdc6 	bl	412f00 <__lo0bits>
  413374:	2800      	cmp	r0, #0
  413376:	d134      	bne.n	4133e2 <__d2b+0x9e>
  413378:	e89d 000c 	ldmia.w	sp, {r2, r3}
  41337c:	f8c8 2014 	str.w	r2, [r8, #20]
  413380:	2b00      	cmp	r3, #0
  413382:	bf0c      	ite	eq
  413384:	2101      	moveq	r1, #1
  413386:	2102      	movne	r1, #2
  413388:	f8c8 3018 	str.w	r3, [r8, #24]
  41338c:	f8c8 1010 	str.w	r1, [r8, #16]
  413390:	b9df      	cbnz	r7, 4133ca <__d2b+0x86>
  413392:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  413396:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  41339a:	6030      	str	r0, [r6, #0]
  41339c:	6918      	ldr	r0, [r3, #16]
  41339e:	f7ff fd8f 	bl	412ec0 <__hi0bits>
  4133a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4133a4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  4133a8:	6018      	str	r0, [r3, #0]
  4133aa:	4640      	mov	r0, r8
  4133ac:	b002      	add	sp, #8
  4133ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4133b2:	a801      	add	r0, sp, #4
  4133b4:	f7ff fda4 	bl	412f00 <__lo0bits>
  4133b8:	9b01      	ldr	r3, [sp, #4]
  4133ba:	f8c8 3014 	str.w	r3, [r8, #20]
  4133be:	2101      	movs	r1, #1
  4133c0:	3020      	adds	r0, #32
  4133c2:	f8c8 1010 	str.w	r1, [r8, #16]
  4133c6:	2f00      	cmp	r7, #0
  4133c8:	d0e3      	beq.n	413392 <__d2b+0x4e>
  4133ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4133cc:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  4133d0:	4407      	add	r7, r0
  4133d2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  4133d6:	6037      	str	r7, [r6, #0]
  4133d8:	6018      	str	r0, [r3, #0]
  4133da:	4640      	mov	r0, r8
  4133dc:	b002      	add	sp, #8
  4133de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4133e2:	e89d 000c 	ldmia.w	sp, {r2, r3}
  4133e6:	f1c0 0120 	rsb	r1, r0, #32
  4133ea:	fa03 f101 	lsl.w	r1, r3, r1
  4133ee:	430a      	orrs	r2, r1
  4133f0:	40c3      	lsrs	r3, r0
  4133f2:	9301      	str	r3, [sp, #4]
  4133f4:	f8c8 2014 	str.w	r2, [r8, #20]
  4133f8:	e7c2      	b.n	413380 <__d2b+0x3c>
  4133fa:	bf00      	nop

004133fc <_realloc_r>:
  4133fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  413400:	4617      	mov	r7, r2
  413402:	b083      	sub	sp, #12
  413404:	2900      	cmp	r1, #0
  413406:	f000 80c1 	beq.w	41358c <_realloc_r+0x190>
  41340a:	460e      	mov	r6, r1
  41340c:	4681      	mov	r9, r0
  41340e:	f107 050b 	add.w	r5, r7, #11
  413412:	f7ff fce1 	bl	412dd8 <__malloc_lock>
  413416:	f856 ec04 	ldr.w	lr, [r6, #-4]
  41341a:	2d16      	cmp	r5, #22
  41341c:	f02e 0403 	bic.w	r4, lr, #3
  413420:	f1a6 0808 	sub.w	r8, r6, #8
  413424:	d840      	bhi.n	4134a8 <_realloc_r+0xac>
  413426:	2210      	movs	r2, #16
  413428:	4615      	mov	r5, r2
  41342a:	42af      	cmp	r7, r5
  41342c:	d841      	bhi.n	4134b2 <_realloc_r+0xb6>
  41342e:	4294      	cmp	r4, r2
  413430:	da75      	bge.n	41351e <_realloc_r+0x122>
  413432:	4bc9      	ldr	r3, [pc, #804]	; (413758 <_realloc_r+0x35c>)
  413434:	6899      	ldr	r1, [r3, #8]
  413436:	eb08 0004 	add.w	r0, r8, r4
  41343a:	4288      	cmp	r0, r1
  41343c:	6841      	ldr	r1, [r0, #4]
  41343e:	f000 80d9 	beq.w	4135f4 <_realloc_r+0x1f8>
  413442:	f021 0301 	bic.w	r3, r1, #1
  413446:	4403      	add	r3, r0
  413448:	685b      	ldr	r3, [r3, #4]
  41344a:	07db      	lsls	r3, r3, #31
  41344c:	d57d      	bpl.n	41354a <_realloc_r+0x14e>
  41344e:	f01e 0f01 	tst.w	lr, #1
  413452:	d035      	beq.n	4134c0 <_realloc_r+0xc4>
  413454:	4639      	mov	r1, r7
  413456:	4648      	mov	r0, r9
  413458:	f7ff f94e 	bl	4126f8 <_malloc_r>
  41345c:	4607      	mov	r7, r0
  41345e:	b1e0      	cbz	r0, 41349a <_realloc_r+0x9e>
  413460:	f856 3c04 	ldr.w	r3, [r6, #-4]
  413464:	f023 0301 	bic.w	r3, r3, #1
  413468:	4443      	add	r3, r8
  41346a:	f1a0 0208 	sub.w	r2, r0, #8
  41346e:	429a      	cmp	r2, r3
  413470:	f000 8144 	beq.w	4136fc <_realloc_r+0x300>
  413474:	1f22      	subs	r2, r4, #4
  413476:	2a24      	cmp	r2, #36	; 0x24
  413478:	f200 8131 	bhi.w	4136de <_realloc_r+0x2e2>
  41347c:	2a13      	cmp	r2, #19
  41347e:	f200 8104 	bhi.w	41368a <_realloc_r+0x28e>
  413482:	4603      	mov	r3, r0
  413484:	4632      	mov	r2, r6
  413486:	6811      	ldr	r1, [r2, #0]
  413488:	6019      	str	r1, [r3, #0]
  41348a:	6851      	ldr	r1, [r2, #4]
  41348c:	6059      	str	r1, [r3, #4]
  41348e:	6892      	ldr	r2, [r2, #8]
  413490:	609a      	str	r2, [r3, #8]
  413492:	4631      	mov	r1, r6
  413494:	4648      	mov	r0, r9
  413496:	f7fe fe11 	bl	4120bc <_free_r>
  41349a:	4648      	mov	r0, r9
  41349c:	f7ff fc9e 	bl	412ddc <__malloc_unlock>
  4134a0:	4638      	mov	r0, r7
  4134a2:	b003      	add	sp, #12
  4134a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4134a8:	f025 0507 	bic.w	r5, r5, #7
  4134ac:	2d00      	cmp	r5, #0
  4134ae:	462a      	mov	r2, r5
  4134b0:	dabb      	bge.n	41342a <_realloc_r+0x2e>
  4134b2:	230c      	movs	r3, #12
  4134b4:	2000      	movs	r0, #0
  4134b6:	f8c9 3000 	str.w	r3, [r9]
  4134ba:	b003      	add	sp, #12
  4134bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4134c0:	f856 3c08 	ldr.w	r3, [r6, #-8]
  4134c4:	ebc3 0a08 	rsb	sl, r3, r8
  4134c8:	f8da 3004 	ldr.w	r3, [sl, #4]
  4134cc:	f023 0c03 	bic.w	ip, r3, #3
  4134d0:	eb04 030c 	add.w	r3, r4, ip
  4134d4:	4293      	cmp	r3, r2
  4134d6:	dbbd      	blt.n	413454 <_realloc_r+0x58>
  4134d8:	4657      	mov	r7, sl
  4134da:	f8da 100c 	ldr.w	r1, [sl, #12]
  4134de:	f857 0f08 	ldr.w	r0, [r7, #8]!
  4134e2:	1f22      	subs	r2, r4, #4
  4134e4:	2a24      	cmp	r2, #36	; 0x24
  4134e6:	60c1      	str	r1, [r0, #12]
  4134e8:	6088      	str	r0, [r1, #8]
  4134ea:	f200 8117 	bhi.w	41371c <_realloc_r+0x320>
  4134ee:	2a13      	cmp	r2, #19
  4134f0:	f240 8112 	bls.w	413718 <_realloc_r+0x31c>
  4134f4:	6831      	ldr	r1, [r6, #0]
  4134f6:	f8ca 1008 	str.w	r1, [sl, #8]
  4134fa:	6871      	ldr	r1, [r6, #4]
  4134fc:	f8ca 100c 	str.w	r1, [sl, #12]
  413500:	2a1b      	cmp	r2, #27
  413502:	f200 812b 	bhi.w	41375c <_realloc_r+0x360>
  413506:	3608      	adds	r6, #8
  413508:	f10a 0210 	add.w	r2, sl, #16
  41350c:	6831      	ldr	r1, [r6, #0]
  41350e:	6011      	str	r1, [r2, #0]
  413510:	6871      	ldr	r1, [r6, #4]
  413512:	6051      	str	r1, [r2, #4]
  413514:	68b1      	ldr	r1, [r6, #8]
  413516:	6091      	str	r1, [r2, #8]
  413518:	463e      	mov	r6, r7
  41351a:	461c      	mov	r4, r3
  41351c:	46d0      	mov	r8, sl
  41351e:	1b63      	subs	r3, r4, r5
  413520:	2b0f      	cmp	r3, #15
  413522:	d81d      	bhi.n	413560 <_realloc_r+0x164>
  413524:	f8d8 3004 	ldr.w	r3, [r8, #4]
  413528:	f003 0301 	and.w	r3, r3, #1
  41352c:	4323      	orrs	r3, r4
  41352e:	4444      	add	r4, r8
  413530:	f8c8 3004 	str.w	r3, [r8, #4]
  413534:	6863      	ldr	r3, [r4, #4]
  413536:	f043 0301 	orr.w	r3, r3, #1
  41353a:	6063      	str	r3, [r4, #4]
  41353c:	4648      	mov	r0, r9
  41353e:	f7ff fc4d 	bl	412ddc <__malloc_unlock>
  413542:	4630      	mov	r0, r6
  413544:	b003      	add	sp, #12
  413546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41354a:	f021 0103 	bic.w	r1, r1, #3
  41354e:	4421      	add	r1, r4
  413550:	4291      	cmp	r1, r2
  413552:	db21      	blt.n	413598 <_realloc_r+0x19c>
  413554:	68c3      	ldr	r3, [r0, #12]
  413556:	6882      	ldr	r2, [r0, #8]
  413558:	460c      	mov	r4, r1
  41355a:	60d3      	str	r3, [r2, #12]
  41355c:	609a      	str	r2, [r3, #8]
  41355e:	e7de      	b.n	41351e <_realloc_r+0x122>
  413560:	f8d8 2004 	ldr.w	r2, [r8, #4]
  413564:	eb08 0105 	add.w	r1, r8, r5
  413568:	f002 0201 	and.w	r2, r2, #1
  41356c:	4315      	orrs	r5, r2
  41356e:	f043 0201 	orr.w	r2, r3, #1
  413572:	440b      	add	r3, r1
  413574:	f8c8 5004 	str.w	r5, [r8, #4]
  413578:	604a      	str	r2, [r1, #4]
  41357a:	685a      	ldr	r2, [r3, #4]
  41357c:	f042 0201 	orr.w	r2, r2, #1
  413580:	3108      	adds	r1, #8
  413582:	605a      	str	r2, [r3, #4]
  413584:	4648      	mov	r0, r9
  413586:	f7fe fd99 	bl	4120bc <_free_r>
  41358a:	e7d7      	b.n	41353c <_realloc_r+0x140>
  41358c:	4611      	mov	r1, r2
  41358e:	b003      	add	sp, #12
  413590:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  413594:	f7ff b8b0 	b.w	4126f8 <_malloc_r>
  413598:	f01e 0f01 	tst.w	lr, #1
  41359c:	f47f af5a 	bne.w	413454 <_realloc_r+0x58>
  4135a0:	f856 3c08 	ldr.w	r3, [r6, #-8]
  4135a4:	ebc3 0a08 	rsb	sl, r3, r8
  4135a8:	f8da 3004 	ldr.w	r3, [sl, #4]
  4135ac:	f023 0c03 	bic.w	ip, r3, #3
  4135b0:	eb01 0e0c 	add.w	lr, r1, ip
  4135b4:	4596      	cmp	lr, r2
  4135b6:	db8b      	blt.n	4134d0 <_realloc_r+0xd4>
  4135b8:	68c3      	ldr	r3, [r0, #12]
  4135ba:	6882      	ldr	r2, [r0, #8]
  4135bc:	4657      	mov	r7, sl
  4135be:	60d3      	str	r3, [r2, #12]
  4135c0:	609a      	str	r2, [r3, #8]
  4135c2:	f857 1f08 	ldr.w	r1, [r7, #8]!
  4135c6:	f8da 300c 	ldr.w	r3, [sl, #12]
  4135ca:	60cb      	str	r3, [r1, #12]
  4135cc:	1f22      	subs	r2, r4, #4
  4135ce:	2a24      	cmp	r2, #36	; 0x24
  4135d0:	6099      	str	r1, [r3, #8]
  4135d2:	f200 8099 	bhi.w	413708 <_realloc_r+0x30c>
  4135d6:	2a13      	cmp	r2, #19
  4135d8:	d962      	bls.n	4136a0 <_realloc_r+0x2a4>
  4135da:	6833      	ldr	r3, [r6, #0]
  4135dc:	f8ca 3008 	str.w	r3, [sl, #8]
  4135e0:	6873      	ldr	r3, [r6, #4]
  4135e2:	f8ca 300c 	str.w	r3, [sl, #12]
  4135e6:	2a1b      	cmp	r2, #27
  4135e8:	f200 80a0 	bhi.w	41372c <_realloc_r+0x330>
  4135ec:	3608      	adds	r6, #8
  4135ee:	f10a 0310 	add.w	r3, sl, #16
  4135f2:	e056      	b.n	4136a2 <_realloc_r+0x2a6>
  4135f4:	f021 0b03 	bic.w	fp, r1, #3
  4135f8:	44a3      	add	fp, r4
  4135fa:	f105 0010 	add.w	r0, r5, #16
  4135fe:	4583      	cmp	fp, r0
  413600:	da59      	bge.n	4136b6 <_realloc_r+0x2ba>
  413602:	f01e 0f01 	tst.w	lr, #1
  413606:	f47f af25 	bne.w	413454 <_realloc_r+0x58>
  41360a:	f856 1c08 	ldr.w	r1, [r6, #-8]
  41360e:	ebc1 0a08 	rsb	sl, r1, r8
  413612:	f8da 1004 	ldr.w	r1, [sl, #4]
  413616:	f021 0c03 	bic.w	ip, r1, #3
  41361a:	44e3      	add	fp, ip
  41361c:	4558      	cmp	r0, fp
  41361e:	f73f af57 	bgt.w	4134d0 <_realloc_r+0xd4>
  413622:	4657      	mov	r7, sl
  413624:	f8da 100c 	ldr.w	r1, [sl, #12]
  413628:	f857 0f08 	ldr.w	r0, [r7, #8]!
  41362c:	1f22      	subs	r2, r4, #4
  41362e:	2a24      	cmp	r2, #36	; 0x24
  413630:	60c1      	str	r1, [r0, #12]
  413632:	6088      	str	r0, [r1, #8]
  413634:	f200 80b4 	bhi.w	4137a0 <_realloc_r+0x3a4>
  413638:	2a13      	cmp	r2, #19
  41363a:	f240 80a5 	bls.w	413788 <_realloc_r+0x38c>
  41363e:	6831      	ldr	r1, [r6, #0]
  413640:	f8ca 1008 	str.w	r1, [sl, #8]
  413644:	6871      	ldr	r1, [r6, #4]
  413646:	f8ca 100c 	str.w	r1, [sl, #12]
  41364a:	2a1b      	cmp	r2, #27
  41364c:	f200 80af 	bhi.w	4137ae <_realloc_r+0x3b2>
  413650:	3608      	adds	r6, #8
  413652:	f10a 0210 	add.w	r2, sl, #16
  413656:	6831      	ldr	r1, [r6, #0]
  413658:	6011      	str	r1, [r2, #0]
  41365a:	6871      	ldr	r1, [r6, #4]
  41365c:	6051      	str	r1, [r2, #4]
  41365e:	68b1      	ldr	r1, [r6, #8]
  413660:	6091      	str	r1, [r2, #8]
  413662:	eb0a 0105 	add.w	r1, sl, r5
  413666:	ebc5 020b 	rsb	r2, r5, fp
  41366a:	f042 0201 	orr.w	r2, r2, #1
  41366e:	6099      	str	r1, [r3, #8]
  413670:	604a      	str	r2, [r1, #4]
  413672:	f8da 3004 	ldr.w	r3, [sl, #4]
  413676:	f003 0301 	and.w	r3, r3, #1
  41367a:	431d      	orrs	r5, r3
  41367c:	4648      	mov	r0, r9
  41367e:	f8ca 5004 	str.w	r5, [sl, #4]
  413682:	f7ff fbab 	bl	412ddc <__malloc_unlock>
  413686:	4638      	mov	r0, r7
  413688:	e75c      	b.n	413544 <_realloc_r+0x148>
  41368a:	6833      	ldr	r3, [r6, #0]
  41368c:	6003      	str	r3, [r0, #0]
  41368e:	6873      	ldr	r3, [r6, #4]
  413690:	6043      	str	r3, [r0, #4]
  413692:	2a1b      	cmp	r2, #27
  413694:	d827      	bhi.n	4136e6 <_realloc_r+0x2ea>
  413696:	f100 0308 	add.w	r3, r0, #8
  41369a:	f106 0208 	add.w	r2, r6, #8
  41369e:	e6f2      	b.n	413486 <_realloc_r+0x8a>
  4136a0:	463b      	mov	r3, r7
  4136a2:	6832      	ldr	r2, [r6, #0]
  4136a4:	601a      	str	r2, [r3, #0]
  4136a6:	6872      	ldr	r2, [r6, #4]
  4136a8:	605a      	str	r2, [r3, #4]
  4136aa:	68b2      	ldr	r2, [r6, #8]
  4136ac:	609a      	str	r2, [r3, #8]
  4136ae:	463e      	mov	r6, r7
  4136b0:	4674      	mov	r4, lr
  4136b2:	46d0      	mov	r8, sl
  4136b4:	e733      	b.n	41351e <_realloc_r+0x122>
  4136b6:	eb08 0105 	add.w	r1, r8, r5
  4136ba:	ebc5 0b0b 	rsb	fp, r5, fp
  4136be:	f04b 0201 	orr.w	r2, fp, #1
  4136c2:	6099      	str	r1, [r3, #8]
  4136c4:	604a      	str	r2, [r1, #4]
  4136c6:	f856 3c04 	ldr.w	r3, [r6, #-4]
  4136ca:	f003 0301 	and.w	r3, r3, #1
  4136ce:	431d      	orrs	r5, r3
  4136d0:	4648      	mov	r0, r9
  4136d2:	f846 5c04 	str.w	r5, [r6, #-4]
  4136d6:	f7ff fb81 	bl	412ddc <__malloc_unlock>
  4136da:	4630      	mov	r0, r6
  4136dc:	e732      	b.n	413544 <_realloc_r+0x148>
  4136de:	4631      	mov	r1, r6
  4136e0:	f7ff fb16 	bl	412d10 <memmove>
  4136e4:	e6d5      	b.n	413492 <_realloc_r+0x96>
  4136e6:	68b3      	ldr	r3, [r6, #8]
  4136e8:	6083      	str	r3, [r0, #8]
  4136ea:	68f3      	ldr	r3, [r6, #12]
  4136ec:	60c3      	str	r3, [r0, #12]
  4136ee:	2a24      	cmp	r2, #36	; 0x24
  4136f0:	d028      	beq.n	413744 <_realloc_r+0x348>
  4136f2:	f100 0310 	add.w	r3, r0, #16
  4136f6:	f106 0210 	add.w	r2, r6, #16
  4136fa:	e6c4      	b.n	413486 <_realloc_r+0x8a>
  4136fc:	f850 3c04 	ldr.w	r3, [r0, #-4]
  413700:	f023 0303 	bic.w	r3, r3, #3
  413704:	441c      	add	r4, r3
  413706:	e70a      	b.n	41351e <_realloc_r+0x122>
  413708:	4631      	mov	r1, r6
  41370a:	4638      	mov	r0, r7
  41370c:	4674      	mov	r4, lr
  41370e:	46d0      	mov	r8, sl
  413710:	f7ff fafe 	bl	412d10 <memmove>
  413714:	463e      	mov	r6, r7
  413716:	e702      	b.n	41351e <_realloc_r+0x122>
  413718:	463a      	mov	r2, r7
  41371a:	e6f7      	b.n	41350c <_realloc_r+0x110>
  41371c:	4631      	mov	r1, r6
  41371e:	4638      	mov	r0, r7
  413720:	461c      	mov	r4, r3
  413722:	46d0      	mov	r8, sl
  413724:	f7ff faf4 	bl	412d10 <memmove>
  413728:	463e      	mov	r6, r7
  41372a:	e6f8      	b.n	41351e <_realloc_r+0x122>
  41372c:	68b3      	ldr	r3, [r6, #8]
  41372e:	f8ca 3010 	str.w	r3, [sl, #16]
  413732:	68f3      	ldr	r3, [r6, #12]
  413734:	f8ca 3014 	str.w	r3, [sl, #20]
  413738:	2a24      	cmp	r2, #36	; 0x24
  41373a:	d01b      	beq.n	413774 <_realloc_r+0x378>
  41373c:	3610      	adds	r6, #16
  41373e:	f10a 0318 	add.w	r3, sl, #24
  413742:	e7ae      	b.n	4136a2 <_realloc_r+0x2a6>
  413744:	6933      	ldr	r3, [r6, #16]
  413746:	6103      	str	r3, [r0, #16]
  413748:	6973      	ldr	r3, [r6, #20]
  41374a:	6143      	str	r3, [r0, #20]
  41374c:	f106 0218 	add.w	r2, r6, #24
  413750:	f100 0318 	add.w	r3, r0, #24
  413754:	e697      	b.n	413486 <_realloc_r+0x8a>
  413756:	bf00      	nop
  413758:	204005c8 	.word	0x204005c8
  41375c:	68b1      	ldr	r1, [r6, #8]
  41375e:	f8ca 1010 	str.w	r1, [sl, #16]
  413762:	68f1      	ldr	r1, [r6, #12]
  413764:	f8ca 1014 	str.w	r1, [sl, #20]
  413768:	2a24      	cmp	r2, #36	; 0x24
  41376a:	d00f      	beq.n	41378c <_realloc_r+0x390>
  41376c:	3610      	adds	r6, #16
  41376e:	f10a 0218 	add.w	r2, sl, #24
  413772:	e6cb      	b.n	41350c <_realloc_r+0x110>
  413774:	6933      	ldr	r3, [r6, #16]
  413776:	f8ca 3018 	str.w	r3, [sl, #24]
  41377a:	6973      	ldr	r3, [r6, #20]
  41377c:	f8ca 301c 	str.w	r3, [sl, #28]
  413780:	3618      	adds	r6, #24
  413782:	f10a 0320 	add.w	r3, sl, #32
  413786:	e78c      	b.n	4136a2 <_realloc_r+0x2a6>
  413788:	463a      	mov	r2, r7
  41378a:	e764      	b.n	413656 <_realloc_r+0x25a>
  41378c:	6932      	ldr	r2, [r6, #16]
  41378e:	f8ca 2018 	str.w	r2, [sl, #24]
  413792:	6972      	ldr	r2, [r6, #20]
  413794:	f8ca 201c 	str.w	r2, [sl, #28]
  413798:	3618      	adds	r6, #24
  41379a:	f10a 0220 	add.w	r2, sl, #32
  41379e:	e6b5      	b.n	41350c <_realloc_r+0x110>
  4137a0:	4631      	mov	r1, r6
  4137a2:	4638      	mov	r0, r7
  4137a4:	9301      	str	r3, [sp, #4]
  4137a6:	f7ff fab3 	bl	412d10 <memmove>
  4137aa:	9b01      	ldr	r3, [sp, #4]
  4137ac:	e759      	b.n	413662 <_realloc_r+0x266>
  4137ae:	68b1      	ldr	r1, [r6, #8]
  4137b0:	f8ca 1010 	str.w	r1, [sl, #16]
  4137b4:	68f1      	ldr	r1, [r6, #12]
  4137b6:	f8ca 1014 	str.w	r1, [sl, #20]
  4137ba:	2a24      	cmp	r2, #36	; 0x24
  4137bc:	d003      	beq.n	4137c6 <_realloc_r+0x3ca>
  4137be:	3610      	adds	r6, #16
  4137c0:	f10a 0218 	add.w	r2, sl, #24
  4137c4:	e747      	b.n	413656 <_realloc_r+0x25a>
  4137c6:	6932      	ldr	r2, [r6, #16]
  4137c8:	f8ca 2018 	str.w	r2, [sl, #24]
  4137cc:	6972      	ldr	r2, [r6, #20]
  4137ce:	f8ca 201c 	str.w	r2, [sl, #28]
  4137d2:	3618      	adds	r6, #24
  4137d4:	f10a 0220 	add.w	r2, sl, #32
  4137d8:	e73d      	b.n	413656 <_realloc_r+0x25a>
  4137da:	bf00      	nop

004137dc <_sbrk_r>:
  4137dc:	b538      	push	{r3, r4, r5, lr}
  4137de:	4c07      	ldr	r4, [pc, #28]	; (4137fc <_sbrk_r+0x20>)
  4137e0:	2300      	movs	r3, #0
  4137e2:	4605      	mov	r5, r0
  4137e4:	4608      	mov	r0, r1
  4137e6:	6023      	str	r3, [r4, #0]
  4137e8:	f7ee fd2c 	bl	402244 <_sbrk>
  4137ec:	1c43      	adds	r3, r0, #1
  4137ee:	d000      	beq.n	4137f2 <_sbrk_r+0x16>
  4137f0:	bd38      	pop	{r3, r4, r5, pc}
  4137f2:	6823      	ldr	r3, [r4, #0]
  4137f4:	2b00      	cmp	r3, #0
  4137f6:	d0fb      	beq.n	4137f0 <_sbrk_r+0x14>
  4137f8:	602b      	str	r3, [r5, #0]
  4137fa:	bd38      	pop	{r3, r4, r5, pc}
  4137fc:	204049d8 	.word	0x204049d8

00413800 <__sread>:
  413800:	b510      	push	{r4, lr}
  413802:	460c      	mov	r4, r1
  413804:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  413808:	f000 fadc 	bl	413dc4 <_read_r>
  41380c:	2800      	cmp	r0, #0
  41380e:	db03      	blt.n	413818 <__sread+0x18>
  413810:	6d23      	ldr	r3, [r4, #80]	; 0x50
  413812:	4403      	add	r3, r0
  413814:	6523      	str	r3, [r4, #80]	; 0x50
  413816:	bd10      	pop	{r4, pc}
  413818:	89a3      	ldrh	r3, [r4, #12]
  41381a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  41381e:	81a3      	strh	r3, [r4, #12]
  413820:	bd10      	pop	{r4, pc}
  413822:	bf00      	nop

00413824 <__swrite>:
  413824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  413828:	4616      	mov	r6, r2
  41382a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  41382e:	461f      	mov	r7, r3
  413830:	05d3      	lsls	r3, r2, #23
  413832:	460c      	mov	r4, r1
  413834:	4605      	mov	r5, r0
  413836:	d507      	bpl.n	413848 <__swrite+0x24>
  413838:	2200      	movs	r2, #0
  41383a:	2302      	movs	r3, #2
  41383c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  413840:	f000 faaa 	bl	413d98 <_lseek_r>
  413844:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  413848:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  41384c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  413850:	81a2      	strh	r2, [r4, #12]
  413852:	463b      	mov	r3, r7
  413854:	4632      	mov	r2, r6
  413856:	4628      	mov	r0, r5
  413858:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  41385c:	f000 b98a 	b.w	413b74 <_write_r>

00413860 <__sseek>:
  413860:	b510      	push	{r4, lr}
  413862:	460c      	mov	r4, r1
  413864:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  413868:	f000 fa96 	bl	413d98 <_lseek_r>
  41386c:	89a3      	ldrh	r3, [r4, #12]
  41386e:	1c42      	adds	r2, r0, #1
  413870:	bf0e      	itee	eq
  413872:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  413876:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  41387a:	6520      	strne	r0, [r4, #80]	; 0x50
  41387c:	81a3      	strh	r3, [r4, #12]
  41387e:	bd10      	pop	{r4, pc}

00413880 <__sclose>:
  413880:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  413884:	f000 ba0e 	b.w	413ca4 <_close_r>

00413888 <strchr>:
  413888:	b470      	push	{r4, r5, r6}
  41388a:	f011 04ff 	ands.w	r4, r1, #255	; 0xff
  41388e:	d034      	beq.n	4138fa <strchr+0x72>
  413890:	0785      	lsls	r5, r0, #30
  413892:	d00f      	beq.n	4138b4 <strchr+0x2c>
  413894:	7803      	ldrb	r3, [r0, #0]
  413896:	2b00      	cmp	r3, #0
  413898:	d05a      	beq.n	413950 <strchr+0xc8>
  41389a:	429c      	cmp	r4, r3
  41389c:	d02b      	beq.n	4138f6 <strchr+0x6e>
  41389e:	1c43      	adds	r3, r0, #1
  4138a0:	e005      	b.n	4138ae <strchr+0x26>
  4138a2:	f813 2b01 	ldrb.w	r2, [r3], #1
  4138a6:	2a00      	cmp	r2, #0
  4138a8:	d04f      	beq.n	41394a <strchr+0xc2>
  4138aa:	4294      	cmp	r4, r2
  4138ac:	d023      	beq.n	4138f6 <strchr+0x6e>
  4138ae:	079a      	lsls	r2, r3, #30
  4138b0:	4618      	mov	r0, r3
  4138b2:	d1f6      	bne.n	4138a2 <strchr+0x1a>
  4138b4:	020e      	lsls	r6, r1, #8
  4138b6:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
  4138ba:	4326      	orrs	r6, r4
  4138bc:	6803      	ldr	r3, [r0, #0]
  4138be:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
  4138c2:	e001      	b.n	4138c8 <strchr+0x40>
  4138c4:	f850 3f04 	ldr.w	r3, [r0, #4]!
  4138c8:	ea86 0503 	eor.w	r5, r6, r3
  4138cc:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
  4138d0:	f1a3 3101 	sub.w	r1, r3, #16843009	; 0x1010101
  4138d4:	ea22 0205 	bic.w	r2, r2, r5
  4138d8:	ea21 0303 	bic.w	r3, r1, r3
  4138dc:	4313      	orrs	r3, r2
  4138de:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  4138e2:	d0ef      	beq.n	4138c4 <strchr+0x3c>
  4138e4:	7803      	ldrb	r3, [r0, #0]
  4138e6:	b923      	cbnz	r3, 4138f2 <strchr+0x6a>
  4138e8:	e032      	b.n	413950 <strchr+0xc8>
  4138ea:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  4138ee:	2b00      	cmp	r3, #0
  4138f0:	d02e      	beq.n	413950 <strchr+0xc8>
  4138f2:	429c      	cmp	r4, r3
  4138f4:	d1f9      	bne.n	4138ea <strchr+0x62>
  4138f6:	bc70      	pop	{r4, r5, r6}
  4138f8:	4770      	bx	lr
  4138fa:	0784      	lsls	r4, r0, #30
  4138fc:	d00b      	beq.n	413916 <strchr+0x8e>
  4138fe:	7803      	ldrb	r3, [r0, #0]
  413900:	2b00      	cmp	r3, #0
  413902:	d0f8      	beq.n	4138f6 <strchr+0x6e>
  413904:	1c43      	adds	r3, r0, #1
  413906:	e003      	b.n	413910 <strchr+0x88>
  413908:	7802      	ldrb	r2, [r0, #0]
  41390a:	3301      	adds	r3, #1
  41390c:	2a00      	cmp	r2, #0
  41390e:	d0f2      	beq.n	4138f6 <strchr+0x6e>
  413910:	0799      	lsls	r1, r3, #30
  413912:	4618      	mov	r0, r3
  413914:	d1f8      	bne.n	413908 <strchr+0x80>
  413916:	6802      	ldr	r2, [r0, #0]
  413918:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
  41391c:	ea23 0302 	bic.w	r3, r3, r2
  413920:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  413924:	d108      	bne.n	413938 <strchr+0xb0>
  413926:	f850 2f04 	ldr.w	r2, [r0, #4]!
  41392a:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
  41392e:	ea23 0302 	bic.w	r3, r3, r2
  413932:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  413936:	d0f6      	beq.n	413926 <strchr+0x9e>
  413938:	7803      	ldrb	r3, [r0, #0]
  41393a:	2b00      	cmp	r3, #0
  41393c:	d0db      	beq.n	4138f6 <strchr+0x6e>
  41393e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  413942:	2b00      	cmp	r3, #0
  413944:	d1fb      	bne.n	41393e <strchr+0xb6>
  413946:	bc70      	pop	{r4, r5, r6}
  413948:	4770      	bx	lr
  41394a:	4610      	mov	r0, r2
  41394c:	bc70      	pop	{r4, r5, r6}
  41394e:	4770      	bx	lr
  413950:	4618      	mov	r0, r3
  413952:	bc70      	pop	{r4, r5, r6}
  413954:	4770      	bx	lr
  413956:	bf00      	nop

00413958 <__ssprint_r>:
  413958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41395c:	6893      	ldr	r3, [r2, #8]
  41395e:	b083      	sub	sp, #12
  413960:	4690      	mov	r8, r2
  413962:	2b00      	cmp	r3, #0
  413964:	d072      	beq.n	413a4c <__ssprint_r+0xf4>
  413966:	4683      	mov	fp, r0
  413968:	f04f 0900 	mov.w	r9, #0
  41396c:	6816      	ldr	r6, [r2, #0]
  41396e:	6808      	ldr	r0, [r1, #0]
  413970:	688b      	ldr	r3, [r1, #8]
  413972:	460d      	mov	r5, r1
  413974:	464c      	mov	r4, r9
  413976:	2c00      	cmp	r4, #0
  413978:	d045      	beq.n	413a06 <__ssprint_r+0xae>
  41397a:	429c      	cmp	r4, r3
  41397c:	461f      	mov	r7, r3
  41397e:	469a      	mov	sl, r3
  413980:	d346      	bcc.n	413a10 <__ssprint_r+0xb8>
  413982:	89ab      	ldrh	r3, [r5, #12]
  413984:	f413 6f90 	tst.w	r3, #1152	; 0x480
  413988:	d02d      	beq.n	4139e6 <__ssprint_r+0x8e>
  41398a:	696f      	ldr	r7, [r5, #20]
  41398c:	6929      	ldr	r1, [r5, #16]
  41398e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
  413992:	ebc1 0a00 	rsb	sl, r1, r0
  413996:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
  41399a:	1c60      	adds	r0, r4, #1
  41399c:	107f      	asrs	r7, r7, #1
  41399e:	4450      	add	r0, sl
  4139a0:	42b8      	cmp	r0, r7
  4139a2:	463a      	mov	r2, r7
  4139a4:	bf84      	itt	hi
  4139a6:	4607      	movhi	r7, r0
  4139a8:	463a      	movhi	r2, r7
  4139aa:	055b      	lsls	r3, r3, #21
  4139ac:	d533      	bpl.n	413a16 <__ssprint_r+0xbe>
  4139ae:	4611      	mov	r1, r2
  4139b0:	4658      	mov	r0, fp
  4139b2:	f7fe fea1 	bl	4126f8 <_malloc_r>
  4139b6:	2800      	cmp	r0, #0
  4139b8:	d037      	beq.n	413a2a <__ssprint_r+0xd2>
  4139ba:	4652      	mov	r2, sl
  4139bc:	6929      	ldr	r1, [r5, #16]
  4139be:	9001      	str	r0, [sp, #4]
  4139c0:	f7f9 ff4a 	bl	40d858 <memcpy>
  4139c4:	89aa      	ldrh	r2, [r5, #12]
  4139c6:	9b01      	ldr	r3, [sp, #4]
  4139c8:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  4139cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  4139d0:	81aa      	strh	r2, [r5, #12]
  4139d2:	ebca 0207 	rsb	r2, sl, r7
  4139d6:	eb03 000a 	add.w	r0, r3, sl
  4139da:	616f      	str	r7, [r5, #20]
  4139dc:	612b      	str	r3, [r5, #16]
  4139de:	6028      	str	r0, [r5, #0]
  4139e0:	60aa      	str	r2, [r5, #8]
  4139e2:	4627      	mov	r7, r4
  4139e4:	46a2      	mov	sl, r4
  4139e6:	4652      	mov	r2, sl
  4139e8:	4649      	mov	r1, r9
  4139ea:	f7ff f991 	bl	412d10 <memmove>
  4139ee:	f8d8 2008 	ldr.w	r2, [r8, #8]
  4139f2:	68ab      	ldr	r3, [r5, #8]
  4139f4:	6828      	ldr	r0, [r5, #0]
  4139f6:	1bdb      	subs	r3, r3, r7
  4139f8:	4450      	add	r0, sl
  4139fa:	1b14      	subs	r4, r2, r4
  4139fc:	60ab      	str	r3, [r5, #8]
  4139fe:	6028      	str	r0, [r5, #0]
  413a00:	f8c8 4008 	str.w	r4, [r8, #8]
  413a04:	b314      	cbz	r4, 413a4c <__ssprint_r+0xf4>
  413a06:	f8d6 9000 	ldr.w	r9, [r6]
  413a0a:	6874      	ldr	r4, [r6, #4]
  413a0c:	3608      	adds	r6, #8
  413a0e:	e7b2      	b.n	413976 <__ssprint_r+0x1e>
  413a10:	4627      	mov	r7, r4
  413a12:	46a2      	mov	sl, r4
  413a14:	e7e7      	b.n	4139e6 <__ssprint_r+0x8e>
  413a16:	4658      	mov	r0, fp
  413a18:	f7ff fcf0 	bl	4133fc <_realloc_r>
  413a1c:	4603      	mov	r3, r0
  413a1e:	2800      	cmp	r0, #0
  413a20:	d1d7      	bne.n	4139d2 <__ssprint_r+0x7a>
  413a22:	6929      	ldr	r1, [r5, #16]
  413a24:	4658      	mov	r0, fp
  413a26:	f7fe fb49 	bl	4120bc <_free_r>
  413a2a:	230c      	movs	r3, #12
  413a2c:	f8cb 3000 	str.w	r3, [fp]
  413a30:	89ab      	ldrh	r3, [r5, #12]
  413a32:	2200      	movs	r2, #0
  413a34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  413a38:	f04f 30ff 	mov.w	r0, #4294967295
  413a3c:	81ab      	strh	r3, [r5, #12]
  413a3e:	f8c8 2008 	str.w	r2, [r8, #8]
  413a42:	f8c8 2004 	str.w	r2, [r8, #4]
  413a46:	b003      	add	sp, #12
  413a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  413a4c:	2000      	movs	r0, #0
  413a4e:	f8c8 0004 	str.w	r0, [r8, #4]
  413a52:	b003      	add	sp, #12
  413a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00413a58 <__swbuf_r>:
  413a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  413a5a:	460e      	mov	r6, r1
  413a5c:	4614      	mov	r4, r2
  413a5e:	4607      	mov	r7, r0
  413a60:	b110      	cbz	r0, 413a68 <__swbuf_r+0x10>
  413a62:	6b83      	ldr	r3, [r0, #56]	; 0x38
  413a64:	2b00      	cmp	r3, #0
  413a66:	d04a      	beq.n	413afe <__swbuf_r+0xa6>
  413a68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  413a6c:	69a3      	ldr	r3, [r4, #24]
  413a6e:	60a3      	str	r3, [r4, #8]
  413a70:	b291      	uxth	r1, r2
  413a72:	0708      	lsls	r0, r1, #28
  413a74:	d538      	bpl.n	413ae8 <__swbuf_r+0x90>
  413a76:	6923      	ldr	r3, [r4, #16]
  413a78:	2b00      	cmp	r3, #0
  413a7a:	d035      	beq.n	413ae8 <__swbuf_r+0x90>
  413a7c:	0489      	lsls	r1, r1, #18
  413a7e:	b2f5      	uxtb	r5, r6
  413a80:	d515      	bpl.n	413aae <__swbuf_r+0x56>
  413a82:	6822      	ldr	r2, [r4, #0]
  413a84:	6961      	ldr	r1, [r4, #20]
  413a86:	1ad3      	subs	r3, r2, r3
  413a88:	428b      	cmp	r3, r1
  413a8a:	da1c      	bge.n	413ac6 <__swbuf_r+0x6e>
  413a8c:	3301      	adds	r3, #1
  413a8e:	68a1      	ldr	r1, [r4, #8]
  413a90:	1c50      	adds	r0, r2, #1
  413a92:	3901      	subs	r1, #1
  413a94:	60a1      	str	r1, [r4, #8]
  413a96:	6020      	str	r0, [r4, #0]
  413a98:	7016      	strb	r6, [r2, #0]
  413a9a:	6962      	ldr	r2, [r4, #20]
  413a9c:	429a      	cmp	r2, r3
  413a9e:	d01a      	beq.n	413ad6 <__swbuf_r+0x7e>
  413aa0:	89a3      	ldrh	r3, [r4, #12]
  413aa2:	07db      	lsls	r3, r3, #31
  413aa4:	d501      	bpl.n	413aaa <__swbuf_r+0x52>
  413aa6:	2d0a      	cmp	r5, #10
  413aa8:	d015      	beq.n	413ad6 <__swbuf_r+0x7e>
  413aaa:	4628      	mov	r0, r5
  413aac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  413aae:	6e61      	ldr	r1, [r4, #100]	; 0x64
  413ab0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  413ab4:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  413ab8:	81a2      	strh	r2, [r4, #12]
  413aba:	6822      	ldr	r2, [r4, #0]
  413abc:	6661      	str	r1, [r4, #100]	; 0x64
  413abe:	6961      	ldr	r1, [r4, #20]
  413ac0:	1ad3      	subs	r3, r2, r3
  413ac2:	428b      	cmp	r3, r1
  413ac4:	dbe2      	blt.n	413a8c <__swbuf_r+0x34>
  413ac6:	4621      	mov	r1, r4
  413ac8:	4638      	mov	r0, r7
  413aca:	f7fe f999 	bl	411e00 <_fflush_r>
  413ace:	b940      	cbnz	r0, 413ae2 <__swbuf_r+0x8a>
  413ad0:	6822      	ldr	r2, [r4, #0]
  413ad2:	2301      	movs	r3, #1
  413ad4:	e7db      	b.n	413a8e <__swbuf_r+0x36>
  413ad6:	4621      	mov	r1, r4
  413ad8:	4638      	mov	r0, r7
  413ada:	f7fe f991 	bl	411e00 <_fflush_r>
  413ade:	2800      	cmp	r0, #0
  413ae0:	d0e3      	beq.n	413aaa <__swbuf_r+0x52>
  413ae2:	f04f 30ff 	mov.w	r0, #4294967295
  413ae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  413ae8:	4621      	mov	r1, r4
  413aea:	4638      	mov	r0, r7
  413aec:	f7fd f8b0 	bl	410c50 <__swsetup_r>
  413af0:	2800      	cmp	r0, #0
  413af2:	d1f6      	bne.n	413ae2 <__swbuf_r+0x8a>
  413af4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  413af8:	6923      	ldr	r3, [r4, #16]
  413afa:	b291      	uxth	r1, r2
  413afc:	e7be      	b.n	413a7c <__swbuf_r+0x24>
  413afe:	f7fe fa13 	bl	411f28 <__sinit>
  413b02:	e7b1      	b.n	413a68 <__swbuf_r+0x10>

00413b04 <_wcrtomb_r>:
  413b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  413b08:	4605      	mov	r5, r0
  413b0a:	b086      	sub	sp, #24
  413b0c:	461e      	mov	r6, r3
  413b0e:	460c      	mov	r4, r1
  413b10:	b1a1      	cbz	r1, 413b3c <_wcrtomb_r+0x38>
  413b12:	4b10      	ldr	r3, [pc, #64]	; (413b54 <_wcrtomb_r+0x50>)
  413b14:	4617      	mov	r7, r2
  413b16:	f8d3 8000 	ldr.w	r8, [r3]
  413b1a:	f7fe fd63 	bl	4125e4 <__locale_charset>
  413b1e:	9600      	str	r6, [sp, #0]
  413b20:	4603      	mov	r3, r0
  413b22:	463a      	mov	r2, r7
  413b24:	4621      	mov	r1, r4
  413b26:	4628      	mov	r0, r5
  413b28:	47c0      	blx	r8
  413b2a:	1c43      	adds	r3, r0, #1
  413b2c:	d103      	bne.n	413b36 <_wcrtomb_r+0x32>
  413b2e:	2200      	movs	r2, #0
  413b30:	238a      	movs	r3, #138	; 0x8a
  413b32:	6032      	str	r2, [r6, #0]
  413b34:	602b      	str	r3, [r5, #0]
  413b36:	b006      	add	sp, #24
  413b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  413b3c:	4b05      	ldr	r3, [pc, #20]	; (413b54 <_wcrtomb_r+0x50>)
  413b3e:	681f      	ldr	r7, [r3, #0]
  413b40:	f7fe fd50 	bl	4125e4 <__locale_charset>
  413b44:	9600      	str	r6, [sp, #0]
  413b46:	4603      	mov	r3, r0
  413b48:	4622      	mov	r2, r4
  413b4a:	a903      	add	r1, sp, #12
  413b4c:	4628      	mov	r0, r5
  413b4e:	47b8      	blx	r7
  413b50:	e7eb      	b.n	413b2a <_wcrtomb_r+0x26>
  413b52:	bf00      	nop
  413b54:	204009d8 	.word	0x204009d8

00413b58 <__ascii_wctomb>:
  413b58:	b121      	cbz	r1, 413b64 <__ascii_wctomb+0xc>
  413b5a:	2aff      	cmp	r2, #255	; 0xff
  413b5c:	d804      	bhi.n	413b68 <__ascii_wctomb+0x10>
  413b5e:	700a      	strb	r2, [r1, #0]
  413b60:	2001      	movs	r0, #1
  413b62:	4770      	bx	lr
  413b64:	4608      	mov	r0, r1
  413b66:	4770      	bx	lr
  413b68:	238a      	movs	r3, #138	; 0x8a
  413b6a:	6003      	str	r3, [r0, #0]
  413b6c:	f04f 30ff 	mov.w	r0, #4294967295
  413b70:	4770      	bx	lr
  413b72:	bf00      	nop

00413b74 <_write_r>:
  413b74:	b570      	push	{r4, r5, r6, lr}
  413b76:	460d      	mov	r5, r1
  413b78:	4c08      	ldr	r4, [pc, #32]	; (413b9c <_write_r+0x28>)
  413b7a:	4611      	mov	r1, r2
  413b7c:	4606      	mov	r6, r0
  413b7e:	461a      	mov	r2, r3
  413b80:	4628      	mov	r0, r5
  413b82:	2300      	movs	r3, #0
  413b84:	6023      	str	r3, [r4, #0]
  413b86:	f7ec fcf1 	bl	40056c <_write>
  413b8a:	1c43      	adds	r3, r0, #1
  413b8c:	d000      	beq.n	413b90 <_write_r+0x1c>
  413b8e:	bd70      	pop	{r4, r5, r6, pc}
  413b90:	6823      	ldr	r3, [r4, #0]
  413b92:	2b00      	cmp	r3, #0
  413b94:	d0fb      	beq.n	413b8e <_write_r+0x1a>
  413b96:	6033      	str	r3, [r6, #0]
  413b98:	bd70      	pop	{r4, r5, r6, pc}
  413b9a:	bf00      	nop
  413b9c:	204049d8 	.word	0x204049d8

00413ba0 <__register_exitproc>:
  413ba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  413ba4:	4c25      	ldr	r4, [pc, #148]	; (413c3c <__register_exitproc+0x9c>)
  413ba6:	6825      	ldr	r5, [r4, #0]
  413ba8:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  413bac:	4606      	mov	r6, r0
  413bae:	4688      	mov	r8, r1
  413bb0:	4692      	mov	sl, r2
  413bb2:	4699      	mov	r9, r3
  413bb4:	b3c4      	cbz	r4, 413c28 <__register_exitproc+0x88>
  413bb6:	6860      	ldr	r0, [r4, #4]
  413bb8:	281f      	cmp	r0, #31
  413bba:	dc17      	bgt.n	413bec <__register_exitproc+0x4c>
  413bbc:	1c43      	adds	r3, r0, #1
  413bbe:	b176      	cbz	r6, 413bde <__register_exitproc+0x3e>
  413bc0:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  413bc4:	2201      	movs	r2, #1
  413bc6:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  413bca:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  413bce:	4082      	lsls	r2, r0
  413bd0:	4311      	orrs	r1, r2
  413bd2:	2e02      	cmp	r6, #2
  413bd4:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  413bd8:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  413bdc:	d01e      	beq.n	413c1c <__register_exitproc+0x7c>
  413bde:	3002      	adds	r0, #2
  413be0:	6063      	str	r3, [r4, #4]
  413be2:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  413be6:	2000      	movs	r0, #0
  413be8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  413bec:	4b14      	ldr	r3, [pc, #80]	; (413c40 <__register_exitproc+0xa0>)
  413bee:	b303      	cbz	r3, 413c32 <__register_exitproc+0x92>
  413bf0:	f44f 70c8 	mov.w	r0, #400	; 0x190
  413bf4:	f7fe fd78 	bl	4126e8 <malloc>
  413bf8:	4604      	mov	r4, r0
  413bfa:	b1d0      	cbz	r0, 413c32 <__register_exitproc+0x92>
  413bfc:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  413c00:	2700      	movs	r7, #0
  413c02:	e880 0088 	stmia.w	r0, {r3, r7}
  413c06:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  413c0a:	4638      	mov	r0, r7
  413c0c:	2301      	movs	r3, #1
  413c0e:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  413c12:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  413c16:	2e00      	cmp	r6, #0
  413c18:	d0e1      	beq.n	413bde <__register_exitproc+0x3e>
  413c1a:	e7d1      	b.n	413bc0 <__register_exitproc+0x20>
  413c1c:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  413c20:	430a      	orrs	r2, r1
  413c22:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  413c26:	e7da      	b.n	413bde <__register_exitproc+0x3e>
  413c28:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  413c2c:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  413c30:	e7c1      	b.n	413bb6 <__register_exitproc+0x16>
  413c32:	f04f 30ff 	mov.w	r0, #4294967295
  413c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  413c3a:	bf00      	nop
  413c3c:	00417704 	.word	0x00417704
  413c40:	004126e9 	.word	0x004126e9

00413c44 <_calloc_r>:
  413c44:	b510      	push	{r4, lr}
  413c46:	fb02 f101 	mul.w	r1, r2, r1
  413c4a:	f7fe fd55 	bl	4126f8 <_malloc_r>
  413c4e:	4604      	mov	r4, r0
  413c50:	b1d8      	cbz	r0, 413c8a <_calloc_r+0x46>
  413c52:	f850 2c04 	ldr.w	r2, [r0, #-4]
  413c56:	f022 0203 	bic.w	r2, r2, #3
  413c5a:	3a04      	subs	r2, #4
  413c5c:	2a24      	cmp	r2, #36	; 0x24
  413c5e:	d818      	bhi.n	413c92 <_calloc_r+0x4e>
  413c60:	2a13      	cmp	r2, #19
  413c62:	d914      	bls.n	413c8e <_calloc_r+0x4a>
  413c64:	2300      	movs	r3, #0
  413c66:	2a1b      	cmp	r2, #27
  413c68:	6003      	str	r3, [r0, #0]
  413c6a:	6043      	str	r3, [r0, #4]
  413c6c:	d916      	bls.n	413c9c <_calloc_r+0x58>
  413c6e:	2a24      	cmp	r2, #36	; 0x24
  413c70:	6083      	str	r3, [r0, #8]
  413c72:	60c3      	str	r3, [r0, #12]
  413c74:	bf11      	iteee	ne
  413c76:	f100 0210 	addne.w	r2, r0, #16
  413c7a:	6103      	streq	r3, [r0, #16]
  413c7c:	6143      	streq	r3, [r0, #20]
  413c7e:	f100 0218 	addeq.w	r2, r0, #24
  413c82:	2300      	movs	r3, #0
  413c84:	6013      	str	r3, [r2, #0]
  413c86:	6053      	str	r3, [r2, #4]
  413c88:	6093      	str	r3, [r2, #8]
  413c8a:	4620      	mov	r0, r4
  413c8c:	bd10      	pop	{r4, pc}
  413c8e:	4602      	mov	r2, r0
  413c90:	e7f7      	b.n	413c82 <_calloc_r+0x3e>
  413c92:	2100      	movs	r1, #0
  413c94:	f7f9 fe7a 	bl	40d98c <memset>
  413c98:	4620      	mov	r0, r4
  413c9a:	bd10      	pop	{r4, pc}
  413c9c:	f100 0208 	add.w	r2, r0, #8
  413ca0:	e7ef      	b.n	413c82 <_calloc_r+0x3e>
  413ca2:	bf00      	nop

00413ca4 <_close_r>:
  413ca4:	b538      	push	{r3, r4, r5, lr}
  413ca6:	4c07      	ldr	r4, [pc, #28]	; (413cc4 <_close_r+0x20>)
  413ca8:	2300      	movs	r3, #0
  413caa:	4605      	mov	r5, r0
  413cac:	4608      	mov	r0, r1
  413cae:	6023      	str	r3, [r4, #0]
  413cb0:	f7ee faf4 	bl	40229c <_close>
  413cb4:	1c43      	adds	r3, r0, #1
  413cb6:	d000      	beq.n	413cba <_close_r+0x16>
  413cb8:	bd38      	pop	{r3, r4, r5, pc}
  413cba:	6823      	ldr	r3, [r4, #0]
  413cbc:	2b00      	cmp	r3, #0
  413cbe:	d0fb      	beq.n	413cb8 <_close_r+0x14>
  413cc0:	602b      	str	r3, [r5, #0]
  413cc2:	bd38      	pop	{r3, r4, r5, pc}
  413cc4:	204049d8 	.word	0x204049d8

00413cc8 <_fclose_r>:
  413cc8:	2900      	cmp	r1, #0
  413cca:	d03d      	beq.n	413d48 <_fclose_r+0x80>
  413ccc:	b570      	push	{r4, r5, r6, lr}
  413cce:	4605      	mov	r5, r0
  413cd0:	460c      	mov	r4, r1
  413cd2:	b108      	cbz	r0, 413cd8 <_fclose_r+0x10>
  413cd4:	6b83      	ldr	r3, [r0, #56]	; 0x38
  413cd6:	b37b      	cbz	r3, 413d38 <_fclose_r+0x70>
  413cd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  413cdc:	b90b      	cbnz	r3, 413ce2 <_fclose_r+0x1a>
  413cde:	2000      	movs	r0, #0
  413ce0:	bd70      	pop	{r4, r5, r6, pc}
  413ce2:	4621      	mov	r1, r4
  413ce4:	4628      	mov	r0, r5
  413ce6:	f7fd ffe7 	bl	411cb8 <__sflush_r>
  413cea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  413cec:	4606      	mov	r6, r0
  413cee:	b133      	cbz	r3, 413cfe <_fclose_r+0x36>
  413cf0:	69e1      	ldr	r1, [r4, #28]
  413cf2:	4628      	mov	r0, r5
  413cf4:	4798      	blx	r3
  413cf6:	2800      	cmp	r0, #0
  413cf8:	bfb8      	it	lt
  413cfa:	f04f 36ff 	movlt.w	r6, #4294967295
  413cfe:	89a3      	ldrh	r3, [r4, #12]
  413d00:	061b      	lsls	r3, r3, #24
  413d02:	d41c      	bmi.n	413d3e <_fclose_r+0x76>
  413d04:	6b21      	ldr	r1, [r4, #48]	; 0x30
  413d06:	b141      	cbz	r1, 413d1a <_fclose_r+0x52>
  413d08:	f104 0340 	add.w	r3, r4, #64	; 0x40
  413d0c:	4299      	cmp	r1, r3
  413d0e:	d002      	beq.n	413d16 <_fclose_r+0x4e>
  413d10:	4628      	mov	r0, r5
  413d12:	f7fe f9d3 	bl	4120bc <_free_r>
  413d16:	2300      	movs	r3, #0
  413d18:	6323      	str	r3, [r4, #48]	; 0x30
  413d1a:	6c61      	ldr	r1, [r4, #68]	; 0x44
  413d1c:	b121      	cbz	r1, 413d28 <_fclose_r+0x60>
  413d1e:	4628      	mov	r0, r5
  413d20:	f7fe f9cc 	bl	4120bc <_free_r>
  413d24:	2300      	movs	r3, #0
  413d26:	6463      	str	r3, [r4, #68]	; 0x44
  413d28:	f7fe f904 	bl	411f34 <__sfp_lock_acquire>
  413d2c:	2300      	movs	r3, #0
  413d2e:	81a3      	strh	r3, [r4, #12]
  413d30:	f7fe f902 	bl	411f38 <__sfp_lock_release>
  413d34:	4630      	mov	r0, r6
  413d36:	bd70      	pop	{r4, r5, r6, pc}
  413d38:	f7fe f8f6 	bl	411f28 <__sinit>
  413d3c:	e7cc      	b.n	413cd8 <_fclose_r+0x10>
  413d3e:	6921      	ldr	r1, [r4, #16]
  413d40:	4628      	mov	r0, r5
  413d42:	f7fe f9bb 	bl	4120bc <_free_r>
  413d46:	e7dd      	b.n	413d04 <_fclose_r+0x3c>
  413d48:	2000      	movs	r0, #0
  413d4a:	4770      	bx	lr

00413d4c <_fstat_r>:
  413d4c:	b538      	push	{r3, r4, r5, lr}
  413d4e:	460b      	mov	r3, r1
  413d50:	4c07      	ldr	r4, [pc, #28]	; (413d70 <_fstat_r+0x24>)
  413d52:	4605      	mov	r5, r0
  413d54:	4611      	mov	r1, r2
  413d56:	4618      	mov	r0, r3
  413d58:	2300      	movs	r3, #0
  413d5a:	6023      	str	r3, [r4, #0]
  413d5c:	f7ee faaa 	bl	4022b4 <_fstat>
  413d60:	1c43      	adds	r3, r0, #1
  413d62:	d000      	beq.n	413d66 <_fstat_r+0x1a>
  413d64:	bd38      	pop	{r3, r4, r5, pc}
  413d66:	6823      	ldr	r3, [r4, #0]
  413d68:	2b00      	cmp	r3, #0
  413d6a:	d0fb      	beq.n	413d64 <_fstat_r+0x18>
  413d6c:	602b      	str	r3, [r5, #0]
  413d6e:	bd38      	pop	{r3, r4, r5, pc}
  413d70:	204049d8 	.word	0x204049d8

00413d74 <_isatty_r>:
  413d74:	b538      	push	{r3, r4, r5, lr}
  413d76:	4c07      	ldr	r4, [pc, #28]	; (413d94 <_isatty_r+0x20>)
  413d78:	2300      	movs	r3, #0
  413d7a:	4605      	mov	r5, r0
  413d7c:	4608      	mov	r0, r1
  413d7e:	6023      	str	r3, [r4, #0]
  413d80:	f7ee faa8 	bl	4022d4 <_isatty>
  413d84:	1c43      	adds	r3, r0, #1
  413d86:	d000      	beq.n	413d8a <_isatty_r+0x16>
  413d88:	bd38      	pop	{r3, r4, r5, pc}
  413d8a:	6823      	ldr	r3, [r4, #0]
  413d8c:	2b00      	cmp	r3, #0
  413d8e:	d0fb      	beq.n	413d88 <_isatty_r+0x14>
  413d90:	602b      	str	r3, [r5, #0]
  413d92:	bd38      	pop	{r3, r4, r5, pc}
  413d94:	204049d8 	.word	0x204049d8

00413d98 <_lseek_r>:
  413d98:	b570      	push	{r4, r5, r6, lr}
  413d9a:	460d      	mov	r5, r1
  413d9c:	4c08      	ldr	r4, [pc, #32]	; (413dc0 <_lseek_r+0x28>)
  413d9e:	4611      	mov	r1, r2
  413da0:	4606      	mov	r6, r0
  413da2:	461a      	mov	r2, r3
  413da4:	4628      	mov	r0, r5
  413da6:	2300      	movs	r3, #0
  413da8:	6023      	str	r3, [r4, #0]
  413daa:	f7ee fa9f 	bl	4022ec <_lseek>
  413dae:	1c43      	adds	r3, r0, #1
  413db0:	d000      	beq.n	413db4 <_lseek_r+0x1c>
  413db2:	bd70      	pop	{r4, r5, r6, pc}
  413db4:	6823      	ldr	r3, [r4, #0]
  413db6:	2b00      	cmp	r3, #0
  413db8:	d0fb      	beq.n	413db2 <_lseek_r+0x1a>
  413dba:	6033      	str	r3, [r6, #0]
  413dbc:	bd70      	pop	{r4, r5, r6, pc}
  413dbe:	bf00      	nop
  413dc0:	204049d8 	.word	0x204049d8

00413dc4 <_read_r>:
  413dc4:	b570      	push	{r4, r5, r6, lr}
  413dc6:	460d      	mov	r5, r1
  413dc8:	4c08      	ldr	r4, [pc, #32]	; (413dec <_read_r+0x28>)
  413dca:	4611      	mov	r1, r2
  413dcc:	4606      	mov	r6, r0
  413dce:	461a      	mov	r2, r3
  413dd0:	4628      	mov	r0, r5
  413dd2:	2300      	movs	r3, #0
  413dd4:	6023      	str	r3, [r4, #0]
  413dd6:	f7ec fb9f 	bl	400518 <_read>
  413dda:	1c43      	adds	r3, r0, #1
  413ddc:	d000      	beq.n	413de0 <_read_r+0x1c>
  413dde:	bd70      	pop	{r4, r5, r6, pc}
  413de0:	6823      	ldr	r3, [r4, #0]
  413de2:	2b00      	cmp	r3, #0
  413de4:	d0fb      	beq.n	413dde <_read_r+0x1a>
  413de6:	6033      	str	r3, [r6, #0]
  413de8:	bd70      	pop	{r4, r5, r6, pc}
  413dea:	bf00      	nop
  413dec:	204049d8 	.word	0x204049d8

00413df0 <__aeabi_drsub>:
  413df0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  413df4:	e002      	b.n	413dfc <__adddf3>
  413df6:	bf00      	nop

00413df8 <__aeabi_dsub>:
  413df8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00413dfc <__adddf3>:
  413dfc:	b530      	push	{r4, r5, lr}
  413dfe:	ea4f 0441 	mov.w	r4, r1, lsl #1
  413e02:	ea4f 0543 	mov.w	r5, r3, lsl #1
  413e06:	ea94 0f05 	teq	r4, r5
  413e0a:	bf08      	it	eq
  413e0c:	ea90 0f02 	teqeq	r0, r2
  413e10:	bf1f      	itttt	ne
  413e12:	ea54 0c00 	orrsne.w	ip, r4, r0
  413e16:	ea55 0c02 	orrsne.w	ip, r5, r2
  413e1a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  413e1e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  413e22:	f000 80e2 	beq.w	413fea <__adddf3+0x1ee>
  413e26:	ea4f 5454 	mov.w	r4, r4, lsr #21
  413e2a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  413e2e:	bfb8      	it	lt
  413e30:	426d      	neglt	r5, r5
  413e32:	dd0c      	ble.n	413e4e <__adddf3+0x52>
  413e34:	442c      	add	r4, r5
  413e36:	ea80 0202 	eor.w	r2, r0, r2
  413e3a:	ea81 0303 	eor.w	r3, r1, r3
  413e3e:	ea82 0000 	eor.w	r0, r2, r0
  413e42:	ea83 0101 	eor.w	r1, r3, r1
  413e46:	ea80 0202 	eor.w	r2, r0, r2
  413e4a:	ea81 0303 	eor.w	r3, r1, r3
  413e4e:	2d36      	cmp	r5, #54	; 0x36
  413e50:	bf88      	it	hi
  413e52:	bd30      	pophi	{r4, r5, pc}
  413e54:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  413e58:	ea4f 3101 	mov.w	r1, r1, lsl #12
  413e5c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  413e60:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  413e64:	d002      	beq.n	413e6c <__adddf3+0x70>
  413e66:	4240      	negs	r0, r0
  413e68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  413e6c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  413e70:	ea4f 3303 	mov.w	r3, r3, lsl #12
  413e74:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  413e78:	d002      	beq.n	413e80 <__adddf3+0x84>
  413e7a:	4252      	negs	r2, r2
  413e7c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  413e80:	ea94 0f05 	teq	r4, r5
  413e84:	f000 80a7 	beq.w	413fd6 <__adddf3+0x1da>
  413e88:	f1a4 0401 	sub.w	r4, r4, #1
  413e8c:	f1d5 0e20 	rsbs	lr, r5, #32
  413e90:	db0d      	blt.n	413eae <__adddf3+0xb2>
  413e92:	fa02 fc0e 	lsl.w	ip, r2, lr
  413e96:	fa22 f205 	lsr.w	r2, r2, r5
  413e9a:	1880      	adds	r0, r0, r2
  413e9c:	f141 0100 	adc.w	r1, r1, #0
  413ea0:	fa03 f20e 	lsl.w	r2, r3, lr
  413ea4:	1880      	adds	r0, r0, r2
  413ea6:	fa43 f305 	asr.w	r3, r3, r5
  413eaa:	4159      	adcs	r1, r3
  413eac:	e00e      	b.n	413ecc <__adddf3+0xd0>
  413eae:	f1a5 0520 	sub.w	r5, r5, #32
  413eb2:	f10e 0e20 	add.w	lr, lr, #32
  413eb6:	2a01      	cmp	r2, #1
  413eb8:	fa03 fc0e 	lsl.w	ip, r3, lr
  413ebc:	bf28      	it	cs
  413ebe:	f04c 0c02 	orrcs.w	ip, ip, #2
  413ec2:	fa43 f305 	asr.w	r3, r3, r5
  413ec6:	18c0      	adds	r0, r0, r3
  413ec8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  413ecc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  413ed0:	d507      	bpl.n	413ee2 <__adddf3+0xe6>
  413ed2:	f04f 0e00 	mov.w	lr, #0
  413ed6:	f1dc 0c00 	rsbs	ip, ip, #0
  413eda:	eb7e 0000 	sbcs.w	r0, lr, r0
  413ede:	eb6e 0101 	sbc.w	r1, lr, r1
  413ee2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  413ee6:	d31b      	bcc.n	413f20 <__adddf3+0x124>
  413ee8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  413eec:	d30c      	bcc.n	413f08 <__adddf3+0x10c>
  413eee:	0849      	lsrs	r1, r1, #1
  413ef0:	ea5f 0030 	movs.w	r0, r0, rrx
  413ef4:	ea4f 0c3c 	mov.w	ip, ip, rrx
  413ef8:	f104 0401 	add.w	r4, r4, #1
  413efc:	ea4f 5244 	mov.w	r2, r4, lsl #21
  413f00:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  413f04:	f080 809a 	bcs.w	41403c <__adddf3+0x240>
  413f08:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  413f0c:	bf08      	it	eq
  413f0e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  413f12:	f150 0000 	adcs.w	r0, r0, #0
  413f16:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  413f1a:	ea41 0105 	orr.w	r1, r1, r5
  413f1e:	bd30      	pop	{r4, r5, pc}
  413f20:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  413f24:	4140      	adcs	r0, r0
  413f26:	eb41 0101 	adc.w	r1, r1, r1
  413f2a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  413f2e:	f1a4 0401 	sub.w	r4, r4, #1
  413f32:	d1e9      	bne.n	413f08 <__adddf3+0x10c>
  413f34:	f091 0f00 	teq	r1, #0
  413f38:	bf04      	itt	eq
  413f3a:	4601      	moveq	r1, r0
  413f3c:	2000      	moveq	r0, #0
  413f3e:	fab1 f381 	clz	r3, r1
  413f42:	bf08      	it	eq
  413f44:	3320      	addeq	r3, #32
  413f46:	f1a3 030b 	sub.w	r3, r3, #11
  413f4a:	f1b3 0220 	subs.w	r2, r3, #32
  413f4e:	da0c      	bge.n	413f6a <__adddf3+0x16e>
  413f50:	320c      	adds	r2, #12
  413f52:	dd08      	ble.n	413f66 <__adddf3+0x16a>
  413f54:	f102 0c14 	add.w	ip, r2, #20
  413f58:	f1c2 020c 	rsb	r2, r2, #12
  413f5c:	fa01 f00c 	lsl.w	r0, r1, ip
  413f60:	fa21 f102 	lsr.w	r1, r1, r2
  413f64:	e00c      	b.n	413f80 <__adddf3+0x184>
  413f66:	f102 0214 	add.w	r2, r2, #20
  413f6a:	bfd8      	it	le
  413f6c:	f1c2 0c20 	rsble	ip, r2, #32
  413f70:	fa01 f102 	lsl.w	r1, r1, r2
  413f74:	fa20 fc0c 	lsr.w	ip, r0, ip
  413f78:	bfdc      	itt	le
  413f7a:	ea41 010c 	orrle.w	r1, r1, ip
  413f7e:	4090      	lslle	r0, r2
  413f80:	1ae4      	subs	r4, r4, r3
  413f82:	bfa2      	ittt	ge
  413f84:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  413f88:	4329      	orrge	r1, r5
  413f8a:	bd30      	popge	{r4, r5, pc}
  413f8c:	ea6f 0404 	mvn.w	r4, r4
  413f90:	3c1f      	subs	r4, #31
  413f92:	da1c      	bge.n	413fce <__adddf3+0x1d2>
  413f94:	340c      	adds	r4, #12
  413f96:	dc0e      	bgt.n	413fb6 <__adddf3+0x1ba>
  413f98:	f104 0414 	add.w	r4, r4, #20
  413f9c:	f1c4 0220 	rsb	r2, r4, #32
  413fa0:	fa20 f004 	lsr.w	r0, r0, r4
  413fa4:	fa01 f302 	lsl.w	r3, r1, r2
  413fa8:	ea40 0003 	orr.w	r0, r0, r3
  413fac:	fa21 f304 	lsr.w	r3, r1, r4
  413fb0:	ea45 0103 	orr.w	r1, r5, r3
  413fb4:	bd30      	pop	{r4, r5, pc}
  413fb6:	f1c4 040c 	rsb	r4, r4, #12
  413fba:	f1c4 0220 	rsb	r2, r4, #32
  413fbe:	fa20 f002 	lsr.w	r0, r0, r2
  413fc2:	fa01 f304 	lsl.w	r3, r1, r4
  413fc6:	ea40 0003 	orr.w	r0, r0, r3
  413fca:	4629      	mov	r1, r5
  413fcc:	bd30      	pop	{r4, r5, pc}
  413fce:	fa21 f004 	lsr.w	r0, r1, r4
  413fd2:	4629      	mov	r1, r5
  413fd4:	bd30      	pop	{r4, r5, pc}
  413fd6:	f094 0f00 	teq	r4, #0
  413fda:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  413fde:	bf06      	itte	eq
  413fe0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  413fe4:	3401      	addeq	r4, #1
  413fe6:	3d01      	subne	r5, #1
  413fe8:	e74e      	b.n	413e88 <__adddf3+0x8c>
  413fea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  413fee:	bf18      	it	ne
  413ff0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  413ff4:	d029      	beq.n	41404a <__adddf3+0x24e>
  413ff6:	ea94 0f05 	teq	r4, r5
  413ffa:	bf08      	it	eq
  413ffc:	ea90 0f02 	teqeq	r0, r2
  414000:	d005      	beq.n	41400e <__adddf3+0x212>
  414002:	ea54 0c00 	orrs.w	ip, r4, r0
  414006:	bf04      	itt	eq
  414008:	4619      	moveq	r1, r3
  41400a:	4610      	moveq	r0, r2
  41400c:	bd30      	pop	{r4, r5, pc}
  41400e:	ea91 0f03 	teq	r1, r3
  414012:	bf1e      	ittt	ne
  414014:	2100      	movne	r1, #0
  414016:	2000      	movne	r0, #0
  414018:	bd30      	popne	{r4, r5, pc}
  41401a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  41401e:	d105      	bne.n	41402c <__adddf3+0x230>
  414020:	0040      	lsls	r0, r0, #1
  414022:	4149      	adcs	r1, r1
  414024:	bf28      	it	cs
  414026:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  41402a:	bd30      	pop	{r4, r5, pc}
  41402c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  414030:	bf3c      	itt	cc
  414032:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  414036:	bd30      	popcc	{r4, r5, pc}
  414038:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  41403c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  414040:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  414044:	f04f 0000 	mov.w	r0, #0
  414048:	bd30      	pop	{r4, r5, pc}
  41404a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  41404e:	bf1a      	itte	ne
  414050:	4619      	movne	r1, r3
  414052:	4610      	movne	r0, r2
  414054:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  414058:	bf1c      	itt	ne
  41405a:	460b      	movne	r3, r1
  41405c:	4602      	movne	r2, r0
  41405e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  414062:	bf06      	itte	eq
  414064:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  414068:	ea91 0f03 	teqeq	r1, r3
  41406c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  414070:	bd30      	pop	{r4, r5, pc}
  414072:	bf00      	nop

00414074 <__aeabi_ui2d>:
  414074:	f090 0f00 	teq	r0, #0
  414078:	bf04      	itt	eq
  41407a:	2100      	moveq	r1, #0
  41407c:	4770      	bxeq	lr
  41407e:	b530      	push	{r4, r5, lr}
  414080:	f44f 6480 	mov.w	r4, #1024	; 0x400
  414084:	f104 0432 	add.w	r4, r4, #50	; 0x32
  414088:	f04f 0500 	mov.w	r5, #0
  41408c:	f04f 0100 	mov.w	r1, #0
  414090:	e750      	b.n	413f34 <__adddf3+0x138>
  414092:	bf00      	nop

00414094 <__aeabi_i2d>:
  414094:	f090 0f00 	teq	r0, #0
  414098:	bf04      	itt	eq
  41409a:	2100      	moveq	r1, #0
  41409c:	4770      	bxeq	lr
  41409e:	b530      	push	{r4, r5, lr}
  4140a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4140a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4140a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  4140ac:	bf48      	it	mi
  4140ae:	4240      	negmi	r0, r0
  4140b0:	f04f 0100 	mov.w	r1, #0
  4140b4:	e73e      	b.n	413f34 <__adddf3+0x138>
  4140b6:	bf00      	nop

004140b8 <__aeabi_f2d>:
  4140b8:	0042      	lsls	r2, r0, #1
  4140ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
  4140be:	ea4f 0131 	mov.w	r1, r1, rrx
  4140c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
  4140c6:	bf1f      	itttt	ne
  4140c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  4140cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4140d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  4140d4:	4770      	bxne	lr
  4140d6:	f092 0f00 	teq	r2, #0
  4140da:	bf14      	ite	ne
  4140dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4140e0:	4770      	bxeq	lr
  4140e2:	b530      	push	{r4, r5, lr}
  4140e4:	f44f 7460 	mov.w	r4, #896	; 0x380
  4140e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4140ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4140f0:	e720      	b.n	413f34 <__adddf3+0x138>
  4140f2:	bf00      	nop

004140f4 <__aeabi_ul2d>:
  4140f4:	ea50 0201 	orrs.w	r2, r0, r1
  4140f8:	bf08      	it	eq
  4140fa:	4770      	bxeq	lr
  4140fc:	b530      	push	{r4, r5, lr}
  4140fe:	f04f 0500 	mov.w	r5, #0
  414102:	e00a      	b.n	41411a <__aeabi_l2d+0x16>

00414104 <__aeabi_l2d>:
  414104:	ea50 0201 	orrs.w	r2, r0, r1
  414108:	bf08      	it	eq
  41410a:	4770      	bxeq	lr
  41410c:	b530      	push	{r4, r5, lr}
  41410e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  414112:	d502      	bpl.n	41411a <__aeabi_l2d+0x16>
  414114:	4240      	negs	r0, r0
  414116:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  41411a:	f44f 6480 	mov.w	r4, #1024	; 0x400
  41411e:	f104 0432 	add.w	r4, r4, #50	; 0x32
  414122:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  414126:	f43f aedc 	beq.w	413ee2 <__adddf3+0xe6>
  41412a:	f04f 0203 	mov.w	r2, #3
  41412e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  414132:	bf18      	it	ne
  414134:	3203      	addne	r2, #3
  414136:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  41413a:	bf18      	it	ne
  41413c:	3203      	addne	r2, #3
  41413e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  414142:	f1c2 0320 	rsb	r3, r2, #32
  414146:	fa00 fc03 	lsl.w	ip, r0, r3
  41414a:	fa20 f002 	lsr.w	r0, r0, r2
  41414e:	fa01 fe03 	lsl.w	lr, r1, r3
  414152:	ea40 000e 	orr.w	r0, r0, lr
  414156:	fa21 f102 	lsr.w	r1, r1, r2
  41415a:	4414      	add	r4, r2
  41415c:	e6c1      	b.n	413ee2 <__adddf3+0xe6>
  41415e:	bf00      	nop

00414160 <__aeabi_dmul>:
  414160:	b570      	push	{r4, r5, r6, lr}
  414162:	f04f 0cff 	mov.w	ip, #255	; 0xff
  414166:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  41416a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  41416e:	bf1d      	ittte	ne
  414170:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  414174:	ea94 0f0c 	teqne	r4, ip
  414178:	ea95 0f0c 	teqne	r5, ip
  41417c:	f000 f8de 	bleq	41433c <__aeabi_dmul+0x1dc>
  414180:	442c      	add	r4, r5
  414182:	ea81 0603 	eor.w	r6, r1, r3
  414186:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  41418a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  41418e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  414192:	bf18      	it	ne
  414194:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  414198:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  41419c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4141a0:	d038      	beq.n	414214 <__aeabi_dmul+0xb4>
  4141a2:	fba0 ce02 	umull	ip, lr, r0, r2
  4141a6:	f04f 0500 	mov.w	r5, #0
  4141aa:	fbe1 e502 	umlal	lr, r5, r1, r2
  4141ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  4141b2:	fbe0 e503 	umlal	lr, r5, r0, r3
  4141b6:	f04f 0600 	mov.w	r6, #0
  4141ba:	fbe1 5603 	umlal	r5, r6, r1, r3
  4141be:	f09c 0f00 	teq	ip, #0
  4141c2:	bf18      	it	ne
  4141c4:	f04e 0e01 	orrne.w	lr, lr, #1
  4141c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  4141cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  4141d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  4141d4:	d204      	bcs.n	4141e0 <__aeabi_dmul+0x80>
  4141d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  4141da:	416d      	adcs	r5, r5
  4141dc:	eb46 0606 	adc.w	r6, r6, r6
  4141e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  4141e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  4141e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  4141ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  4141f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  4141f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4141f8:	bf88      	it	hi
  4141fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4141fe:	d81e      	bhi.n	41423e <__aeabi_dmul+0xde>
  414200:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  414204:	bf08      	it	eq
  414206:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  41420a:	f150 0000 	adcs.w	r0, r0, #0
  41420e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  414212:	bd70      	pop	{r4, r5, r6, pc}
  414214:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  414218:	ea46 0101 	orr.w	r1, r6, r1
  41421c:	ea40 0002 	orr.w	r0, r0, r2
  414220:	ea81 0103 	eor.w	r1, r1, r3
  414224:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  414228:	bfc2      	ittt	gt
  41422a:	ebd4 050c 	rsbsgt	r5, r4, ip
  41422e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  414232:	bd70      	popgt	{r4, r5, r6, pc}
  414234:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  414238:	f04f 0e00 	mov.w	lr, #0
  41423c:	3c01      	subs	r4, #1
  41423e:	f300 80ab 	bgt.w	414398 <__aeabi_dmul+0x238>
  414242:	f114 0f36 	cmn.w	r4, #54	; 0x36
  414246:	bfde      	ittt	le
  414248:	2000      	movle	r0, #0
  41424a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  41424e:	bd70      	pople	{r4, r5, r6, pc}
  414250:	f1c4 0400 	rsb	r4, r4, #0
  414254:	3c20      	subs	r4, #32
  414256:	da35      	bge.n	4142c4 <__aeabi_dmul+0x164>
  414258:	340c      	adds	r4, #12
  41425a:	dc1b      	bgt.n	414294 <__aeabi_dmul+0x134>
  41425c:	f104 0414 	add.w	r4, r4, #20
  414260:	f1c4 0520 	rsb	r5, r4, #32
  414264:	fa00 f305 	lsl.w	r3, r0, r5
  414268:	fa20 f004 	lsr.w	r0, r0, r4
  41426c:	fa01 f205 	lsl.w	r2, r1, r5
  414270:	ea40 0002 	orr.w	r0, r0, r2
  414274:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  414278:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  41427c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  414280:	fa21 f604 	lsr.w	r6, r1, r4
  414284:	eb42 0106 	adc.w	r1, r2, r6
  414288:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  41428c:	bf08      	it	eq
  41428e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  414292:	bd70      	pop	{r4, r5, r6, pc}
  414294:	f1c4 040c 	rsb	r4, r4, #12
  414298:	f1c4 0520 	rsb	r5, r4, #32
  41429c:	fa00 f304 	lsl.w	r3, r0, r4
  4142a0:	fa20 f005 	lsr.w	r0, r0, r5
  4142a4:	fa01 f204 	lsl.w	r2, r1, r4
  4142a8:	ea40 0002 	orr.w	r0, r0, r2
  4142ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4142b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4142b4:	f141 0100 	adc.w	r1, r1, #0
  4142b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4142bc:	bf08      	it	eq
  4142be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4142c2:	bd70      	pop	{r4, r5, r6, pc}
  4142c4:	f1c4 0520 	rsb	r5, r4, #32
  4142c8:	fa00 f205 	lsl.w	r2, r0, r5
  4142cc:	ea4e 0e02 	orr.w	lr, lr, r2
  4142d0:	fa20 f304 	lsr.w	r3, r0, r4
  4142d4:	fa01 f205 	lsl.w	r2, r1, r5
  4142d8:	ea43 0302 	orr.w	r3, r3, r2
  4142dc:	fa21 f004 	lsr.w	r0, r1, r4
  4142e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4142e4:	fa21 f204 	lsr.w	r2, r1, r4
  4142e8:	ea20 0002 	bic.w	r0, r0, r2
  4142ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  4142f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4142f4:	bf08      	it	eq
  4142f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4142fa:	bd70      	pop	{r4, r5, r6, pc}
  4142fc:	f094 0f00 	teq	r4, #0
  414300:	d10f      	bne.n	414322 <__aeabi_dmul+0x1c2>
  414302:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  414306:	0040      	lsls	r0, r0, #1
  414308:	eb41 0101 	adc.w	r1, r1, r1
  41430c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  414310:	bf08      	it	eq
  414312:	3c01      	subeq	r4, #1
  414314:	d0f7      	beq.n	414306 <__aeabi_dmul+0x1a6>
  414316:	ea41 0106 	orr.w	r1, r1, r6
  41431a:	f095 0f00 	teq	r5, #0
  41431e:	bf18      	it	ne
  414320:	4770      	bxne	lr
  414322:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  414326:	0052      	lsls	r2, r2, #1
  414328:	eb43 0303 	adc.w	r3, r3, r3
  41432c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  414330:	bf08      	it	eq
  414332:	3d01      	subeq	r5, #1
  414334:	d0f7      	beq.n	414326 <__aeabi_dmul+0x1c6>
  414336:	ea43 0306 	orr.w	r3, r3, r6
  41433a:	4770      	bx	lr
  41433c:	ea94 0f0c 	teq	r4, ip
  414340:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  414344:	bf18      	it	ne
  414346:	ea95 0f0c 	teqne	r5, ip
  41434a:	d00c      	beq.n	414366 <__aeabi_dmul+0x206>
  41434c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  414350:	bf18      	it	ne
  414352:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  414356:	d1d1      	bne.n	4142fc <__aeabi_dmul+0x19c>
  414358:	ea81 0103 	eor.w	r1, r1, r3
  41435c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  414360:	f04f 0000 	mov.w	r0, #0
  414364:	bd70      	pop	{r4, r5, r6, pc}
  414366:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  41436a:	bf06      	itte	eq
  41436c:	4610      	moveq	r0, r2
  41436e:	4619      	moveq	r1, r3
  414370:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  414374:	d019      	beq.n	4143aa <__aeabi_dmul+0x24a>
  414376:	ea94 0f0c 	teq	r4, ip
  41437a:	d102      	bne.n	414382 <__aeabi_dmul+0x222>
  41437c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  414380:	d113      	bne.n	4143aa <__aeabi_dmul+0x24a>
  414382:	ea95 0f0c 	teq	r5, ip
  414386:	d105      	bne.n	414394 <__aeabi_dmul+0x234>
  414388:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  41438c:	bf1c      	itt	ne
  41438e:	4610      	movne	r0, r2
  414390:	4619      	movne	r1, r3
  414392:	d10a      	bne.n	4143aa <__aeabi_dmul+0x24a>
  414394:	ea81 0103 	eor.w	r1, r1, r3
  414398:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  41439c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4143a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4143a4:	f04f 0000 	mov.w	r0, #0
  4143a8:	bd70      	pop	{r4, r5, r6, pc}
  4143aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4143ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  4143b2:	bd70      	pop	{r4, r5, r6, pc}

004143b4 <__aeabi_ddiv>:
  4143b4:	b570      	push	{r4, r5, r6, lr}
  4143b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4143ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4143be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4143c2:	bf1d      	ittte	ne
  4143c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4143c8:	ea94 0f0c 	teqne	r4, ip
  4143cc:	ea95 0f0c 	teqne	r5, ip
  4143d0:	f000 f8a7 	bleq	414522 <__aeabi_ddiv+0x16e>
  4143d4:	eba4 0405 	sub.w	r4, r4, r5
  4143d8:	ea81 0e03 	eor.w	lr, r1, r3
  4143dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4143e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4143e4:	f000 8088 	beq.w	4144f8 <__aeabi_ddiv+0x144>
  4143e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4143ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  4143f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  4143f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  4143f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
  4143fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  414400:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  414404:	ea4f 2600 	mov.w	r6, r0, lsl #8
  414408:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  41440c:	429d      	cmp	r5, r3
  41440e:	bf08      	it	eq
  414410:	4296      	cmpeq	r6, r2
  414412:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  414416:	f504 7440 	add.w	r4, r4, #768	; 0x300
  41441a:	d202      	bcs.n	414422 <__aeabi_ddiv+0x6e>
  41441c:	085b      	lsrs	r3, r3, #1
  41441e:	ea4f 0232 	mov.w	r2, r2, rrx
  414422:	1ab6      	subs	r6, r6, r2
  414424:	eb65 0503 	sbc.w	r5, r5, r3
  414428:	085b      	lsrs	r3, r3, #1
  41442a:	ea4f 0232 	mov.w	r2, r2, rrx
  41442e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  414432:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  414436:	ebb6 0e02 	subs.w	lr, r6, r2
  41443a:	eb75 0e03 	sbcs.w	lr, r5, r3
  41443e:	bf22      	ittt	cs
  414440:	1ab6      	subcs	r6, r6, r2
  414442:	4675      	movcs	r5, lr
  414444:	ea40 000c 	orrcs.w	r0, r0, ip
  414448:	085b      	lsrs	r3, r3, #1
  41444a:	ea4f 0232 	mov.w	r2, r2, rrx
  41444e:	ebb6 0e02 	subs.w	lr, r6, r2
  414452:	eb75 0e03 	sbcs.w	lr, r5, r3
  414456:	bf22      	ittt	cs
  414458:	1ab6      	subcs	r6, r6, r2
  41445a:	4675      	movcs	r5, lr
  41445c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  414460:	085b      	lsrs	r3, r3, #1
  414462:	ea4f 0232 	mov.w	r2, r2, rrx
  414466:	ebb6 0e02 	subs.w	lr, r6, r2
  41446a:	eb75 0e03 	sbcs.w	lr, r5, r3
  41446e:	bf22      	ittt	cs
  414470:	1ab6      	subcs	r6, r6, r2
  414472:	4675      	movcs	r5, lr
  414474:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  414478:	085b      	lsrs	r3, r3, #1
  41447a:	ea4f 0232 	mov.w	r2, r2, rrx
  41447e:	ebb6 0e02 	subs.w	lr, r6, r2
  414482:	eb75 0e03 	sbcs.w	lr, r5, r3
  414486:	bf22      	ittt	cs
  414488:	1ab6      	subcs	r6, r6, r2
  41448a:	4675      	movcs	r5, lr
  41448c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  414490:	ea55 0e06 	orrs.w	lr, r5, r6
  414494:	d018      	beq.n	4144c8 <__aeabi_ddiv+0x114>
  414496:	ea4f 1505 	mov.w	r5, r5, lsl #4
  41449a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  41449e:	ea4f 1606 	mov.w	r6, r6, lsl #4
  4144a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  4144a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  4144aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  4144ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  4144b2:	d1c0      	bne.n	414436 <__aeabi_ddiv+0x82>
  4144b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4144b8:	d10b      	bne.n	4144d2 <__aeabi_ddiv+0x11e>
  4144ba:	ea41 0100 	orr.w	r1, r1, r0
  4144be:	f04f 0000 	mov.w	r0, #0
  4144c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  4144c6:	e7b6      	b.n	414436 <__aeabi_ddiv+0x82>
  4144c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4144cc:	bf04      	itt	eq
  4144ce:	4301      	orreq	r1, r0
  4144d0:	2000      	moveq	r0, #0
  4144d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4144d6:	bf88      	it	hi
  4144d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4144dc:	f63f aeaf 	bhi.w	41423e <__aeabi_dmul+0xde>
  4144e0:	ebb5 0c03 	subs.w	ip, r5, r3
  4144e4:	bf04      	itt	eq
  4144e6:	ebb6 0c02 	subseq.w	ip, r6, r2
  4144ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4144ee:	f150 0000 	adcs.w	r0, r0, #0
  4144f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4144f6:	bd70      	pop	{r4, r5, r6, pc}
  4144f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  4144fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  414500:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  414504:	bfc2      	ittt	gt
  414506:	ebd4 050c 	rsbsgt	r5, r4, ip
  41450a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  41450e:	bd70      	popgt	{r4, r5, r6, pc}
  414510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  414514:	f04f 0e00 	mov.w	lr, #0
  414518:	3c01      	subs	r4, #1
  41451a:	e690      	b.n	41423e <__aeabi_dmul+0xde>
  41451c:	ea45 0e06 	orr.w	lr, r5, r6
  414520:	e68d      	b.n	41423e <__aeabi_dmul+0xde>
  414522:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  414526:	ea94 0f0c 	teq	r4, ip
  41452a:	bf08      	it	eq
  41452c:	ea95 0f0c 	teqeq	r5, ip
  414530:	f43f af3b 	beq.w	4143aa <__aeabi_dmul+0x24a>
  414534:	ea94 0f0c 	teq	r4, ip
  414538:	d10a      	bne.n	414550 <__aeabi_ddiv+0x19c>
  41453a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  41453e:	f47f af34 	bne.w	4143aa <__aeabi_dmul+0x24a>
  414542:	ea95 0f0c 	teq	r5, ip
  414546:	f47f af25 	bne.w	414394 <__aeabi_dmul+0x234>
  41454a:	4610      	mov	r0, r2
  41454c:	4619      	mov	r1, r3
  41454e:	e72c      	b.n	4143aa <__aeabi_dmul+0x24a>
  414550:	ea95 0f0c 	teq	r5, ip
  414554:	d106      	bne.n	414564 <__aeabi_ddiv+0x1b0>
  414556:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  41455a:	f43f aefd 	beq.w	414358 <__aeabi_dmul+0x1f8>
  41455e:	4610      	mov	r0, r2
  414560:	4619      	mov	r1, r3
  414562:	e722      	b.n	4143aa <__aeabi_dmul+0x24a>
  414564:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  414568:	bf18      	it	ne
  41456a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  41456e:	f47f aec5 	bne.w	4142fc <__aeabi_dmul+0x19c>
  414572:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  414576:	f47f af0d 	bne.w	414394 <__aeabi_dmul+0x234>
  41457a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  41457e:	f47f aeeb 	bne.w	414358 <__aeabi_dmul+0x1f8>
  414582:	e712      	b.n	4143aa <__aeabi_dmul+0x24a>

00414584 <__gedf2>:
  414584:	f04f 3cff 	mov.w	ip, #4294967295
  414588:	e006      	b.n	414598 <__cmpdf2+0x4>
  41458a:	bf00      	nop

0041458c <__ledf2>:
  41458c:	f04f 0c01 	mov.w	ip, #1
  414590:	e002      	b.n	414598 <__cmpdf2+0x4>
  414592:	bf00      	nop

00414594 <__cmpdf2>:
  414594:	f04f 0c01 	mov.w	ip, #1
  414598:	f84d cd04 	str.w	ip, [sp, #-4]!
  41459c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4145a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4145a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4145a8:	bf18      	it	ne
  4145aa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  4145ae:	d01b      	beq.n	4145e8 <__cmpdf2+0x54>
  4145b0:	b001      	add	sp, #4
  4145b2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  4145b6:	bf0c      	ite	eq
  4145b8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  4145bc:	ea91 0f03 	teqne	r1, r3
  4145c0:	bf02      	ittt	eq
  4145c2:	ea90 0f02 	teqeq	r0, r2
  4145c6:	2000      	moveq	r0, #0
  4145c8:	4770      	bxeq	lr
  4145ca:	f110 0f00 	cmn.w	r0, #0
  4145ce:	ea91 0f03 	teq	r1, r3
  4145d2:	bf58      	it	pl
  4145d4:	4299      	cmppl	r1, r3
  4145d6:	bf08      	it	eq
  4145d8:	4290      	cmpeq	r0, r2
  4145da:	bf2c      	ite	cs
  4145dc:	17d8      	asrcs	r0, r3, #31
  4145de:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  4145e2:	f040 0001 	orr.w	r0, r0, #1
  4145e6:	4770      	bx	lr
  4145e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4145ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4145f0:	d102      	bne.n	4145f8 <__cmpdf2+0x64>
  4145f2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4145f6:	d107      	bne.n	414608 <__cmpdf2+0x74>
  4145f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4145fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  414600:	d1d6      	bne.n	4145b0 <__cmpdf2+0x1c>
  414602:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  414606:	d0d3      	beq.n	4145b0 <__cmpdf2+0x1c>
  414608:	f85d 0b04 	ldr.w	r0, [sp], #4
  41460c:	4770      	bx	lr
  41460e:	bf00      	nop

00414610 <__aeabi_cdrcmple>:
  414610:	4684      	mov	ip, r0
  414612:	4610      	mov	r0, r2
  414614:	4662      	mov	r2, ip
  414616:	468c      	mov	ip, r1
  414618:	4619      	mov	r1, r3
  41461a:	4663      	mov	r3, ip
  41461c:	e000      	b.n	414620 <__aeabi_cdcmpeq>
  41461e:	bf00      	nop

00414620 <__aeabi_cdcmpeq>:
  414620:	b501      	push	{r0, lr}
  414622:	f7ff ffb7 	bl	414594 <__cmpdf2>
  414626:	2800      	cmp	r0, #0
  414628:	bf48      	it	mi
  41462a:	f110 0f00 	cmnmi.w	r0, #0
  41462e:	bd01      	pop	{r0, pc}

00414630 <__aeabi_dcmpeq>:
  414630:	f84d ed08 	str.w	lr, [sp, #-8]!
  414634:	f7ff fff4 	bl	414620 <__aeabi_cdcmpeq>
  414638:	bf0c      	ite	eq
  41463a:	2001      	moveq	r0, #1
  41463c:	2000      	movne	r0, #0
  41463e:	f85d fb08 	ldr.w	pc, [sp], #8
  414642:	bf00      	nop

00414644 <__aeabi_dcmplt>:
  414644:	f84d ed08 	str.w	lr, [sp, #-8]!
  414648:	f7ff ffea 	bl	414620 <__aeabi_cdcmpeq>
  41464c:	bf34      	ite	cc
  41464e:	2001      	movcc	r0, #1
  414650:	2000      	movcs	r0, #0
  414652:	f85d fb08 	ldr.w	pc, [sp], #8
  414656:	bf00      	nop

00414658 <__aeabi_dcmple>:
  414658:	f84d ed08 	str.w	lr, [sp, #-8]!
  41465c:	f7ff ffe0 	bl	414620 <__aeabi_cdcmpeq>
  414660:	bf94      	ite	ls
  414662:	2001      	movls	r0, #1
  414664:	2000      	movhi	r0, #0
  414666:	f85d fb08 	ldr.w	pc, [sp], #8
  41466a:	bf00      	nop

0041466c <__aeabi_dcmpge>:
  41466c:	f84d ed08 	str.w	lr, [sp, #-8]!
  414670:	f7ff ffce 	bl	414610 <__aeabi_cdrcmple>
  414674:	bf94      	ite	ls
  414676:	2001      	movls	r0, #1
  414678:	2000      	movhi	r0, #0
  41467a:	f85d fb08 	ldr.w	pc, [sp], #8
  41467e:	bf00      	nop

00414680 <__aeabi_dcmpgt>:
  414680:	f84d ed08 	str.w	lr, [sp, #-8]!
  414684:	f7ff ffc4 	bl	414610 <__aeabi_cdrcmple>
  414688:	bf34      	ite	cc
  41468a:	2001      	movcc	r0, #1
  41468c:	2000      	movcs	r0, #0
  41468e:	f85d fb08 	ldr.w	pc, [sp], #8
  414692:	bf00      	nop

00414694 <__aeabi_dcmpun>:
  414694:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  414698:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  41469c:	d102      	bne.n	4146a4 <__aeabi_dcmpun+0x10>
  41469e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4146a2:	d10a      	bne.n	4146ba <__aeabi_dcmpun+0x26>
  4146a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4146a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4146ac:	d102      	bne.n	4146b4 <__aeabi_dcmpun+0x20>
  4146ae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  4146b2:	d102      	bne.n	4146ba <__aeabi_dcmpun+0x26>
  4146b4:	f04f 0000 	mov.w	r0, #0
  4146b8:	4770      	bx	lr
  4146ba:	f04f 0001 	mov.w	r0, #1
  4146be:	4770      	bx	lr

004146c0 <__aeabi_d2iz>:
  4146c0:	ea4f 0241 	mov.w	r2, r1, lsl #1
  4146c4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  4146c8:	d215      	bcs.n	4146f6 <__aeabi_d2iz+0x36>
  4146ca:	d511      	bpl.n	4146f0 <__aeabi_d2iz+0x30>
  4146cc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  4146d0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  4146d4:	d912      	bls.n	4146fc <__aeabi_d2iz+0x3c>
  4146d6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  4146da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  4146de:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  4146e2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4146e6:	fa23 f002 	lsr.w	r0, r3, r2
  4146ea:	bf18      	it	ne
  4146ec:	4240      	negne	r0, r0
  4146ee:	4770      	bx	lr
  4146f0:	f04f 0000 	mov.w	r0, #0
  4146f4:	4770      	bx	lr
  4146f6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  4146fa:	d105      	bne.n	414708 <__aeabi_d2iz+0x48>
  4146fc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  414700:	bf08      	it	eq
  414702:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  414706:	4770      	bx	lr
  414708:	f04f 0000 	mov.w	r0, #0
  41470c:	4770      	bx	lr
  41470e:	bf00      	nop

00414710 <__aeabi_uldivmod>:
  414710:	b953      	cbnz	r3, 414728 <__aeabi_uldivmod+0x18>
  414712:	b94a      	cbnz	r2, 414728 <__aeabi_uldivmod+0x18>
  414714:	2900      	cmp	r1, #0
  414716:	bf08      	it	eq
  414718:	2800      	cmpeq	r0, #0
  41471a:	bf1c      	itt	ne
  41471c:	f04f 31ff 	movne.w	r1, #4294967295
  414720:	f04f 30ff 	movne.w	r0, #4294967295
  414724:	f000 b97e 	b.w	414a24 <__aeabi_idiv0>
  414728:	f1ad 0c08 	sub.w	ip, sp, #8
  41472c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  414730:	f000 f806 	bl	414740 <__udivmoddi4>
  414734:	f8dd e004 	ldr.w	lr, [sp, #4]
  414738:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  41473c:	b004      	add	sp, #16
  41473e:	4770      	bx	lr

00414740 <__udivmoddi4>:
  414740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  414744:	468c      	mov	ip, r1
  414746:	460e      	mov	r6, r1
  414748:	4604      	mov	r4, r0
  41474a:	9d08      	ldr	r5, [sp, #32]
  41474c:	2b00      	cmp	r3, #0
  41474e:	d150      	bne.n	4147f2 <__udivmoddi4+0xb2>
  414750:	428a      	cmp	r2, r1
  414752:	4617      	mov	r7, r2
  414754:	d96c      	bls.n	414830 <__udivmoddi4+0xf0>
  414756:	fab2 fe82 	clz	lr, r2
  41475a:	f1be 0f00 	cmp.w	lr, #0
  41475e:	d00b      	beq.n	414778 <__udivmoddi4+0x38>
  414760:	f1ce 0420 	rsb	r4, lr, #32
  414764:	fa20 f404 	lsr.w	r4, r0, r4
  414768:	fa01 f60e 	lsl.w	r6, r1, lr
  41476c:	ea44 0c06 	orr.w	ip, r4, r6
  414770:	fa02 f70e 	lsl.w	r7, r2, lr
  414774:	fa00 f40e 	lsl.w	r4, r0, lr
  414778:	ea4f 4917 	mov.w	r9, r7, lsr #16
  41477c:	0c22      	lsrs	r2, r4, #16
  41477e:	fbbc f0f9 	udiv	r0, ip, r9
  414782:	fa1f f887 	uxth.w	r8, r7
  414786:	fb09 c610 	mls	r6, r9, r0, ip
  41478a:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  41478e:	fb00 f308 	mul.w	r3, r0, r8
  414792:	42b3      	cmp	r3, r6
  414794:	d909      	bls.n	4147aa <__udivmoddi4+0x6a>
  414796:	19f6      	adds	r6, r6, r7
  414798:	f100 32ff 	add.w	r2, r0, #4294967295
  41479c:	f080 8122 	bcs.w	4149e4 <__udivmoddi4+0x2a4>
  4147a0:	42b3      	cmp	r3, r6
  4147a2:	f240 811f 	bls.w	4149e4 <__udivmoddi4+0x2a4>
  4147a6:	3802      	subs	r0, #2
  4147a8:	443e      	add	r6, r7
  4147aa:	1af6      	subs	r6, r6, r3
  4147ac:	b2a2      	uxth	r2, r4
  4147ae:	fbb6 f3f9 	udiv	r3, r6, r9
  4147b2:	fb09 6613 	mls	r6, r9, r3, r6
  4147b6:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  4147ba:	fb03 f808 	mul.w	r8, r3, r8
  4147be:	45a0      	cmp	r8, r4
  4147c0:	d909      	bls.n	4147d6 <__udivmoddi4+0x96>
  4147c2:	19e4      	adds	r4, r4, r7
  4147c4:	f103 32ff 	add.w	r2, r3, #4294967295
  4147c8:	f080 810a 	bcs.w	4149e0 <__udivmoddi4+0x2a0>
  4147cc:	45a0      	cmp	r8, r4
  4147ce:	f240 8107 	bls.w	4149e0 <__udivmoddi4+0x2a0>
  4147d2:	3b02      	subs	r3, #2
  4147d4:	443c      	add	r4, r7
  4147d6:	ebc8 0404 	rsb	r4, r8, r4
  4147da:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  4147de:	2100      	movs	r1, #0
  4147e0:	2d00      	cmp	r5, #0
  4147e2:	d062      	beq.n	4148aa <__udivmoddi4+0x16a>
  4147e4:	fa24 f40e 	lsr.w	r4, r4, lr
  4147e8:	2300      	movs	r3, #0
  4147ea:	602c      	str	r4, [r5, #0]
  4147ec:	606b      	str	r3, [r5, #4]
  4147ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4147f2:	428b      	cmp	r3, r1
  4147f4:	d907      	bls.n	414806 <__udivmoddi4+0xc6>
  4147f6:	2d00      	cmp	r5, #0
  4147f8:	d055      	beq.n	4148a6 <__udivmoddi4+0x166>
  4147fa:	2100      	movs	r1, #0
  4147fc:	e885 0041 	stmia.w	r5, {r0, r6}
  414800:	4608      	mov	r0, r1
  414802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  414806:	fab3 f183 	clz	r1, r3
  41480a:	2900      	cmp	r1, #0
  41480c:	f040 8090 	bne.w	414930 <__udivmoddi4+0x1f0>
  414810:	42b3      	cmp	r3, r6
  414812:	d302      	bcc.n	41481a <__udivmoddi4+0xda>
  414814:	4282      	cmp	r2, r0
  414816:	f200 80f8 	bhi.w	414a0a <__udivmoddi4+0x2ca>
  41481a:	1a84      	subs	r4, r0, r2
  41481c:	eb66 0603 	sbc.w	r6, r6, r3
  414820:	2001      	movs	r0, #1
  414822:	46b4      	mov	ip, r6
  414824:	2d00      	cmp	r5, #0
  414826:	d040      	beq.n	4148aa <__udivmoddi4+0x16a>
  414828:	e885 1010 	stmia.w	r5, {r4, ip}
  41482c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  414830:	b912      	cbnz	r2, 414838 <__udivmoddi4+0xf8>
  414832:	2701      	movs	r7, #1
  414834:	fbb7 f7f2 	udiv	r7, r7, r2
  414838:	fab7 fe87 	clz	lr, r7
  41483c:	f1be 0f00 	cmp.w	lr, #0
  414840:	d135      	bne.n	4148ae <__udivmoddi4+0x16e>
  414842:	1bf3      	subs	r3, r6, r7
  414844:	ea4f 4817 	mov.w	r8, r7, lsr #16
  414848:	fa1f fc87 	uxth.w	ip, r7
  41484c:	2101      	movs	r1, #1
  41484e:	fbb3 f0f8 	udiv	r0, r3, r8
  414852:	0c22      	lsrs	r2, r4, #16
  414854:	fb08 3610 	mls	r6, r8, r0, r3
  414858:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  41485c:	fb0c f300 	mul.w	r3, ip, r0
  414860:	42b3      	cmp	r3, r6
  414862:	d907      	bls.n	414874 <__udivmoddi4+0x134>
  414864:	19f6      	adds	r6, r6, r7
  414866:	f100 32ff 	add.w	r2, r0, #4294967295
  41486a:	d202      	bcs.n	414872 <__udivmoddi4+0x132>
  41486c:	42b3      	cmp	r3, r6
  41486e:	f200 80ce 	bhi.w	414a0e <__udivmoddi4+0x2ce>
  414872:	4610      	mov	r0, r2
  414874:	1af6      	subs	r6, r6, r3
  414876:	b2a2      	uxth	r2, r4
  414878:	fbb6 f3f8 	udiv	r3, r6, r8
  41487c:	fb08 6613 	mls	r6, r8, r3, r6
  414880:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  414884:	fb0c fc03 	mul.w	ip, ip, r3
  414888:	45a4      	cmp	ip, r4
  41488a:	d907      	bls.n	41489c <__udivmoddi4+0x15c>
  41488c:	19e4      	adds	r4, r4, r7
  41488e:	f103 32ff 	add.w	r2, r3, #4294967295
  414892:	d202      	bcs.n	41489a <__udivmoddi4+0x15a>
  414894:	45a4      	cmp	ip, r4
  414896:	f200 80b5 	bhi.w	414a04 <__udivmoddi4+0x2c4>
  41489a:	4613      	mov	r3, r2
  41489c:	ebcc 0404 	rsb	r4, ip, r4
  4148a0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  4148a4:	e79c      	b.n	4147e0 <__udivmoddi4+0xa0>
  4148a6:	4629      	mov	r1, r5
  4148a8:	4628      	mov	r0, r5
  4148aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4148ae:	f1ce 0120 	rsb	r1, lr, #32
  4148b2:	fa06 f30e 	lsl.w	r3, r6, lr
  4148b6:	fa07 f70e 	lsl.w	r7, r7, lr
  4148ba:	fa20 f901 	lsr.w	r9, r0, r1
  4148be:	ea4f 4817 	mov.w	r8, r7, lsr #16
  4148c2:	40ce      	lsrs	r6, r1
  4148c4:	ea49 0903 	orr.w	r9, r9, r3
  4148c8:	fbb6 faf8 	udiv	sl, r6, r8
  4148cc:	ea4f 4419 	mov.w	r4, r9, lsr #16
  4148d0:	fb08 661a 	mls	r6, r8, sl, r6
  4148d4:	fa1f fc87 	uxth.w	ip, r7
  4148d8:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
  4148dc:	fb0a f20c 	mul.w	r2, sl, ip
  4148e0:	429a      	cmp	r2, r3
  4148e2:	fa00 f40e 	lsl.w	r4, r0, lr
  4148e6:	d90a      	bls.n	4148fe <__udivmoddi4+0x1be>
  4148e8:	19db      	adds	r3, r3, r7
  4148ea:	f10a 31ff 	add.w	r1, sl, #4294967295
  4148ee:	f080 8087 	bcs.w	414a00 <__udivmoddi4+0x2c0>
  4148f2:	429a      	cmp	r2, r3
  4148f4:	f240 8084 	bls.w	414a00 <__udivmoddi4+0x2c0>
  4148f8:	f1aa 0a02 	sub.w	sl, sl, #2
  4148fc:	443b      	add	r3, r7
  4148fe:	1a9b      	subs	r3, r3, r2
  414900:	fa1f f989 	uxth.w	r9, r9
  414904:	fbb3 f1f8 	udiv	r1, r3, r8
  414908:	fb08 3311 	mls	r3, r8, r1, r3
  41490c:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
  414910:	fb01 f60c 	mul.w	r6, r1, ip
  414914:	429e      	cmp	r6, r3
  414916:	d907      	bls.n	414928 <__udivmoddi4+0x1e8>
  414918:	19db      	adds	r3, r3, r7
  41491a:	f101 32ff 	add.w	r2, r1, #4294967295
  41491e:	d26b      	bcs.n	4149f8 <__udivmoddi4+0x2b8>
  414920:	429e      	cmp	r6, r3
  414922:	d969      	bls.n	4149f8 <__udivmoddi4+0x2b8>
  414924:	3902      	subs	r1, #2
  414926:	443b      	add	r3, r7
  414928:	1b9b      	subs	r3, r3, r6
  41492a:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
  41492e:	e78e      	b.n	41484e <__udivmoddi4+0x10e>
  414930:	f1c1 0e20 	rsb	lr, r1, #32
  414934:	fa22 f40e 	lsr.w	r4, r2, lr
  414938:	408b      	lsls	r3, r1
  41493a:	4323      	orrs	r3, r4
  41493c:	fa20 f70e 	lsr.w	r7, r0, lr
  414940:	fa06 f401 	lsl.w	r4, r6, r1
  414944:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  414948:	fa26 f60e 	lsr.w	r6, r6, lr
  41494c:	433c      	orrs	r4, r7
  41494e:	fbb6 f9fc 	udiv	r9, r6, ip
  414952:	0c27      	lsrs	r7, r4, #16
  414954:	fb0c 6619 	mls	r6, ip, r9, r6
  414958:	fa1f f883 	uxth.w	r8, r3
  41495c:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
  414960:	fb09 f708 	mul.w	r7, r9, r8
  414964:	42b7      	cmp	r7, r6
  414966:	fa02 f201 	lsl.w	r2, r2, r1
  41496a:	fa00 fa01 	lsl.w	sl, r0, r1
  41496e:	d908      	bls.n	414982 <__udivmoddi4+0x242>
  414970:	18f6      	adds	r6, r6, r3
  414972:	f109 30ff 	add.w	r0, r9, #4294967295
  414976:	d241      	bcs.n	4149fc <__udivmoddi4+0x2bc>
  414978:	42b7      	cmp	r7, r6
  41497a:	d93f      	bls.n	4149fc <__udivmoddi4+0x2bc>
  41497c:	f1a9 0902 	sub.w	r9, r9, #2
  414980:	441e      	add	r6, r3
  414982:	1bf6      	subs	r6, r6, r7
  414984:	b2a0      	uxth	r0, r4
  414986:	fbb6 f4fc 	udiv	r4, r6, ip
  41498a:	fb0c 6614 	mls	r6, ip, r4, r6
  41498e:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
  414992:	fb04 f808 	mul.w	r8, r4, r8
  414996:	45b8      	cmp	r8, r7
  414998:	d907      	bls.n	4149aa <__udivmoddi4+0x26a>
  41499a:	18ff      	adds	r7, r7, r3
  41499c:	f104 30ff 	add.w	r0, r4, #4294967295
  4149a0:	d228      	bcs.n	4149f4 <__udivmoddi4+0x2b4>
  4149a2:	45b8      	cmp	r8, r7
  4149a4:	d926      	bls.n	4149f4 <__udivmoddi4+0x2b4>
  4149a6:	3c02      	subs	r4, #2
  4149a8:	441f      	add	r7, r3
  4149aa:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
  4149ae:	ebc8 0707 	rsb	r7, r8, r7
  4149b2:	fba0 8902 	umull	r8, r9, r0, r2
  4149b6:	454f      	cmp	r7, r9
  4149b8:	4644      	mov	r4, r8
  4149ba:	464e      	mov	r6, r9
  4149bc:	d314      	bcc.n	4149e8 <__udivmoddi4+0x2a8>
  4149be:	d029      	beq.n	414a14 <__udivmoddi4+0x2d4>
  4149c0:	b365      	cbz	r5, 414a1c <__udivmoddi4+0x2dc>
  4149c2:	ebba 0304 	subs.w	r3, sl, r4
  4149c6:	eb67 0706 	sbc.w	r7, r7, r6
  4149ca:	fa07 fe0e 	lsl.w	lr, r7, lr
  4149ce:	40cb      	lsrs	r3, r1
  4149d0:	40cf      	lsrs	r7, r1
  4149d2:	ea4e 0303 	orr.w	r3, lr, r3
  4149d6:	e885 0088 	stmia.w	r5, {r3, r7}
  4149da:	2100      	movs	r1, #0
  4149dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4149e0:	4613      	mov	r3, r2
  4149e2:	e6f8      	b.n	4147d6 <__udivmoddi4+0x96>
  4149e4:	4610      	mov	r0, r2
  4149e6:	e6e0      	b.n	4147aa <__udivmoddi4+0x6a>
  4149e8:	ebb8 0402 	subs.w	r4, r8, r2
  4149ec:	eb69 0603 	sbc.w	r6, r9, r3
  4149f0:	3801      	subs	r0, #1
  4149f2:	e7e5      	b.n	4149c0 <__udivmoddi4+0x280>
  4149f4:	4604      	mov	r4, r0
  4149f6:	e7d8      	b.n	4149aa <__udivmoddi4+0x26a>
  4149f8:	4611      	mov	r1, r2
  4149fa:	e795      	b.n	414928 <__udivmoddi4+0x1e8>
  4149fc:	4681      	mov	r9, r0
  4149fe:	e7c0      	b.n	414982 <__udivmoddi4+0x242>
  414a00:	468a      	mov	sl, r1
  414a02:	e77c      	b.n	4148fe <__udivmoddi4+0x1be>
  414a04:	3b02      	subs	r3, #2
  414a06:	443c      	add	r4, r7
  414a08:	e748      	b.n	41489c <__udivmoddi4+0x15c>
  414a0a:	4608      	mov	r0, r1
  414a0c:	e70a      	b.n	414824 <__udivmoddi4+0xe4>
  414a0e:	3802      	subs	r0, #2
  414a10:	443e      	add	r6, r7
  414a12:	e72f      	b.n	414874 <__udivmoddi4+0x134>
  414a14:	45c2      	cmp	sl, r8
  414a16:	d3e7      	bcc.n	4149e8 <__udivmoddi4+0x2a8>
  414a18:	463e      	mov	r6, r7
  414a1a:	e7d1      	b.n	4149c0 <__udivmoddi4+0x280>
  414a1c:	4629      	mov	r1, r5
  414a1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  414a22:	bf00      	nop

00414a24 <__aeabi_idiv0>:
  414a24:	4770      	bx	lr
  414a26:	bf00      	nop

00414a28 <ip_addr_any>:
  414a28:	0000 0000                                   ....

00414a2c <ip_addr_broadcast>:
  414a2c:	ffff ffff                                   ....

00414a30 <memp_sizes>:
  414a30:	0020 0098 001c 0010 0020 0010 0010 0610      ....... .......

00414a40 <memp_num>:
  414a40:	0001 0002 0001 0008 0002 0005 0002 0004     ................

00414a50 <tcp_backoff>:
  414a50:	0201 0403 0605 0707 0707 0707 0007 0000     ................

00414a60 <tcp_persist_backoff>:
  414a60:	0603 180c 6030 0078                         ....0`x.

00414a68 <tcp_pcb_lists>:
  414a68:	4988 2040 4990 2040 4980 2040 4994 2040     .I@ .I@ .I@ .I@ 

00414a78 <ethbroadcast>:
  414a78:	ffff ffff ffff 0000                         ........

00414a80 <ethzero>:
	...
  414a88:	4844 5043 5320 6174 7472 6465 0a0d 0000     DHCP Started....
  414a98:	654e 7774 726f 206b 7075 2520 0d73 000a     Network up %s...
  414aa8:	654e 7774 726f 206b 6f64 6e77 0a0d 0000     Network down....

00414ab8 <data_img_logo_png>:
  414ab8:	692f 676d 6c2f 676f 2e6f 6e70 0067 5448     /img/logo.png.HT
  414ac8:	5054 312f 302e 3220 3030 4f20 0d4b 530a     TP/1.0 200 OK..S
  414ad8:	7265 6576 3a72 6c20 4977 2f50 7270 2d65     erver: lwIP/pre-
  414ae8:	2e30 2036 6828 7474 3a70 2f2f 7777 2e77     0.6 (http://www.
  414af8:	6973 7363 732e 2f65 617e 6164 2f6d 776c     sics.se/~adam/lw
  414b08:	7069 292f 0a0d 6f43 746e 6e65 2d74 7974     ip/)..Content-ty
  414b18:	6570 203a 6d69 6761 2f65 6e70 0d67 0d0a     pe: image/png...
  414b28:	890a 4e50 0d47 1a0a 000a 0000 490d 4448     ..PNG........IHD
  414b38:	0052 0100 0040 0000 08e2 0006 0000 333f     R...@.........?3
  414b48:	fb1e 0000 0400 4273 5449 0808 0808 087c     ......sBIT....|.
  414b58:	8864 0000 0900 4870 7359 0000 3604 0000     d.....pHYs...6..
  414b68:	3604 4201 ef1c 00ae 0000 7419 5845 5374     .6.B.......tEXtS
  414b78:	666f 7774 7261 0065 7777 2e77 6e69 736b     oftware.www.inks
  414b88:	6163 6570 6f2e 6772 ee9b 1a3c 0000 d91d     cape.org..<.....
  414b98:	4449 5441 9c78 dded 4079 d555 06a2 eff0     IDATx...y@U.....
  414ba8:	2420 4657 5305 2f51 1396 704a c871 cd29      $WF.SQ/..Jpq.).
  414bb8:	4729 9e9c 4dd5 d2d0 829c 72c4 d4b6 b2d2     )G...M.....r....
  414bc8:	502b 6d5e ee70 84e5 0e29 9980 8e58 75e9     +P^mp...)...X..u
  414bd8:	09c0 952d 4449 2994 9910 4811 e70f 3fbc     ..-.ID.)...H...?
  414be8:	f8bc ce44 67d9 819f 7d71 bfbf b58a daf6     ..D..g..q}......
  414bf8:	3d4b 63e7 b5ef 5ed7 a14b ab56 20d5 1222     K=.c...^K.V.. ".
  414c08:	5990 7775 8880 baa8 0030 4889 0c58 2240     .Yuw....0..HX.@"
  414c18:	1612 9003 8488 00c5 2224 3161 8900 5848     ........$"a1..HX
  414c28:	400c 1222 0316 8890 c584 2400 6122 0031     .@"........$"a1.
  414c38:	4889 0c58 2240 1612 9003 8488 00c5 2224     .HX.@"........$"
  414c48:	3161 8900 5848 400c 1222 0316 8890 c584     a1..HX.@".......
  414c58:	2400 6122 0031 4889 0c58 2240 1612 9003     .$"a1..HX.@"....
  414c68:	8488 00c5 2224 3161 8900 5848 400c 1222     ....$"a1..HX.@".
  414c78:	0316 8890 c584 2400 6122 0031 4889 0c58     .......$"a1..HX.
  414c88:	2240 1612 9003 8488 00c5 2224 3161 8900     @"........$"a1..
  414c98:	5848 400c 1222 0316 8890 c584 2400 6122     HX.@"........$"a
  414ca8:	0031 4889 0c58 2240 1612 9003 8488 00c5     1..HX.@"........
  414cb8:	2224 3161 8900 5848 400c 1222 0316 8890     $"a1..HX.@".....
  414cc8:	c584 2400 6122 0031 4889 0c58 2240 1612     ...$"a1..HX.@"..
  414cd8:	9003 8488 00c5 2224 3161 8900 5848 400c     ......$"a1..HX.@
  414ce8:	1222 0316 8890 c584 2400 6122 0031 4889     "........$"a1..H
  414cf8:	0c58 2240 1612 9003 8488 00c5 2224 3161     X.@"........$"a1
  414d08:	8900 5848 400c 1222 0316 8890 c584 2400     ..HX.@"........$
  414d18:	6122 0031 4889 0c58 2240 1612 9003 8488     "a1..HX.@"......
  414d28:	00c5 2224 3161 8900 5848 400c 1222 0316     ..$"a1..HX.@"...
  414d38:	8890 c584 2400 6122 0031 4889 0c58 2240     .....$"a1..HX.@"
  414d48:	1612 9003 8488 00c5 2224 3161 8900 5848     ........$"a1..HX
  414d58:	400c 1222 7996 7775 5f40 1e8f c23d d5ea     .@"..yuw@_..=...
  414d68:	f0ab e1f0 4ac3 d73f 61b0 d0c3 4ba5 4ad7     .....J?..a...K.J
  414d78:	0f3f 5511 5a8f 8017 b9b9 58b9 e6b3 2abb     ?..U.Z.....X...*
  414d88:	9739 ad5a 0066 d512 bc61 2605 6122 bad5     9.Z.f...a..&"a..
  414d98:	402b 7b7b 4c7b f098 ee36 bbdd bc87 5cbc     +@{{{L..6......\
  414da8:	2624 e226 bdde 267b bb69 8341 6806 badd     $&&...{&i.A..h..
  414db8:	1c0d 1d1d 6760 8767 43a1 9a87 5da4 aa22     ....`gg..C...]".
  414dc8:	1499 b56a 5d5a 9ddd d630 fbfd 71f7 f8fc     ..j.Z]..0....q..
  414dd8:	6c31 fcde 6203 6262 3af4 dad6 1ada 2793     1l...bbb.:.....'
  414de8:	814f e7a7 b808 b8b8 a140 5450 2f52 a889     O.......@.PTR/..
  414df8:	a9a6 0113 a658 b4b4 4b14 2c96 8fc6 ee3f     ....X....K.,..?.
  414e08:	5590 55bf 56ab 0e08 03de 2727 4aa7 19ee     .U.U.V....''.J..
  414e18:	d511 7544 002a c781 3821 6070 dc7f 7dbe     ..Du*...!8p`...}
  414e28:	675b bddd 437b bdd0 f77b e82a 1115 44d5     [g..{C..{.*....D
  414e38:	ee75 4821 7abd 30f5 e472 9d28 9af5 6f37     u.!H.z.0r.(...7o
  414e48:	f0c1 1223 9d5c 400b 6800 bedf 8cbd ed3a     ..#.\..@.h....:.
  414e58:	a0aa 4427 9354 bad5 c0a7 d872 d8d8 acea     ..'DT.....r.....
  414e68:	6d63 536d 3d05 7d21 9495 2094 3939 c909     cmmS.=!}... 99..
  414e78:	29c9 c9c8 c6c9 d1e8 6063 5e6e 3f27 54a6     .)......c`n^'?.T
  414e88:	d403 4fc9 bd56 ba7a 6c2f cdcd 55eb 4f41     ...OV.z./l...UAO
  414e98:	9b48 d2d2 dc52 73b9 b107 31b1 8e88 468e     H...R..s...1...F
  414ea8:	7474 6234 6363 9a91 529a 9eae 9b9b da3b     tt4bcc...R....;.
  414eb8:	e3b5 3ad5 8e55 193a 5480 a8f3 2a54 f1fc     ...:U.:..T..T*..
  414ec8:	1fc7 7738 2cee 5c2e 8f38 97cb a32f b0b0     ..8w.,.\8.../...
  414ed8:	d650 4471 8595 4801 4695 56ad 2223 0222     P.qD...H.F.V#"".
  414ee8:	ff3f 007c 8f47 311e c268 1d7a a49b 3540     ?.|.G..1h.z...@5
  414ef8:	030c 4c90 c1ee 0783 bdd8 183b 4141 91db     ...L......;.AA..
  414f08:	9090 a150 c2dc 02c2 b6b6 c876 cbcb 5285     ..P.......v....R
  414f18:	94a9 8b6c 4801 8995 4801 a326 ab56 1a11     ..l..H...H&.V...
  414f28:	021a ff7f e515 f6ae 763a 88ec 4321 a286     ........:v..!C..
  414f38:	f77b 701e 7575 9d85 1d9d 2000 3131 2311     {..puu..... 11.#
  414f48:	7a47 3f22 5f3f 4db2 caa2 00c2 9324 7fb8     Gz"??_.M....$...
  414f58:	133f 6633 8fbc 8888 2788 1b3f 783c 6608     ?.3f.....'?.<x.f
  414f68:	f0cc a743 9d4e 1e34 c2f3 2f0b 7ba0 1ef7     ..C.N.4..../.{..
  414f78:	7a38 88f4 76d6 6ad5 018e e552 0061 d192     8z...v.j..R.a...
  414f88:	a3a2 31a3 e271 c8db c8c8 0000 6b34 0cd6     ...1q.......4k..
  414f98:	572b 1bfe fa7d aabc d8f3 9ee7 4e7b 9cb2     +W..}.......{N..
  414fa8:	8057 9954 8018 9464 371b c3ae dbdb b90b     W.T...d..7......
  414fb8:	b9b9 8000 5dae c65f 4da6 c3df d1d1 24d1     .....]_..M.....$
  414fc8:	33ed a8ff 3132 c900 1960 1919 3898 9df1     .3..21..`....8..
  414fd8:	e127 eae7 8aea dbed 9bb7 9274 a739 50c1     '.........t.9..P
  414fe8:	aa65 af93 51c2 53e5 54a9 ff78 5f7d 6664     e....Q.S.Tx.}_df
  414ff8:	0266 cc00 cdcd 7ab1 37f5 7f26 86c3 4801     f......z.7&....H
  415008:	8995 4801 693a 7fda e7e5 0f9f d2e0 8ba5     ...H:i..........
  415018:	fe4f 7bbf 1ef7 7170 3171 b9f9 ca95 2647     O..{..pqq1....G&
  415028:	936f 0ca8 816f 2c4d 2d2d 370d de6f 4c44     o...o.M,--.7o.DL
  415038:	344c e2e2 10e2 1717 9e87 7b3d d3e2 974f     L4........={..O.
  415048:	3d6a 3326 1333 fcbf 0872 4fa7 469f 4c4c     j=&33...r..O.FLL
  415058:	b234 b3b3 5c51 0c5c fb7b b086 b7b7 8b87     4...Q\\.{.......
  415068:	0b8b f67a 89ec 8341 a306 b359 9566 77d6     ..z...A...Y.f..w
  415078:	4a95 8885 7388 7b38 2cf6 5e2e 88bc 773b     .J...s8{.,.^..;w
  415088:	9112 9b9b 878b 1f0f dcc2 1cdc b6b6 70b6     ...............p
  415098:	7676 8746 1d0e fa71 e9f4 c772 383a 5438     vvF...q...r.:88T
  4150a8:	9f4a 3d1e 1ed2 8580 8585 7238 08e4 f3fe     J..=......8r....
  4150b8:	539f 8d88 418d 6a6a f22a f3f3 bf51 7d7e     .S...Ajj*...Q.~}
  4150c8:	d8d8 c0d8 b9d9 dc15 dcdc bbd0 6f77 ebf4     ............wo..
  4150d8:	1fd7 1616 9516 c7d2 a567 a6a6 cce2 d399     ........g.......
  4150e8:	78b8 22f1 dd6e 478a 5252 8a32 1e8a b8a0     .x."n..GRR2.....
  4150f8:	18b8 d6d6 b0d6 b2b2 8b42 2d16 b6d1 5b6d     ........B..-..m[
  415108:	7878 4274 bedf d17d 79bc 9373 5f9d 52a5     xxtB..}..ys.._.R
  415118:	dee1 7bbd de4f 4ea9 4d4d 4a41 f24a ff93     ...{O..NMMAJJ...
  415128:	351e 346a cee6 279d 46d9 5252 4212 f642     .5j4...'.FRR.BB.
  415138:	2221 1ce2 e3e2 216f 2f2f 3617 3636 d968     !"....o!//.666h.
  415148:	25b2 0e06 0d7c c7e3 c04f cff3 6f3f 3eb2     .%..|...O...?o.>
  415158:	1757 a006 f281 f3f3 1b11 f31b b0df 418b     W..............A
  415168:	5c5c 621c 6363 ce34 eb69 55da c6f3 f74a     \\.bcc4.i..U..J.
  415178:	ddee 6043 0060 eff6 d30f 45f8 cacf 8fba     ..C``......E....
  415188:	acac 48fb b848 f085 83f0 b658 296c 8cc6     ...HH.....X.l)..
  415198:	1ff9 9dcc cf3b 5fa4 a518 8952 a0a0 6c20     ....;.._..R... l
  4151a8:	badd 8919 8989 eb5a 6764 2367 3b3b 571b     ......Z.dgg#;;.W
  4151b8:	5eaf 50ad e67e 69cc 6464 a064 9349 2626     .^.P~..iddd.I.&&
  4151c8:	17eb 3c00 587c eff1 2f25 0f2f d66b 877c     ...<|X..%//.k.|.
  4151d8:	3b1d f082 c1e0 0a83 25e5 2525 2928 4129     .;.......%%%())A
  4151e8:	6666 2e26 be5f 2d84 365b 61a3 86c3 3498     ff&._..-[6.a...4
  4151f8:	5de9 9b4c ad36 1652 28c2 2d2d a1c5 e143     .]L.6.R..(--..C.
  415208:	bed8 1b7d 5d2e a4ba d6f5 b0bd 10b0 8585     ..}..]..........
  415218:	c885 c8c8 6440 65e4 0704 02ef 7400 d2e9     ....@d.e.....t..
  415228:	ef05 33bc 2309 8e47 6bd4 87f1 d7eb e1af     ...3.#G..k......
  415238:	89c4 4813 4d4d 7245 3272 5352 9053 9a9a     ...HMMErr2RSS...
  415248:	f92a 438b e4d3 32f4 9999 5899 e2b1 085f     *..C...2...X.._.
  415258:	0b0b f0ad c867 c9c9 4e41 0e4e 5dae 86bb     ....g...ANN..]..
  415268:	1b0d 63d6 c2e1 308f f279 d914 ad7d 1889     ...c...0y...}...
  415278:	7a80 8a8a c28a a9d4 9193 9a9a 706a a51b     .z..........jp..
  415288:	a5a5 bed8 1b7d ae56 0afc 0505 b205 538f     ....}.V........S
  415298:	952a b7d8 2f6f 1f8e 863f abd5 c1bf 0180     *...o/..?.......
  4152a8:	0c03 43ee d899 58d8 9ecc 0b3d 5151 8c37     ...C...X..=.QQ7.
  4152b8:	276a 3b3b 631b 8cc6 c7c2 2f1f d0c2 c3a1     j';;.c...../....
  4152c8:	4e74 916f e9eb 605b 5ab5 ad8d b75b f560     tNo...[`.Z..[.`.
  4152d8:	55ea 1e4f c8bc 9395 8393 abd5 6157 eef7     .UO.........Wa..
  4152e8:	ac60 b55a bd1a bd7a 9262 01fe c9c0 2793     `.Z...z.b......'
  4152f8:	d9f1 4b67 8325 9745 c8c8 4448 4646 cd62     ..gK%.E...HDFFb.
  415308:	ef9a 7cb0 17f9 d5e8 97ab e3ac febe 6bfa     ...|...........k
  415318:	79c9 fa94 7b38 0cf6 fcfc 90fc 7595 675f     .y..8{.......u_g
  415328:	e2dd 62e2 5b2c 14b6 c9c9 58c9 74ba 4999     ...b,[.....X.t.I
  415338:	5fce 181d 7a80 7bba aef7 e151 5857 8858     ._...z.{..Q.WXX.
  415348:	3e0f 8998 c763 1a8e 46dc 4e4e a60e 9d4e     .>..c....FNN..N.
  415358:	a08c 1da0 e578 de95 b706 1113 8111 9349     ....x.........I.
  415368:	41de 7171 8571 1732 1717 1c0c 1af8 7c5e     .Aqqq.2.......^|
  415378:	45f1 5858 873c bcbc 445c 4747 cce1 b399     .EXX<...\DGG....
  415388:	4e48 d24e 5ed8 6a6a fc2a 66fc dec0 1ede     HNN..^jj*..f....
  415398:	dede e1e3 e3e3 7b0b 7b7b fb83 0007 4545     .......{{{....EE
  4153a8:	0045 5f1e cc99 f59a 4e21 fe9f 518f a5ed     E.._....!N...Q..
  4153b8:	a5a5 c261 f184 0808 c408 ff3f 96f9 7dd1     ..a.......?....}
  4153c8:	b25b 3164 edf6 abdb dcb1 d2d2 fd12 f7fb     [.d1............
  4153d8:	9b87 3b9b 369a 0a6d 4800 4f4f 4447 0444     ...;.6m..HOOGDD.
  4153e8:	9fce d08f 9578 1f16 137f dede e0e3 fbeb     ....x...........
  4153f8:	163e 582c 73a8 1a8f cd53 3c93 f47a 7c08     >.,X.s..S..<z..|
  415408:	7d7d def4 fb6f 1f87 17fe da6d c1b4 f1f8     }}..o.....m.....
  415418:	4c13 8fd2 c6aa d400 9c93 b6a5 49b4 4c4c     .L...........ILL
  415428:	e4c4 efc9 2122 96e1 fdd1 2a50 f095 f5f5     ...."!....P*....
  415438:	f1c1 bfe3 71a1 c6e3 1f7a e57f 15ca fbbc     .....q..z.......
  415448:	c4ee e10a a8d7 2351 fbf8 6207 b0d8 1a61     ......Q#...b..a.
  415458:	538f 54a9 7e38 18fc 2f16 845e f4f4 8d74     .S.T8~.../^...t.
  415468:	7275 7373 6eb1 5add 3e1c 187c f6fb 1885     urss.n.Z.>|.....
  415478:	3e35 9198 8191 178b e02f f7bd 93de 6575     5>....../.....ue
  415488:	8722 a952 82c4 f305 6561 0565 cf4f 0611     ".R.....aee.O...
  415498:	ebf7 b7ed 23c7 3636 42b6 fd59 f5fa e3e1     .....#66.BY.....
  4154a8:	0be3 1f1f 585f 5959 2855 f3f7 899b d4d4     ...._XYYU(......
  4154b8:	ff94 7f0e afec ae50 a952 76b0 1aed f9fc     ......P.R..v....
  4154c8:	1a67 ad56 1afa 6666 3fda 7d73 f4fa 6c41     g.V...ff.?s}..Al
  4154d8:	2c6c 5252 0d92 73fa 4000 5c5c 3e1c 60f8     l,RR...s.@\\.>.`
  4154e8:	dea6 57e1 8be6 962f f063 21e0 7d06 ab0e     ...W../.c..!.}..
  4154f8:	bd5b cb65 2d96 eeab 984e e3da dc01 c910     [.e..-..N.......
  415508:	1d3a 743a d0c0 9aa1 e4bf 5a52 68b4 a681     :.:t......RZ.h..
  415518:	9b4d c2c2 02c2 ef77 91de 4d35 c3c3 03c3     M.....w...5M....
  415528:	8e8e 188e ee37 489f 2b4b f57f 50a8 e028     ....7..HK+...P(.
  415538:	e2e2 6e82 badd 6ba1 aed7 de68 05bc 0a0a     ...n...k..h.....
  415548:	35f2 6d8e ab3d a4a4 4a04 12a5 fafd d7f5     .5.m=....J......
  415558:	cfeb e8f0 23d1 f3bc ffce b9bf c651 dada     .....#......Q...
  415568:	7b06 86f7 67a0 9ecf 8f5a 2855 6814 badd     .{...g..Z.U(.h..
  415578:	8635 1f0f b08e 50b0 578d 658f 7272 3f1e     5......P.W.err.?
  415588:	19cc 6030 d6a0 e13a 07e1 1f11 537f 796b     ..0`..:......Sky
  415598:	4a4a 360a de6f 615c 2ce9 6b6b 746b d2e9     JJ.6o.\a.,kkkt..
  4155a8:	dd05 75ba c747 ae8e b3b0 45b3 7171 8a09     ...uG......Eqq..
  4155b8:	8b8b b6b4 34f5 5ab5 938d 7f27 a783 08e7     .....4.Z..'.....
  4155c8:	6c34 50d8 31d6 d265 d2d2 c6f0 af1b f6e3     4l.P.1e.........
  4155d8:	8aed bcb7 0e0e d80e 67b3 462f 1e8f 3923     .........g/F..#9
  4155e8:	600c 6b6b 618b 86c3 cec3 0ece 4ea7 d29d     .`kk.a.......N..
  4155f8:	2758 e626 98f1 d4b2 6fbf 4ea7 309d ca65     X'&......o.N.0e.
  415608:	4c54 f49a 7a2e e8f4 fc81 02fc e3ad 65b8     TL...z.........e
  415618:	b5da ff6b f824 0a0b e00a f5e5 b956 b777     ..k.$.......V.w.
  415628:	b45b 8968 7dbe a1fb b359 c8a6 cccc 1c94     [.h..}..Y.......
  415638:	044f 7f1e 149e 050a 7d5e f755 3f9b 4d35     O.......^}U..?5M
  415648:	db9d 0914 3c78 ef20 eded 5925 ec67 b1d8     ....x< ...%Yg...
  415658:	faf8 6feb 3a8d cdcf 379b 7931 24f2 2524     ...o.:...71y.$$%
  415668:	be69 2c25 a2d3 4b45 6564 2fdd 1617 7676     i.%,..EKde./..vv
  415678:	9876 793c bc0a c7bd 7857 a070 ab56 dbf1     v.<y....Wxp.V...
  415688:	276f e9f0 9fa7 6ce8 d2db 12d2 ffbf 0d7e     o'.....l......~.
  415698:	1a0d 9034 efdd ebf5 c1d7 7fdf 8545 2f9f     ..4.........E../
  4156a8:	b45a 3e18 be3e dbb2 b7d9 2f6f cce6 2d99     Z..>>.....o/...-
  4156b8:	a759 d369 b8a6 f178 d6b2 5f72 1f5f 8784     Y.i...x...r__...
  4156c8:	941f ce7d 5dae c65f 0984 3013 b87c 2c27     ..}..]_....0|.',
  4156d8:	2d2d 95cb 9529 1c4a 763b eb0c afd7 f8d5     --..).J.;v......
  4156e8:	46a0 5e93 7abd 3821 8f78 f3ec e7e7 e3e7     .F.^.z!8x.......
  4156f8:	d7f5 07ff 7171 1571 acca acac 7fb0 01ff     ....qqq.........
  415708:	5b59 3c32 dfcd 057f afd6 a75f 7cb5 86c3     Y[2<......_..|..
  415718:	184d 7c3e ecb8 d6f6 f9ac 5f0e 197e b5a8     M.>|......._~...
  415728:	c47c 9188 b758 3d6e 6000 fcfe d879 3bbd     |...X.n=.`..y..;
  415738:	0018 6360 8363 3f4f 8a5d de37 1378 eaf5     ..`cc.O?].7.x...
  415748:	5e3d 3830 2525 d319 4fa7 8dc7 d71b cf25     =^08%%...O....%.
  415758:	b8d9 6371 4644 fbca af3b 3849 d00f ed08     ..qcDF..;.I8....
  415768:	b5da 0fc3 6c3f f9d1 2ed4 2525 5cb9 0df8     ....?l....%%.\..
  415778:	ee1f df89 3b7e d985 e7b3 7c68 aa6a 2850     ....~;....h|j.P(
  415788:	6030 40c0 dfec 13ff 7c5e 45f1 b6c9 4a4b     0`.@....^|.E..KJ
  415798:	704a c2e1 bd05 5dfa e4f6 69f1 6666 7866     Jp.....]...ifffx
  4157a8:	8de3 f537 676a d8ec 75d7 d97e 0b0b 5f75     ..7.jg...u~...u_
  4157b8:	cac9 6361 8363 beaf 895a 9090 8c50 fb1d     ..acc...Z...P...
  4157c8:	857a 03f0 4f1e 1ec6 743a 4228 c242 6330     z....O..:t(BB.0c
  4157d8:	9f86 3dac cf9e 3b9d 1387 8e27 eecb c2c7     ...=...;..'.....
  4157e8:	0b85 8634 001f f27c 52c9 c3bd 000f cfe6     ..4...|..R......
  4157f8:	805f 6db6 afb5 bd7a f178 7ac7 2c3d 319b     _..m..z.x..z=,.1
  415808:	4fc3 2ad6 91da 9791 67b1 6ecf 8f00 517f     .O.*.....g.n...Q
  415818:	8485 e184 b7ad 3dc6 3f09 f1e0 ef2f 6bb5     .......=.?../..k
  415828:	a1d7 fd7e 92fa c96d 52b9 89ac 8018 6a46     ..~...m..R....Fj
  415838:	bedf ecbd 505b 4285 4f81 f93e 1b14 6c36     ....[P.B.O>...6l
  415848:	f594 acae 63a3 ac63 f55a ceb5 917a da91     .....cc.Z...z...
  415858:	b0af 159e 7515 e343 522d 46a3 7a0e bfbf     .....uC.-R.F.z..
  415868:	666b 8666 0b05 4a16 71d6 ed75 57a8 9a9b     kff....J.qu..W..
  415878:	6db4 0edb 8e47 c31c 6f5b 938d 6a15 e6e6     .m..G...[o...j..
  415888:	58e6 f0b8 2c23 f85c ac91 37f6 dc6e ab20     .X..#,\....7n. .
  415898:	585e 9858 abd6 3755 7737 7b78 cb7b e76a     ^XX...U77wx{{.j.
  4158a8:	e659 e6e6 3198 4fc3 796b 5656 d616 5bad     Y....1.OkyVV...[
  4158b8:	bb2b 853d 8142 fdfe cfb5 5010 d5ab f64f     +.=.B......P..O.
  4158c8:	56d0 d5ab b4b0 c4b4 2d96 b55b 644e e17f     .V.......-[.Nd..
  4158d8:	1785 eaf0 7dab 9e75 36b7 4cde 0032 404d     .....}u..6.L2.M@
  4158e8:	3cdb 67bf 0405 897c d369 eba6 76d5 cee7     .<.g..|.i....v..
  4158f8:	d19d 47a3 c90f 993a f299 5a57 76be f34d     ...G..:...WZ.vM.
  415908:	ccad 87c3 e97f afd5 8332 0d06 d8c6 63b1     ........2......c
  415918:	9635 9999 6199 cce6 0c0f b76a 878c 0787     5....a....j.....
  415928:	edf6 310b de68 afa3 fbef 3d18 8c7a 7ace     ...1h......=z..z
  415938:	1111 b811 e773 648e a29d 22a2 fbf8 4bff     ....s..d..."...K
  415948:	5ce2 87f2 340e 3519 d46a 7593 3512 0a09     .\...4.5j..u.5..
  415958:	2eda 5c6b 8cb8 84d4 d8f9 18d8 fe7c 32f9     ..k\........|..2
  415968:	4544 0145 9600 fb2d ae0c 2fae b649 d2f7     DEE...-..../I...
  415978:	d24b 36e5 3636 3655 dcd1 0494 400e 57dd     K..666U6.....@.W
  415988:	7212 99c9 ff11 fbfe e033 25e5 2e3d cda9     .r......3..%=...
  415998:	81c0 49af 6796 e767 6ec8 232b f343 db93     ...I.gg..n+#C...
  4159a8:	fcfc 9d7c 8de3 acda b95c 3e0a be3e c6e5     ..|.....\..>>...
  4159b8:	9d21 9c9c 71b0 26e3 5759 520e fdfc f503     !....q.&YW.R....
  4159c8:	487e 4651 50a1 e960 65d2 b6b0 d6b6 f759     ~HQF.P`..e....Y.
  4159d8:	a1d0 c970 edf2 b7db 7d69 6dea 6767 d067     ..p.....i}.mggg.
  4159e8:	b503 99a7 9b9b ce4b cbfd cfcf c1c7 3f83     ......K........?
  4159f8:	6ecb ea4f 3596 2121 5b01 6cb6 0001 bbb8     .nO..5!!.[.l....
  415a08:	63bb 38dc 9fdd d7cb 7b5e f24d 7bea e8f4     .c.8....^{M..{..
  415a18:	b231 ceae 1a6b 0381 74d0 1d1c 1fa5 f7ff     1...k....t......
  415a28:	f5ea ce8a 455b ba29 fb7e 9696 ca96 2b6e     ....[E).~.....n+
  415a38:	2727 6b5b b7d9 7edf bb23 a79d 9b99 639b     ''[k...~#......c
  415a48:	a2d1 b8c5 397c bf12 7afe c704 9f8f b9c0     ....|9...z......
  415a58:	e773 6431 50c8 da83 9a7b 14d4 3910 1d1c     s.1d.P..{....9..
  415a68:	651d 755d 399f 4673 996b a952 b6c4 5b6d     .e]u.9sFk.R...m[
  415a78:	96b5 edf7 cfdb 5b24 f677 21e8 f93d 5759     ......$[w..!=.YW
  415a88:	1b48 d162 25a2 feb2 dd8e dcdc 7b31 1cf6     H.b..%......1{..
  415a98:	658d 5aad c2b5 399c cb9a 3a6a a006 5809     .e.Z...9..j:...X
  415aa8:	4858 f87f b6db 6b6d 17d4 51b9 d323 67bd     XH....mk...Q#..g
  415ab8:	d52b 9ed6 bb3d 1af5 7a6b b596 0db5 763a     +...=...kz....:v
  415ac8:	88ec 6db6 19db 5c1d 34a6 e271 9d24 7501     ...m...\.4q.$..u
  415ad8:	4ae5 d6a4 245f cf67 959e fc9c cc6e f464     .J.._$g.....n.d.
  415ae8:	39a7 ff3b b25d dcfc 73b9 cf06 d3d5 4da4     .9;.]....s.....M
  415af8:	b69b dfb2 0138 5980 66b3 c363 4d86 7770     ....8..Y.fc..Mpw
  415b08:	8777 8585 6c05 6c6c e5e0 85e5 9090 9d30     w....lll......0.
  415b18:	0117 5535 f9cd 9294 fa56 714c 45d1 62d7     ..5U....V.Lq.E.b
  415b28:	010a fe01 3498 2269 deee 6bbd 73b2 b756     .....4i"...k.sV.
  415b38:	8d46 a11a 4f67 2fe9 517a 9151 21d6 4380     F...gO./zQQ..!.C
  415b48:	a487 e9a7 6a98 e2df 4da6 ffa5 fe6d ebfa     .....j...M..m...
  415b58:	5c2f 2ebf 1d3d 1f45 be6f dfa9 7f53 1800     /\..=.E.o...S...
  415b68:	7c3e 0e38 3c1e 9b84 6f37 2a21 062a 8181     >|8..<..7o!**...
  415b78:	d55f 09ca 65d0 26f8 6088 f77a 03ee 3333     _....e.&.`z...33
  415b88:	c933 dc09 4e27 c71c 53a9 3127 c864 8c10     3...'N...S'1d...
  415b98:	3f1f bd01 bd7a 6e52 446a e46d e9e9 f3a9     .?..z.RnjDm.....
  415ba8:	ba35 8484 785b 85e1 2a17 fcfc 69f4 b7ed     5...[x...*...i..
  415bb8:	00c7 5250 8c52 d7eb 19af 3fd5 1a00 2adf     ..PRR......?...*
  415bc8:	5679 4c4c ba34 e974 f462 80b9 7bc7 18b6     yVLL4.t.b....{..
  415bd8:	b6aa 1e7f 30ca 0500 e4e3 84e4 3d9e e17b     .....0.......={.
  415be8:	59ec 2fe9 e3f5 4dd5 e10e a1d0 6843 b8dc     .Y./...M....Ch..
  415bf8:	8631 1d0e 2186 8643 67a0 5ecf f2b5 5f69     1....!C..g.^..i_
  415c08:	cee7 43ba 2b23 ab2b cfc2 3232 7432 66be     ...C#++...222t.f
  415c18:	e5e6 ce35 7ee0 ebe9 edf6 26db a769 c361     ..5..~.....&i.a.
  415c28:	3a86 98e7 808a c0b7 5a02 e4b2 bd13 ed06     .:.......Z......
  415c38:	3333 1133 b414 131d 8c26 8787 3b87 fcfc     333.....&....;..
  415c48:	2066 fc3c e4a0 706b 4d35 369b 746d b706     f <...kp5M.6mt..
  415c58:	c9a6 72c6 caae 52aa 5a5a 499a f1da f0f0     ...r...RZZ.I....
  415c68:	95a8 6d4f 8d4d 2801 5720 5757 5e2c c4bc     ..OmM..( WWW,^..
  415c78:	63a0 0a0b 700a c0e0 f04f f5f5 a741 ff4e     .c...p..O...A.N.
  415c88:	acc0 1f59 35ea bb11 98ba 9b9b 4da3 369b     ..Y..5.......M.6
  415c98:	7592 0534 5260 cd52 0b1a 7a95 af8a 270f     .u4.`RR....z...'
  415ca8:	d327 27ad 9b59 16f1 5058 a653 854c 9999     '..'Y...XPS.L...
  415cb8:	3e19 fcff bd33 d1a6 ad3c a8a8 a108 21a1     .>..3...<......!
  415cc8:	0d08 810d 8787 1607 582c de88 fbbd b898     ........,X......
  415cd8:	a6a7 acd3 3359 c4c4 68c4 d72d 98b4 d96d     ....Y3...h-...m.
  415ce8:	279e 58da 5a5a 6ba2 97d7 ee8d 5c9b bf2f     .'.XZZ.k.....\/.
  415cf8:	9a6c 1973 b73a aeb2 0061 ec0a 77dd c327     l.s.:...a....w'.
  415d08:	fddd 981f 6f37 d1ae 744b fefd effb f6f0     ....7o..Kt......
  415d18:	c2f6 a1d0 1143 f818 8d55 82fc 5ae9 5a09     ....C...U....Z.Z
  415d28:	bbd3 65ac 11eb 636a 6565 9d8d 2b3b 5bbe     ...e..jcee..;+.[
  415d38:	d35d dad9 56da 1777 046a 02de ae0b 974b     ]....Vw.j.....K.
  415d48:	382e e472 0228 0202 a2d1 4b45 dba3 f5fb     .8r.(.....EK....
  415d58:	5fd7 6431 20c8 bcdc 7da9 ab89 a2ea 8deb     ._1d. ...}......
  415d68:	bf90 edfd 156f a67e de6b 5e5d 6e5e 7cad     ....o.~.k.]^^n.|
  415d78:	b607 3e36 aac8 0c0c 8240 8585 bc05 c7bd     ..6>....@.......
  415d88:	f4e3 33e9 0a08 11fa 47a3 d18f fab9 9487     ...3.....G......
  415d98:	f4f4 7874 bd79 73a5 ba5d a6aa e029 a69e     ..txy..s]...)...
  415da8:	f169 5d52 a141 2a54 e0f1 a141 1d64 b9aa     i.R]A.T*..A.d...
  415db8:	8018 44f4 7abd d0f5 6fb7 7c5f ddf7 5c1a     ...D.z...o_|...\
  415dc8:	f2b9 023b be02 7834 600e 6666 e626 99cc     ..;...4x.`ff&...
  415dd8:	a355 f5f6 2a2d 5e92 a04c d96c a7fa 99c9     U...-*.^L.l.....
  415de8:	9e84 f696 c1a7 a27d c5ea 2400 6c8d 6c6c     ......}....$.lll
  415df8:	ede0 8ded e0e0 b8dd f97c fc0a 03fd caf0     ........|.......
  415e08:	bd2b 7af5 2dc5 3232 eb52 197e 21d5 af2f     +..z.-22R.~..!/.
  415e18:	43e2 a78e 6cb5 7159 4008 12ce 9161 9191     .C...lYq.@..a...
  415e28:	f706 aa89 0317 7490 7072 c070 f1f8 b013     .......trpp.....
  415e38:	576b ce30 3b9d d98f e7b3 dec8 63e7 eef7     kW0..;.......c..
  415e48:	95dd 3bdc 34f9 e53d 5a7d f6fb d715 73c3     ...;.4=.}Z.....s
  415e58:	7272 d9d2 6d6e 0698 9a44 0031 2f49 4e4e     rr..nm..D.1.I/NN
  415e68:	984e 7b3d ce0e 8d9e bcc0 f379 6e75 197f     N.={......y.un..
  415e78:	7919 e759 9254 22aa 2635 bcd9 0b79 578d     .yY.T.."5&..y..W
  415e88:	527b 352b 3997 f67b 8d6c d5ba f927 8018     {R+5.9{.l...'...
  415e98:	5102 54a9 e8f8 05a3 f5f0 81f5 afaf 560f     .Q.T...........V
  415ea8:	5eaf 7065 0d5b 341a 07c0 7c1f 9f88 0e7f     .^ep[..4...|....
  415eb8:	dc97 5d0c 52a5 3e21 de3e f3e0 4a98 6e6e     ...].R!>>....Jnn
  415ec8:	522e 5353 96b4 f2bf e68a 827d feff bff7     .RSS......}.....
  415ed8:	9ceb 933e 9a9a 75a2 2363 d9aa 8018 7902     ..>....uc#.....y
  415ee8:	e0f0 7601 dcee f089 83f0 0f08 883f beef     ...v........?...
  415ef8:	b6fb 6ec2 fa6b d0ea 03a1 fc7e 9771 c3e4     ...nk.....~.q...
  415f08:	6782 9f77 0eab d1d1 9251 dae5 ae76 3333     .gw.....Q...v.33
  415f18:	4333 eef7 75dd bfb6 fb7d 8336 25fa 5287     3C...u..}.6..%.R
  415f28:	c4a9 e5f2 239f 7838 9417 654a 9da5 4447     .....#8x..Je..GD
  415f38:	400c 2981 4a95 b95c fc62 7e00 76bb f0ed     .@.).J\.b..~.v..
  415f48:	3bce b513 1796 4814 bd8f 8555 2793 6a4f     .;.....H..U..'Oj
  415f58:	b32d b5b5 ff45 dafe 75f7 d7e9 9faf f6ce     -...E....u......
  415f68:	fb7f 44ed 3da5 f10c 5ff7 ef81 dfbf 0584     ...D.=..._......
  415f78:	e60b f063 41e0 5b26 8110 8018 33c2 2ad5     ..c..A&[.....3.*
  415f88:	23c3 8e47 5ad4 dd56 658b 54aa 1c2a f038     .#G..ZV..e.T*.8.
  415f98:	d693 d7f2 7f5f 7243 a08e e7a7 9d08 478b     ...._.Cr.......G
  415fa8:	54a8 cc2a 379b 7f17 65fd ded8 da2a 8684     .T*..7...e..*...
  415fb8:	e286 effb 3d37 fff9 a4a4 5cbb c0c4 ea84     ....7=.....\....
  415fc8:	0064 99ca af99 9b56 d06e d75a 8cf9 201d     d.....V.n.Z.... 
  415fd8:	d5d7 31be 226f dfec 5fbf 2daf b517 b4d1     ...1o"..._.-....
  415fe8:	5e8e 2699 744d 99ef 8da2 6952 56fc e78b     .^.&Mt....Ri.V..
  415ff8:	9fcf bad7 8a8a 8585 a605 9b4d 7926 a3bc     ..........M.&y..
  416008:	23a3 0d06 a41a 3cf3 0909 f0b7 67d9 4ccb     .#.....<.....g.L
  416018:	66f6 b1c8 4763 6f31 f95e e6a5 cd67 2d9a     .f..cG1o^...g..-
  416028:	77f9 a65d 3f32 7533 9d49 c00c 0282 e3dd     .w].2?3uI.......
  416038:	455a a645 ca5b d749 a2fb 2525 9525 beda     ZEE.[.I...%%%...
  416048:	cb31 1552 1515 dec9 5216 c3ca 9a87 aa83     1.R......R......
  416058:	fd7e 70fa e971 7060 f7bb 57ef a35c 5f4f     ~..pq.`p...W\.O_
  416068:	feff 4af7 65ad c6e3 c979 057a c670 998c     ...J.e..y.z.p...
  416078:	ceb2 63b5 1047 2d96 d4fb 80e8 0d09 850d     ...cG..-........
  416088:	cf8f e57b fcc6 5d5c 925f 71bd 657d 667e     ..{...\]_..q}e~f
  416098:	92ea 193a 8980 ba89 48c7 394c a28e 4beb     ..:......HL9...K
  4160a8:	959a df75 f6a8 1d75 6c6f 1bfb ac36 4247     ..u...u.ol..6.GB
  4160b8:	8242 6d51 7b68 b7f7 ef77 1a3e 315f cb93     B.Qmh{..w.>._1..
  4160c8:	39d8 bf76 f2fc 2e0b ba5d b1a8 d1cc 31b1     .9v.....]......1
  4160d8:	cfe6 205f 1dab 7777 0c77 ee1f ab29 96ee     .._ ..www...)...
  4160e8:	5b2d 7330 9fa6 05c6 7556 2a29 c22a a5d2     -[0s....Vu)**...
  4160f8:	629f ecf6 cb0f 87bd 656c 8565 be6f 56f9     .b......lee.o..V
  416108:	3af6 ba8e 7dce 9eef adfc eb54 3ab2 8019     .:...}....T..:..
  416118:	8e47 d61c 2759 e121 d196 fa5f ba32 309e     G...Y'!..._.2..0
  416128:	4746 1b47 4575 b650 ab7f b736 df6f ea36     FGG.uEP...6.o.6.
  416138:	fa37 87c3 310f fa7d e434 e5e5 dc19 b686     7....1}.4.......
  416148:	3631 7b6d cb06 1615 a616 9571 3916 5352     16m{......q..9RS
  416158:	b053 c964 8d22 0a65 0285 0101 b001 b7b7     S.d.".e.........
  416168:	dd97 b2de 9f65 c6c1 7a46 4c4a 0399 7e07     ....e...FzJL...~
  416178:	ff42 7dfe 63b1 9047 3bac 9280 1292 f8fc     B..}.cG..;......
  416188:	0ee3 f6bc 40da d96c b9b2 e7dc a145 6050     .....@l.....E.P`
  416198:	cae5 eb7f f7b5 b5c8 d26b f44b be5f 497c     ........k.K._.|I
  4161a8:	5b76 5975 0b9d 6dc0 b6db eae2 abd5 eb3a     v[uY...m......:.
  4161b8:	54a9 2c2a f45a d191 d683 c5c5 38c5 e874     .T*,Z........8t.
  4161c8:	6490 f49d 74f4 4444 339c 7da8 4a95 b085     .d...tDD.3.}.J..
  4161d8:	50b0 3ac9 1e8f d23d cf6b 4d58 e3e2 626f     .P.:..=.k.XM..ob
  4161e8:	94ca c8c9 cdcd fbd5 b8d8 38b8 0704 5c57     ...........8..W\
  4161f8:	aa12 e773 18ce 4231 c3fb 3911 9392 b093     ..s...1B...9....
  416208:	c361 bd7a 2b8f 2828 a4c0 1349 4eb5 9ec2     a.z..+((..I..N..
  416218:	c331 ef4f 313d 369a 8a6d abd5 96bf 10fd     1.O.=1.6m.......
  416228:	3722 1737 168b 8c7d 5f97 82ee 3399 b0fd     "77...}.._...3..
  416238:	db6d 9c56 793c 5712 5eaf 85c5 170b ec70     m.V.<y.W.^....p.
  416248:	51d8 5fac 0ebf 3e3e d1d3 d3a9 f03f c7f1     .Q._..>>....?...
  416258:	691f 7e5c cfdf 266f 3d3c c847 e7ee bbdd     .i\~..o&<=G.....
  416268:	7177 7cfe 6484 a89d 28a8 27c9 a2e3 a850     wq.|.d...(.'..P.
  416278:	c8eb 6868 7474 3634 da6d b088 50b0 aebd     ..hhtt46m....P..
  416288:	dab6 6fb7 b98f e773 7fa3 feff af7a f280     ...o..s.....z...
  416298:	e1f0 cc43 3b9d 3f07 b4fd 675f 56dd 5aad     ..C..;.?.._g.V.Z
  4162a8:	e761 5dce 2d7a a539 a952 1010 2fe0 002b     a..]z-9.R..../+.
  4162b8:	1c1c b01c c763 b84e baba ad6a 5053 0050     ....c.N...j.SPP.
  4162c8:	5757 f1e9 6738 6767 5bac 1eb7 6e6e b2ee     WW..8ggg.[..nn..
  4162d8:	98fa 9898 6f08 af6f 930a eb8c afd7 908f     .....oo.........
  4162e8:	3090 bbb8 b74b ebe3 83eb 70f0 5de9 ccd7     .0..K......p.]..
  4162f8:	cccc 1010 2810 036b 006f 8a88 01ba bf3f     .....(k.o.....?.
  416308:	5a19 f0af bcbd 10bc f010 c1a5 534f 6e37     .Z..........OS7n
  416318:	80dc fd7f 0beb 8e83 97d5 8f8f 162f 5a2d     ............/.-Z
  416328:	bb2c 5a7e 1a5a 4ea6 829d 371b ef74 671e     ,.~ZZ..N...7t..g
  416338:	6b6b 2f8b 58be 5181 46a3 a8d5 4c6d 52ab     kk./.X.Q.F..mL.R
  416348:	0bad 9540 854a 7b3d 2376 2323 b903 b9b9     ..@.J.={v###....
  416358:	4c48 444c 6c6c d18c 257b 5958 a159 4763     HLLDll..{%XYY.cG
  416368:	b457 db6d 8e06 8d8e 6f61 8f6f 4321 a086     W.m.....aoo.!C..
  416378:	cb65 7bf2 a6b5 a7a7 e0e3 9fc1 e771 1dce     e..{........q...
  416388:	391c 1872 e9e9 b2e9 51cf 7ebf 0c7d 341a     .9r......Q.~}..4
  416398:	1d18 763b f744 ddee f2f1 ddcb d42a cfc9     ..;vD.......*...
  4163a8:	47cf 4848 9208 ee92 c4e2 e389 2d7a 6529     .GHH........z-)e
  4163b8:	6e6e be8e fb7d c3c1 03c3 6e6e 18ee 6030     nn..}.....nn..0`
  4163c8:	b940 3972 0801 0e3c 519c 46a3 fa61 f7f4     @.r9..<..Q.Fa...
  4163d8:	eae0 92fa a0c6 2c28 402c 5050 c690 d4c9     ......(,,@PP....
  4163e8:	eaf5 c3d5 75ba 301b d86c 9d30 92e7 8013     .....u.0l.0.....
  4163f8:	4665 188c 5989 66b3 bd6b bc15 ef77 b61e     eF...Y.fk...w...
  416408:	dd6e 4d82 369b 5d6a 6fc7 b4da 58e9 58bc     n..M.6j].o...X.X
  416418:	66de 52e0 6e36 00dc ff7f 9515 0af6 429c     .f.R6n.........B
  416428:	c0a1 1f87 c2ce 399c 2573 65eb 6767 c0e3     .......9s%.egg..
  416438:	9f81 9d90 8d9d a8a8 9c28 753a ef52 83bd     ........(.:uR...
  416448:	1c1d d11c 47a3 b40f d56a 760a 7676 d868     .....G..j..vvvh.
  416458:	21b0 8f46 031e 4b4b 634b 08fe 42b5 0bad     .!F...KKKc...B..
  416468:	fbc0 eff7 73a3 8f67 392a f4d7 efe9 c961     .....sg.*9....a.
  416478:	4f92 fdca ed6c 35da 0c08 300c 6dba 3737     .O..l..5...0.m77
  416488:	8477 5787 75bc e9fe fda7 3998 cfd3 f6e8     w..W.u.....9....
  416498:	1c1d 701c eaf5 e51f 267e 0037 d69f 59ac     ...p....~&7....Y
  4164a8:	7433 d2e9 cf15 ff3f ac3c adad 9791 8797     3t....?.<.......
  4164b8:	379b 70e3 cae5 8d15 07c3 5656 0856 0808     .7.p......VVV...
  4164c8:	e8c4 63d1 b564 4faf 9600 dd69 35ba 753a     ...cd..O..i..5:u
  4164d8:	0cea 0707 5807 5a5a 2b22 0b2b 5151 f037     .....XZZ"++.QQ7.
  4164e8:	1fc7 687f 240d 1b1b 2c1b fe5f c605 7d8e     ...h.$...,_....}
  4164f8:	af5d 4973 7e39 18fc cde6 6b9b c3d0 290e     ].sI9~.....k...)
  416508:	0e0e 580e eab5 c96b d9c9 8265 7783 c161     ...X..k...e..wa.
  416518:	f982 3d26 003f daec 6c15 0db2 6bdf 5ab2     ..&=?....l...k.Z
  416528:	24b7 557e b5e6 73a6 ea99 be37 3fb6 6947     .$~U...s..7..?Gi
  416538:	69a9 37da 3f55 fcff 4ff3 e3d9 9d8b 773b     .i.7U?...O....;w
  416548:	eac6 dfd5 9ac8 26a7 e0d7 43c1 ea70 c9d4     .......&...Cp...
  416558:	6172 909b 2090 01fb 9996 1999 8e46 851c     ra... ......F...
  416568:	8b45 eb16 14dc 5f5e 0703 86be c7e3 437f     E.....^_.......C
  416578:	a060 f63f ddee f46b 6a6b 1616 f016 f2f2     `.?...k.kj......
  416588:	87c6 ce1f bd92 b8d9 554a df39 5107 7716     ........JU9..Q.w
  416598:	75a8 d801 41a0 3403 d269 e8c4 75b9 b472     .u...A.4i....ur.
  4165a8:	d56a c2aa 9ccf 9d9d 6f61 6f6f 1074 69b7     j.......aooot..i
  4165b8:	5ad3 cfe3 379b 8e6f 8d46 191a 51bc 1951     .Z...7o.F....QQ.
  4165c8:	ab4d 5898 5a5a d9c2 19d9 b9b9 b0b9 b7b7     M..XZZ..........
  4165d8:	b8c7 5e71 f378 7fcd a942 2254 e121 2e16     ..q^x...B.T"!...
  4165e8:	b85c 3380 4e67 dae3 6bb5 bfb2 66cc 6666     \..3gN...k...fff
  4165f8:	dde8 0fbb 7bde 3def e9f4 aaf3 7d51 64d6     .....{.=....Q}.d
  416608:	dcee 5879 c2b1 9b1f ff37 d080 10d0 43d9     ..yX....7......C
  416618:	b60e b6b6 3d18 0c7a 7ede 1dfb b8b8 5c54     .....=z..~....T\
  416628:	cae6 1a54 6a35 c084 afc0 e7e0 1337 763b     ..T.5j......7.;v
  416638:	c0ec fdfe f861 4ff3 16fd 7548 7676 a786     ....a..O..Huvv..
  416648:	08e7 fdbc dbf6 de68 85bc c75e 68b6 1cd1     ......h...^..h..
  416658:	1b0d 3436 6069 5859 873c 4d26 2e2a 5b0e     ..64i`YX<.&M*..[
  416668:	d517 5bba aa60 457c 4545 7eb8 3afd 5cae     ...[`.|EEE.~.:.\
  416678:	4489 7c7c 523c 5353 5850 00f8 a5a5 d84a     .D||<RSSPX....J.
  416688:	d9d9 51a1 0723 6f34 1cde badd 4375 6eb7     ...Q#.4o....uC.n
  416698:	f5dd 4a9a 2cf2 b75d 87c0 1f0f 8745 8f0e     ...J.,].....E...
  4166a8:	db6f 2a55 2e15 ba5d c884 cbc8 76b8 1aed     o.U*..]......v..
  4166b8:	b3b2 50b3 5050 8500 0cc2 d6d6 7056 7272     ...PPP......Vprr
  4166c8:	9b42 6d36 add1 375b ee74 45dc bdaf 4d8f     B.6m..[7t..E...M
  4166d8:	ad45 2356 3e3e 171e 9c2e 7c47 3c7c 9292     E.V#>>....G||<..
  4166e8:	9092 9b9b 9283 1292 abd4 0e67 1b1b 586b     ..........g...kX
  4166f8:	5959 c5e3 5f17 bb44 ed76 e6e0 5ee6 01a9     YY..._D.v....^..
  416708:	d24d 8018 ad54 09f4 2240 1353 d9f3 1137     M...T...@"S...7.
  416718:	1811 4480 3024 2006 0911 018b 4448 62c2     ...D$0. ....HD.b
  416728:	1200 b091 8018 2444 062c 1120 8b09 4801     ......D$,. ....H
  416738:	c244 0062 9112 18b0 5480 74ad 482d e86b     D.b......T.t-Hk.
  416748:	d06a 7244 0030 5aa9 e4e5 4b64 9b96 a97a     j.Dr0..Z..dK..z.
  416758:	a229 31a7 a900 3cda f47a 7108 7171 7592     )..1...<z..qqq.u
  416768:	5eae 52bd bd45 1121 0031 daa9 8784 5787     .^.RE.!.1......W
  416778:	4d58 59fa c1c1 74bb 21d6 1432 9003 c5aa     XM.Y...t.!2.....
  416788:	5bad 58f1 fcbe 9d33 d2f5 d3d3 7531 14ea     .[.X..3.....1u..
  416798:	9bad 111b 8319 61cb 9551 5b29 ff4e e1f0     .......aQ.)[N...
  4167a8:	d8c3 23b1 e748 dde6 b34f b6b6 a786 08e7     ...#H...O.......
  4167b8:	e9f4 07d3 dbed a0bb 9349 4626 43ad 0448     ........I.&F.CH.
  4167c8:	0030 8aa9 dcec 23f9 fa3e a168 db49 7074     0......#>.h.I.tp
  4167d8:	c470 2b95 0d57 ddde 888d c0b7 2554 3232     p..+W.......T%22
  4167e8:	4c32 66de d656 2afd 23dd ea86 061e 5520     2L.fV..*.#.... U
  4167f8:	ca89 77d8 d456 6cbd 74c9 0b78 554c a0a2     ...wV..l.tx.LU..
  416808:	1f20 0909 4db7 66da 0683 b40d 11ee 244c      ....M.f......L$
  416818:	0307 8890 c584 087b 1222 0316 8890 c584     ......{.".......
  416828:	2400 6122 0031 4889 0c58 2240 1612 9003     .$"a1..HX.@"....
  416838:	8488 00c5 2224 3161 8900 5848 400c 1222     ....$"a1..HX.@".
  416848:	0316 8890 c584 2400 6122 0031 4889 0c58     .......$"a1..HX.
  416858:	2240 1612 9003 8488 00c5 2224 3161 8900     @"........$"a1..
  416868:	5848 400c 1222 0316 8890 c584 2400 6122     HX.@"........$"a
  416878:	0031 4889 0c58 2240 1612 9003 8488 00c5     1..HX.@"........
  416888:	2224 3161 8900 5848 400c 1222 0316 8890     $"a1..HX.@".....
  416898:	c584 2400 6122 0031 4889 0c58 2240 1612     ...$"a1..HX.@"..
  4168a8:	9003 8488 00c5 2224 3161 8900 5848 400c     ......$"a1..HX.@
  4168b8:	1222 0316 8890 c584 2400 6122 0031 4889     "........$"a1..H
  4168c8:	0c58 2240 1612 9003 8488 00c5 2224 3161     X.@"........$"a1
  4168d8:	8900 5848 400c 1222 0316 8890 c584 2400     ..HX.@"........$
  4168e8:	6122 0031 4889 0c58 2240 1612 9003 8488     "a1..HX.@"......
  4168f8:	00c5 2224 3161 8900 5848 400c 1222 0316     ..$"a1..HX.@"...
  416908:	8890 c584 2400 6122 0031 4889 0c58 2240     .....$"a1..HX.@"
  416918:	1612 9003 8488 00c5 2224 3161 8900 5848     ........$"a1..HX
  416928:	400c 1222 0316 8890 c584 2400 6122 0031     .@"........$"a1.
  416938:	4889 0c58 2240 1612 9003 8488 00c5 2224     .HX.@"........$"
  416948:	3161 8900 5848 400c 1222 0316 8890 c584     a1..HX.@".......
  416958:	2400 6122 0031 4889 0c58 2240 1612 9003     .$"a1..HX.@"....
  416968:	8488 00c5 2224 fd61 a81f 6508 fb57 e8f3     ....$"a....eW...
  416978:	00ff 0000 4900 4e45 ae44 6042 0082 0000     .....IEND.B`....

00416988 <data_img_sics_gif>:
  416988:	5448 5054 312f 302e 3220 3030 4f20 0d4b     HTTP/1.0 200 OK.
  416998:	530a 7265 6576 3a72 6c20 4977 2f50 7270     .Server: lwIP/pr
  4169a8:	2d65 2e30 2036 6828 7474 3a70 2f2f 7777     e-0.6 (http://ww
  4169b8:	2e77 6973 7363 732e 2f65 617e 6164 2f6d     w.sics.se/~adam/
  4169c8:	776c 7069 292f 0a0d 6f43 746e 6e65 2d74     lwip/)..Content-
  4169d8:	7974 6570 203a 6d69 6761 2f65 6967 0d66     type: image/gif.
  4169e8:	0d0a 470a 4649 3938 4661 2200 a500 0000     ...GIF89aF."....
  4169f8:	2bd9 6a39 6a6a bfbf 93bf 9393 0f0f b00f     .+9jjj..........
  416a08:	b0b0 a6a6 80a6 8080 7676 1e76 1e1e 9d9d     ........vvv.....
  416a18:	2e9d 2e2e 4949 5449 5454 8a8a 608a 6060     ....IIITTT...```
  416a28:	a6c6 bd99 b2b5 abc2 d9a1 4041 67d5 c055     ..........A@.gU.
  416a38:	aab0 5ed5 d64e 4550 93cc c87d 90a1 8bce     ...^N.PE..}.....
  416a48:	d276 657b 84d1 c96d 8699 3a3a 003a 0000     v.{e..m...:::...
  416a58:	b8b8 ffb8 ffff ffff ffff ffff ffff ffff     ................
  416a68:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
  416a78:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
  416a88:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
  416a98:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
  416aa8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
  416ab8:	002c 0000 4600 2200 0000 fe06 9040 4870     ,....F."....@.pH
  416ac8:	1a2c c88f 72a4 6cc9 9f3a a8d0 4a74 5aad     ,....r.l:...tJ.Z
  416ad8:	d8af 76ac 40a9 be04 e283 3c60 2050 8e0d     ...v.@....`<P ..
  416ae8:	006f 2831 0d1c b507 60c3 2475 f83e 87fc     o.1(.....`u$>...
  416af8:	0611 3de9 0746 7a0b 7c7a 0643 841e 0b78     ...=F..zz|C...x.
  416b08:	6e07 0151 848a 7e08 8079 8987 7a91 0a93     .nQ....~y....z..
  416b18:	9904 9678 034f 799e 9401 439f a39c 05a4     ..x.O..y...C....
  416b28:	a377 4ea0 7998 1e0b a483 1fa6 0596 aa9d     w..N.y..........
  416b38:	0178 8407 1e04 bb1e 51b8 0e84 0543 7707     x........Q..C..w
  416b48:	7fa5 b142 01b2 0863 bb0d 0c01 0d7a 0e44     ..B...c.....z.D.
  416b58:	afd8 054c 047a 0747 b707 a280 7de1 0544     ..L.z.G......}D.
  416b68:	0401 d001 87ea 4f93 9ae0 ce49 79d8 6604     .......O..I..y.f
  416b78:	1520 1010 9211 8029 c0b6 1591 1e45 1990      .....).....E...
  416b88:	4671 5ca8 0e04 2200 e84e 2440 3e9f 0604     qF.\..."N.@$.>..
  416b98:	58a7 93d4 1ca0 3f91 f0e8 0388 21b1 49a2     .X.....?.....!.I
  416ba8:	1900 fc86 4452 01e0 299d 1521 5025 67f7     ....RD...)!.%P.g
  416bb8:	1e25 fd06 9a4e 90b4 15ac cbfa 5352 8c1e     %...N.......RS..
  416bc8:	f8f2 9207 082d 4d3a 4912 4995 14db c404     ....-.:M.I.I....
  416bd8:	8514 aa29 01e7 a408 0149 5114 53e0 d591     ..).....I..Q.S..
  416be8:	0629 641a f402 81c7 059e 2220 a564 ae30     )..d...... "d.0.
  416bf8:	9eab 5397 b9d8 50fd 93ef 4202 3474 9ce8     ...S...P...Bt4..
  416c08:	2120 01c9 7868 55e6 2029 4f56 404c 7151      !..hx.U) VOL@Qq
  416c18:	c082 2170 8522 4bbe 441c ea05 01a4 22bf     ..p!"..K.D....."
  416c28:	f0b5 061c 3851 e08f ec22 ac18 2239 d6d4     ....Q8.."...9"..
  416c38:	4493 3201 c882 61fc 01b3 0c45 832e d030     .D.2...a..E...0.
  416c48:	170e 0f24 8570 ee94 0505 4b53 1b32 983f     ..$.p.....SK2.?.
  416c58:	1dd3 8129 aeb0 8c1e 687e 60e0 545a b08f     ..).....~h.`ZT..
  416c68:	6978 0673 00a2 576b 3dca 5011 04bd 4b30     xis...kW.=.P..0K
  416c78:	d43a 5fab 9b1f 133d 2774 3c88 e025 be17     :.._..=.t'.<%...
  416c88:	797a 0d45 b00c da8b ca90 0680 175d 1c60     zyE.........].`.
  416c98:	4c22 57d8 0622 0020 0798 e408 8056 1c80     "L.W". .....V...
  416ca8:	b7c5 82c5 360c e0e8 1083 2846 84e1 5614     .....6....F(...V
  416cb8:	a168 4110 0000 003b                         h..A..;.

00416cc0 <data_404_html>:
  416cc0:	5448 5054 312f 302e 3420 3430 4620 6c69     HTTP/1.0 404 Fil
  416cd0:	2065 6f6e 2074 6f66 6e75 0d64 530a 7265     e not found..Ser
  416ce0:	6576 3a72 6c20 4977 2f50 7270 2d65 2e30     ver: lwIP/pre-0.
  416cf0:	2036 6828 7474 3a70 2f2f 7777 2e77 6973     6 (http://www.si
  416d00:	7363 732e 2f65 617e 6164 2f6d 776c 7069     cs.se/~adam/lwip
  416d10:	292f 0a0d 6f43 746e 6e65 2d74 7974 6570     /)..Content-type
  416d20:	203a 6574 7478 682f 6d74 0d6c 0d0a 3c0a     : text/html....<
  416d30:	7468 6c6d 0a3e 683c 6165 3e64 743c 7469     html>.<head><tit
  416d40:	656c 6c3e 4977 2050 202d 2041 694c 6867     le>lwIP - A Ligh
  416d50:	7774 6965 6867 2074 4354 2f50 5049 5320     tweight TCP/IP S
  416d60:	6174 6b63 2f3c 6974 6c74 3e65 2f3c 6568     tack</title></he
  416d70:	6461 0a3e 623c 646f 2079 6762 6f63 6f6c     ad>.<body bgcolo
  416d80:	3d72 7722 6968 6574 2022 6574 7478 223d     r="white" text="
  416d90:	6c62 6361 226b 0a3e 200a 2020 3c20 6174     black">..    <ta
  416da0:	6c62 2065 6977 7464 3d68 3122 3030 2225     ble width="100%"
  416db0:	0a3e 2020 2020 2020 743c 2072 6176 696c     >.      <tr vali
  416dc0:	6e67 223d 6f74 2270 3c3e 6474 7720 6469     gn="top"><td wid
  416dd0:	6874 223d 3038 3e22 2009 0a20 2009 3c20     th="80">.  ..  <
  416de0:	2061 7268 6665 223d 7468 7074 2f3a 772f     a href="http://w
  416df0:	7777 732e 6369 2e73 6573 222f 3c3e 6d69     ww.sics.se/"><im
  416e00:	2067 7273 3d63 6922 676d 732f 6369 2e73     g src="img/sics.
  416e10:	6967 2266 090a 2020 6f62 6472 7265 223d     gif"..  border="
  416e20:	2230 6120 746c 223d 4953 5343 6c20 676f     0" alt="SICS log
  416e30:	226f 7420 7469 656c 223d 4953 5343 6c20     o" title="SICS l
  416e40:	676f 226f 3c3e 612f 0a3e 3c09 742f 3e64     ogo"></a>..</td>
  416e50:	743c 2064 6977 7464 3d68 3522 3030 3e22     <td width="500">
  416e60:	2009 0a20 2009 3c20 3168 6c3e 4977 2050     .  ..  <h1>lwIP 
  416e70:	202d 2041 694c 6867 7774 6965 6867 2074     - A Lightweight 
  416e80:	4354 2f50 5049 5320 6174 6b63 2f3c 3168     TCP/IP Stack</h1
  416e90:	0a3e 2009 3c20 3268 343e 3430 2d20 5020     >..  <h2>404 - P
  416ea0:	6761 2065 6f6e 2074 6f66 6e75 3c64 682f     age not found</h
  416eb0:	3e32 090a 2020 703c 0a3e 2009 2020 5320     2>..  <p>..    S
  416ec0:	726f 7972 202c 6874 2065 6170 6567 7920     orry, the page y
  416ed0:	756f 6120 6572 7220 7165 6575 7473 6e69     ou are requestin
  416ee0:	2067 6177 2073 6f6e 2074 6f66 6e75 2064     g was not found 
  416ef0:	6e6f 7420 6968 0a73 2009 2020 7320 7265     on this..    ser
  416f00:	6576 2e72 0a20 2009 3c20 702f 0a3e 3c09     ver. ..  </p>..<
  416f10:	742f 3e64 743c 3e64 090a 2020 6e26 7362     /td><td>..  &nbs
  416f20:	3b70 090a 2f3c 6474 3c3e 742f 3e72 200a     p;..</td></tr>. 
  416f30:	2020 2020 3c20 742f 6261 656c 0a3e 2f3c          </table>.</
  416f40:	6f62 7964 0a3e 2f3c 7468 6c6d 0a3e 0000     body>.</html>...

00416f50 <data_index_html>:
  416f50:	5448 5054 312f 302e 3220 3030 4f20 0d4b     HTTP/1.0 200 OK.
  416f60:	530a 7265 6576 3a72 6c20 4977 2f50 7270     .Server: lwIP/pr
  416f70:	2d65 2e30 2036 6828 7474 3a70 2f2f 7777     e-0.6 (http://ww
  416f80:	2e77 6973 7363 732e 2f65 617e 6164 2f6d     w.sics.se/~adam/
  416f90:	776c 7069 292f 0a0d 6f43 746e 6e65 2d74     lwip/)..Content-
  416fa0:	7974 6570 203a 6574 7478 682f 6d74 0d6c     type: text/html.
  416fb0:	0d0a 3c0a 7468 6c6d 0a3e 683c 6165 3e64     ...<html>.<head>
  416fc0:	743c 7469 656c 6c3e 4977 2050 202d 2041     <title>lwIP - A 
  416fd0:	694c 6867 7774 6965 6867 2074 4354 2f50     Lightweight TCP/
  416fe0:	5049 5320 6174 6b63 2f3c 6974 6c74 3e65     IP Stack</title>
  416ff0:	2f3c 6568 6461 0a3e 623c 646f 2079 6762     </head>.<body bg
  417000:	6f63 6f6c 3d72 7722 6968 6574 2022 6574     color="white" te
  417010:	7478 223d 6c62 6361 226b 0a3e 200a 2020     xt="black">..   
  417020:	3c20 6174 6c62 2065 6977 7464 3d68 3122      <table width="1
  417030:	3030 2225 0a3e 2020 2020 2020 743c 2072     00%">.      <tr 
  417040:	6176 696c 6e67 223d 6f74 2270 3c3e 6474     valign="top"><td
  417050:	7720 6469 6874 223d 3038 3e22 2009 0a20      width="80">.  .
  417060:	2009 3c20 2061 7268 6665 223d 7468 7074     .  <a href="http
  417070:	2f3a 772f 7777 732e 6369 2e73 6573 222f     ://www.sics.se/"
  417080:	3c3e 6d69 2067 7273 3d63 6922 676d 732f     ><img src="img/s
  417090:	6369 2e73 6967 2266 090a 2020 6f62 6472     ics.gif"..  bord
  4170a0:	7265 223d 2230 6120 746c 223d 4953 5343     er="0" alt="SICS
  4170b0:	6c20 676f 226f 7420 7469 656c 223d 4953      logo" title="SI
  4170c0:	5343 6c20 676f 226f 3c3e 612f 0a3e 3c09     CS logo"></a>..<
  4170d0:	742f 3e64 743c 2064 6977 7464 3d68 3522     /td><td width="5
  4170e0:	3030 3e22 2009 0a20 2009 3c20 3168 6c3e     00">.  ..  <h1>l
  4170f0:	4977 2050 202d 2041 694c 6867 7774 6965     wIP - A Lightwei
  417100:	6867 2074 4354 2f50 5049 5320 6174 6b63     ght TCP/IP Stack
  417110:	2f3c 3168 0a3e 2009 3c20 3e70 090a 2020     </h1>..  <p>..  
  417120:	2020 6854 2065 6577 2062 6170 6567 7920       The web page y
  417130:	756f 6120 6572 7720 7461 6863 6e69 2067     ou are watching 
  417140:	6177 2073 6573 7672 6465 6220 2079 2061     was served by a 
  417150:	6973 706d 656c 7720 6265 090a 2020 2020     simple web..    
  417160:	6573 7672 7265 7220 6e75 696e 676e 6f20     server running o
  417170:	206e 6f74 2070 666f 7420 6568 6c20 6769     n top of the lig
  417180:	7468 6577 6769 7468 5420 5043 492f 2050     htweight TCP/IP 
  417190:	7473 6361 206b 613c 090a 2020 2020 7268     stack <a..    hr
  4171a0:	6665 223d 7468 7074 2f3a 772f 7777 732e     ef="http://www.s
  4171b0:	6369 2e73 6573 7e2f 6461 6d61 6c2f 6977     ics.se/~adam/lwi
  4171c0:	2f70 3e22 776c 5049 2f3c 3e61 0a2e 2009     p/">lwIP</a>... 
  4171d0:	3c20 702f 0a3e 2009 3c20 3e70 090a 2020      </p>..  <p>..  
  4171e0:	2020 776c 5049 6920 2073 6e61 6f20 6570       lwIP is an ope
  4171f0:	206e 6f73 7275 6563 6920 706d 656c 656d     n source impleme
  417200:	746e 7461 6f69 206e 666f 7420 6568 5420     ntation of the T
  417210:	5043 492f 0a50 2009 2020 7020 6f72 6f74     CP/IP..    proto
  417220:	6f63 206c 7573 7469 2065 6874 7461 7720     col suite that w
  417230:	7361 6f20 6972 6967 616e 6c6c 2079 7277     as originally wr
  417240:	7469 6574 206e 7962 4120 6164 206d 7544     itten by Adam Du
  417250:	6b6e 6c65 0a73 2009 2020 6f20 2066 6874     nkels..    of th
  417260:	2065 7753 6465 7369 2068 6e49 7473 7469     e Swedish Instit
  417270:	7475 2065 666f 4320 6d6f 7570 6574 2072     ute of Computer 
  417280:	6353 6569 636e 2065 7562 2074 6f6e 2077     Science but now 
  417290:	7369 090a 2020 2020 6562 6e69 2067 6361     is..    being ac
  4172a0:	6974 6576 796c 6420 7665 6c65 706f 6465     tively developed
  4172b0:	6220 2079 2061 6574 6d61 6f20 2066 6564      by a team of de
  4172c0:	6576 6f6c 6570 7372 090a 2020 2020 6964     velopers..    di
  4172d0:	7473 6972 7562 6574 2064 6f77 6c72 2d64     stributed world-
  4172e0:	6977 6564 202e 6953 636e 2065 7469 7327     wide. Since it's
  4172f0:	7220 6c65 6165 6573 202c 776c 5049 6820      release, lwIP h
  417300:	7361 090a 2020 2020 7073 7275 6572 2064     as..    spurred 
  417310:	2061 6f6c 2074 666f 6920 746e 7265 7365     a lot of interes
  417320:	2074 6e61 2064 6168 2073 6562 6e65 7020     t and has been p
  417330:	726f 6574 2064 6f74 7320 7665 7265 6c61     orted to several
  417340:	090a 2020 2020 6c70 7461 6f66 6d72 2073     ..    platforms 
  417350:	6e61 2064 706f 7265 7461 6e69 2067 7973     and operating sy
  417360:	7473 6d65 2e73 6c20 4977 2050 6163 206e     stems. lwIP can 
  417370:	6562 7520 6573 2064 6965 6874 7265 090a     be used either..
  417380:	2020 2020 6977 6874 6f20 2072 6977 6874         with or with
  417390:	756f 2074 6e61 7520 646e 7265 796c 6e69     out an underlyin
  4173a0:	2067 534f 0a2e 2009 3c20 702f 0a3e 2009     g OS...  </p>.. 
  4173b0:	3c20 3e70 090a 2020 2020 6854 2065 6f66      <p>..    The fo
  4173c0:	7563 2073 666f 7420 6568 6c20 4977 2050     cus of the lwIP 
  4173d0:	4354 2f50 5049 6920 706d 656c 656d 746e     TCP/IP implement
  4173e0:	7461 6f69 206e 7369 7420 206f 6572 7564     ation is to redu
  4173f0:	6563 090a 2020 2020 6874 2065 4152 204d     ce..    the RAM 
  417400:	7375 6761 2065 6877 6c69 2065 7473 6c69     usage while stil
  417410:	206c 6168 6976 676e 6120 6620 6c75 206c     l having a full 
  417420:	6373 6c61 2065 4354 2e50 5420 6968 0a73     scale TCP. This.
  417430:	2009 2020 6d20 6b61 7365 6c20 4977 2050     .    makes lwIP 
  417440:	7573 7469 6261 656c 6620 726f 7520 6573     suitable for use
  417450:	6920 206e 6d65 6562 6464 6465 7320 7379      in embedded sys
  417460:	6574 736d 7720 7469 2068 6574 736e 090a     tems with tens..
  417470:	2020 2020 666f 6b20 6c69 626f 7479 7365         of kilobytes
  417480:	6f20 2066 7266 6565 5220 4d41 6120 646e      of free RAM and
  417490:	7220 6f6f 206d 6f66 2072 7261 756f 646e      room for around
  4174a0:	3420 2030 696b 6f6c 7962 6574 0a73 2009      40 kilobytes.. 
  4174b0:	2020 6f20 2066 6f63 6564 5220 4d4f 0a2e        of code ROM..
  4174c0:	2009 3c20 702f 0a3e 2009 3c20 3e70 090a     .  </p>..  <p>..
  4174d0:	2020 2020 6f4d 6572 6920 666e 726f 616d         More informa
  4174e0:	6974 6e6f 6120 6f62 7475 6c20 4977 2050     tion about lwIP 
  4174f0:	6163 206e 6562 6620 756f 646e 6120 2074     can be found at 
  417500:	6874 2065 776c 5049 090a 2020 2020 6f68     the lwIP..    ho
  417510:	656d 6170 6567 6120 2074 613c 090a 2020     mepage at <a..  
  417520:	2020 7268 6665 223d 7468 7074 2f3a 772f       href="http://w
  417530:	7777 732e 6369 2e73 6573 7e2f 6461 6d61     ww.sics.se/~adam
  417540:	6c2f 6977 2f70 3e22 7468 7074 2f3a 772f     /lwip/">http://w
  417550:	7777 732e 6369 2e73 6573 7e2f 6461 6d61     ww.sics.se/~adam
  417560:	6c2f 6977 2f70 2f3c 3e61 0a2e 2009 3c20     /lwip/</a>...  <
  417570:	702f 0a3e 3c09 742f 3e64 743c 3e64 090a     /p>..</td><td>..
  417580:	2020 6e26 7362 3b70 090a 2f3c 6474 3c3e       &nbsp;..</td><
  417590:	742f 3e72 200a 2020 2020 3c20 742f 6261     /tr>.      </tab
  4175a0:	656c 0a3e 2f3c 6f62 7964 0a3e 2f3c 7468     le>.</body>.</ht
  4175b0:	6c6d 0a3e 000a 0000 692f 676d 6c2f 676f     ml>...../img/log
  4175c0:	2e6f 6e70 0067 0000 692f 736e 6570 2e72     o.png.../insper.
  4175d0:	7468 6c6d 0000 0000 692f 676d 732f 6369     html..../img/sic
  4175e0:	2e73 6967 0066 0000 342f 3430 682e 6d74     s.gif.../404.htm
  4175f0:	006c 0000 692f 646e 7865 682e 6d74 006c     l.../index.html.

00417600 <file_img_logo_png>:
  417600:	0000 0000 75b8 0041 4ac6 0041 1ebf 0000     .....uA..JA.....

00417610 <file_insper_html>:
  417610:	7600 0041 75c8 0041 005c 2040 00e4 0000     .vA..uA.\.@ ....

00417620 <file_img_sics_gif>:
  417620:	7610 0041 75d8 0041 6988 0041 0337 0000     .vA..uA..iA.7...

00417630 <file_404_html>:
  417630:	7620 0041 75e8 0041 6cc0 0041 028e 0000      vA..uA..lA.....

00417640 <file_index_html>:
  417640:	7630 0041 75f4 0041 6f50 0041 0665 0000     0vA..uA.PoA.e...
  417650:	4547 2054 0000 0000 692f 736e 6570 2e72     GET ..../insper.
  417660:	7468 6c6d 0000 0000 756e 656d 6f72 003a     html....numero:.
  417670:	3725 0064 3a6e 2520 2c63 6e20 6341 7365     %7d.n: %c, nAces
  417680:	6f73 203a 6425 0a20 0000 0000 342f 3430     so: %d ...../404
  417690:	682e 6d74 006c 0000 c200 0001 00c0 0000     .html...........
  4176a0:	0800 0000 0000 0000 2d2d 5220 7761 4820     ........-- Raw H
  4176b0:	5454 2050 6142 6973 2063 7845 6d61 6c70     TTP Basic Exampl
  4176c0:	2065 2d2d 0a0d 2d2d 5320 4d41 3745 2d30     e --..-- SAME70-
  4176d0:	5058 444c 2d20 0d2d 2d0a 202d 6f43 706d     XPLD --..-- Comp
  4176e0:	6c69 6465 203a 614d 2072 3033 3220 3130     iled: Mar 30 201
  4176f0:	2037 3731 323a 3a34 3635 2d20 0d2d 000a     7 17:24:56 --...
  417700:	0043 0000                                   C...

00417704 <_global_impure_ptr>:
  417704:	0140 2040 000a 0000                         @.@ ....

0041770c <zeroes.7035>:
  41770c:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
  41771c:	4e49 0046 6e69 0066 414e 004e 616e 006e     INF.inf.NAN.nan.
  41772c:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
  41773c:	0000 0000 3130 3332 3534 3736 3938 6261     ....0123456789ab
  41774c:	6463 6665 0000 0000 6e28 6c75 296c 0000     cdef....(null)..
  41775c:	0030 0000                                   0...

00417760 <blanks.7034>:
  417760:	2020 2020 2020 2020 2020 2020 2020 2020                     

00417770 <zeroes.6993>:
  417770:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

00417780 <blanks.6992>:
  417780:	2020 2020 2020 2020 2020 2020 2020 2020                     
  417790:	6e49 6966 696e 7974 0000 0000 614e 004e     Infinity....NaN.
  4177a0:	4f50 4953 0058 0000 002e 0000 0000 0000     POSIX...........

004177b0 <__mprec_tens>:
  4177b0:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
  4177c0:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
  4177d0:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
  4177e0:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
  4177f0:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
  417800:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
  417810:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
  417820:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
  417830:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
  417840:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
  417850:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
  417860:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
  417870:	9db4 79d9 7843 44ea                         ...yCx.D

00417878 <__mprec_bigtens>:
  417878:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
  417888:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
  417898:	bf3c 7f73 4fdd 7515                         <.s..O.u

004178a0 <p05.5373>:
  4178a0:	0005 0000 0019 0000 007d 0000               ........}...

004178ac <_init>:
  4178ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4178ae:	bf00      	nop
  4178b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4178b2:	bc08      	pop	{r3}
  4178b4:	469e      	mov	lr, r3
  4178b6:	4770      	bx	lr

004178b8 <__init_array_start>:
  4178b8:	00410d19 	.word	0x00410d19

004178bc <__frame_dummy_init_array_entry>:
  4178bc:	00400165                                e.@.

004178c0 <_fini>:
  4178c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4178c2:	bf00      	nop
  4178c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4178c6:	bc08      	pop	{r3}
  4178c8:	469e      	mov	lr, r3
  4178ca:	4770      	bx	lr

004178cc <__fini_array_start>:
  4178cc:	00400141 	.word	0x00400141
