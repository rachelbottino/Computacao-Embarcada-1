
SD_MMC_EXAMPLE21.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007904  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00407904  00407904  00017904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000089c  20400000  0040790c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000114  2040089c  004081a8  0002089c  2**2
                  ALLOC
  4 .stack        00002000  204009b0  004082bc  0002089c  2**0
                  ALLOC
  5 .heap         00000200  204029b0  0040a2bc  0002089c  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  0002089c  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000208ca  2**0
                  CONTENTS, READONLY
  8 .debug_info   00015dc4  00000000  00000000  00020923  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000358f  00000000  00000000  000366e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000e721  00000000  00000000  00039c76  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000f68  00000000  00000000  00048397  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001080  00000000  00000000  000492ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00024508  00000000  00000000  0004a37f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00012a98  00000000  00000000  0006e887  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00093904  00000000  00000000  0008131f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00003164  00000000  00000000  00114c24  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	204029b0 	.word	0x204029b0
  400004:	00401fa1 	.word	0x00401fa1
  400008:	00401f9d 	.word	0x00401f9d
  40000c:	00401f9d 	.word	0x00401f9d
  400010:	00401f9d 	.word	0x00401f9d
  400014:	00401f9d 	.word	0x00401f9d
  400018:	00401f9d 	.word	0x00401f9d
	...
  40002c:	00401f9d 	.word	0x00401f9d
  400030:	00401f9d 	.word	0x00401f9d
  400034:	00000000 	.word	0x00000000
  400038:	00401f9d 	.word	0x00401f9d
  40003c:	00401f9d 	.word	0x00401f9d
  400040:	00401f9d 	.word	0x00401f9d
  400044:	00401f9d 	.word	0x00401f9d
  400048:	00401f9d 	.word	0x00401f9d
  40004c:	00401f9d 	.word	0x00401f9d
  400050:	00401f9d 	.word	0x00401f9d
  400054:	00401f9d 	.word	0x00401f9d
  400058:	00401f9d 	.word	0x00401f9d
  40005c:	00401f9d 	.word	0x00401f9d
  400060:	00401f9d 	.word	0x00401f9d
  400064:	00000000 	.word	0x00000000
  400068:	00401b6d 	.word	0x00401b6d
  40006c:	00401b81 	.word	0x00401b81
  400070:	00401b95 	.word	0x00401b95
  400074:	00401f9d 	.word	0x00401f9d
  400078:	00401f9d 	.word	0x00401f9d
  40007c:	00401f9d 	.word	0x00401f9d
  400080:	00401ba9 	.word	0x00401ba9
  400084:	00401bbd 	.word	0x00401bbd
  400088:	00401f9d 	.word	0x00401f9d
  40008c:	00401f9d 	.word	0x00401f9d
  400090:	00401f9d 	.word	0x00401f9d
  400094:	00401f9d 	.word	0x00401f9d
  400098:	00401f9d 	.word	0x00401f9d
  40009c:	00401f9d 	.word	0x00401f9d
  4000a0:	00401f9d 	.word	0x00401f9d
  4000a4:	00401f9d 	.word	0x00401f9d
  4000a8:	00401f9d 	.word	0x00401f9d
  4000ac:	00401f9d 	.word	0x00401f9d
  4000b0:	00401f9d 	.word	0x00401f9d
  4000b4:	00401f9d 	.word	0x00401f9d
  4000b8:	00401f9d 	.word	0x00401f9d
  4000bc:	00401f9d 	.word	0x00401f9d
  4000c0:	00401f9d 	.word	0x00401f9d
  4000c4:	00401f9d 	.word	0x00401f9d
  4000c8:	00401f9d 	.word	0x00401f9d
  4000cc:	00401f9d 	.word	0x00401f9d
  4000d0:	00000000 	.word	0x00000000
  4000d4:	00401f9d 	.word	0x00401f9d
  4000d8:	00000000 	.word	0x00000000
  4000dc:	00401f9d 	.word	0x00401f9d
  4000e0:	00401f9d 	.word	0x00401f9d
  4000e4:	00401f9d 	.word	0x00401f9d
  4000e8:	00401f9d 	.word	0x00401f9d
  4000ec:	00401f9d 	.word	0x00401f9d
  4000f0:	00401f9d 	.word	0x00401f9d
  4000f4:	00401f9d 	.word	0x00401f9d
  4000f8:	00401f9d 	.word	0x00401f9d
  4000fc:	00401f9d 	.word	0x00401f9d
  400100:	00401f9d 	.word	0x00401f9d
  400104:	00401f9d 	.word	0x00401f9d
  400108:	00401f9d 	.word	0x00401f9d
  40010c:	00401f9d 	.word	0x00401f9d
  400110:	00401f9d 	.word	0x00401f9d
	...
  400120:	00401f9d 	.word	0x00401f9d
  400124:	00401f9d 	.word	0x00401f9d
  400128:	00401f9d 	.word	0x00401f9d
  40012c:	00401f9d 	.word	0x00401f9d
  400130:	00401f9d 	.word	0x00401f9d
  400134:	00000000 	.word	0x00000000
  400138:	00401f9d 	.word	0x00401f9d
  40013c:	00401f9d 	.word	0x00401f9d

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	2040089c 	.word	0x2040089c
  40015c:	00000000 	.word	0x00000000
  400160:	0040790c 	.word	0x0040790c

00400164 <frame_dummy>:
  400164:	4b08      	ldr	r3, [pc, #32]	; (400188 <frame_dummy+0x24>)
  400166:	b510      	push	{r4, lr}
  400168:	b11b      	cbz	r3, 400172 <frame_dummy+0xe>
  40016a:	4908      	ldr	r1, [pc, #32]	; (40018c <frame_dummy+0x28>)
  40016c:	4808      	ldr	r0, [pc, #32]	; (400190 <frame_dummy+0x2c>)
  40016e:	f3af 8000 	nop.w
  400172:	4808      	ldr	r0, [pc, #32]	; (400194 <frame_dummy+0x30>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b903      	cbnz	r3, 40017a <frame_dummy+0x16>
  400178:	bd10      	pop	{r4, pc}
  40017a:	4b07      	ldr	r3, [pc, #28]	; (400198 <frame_dummy+0x34>)
  40017c:	2b00      	cmp	r3, #0
  40017e:	d0fb      	beq.n	400178 <frame_dummy+0x14>
  400180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400184:	4718      	bx	r3
  400186:	bf00      	nop
  400188:	00000000 	.word	0x00000000
  40018c:	204008a0 	.word	0x204008a0
  400190:	0040790c 	.word	0x0040790c
  400194:	0040790c 	.word	0x0040790c
  400198:	00000000 	.word	0x00000000

0040019c <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
  40019c:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
  40019e:	4b07      	ldr	r3, [pc, #28]	; (4001bc <sd_mmc_configure_slot+0x20>)
  4001a0:	6819      	ldr	r1, [r3, #0]
  4001a2:	f891 3022 	ldrb.w	r3, [r1, #34]	; 0x22
  4001a6:	3300      	adds	r3, #0
  4001a8:	bf18      	it	ne
  4001aa:	2301      	movne	r3, #1
  4001ac:	7c4a      	ldrb	r2, [r1, #17]
  4001ae:	6809      	ldr	r1, [r1, #0]
  4001b0:	4803      	ldr	r0, [pc, #12]	; (4001c0 <sd_mmc_configure_slot+0x24>)
  4001b2:	7800      	ldrb	r0, [r0, #0]
  4001b4:	4c03      	ldr	r4, [pc, #12]	; (4001c4 <sd_mmc_configure_slot+0x28>)
  4001b6:	47a0      	blx	r4
  4001b8:	bd10      	pop	{r4, pc}
  4001ba:	bf00      	nop
  4001bc:	204008bc 	.word	0x204008bc
  4001c0:	204008c2 	.word	0x204008c2
  4001c4:	004015fd 	.word	0x004015fd

004001c8 <sd_mmc_select_slot>:
 * \retval SD_MMC_ERR_UNUSABLE Unusable card
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
  4001c8:	b510      	push	{r4, lr}
	if (slot >= SD_MMC_MEM_CNT) {
  4001ca:	2800      	cmp	r0, #0
  4001cc:	d154      	bne.n	400278 <sd_mmc_select_slot+0xb0>
	}
	Assert(sd_mmc_nb_block_remaining == 0);

#if (defined SD_MMC_0_CD_GPIO)
	//! Card Detect pins
	if (ioport_get_pin_level(sd_mmc_cards[slot].cd_gpio)
  4001ce:	4b33      	ldr	r3, [pc, #204]	; (40029c <sd_mmc_select_slot+0xd4>)
  4001d0:	689a      	ldr	r2, [r3, #8]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4001d2:	4b33      	ldr	r3, [pc, #204]	; (4002a0 <sd_mmc_select_slot+0xd8>)
  4001d4:	eb03 1352 	add.w	r3, r3, r2, lsr #5
  4001d8:	025b      	lsls	r3, r3, #9
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4001da:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
  4001dc:	f002 021f 	and.w	r2, r2, #31
  4001e0:	2301      	movs	r3, #1
  4001e2:	fa03 f202 	lsl.w	r2, r3, r2
  4001e6:	420a      	tst	r2, r1
  4001e8:	d00e      	beq.n	400208 <sd_mmc_select_slot+0x40>
			!= SD_MMC_0_CD_DETECT_VALUE) {
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
  4001ea:	4b2c      	ldr	r3, [pc, #176]	; (40029c <sd_mmc_select_slot+0xd4>)
  4001ec:	7b9b      	ldrb	r3, [r3, #14]
  4001ee:	2b01      	cmp	r3, #1
  4001f0:	d105      	bne.n	4001fe <sd_mmc_select_slot+0x36>
	return false;
}

static inline void SD_MMC_STOP_TIMEOUT(void)
{
	if (sd_mmc_sam_systick_used) {
  4001f2:	4b2c      	ldr	r3, [pc, #176]	; (4002a4 <sd_mmc_select_slot+0xdc>)
  4001f4:	781b      	ldrb	r3, [r3, #0]
  4001f6:	b113      	cbz	r3, 4001fe <sd_mmc_select_slot+0x36>
		SysTick->CTRL = 0;
  4001f8:	2200      	movs	r2, #0
  4001fa:	4b2b      	ldr	r3, [pc, #172]	; (4002a8 <sd_mmc_select_slot+0xe0>)
  4001fc:	601a      	str	r2, [r3, #0]
	if (ioport_get_pin_level(sd_mmc_cards[slot].cd_gpio)
			!= SD_MMC_0_CD_DETECT_VALUE) {
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
			SD_MMC_STOP_TIMEOUT();
		}
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
  4001fe:	2204      	movs	r2, #4
  400200:	4b26      	ldr	r3, [pc, #152]	; (40029c <sd_mmc_select_slot+0xd4>)
  400202:	739a      	strb	r2, [r3, #14]
		return SD_MMC_ERR_NO_CARD;
  400204:	2002      	movs	r0, #2
  400206:	bd10      	pop	{r4, pc}
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
  400208:	4b24      	ldr	r3, [pc, #144]	; (40029c <sd_mmc_select_slot+0xd4>)
  40020a:	7b9b      	ldrb	r3, [r3, #14]
  40020c:	2b04      	cmp	r3, #4
  40020e:	d115      	bne.n	40023c <sd_mmc_select_slot+0x74>
		// A card plug on going, but this is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
  400210:	2201      	movs	r2, #1
  400212:	4b22      	ldr	r3, [pc, #136]	; (40029c <sd_mmc_select_slot+0xd4>)
  400214:	739a      	strb	r2, [r3, #14]
		static xTimeOutType xTimeOut;
#endif

static inline void SD_MMC_START_TIMEOUT(void)
{
	if (!SysTick->CTRL) {
  400216:	4b24      	ldr	r3, [pc, #144]	; (4002a8 <sd_mmc_select_slot+0xe0>)
  400218:	681b      	ldr	r3, [r3, #0]
  40021a:	b93b      	cbnz	r3, 40022c <sd_mmc_select_slot+0x64>
		sd_mmc_sam_systick_used = true;
  40021c:	4b21      	ldr	r3, [pc, #132]	; (4002a4 <sd_mmc_select_slot+0xdc>)
  40021e:	701a      	strb	r2, [r3, #0]
		SysTick->LOAD = (sysclk_get_cpu_hz() / (8 * 1000))
  400220:	4b21      	ldr	r3, [pc, #132]	; (4002a8 <sd_mmc_select_slot+0xe0>)
  400222:	4922      	ldr	r1, [pc, #136]	; (4002ac <sd_mmc_select_slot+0xe4>)
  400224:	6059      	str	r1, [r3, #4]
				* SD_MMC_DEBOUNCE_TIMEOUT;
		SysTick->CTRL = SysTick_CTRL_ENABLE_Msk;
  400226:	601a      	str	r2, [r3, #0]
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
		// A card plug on going, but this is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
		// Debounce + Power On Setup
		SD_MMC_START_TIMEOUT();
		return SD_MMC_ERR_NO_CARD;
  400228:	2002      	movs	r0, #2
  40022a:	bd10      	pop	{r4, pc}
		sd_mmc_sam_systick_used = true;
		SysTick->LOAD = (sysclk_get_cpu_hz() / (8 * 1000))
				* SD_MMC_DEBOUNCE_TIMEOUT;
		SysTick->CTRL = SysTick_CTRL_ENABLE_Msk;
	} else {
		sd_mmc_sam_systick_used = false;
  40022c:	2200      	movs	r2, #0
  40022e:	4b1d      	ldr	r3, [pc, #116]	; (4002a4 <sd_mmc_select_slot+0xdc>)
  400230:	701a      	strb	r2, [r3, #0]
#ifdef FREERTOS_USED
		// Note: the define INCLUDE_vTaskDelay must be set to one
		// in FreeRTOSConfig.h file.
		vTaskSetTimeOutState(&xTimeOut);
#else
		delay_ms(SD_MMC_DEBOUNCE_TIMEOUT);
  400232:	481f      	ldr	r0, [pc, #124]	; (4002b0 <sd_mmc_select_slot+0xe8>)
  400234:	4b1f      	ldr	r3, [pc, #124]	; (4002b4 <sd_mmc_select_slot+0xec>)
  400236:	4798      	blx	r3
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
		// A card plug on going, but this is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
		// Debounce + Power On Setup
		SD_MMC_START_TIMEOUT();
		return SD_MMC_ERR_NO_CARD;
  400238:	2002      	movs	r0, #2
  40023a:	bd10      	pop	{r4, pc}
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
  40023c:	2b01      	cmp	r3, #1
  40023e:	d10b      	bne.n	400258 <sd_mmc_select_slot+0x90>
	}
}

static inline bool SD_MMC_IS_TIMEOUT(void)
{
	if (!sd_mmc_sam_systick_used) {
  400240:	4b18      	ldr	r3, [pc, #96]	; (4002a4 <sd_mmc_select_slot+0xdc>)
  400242:	781b      	ldrb	r3, [r3, #0]
  400244:	b1f3      	cbz	r3, 400284 <sd_mmc_select_slot+0xbc>
		return (xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdTRUE);
#else
		return true;
#endif
	}
	if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
  400246:	4b18      	ldr	r3, [pc, #96]	; (4002a8 <sd_mmc_select_slot+0xe0>)
  400248:	681b      	ldr	r3, [r3, #0]
  40024a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  40024e:	d015      	beq.n	40027c <sd_mmc_select_slot+0xb4>
		SysTick->CTRL = 0;
  400250:	2200      	movs	r2, #0
  400252:	4b15      	ldr	r3, [pc, #84]	; (4002a8 <sd_mmc_select_slot+0xe0>)
  400254:	601a      	str	r2, [r3, #0]
  400256:	e015      	b.n	400284 <sd_mmc_select_slot+0xbc>
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
		sd_mmc_cards[slot].bus_width = 1;
		sd_mmc_cards[slot].high_speed = 0;
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
  400258:	2b03      	cmp	r3, #3
  40025a:	d011      	beq.n	400280 <sd_mmc_select_slot+0xb8>
		sd_mmc_cards[slot].high_speed = 0;
	}
#endif

	// Initialize interface
	sd_mmc_slot_sel = slot;
  40025c:	2200      	movs	r2, #0
  40025e:	4b16      	ldr	r3, [pc, #88]	; (4002b8 <sd_mmc_select_slot+0xf0>)
  400260:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
  400262:	4c0e      	ldr	r4, [pc, #56]	; (40029c <sd_mmc_select_slot+0xd4>)
  400264:	4b15      	ldr	r3, [pc, #84]	; (4002bc <sd_mmc_select_slot+0xf4>)
  400266:	601c      	str	r4, [r3, #0]
	sd_mmc_configure_slot();
  400268:	4b15      	ldr	r3, [pc, #84]	; (4002c0 <sd_mmc_select_slot+0xf8>)
  40026a:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
  40026c:	7ba0      	ldrb	r0, [r4, #14]
  40026e:	2802      	cmp	r0, #2
  400270:	bf14      	ite	ne
  400272:	2000      	movne	r0, #0
  400274:	2001      	moveq	r0, #1
  400276:	bd10      	pop	{r4, pc}
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
	if (slot >= SD_MMC_MEM_CNT) {
		return SD_MMC_ERR_SLOT;
  400278:	2004      	movs	r0, #4
  40027a:	bd10      	pop	{r4, pc}
		return SD_MMC_ERR_NO_CARD;
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
		if (!SD_MMC_IS_TIMEOUT()) {
			// Debounce on going
			return SD_MMC_ERR_NO_CARD;
  40027c:	2002      	movs	r0, #2
  40027e:	bd10      	pop	{r4, pc}
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
		sd_mmc_cards[slot].bus_width = 1;
		sd_mmc_cards[slot].high_speed = 0;
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
		return SD_MMC_ERR_UNUSABLE;
  400280:	2003      	movs	r0, #3
  400282:	bd10      	pop	{r4, pc}
		if (!SD_MMC_IS_TIMEOUT()) {
			// Debounce on going
			return SD_MMC_ERR_NO_CARD;
		}
		// Card is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
  400284:	4b05      	ldr	r3, [pc, #20]	; (40029c <sd_mmc_select_slot+0xd4>)
  400286:	2202      	movs	r2, #2
  400288:	739a      	strb	r2, [r3, #14]
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
  40028a:	4a0e      	ldr	r2, [pc, #56]	; (4002c4 <sd_mmc_select_slot+0xfc>)
  40028c:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
  40028e:	2201      	movs	r2, #1
  400290:	745a      	strb	r2, [r3, #17]
		sd_mmc_cards[slot].high_speed = 0;
  400292:	2200      	movs	r2, #0
  400294:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  400298:	e7e0      	b.n	40025c <sd_mmc_select_slot+0x94>
  40029a:	bf00      	nop
  40029c:	2040000c 	.word	0x2040000c
  4002a0:	00200707 	.word	0x00200707
  4002a4:	204008ba 	.word	0x204008ba
  4002a8:	e000e010 	.word	0xe000e010
  4002ac:	023c3460 	.word	0x023c3460
  4002b0:	0303af6b 	.word	0x0303af6b
  4002b4:	20400001 	.word	0x20400001
  4002b8:	204008c2 	.word	0x204008c2
  4002bc:	204008bc 	.word	0x204008bc
  4002c0:	0040019d 	.word	0x0040019d
  4002c4:	00061a80 	.word	0x00061a80

004002c8 <sdio_cmd52>:
 *
 * \return true if success, otherwise false
 */
static bool sdio_cmd52(uint8_t rw_flag, uint8_t func_nb,
		uint32_t reg_addr, uint8_t rd_after_wr, uint8_t *io_data)
{
  4002c8:	b538      	push	{r3, r4, r5, lr}
  4002ca:	9c04      	ldr	r4, [sp, #16]
	Assert(io_data != NULL);
	if (!driver_send_cmd(SDIO_CMD52_IO_RW_DIRECT,
  4002cc:	0252      	lsls	r2, r2, #9
  4002ce:	ea42 63c3 	orr.w	r3, r2, r3, lsl #27
  4002d2:	ea43 7101 	orr.w	r1, r3, r1, lsl #28
  4002d6:	ea41 70c0 	orr.w	r0, r1, r0, lsl #31
  4002da:	7821      	ldrb	r1, [r4, #0]
  4002dc:	4301      	orrs	r1, r0
  4002de:	f241 3034 	movw	r0, #4916	; 0x1334
  4002e2:	4b04      	ldr	r3, [pc, #16]	; (4002f4 <sdio_cmd52+0x2c>)
  4002e4:	4798      	blx	r3
  4002e6:	4605      	mov	r5, r0
  4002e8:	b110      	cbz	r0, 4002f0 <sdio_cmd52+0x28>
		| ((uint32_t)func_nb << SDIO_CMD52_FUNCTION_NUM)
		| ((uint32_t)rd_after_wr << SDIO_CMD52_RAW_FLAG)
		| ((uint32_t)reg_addr << SDIO_CMD52_REG_ADRR))) {
		return false;
	}
	*io_data = driver_get_response() & 0xFF;
  4002ea:	4b03      	ldr	r3, [pc, #12]	; (4002f8 <sdio_cmd52+0x30>)
  4002ec:	4798      	blx	r3
  4002ee:	7020      	strb	r0, [r4, #0]
	return true;
}
  4002f0:	4628      	mov	r0, r5
  4002f2:	bd38      	pop	{r3, r4, r5, pc}
  4002f4:	004016c9 	.word	0x004016c9
  4002f8:	004016ed 	.word	0x004016ed

004002fc <sd_mmc_cmd9_mci>:
 * data (CSD) on the CMD line mci.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_mci(void)
{
  4002fc:	b510      	push	{r4, lr}
	if (!driver_send_cmd(SDMMC_MCI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16)) {
  4002fe:	4b08      	ldr	r3, [pc, #32]	; (400320 <sd_mmc_cmd9_mci+0x24>)
  400300:	681b      	ldr	r3, [r3, #0]
  400302:	8999      	ldrh	r1, [r3, #12]
  400304:	0409      	lsls	r1, r1, #16
  400306:	f641 3009 	movw	r0, #6921	; 0x1b09
  40030a:	4b06      	ldr	r3, [pc, #24]	; (400324 <sd_mmc_cmd9_mci+0x28>)
  40030c:	4798      	blx	r3
  40030e:	4604      	mov	r4, r0
  400310:	b120      	cbz	r0, 40031c <sd_mmc_cmd9_mci+0x20>
		return false;
	}
	driver_get_response_128(sd_mmc_card->csd);
  400312:	4b03      	ldr	r3, [pc, #12]	; (400320 <sd_mmc_cmd9_mci+0x24>)
  400314:	6818      	ldr	r0, [r3, #0]
  400316:	3012      	adds	r0, #18
  400318:	4b03      	ldr	r3, [pc, #12]	; (400328 <sd_mmc_cmd9_mci+0x2c>)
  40031a:	4798      	blx	r3
	return true;
}
  40031c:	4620      	mov	r0, r4
  40031e:	bd10      	pop	{r4, pc}
  400320:	204008bc 	.word	0x204008bc
  400324:	004016c9 	.word	0x004016c9
  400328:	004016f5 	.word	0x004016f5

0040032c <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
  40032c:	b508      	push	{r3, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
  40032e:	4b03      	ldr	r3, [pc, #12]	; (40033c <sd_mmc_deselect_slot+0x10>)
  400330:	781b      	ldrb	r3, [r3, #0]
  400332:	b913      	cbnz	r3, 40033a <sd_mmc_deselect_slot+0xe>
		driver_deselect_device(sd_mmc_slot_sel);
  400334:	2000      	movs	r0, #0
  400336:	4b02      	ldr	r3, [pc, #8]	; (400340 <sd_mmc_deselect_slot+0x14>)
  400338:	4798      	blx	r3
  40033a:	bd08      	pop	{r3, pc}
  40033c:	204008c2 	.word	0x204008c2
  400340:	004016a1 	.word	0x004016a1

00400344 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
  400344:	b508      	push	{r3, lr}
	//! Enable the PMC clock for the card detect pins
#if (defined SD_MMC_0_CD_GPIO) && (SAM) && (!SAM4L)
# include "pmc.h"
# define SD_MMC_ENABLE_CD_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_CD_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_CD_PIN, ~)
  400346:	2010      	movs	r0, #16
  400348:	4b05      	ldr	r3, [pc, #20]	; (400360 <sd_mmc_init+0x1c>)
  40034a:	4798      	blx	r3
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
  40034c:	2204      	movs	r2, #4
  40034e:	4b05      	ldr	r3, [pc, #20]	; (400364 <sd_mmc_init+0x20>)
  400350:	739a      	strb	r2, [r3, #14]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
  400352:	22ff      	movs	r2, #255	; 0xff
  400354:	4b04      	ldr	r3, [pc, #16]	; (400368 <sd_mmc_init+0x24>)
  400356:	701a      	strb	r2, [r3, #0]
	driver_init();
  400358:	4b04      	ldr	r3, [pc, #16]	; (40036c <sd_mmc_init+0x28>)
  40035a:	4798      	blx	r3
  40035c:	bd08      	pop	{r3, pc}
  40035e:	bf00      	nop
  400360:	00401cf9 	.word	0x00401cf9
  400364:	2040000c 	.word	0x2040000c
  400368:	204008c2 	.word	0x204008c2
  40036c:	004015c1 	.word	0x004015c1

00400370 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
  400370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400374:	b094      	sub	sp, #80	; 0x50
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
  400376:	4ba8      	ldr	r3, [pc, #672]	; (400618 <sd_mmc_check+0x2a8>)
  400378:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
  40037a:	2801      	cmp	r0, #1
  40037c:	d005      	beq.n	40038a <sd_mmc_check+0x1a>
  40037e:	4604      	mov	r4, r0
		sd_mmc_deselect_slot();
  400380:	4ba6      	ldr	r3, [pc, #664]	; (40061c <sd_mmc_check+0x2ac>)
  400382:	4798      	blx	r3
		return sd_mmc_err;
  400384:	4620      	mov	r0, r4
  400386:	f000 bc14 	b.w	400bb2 <sd_mmc_check+0x842>
 */
static bool sd_mmc_mci_card_init(void)
{
	uint8_t v2 = 0;
#ifdef SDIO_SUPPORT_ENABLE
	uint8_t data = 0x08;
  40038a:	ad14      	add	r5, sp, #80	; 0x50
  40038c:	2308      	movs	r3, #8
  40038e:	f805 3d45 	strb.w	r3, [r5, #-69]!
#endif

	// In first, try to install SD/SDIO card
	sd_mmc_card->type = CARD_TYPE_SD;
  400392:	4ba3      	ldr	r3, [pc, #652]	; (400620 <sd_mmc_check+0x2b0>)
  400394:	681b      	ldr	r3, [r3, #0]
  400396:	2601      	movs	r6, #1
  400398:	73de      	strb	r6, [r3, #15]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
  40039a:	2400      	movs	r4, #0
  40039c:	741c      	strb	r4, [r3, #16]
	sd_mmc_card->rca = 0;
  40039e:	819c      	strh	r4, [r3, #12]
	sd_mmc_debug("Start SD card install\n\r");

	// Card need of 74 cycles clock minimum to start
	driver_send_clock();
  4003a0:	4ba0      	ldr	r3, [pc, #640]	; (400624 <sd_mmc_check+0x2b4>)
  4003a2:	4798      	blx	r3

#ifdef SDIO_SUPPORT_ENABLE
	/* CMD52 Reset SDIO */
	sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA,SDIO_CCCR_IOA, 0, &data);
  4003a4:	9500      	str	r5, [sp, #0]
  4003a6:	4623      	mov	r3, r4
  4003a8:	2206      	movs	r2, #6
  4003aa:	4621      	mov	r1, r4
  4003ac:	4630      	mov	r0, r6
  4003ae:	4d9e      	ldr	r5, [pc, #632]	; (400628 <sd_mmc_check+0x2b8>)
  4003b0:	47a8      	blx	r5
#endif

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
  4003b2:	4621      	mov	r1, r4
  4003b4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  4003b8:	4b9c      	ldr	r3, [pc, #624]	; (40062c <sd_mmc_check+0x2bc>)
  4003ba:	4798      	blx	r3
  4003bc:	2800      	cmp	r0, #0
  4003be:	f000 83ab 	beq.w	400b18 <sd_mmc_check+0x7a8>
{
	uint32_t resp;

	*v2 = 0;
	// Test for SD version 2
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
  4003c2:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
  4003c6:	f245 5008 	movw	r0, #21768	; 0x5508
  4003ca:	4b98      	ldr	r3, [pc, #608]	; (40062c <sd_mmc_check+0x2bc>)
  4003cc:	4798      	blx	r3
  4003ce:	2800      	cmp	r0, #0
  4003d0:	f000 83aa 	beq.w	400b28 <sd_mmc_check+0x7b8>
			SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		return true; // It is not a V2
	}
	// Check R7 response
	resp = driver_get_response();
  4003d4:	4b96      	ldr	r3, [pc, #600]	; (400630 <sd_mmc_check+0x2c0>)
  4003d6:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
  4003d8:	f1b0 3fff 	cmp.w	r0, #4294967295
  4003dc:	f000 83a7 	beq.w	400b2e <sd_mmc_check+0x7be>
		// No compliance R7 value
		return true; // It is not a V2
	}
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
  4003e0:	f3c0 000b 	ubfx	r0, r0, #0, #12
  4003e4:	f5b0 7fd5 	cmp.w	r0, #426	; 0x1aa
  4003e8:	f040 8396 	bne.w	400b18 <sd_mmc_check+0x7a8>
		sd_mmc_debug("%s: CMD8 resp32 0x%08x UNUSABLE CARD\n\r",
				__func__, resp);
		return false;
	}
	sd_mmc_debug("SD card V2\n\r");
	*v2 = 1;
  4003ec:	46b0      	mov	r8, r6
  4003ee:	e3a0      	b.n	400b32 <sd_mmc_check+0x7c2>
	// CMD5 - SDIO send operation condition (OCR) command.
	if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND, 0)) {
		sd_mmc_debug("%s: CMD5 Fail\n\r", __func__);
		return true; // No error but card type not updated
	}
	resp = driver_get_response();
  4003f0:	4b8f      	ldr	r3, [pc, #572]	; (400630 <sd_mmc_check+0x2c0>)
  4003f2:	4798      	blx	r3
	if ((resp & OCR_SDIO_NF) == 0) {
  4003f4:	f010 4fe0 	tst.w	r0, #1879048192	; 0x70000000
  4003f8:	f000 83a3 	beq.w	400b42 <sd_mmc_check+0x7d2>
  4003fc:	f241 3489 	movw	r4, #5001	; 0x1389
	 * 4(SPI) 6(MCI) = response byte size
	 */
	uint32_t cmd5_retry = 5000;
	while (1) {
		// CMD5 - SDIO send operation condition (OCR) command.
		if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND,
  400400:	f244 5605 	movw	r6, #17669	; 0x4505
  400404:	4d89      	ldr	r5, [pc, #548]	; (40062c <sd_mmc_check+0x2bc>)
				resp & SD_MMC_VOLTAGE_SUPPORT)) {
			sd_mmc_debug("%s: CMD5 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
  400406:	4f8a      	ldr	r7, [pc, #552]	; (400630 <sd_mmc_check+0x2c0>)
	 * 4(SPI) 6(MCI) = response byte size
	 */
	uint32_t cmd5_retry = 5000;
	while (1) {
		// CMD5 - SDIO send operation condition (OCR) command.
		if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND,
  400408:	f400 11fc 	and.w	r1, r0, #2064384	; 0x1f8000
  40040c:	4630      	mov	r0, r6
  40040e:	47a8      	blx	r5
  400410:	2800      	cmp	r0, #0
  400412:	f000 8381 	beq.w	400b18 <sd_mmc_check+0x7a8>
				resp & SD_MMC_VOLTAGE_SUPPORT)) {
			sd_mmc_debug("%s: CMD5 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
  400416:	47b8      	blx	r7
		if ((resp & OCR_POWER_UP_BUSY) == OCR_POWER_UP_BUSY) {
  400418:	2800      	cmp	r0, #0
  40041a:	db02      	blt.n	400422 <sd_mmc_check+0xb2>
			break;
		}
		if (cmd5_retry-- == 0) {
  40041c:	3c01      	subs	r4, #1
  40041e:	d1f3      	bne.n	400408 <sd_mmc_check+0x98>
  400420:	e37a      	b.n	400b18 <sd_mmc_check+0x7a8>
			sd_mmc_debug("%s: CMD5 Timeout on busy\n\r", __func__);
			return false;
		}
	}
	// Update card type at the end of busy
	if ((resp & OCR_SDIO_MP) > 0) {
  400422:	f010 6f00 	tst.w	r0, #134217728	; 0x8000000
  400426:	d004      	beq.n	400432 <sd_mmc_check+0xc2>
		sd_mmc_card->type = CARD_TYPE_SD_COMBO;
  400428:	4b7d      	ldr	r3, [pc, #500]	; (400620 <sd_mmc_check+0x2b0>)
  40042a:	681b      	ldr	r3, [r3, #0]
  40042c:	2205      	movs	r2, #5
  40042e:	73da      	strb	r2, [r3, #15]
  400430:	e38e      	b.n	400b50 <sd_mmc_check+0x7e0>
	} else {
		sd_mmc_card->type = CARD_TYPE_SDIO;
  400432:	4b7b      	ldr	r3, [pc, #492]	; (400620 <sd_mmc_check+0x2b0>)
  400434:	681b      	ldr	r3, [r3, #0]
  400436:	2204      	movs	r2, #4
  400438:	73da      	strb	r2, [r3, #15]
  40043a:	e161      	b.n	400700 <sd_mmc_check+0x390>
	 */
	retry = 2100;
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
  40043c:	4641      	mov	r1, r8
  40043e:	f241 1037 	movw	r0, #4407	; 0x1137
  400442:	47a8      	blx	r5
  400444:	2800      	cmp	r0, #0
  400446:	f000 8390 	beq.w	400b6a <sd_mmc_check+0x7fa>
		arg = SD_MMC_VOLTAGE_SUPPORT;
		if (v2) {
			arg |= SD_ACMD41_HCS;
		}
		// Check response
		if (!driver_send_cmd(SD_MCI_ACMD41_SD_SEND_OP_COND, arg)) {
  40044a:	4631      	mov	r1, r6
  40044c:	f244 5029 	movw	r0, #17705	; 0x4529
  400450:	47a8      	blx	r5
  400452:	2800      	cmp	r0, #0
  400454:	f000 8389 	beq.w	400b6a <sd_mmc_check+0x7fa>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
  400458:	47b8      	blx	r7
		if (resp & OCR_POWER_UP_BUSY) {
  40045a:	2800      	cmp	r0, #0
  40045c:	da0a      	bge.n	400474 <sd_mmc_check+0x104>
			// Card is ready
			if ((resp & OCR_CCS) != 0) {
  40045e:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
  400462:	f000 838e 	beq.w	400b82 <sd_mmc_check+0x812>
				sd_mmc_card->type |= CARD_TYPE_HC;
  400466:	4b6e      	ldr	r3, [pc, #440]	; (400620 <sd_mmc_check+0x2b0>)
  400468:	681a      	ldr	r2, [r3, #0]
  40046a:	7bd3      	ldrb	r3, [r2, #15]
  40046c:	f043 0308 	orr.w	r3, r3, #8
  400470:	73d3      	strb	r3, [r2, #15]
  400472:	e386      	b.n	400b82 <sd_mmc_check+0x812>
			}
			break;
		}
		if (retry-- == 0) {
  400474:	3c01      	subs	r4, #1
  400476:	d1e1      	bne.n	40043c <sd_mmc_check+0xcc>
  400478:	e377      	b.n	400b6a <sd_mmc_check+0x7fa>
static bool sd_mmc_mci_install_mmc(void)
{
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
  40047a:	f241 0469 	movw	r4, #4201	; 0x1069
	 * 6 = cmd byte size
	 * 6 = response byte size
	 */
	retry = 4200;
	do {
		if (!driver_send_cmd(MMC_MCI_CMD1_SEND_OP_COND,
  40047e:	4e6d      	ldr	r6, [pc, #436]	; (400634 <sd_mmc_check+0x2c4>)
  400480:	4d6a      	ldr	r5, [pc, #424]	; (40062c <sd_mmc_check+0x2bc>)
			sd_mmc_debug("%s: CMD1 MCI Fail - Busy retry %d\n\r",
					__func__, (int)(4200 - retry));
			return false;
		}
		// Check busy flag
		resp = driver_get_response();
  400482:	4f6b      	ldr	r7, [pc, #428]	; (400630 <sd_mmc_check+0x2c0>)
	 * 6 = cmd byte size
	 * 6 = response byte size
	 */
	retry = 4200;
	do {
		if (!driver_send_cmd(MMC_MCI_CMD1_SEND_OP_COND,
  400484:	4631      	mov	r1, r6
  400486:	f244 5001 	movw	r0, #17665	; 0x4501
  40048a:	47a8      	blx	r5
  40048c:	2800      	cmp	r0, #0
  40048e:	f000 8343 	beq.w	400b18 <sd_mmc_check+0x7a8>
			sd_mmc_debug("%s: CMD1 MCI Fail - Busy retry %d\n\r",
					__func__, (int)(4200 - retry));
			return false;
		}
		// Check busy flag
		resp = driver_get_response();
  400492:	47b8      	blx	r7
		if (resp & OCR_POWER_UP_BUSY) {
  400494:	2800      	cmp	r0, #0
  400496:	da0c      	bge.n	4004b2 <sd_mmc_check+0x142>
			// Check OCR value
			if ((resp & OCR_ACCESS_MODE_MASK)
  400498:	f000 40c0 	and.w	r0, r0, #1610612736	; 0x60000000
  40049c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  4004a0:	f040 8377 	bne.w	400b92 <sd_mmc_check+0x822>
					== OCR_ACCESS_MODE_SECTOR) {
				sd_mmc_card->type |= CARD_TYPE_HC;
  4004a4:	4b5e      	ldr	r3, [pc, #376]	; (400620 <sd_mmc_check+0x2b0>)
  4004a6:	681a      	ldr	r2, [r3, #0]
  4004a8:	7bd3      	ldrb	r3, [r2, #15]
  4004aa:	f043 0308 	orr.w	r3, r3, #8
  4004ae:	73d3      	strb	r3, [r2, #15]
  4004b0:	e36f      	b.n	400b92 <sd_mmc_check+0x822>
			}
			break;
		}
		if (retry-- == 0) {
  4004b2:	3c01      	subs	r4, #1
  4004b4:	d1e6      	bne.n	400484 <sd_mmc_check+0x114>
  4004b6:	e32f      	b.n	400b18 <sd_mmc_check+0x7a8>
	// Note: The CID is not used in this stack
	if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
		return false;
	}
	// Assign relative address to the card.
	sd_mmc_card->rca = 1;
  4004b8:	4b59      	ldr	r3, [pc, #356]	; (400620 <sd_mmc_check+0x2b0>)
  4004ba:	681b      	ldr	r3, [r3, #0]
  4004bc:	2201      	movs	r2, #1
  4004be:	819a      	strh	r2, [r3, #12]
	if (!driver_send_cmd(MMC_CMD3_SET_RELATIVE_ADDR,
  4004c0:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  4004c4:	f241 1003 	movw	r0, #4355	; 0x1103
  4004c8:	4b58      	ldr	r3, [pc, #352]	; (40062c <sd_mmc_check+0x2bc>)
  4004ca:	4798      	blx	r3
  4004cc:	2800      	cmp	r0, #0
  4004ce:	f000 8323 	beq.w	400b18 <sd_mmc_check+0x7a8>
			(uint32_t)sd_mmc_card->rca << 16)) {
		return false;
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_mci()) {
  4004d2:	4b59      	ldr	r3, [pc, #356]	; (400638 <sd_mmc_check+0x2c8>)
  4004d4:	4798      	blx	r3
  4004d6:	2800      	cmp	r0, #0
  4004d8:	f000 831e 	beq.w	400b18 <sd_mmc_check+0x7a8>
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get MMC System Specification version supported by the card
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
  4004dc:	4b50      	ldr	r3, [pc, #320]	; (400620 <sd_mmc_check+0x2b0>)
  4004de:	6819      	ldr	r1, [r3, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  4004e0:	7c8b      	ldrb	r3, [r1, #18]
  4004e2:	f3c3 0383 	ubfx	r3, r3, #2, #4
  4004e6:	3b01      	subs	r3, #1
  4004e8:	2b03      	cmp	r3, #3
  4004ea:	d803      	bhi.n	4004f4 <sd_mmc_check+0x184>
  4004ec:	e8df f003 	tbb	[pc, r3]
  4004f0:	0e0b0805 	.word	0x0e0b0805
	default:
	case 0:
		sd_mmc_card->version = CARD_VER_MMC_1_2;
  4004f4:	2312      	movs	r3, #18
  4004f6:	740b      	strb	r3, [r1, #16]
  4004f8:	e00a      	b.n	400510 <sd_mmc_check+0x1a0>
		break;

	case 1:
		sd_mmc_card->version = CARD_VER_MMC_1_4;
  4004fa:	2314      	movs	r3, #20
  4004fc:	740b      	strb	r3, [r1, #16]
  4004fe:	e007      	b.n	400510 <sd_mmc_check+0x1a0>
		break;

	case 2:
		sd_mmc_card->version = CARD_VER_MMC_2_2;
  400500:	2322      	movs	r3, #34	; 0x22
  400502:	740b      	strb	r3, [r1, #16]
  400504:	e004      	b.n	400510 <sd_mmc_check+0x1a0>
		break;

	case 3:
		sd_mmc_card->version = CARD_VER_MMC_3;
  400506:	2330      	movs	r3, #48	; 0x30
  400508:	740b      	strb	r3, [r1, #16]
  40050a:	e001      	b.n	400510 <sd_mmc_check+0x1a0>
		break;

	case 4:
		sd_mmc_card->version = CARD_VER_MMC_4;
  40050c:	2340      	movs	r3, #64	; 0x40
  40050e:	740b      	strb	r3, [r1, #16]
  400510:	7d4b      	ldrb	r3, [r1, #21]
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
	unit = sd_mmc_trans_units[tran_speed & 0x7];
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
  400512:	f3c3 00c3 	ubfx	r0, r3, #3, #4
		break;
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
	unit = sd_mmc_trans_units[tran_speed & 0x7];
  400516:	f003 0307 	and.w	r3, r3, #7
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
	sd_mmc_card->clock = unit * mul * 1000;
  40051a:	4a48      	ldr	r2, [pc, #288]	; (40063c <sd_mmc_check+0x2cc>)
  40051c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  400520:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  400524:	fb03 f302 	mul.w	r3, r3, r2
  400528:	4a45      	ldr	r2, [pc, #276]	; (400640 <sd_mmc_check+0x2d0>)
  40052a:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
  40052e:	fb03 f302 	mul.w	r3, r3, r2
  400532:	600b      	str	r3, [r1, #0]
  400534:	7e88      	ldrb	r0, [r1, #26]
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  400536:	7e4b      	ldrb	r3, [r1, #25]
  400538:	7e0a      	ldrb	r2, [r1, #24]
  40053a:	0292      	lsls	r2, r2, #10
  40053c:	ea42 0383 	orr.w	r3, r2, r3, lsl #2
  400540:	ea43 13a0 	orr.w	r3, r3, r0, asr #6
	}
	value &=  ((uint32_t)1 << size) - 1;
  400544:	f3c3 030b 	ubfx	r3, r3, #0, #12
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
  400548:	f640 72ff 	movw	r2, #4095	; 0xfff
  40054c:	4293      	cmp	r3, r2
  40054e:	d00f      	beq.n	400570 <sd_mmc_check+0x200>
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400550:	7f08      	ldrb	r0, [r1, #28]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400552:	7eca      	ldrb	r2, [r1, #27]
  400554:	0052      	lsls	r2, r2, #1
  400556:	ea42 12e0 	orr.w	r2, r2, r0, asr #7
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
  40055a:	3301      	adds	r3, #1
  40055c:	f002 0207 	and.w	r2, r2, #7
  400560:	3202      	adds	r2, #2
  400562:	4093      	lsls	r3, r2
  400564:	7dca      	ldrb	r2, [r1, #23]
  400566:	f002 020f 	and.w	r2, r2, #15
  40056a:	4093      	lsls	r3, r2
  40056c:	0a9b      	lsrs	r3, r3, #10
  40056e:	604b      	str	r3, [r1, #4]
	if (!sd_mmc_cmd9_mci()) {
		return false;
	}
	mmc_decode_csd();
	// Select the and put it into Transfer Mode
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
  400570:	8989      	ldrh	r1, [r1, #12]
  400572:	0409      	lsls	r1, r1, #16
  400574:	f243 1007 	movw	r0, #12551	; 0x3107
  400578:	4b2c      	ldr	r3, [pc, #176]	; (40062c <sd_mmc_check+0x2bc>)
  40057a:	4798      	blx	r3
  40057c:	2800      	cmp	r0, #0
  40057e:	f000 82cb 	beq.w	400b18 <sd_mmc_check+0x7a8>
			(uint32_t)sd_mmc_card->rca << 16)) {
		return false;
	}
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
  400582:	4b27      	ldr	r3, [pc, #156]	; (400620 <sd_mmc_check+0x2b0>)
  400584:	681b      	ldr	r3, [r3, #0]
  400586:	7c1b      	ldrb	r3, [r3, #16]
  400588:	2b3f      	cmp	r3, #63	; 0x3f
  40058a:	f240 809d 	bls.w	4006c8 <sd_mmc_check+0x358>
{
	uint16_t i;
	uint32_t ext_csd;
	uint32_t sec_count;

	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
  40058e:	2100      	movs	r1, #0
  400590:	9100      	str	r1, [sp, #0]
  400592:	2301      	movs	r3, #1
  400594:	f44f 7200 	mov.w	r2, #512	; 0x200
  400598:	482a      	ldr	r0, [pc, #168]	; (400644 <sd_mmc_check+0x2d4>)
  40059a:	4c2b      	ldr	r4, [pc, #172]	; (400648 <sd_mmc_check+0x2d8>)
  40059c:	47a0      	blx	r4
  40059e:	2800      	cmp	r0, #0
  4005a0:	f000 82ba 	beq.w	400b18 <sd_mmc_check+0x7a8>
  4005a4:	2400      	movs	r4, #0
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
		if (!driver_read_word(&ext_csd)) {
  4005a6:	4d29      	ldr	r5, [pc, #164]	; (40064c <sd_mmc_check+0x2dc>)
  4005a8:	a803      	add	r0, sp, #12
  4005aa:	47a8      	blx	r5
  4005ac:	2800      	cmp	r0, #0
  4005ae:	f000 82b3 	beq.w	400b18 <sd_mmc_check+0x7a8>
	//** Read and decode Extended Extended CSD
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
  4005b2:	3401      	adds	r4, #1
  4005b4:	b2a4      	uxth	r4, r4
  4005b6:	2c32      	cmp	r4, #50	; 0x32
  4005b8:	d1f6      	bne.n	4005a8 <sd_mmc_check+0x238>
		if (!driver_read_word(&ext_csd)) {
			return false;
		}
	}
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
  4005ba:	9b03      	ldr	r3, [sp, #12]
  4005bc:	f003 0302 	and.w	r3, r3, #2
  4005c0:	b2dd      	uxtb	r5, r3
			& MMC_CTYPE_52MHZ;

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
  4005c2:	4b17      	ldr	r3, [pc, #92]	; (400620 <sd_mmc_check+0x2b0>)
  4005c4:	681a      	ldr	r2, [r3, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  4005c6:	7e91      	ldrb	r1, [r2, #26]
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4005c8:	7e53      	ldrb	r3, [r2, #25]
  4005ca:	7e12      	ldrb	r2, [r2, #24]
  4005cc:	0292      	lsls	r2, r2, #10
  4005ce:	ea42 0383 	orr.w	r3, r2, r3, lsl #2
  4005d2:	ea43 13a1 	orr.w	r3, r3, r1, asr #6
  4005d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  4005da:	f640 72ff 	movw	r2, #4095	; 0xfff
  4005de:	4293      	cmp	r3, r2
  4005e0:	d10e      	bne.n	400600 <sd_mmc_check+0x290>
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
			if (!driver_read_word(&sec_count)) {
  4005e2:	4e1a      	ldr	r6, [pc, #104]	; (40064c <sd_mmc_check+0x2dc>)
  4005e4:	a804      	add	r0, sp, #16
  4005e6:	47b0      	blx	r6
  4005e8:	2800      	cmp	r0, #0
  4005ea:	f000 8295 	beq.w	400b18 <sd_mmc_check+0x7a8>
			& MMC_CTYPE_52MHZ;

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
  4005ee:	3401      	adds	r4, #1
  4005f0:	b2a4      	uxth	r4, r4
  4005f2:	2c35      	cmp	r4, #53	; 0x35
  4005f4:	d9f6      	bls.n	4005e4 <sd_mmc_check+0x274>
			if (!driver_read_word(&sec_count)) {
				return false;
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
  4005f6:	4b0a      	ldr	r3, [pc, #40]	; (400620 <sd_mmc_check+0x2b0>)
  4005f8:	681a      	ldr	r2, [r3, #0]
  4005fa:	9b04      	ldr	r3, [sp, #16]
  4005fc:	085b      	lsrs	r3, r3, #1
  4005fe:	6053      	str	r3, [r2, #4]
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
		if (!driver_read_word(&sec_count)) {
  400600:	4e12      	ldr	r6, [pc, #72]	; (40064c <sd_mmc_check+0x2dc>)
  400602:	e006      	b.n	400612 <sd_mmc_check+0x2a2>
  400604:	a804      	add	r0, sp, #16
  400606:	47b0      	blx	r6
  400608:	2800      	cmp	r0, #0
  40060a:	f000 8285 	beq.w	400b18 <sd_mmc_check+0x7a8>
				return false;
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
  40060e:	3401      	adds	r4, #1
  400610:	b2a4      	uxth	r4, r4
  400612:	2c7f      	cmp	r4, #127	; 0x7f
  400614:	d9f6      	bls.n	400604 <sd_mmc_check+0x294>
  400616:	e2c4      	b.n	400ba2 <sd_mmc_check+0x832>
  400618:	004001c9 	.word	0x004001c9
  40061c:	0040032d 	.word	0x0040032d
  400620:	204008bc 	.word	0x204008bc
  400624:	004016a5 	.word	0x004016a5
  400628:	004002c9 	.word	0x004002c9
  40062c:	004016c9 	.word	0x004016c9
  400630:	004016ed 	.word	0x004016ed
  400634:	401f8000 	.word	0x401f8000
  400638:	004002fd 	.word	0x004002fd
  40063c:	004070ec 	.word	0x004070ec
  400640:	00407108 	.word	0x00407108
  400644:	00081108 	.word	0x00081108
  400648:	00401725 	.word	0x00401725
  40064c:	004017ed 	.word	0x004017ed
		if (!mmc_cmd8(&b_authorize_high_speed)) {
			return false;
		}
		if (4 <= driver_get_bus_width(sd_mmc_slot_sel)) {
			// Enable more bus width
			if (!mmc_cmd6_set_bus_width(driver_get_bus_width(sd_mmc_slot_sel))) {
  400650:	4ba4      	ldr	r3, [pc, #656]	; (4008e4 <sd_mmc_check+0x574>)
  400652:	7818      	ldrb	r0, [r3, #0]
  400654:	4ba4      	ldr	r3, [pc, #656]	; (4008e8 <sd_mmc_check+0x578>)
  400656:	4798      	blx	r3
  400658:	4604      	mov	r4, r0
 */
static bool mmc_cmd6_set_bus_width(uint8_t bus_width)
{
	uint32_t arg;

	switch (bus_width) {
  40065a:	2804      	cmp	r0, #4
  40065c:	d005      	beq.n	40066a <sd_mmc_check+0x2fa>
		arg = MMC_CMD6_ACCESS_SET_BITS
				| MMC_CMD6_INDEX_BUS_WIDTH
				| MMC_CMD6_VALUE_BUS_WIDTH_4BIT;
		break;
	default:
		arg = MMC_CMD6_ACCESS_SET_BITS
  40065e:	49a3      	ldr	r1, [pc, #652]	; (4008ec <sd_mmc_check+0x57c>)
  400660:	4ba3      	ldr	r3, [pc, #652]	; (4008f0 <sd_mmc_check+0x580>)
  400662:	2808      	cmp	r0, #8
  400664:	bf08      	it	eq
  400666:	4619      	moveq	r1, r3
  400668:	e000      	b.n	40066c <sd_mmc_check+0x2fc>
		arg = MMC_CMD6_ACCESS_SET_BITS
				| MMC_CMD6_INDEX_BUS_WIDTH
				| MMC_CMD6_VALUE_BUS_WIDTH_8BIT;
		break;
	case 4:
		arg = MMC_CMD6_ACCESS_SET_BITS
  40066a:	49a2      	ldr	r1, [pc, #648]	; (4008f4 <sd_mmc_check+0x584>)
		arg = MMC_CMD6_ACCESS_SET_BITS
				| MMC_CMD6_INDEX_BUS_WIDTH
				| MMC_CMD6_VALUE_BUS_WIDTH_1BIT;
		break;
	}
	if (!driver_send_cmd(MMC_CMD6_SWITCH, arg)) {
  40066c:	f243 1006 	movw	r0, #12550	; 0x3106
  400670:	4ba1      	ldr	r3, [pc, #644]	; (4008f8 <sd_mmc_check+0x588>)
  400672:	4798      	blx	r3
  400674:	2800      	cmp	r0, #0
  400676:	f000 824f 	beq.w	400b18 <sd_mmc_check+0x7a8>
		return false;
	}
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  40067a:	4ba0      	ldr	r3, [pc, #640]	; (4008fc <sd_mmc_check+0x58c>)
  40067c:	4798      	blx	r3
  40067e:	f010 0f80 	tst.w	r0, #128	; 0x80
  400682:	f040 8249 	bne.w	400b18 <sd_mmc_check+0x7a8>
		// No supported, it is not a protocol error
		sd_mmc_debug("%s: CMD6 CARD_STATUS_SWITCH_ERROR\n\r", __func__);
		return false;
	}
	sd_mmc_card->bus_width = bus_width;
  400686:	4b9e      	ldr	r3, [pc, #632]	; (400900 <sd_mmc_check+0x590>)
  400688:	681b      	ldr	r3, [r3, #0]
  40068a:	745c      	strb	r4, [r3, #17]
			// Enable more bus width
			if (!mmc_cmd6_set_bus_width(driver_get_bus_width(sd_mmc_slot_sel))) {
				return false;
			}
			// Reinitialize the slot with the bus width
			sd_mmc_configure_slot();
  40068c:	4b9d      	ldr	r3, [pc, #628]	; (400904 <sd_mmc_check+0x594>)
  40068e:	4798      	blx	r3
		}
		if (driver_is_high_speed_capable() && b_authorize_high_speed) {
  400690:	4b9d      	ldr	r3, [pc, #628]	; (400908 <sd_mmc_check+0x598>)
  400692:	4798      	blx	r3
  400694:	b305      	cbz	r5, 4006d8 <sd_mmc_check+0x368>
  400696:	b1f8      	cbz	r0, 4006d8 <sd_mmc_check+0x368>
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd6_set_high_speed(void)
{
	if (!driver_send_cmd(MMC_CMD6_SWITCH,
  400698:	499c      	ldr	r1, [pc, #624]	; (40090c <sd_mmc_check+0x59c>)
  40069a:	f243 1006 	movw	r0, #12550	; 0x3106
  40069e:	4b96      	ldr	r3, [pc, #600]	; (4008f8 <sd_mmc_check+0x588>)
  4006a0:	4798      	blx	r3
  4006a2:	2800      	cmp	r0, #0
  4006a4:	f000 8238 	beq.w	400b18 <sd_mmc_check+0x7a8>
			MMC_CMD6_ACCESS_WRITE_BYTE
			| MMC_CMD6_INDEX_HS_TIMING
			| MMC_CMD6_VALUE_HS_TIMING_ENABLE)) {
		return false;
	}
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  4006a8:	4b94      	ldr	r3, [pc, #592]	; (4008fc <sd_mmc_check+0x58c>)
  4006aa:	4798      	blx	r3
  4006ac:	f010 0f80 	tst.w	r0, #128	; 0x80
  4006b0:	f040 8232 	bne.w	400b18 <sd_mmc_check+0x7a8>
		// No supported, it is not a protocol error
		sd_mmc_debug("%s: CMD6 CARD_STATUS_SWITCH_ERROR\n\r", __func__);
		return false;
	}
	sd_mmc_card->high_speed = 1;
  4006b4:	4b92      	ldr	r3, [pc, #584]	; (400900 <sd_mmc_check+0x590>)
  4006b6:	681b      	ldr	r3, [r3, #0]
  4006b8:	2201      	movs	r2, #1
  4006ba:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	sd_mmc_card->clock = 52000000lu;
  4006be:	4a94      	ldr	r2, [pc, #592]	; (400910 <sd_mmc_check+0x5a0>)
  4006c0:	601a      	str	r2, [r3, #0]
			// Enable HS
			if (!mmc_cmd6_set_high_speed()) {
				return false;
			}
			// Reinitialize the slot with the new speed
			sd_mmc_configure_slot();
  4006c2:	4b90      	ldr	r3, [pc, #576]	; (400904 <sd_mmc_check+0x594>)
  4006c4:	4798      	blx	r3
  4006c6:	e007      	b.n	4006d8 <sd_mmc_check+0x368>
		}
	} else {
		// Reinitialize the slot with the new speed
		sd_mmc_configure_slot();
  4006c8:	4b8e      	ldr	r3, [pc, #568]	; (400904 <sd_mmc_check+0x594>)
  4006ca:	4798      	blx	r3
  4006cc:	e004      	b.n	4006d8 <sd_mmc_check+0x368>
		// Retry is a WORKAROUND for no compliance card (Atmel Internal ref. MMC19):
		// These cards seem not ready immediatly
		// after the end of busy of mmc_cmd6_set_high_speed()

		// Set default block size
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  4006ce:	4639      	mov	r1, r7
  4006d0:	4630      	mov	r0, r6
  4006d2:	47a8      	blx	r5
  4006d4:	b138      	cbz	r0, 4006e6 <sd_mmc_check+0x376>
  4006d6:	e217      	b.n	400b08 <sd_mmc_check+0x798>
		arg = MMC_CMD6_ACCESS_SET_BITS
				| MMC_CMD6_INDEX_BUS_WIDTH
				| MMC_CMD6_VALUE_BUS_WIDTH_4BIT;
		break;
	default:
		arg = MMC_CMD6_ACCESS_SET_BITS
  4006d8:	240a      	movs	r4, #10
		// Retry is a WORKAROUND for no compliance card (Atmel Internal ref. MMC19):
		// These cards seem not ready immediatly
		// after the end of busy of mmc_cmd6_set_high_speed()

		// Set default block size
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  4006da:	f44f 7700 	mov.w	r7, #512	; 0x200
  4006de:	f241 1610 	movw	r6, #4368	; 0x1110
  4006e2:	4d85      	ldr	r5, [pc, #532]	; (4008f8 <sd_mmc_check+0x588>)
  4006e4:	e7f3      	b.n	4006ce <sd_mmc_check+0x35e>
  4006e6:	3c01      	subs	r4, #1
		// Reinitialize the slot with the new speed
		sd_mmc_configure_slot();
	}

	uint8_t retry = 10;
	while (retry--) {
  4006e8:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
  4006ec:	d1ef      	bne.n	4006ce <sd_mmc_check+0x35e>
  4006ee:	e213      	b.n	400b18 <sd_mmc_check+0x7a8>
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
		// SD MEMORY, Put the Card in Identify Mode
		// Note: The CID is not used in this stack
		if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
  4006f0:	2100      	movs	r1, #0
  4006f2:	f645 3002 	movw	r0, #23298	; 0x5b02
  4006f6:	4b80      	ldr	r3, [pc, #512]	; (4008f8 <sd_mmc_check+0x588>)
  4006f8:	4798      	blx	r3
  4006fa:	2800      	cmp	r0, #0
  4006fc:	f000 820c 	beq.w	400b18 <sd_mmc_check+0x7a8>
			return false;
		}
	}
	// Ask the card to publish a new relative address (RCA).
	if (!driver_send_cmd(SD_CMD3_SEND_RELATIVE_ADDR, 0)) {
  400700:	2100      	movs	r1, #0
  400702:	f245 1003 	movw	r0, #20739	; 0x5103
  400706:	4b7c      	ldr	r3, [pc, #496]	; (4008f8 <sd_mmc_check+0x588>)
  400708:	4798      	blx	r3
  40070a:	2800      	cmp	r0, #0
  40070c:	f000 8204 	beq.w	400b18 <sd_mmc_check+0x7a8>
		return false;
	}
	sd_mmc_card->rca = (driver_get_response() >> 16) & 0xFFFF;
  400710:	4c7b      	ldr	r4, [pc, #492]	; (400900 <sd_mmc_check+0x590>)
  400712:	6825      	ldr	r5, [r4, #0]
  400714:	4b79      	ldr	r3, [pc, #484]	; (4008fc <sd_mmc_check+0x58c>)
  400716:	4798      	blx	r3
  400718:	0c00      	lsrs	r0, r0, #16
  40071a:	81a8      	strh	r0, [r5, #12]

	// SD MEMORY, Get the Card-Specific Data
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  40071c:	6823      	ldr	r3, [r4, #0]
  40071e:	7bdb      	ldrb	r3, [r3, #15]
  400720:	f013 0f01 	tst.w	r3, #1
  400724:	d041      	beq.n	4007aa <sd_mmc_check+0x43a>
		if (!sd_mmc_cmd9_mci()) {
  400726:	4b7b      	ldr	r3, [pc, #492]	; (400914 <sd_mmc_check+0x5a4>)
  400728:	4798      	blx	r3
  40072a:	2800      	cmp	r0, #0
  40072c:	f000 81f4 	beq.w	400b18 <sd_mmc_check+0x7a8>
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
  400730:	6823      	ldr	r3, [r4, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400732:	7d5a      	ldrb	r2, [r3, #21]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
  400734:	f3c2 00c3 	ubfx	r0, r2, #3, #4
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
	unit = sd_mmc_trans_units[tran_speed & 0x7];
  400738:	f002 0207 	and.w	r2, r2, #7
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
	sd_mmc_card->clock = unit * mul * 1000;
  40073c:	4976      	ldr	r1, [pc, #472]	; (400918 <sd_mmc_check+0x5a8>)
  40073e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
  400742:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  400746:	fb02 f201 	mul.w	r2, r2, r1
  40074a:	4974      	ldr	r1, [pc, #464]	; (40091c <sd_mmc_check+0x5ac>)
  40074c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  400750:	fb02 f201 	mul.w	r2, r2, r1
  400754:	601a      	str	r2, [r3, #0]
  400756:	7c9a      	ldrb	r2, [r3, #18]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
  400758:	0992      	lsrs	r2, r2, #6
  40075a:	d00c      	beq.n	400776 <sd_mmc_check+0x406>
  40075c:	7eda      	ldrb	r2, [r3, #27]
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  40075e:	7e98      	ldrb	r0, [r3, #26]
  400760:	7e59      	ldrb	r1, [r3, #25]
  400762:	0409      	lsls	r1, r1, #16
  400764:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
  400768:	430a      	orrs	r2, r1
		sd_mmc_card->capacity =
  40076a:	f3c2 0215 	ubfx	r2, r2, #0, #22
  40076e:	3201      	adds	r2, #1
  400770:	0252      	lsls	r2, r2, #9
  400772:	605a      	str	r2, [r3, #4]
  400774:	e019      	b.n	4007aa <sd_mmc_check+0x43a>
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400776:	7e98      	ldrb	r0, [r3, #26]
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  400778:	7e5a      	ldrb	r2, [r3, #25]
  40077a:	7e19      	ldrb	r1, [r3, #24]
  40077c:	0289      	lsls	r1, r1, #10
  40077e:	ea41 0282 	orr.w	r2, r1, r2, lsl #2
  400782:	ea42 12a0 	orr.w	r2, r2, r0, asr #6
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400786:	7f18      	ldrb	r0, [r3, #28]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400788:	7ed9      	ldrb	r1, [r3, #27]
  40078a:	0049      	lsls	r1, r1, #1
  40078c:	ea41 11e0 	orr.w	r1, r1, r0, asr #7
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
				* 512;
	} else {
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
  400790:	f3c2 020b 	ubfx	r2, r2, #0, #12
  400794:	3201      	adds	r2, #1
  400796:	f001 0107 	and.w	r1, r1, #7
  40079a:	3102      	adds	r1, #2
  40079c:	408a      	lsls	r2, r1
  40079e:	7dd9      	ldrb	r1, [r3, #23]
  4007a0:	f001 010f 	and.w	r1, r1, #15
  4007a4:	408a      	lsls	r2, r1
  4007a6:	0a92      	lsrs	r2, r2, #10
  4007a8:	605a      	str	r2, [r3, #4]
		}
		sd_decode_csd();
	}
	// Select the and put it into Transfer Mode
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
			(uint32_t)sd_mmc_card->rca << 16)) {
  4007aa:	4b55      	ldr	r3, [pc, #340]	; (400900 <sd_mmc_check+0x590>)
  4007ac:	681b      	ldr	r3, [r3, #0]
			return false;
		}
		sd_decode_csd();
	}
	// Select the and put it into Transfer Mode
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
  4007ae:	8999      	ldrh	r1, [r3, #12]
  4007b0:	0409      	lsls	r1, r1, #16
  4007b2:	f243 1007 	movw	r0, #12551	; 0x3107
  4007b6:	4b50      	ldr	r3, [pc, #320]	; (4008f8 <sd_mmc_check+0x588>)
  4007b8:	4798      	blx	r3
  4007ba:	2800      	cmp	r0, #0
  4007bc:	f000 81ac 	beq.w	400b18 <sd_mmc_check+0x7a8>
			(uint32_t)sd_mmc_card->rca << 16)) {
		return false;
	}
	// SD MEMORY, Read the SCR to get card version
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  4007c0:	4b4f      	ldr	r3, [pc, #316]	; (400900 <sd_mmc_check+0x590>)
  4007c2:	681b      	ldr	r3, [r3, #0]
  4007c4:	7bda      	ldrb	r2, [r3, #15]
  4007c6:	f012 0f01 	tst.w	r2, #1
  4007ca:	d040      	beq.n	40084e <sd_mmc_check+0x4de>
{
	uint8_t scr[SD_SCR_REG_BSIZE];

	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
  4007cc:	8999      	ldrh	r1, [r3, #12]
  4007ce:	0409      	lsls	r1, r1, #16
  4007d0:	f241 1037 	movw	r0, #4407	; 0x1137
  4007d4:	4b48      	ldr	r3, [pc, #288]	; (4008f8 <sd_mmc_check+0x588>)
  4007d6:	4798      	blx	r3
  4007d8:	2800      	cmp	r0, #0
  4007da:	f000 819d 	beq.w	400b18 <sd_mmc_check+0x7a8>
		return false;
	}
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
  4007de:	2301      	movs	r3, #1
  4007e0:	9300      	str	r3, [sp, #0]
  4007e2:	2208      	movs	r2, #8
  4007e4:	2100      	movs	r1, #0
  4007e6:	484e      	ldr	r0, [pc, #312]	; (400920 <sd_mmc_check+0x5b0>)
  4007e8:	4c4e      	ldr	r4, [pc, #312]	; (400924 <sd_mmc_check+0x5b4>)
  4007ea:	47a0      	blx	r4
  4007ec:	2800      	cmp	r0, #0
  4007ee:	f000 8193 	beq.w	400b18 <sd_mmc_check+0x7a8>
			SD_SCR_REG_BSIZE, 1, true)) {
		return false;
	}
	if (!driver_start_read_blocks(scr, 1)) {
  4007f2:	2101      	movs	r1, #1
  4007f4:	a804      	add	r0, sp, #16
  4007f6:	4b4c      	ldr	r3, [pc, #304]	; (400928 <sd_mmc_check+0x5b8>)
  4007f8:	4798      	blx	r3
  4007fa:	2800      	cmp	r0, #0
  4007fc:	f000 818c 	beq.w	400b18 <sd_mmc_check+0x7a8>
		return false;
	}
	if (!driver_wait_end_of_read_blocks()) {
  400800:	4b4a      	ldr	r3, [pc, #296]	; (40092c <sd_mmc_check+0x5bc>)
  400802:	4798      	blx	r3
  400804:	2800      	cmp	r0, #0
  400806:	f000 8187 	beq.w	400b18 <sd_mmc_check+0x7a8>
		return false;
	}

	// Get SD Memory Card - Spec. Version
	switch (SD_SCR_SD_SPEC(scr)) {
  40080a:	f89d 3010 	ldrb.w	r3, [sp, #16]
  40080e:	f003 030f 	and.w	r3, r3, #15
  400812:	2b01      	cmp	r3, #1
  400814:	d008      	beq.n	400828 <sd_mmc_check+0x4b8>
  400816:	b113      	cbz	r3, 40081e <sd_mmc_check+0x4ae>
  400818:	2b02      	cmp	r3, #2
  40081a:	d00a      	beq.n	400832 <sd_mmc_check+0x4c2>
  40081c:	e013      	b.n	400846 <sd_mmc_check+0x4d6>
	case SD_SCR_SD_SPEC_1_0_01:
		sd_mmc_card->version = CARD_VER_SD_1_0;
  40081e:	4b38      	ldr	r3, [pc, #224]	; (400900 <sd_mmc_check+0x590>)
  400820:	681b      	ldr	r3, [r3, #0]
  400822:	2210      	movs	r2, #16
  400824:	741a      	strb	r2, [r3, #16]
  400826:	e012      	b.n	40084e <sd_mmc_check+0x4de>
		break;

	case SD_SCR_SD_SPEC_1_10:
		sd_mmc_card->version = CARD_VER_SD_1_10;
  400828:	4b35      	ldr	r3, [pc, #212]	; (400900 <sd_mmc_check+0x590>)
  40082a:	681b      	ldr	r3, [r3, #0]
  40082c:	221a      	movs	r2, #26
  40082e:	741a      	strb	r2, [r3, #16]
  400830:	e00d      	b.n	40084e <sd_mmc_check+0x4de>
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400832:	f89d 3012 	ldrb.w	r3, [sp, #18]
		break;

	case SD_SCR_SD_SPEC_2_00:
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
  400836:	09db      	lsrs	r3, r3, #7
			sd_mmc_card->version = CARD_VER_SD_3_0;
  400838:	4b31      	ldr	r3, [pc, #196]	; (400900 <sd_mmc_check+0x590>)
  40083a:	681b      	ldr	r3, [r3, #0]
  40083c:	bf14      	ite	ne
  40083e:	2230      	movne	r2, #48	; 0x30
		} else {
			sd_mmc_card->version = CARD_VER_SD_2_0;
  400840:	2220      	moveq	r2, #32
  400842:	741a      	strb	r2, [r3, #16]
  400844:	e003      	b.n	40084e <sd_mmc_check+0x4de>
		}
		break;

	default:
		sd_mmc_card->version = CARD_VER_SD_1_0;
  400846:	4b2e      	ldr	r3, [pc, #184]	; (400900 <sd_mmc_check+0x590>)
  400848:	681b      	ldr	r3, [r3, #0]
  40084a:	2210      	movs	r2, #16
  40084c:	741a      	strb	r2, [r3, #16]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
		if (!sd_acmd51()) {
			return false;
		}
	}
	if (IS_SDIO()) {
  40084e:	4b2c      	ldr	r3, [pc, #176]	; (400900 <sd_mmc_check+0x590>)
  400850:	681b      	ldr	r3, [r3, #0]
  400852:	7bdb      	ldrb	r3, [r3, #15]
  400854:	f013 0f04 	tst.w	r3, #4
  400858:	f000 8093 	beq.w	400982 <sd_mmc_check+0x612>
  40085c:	2409      	movs	r4, #9
	uint8_t addr_cis[4];

	/* Read CIS area address in CCCR area */
	addr_old = SDIO_CCCR_CIS_PTR;
	for(i = 0; i < 4; i++) {
		sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_old, 0, &addr_cis[i]);
  40085e:	2600      	movs	r6, #0
  400860:	4d33      	ldr	r5, [pc, #204]	; (400930 <sd_mmc_check+0x5c0>)
  400862:	f1a4 0309 	sub.w	r3, r4, #9
  400866:	aa03      	add	r2, sp, #12
  400868:	4413      	add	r3, r2
  40086a:	9300      	str	r3, [sp, #0]
  40086c:	4633      	mov	r3, r6
  40086e:	4622      	mov	r2, r4
  400870:	4631      	mov	r1, r6
  400872:	4630      	mov	r0, r6
  400874:	47a8      	blx	r5
		addr_old++;
  400876:	3401      	adds	r4, #1
	uint8_t tplfe_max_tran_speed, i;
	uint8_t addr_cis[4];

	/* Read CIS area address in CCCR area */
	addr_old = SDIO_CCCR_CIS_PTR;
	for(i = 0; i < 4; i++) {
  400878:	2c0d      	cmp	r4, #13
  40087a:	d1f2      	bne.n	400862 <sd_mmc_check+0x4f2>
		sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_old, 0, &addr_cis[i]);
		addr_old++;
	}
	addr_old = addr_cis[0] + (addr_cis[1] << 8) + \
  40087c:	f89d 200d 	ldrb.w	r2, [sp, #13]
  400880:	f89d 300c 	ldrb.w	r3, [sp, #12]
  400884:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  400888:	f89d 800e 	ldrb.w	r8, [sp, #14]
  40088c:	eb03 4308 	add.w	r3, r3, r8, lsl #16
  400890:	f89d 800f 	ldrb.w	r8, [sp, #15]
  400894:	eb03 6808 	add.w	r8, r3, r8, lsl #24
				(addr_cis[2] << 16) + (addr_cis[3] << 24);
	addr_new = addr_old;
  400898:	4645      	mov	r5, r8

	while (1) {
		/* Read a sample of CIA area */
		for(i=0; i<3; i++) {
			sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
  40089a:	4f25      	ldr	r7, [pc, #148]	; (400930 <sd_mmc_check+0x5c0>)
		sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_old, 0, &addr_cis[i]);
		addr_old++;
	}
	addr_old = addr_cis[0] + (addr_cis[1] << 8) + \
				(addr_cis[2] << 16) + (addr_cis[3] << 24);
	addr_new = addr_old;
  40089c:	2400      	movs	r4, #0

	while (1) {
		/* Read a sample of CIA area */
		for(i=0; i<3; i++) {
			sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
  40089e:	4626      	mov	r6, r4
  4008a0:	ab04      	add	r3, sp, #16
  4008a2:	4423      	add	r3, r4
  4008a4:	9300      	str	r3, [sp, #0]
  4008a6:	4633      	mov	r3, r6
  4008a8:	192a      	adds	r2, r5, r4
  4008aa:	4631      	mov	r1, r6
  4008ac:	4630      	mov	r0, r6
  4008ae:	47b8      	blx	r7
  4008b0:	3401      	adds	r4, #1
				(addr_cis[2] << 16) + (addr_cis[3] << 24);
	addr_new = addr_old;

	while (1) {
		/* Read a sample of CIA area */
		for(i=0; i<3; i++) {
  4008b2:	2c03      	cmp	r4, #3
  4008b4:	d1f4      	bne.n	4008a0 <sd_mmc_check+0x530>
			sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
			addr_new++;
		}
		if (buf[0] == SDIO_CISTPL_END) {
  4008b6:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4008ba:	2bff      	cmp	r3, #255	; 0xff
  4008bc:	f000 812c 	beq.w	400b18 <sd_mmc_check+0x7a8>
			return false; /* Tuple error */
		}
		if (buf[0] == SDIO_CISTPL_FUNCE && buf[2] == 0x00) {
  4008c0:	2b22      	cmp	r3, #34	; 0x22
  4008c2:	d102      	bne.n	4008ca <sd_mmc_check+0x55a>
  4008c4:	f89d 3012 	ldrb.w	r3, [sp, #18]
  4008c8:	b3a3      	cbz	r3, 400934 <sd_mmc_check+0x5c4>
			break; /* Fun0 tuple found */
		}
		if (buf[1] == 0) {
  4008ca:	f89d 3011 	ldrb.w	r3, [sp, #17]
  4008ce:	2b00      	cmp	r3, #0
  4008d0:	f000 8122 	beq.w	400b18 <sd_mmc_check+0x7a8>
			return false; /* Tuple error */
		}
		/* Next address */
		addr_new += buf[1]-1;
  4008d4:	3302      	adds	r3, #2
  4008d6:	441d      	add	r5, r3
		if (addr_new > (addr_old + 256)) {
  4008d8:	f508 7380 	add.w	r3, r8, #256	; 0x100
  4008dc:	429d      	cmp	r5, r3
  4008de:	d9dd      	bls.n	40089c <sd_mmc_check+0x52c>
  4008e0:	e11a      	b.n	400b18 <sd_mmc_check+0x7a8>
  4008e2:	bf00      	nop
  4008e4:	204008c2 	.word	0x204008c2
  4008e8:	004015ed 	.word	0x004015ed
  4008ec:	01b70000 	.word	0x01b70000
  4008f0:	01b70200 	.word	0x01b70200
  4008f4:	01b70100 	.word	0x01b70100
  4008f8:	004016c9 	.word	0x004016c9
  4008fc:	004016ed 	.word	0x004016ed
  400900:	204008bc 	.word	0x204008bc
  400904:	0040019d 	.word	0x0040019d
  400908:	004015f9 	.word	0x004015f9
  40090c:	03b90100 	.word	0x03b90100
  400910:	03197500 	.word	0x03197500
  400914:	004002fd 	.word	0x004002fd
  400918:	004070ec 	.word	0x004070ec
  40091c:	004070ac 	.word	0x004070ac
  400920:	00081133 	.word	0x00081133
  400924:	00401725 	.word	0x00401725
  400928:	00401861 	.word	0x00401861
  40092c:	00401941 	.word	0x00401941
  400930:	004002c9 	.word	0x004002c9
  400934:	ac04      	add	r4, sp, #16
  400936:	f105 0806 	add.w	r8, r5, #6
	}

	/* Read all Fun0 tuple fields: fn0_blk_siz & max_tran_speed */
	addr_new -= 3;
	for(i = 0; i < 6; i++) {
		sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
  40093a:	2700      	movs	r7, #0
  40093c:	4e9e      	ldr	r6, [pc, #632]	; (400bb8 <sd_mmc_check+0x848>)
  40093e:	9400      	str	r4, [sp, #0]
  400940:	463b      	mov	r3, r7
  400942:	462a      	mov	r2, r5
  400944:	4639      	mov	r1, r7
  400946:	4638      	mov	r0, r7
  400948:	47b0      	blx	r6
		addr_new++;
  40094a:	3501      	adds	r5, #1
  40094c:	3401      	adds	r4, #1
		}
	}

	/* Read all Fun0 tuple fields: fn0_blk_siz & max_tran_speed */
	addr_new -= 3;
	for(i = 0; i < 6; i++) {
  40094e:	4545      	cmp	r5, r8
  400950:	d1f5      	bne.n	40093e <sd_mmc_check+0x5ce>
		sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
		addr_new++;
	}

	tplfe_max_tran_speed = buf[5];
  400952:	f89d 3015 	ldrb.w	r3, [sp, #21]
  400956:	2b32      	cmp	r3, #50	; 0x32
  400958:	bf28      	it	cs
  40095a:	2332      	movcs	r3, #50	; 0x32
	}

	/* Decode transfer speed in Hz.*/
	unit = sd_mmc_trans_units[tplfe_max_tran_speed & 0x7];
	mul = sd_trans_multipliers[(tplfe_max_tran_speed >> 3) & 0xF];
	sd_mmc_card->clock = unit * mul * 1000;
  40095c:	4a97      	ldr	r2, [pc, #604]	; (400bbc <sd_mmc_check+0x84c>)
  40095e:	6812      	ldr	r2, [r2, #0]
		tplfe_max_tran_speed = 0x32; /* 25Mhz */
	}

	/* Decode transfer speed in Hz.*/
	unit = sd_mmc_trans_units[tplfe_max_tran_speed & 0x7];
	mul = sd_trans_multipliers[(tplfe_max_tran_speed >> 3) & 0xF];
  400960:	f3c3 00c3 	ubfx	r0, r3, #3, #4
		 */
		tplfe_max_tran_speed = 0x32; /* 25Mhz */
	}

	/* Decode transfer speed in Hz.*/
	unit = sd_mmc_trans_units[tplfe_max_tran_speed & 0x7];
  400964:	f003 0307 	and.w	r3, r3, #7
	mul = sd_trans_multipliers[(tplfe_max_tran_speed >> 3) & 0xF];
	sd_mmc_card->clock = unit * mul * 1000;
  400968:	4995      	ldr	r1, [pc, #596]	; (400bc0 <sd_mmc_check+0x850>)
  40096a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
  40096e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  400972:	fb03 f301 	mul.w	r3, r3, r1
  400976:	4993      	ldr	r1, [pc, #588]	; (400bc4 <sd_mmc_check+0x854>)
  400978:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  40097c:	fb03 f301 	mul.w	r3, r3, r1
  400980:	6013      	str	r3, [r2, #0]
	if (IS_SDIO()) {
		if (!sdio_get_max_speed()) {
			return false;
		}
	}
	if ((4 <= driver_get_bus_width(sd_mmc_slot_sel))) {
  400982:	4b91      	ldr	r3, [pc, #580]	; (400bc8 <sd_mmc_check+0x858>)
  400984:	7818      	ldrb	r0, [r3, #0]
  400986:	4b91      	ldr	r3, [pc, #580]	; (400bcc <sd_mmc_check+0x85c>)
  400988:	4798      	blx	r3
  40098a:	2803      	cmp	r0, #3
  40098c:	d942      	bls.n	400a14 <sd_mmc_check+0x6a4>
		// TRY to enable 4-bit mode
		if (IS_SDIO()) {
  40098e:	4b8b      	ldr	r3, [pc, #556]	; (400bbc <sd_mmc_check+0x84c>)
  400990:	681b      	ldr	r3, [r3, #0]
  400992:	7bdb      	ldrb	r3, [r3, #15]
  400994:	f013 0f04 	tst.w	r3, #4
  400998:	d01f      	beq.n	4009da <sd_mmc_check+0x66a>
	 * A SDIO Low-Speed alone can supports 4bit (Optional)
	 */
	uint8_t u8_value;

	// Check 4bit support in 4BLS of "Card Capability" register
	if (!sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, SDIO_CCCR_CAP,
  40099a:	ab04      	add	r3, sp, #16
  40099c:	9300      	str	r3, [sp, #0]
  40099e:	2300      	movs	r3, #0
  4009a0:	2208      	movs	r2, #8
  4009a2:	4619      	mov	r1, r3
  4009a4:	4618      	mov	r0, r3
  4009a6:	4c84      	ldr	r4, [pc, #528]	; (400bb8 <sd_mmc_check+0x848>)
  4009a8:	47a0      	blx	r4
  4009aa:	2800      	cmp	r0, #0
  4009ac:	f000 80b4 	beq.w	400b18 <sd_mmc_check+0x7a8>
			0, &u8_value)) {
		return false;
	}
	if ((u8_value & SDIO_CAP_4BLS) != SDIO_CAP_4BLS) {
  4009b0:	f99d 3010 	ldrsb.w	r3, [sp, #16]
  4009b4:	2b00      	cmp	r3, #0
  4009b6:	da10      	bge.n	4009da <sd_mmc_check+0x66a>
		// No supported, it is not a protocol error
		return true;
	}
	// HS mode possible, then enable
	u8_value = SDIO_BUSWIDTH_4B;
  4009b8:	ab14      	add	r3, sp, #80	; 0x50
  4009ba:	2202      	movs	r2, #2
  4009bc:	f803 2d40 	strb.w	r2, [r3, #-64]!
	if (!sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_BUS_CTRL,
  4009c0:	9300      	str	r3, [sp, #0]
  4009c2:	2301      	movs	r3, #1
  4009c4:	2207      	movs	r2, #7
  4009c6:	2100      	movs	r1, #0
  4009c8:	4618      	mov	r0, r3
  4009ca:	47a0      	blx	r4
  4009cc:	2800      	cmp	r0, #0
  4009ce:	f000 80a3 	beq.w	400b18 <sd_mmc_check+0x7a8>
			1, &u8_value)) {
		return false;
	}
	sd_mmc_card->bus_width = 4;
  4009d2:	4b7a      	ldr	r3, [pc, #488]	; (400bbc <sd_mmc_check+0x84c>)
  4009d4:	681b      	ldr	r3, [r3, #0]
  4009d6:	2204      	movs	r2, #4
  4009d8:	745a      	strb	r2, [r3, #17]
		if (IS_SDIO()) {
			if (!sdio_cmd52_set_bus_width()) {
				return false;
			}
		}
		if (sd_mmc_card->type & CARD_TYPE_SD) {
  4009da:	4b78      	ldr	r3, [pc, #480]	; (400bbc <sd_mmc_check+0x84c>)
  4009dc:	681b      	ldr	r3, [r3, #0]
  4009de:	7bda      	ldrb	r2, [r3, #15]
  4009e0:	f012 0f01 	tst.w	r2, #1
  4009e4:	d014      	beq.n	400a10 <sd_mmc_check+0x6a0>
 */
static bool sd_acmd6(void)
{
	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
  4009e6:	8999      	ldrh	r1, [r3, #12]
  4009e8:	0409      	lsls	r1, r1, #16
  4009ea:	f241 1037 	movw	r0, #4407	; 0x1137
  4009ee:	4b78      	ldr	r3, [pc, #480]	; (400bd0 <sd_mmc_check+0x860>)
  4009f0:	4798      	blx	r3
  4009f2:	2800      	cmp	r0, #0
  4009f4:	f000 8090 	beq.w	400b18 <sd_mmc_check+0x7a8>
		return false;
	}
	// 10b = 4 bits bus
	if (!driver_send_cmd(SD_ACMD6_SET_BUS_WIDTH, 0x2)) {
  4009f8:	2102      	movs	r1, #2
  4009fa:	f241 1006 	movw	r0, #4358	; 0x1106
  4009fe:	4b74      	ldr	r3, [pc, #464]	; (400bd0 <sd_mmc_check+0x860>)
  400a00:	4798      	blx	r3
  400a02:	2800      	cmp	r0, #0
  400a04:	f000 8088 	beq.w	400b18 <sd_mmc_check+0x7a8>
		return false;
	}
	sd_mmc_card->bus_width = 4;
  400a08:	4b6c      	ldr	r3, [pc, #432]	; (400bbc <sd_mmc_check+0x84c>)
  400a0a:	681b      	ldr	r3, [r3, #0]
  400a0c:	2204      	movs	r2, #4
  400a0e:	745a      	strb	r2, [r3, #17]
			if (!sd_acmd6()) {
				return false;
			}
		}
		// Switch to selected bus mode
		sd_mmc_configure_slot();
  400a10:	4b70      	ldr	r3, [pc, #448]	; (400bd4 <sd_mmc_check+0x864>)
  400a12:	4798      	blx	r3
	}
	if (driver_is_high_speed_capable()) {
  400a14:	4b70      	ldr	r3, [pc, #448]	; (400bd8 <sd_mmc_check+0x868>)
  400a16:	4798      	blx	r3
  400a18:	2800      	cmp	r0, #0
  400a1a:	d068      	beq.n	400aee <sd_mmc_check+0x77e>
		// TRY to enable High-Speed Mode
		if (IS_SDIO()) {
  400a1c:	4b67      	ldr	r3, [pc, #412]	; (400bbc <sd_mmc_check+0x84c>)
  400a1e:	681b      	ldr	r3, [r3, #0]
  400a20:	7bdb      	ldrb	r3, [r3, #15]
  400a22:	f013 0f04 	tst.w	r3, #4
  400a26:	d022      	beq.n	400a6e <sd_mmc_check+0x6fe>
static bool sdio_cmd52_set_high_speed(void)
{
	uint8_t u8_value;

	// Check CIA.HS
	if (!sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, SDIO_CCCR_HS, 0, &u8_value)) {
  400a28:	ab04      	add	r3, sp, #16
  400a2a:	9300      	str	r3, [sp, #0]
  400a2c:	2300      	movs	r3, #0
  400a2e:	2213      	movs	r2, #19
  400a30:	4619      	mov	r1, r3
  400a32:	4618      	mov	r0, r3
  400a34:	4c60      	ldr	r4, [pc, #384]	; (400bb8 <sd_mmc_check+0x848>)
  400a36:	47a0      	blx	r4
  400a38:	2800      	cmp	r0, #0
  400a3a:	d06d      	beq.n	400b18 <sd_mmc_check+0x7a8>
		return false;
	}
	if ((u8_value & SDIO_SHS) != SDIO_SHS) {
  400a3c:	f89d 3010 	ldrb.w	r3, [sp, #16]
  400a40:	f013 0f01 	tst.w	r3, #1
  400a44:	d013      	beq.n	400a6e <sd_mmc_check+0x6fe>
		// No supported, it is not a protocol error
		return true;
	}
	// HS mode possible, then enable
	u8_value = SDIO_EHS;
  400a46:	ab14      	add	r3, sp, #80	; 0x50
  400a48:	2202      	movs	r2, #2
  400a4a:	f803 2d40 	strb.w	r2, [r3, #-64]!
	if (!sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_HS,
  400a4e:	9300      	str	r3, [sp, #0]
  400a50:	2301      	movs	r3, #1
  400a52:	2213      	movs	r2, #19
  400a54:	2100      	movs	r1, #0
  400a56:	4618      	mov	r0, r3
  400a58:	47a0      	blx	r4
  400a5a:	2800      	cmp	r0, #0
  400a5c:	d05c      	beq.n	400b18 <sd_mmc_check+0x7a8>
			1, &u8_value)) {
		return false;
	}
	sd_mmc_card->high_speed = 1;
  400a5e:	4b57      	ldr	r3, [pc, #348]	; (400bbc <sd_mmc_check+0x84c>)
  400a60:	681b      	ldr	r3, [r3, #0]
  400a62:	2201      	movs	r2, #1
  400a64:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	sd_mmc_card->clock *= 2;
  400a68:	681a      	ldr	r2, [r3, #0]
  400a6a:	0052      	lsls	r2, r2, #1
  400a6c:	601a      	str	r2, [r3, #0]
		if (IS_SDIO()) {
			if (!sdio_cmd52_set_high_speed()) {
				return false;
			}
		}
		if (sd_mmc_card->type & CARD_TYPE_SD) {
  400a6e:	4b53      	ldr	r3, [pc, #332]	; (400bbc <sd_mmc_check+0x84c>)
  400a70:	681b      	ldr	r3, [r3, #0]
  400a72:	7bda      	ldrb	r2, [r3, #15]
  400a74:	f012 0f01 	tst.w	r2, #1
  400a78:	d037      	beq.n	400aea <sd_mmc_check+0x77a>
			if (sd_mmc_card->version > CARD_VER_SD_1_0) {
  400a7a:	7c1b      	ldrb	r3, [r3, #16]
  400a7c:	2b10      	cmp	r3, #16
  400a7e:	d934      	bls.n	400aea <sd_mmc_check+0x77a>
 *
 * \return true if success, otherwise false
 */
static bool sd_cm6_set_high_speed(void)
{
	uint8_t switch_status[SD_SW_STATUS_BSIZE] = {0};
  400a80:	2440      	movs	r4, #64	; 0x40
  400a82:	4622      	mov	r2, r4
  400a84:	2100      	movs	r1, #0
  400a86:	a804      	add	r0, sp, #16
  400a88:	4b54      	ldr	r3, [pc, #336]	; (400bdc <sd_mmc_check+0x86c>)
  400a8a:	4798      	blx	r3

	if (!driver_adtc_start(SD_CMD6_SWITCH_FUNC,
  400a8c:	2301      	movs	r3, #1
  400a8e:	9300      	str	r3, [sp, #0]
  400a90:	4622      	mov	r2, r4
  400a92:	4953      	ldr	r1, [pc, #332]	; (400be0 <sd_mmc_check+0x870>)
  400a94:	4853      	ldr	r0, [pc, #332]	; (400be4 <sd_mmc_check+0x874>)
  400a96:	4c54      	ldr	r4, [pc, #336]	; (400be8 <sd_mmc_check+0x878>)
  400a98:	47a0      	blx	r4
  400a9a:	2800      	cmp	r0, #0
  400a9c:	d03c      	beq.n	400b18 <sd_mmc_check+0x7a8>
			| SD_CMD6_GRP2_DEFAULT
			| SD_CMD6_GRP1_HIGH_SPEED,
			SD_SW_STATUS_BSIZE, 1, true)) {
		return false;
	}
	if (!driver_start_read_blocks(switch_status, 1)) {
  400a9e:	2101      	movs	r1, #1
  400aa0:	a804      	add	r0, sp, #16
  400aa2:	4b52      	ldr	r3, [pc, #328]	; (400bec <sd_mmc_check+0x87c>)
  400aa4:	4798      	blx	r3
  400aa6:	2800      	cmp	r0, #0
  400aa8:	d036      	beq.n	400b18 <sd_mmc_check+0x7a8>
		return false;
	}
	if (!driver_wait_end_of_read_blocks()) {
  400aaa:	4b51      	ldr	r3, [pc, #324]	; (400bf0 <sd_mmc_check+0x880>)
  400aac:	4798      	blx	r3
  400aae:	2800      	cmp	r0, #0
  400ab0:	d032      	beq.n	400b18 <sd_mmc_check+0x7a8>
		return false;
	}

	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  400ab2:	4b50      	ldr	r3, [pc, #320]	; (400bf4 <sd_mmc_check+0x884>)
  400ab4:	4798      	blx	r3
  400ab6:	f010 0f80 	tst.w	r0, #128	; 0x80
  400aba:	d12d      	bne.n	400b18 <sd_mmc_check+0x7a8>
		sd_mmc_debug("%s: CMD6 CARD_STATUS_SWITCH_ERROR\n\r", __func__);
		return false;
	}
	if (SD_SW_STATUS_FUN_GRP1_RC(switch_status)
  400abc:	f89d 3020 	ldrb.w	r3, [sp, #32]
  400ac0:	f003 030f 	and.w	r3, r3, #15
  400ac4:	2b0f      	cmp	r3, #15
  400ac6:	d010      	beq.n	400aea <sd_mmc_check+0x77a>
  400ac8:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400acc:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
			== SD_SW_STATUS_FUN_GRP_RC_ERROR) {
		// No supported, it is not a protocol error
		return true;
	}
	if (SD_SW_STATUS_FUN_GRP1_BUSY(switch_status)) {
  400ad0:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
  400ad4:	d120      	bne.n	400b18 <sd_mmc_check+0x7a8>
		sd_mmc_debug("%s: CMD6 SD_SW_STATUS_FUN_GRP1_BUSY\n\r", __func__);
		return false;
	}
	// CMD6 function switching period is within 8 clocks
	// after the end bit of status data.
	driver_send_clock();
  400ad6:	4b48      	ldr	r3, [pc, #288]	; (400bf8 <sd_mmc_check+0x888>)
  400ad8:	4798      	blx	r3
	sd_mmc_card->high_speed = 1;
  400ada:	4b38      	ldr	r3, [pc, #224]	; (400bbc <sd_mmc_check+0x84c>)
  400adc:	681b      	ldr	r3, [r3, #0]
  400ade:	2201      	movs	r2, #1
  400ae0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	sd_mmc_card->clock *= 2;
  400ae4:	681a      	ldr	r2, [r3, #0]
  400ae6:	0052      	lsls	r2, r2, #1
  400ae8:	601a      	str	r2, [r3, #0]
					return false;
				}
			}
		}
		// Valid new configuration
		sd_mmc_configure_slot();
  400aea:	4b3a      	ldr	r3, [pc, #232]	; (400bd4 <sd_mmc_check+0x864>)
  400aec:	4798      	blx	r3
	}
	// SD MEMORY, Set default block size
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  400aee:	4b33      	ldr	r3, [pc, #204]	; (400bbc <sd_mmc_check+0x84c>)
  400af0:	681b      	ldr	r3, [r3, #0]
  400af2:	7bdb      	ldrb	r3, [r3, #15]
  400af4:	f013 0f01 	tst.w	r3, #1
  400af8:	d006      	beq.n	400b08 <sd_mmc_check+0x798>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  400afa:	f44f 7100 	mov.w	r1, #512	; 0x200
  400afe:	f241 1010 	movw	r0, #4368	; 0x1110
  400b02:	4b33      	ldr	r3, [pc, #204]	; (400bd0 <sd_mmc_check+0x860>)
  400b04:	4798      	blx	r3
		sd_mmc_deselect_slot();
		return sd_mmc_err;
	}

	// Initialization of the card requested
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
  400b06:	b138      	cbz	r0, 400b18 <sd_mmc_check+0x7a8>
			: sd_mmc_mci_card_init()) {
		sd_mmc_debug("SD/MMC card ready\n\r");
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
  400b08:	4b2c      	ldr	r3, [pc, #176]	; (400bbc <sd_mmc_check+0x84c>)
  400b0a:	681b      	ldr	r3, [r3, #0]
  400b0c:	2200      	movs	r2, #0
  400b0e:	739a      	strb	r2, [r3, #14]
		sd_mmc_deselect_slot();
  400b10:	4b3a      	ldr	r3, [pc, #232]	; (400bfc <sd_mmc_check+0x88c>)
  400b12:	4798      	blx	r3
		// To notify that the card has been just initialized
		// It is necessary for USB Device MSC
		return SD_MMC_INIT_ONGOING;
  400b14:	2001      	movs	r0, #1
  400b16:	e04c      	b.n	400bb2 <sd_mmc_check+0x842>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
  400b18:	4b28      	ldr	r3, [pc, #160]	; (400bbc <sd_mmc_check+0x84c>)
  400b1a:	681b      	ldr	r3, [r3, #0]
  400b1c:	2403      	movs	r4, #3
  400b1e:	739c      	strb	r4, [r3, #14]
	sd_mmc_deselect_slot();
  400b20:	4b36      	ldr	r3, [pc, #216]	; (400bfc <sd_mmc_check+0x88c>)
  400b22:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
  400b24:	4620      	mov	r0, r4
  400b26:	e044      	b.n	400bb2 <sd_mmc_check+0x842>
 */
static bool sd_cmd8(uint8_t * v2)
{
	uint32_t resp;

	*v2 = 0;
  400b28:	f04f 0800 	mov.w	r8, #0
  400b2c:	e001      	b.n	400b32 <sd_mmc_check+0x7c2>
  400b2e:	f04f 0800 	mov.w	r8, #0
static bool sdio_op_cond(void)
{
	uint32_t resp;

	// CMD5 - SDIO send operation condition (OCR) command.
	if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND, 0)) {
  400b32:	2100      	movs	r1, #0
  400b34:	f244 5005 	movw	r0, #17669	; 0x4505
  400b38:	4b25      	ldr	r3, [pc, #148]	; (400bd0 <sd_mmc_check+0x860>)
  400b3a:	4798      	blx	r3
  400b3c:	2800      	cmp	r0, #0
  400b3e:	f47f ac57 	bne.w	4003f0 <sd_mmc_check+0x80>
	// Try to get the SDIO card's operating condition
	if (!sdio_op_cond()) {
		return false;
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
  400b42:	4b1e      	ldr	r3, [pc, #120]	; (400bbc <sd_mmc_check+0x84c>)
  400b44:	681b      	ldr	r3, [r3, #0]
  400b46:	7bdb      	ldrb	r3, [r3, #15]
  400b48:	f013 0f01 	tst.w	r3, #1
  400b4c:	f43f add8 	beq.w	400700 <sd_mmc_check+0x390>
  400b50:	f1b8 0f00 	cmp.w	r8, #0
  400b54:	4e2a      	ldr	r6, [pc, #168]	; (400c00 <sd_mmc_check+0x890>)
  400b56:	bf08      	it	eq
  400b58:	f44f 16fc 	moveq.w	r6, #2064384	; 0x1f8000
	if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND, 0)) {
		sd_mmc_debug("%s: CMD5 Fail\n\r", __func__);
		return true; // No error but card type not updated
	}
	resp = driver_get_response();
	if ((resp & OCR_SDIO_NF) == 0) {
  400b5c:	f640 0435 	movw	r4, #2101	; 0x835
	 */
	retry = 2100;
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
  400b60:	f04f 0800 	mov.w	r8, #0
  400b64:	4d1a      	ldr	r5, [pc, #104]	; (400bd0 <sd_mmc_check+0x860>)
		// Check response
		if (!driver_send_cmd(SD_MCI_ACMD41_SD_SEND_OP_COND, arg)) {
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
  400b66:	4f23      	ldr	r7, [pc, #140]	; (400bf4 <sd_mmc_check+0x884>)
  400b68:	e468      	b.n	40043c <sd_mmc_check+0xcc>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
		// Try to get the SD card's operating condition
		if (!sd_mci_op_cond(v2)) {
			// It is not a SD card
			sd_mmc_debug("Start MMC Install\n\r");
			sd_mmc_card->type = CARD_TYPE_MMC;
  400b6a:	4b14      	ldr	r3, [pc, #80]	; (400bbc <sd_mmc_check+0x84c>)
  400b6c:	681b      	ldr	r3, [r3, #0]
  400b6e:	2202      	movs	r2, #2
  400b70:	73da      	strb	r2, [r3, #15]
static bool sd_mmc_mci_install_mmc(void)
{
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
  400b72:	2100      	movs	r1, #0
  400b74:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  400b78:	4b15      	ldr	r3, [pc, #84]	; (400bd0 <sd_mmc_check+0x860>)
  400b7a:	4798      	blx	r3
  400b7c:	2800      	cmp	r0, #0
  400b7e:	d0cb      	beq.n	400b18 <sd_mmc_check+0x7a8>
  400b80:	e47b      	b.n	40047a <sd_mmc_check+0x10a>
			sd_mmc_card->type = CARD_TYPE_MMC;
			return sd_mmc_mci_install_mmc();
		}
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
  400b82:	4b0e      	ldr	r3, [pc, #56]	; (400bbc <sd_mmc_check+0x84c>)
  400b84:	681b      	ldr	r3, [r3, #0]
  400b86:	7bdb      	ldrb	r3, [r3, #15]
  400b88:	f013 0f01 	tst.w	r3, #1
  400b8c:	f47f adb0 	bne.w	4006f0 <sd_mmc_check+0x380>
  400b90:	e5b6      	b.n	400700 <sd_mmc_check+0x390>
		return false;
	}

	// Put the Card in Identify Mode
	// Note: The CID is not used in this stack
	if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
  400b92:	2100      	movs	r1, #0
  400b94:	f645 3002 	movw	r0, #23298	; 0x5b02
  400b98:	4b0d      	ldr	r3, [pc, #52]	; (400bd0 <sd_mmc_check+0x860>)
  400b9a:	4798      	blx	r3
  400b9c:	2800      	cmp	r0, #0
  400b9e:	d0bb      	beq.n	400b18 <sd_mmc_check+0x7a8>
  400ba0:	e48a      	b.n	4004b8 <sd_mmc_check+0x148>
		// For MMC 4.0 Higher version
		// Get EXT_CSD
		if (!mmc_cmd8(&b_authorize_high_speed)) {
			return false;
		}
		if (4 <= driver_get_bus_width(sd_mmc_slot_sel)) {
  400ba2:	4b09      	ldr	r3, [pc, #36]	; (400bc8 <sd_mmc_check+0x858>)
  400ba4:	7818      	ldrb	r0, [r3, #0]
  400ba6:	4b09      	ldr	r3, [pc, #36]	; (400bcc <sd_mmc_check+0x85c>)
  400ba8:	4798      	blx	r3
  400baa:	2803      	cmp	r0, #3
  400bac:	f63f ad50 	bhi.w	400650 <sd_mmc_check+0x2e0>
  400bb0:	e56e      	b.n	400690 <sd_mmc_check+0x320>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
  400bb2:	b014      	add	sp, #80	; 0x50
  400bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400bb8:	004002c9 	.word	0x004002c9
  400bbc:	204008bc 	.word	0x204008bc
  400bc0:	004070ec 	.word	0x004070ec
  400bc4:	004070ac 	.word	0x004070ac
  400bc8:	204008c2 	.word	0x204008c2
  400bcc:	004015ed 	.word	0x004015ed
  400bd0:	004016c9 	.word	0x004016c9
  400bd4:	0040019d 	.word	0x0040019d
  400bd8:	004015f9 	.word	0x004015f9
  400bdc:	004040b9 	.word	0x004040b9
  400be0:	80ffff01 	.word	0x80ffff01
  400be4:	00081106 	.word	0x00081106
  400be8:	00401725 	.word	0x00401725
  400bec:	00401861 	.word	0x00401861
  400bf0:	00401941 	.word	0x00401941
  400bf4:	004016ed 	.word	0x004016ed
  400bf8:	004016a5 	.word	0x004016a5
  400bfc:	0040032d 	.word	0x0040032d
  400c00:	401f8000 	.word	0x401f8000

00400c04 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
  400c04:	b508      	push	{r3, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
  400c06:	4b05      	ldr	r3, [pc, #20]	; (400c1c <sd_mmc_get_type+0x18>)
  400c08:	4798      	blx	r3
  400c0a:	b928      	cbnz	r0, 400c18 <sd_mmc_get_type+0x14>
		return CARD_TYPE_UNKNOWN;
	}
	sd_mmc_deselect_slot();
  400c0c:	4b04      	ldr	r3, [pc, #16]	; (400c20 <sd_mmc_get_type+0x1c>)
  400c0e:	4798      	blx	r3
	return sd_mmc_card->type;
  400c10:	4b04      	ldr	r3, [pc, #16]	; (400c24 <sd_mmc_get_type+0x20>)
  400c12:	681b      	ldr	r3, [r3, #0]
  400c14:	7bd8      	ldrb	r0, [r3, #15]
  400c16:	bd08      	pop	{r3, pc}
}

card_type_t sd_mmc_get_type(uint8_t slot)
{
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
		return CARD_TYPE_UNKNOWN;
  400c18:	2000      	movs	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
  400c1a:	bd08      	pop	{r3, pc}
  400c1c:	004001c9 	.word	0x004001c9
  400c20:	0040032d 	.word	0x0040032d
  400c24:	204008bc 	.word	0x204008bc

00400c28 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
  400c28:	b508      	push	{r3, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
  400c2a:	4b05      	ldr	r3, [pc, #20]	; (400c40 <sd_mmc_get_capacity+0x18>)
  400c2c:	4798      	blx	r3
  400c2e:	b928      	cbnz	r0, 400c3c <sd_mmc_get_capacity+0x14>
		return 0;
	}
	sd_mmc_deselect_slot();
  400c30:	4b04      	ldr	r3, [pc, #16]	; (400c44 <sd_mmc_get_capacity+0x1c>)
  400c32:	4798      	blx	r3
	return sd_mmc_card->capacity;
  400c34:	4b04      	ldr	r3, [pc, #16]	; (400c48 <sd_mmc_get_capacity+0x20>)
  400c36:	681b      	ldr	r3, [r3, #0]
  400c38:	6858      	ldr	r0, [r3, #4]
  400c3a:	bd08      	pop	{r3, pc}
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
		return 0;
  400c3c:	2000      	movs	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
  400c3e:	bd08      	pop	{r3, pc}
  400c40:	004001c9 	.word	0x004001c9
  400c44:	0040032d 	.word	0x0040032d
  400c48:	204008bc 	.word	0x204008bc

00400c4c <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
  400c4c:	2000      	movs	r0, #0
  400c4e:	4770      	bx	lr

00400c50 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
  400c50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  400c54:	b083      	sub	sp, #12
  400c56:	4689      	mov	r9, r1
  400c58:	4690      	mov	r8, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
  400c5a:	4b25      	ldr	r3, [pc, #148]	; (400cf0 <sd_mmc_init_read_blocks+0xa0>)
  400c5c:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_OK) {
  400c5e:	2800      	cmp	r0, #0
  400c60:	d131      	bne.n	400cc6 <sd_mmc_init_read_blocks+0x76>
  400c62:	4c24      	ldr	r4, [pc, #144]	; (400cf4 <sd_mmc_init_read_blocks+0xa4>)
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
					(uint32_t)sd_mmc_card->rca << 16)) {
  400c64:	4e24      	ldr	r6, [pc, #144]	; (400cf8 <sd_mmc_init_read_blocks+0xa8>)
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
  400c66:	4d25      	ldr	r5, [pc, #148]	; (400cfc <sd_mmc_init_read_blocks+0xac>)
					(uint32_t)sd_mmc_card->rca << 16)) {
				return false;
			}
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
  400c68:	4f25      	ldr	r7, [pc, #148]	; (400d00 <sd_mmc_init_read_blocks+0xb0>)
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
					(uint32_t)sd_mmc_card->rca << 16)) {
  400c6a:	6833      	ldr	r3, [r6, #0]
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
  400c6c:	8999      	ldrh	r1, [r3, #12]
  400c6e:	0409      	lsls	r1, r1, #16
  400c70:	f241 100d 	movw	r0, #4365	; 0x110d
  400c74:	47a8      	blx	r5
  400c76:	b338      	cbz	r0, 400cc8 <sd_mmc_init_read_blocks+0x78>
					(uint32_t)sd_mmc_card->rca << 16)) {
				return false;
			}
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
  400c78:	47b8      	blx	r7
  400c7a:	f410 7f80 	tst.w	r0, #256	; 0x100
  400c7e:	d127      	bne.n	400cd0 <sd_mmc_init_read_blocks+0x80>
				break;
			}
		}
		if (nec_timeout-- == 0) {
  400c80:	3c01      	subs	r4, #1
  400c82:	d1f2      	bne.n	400c6a <sd_mmc_init_read_blocks+0x1a>
  400c84:	e020      	b.n	400cc8 <sd_mmc_init_read_blocks+0x78>
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
  400c86:	ea4f 2949 	mov.w	r9, r9, lsl #9
	}

	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
  400c8a:	2301      	movs	r3, #1
  400c8c:	9300      	str	r3, [sp, #0]
  400c8e:	4643      	mov	r3, r8
  400c90:	f44f 7200 	mov.w	r2, #512	; 0x200
  400c94:	4649      	mov	r1, r9
  400c96:	4c1b      	ldr	r4, [pc, #108]	; (400d04 <sd_mmc_init_read_blocks+0xb4>)
  400c98:	47a0      	blx	r4
  400c9a:	b918      	cbnz	r0, 400ca4 <sd_mmc_init_read_blocks+0x54>
		sd_mmc_deselect_slot();
  400c9c:	4b1a      	ldr	r3, [pc, #104]	; (400d08 <sd_mmc_init_read_blocks+0xb8>)
  400c9e:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  400ca0:	2005      	movs	r0, #5
  400ca2:	e022      	b.n	400cea <sd_mmc_init_read_blocks+0x9a>
	}
	// Check response
	if (sd_mmc_is_mci()) {
		resp = driver_get_response();
  400ca4:	4b16      	ldr	r3, [pc, #88]	; (400d00 <sd_mmc_init_read_blocks+0xb0>)
  400ca6:	4798      	blx	r3
		if (resp & CARD_STATUS_ERR_RD_WR) {
  400ca8:	4b18      	ldr	r3, [pc, #96]	; (400d0c <sd_mmc_init_read_blocks+0xbc>)
  400caa:	4003      	ands	r3, r0
  400cac:	b11b      	cbz	r3, 400cb6 <sd_mmc_init_read_blocks+0x66>
			sd_mmc_debug("%s: Read blocks %02d resp32 0x%08x CARD_STATUS_ERR_RD_WR\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
  400cae:	4b16      	ldr	r3, [pc, #88]	; (400d08 <sd_mmc_init_read_blocks+0xb8>)
  400cb0:	4798      	blx	r3
			return SD_MMC_ERR_COMM;
  400cb2:	2005      	movs	r0, #5
  400cb4:	e019      	b.n	400cea <sd_mmc_init_read_blocks+0x9a>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
  400cb6:	4b16      	ldr	r3, [pc, #88]	; (400d10 <sd_mmc_init_read_blocks+0xc0>)
  400cb8:	f8a3 8000 	strh.w	r8, [r3]
	sd_mmc_nb_block_to_tranfer = nb_block;
  400cbc:	4b15      	ldr	r3, [pc, #84]	; (400d14 <sd_mmc_init_read_blocks+0xc4>)
  400cbe:	f8a3 8000 	strh.w	r8, [r3]
	return SD_MMC_OK;
  400cc2:	2000      	movs	r0, #0
  400cc4:	e011      	b.n	400cea <sd_mmc_init_read_blocks+0x9a>
  400cc6:	e010      	b.n	400cea <sd_mmc_init_read_blocks+0x9a>
		return sd_mmc_err;
	}

	// Wait for data ready status
	if (!sd_mmc_cmd13()) {
		sd_mmc_deselect_slot();
  400cc8:	4b0f      	ldr	r3, [pc, #60]	; (400d08 <sd_mmc_init_read_blocks+0xb8>)
  400cca:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  400ccc:	2005      	movs	r0, #5
  400cce:	e00c      	b.n	400cea <sd_mmc_init_read_blocks+0x9a>
	}

	if (nb_block > 1) {
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
	} else {
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
  400cd0:	4811      	ldr	r0, [pc, #68]	; (400d18 <sd_mmc_init_read_blocks+0xc8>)
  400cd2:	4b12      	ldr	r3, [pc, #72]	; (400d1c <sd_mmc_init_read_blocks+0xcc>)
  400cd4:	f1b8 0f01 	cmp.w	r8, #1
  400cd8:	bf88      	it	hi
  400cda:	4618      	movhi	r0, r3
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
  400cdc:	4b06      	ldr	r3, [pc, #24]	; (400cf8 <sd_mmc_init_read_blocks+0xa8>)
  400cde:	681b      	ldr	r3, [r3, #0]
  400ce0:	7bdb      	ldrb	r3, [r3, #15]
  400ce2:	f013 0f08 	tst.w	r3, #8
  400ce6:	d1d0      	bne.n	400c8a <sd_mmc_init_read_blocks+0x3a>
  400ce8:	e7cd      	b.n	400c86 <sd_mmc_init_read_blocks+0x36>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
  400cea:	b003      	add	sp, #12
  400cec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  400cf0:	004001c9 	.word	0x004001c9
  400cf4:	00030d41 	.word	0x00030d41
  400cf8:	204008bc 	.word	0x204008bc
  400cfc:	004016c9 	.word	0x004016c9
  400d00:	004016ed 	.word	0x004016ed
  400d04:	00401725 	.word	0x00401725
  400d08:	0040032d 	.word	0x0040032d
  400d0c:	e4580000 	.word	0xe4580000
  400d10:	204008c0 	.word	0x204008c0
  400d14:	204008b8 	.word	0x204008b8
  400d18:	00081111 	.word	0x00081111
  400d1c:	00101112 	.word	0x00101112

00400d20 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
  400d20:	b510      	push	{r4, lr}
  400d22:	460c      	mov	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
  400d24:	4b06      	ldr	r3, [pc, #24]	; (400d40 <sd_mmc_start_read_blocks+0x20>)
  400d26:	4798      	blx	r3
  400d28:	b920      	cbnz	r0, 400d34 <sd_mmc_start_read_blocks+0x14>
		sd_mmc_nb_block_remaining = 0;
  400d2a:	2200      	movs	r2, #0
  400d2c:	4b05      	ldr	r3, [pc, #20]	; (400d44 <sd_mmc_start_read_blocks+0x24>)
  400d2e:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
  400d30:	2005      	movs	r0, #5
  400d32:	bd10      	pop	{r4, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
  400d34:	4a03      	ldr	r2, [pc, #12]	; (400d44 <sd_mmc_start_read_blocks+0x24>)
  400d36:	8813      	ldrh	r3, [r2, #0]
  400d38:	1b1c      	subs	r4, r3, r4
  400d3a:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
  400d3c:	2000      	movs	r0, #0
}
  400d3e:	bd10      	pop	{r4, pc}
  400d40:	00401861 	.word	0x00401861
  400d44:	204008c0 	.word	0x204008c0

00400d48 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
  400d48:	b510      	push	{r4, lr}
  400d4a:	4604      	mov	r4, r0
	if (!driver_wait_end_of_read_blocks()) {
  400d4c:	4b12      	ldr	r3, [pc, #72]	; (400d98 <sd_mmc_wait_end_of_read_blocks+0x50>)
  400d4e:	4798      	blx	r3
  400d50:	b1f0      	cbz	r0, 400d90 <sd_mmc_wait_end_of_read_blocks+0x48>
		return SD_MMC_ERR_COMM;
	}
	if (abort) {
  400d52:	b11c      	cbz	r4, 400d5c <sd_mmc_wait_end_of_read_blocks+0x14>
		sd_mmc_nb_block_remaining = 0;
  400d54:	2200      	movs	r2, #0
  400d56:	4b11      	ldr	r3, [pc, #68]	; (400d9c <sd_mmc_wait_end_of_read_blocks+0x54>)
  400d58:	801a      	strh	r2, [r3, #0]
  400d5a:	e002      	b.n	400d62 <sd_mmc_wait_end_of_read_blocks+0x1a>
	} else if (sd_mmc_nb_block_remaining) {
  400d5c:	4b0f      	ldr	r3, [pc, #60]	; (400d9c <sd_mmc_wait_end_of_read_blocks+0x54>)
  400d5e:	881b      	ldrh	r3, [r3, #0]
  400d60:	b9c3      	cbnz	r3, 400d94 <sd_mmc_wait_end_of_read_blocks+0x4c>
		return SD_MMC_OK;
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
  400d62:	4b0f      	ldr	r3, [pc, #60]	; (400da0 <sd_mmc_wait_end_of_read_blocks+0x58>)
  400d64:	881b      	ldrh	r3, [r3, #0]
  400d66:	2b01      	cmp	r3, #1
  400d68:	d103      	bne.n	400d72 <sd_mmc_wait_end_of_read_blocks+0x2a>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
  400d6a:	4b0e      	ldr	r3, [pc, #56]	; (400da4 <sd_mmc_wait_end_of_read_blocks+0x5c>)
  400d6c:	4798      	blx	r3
		return SD_MMC_OK;
  400d6e:	2000      	movs	r0, #0
  400d70:	bd10      	pop	{r4, pc}
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
  400d72:	2100      	movs	r1, #0
  400d74:	f243 100c 	movw	r0, #12556	; 0x310c
  400d78:	4b0b      	ldr	r3, [pc, #44]	; (400da8 <sd_mmc_wait_end_of_read_blocks+0x60>)
  400d7a:	4798      	blx	r3
  400d7c:	b920      	cbnz	r0, 400d88 <sd_mmc_wait_end_of_read_blocks+0x40>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
  400d7e:	2100      	movs	r1, #0
  400d80:	f243 100c 	movw	r0, #12556	; 0x310c
  400d84:	4b08      	ldr	r3, [pc, #32]	; (400da8 <sd_mmc_wait_end_of_read_blocks+0x60>)
  400d86:	4798      	blx	r3
	}
	sd_mmc_deselect_slot();
  400d88:	4b06      	ldr	r3, [pc, #24]	; (400da4 <sd_mmc_wait_end_of_read_blocks+0x5c>)
  400d8a:	4798      	blx	r3
	return SD_MMC_OK;
  400d8c:	2000      	movs	r0, #0
  400d8e:	bd10      	pop	{r4, pc}
}

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
	if (!driver_wait_end_of_read_blocks()) {
		return SD_MMC_ERR_COMM;
  400d90:	2005      	movs	r0, #5
  400d92:	bd10      	pop	{r4, pc}
	}
	if (abort) {
		sd_mmc_nb_block_remaining = 0;
	} else if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
  400d94:	2000      	movs	r0, #0
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
  400d96:	bd10      	pop	{r4, pc}
  400d98:	00401941 	.word	0x00401941
  400d9c:	204008c0 	.word	0x204008c0
  400da0:	204008b8 	.word	0x204008b8
  400da4:	0040032d 	.word	0x0040032d
  400da8:	004016c9 	.word	0x004016c9

00400dac <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
  400dac:	b530      	push	{r4, r5, lr}
  400dae:	b083      	sub	sp, #12
  400db0:	460d      	mov	r5, r1
  400db2:	4614      	mov	r4, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
  400db4:	4b16      	ldr	r3, [pc, #88]	; (400e10 <sd_mmc_init_write_blocks+0x64>)
  400db6:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_OK) {
  400db8:	bb38      	cbnz	r0, 400e0a <sd_mmc_init_write_blocks+0x5e>
	}

	if (nb_block > 1) {
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
  400dba:	4816      	ldr	r0, [pc, #88]	; (400e14 <sd_mmc_init_write_blocks+0x68>)
  400dbc:	4b16      	ldr	r3, [pc, #88]	; (400e18 <sd_mmc_init_write_blocks+0x6c>)
  400dbe:	2c01      	cmp	r4, #1
  400dc0:	bf88      	it	hi
  400dc2:	4618      	movhi	r0, r3
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
  400dc4:	4b15      	ldr	r3, [pc, #84]	; (400e1c <sd_mmc_init_write_blocks+0x70>)
  400dc6:	681b      	ldr	r3, [r3, #0]
  400dc8:	7bdb      	ldrb	r3, [r3, #15]
  400dca:	f013 0f08 	tst.w	r3, #8
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
  400dce:	bf08      	it	eq
  400dd0:	026d      	lsleq	r5, r5, #9
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
  400dd2:	2301      	movs	r3, #1
  400dd4:	9300      	str	r3, [sp, #0]
  400dd6:	4623      	mov	r3, r4
  400dd8:	f44f 7200 	mov.w	r2, #512	; 0x200
  400ddc:	4629      	mov	r1, r5
  400dde:	4d10      	ldr	r5, [pc, #64]	; (400e20 <sd_mmc_init_write_blocks+0x74>)
  400de0:	47a8      	blx	r5
  400de2:	b918      	cbnz	r0, 400dec <sd_mmc_init_write_blocks+0x40>
		sd_mmc_deselect_slot();
  400de4:	4b0f      	ldr	r3, [pc, #60]	; (400e24 <sd_mmc_init_write_blocks+0x78>)
  400de6:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  400de8:	2005      	movs	r0, #5
  400dea:	e00e      	b.n	400e0a <sd_mmc_init_write_blocks+0x5e>
	}
	// Check response
	if (sd_mmc_is_mci()) {
		resp = driver_get_response();
  400dec:	4b0e      	ldr	r3, [pc, #56]	; (400e28 <sd_mmc_init_write_blocks+0x7c>)
  400dee:	4798      	blx	r3
		if (resp & CARD_STATUS_ERR_RD_WR) {
  400df0:	4b0e      	ldr	r3, [pc, #56]	; (400e2c <sd_mmc_init_write_blocks+0x80>)
  400df2:	4003      	ands	r3, r0
  400df4:	b11b      	cbz	r3, 400dfe <sd_mmc_init_write_blocks+0x52>
			sd_mmc_debug("%s: Write blocks %02d r1 0x%08x CARD_STATUS_ERR_RD_WR\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
  400df6:	4b0b      	ldr	r3, [pc, #44]	; (400e24 <sd_mmc_init_write_blocks+0x78>)
  400df8:	4798      	blx	r3
			return SD_MMC_ERR_COMM;
  400dfa:	2005      	movs	r0, #5
  400dfc:	e005      	b.n	400e0a <sd_mmc_init_write_blocks+0x5e>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
  400dfe:	4b0c      	ldr	r3, [pc, #48]	; (400e30 <sd_mmc_init_write_blocks+0x84>)
  400e00:	801c      	strh	r4, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
  400e02:	4b0c      	ldr	r3, [pc, #48]	; (400e34 <sd_mmc_init_write_blocks+0x88>)
  400e04:	801c      	strh	r4, [r3, #0]
	return SD_MMC_OK;
  400e06:	2000      	movs	r0, #0
  400e08:	e7ff      	b.n	400e0a <sd_mmc_init_write_blocks+0x5e>
}
  400e0a:	b003      	add	sp, #12
  400e0c:	bd30      	pop	{r4, r5, pc}
  400e0e:	bf00      	nop
  400e10:	004001c9 	.word	0x004001c9
  400e14:	00089118 	.word	0x00089118
  400e18:	00109119 	.word	0x00109119
  400e1c:	204008bc 	.word	0x204008bc
  400e20:	00401725 	.word	0x00401725
  400e24:	0040032d 	.word	0x0040032d
  400e28:	004016ed 	.word	0x004016ed
  400e2c:	e4580000 	.word	0xe4580000
  400e30:	204008c0 	.word	0x204008c0
  400e34:	204008b8 	.word	0x204008b8

00400e38 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
  400e38:	b510      	push	{r4, lr}
  400e3a:	460c      	mov	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
  400e3c:	4b06      	ldr	r3, [pc, #24]	; (400e58 <sd_mmc_start_write_blocks+0x20>)
  400e3e:	4798      	blx	r3
  400e40:	b920      	cbnz	r0, 400e4c <sd_mmc_start_write_blocks+0x14>
		sd_mmc_nb_block_remaining = 0;
  400e42:	2200      	movs	r2, #0
  400e44:	4b05      	ldr	r3, [pc, #20]	; (400e5c <sd_mmc_start_write_blocks+0x24>)
  400e46:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
  400e48:	2005      	movs	r0, #5
  400e4a:	bd10      	pop	{r4, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
  400e4c:	4a03      	ldr	r2, [pc, #12]	; (400e5c <sd_mmc_start_write_blocks+0x24>)
  400e4e:	8813      	ldrh	r3, [r2, #0]
  400e50:	1b1c      	subs	r4, r3, r4
  400e52:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
  400e54:	2000      	movs	r0, #0
}
  400e56:	bd10      	pop	{r4, pc}
  400e58:	004019a1 	.word	0x004019a1
  400e5c:	204008c0 	.word	0x204008c0

00400e60 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
  400e60:	b510      	push	{r4, lr}
  400e62:	4604      	mov	r4, r0
	if (!driver_wait_end_of_write_blocks()) {
  400e64:	4b12      	ldr	r3, [pc, #72]	; (400eb0 <sd_mmc_wait_end_of_write_blocks+0x50>)
  400e66:	4798      	blx	r3
  400e68:	b1e8      	cbz	r0, 400ea6 <sd_mmc_wait_end_of_write_blocks+0x46>
		return SD_MMC_ERR_COMM;
	}
	if (abort) {
  400e6a:	b11c      	cbz	r4, 400e74 <sd_mmc_wait_end_of_write_blocks+0x14>
		sd_mmc_nb_block_remaining = 0;
  400e6c:	2200      	movs	r2, #0
  400e6e:	4b11      	ldr	r3, [pc, #68]	; (400eb4 <sd_mmc_wait_end_of_write_blocks+0x54>)
  400e70:	801a      	strh	r2, [r3, #0]
  400e72:	e002      	b.n	400e7a <sd_mmc_wait_end_of_write_blocks+0x1a>
	} else if (sd_mmc_nb_block_remaining) {
  400e74:	4b0f      	ldr	r3, [pc, #60]	; (400eb4 <sd_mmc_wait_end_of_write_blocks+0x54>)
  400e76:	881b      	ldrh	r3, [r3, #0]
  400e78:	b9bb      	cbnz	r3, 400eaa <sd_mmc_wait_end_of_write_blocks+0x4a>
		return SD_MMC_OK;
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
  400e7a:	4b0f      	ldr	r3, [pc, #60]	; (400eb8 <sd_mmc_wait_end_of_write_blocks+0x58>)
  400e7c:	881b      	ldrh	r3, [r3, #0]
  400e7e:	2b01      	cmp	r3, #1
  400e80:	d103      	bne.n	400e8a <sd_mmc_wait_end_of_write_blocks+0x2a>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
  400e82:	4b0e      	ldr	r3, [pc, #56]	; (400ebc <sd_mmc_wait_end_of_write_blocks+0x5c>)
  400e84:	4798      	blx	r3
		return SD_MMC_OK;
  400e86:	2000      	movs	r0, #0
  400e88:	bd10      	pop	{r4, pc}
	}

	if (sd_mmc_is_mci()) {
		// Note: SPI multiblock writes terminate using a special
		// token, not a STOP_TRANSMISSION request.
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
  400e8a:	2100      	movs	r1, #0
  400e8c:	f243 100c 	movw	r0, #12556	; 0x310c
  400e90:	4b0b      	ldr	r3, [pc, #44]	; (400ec0 <sd_mmc_wait_end_of_write_blocks+0x60>)
  400e92:	4798      	blx	r3
  400e94:	b918      	cbnz	r0, 400e9e <sd_mmc_wait_end_of_write_blocks+0x3e>
			sd_mmc_deselect_slot();
  400e96:	4b09      	ldr	r3, [pc, #36]	; (400ebc <sd_mmc_wait_end_of_write_blocks+0x5c>)
  400e98:	4798      	blx	r3
			return SD_MMC_ERR_COMM;
  400e9a:	2005      	movs	r0, #5
  400e9c:	bd10      	pop	{r4, pc}
		}
	}
	sd_mmc_deselect_slot();
  400e9e:	4b07      	ldr	r3, [pc, #28]	; (400ebc <sd_mmc_wait_end_of_write_blocks+0x5c>)
  400ea0:	4798      	blx	r3
	return SD_MMC_OK;
  400ea2:	2000      	movs	r0, #0
  400ea4:	bd10      	pop	{r4, pc}
}

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
	if (!driver_wait_end_of_write_blocks()) {
		return SD_MMC_ERR_COMM;
  400ea6:	2005      	movs	r0, #5
  400ea8:	bd10      	pop	{r4, pc}
	}
	if (abort) {
		sd_mmc_nb_block_remaining = 0;
	} else if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
  400eaa:	2000      	movs	r0, #0
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
  400eac:	bd10      	pop	{r4, pc}
  400eae:	bf00      	nop
  400eb0:	00401a81 	.word	0x00401a81
  400eb4:	204008c0 	.word	0x204008c0
  400eb8:	204008b8 	.word	0x204008b8
  400ebc:	0040032d 	.word	0x0040032d
  400ec0:	004016c9 	.word	0x004016c9

00400ec4 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
  400ec4:	b510      	push	{r4, lr}
  400ec6:	4604      	mov	r4, r0
	switch (sd_mmc_check(slot))
  400ec8:	4b0f      	ldr	r3, [pc, #60]	; (400f08 <sd_mmc_test_unit_ready+0x44>)
  400eca:	4798      	blx	r3
  400ecc:	2801      	cmp	r0, #1
  400ece:	d016      	beq.n	400efe <sd_mmc_test_unit_ready+0x3a>
  400ed0:	b118      	cbz	r0, 400eda <sd_mmc_test_unit_ready+0x16>
  400ed2:	2802      	cmp	r0, #2
  400ed4:	d00e      	beq.n	400ef4 <sd_mmc_test_unit_ready+0x30>
	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
  400ed6:	2001      	movs	r0, #1
  400ed8:	bd10      	pop	{r4, pc}
Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
	switch (sd_mmc_check(slot))
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
  400eda:	4b0c      	ldr	r3, [pc, #48]	; (400f0c <sd_mmc_test_unit_ready+0x48>)
  400edc:	5d1b      	ldrb	r3, [r3, r4]
  400ede:	b983      	cbnz	r3, 400f02 <sd_mmc_test_unit_ready+0x3e>
			return CTRL_NO_PRESENT;
		}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
  400ee0:	4620      	mov	r0, r4
  400ee2:	4b0b      	ldr	r3, [pc, #44]	; (400f10 <sd_mmc_test_unit_ready+0x4c>)
  400ee4:	4798      	blx	r3
  400ee6:	f000 0003 	and.w	r0, r0, #3
			return CTRL_GOOD;
		}
		// It is not a memory card
		return CTRL_NO_PRESENT;
  400eea:	2800      	cmp	r0, #0
  400eec:	bf14      	ite	ne
  400eee:	2000      	movne	r0, #0
  400ef0:	2002      	moveq	r0, #2
  400ef2:	bd10      	pop	{r4, pc}

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;

	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
  400ef4:	2200      	movs	r2, #0
  400ef6:	4b05      	ldr	r3, [pc, #20]	; (400f0c <sd_mmc_test_unit_ready+0x48>)
  400ef8:	551a      	strb	r2, [r3, r4]
		return CTRL_NO_PRESENT;
  400efa:	2002      	movs	r0, #2
  400efc:	bd10      	pop	{r4, pc}
		}
		// It is not a memory card
		return CTRL_NO_PRESENT;

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;
  400efe:	2003      	movs	r0, #3
  400f00:	bd10      	pop	{r4, pc}
{
	switch (sd_mmc_check(slot))
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
			return CTRL_NO_PRESENT;
  400f02:	2002      	movs	r0, #2
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
	}
}
  400f04:	bd10      	pop	{r4, pc}
  400f06:	bf00      	nop
  400f08:	00400371 	.word	0x00400371
  400f0c:	204008c4 	.word	0x204008c4
  400f10:	00400c05 	.word	0x00400c05

00400f14 <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
  400f14:	b508      	push	{r3, lr}
	return sd_mmc_test_unit_ready(0);
  400f16:	2000      	movs	r0, #0
  400f18:	4b01      	ldr	r3, [pc, #4]	; (400f20 <sd_mmc_test_unit_ready_0+0xc>)
  400f1a:	4798      	blx	r3
}
  400f1c:	bd08      	pop	{r3, pc}
  400f1e:	bf00      	nop
  400f20:	00400ec5 	.word	0x00400ec5

00400f24 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
  400f24:	b538      	push	{r3, r4, r5, lr}
  400f26:	4604      	mov	r4, r0
  400f28:	460d      	mov	r5, r1
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
  400f2a:	4b04      	ldr	r3, [pc, #16]	; (400f3c <sd_mmc_read_capacity+0x18>)
  400f2c:	4798      	blx	r3
  400f2e:	0040      	lsls	r0, r0, #1
  400f30:	3801      	subs	r0, #1
  400f32:	6028      	str	r0, [r5, #0]
	return sd_mmc_test_unit_ready(slot);
  400f34:	4620      	mov	r0, r4
  400f36:	4b02      	ldr	r3, [pc, #8]	; (400f40 <sd_mmc_read_capacity+0x1c>)
  400f38:	4798      	blx	r3
}
  400f3a:	bd38      	pop	{r3, r4, r5, pc}
  400f3c:	00400c29 	.word	0x00400c29
  400f40:	00400ec5 	.word	0x00400ec5

00400f44 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
  400f44:	b508      	push	{r3, lr}
	return sd_mmc_read_capacity(0, nb_sector);
  400f46:	4601      	mov	r1, r0
  400f48:	2000      	movs	r0, #0
  400f4a:	4b01      	ldr	r3, [pc, #4]	; (400f50 <sd_mmc_read_capacity_0+0xc>)
  400f4c:	4798      	blx	r3
}
  400f4e:	bd08      	pop	{r3, pc}
  400f50:	00400f25 	.word	0x00400f25

00400f54 <sd_mmc_wr_protect_0>:
{
	return sd_mmc_is_write_protected(slot);
}

bool sd_mmc_wr_protect_0(void)
{
  400f54:	b508      	push	{r3, lr}
	return sd_mmc_unload(1, unload);
}

bool sd_mmc_wr_protect(uint8_t slot)
{
	return sd_mmc_is_write_protected(slot);
  400f56:	2000      	movs	r0, #0
  400f58:	4b01      	ldr	r3, [pc, #4]	; (400f60 <sd_mmc_wr_protect_0+0xc>)
  400f5a:	4798      	blx	r3
}

bool sd_mmc_wr_protect_0(void)
{
	return sd_mmc_wr_protect(0);
}
  400f5c:	bd08      	pop	{r3, pc}
  400f5e:	bf00      	nop
  400f60:	00400c4d 	.word	0x00400c4d

00400f64 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
  400f64:	b510      	push	{r4, lr}
  400f66:	4614      	mov	r4, r2
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
  400f68:	2201      	movs	r2, #1
  400f6a:	4b0a      	ldr	r3, [pc, #40]	; (400f94 <sd_mmc_mem_2_ram+0x30>)
  400f6c:	4798      	blx	r3
  400f6e:	b120      	cbz	r0, 400f7a <sd_mmc_mem_2_ram+0x16>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
  400f70:	2802      	cmp	r0, #2
  400f72:	bf0c      	ite	eq
  400f74:	2002      	moveq	r0, #2
  400f76:	2001      	movne	r0, #1
  400f78:	bd10      	pop	{r4, pc}
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
  400f7a:	2101      	movs	r1, #1
  400f7c:	4620      	mov	r0, r4
  400f7e:	4b06      	ldr	r3, [pc, #24]	; (400f98 <sd_mmc_mem_2_ram+0x34>)
  400f80:	4798      	blx	r3
  400f82:	b928      	cbnz	r0, 400f90 <sd_mmc_mem_2_ram+0x2c>
		return CTRL_FAIL;
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
  400f84:	4b05      	ldr	r3, [pc, #20]	; (400f9c <sd_mmc_mem_2_ram+0x38>)
  400f86:	4798      	blx	r3
{
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
  400f88:	3000      	adds	r0, #0
  400f8a:	bf18      	it	ne
  400f8c:	2001      	movne	r0, #1
  400f8e:	bd10      	pop	{r4, pc}
	default:
		return CTRL_FAIL;
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
		return CTRL_FAIL;
  400f90:	2001      	movs	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
  400f92:	bd10      	pop	{r4, pc}
  400f94:	00400c51 	.word	0x00400c51
  400f98:	00400d21 	.word	0x00400d21
  400f9c:	00400d49 	.word	0x00400d49

00400fa0 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
  400fa0:	b508      	push	{r3, lr}
	return sd_mmc_mem_2_ram(0, addr, ram);
  400fa2:	460a      	mov	r2, r1
  400fa4:	4601      	mov	r1, r0
  400fa6:	2000      	movs	r0, #0
  400fa8:	4b01      	ldr	r3, [pc, #4]	; (400fb0 <sd_mmc_mem_2_ram_0+0x10>)
  400faa:	4798      	blx	r3
}
  400fac:	bd08      	pop	{r3, pc}
  400fae:	bf00      	nop
  400fb0:	00400f65 	.word	0x00400f65

00400fb4 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
  400fb4:	b510      	push	{r4, lr}
  400fb6:	4614      	mov	r4, r2
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
  400fb8:	2201      	movs	r2, #1
  400fba:	4b0a      	ldr	r3, [pc, #40]	; (400fe4 <sd_mmc_ram_2_mem+0x30>)
  400fbc:	4798      	blx	r3
  400fbe:	b120      	cbz	r0, 400fca <sd_mmc_ram_2_mem+0x16>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
  400fc0:	2802      	cmp	r0, #2
  400fc2:	bf0c      	ite	eq
  400fc4:	2002      	moveq	r0, #2
  400fc6:	2001      	movne	r0, #1
  400fc8:	bd10      	pop	{r4, pc}
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
  400fca:	2101      	movs	r1, #1
  400fcc:	4620      	mov	r0, r4
  400fce:	4b06      	ldr	r3, [pc, #24]	; (400fe8 <sd_mmc_ram_2_mem+0x34>)
  400fd0:	4798      	blx	r3
  400fd2:	b928      	cbnz	r0, 400fe0 <sd_mmc_ram_2_mem+0x2c>
		return CTRL_FAIL;
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
  400fd4:	4b05      	ldr	r3, [pc, #20]	; (400fec <sd_mmc_ram_2_mem+0x38>)
  400fd6:	4798      	blx	r3
{
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
  400fd8:	3000      	adds	r0, #0
  400fda:	bf18      	it	ne
  400fdc:	2001      	movne	r0, #1
  400fde:	bd10      	pop	{r4, pc}
	default:
		return CTRL_FAIL;
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
		return CTRL_FAIL;
  400fe0:	2001      	movs	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
  400fe2:	bd10      	pop	{r4, pc}
  400fe4:	00400dad 	.word	0x00400dad
  400fe8:	00400e39 	.word	0x00400e39
  400fec:	00400e61 	.word	0x00400e61

00400ff0 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
  400ff0:	b508      	push	{r3, lr}
	return sd_mmc_ram_2_mem(0, addr, ram);
  400ff2:	460a      	mov	r2, r1
  400ff4:	4601      	mov	r1, r0
  400ff6:	2000      	movs	r0, #0
  400ff8:	4b01      	ldr	r3, [pc, #4]	; (401000 <sd_mmc_ram_2_mem_0+0x10>)
  400ffa:	4798      	blx	r3
}
  400ffc:	bd08      	pop	{r3, pc}
  400ffe:	bf00      	nop
  401000:	00400fb5 	.word	0x00400fb5

00401004 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  401004:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  401006:	4810      	ldr	r0, [pc, #64]	; (401048 <sysclk_init+0x44>)
  401008:	4b10      	ldr	r3, [pc, #64]	; (40104c <sysclk_init+0x48>)
  40100a:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  40100c:	213e      	movs	r1, #62	; 0x3e
  40100e:	2000      	movs	r0, #0
  401010:	4b0f      	ldr	r3, [pc, #60]	; (401050 <sysclk_init+0x4c>)
  401012:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  401014:	4c0f      	ldr	r4, [pc, #60]	; (401054 <sysclk_init+0x50>)
  401016:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  401018:	2800      	cmp	r0, #0
  40101a:	d0fc      	beq.n	401016 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  40101c:	4b0e      	ldr	r3, [pc, #56]	; (401058 <sysclk_init+0x54>)
  40101e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  401020:	4a0e      	ldr	r2, [pc, #56]	; (40105c <sysclk_init+0x58>)
  401022:	4b0f      	ldr	r3, [pc, #60]	; (401060 <sysclk_init+0x5c>)
  401024:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  401026:	4c0f      	ldr	r4, [pc, #60]	; (401064 <sysclk_init+0x60>)
  401028:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40102a:	2800      	cmp	r0, #0
  40102c:	d0fc      	beq.n	401028 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  40102e:	2002      	movs	r0, #2
  401030:	4b0d      	ldr	r3, [pc, #52]	; (401068 <sysclk_init+0x64>)
  401032:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  401034:	2000      	movs	r0, #0
  401036:	4b0d      	ldr	r3, [pc, #52]	; (40106c <sysclk_init+0x68>)
  401038:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  40103a:	4b0d      	ldr	r3, [pc, #52]	; (401070 <sysclk_init+0x6c>)
  40103c:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40103e:	4802      	ldr	r0, [pc, #8]	; (401048 <sysclk_init+0x44>)
  401040:	4b02      	ldr	r3, [pc, #8]	; (40104c <sysclk_init+0x48>)
  401042:	4798      	blx	r3
  401044:	bd10      	pop	{r4, pc}
  401046:	bf00      	nop
  401048:	11e1a300 	.word	0x11e1a300
  40104c:	0040218d 	.word	0x0040218d
  401050:	00401c75 	.word	0x00401c75
  401054:	00401cc9 	.word	0x00401cc9
  401058:	00401cd9 	.word	0x00401cd9
  40105c:	20183f01 	.word	0x20183f01
  401060:	400e0600 	.word	0x400e0600
  401064:	00401ce9 	.word	0x00401ce9
  401068:	00401bd1 	.word	0x00401bd1
  40106c:	00401c0d 	.word	0x00401c0d
  401070:	0040207d 	.word	0x0040207d

00401074 <mem_test_unit_ready>:
{
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
  401074:	b918      	cbnz	r0, 40107e <mem_test_unit_ready+0xa>
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
  401076:	b508      	push	{r3, lr}
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
  401078:	4b02      	ldr	r3, [pc, #8]	; (401084 <mem_test_unit_ready+0x10>)
  40107a:	4798      	blx	r3
  40107c:	bd08      	pop	{r3, pc}
  40107e:	2001      	movs	r0, #1
  401080:	4770      	bx	lr
  401082:	bf00      	nop
  401084:	00400f15 	.word	0x00400f15

00401088 <mem_read_capacity>:
{
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
  401088:	b920      	cbnz	r0, 401094 <mem_read_capacity+0xc>
  return status;
}


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
  40108a:	b508      	push	{r3, lr}
  40108c:	4608      	mov	r0, r1
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
  40108e:	4b02      	ldr	r3, [pc, #8]	; (401098 <mem_read_capacity+0x10>)
  401090:	4798      	blx	r3
  401092:	bd08      	pop	{r3, pc}
  401094:	2001      	movs	r0, #1
  401096:	4770      	bx	lr
  401098:	00400f45 	.word	0x00400f45

0040109c <mem_sector_size>:
#endif

  Ctrl_access_unlock();

  return sector_size;
}
  40109c:	fab0 f080 	clz	r0, r0
  4010a0:	0940      	lsrs	r0, r0, #5
  4010a2:	4770      	bx	lr

004010a4 <mem_wr_protect>:

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
  4010a4:	b918      	cbnz	r0, 4010ae <mem_wr_protect+0xa>

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
  4010a6:	b508      	push	{r3, lr}

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
  4010a8:	4b02      	ldr	r3, [pc, #8]	; (4010b4 <mem_wr_protect+0x10>)
  4010aa:	4798      	blx	r3
  4010ac:	bd08      	pop	{r3, pc}
  4010ae:	2001      	movs	r0, #1
  4010b0:	4770      	bx	lr
  4010b2:	bf00      	nop
  4010b4:	00400f55 	.word	0x00400f55

004010b8 <memory_2_ram>:
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
  4010b8:	b928      	cbnz	r0, 4010c6 <memory_2_ram+0xe>
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
  4010ba:	b508      	push	{r3, lr}
  4010bc:	4608      	mov	r0, r1
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
  4010be:	4611      	mov	r1, r2
  4010c0:	4b02      	ldr	r3, [pc, #8]	; (4010cc <memory_2_ram+0x14>)
  4010c2:	4798      	blx	r3
  4010c4:	bd08      	pop	{r3, pc}
  4010c6:	2001      	movs	r0, #1
  4010c8:	4770      	bx	lr
  4010ca:	bf00      	nop
  4010cc:	00400fa1 	.word	0x00400fa1

004010d0 <ram_2_memory>:
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
  4010d0:	b928      	cbnz	r0, 4010de <ram_2_memory+0xe>
  return status;
}


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
  4010d2:	b508      	push	{r3, lr}
  4010d4:	4608      	mov	r0, r1
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
  4010d6:	4611      	mov	r1, r2
  4010d8:	4b02      	ldr	r3, [pc, #8]	; (4010e4 <ram_2_memory+0x14>)
  4010da:	4798      	blx	r3
  4010dc:	bd08      	pop	{r3, pc}
  4010de:	2001      	movs	r0, #1
  4010e0:	4770      	bx	lr
  4010e2:	bf00      	nop
  4010e4:	00400ff1 	.word	0x00400ff1

004010e8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
  4010e8:	b990      	cbnz	r0, 401110 <_read+0x28>
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  4010ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4010ee:	460c      	mov	r4, r1
  4010f0:	4690      	mov	r8, r2

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  4010f2:	2a00      	cmp	r2, #0
  4010f4:	dd0f      	ble.n	401116 <_read+0x2e>
  4010f6:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  4010f8:	4e08      	ldr	r6, [pc, #32]	; (40111c <_read+0x34>)
  4010fa:	4d09      	ldr	r5, [pc, #36]	; (401120 <_read+0x38>)
  4010fc:	6830      	ldr	r0, [r6, #0]
  4010fe:	4621      	mov	r1, r4
  401100:	682b      	ldr	r3, [r5, #0]
  401102:	4798      	blx	r3
		ptr++;
  401104:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  401106:	42a7      	cmp	r7, r4
  401108:	d1f8      	bne.n	4010fc <_read+0x14>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
  40110a:	4640      	mov	r0, r8
  40110c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
  401110:	f04f 30ff 	mov.w	r0, #4294967295
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  401114:	4770      	bx	lr

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  401116:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  401118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40111c:	204009a8 	.word	0x204009a8
  401120:	204009a0 	.word	0x204009a0

00401124 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  401124:	3801      	subs	r0, #1
  401126:	2802      	cmp	r0, #2
  401128:	d815      	bhi.n	401156 <_write+0x32>
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  40112a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40112e:	460e      	mov	r6, r1
  401130:	4614      	mov	r4, r2

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  401132:	b19a      	cbz	r2, 40115c <_write+0x38>
  401134:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  401136:	f8df 8038 	ldr.w	r8, [pc, #56]	; 401170 <_write+0x4c>
  40113a:	4f0c      	ldr	r7, [pc, #48]	; (40116c <_write+0x48>)
  40113c:	f8d8 0000 	ldr.w	r0, [r8]
  401140:	f815 1b01 	ldrb.w	r1, [r5], #1
  401144:	683b      	ldr	r3, [r7, #0]
  401146:	4798      	blx	r3
  401148:	2800      	cmp	r0, #0
  40114a:	db0a      	blt.n	401162 <_write+0x3e>
  40114c:	1ba8      	subs	r0, r5, r6

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  40114e:	3c01      	subs	r4, #1
  401150:	d1f4      	bne.n	40113c <_write+0x18>
  401152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
  401156:	f04f 30ff 	mov.w	r0, #4294967295
			return -1;
		}
		++nChars;
	}
	return nChars;
}
  40115a:	4770      	bx	lr

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  40115c:	2000      	movs	r0, #0
  40115e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
  401162:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  401166:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40116a:	bf00      	nop
  40116c:	204009a4 	.word	0x204009a4
  401170:	204009a8 	.word	0x204009a8

00401174 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  401174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  401176:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40117a:	4bb6      	ldr	r3, [pc, #728]	; (401454 <board_init+0x2e0>)
  40117c:	605a      	str	r2, [r3, #4]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  40117e:	f3bf 8f5f 	dmb	sy
		MPU_REGION_VALID |
		MPU_DEFAULT_ITCM_REGION;

	dw_region_attr =
		MPU_AP_PRIVILEGED_READ_WRITE |
		mpu_cal_mpu_region_size(ITCM_END_ADDRESS - ITCM_START_ADDRESS) |
  401182:	4fb5      	ldr	r7, [pc, #724]	; (401458 <board_init+0x2e4>)
  401184:	4638      	mov	r0, r7
  401186:	4db5      	ldr	r5, [pc, #724]	; (40145c <board_init+0x2e8>)
  401188:	47a8      	blx	r5
		MPU_REGION_ENABLE;

	mpu_set_region( dw_region_base_addr, dw_region_attr);
  40118a:	4eb5      	ldr	r6, [pc, #724]	; (401460 <board_init+0x2ec>)
  40118c:	ea40 0106 	orr.w	r1, r0, r6
  401190:	2011      	movs	r0, #17
  401192:	4cb4      	ldr	r4, [pc, #720]	; (401464 <board_init+0x2f0>)
  401194:	47a0      	blx	r4
		MPU_DEFAULT_IFLASH_REGION;

	dw_region_attr =
		MPU_AP_READONLY |
		INNER_NORMAL_WB_NWA_TYPE( NON_SHAREABLE ) |
		mpu_cal_mpu_region_size(IFLASH_END_ADDRESS - IFLASH_START_ADDRESS) |
  401196:	48b4      	ldr	r0, [pc, #720]	; (401468 <board_init+0x2f4>)
  401198:	47a8      	blx	r5
		MPU_REGION_ENABLE;

	mpu_set_region( dw_region_base_addr, dw_region_attr);
  40119a:	49b4      	ldr	r1, [pc, #720]	; (40146c <board_init+0x2f8>)
  40119c:	4301      	orrs	r1, r0
  40119e:	48b4      	ldr	r0, [pc, #720]	; (401470 <board_init+0x2fc>)
  4011a0:	47a0      	blx	r4
		MPU_REGION_VALID |
		MPU_DEFAULT_DTCM_REGION;

	dw_region_attr =
		MPU_AP_PRIVILEGED_READ_WRITE |
		mpu_cal_mpu_region_size(DTCM_END_ADDRESS - DTCM_START_ADDRESS) |
  4011a2:	4638      	mov	r0, r7
  4011a4:	47a8      	blx	r5
		MPU_REGION_ENABLE;

	mpu_set_region( dw_region_base_addr, dw_region_attr);
  4011a6:	ea40 0106 	orr.w	r1, r0, r6
  4011aa:	48b2      	ldr	r0, [pc, #712]	; (401474 <board_init+0x300>)
  4011ac:	47a0      	blx	r4
		MPU_DEFAULT_SRAM_REGION_1;

	dw_region_attr =
		MPU_AP_FULL_ACCESS    |
		INNER_NORMAL_WB_NWA_TYPE( NON_SHAREABLE ) |
		mpu_cal_mpu_region_size(SRAM_FIRST_END_ADDRESS - SRAM_FIRST_START_ADDRESS)
  4011ae:	48b2      	ldr	r0, [pc, #712]	; (401478 <board_init+0x304>)
  4011b0:	47a8      	blx	r5
		| MPU_REGION_ENABLE;

	mpu_set_region( dw_region_base_addr, dw_region_attr);
  4011b2:	f106 7608 	add.w	r6, r6, #35651584	; 0x2200000
  4011b6:	f506 3640 	add.w	r6, r6, #196608	; 0x30000
  4011ba:	ea40 0106 	orr.w	r1, r0, r6
  4011be:	48af      	ldr	r0, [pc, #700]	; (40147c <board_init+0x308>)
  4011c0:	47a0      	blx	r4
		MPU_DEFAULT_SRAM_REGION_2;

	dw_region_attr =
		MPU_AP_FULL_ACCESS    |
		INNER_NORMAL_WB_NWA_TYPE( NON_SHAREABLE ) |
		mpu_cal_mpu_region_size(SRAM_SECOND_END_ADDRESS - SRAM_SECOND_START_ADDRESS) |
  4011c2:	48af      	ldr	r0, [pc, #700]	; (401480 <board_init+0x30c>)
  4011c4:	47a8      	blx	r5
		MPU_REGION_ENABLE;

	mpu_set_region( dw_region_base_addr, dw_region_attr);
  4011c6:	ea40 0106 	orr.w	r1, r0, r6
  4011ca:	48ae      	ldr	r0, [pc, #696]	; (401484 <board_init+0x310>)
  4011cc:	47a0      	blx	r4
		MPU_PERIPHERALS_REGION;

	dw_region_attr = MPU_AP_FULL_ACCESS |
		MPU_REGION_EXECUTE_NEVER |
		SHAREABLE_DEVICE_TYPE |
		mpu_cal_mpu_region_size(PERIPHERALS_END_ADDRESS - PERIPHERALS_START_ADDRESS)
  4011ce:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
  4011d2:	47a8      	blx	r5
		|MPU_REGION_ENABLE;

	mpu_set_region( dw_region_base_addr, dw_region_attr);
  4011d4:	4eac      	ldr	r6, [pc, #688]	; (401488 <board_init+0x314>)
  4011d6:	ea40 0106 	orr.w	r1, r0, r6
  4011da:	48ac      	ldr	r0, [pc, #688]	; (40148c <board_init+0x318>)
  4011dc:	47a0      	blx	r4

	dw_region_attr =
		MPU_AP_FULL_ACCESS |
		/* External memory Must be defined with 'Device' or 'Strongly Ordered' attribute for write accesses (AXI) */
		STRONGLY_ORDERED_SHAREABLE_TYPE |
		mpu_cal_mpu_region_size(EXT_EBI_END_ADDRESS - EXT_EBI_START_ADDRESS) |
  4011de:	f06f 4070 	mvn.w	r0, #4026531840	; 0xf0000000
  4011e2:	47a8      	blx	r5
		MPU_REGION_ENABLE;

	mpu_set_region( dw_region_base_addr, dw_region_attr);
  4011e4:	4faa      	ldr	r7, [pc, #680]	; (401490 <board_init+0x31c>)
  4011e6:	ea40 0107 	orr.w	r1, r0, r7
  4011ea:	48aa      	ldr	r0, [pc, #680]	; (401494 <board_init+0x320>)
  4011ec:	47a0      	blx	r4
		MPU_DEFAULT_SDRAM_REGION;

	dw_region_attr =
		MPU_AP_FULL_ACCESS    |
		INNER_NORMAL_WB_RWA_TYPE( SHAREABLE ) |
		mpu_cal_mpu_region_size(SDRAM_END_ADDRESS - SDRAM_START_ADDRESS) |
  4011ee:	f06f 4070 	mvn.w	r0, #4026531840	; 0xf0000000
  4011f2:	47a8      	blx	r5
		MPU_REGION_ENABLE;

	mpu_set_region( dw_region_base_addr, dw_region_attr);
  4011f4:	49a8      	ldr	r1, [pc, #672]	; (401498 <board_init+0x324>)
  4011f6:	4301      	orrs	r1, r0
  4011f8:	48a8      	ldr	r0, [pc, #672]	; (40149c <board_init+0x328>)
  4011fa:	47a0      	blx	r4
		MPU_QSPIMEM_REGION;

	dw_region_attr =
		MPU_AP_FULL_ACCESS |
		STRONGLY_ORDERED_SHAREABLE_TYPE |
		mpu_cal_mpu_region_size(QSPI_END_ADDRESS - QSPI_START_ADDRESS) |
  4011fc:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
  401200:	47a8      	blx	r5
		MPU_REGION_ENABLE;

	mpu_set_region( dw_region_base_addr, dw_region_attr);
  401202:	ea40 0107 	orr.w	r1, r0, r7
  401206:	48a6      	ldr	r0, [pc, #664]	; (4014a0 <board_init+0x32c>)
  401208:	47a0      	blx	r4

	dw_region_attr =
		MPU_AP_FULL_ACCESS |
		MPU_REGION_EXECUTE_NEVER |
		SHAREABLE_DEVICE_TYPE |
		mpu_cal_mpu_region_size(USBHSRAM_END_ADDRESS - USBHSRAM_START_ADDRESS) |
  40120a:	48a6      	ldr	r0, [pc, #664]	; (4014a4 <board_init+0x330>)
  40120c:	47a8      	blx	r5
		MPU_REGION_ENABLE;

	mpu_set_region( dw_region_base_addr, dw_region_attr);
  40120e:	ea40 0106 	orr.w	r1, r0, r6
  401212:	48a5      	ldr	r0, [pc, #660]	; (4014a8 <board_init+0x334>)
  401214:	47a0      	blx	r4


	/* Enable the memory management fault , Bus Fault, Usage Fault exception */
	SCB->SHCSR |= (SCB_SHCSR_MEMFAULTENA_Msk | SCB_SHCSR_BUSFAULTENA_Msk
  401216:	4ca5      	ldr	r4, [pc, #660]	; (4014ac <board_init+0x338>)
  401218:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40121a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
  40121e:	6263      	str	r3, [r4, #36]	; 0x24
					| SCB_SHCSR_USGFAULTENA_Msk);

	/* Enable the MPU region */
	mpu_enable( MPU_ENABLE | MPU_PRIVDEFENA);
  401220:	2005      	movs	r0, #5
  401222:	4ba3      	ldr	r3, [pc, #652]	; (4014b0 <board_init+0x33c>)
  401224:	4798      	blx	r3
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  401226:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  40122a:	f3bf 8f6f 	isb	sy
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  40122e:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  401232:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  401236:	2300      	movs	r3, #0
  401238:	f8c4 3250 	str.w	r3, [r4, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  40123c:	6963      	ldr	r3, [r4, #20]
  40123e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  401242:	6163      	str	r3, [r4, #20]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  401244:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  401248:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  40124c:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  401250:	f3c6 354e 	ubfx	r5, r6, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  401254:	f006 0707 	and.w	r7, r6, #7
  401258:	3704      	adds	r7, #4
    ways    = CCSIDR_WAYS(ccsidr);
  40125a:	f3c6 06c9 	ubfx	r6, r6, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  40125e:	fab6 f086 	clz	r0, r6
    wshift  = __CLZ(ways) & 0x1f;
  401262:	f000 001f 	and.w	r0, r0, #31
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  401266:	f3bf 8f4f 	dsb	sy

    __DSB();

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
  40126a:	4633      	mov	r3, r6
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
  40126c:	fa05 f107 	lsl.w	r1, r5, r7
  401270:	fa03 f200 	lsl.w	r2, r3, r0
  401274:	430a      	orrs	r2, r1
              SCB->DCISW = sw;
  401276:	f8c4 2260 	str.w	r2, [r4, #608]	; 0x260
            } while(tmpways--);
  40127a:	3b01      	subs	r3, #1
  40127c:	f1b3 3fff 	cmp.w	r3, #4294967295
  401280:	d1f6      	bne.n	401270 <board_init+0xfc>
        } while(sets--);
  401282:	3d01      	subs	r5, #1
  401284:	f1b5 3fff 	cmp.w	r5, #4294967295
  401288:	d1ef      	bne.n	40126a <board_init+0xf6>
  40128a:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  40128e:	4b87      	ldr	r3, [pc, #540]	; (4014ac <board_init+0x338>)
  401290:	695a      	ldr	r2, [r3, #20]
  401292:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  401296:	615a      	str	r2, [r3, #20]
  401298:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  40129c:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4012a0:	4a84      	ldr	r2, [pc, #528]	; (4014b4 <board_init+0x340>)
  4012a2:	4985      	ldr	r1, [pc, #532]	; (4014b8 <board_init+0x344>)
  4012a4:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4012a6:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  4012aa:	6051      	str	r1, [r2, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  4012ac:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  4012b0:	f3bf 8f6f 	isb	sy
static inline void tcm_disable(void) 
{

	__DSB();
	__ISB();
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  4012b4:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  4012b8:	f022 0201 	bic.w	r2, r2, #1
  4012bc:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  4012c0:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  4012c4:	f022 0201 	bic.w	r2, r2, #1
  4012c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  4012cc:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  4012d0:	f3bf 8f6f 	isb	sy
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4012d4:	200a      	movs	r0, #10
  4012d6:	4c79      	ldr	r4, [pc, #484]	; (4014bc <board_init+0x348>)
  4012d8:	47a0      	blx	r4
  4012da:	200b      	movs	r0, #11
  4012dc:	47a0      	blx	r4
  4012de:	200c      	movs	r0, #12
  4012e0:	47a0      	blx	r4
  4012e2:	2010      	movs	r0, #16
  4012e4:	47a0      	blx	r4
  4012e6:	2011      	movs	r0, #17
  4012e8:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4012ea:	4a75      	ldr	r2, [pc, #468]	; (4014c0 <board_init+0x34c>)
  4012ec:	f44f 7380 	mov.w	r3, #256	; 0x100
  4012f0:	6113      	str	r3, [r2, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4012f2:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4012f6:	6313      	str	r3, [r2, #48]	; 0x30
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4012f8:	4b72      	ldr	r3, [pc, #456]	; (4014c4 <board_init+0x350>)
  4012fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
  4012fe:	6159      	str	r1, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401300:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  401304:	6659      	str	r1, [r3, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  401306:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  40130a:	6559      	str	r1, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
  40130c:	6219      	str	r1, [r3, #32]

	if (mode & IOPORT_MODE_DEBOUNCE) {
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  40130e:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  401312:	6f18      	ldr	r0, [r3, #112]	; 0x70
  401314:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
  401318:	6718      	str	r0, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  40131a:	6f58      	ldr	r0, [r3, #116]	; 0x74
  40131c:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
  401320:	6758      	str	r0, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  401322:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  401326:	f8c3 10d4 	str.w	r1, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  40132a:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  40132e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  401332:	6619      	str	r1, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  401334:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  401338:	6559      	str	r1, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  40133a:	6259      	str	r1, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  40133c:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  401340:	6f18      	ldr	r0, [r3, #112]	; 0x70
  401342:	f420 1000 	bic.w	r0, r0, #2097152	; 0x200000
  401346:	6718      	str	r0, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  401348:	6f58      	ldr	r0, [r3, #116]	; 0x74
  40134a:	f420 1000 	bic.w	r0, r0, #2097152	; 0x200000
  40134e:	6758      	str	r0, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401350:	6059      	str	r1, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  401352:	485d      	ldr	r0, [pc, #372]	; (4014c8 <board_init+0x354>)
  401354:	f8d0 1114 	ldr.w	r1, [r0, #276]	; 0x114
  401358:	f041 0110 	orr.w	r1, r1, #16
  40135c:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  401360:	495a      	ldr	r1, [pc, #360]	; (4014cc <board_init+0x358>)
  401362:	2010      	movs	r0, #16
  401364:	6608      	str	r0, [r1, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  401366:	f8c1 0090 	str.w	r0, [r1, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  40136a:	6548      	str	r0, [r1, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  40136c:	6248      	str	r0, [r1, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  40136e:	f8c1 0080 	str.w	r0, [r1, #128]	; 0x80
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
  401372:	6f0c      	ldr	r4, [r1, #112]	; 0x70
  401374:	4304      	orrs	r4, r0
  401376:	670c      	str	r4, [r1, #112]	; 0x70
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
  401378:	6f4c      	ldr	r4, [r1, #116]	; 0x74
  40137a:	4304      	orrs	r4, r0
  40137c:	674c      	str	r4, [r1, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40137e:	6048      	str	r0, [r1, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  401380:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401384:	6619      	str	r1, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  401386:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  40138a:	6559      	str	r1, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  40138c:	6259      	str	r1, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  40138e:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  401392:	6f18      	ldr	r0, [r3, #112]	; 0x70
  401394:	f020 5080 	bic.w	r0, r0, #268435456	; 0x10000000
  401398:	6718      	str	r0, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
  40139a:	6f58      	ldr	r0, [r3, #116]	; 0x74
  40139c:	4308      	orrs	r0, r1
  40139e:	6758      	str	r0, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4013a0:	6059      	str	r1, [r3, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  4013a2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  4013a6:	6619      	str	r1, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  4013a8:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  4013ac:	6559      	str	r1, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  4013ae:	6259      	str	r1, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4013b0:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
  4013b4:	6f18      	ldr	r0, [r3, #112]	; 0x70
  4013b6:	4308      	orrs	r0, r1
  4013b8:	6718      	str	r0, [r3, #112]	; 0x70
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
  4013ba:	6f58      	ldr	r0, [r3, #116]	; 0x74
  4013bc:	4308      	orrs	r0, r1
  4013be:	6758      	str	r0, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4013c0:	6059      	str	r1, [r3, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  4013c2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4013c6:	6619      	str	r1, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  4013c8:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  4013cc:	6559      	str	r1, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  4013ce:	6259      	str	r1, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4013d0:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  4013d4:	6f18      	ldr	r0, [r3, #112]	; 0x70
  4013d6:	f020 4080 	bic.w	r0, r0, #1073741824	; 0x40000000
  4013da:	6718      	str	r0, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
  4013dc:	6f58      	ldr	r0, [r3, #116]	; 0x74
  4013de:	4308      	orrs	r0, r1
  4013e0:	6758      	str	r0, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4013e2:	6059      	str	r1, [r3, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  4013e4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  4013e8:	6619      	str	r1, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  4013ea:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  4013ee:	6559      	str	r1, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  4013f0:	6259      	str	r1, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4013f2:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  4013f6:	6f18      	ldr	r0, [r3, #112]	; 0x70
  4013f8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
  4013fc:	6718      	str	r0, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
  4013fe:	6f58      	ldr	r0, [r3, #116]	; 0x74
  401400:	4308      	orrs	r0, r1
  401402:	6758      	str	r0, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401404:	6059      	str	r1, [r3, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  401406:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  40140a:	6619      	str	r1, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  40140c:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  401410:	6559      	str	r1, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  401412:	6259      	str	r1, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  401414:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  401418:	6f18      	ldr	r0, [r3, #112]	; 0x70
  40141a:	f020 6080 	bic.w	r0, r0, #67108864	; 0x4000000
  40141e:	6718      	str	r0, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
  401420:	6f58      	ldr	r0, [r3, #116]	; 0x74
  401422:	4308      	orrs	r0, r1
  401424:	6758      	str	r0, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401426:	6059      	str	r1, [r3, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  401428:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40142c:	6619      	str	r1, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  40142e:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  401432:	6559      	str	r1, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  401434:	6259      	str	r1, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  401436:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  40143a:	6f18      	ldr	r0, [r3, #112]	; 0x70
  40143c:	f020 6000 	bic.w	r0, r0, #134217728	; 0x8000000
  401440:	6718      	str	r0, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
  401442:	6f58      	ldr	r0, [r3, #116]	; 0x74
  401444:	4308      	orrs	r0, r1
  401446:	6758      	str	r0, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401448:	6059      	str	r1, [r3, #4]
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40144a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  40144e:	6153      	str	r3, [r2, #20]
  401450:	e03e      	b.n	4014d0 <board_init+0x35c>
  401452:	bf00      	nop
  401454:	400e1850 	.word	0x400e1850
  401458:	003fffff 	.word	0x003fffff
  40145c:	00401af9 	.word	0x00401af9
  401460:	01000001 	.word	0x01000001
  401464:	00401aed 	.word	0x00401aed
  401468:	001fffff 	.word	0x001fffff
  40146c:	06230001 	.word	0x06230001
  401470:	00400012 	.word	0x00400012
  401474:	20000013 	.word	0x20000013
  401478:	0003ffff 	.word	0x0003ffff
  40147c:	20400014 	.word	0x20400014
  401480:	0001ffff 	.word	0x0001ffff
  401484:	20440015 	.word	0x20440015
  401488:	13010001 	.word	0x13010001
  40148c:	40000016 	.word	0x40000016
  401490:	03000001 	.word	0x03000001
  401494:	60000017 	.word	0x60000017
  401498:	03250001 	.word	0x03250001
  40149c:	70000018 	.word	0x70000018
  4014a0:	80000019 	.word	0x80000019
  4014a4:	000fffff 	.word	0x000fffff
  4014a8:	a010001a 	.word	0xa010001a
  4014ac:	e000ed00 	.word	0xe000ed00
  4014b0:	00401ae1 	.word	0x00401ae1
  4014b4:	400e0c00 	.word	0x400e0c00
  4014b8:	5a00080c 	.word	0x5a00080c
  4014bc:	00401cf9 	.word	0x00401cf9
  4014c0:	400e1200 	.word	0x400e1200
  4014c4:	400e0e00 	.word	0x400e0e00
  4014c8:	40088000 	.word	0x40088000
  4014cc:	400e1000 	.word	0x400e1000
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4014d0:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  4014d4:	6653      	str	r3, [r2, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  4014d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  4014da:	6553      	str	r3, [r2, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  4014dc:	6253      	str	r3, [r2, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4014de:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  4014e2:	6f13      	ldr	r3, [r2, #112]	; 0x70
  4014e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  4014e8:	6713      	str	r3, [r2, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4014ea:	6f53      	ldr	r3, [r2, #116]	; 0x74
  4014ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  4014f0:	6753      	str	r3, [r2, #116]	; 0x74
  4014f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

004014f4 <hsmci_reset>:

/**
 * \brief Reset the HSMCI interface
 */
static void hsmci_reset(void)
{
  4014f4:	b470      	push	{r4, r5, r6}
	uint32_t mr = HSMCI->HSMCI_MR;
  4014f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4014fa:	685d      	ldr	r5, [r3, #4]
	uint32_t dtor = HSMCI->HSMCI_DTOR;
  4014fc:	689c      	ldr	r4, [r3, #8]
	uint32_t sdcr = HSMCI->HSMCI_SDCR;
  4014fe:	68d8      	ldr	r0, [r3, #12]
	uint32_t cstor = HSMCI->HSMCI_CSTOR;
  401500:	69d9      	ldr	r1, [r3, #28]
	uint32_t cfg = HSMCI->HSMCI_CFG;
  401502:	6d5a      	ldr	r2, [r3, #84]	; 0x54
	HSMCI->HSMCI_CR = HSMCI_CR_SWRST;
  401504:	2680      	movs	r6, #128	; 0x80
  401506:	601e      	str	r6, [r3, #0]
	HSMCI->HSMCI_MR = mr;
  401508:	605d      	str	r5, [r3, #4]
	HSMCI->HSMCI_DTOR = dtor;
  40150a:	609c      	str	r4, [r3, #8]
	HSMCI->HSMCI_SDCR = sdcr;
  40150c:	60d8      	str	r0, [r3, #12]
	HSMCI->HSMCI_CSTOR = cstor;
  40150e:	61d9      	str	r1, [r3, #28]
	HSMCI->HSMCI_CFG = cfg;
  401510:	655a      	str	r2, [r3, #84]	; 0x54
#ifdef HSMCI_SR_DMADONE
	HSMCI->HSMCI_DMA = 0;
#endif
#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
	HSMCI->HSMCI_DMA = 0;
  401512:	2200      	movs	r2, #0
  401514:	651a      	str	r2, [r3, #80]	; 0x50
#endif
#endif
	// Enable the HSMCI
	HSMCI->HSMCI_CR = HSMCI_CR_PWSEN | HSMCI_CR_MCIEN;
  401516:	2205      	movs	r2, #5
  401518:	601a      	str	r2, [r3, #0]
}
  40151a:	bc70      	pop	{r4, r5, r6}
  40151c:	4770      	bx	lr
  40151e:	bf00      	nop

00401520 <hsmci_send_cmd_execute>:
 *
 * \return true if success, otherwise false
 */
static bool hsmci_send_cmd_execute(uint32_t cmdr, sdmmc_cmd_def_t cmd,
		uint32_t arg)
{
  401520:	b508      	push	{r3, lr}
	uint32_t sr;

	cmdr |= HSMCI_CMDR_CMDNB(cmd) | HSMCI_CMDR_SPCMD_STD;
  401522:	f001 033f 	and.w	r3, r1, #63	; 0x3f
  401526:	4318      	orrs	r0, r3
	if (cmd & SDMMC_RESP_PRESENT) {
  401528:	f411 7f80 	tst.w	r1, #256	; 0x100
  40152c:	d00c      	beq.n	401548 <hsmci_send_cmd_execute+0x28>
		cmdr |= HSMCI_CMDR_MAXLAT;
		if (cmd & SDMMC_RESP_136) {
  40152e:	f411 6f00 	tst.w	r1, #2048	; 0x800
  401532:	d002      	beq.n	40153a <hsmci_send_cmd_execute+0x1a>
			cmdr |= HSMCI_CMDR_RSPTYP_136_BIT;
  401534:	f440 5084 	orr.w	r0, r0, #4224	; 0x1080
  401538:	e006      	b.n	401548 <hsmci_send_cmd_execute+0x28>
		} else if (cmd & SDMMC_RESP_BUSY) {
  40153a:	f411 5f00 	tst.w	r1, #8192	; 0x2000
			cmdr |= HSMCI_CMDR_RSPTYP_R1B;
  40153e:	bf14      	ite	ne
  401540:	f440 5086 	orrne.w	r0, r0, #4288	; 0x10c0
		} else {
			cmdr |= HSMCI_CMDR_RSPTYP_48_BIT;
  401544:	f440 5082 	orreq.w	r0, r0, #4160	; 0x1040
		}
	}
	if (cmd & SDMMC_CMD_OPENDRAIN) {
  401548:	f411 4f80 	tst.w	r1, #16384	; 0x4000
		cmdr |= HSMCI_CMDR_OPDCMD_OPENDRAIN;
  40154c:	bf18      	it	ne
  40154e:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	}

	// Write argument
	HSMCI->HSMCI_ARGR = arg;
  401552:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  401556:	611a      	str	r2, [r3, #16]
	// Write and start command
	HSMCI->HSMCI_CMDR = cmdr;
  401558:	6158      	str	r0, [r3, #20]

	// Wait end of command
	do {
		sr = HSMCI->HSMCI_SR;
  40155a:	4618      	mov	r0, r3
		if (cmd & SDMMC_RESP_CRC) {
  40155c:	f401 5280 	and.w	r2, r1, #4096	; 0x1000
	// Write and start command
	HSMCI->HSMCI_CMDR = cmdr;

	// Wait end of command
	do {
		sr = HSMCI->HSMCI_SR;
  401560:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (cmd & SDMMC_RESP_CRC) {
  401562:	b132      	cbz	r2, 401572 <hsmci_send_cmd_execute+0x52>
			if (sr & (HSMCI_SR_CSTOE | HSMCI_SR_RTOE
  401564:	f413 0f1f 	tst.w	r3, #10420224	; 0x9f0000
  401568:	d00a      	beq.n	401580 <hsmci_send_cmd_execute+0x60>
					| HSMCI_SR_RENDE | HSMCI_SR_RCRCE
					| HSMCI_SR_RDIRE | HSMCI_SR_RINDE)) {
				hsmci_debug("%s: CMD 0x%08x sr 0x%08x error\n\r",
						__func__, cmd, sr);
				hsmci_reset();
  40156a:	4b14      	ldr	r3, [pc, #80]	; (4015bc <hsmci_send_cmd_execute+0x9c>)
  40156c:	4798      	blx	r3
				return false;
  40156e:	2000      	movs	r0, #0
  401570:	bd08      	pop	{r3, pc}
			}
		} else {
			if (sr & (HSMCI_SR_CSTOE | HSMCI_SR_RTOE
  401572:	f413 0f1b 	tst.w	r3, #10158080	; 0x9b0000
  401576:	d003      	beq.n	401580 <hsmci_send_cmd_execute+0x60>
					| HSMCI_SR_RENDE
					| HSMCI_SR_RDIRE | HSMCI_SR_RINDE)) {
				hsmci_debug("%s: CMD 0x%08x sr 0x%08x error\n\r",
						__func__, cmd, sr);
				hsmci_reset();
  401578:	4b10      	ldr	r3, [pc, #64]	; (4015bc <hsmci_send_cmd_execute+0x9c>)
  40157a:	4798      	blx	r3
				return false;
  40157c:	2000      	movs	r0, #0
  40157e:	bd08      	pop	{r3, pc}
			}
		}
	} while (!(sr & HSMCI_SR_CMDRDY));
  401580:	f013 0f01 	tst.w	r3, #1
  401584:	d0ec      	beq.n	401560 <hsmci_send_cmd_execute+0x40>

	if (cmd & SDMMC_RESP_BUSY) {
  401586:	f411 5f00 	tst.w	r1, #8192	; 0x2000
  40158a:	d10e      	bne.n	4015aa <hsmci_send_cmd_execute+0x8a>
		if (!hsmci_wait_busy()) {
			return false;
		}
	}
	return true;
  40158c:	2001      	movs	r0, #1
  40158e:	bd08      	pop	{r3, pc}
{
	uint32_t busy_wait = 0xFFFFFFFF;
	uint32_t sr;

	do {
		sr = HSMCI->HSMCI_SR;
  401590:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (busy_wait-- == 0) {
  401592:	3a01      	subs	r2, #1
  401594:	d103      	bne.n	40159e <hsmci_send_cmd_execute+0x7e>
			hsmci_debug("%s: timeout\n\r", __func__);
			hsmci_reset();
  401596:	4b09      	ldr	r3, [pc, #36]	; (4015bc <hsmci_send_cmd_execute+0x9c>)
  401598:	4798      	blx	r3
			return false;
  40159a:	2000      	movs	r0, #0
  40159c:	bd08      	pop	{r3, pc}
		}
	} while (!((sr & HSMCI_SR_NOTBUSY) && ((sr & HSMCI_SR_DTIP) == 0)));
  40159e:	f003 0330 	and.w	r3, r3, #48	; 0x30
  4015a2:	2b20      	cmp	r3, #32
  4015a4:	d1f4      	bne.n	401590 <hsmci_send_cmd_execute+0x70>
	return true;
  4015a6:	2001      	movs	r0, #1
  4015a8:	bd08      	pop	{r3, pc}
{
	uint32_t busy_wait = 0xFFFFFFFF;
	uint32_t sr;

	do {
		sr = HSMCI->HSMCI_SR;
  4015aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4015ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  4015b0:	f04f 32ff 	mov.w	r2, #4294967295
  4015b4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4015b8:	e7f1      	b.n	40159e <hsmci_send_cmd_execute+0x7e>
  4015ba:	bf00      	nop
  4015bc:	004014f5 	.word	0x004014f5

004015c0 <hsmci_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void hsmci_init(void)
{
  4015c0:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(ID_HSMCI);
  4015c2:	2012      	movs	r0, #18
  4015c4:	4c08      	ldr	r4, [pc, #32]	; (4015e8 <hsmci_init+0x28>)
  4015c6:	47a0      	blx	r4
#endif

#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
	// Enable clock for DMA controller
	pmc_enable_periph_clk(ID_XDMAC);
  4015c8:	203a      	movs	r0, #58	; 0x3a
  4015ca:	47a0      	blx	r4
#endif
#endif

	// Set the Data Timeout Register to 2 Mega Cycles
	HSMCI->HSMCI_DTOR = HSMCI_DTOR_DTOMUL_1048576 | HSMCI_DTOR_DTOCYC(2);
  4015cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4015d0:	2272      	movs	r2, #114	; 0x72
  4015d2:	609a      	str	r2, [r3, #8]
	// Set Completion Signal Timeout to 2 Mega Cycles
	HSMCI->HSMCI_CSTOR = HSMCI_CSTOR_CSTOMUL_1048576 | HSMCI_CSTOR_CSTOCYC(2);
  4015d4:	61da      	str	r2, [r3, #28]
	// Set Configuration Register
	HSMCI->HSMCI_CFG = HSMCI_CFG_FIFOMODE | HSMCI_CFG_FERRCTRL;
  4015d6:	2211      	movs	r2, #17
  4015d8:	655a      	str	r2, [r3, #84]	; 0x54
	// Set power saving to maximum value
	HSMCI->HSMCI_MR = HSMCI_MR_PWSDIV_Msk;
  4015da:	f44f 62e0 	mov.w	r2, #1792	; 0x700
  4015de:	605a      	str	r2, [r3, #4]

	// Enable the HSMCI and the Power Saving
	HSMCI->HSMCI_CR = HSMCI_CR_MCIEN | HSMCI_CR_PWSEN;
  4015e0:	2205      	movs	r2, #5
  4015e2:	601a      	str	r2, [r3, #0]
  4015e4:	bd10      	pop	{r4, pc}
  4015e6:	bf00      	nop
  4015e8:	00401cf9 	.word	0x00401cf9

004015ec <hsmci_get_bus_width>:
}

uint8_t hsmci_get_bus_width(uint8_t slot)
{
	switch (slot) {
  4015ec:	2800      	cmp	r0, #0
		return SD_MMC_HSMCI_SLOT_1_SIZE;
#endif
	default:
		return 0; // Slot number wrong
	}
}
  4015ee:	bf0c      	ite	eq
  4015f0:	2004      	moveq	r0, #4
  4015f2:	2000      	movne	r0, #0
  4015f4:	4770      	bx	lr
  4015f6:	bf00      	nop

004015f8 <hsmci_is_high_speed_capable>:

bool hsmci_is_high_speed_capable(void)
{
	return true;
}
  4015f8:	2001      	movs	r0, #1
  4015fa:	4770      	bx	lr

004015fc <hsmci_select_device>:

void hsmci_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width, bool high_speed)
{
  4015fc:	b410      	push	{r4}
	uint32_t hsmci_slot = HSMCI_SDCR_SDCSEL_SLOTA;
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;

	if (high_speed) {
  4015fe:	b133      	cbz	r3, 40160e <hsmci_select_device+0x12>
		HSMCI->HSMCI_CFG |= HSMCI_CFG_HSMODE;
  401600:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  401604:	6d43      	ldr	r3, [r0, #84]	; 0x54
  401606:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  40160a:	6543      	str	r3, [r0, #84]	; 0x54
  40160c:	e005      	b.n	40161a <hsmci_select_device+0x1e>
	} else {
		HSMCI->HSMCI_CFG &= ~HSMCI_CFG_HSMODE;
  40160e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  401612:	6d43      	ldr	r3, [r0, #84]	; 0x54
  401614:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  401618:	6543      	str	r3, [r0, #84]	; 0x54
	uint32_t clkodd = 0;
	// clock divider, represent (((clkdiv << 1) + clkodd) + 2)
	uint32_t div = 0;

	// Speed = MCK clock / (((clkdiv << 1) + clkodd) + 2)
	if ((speed * 2) < mck) {
  40161a:	4b1f      	ldr	r3, [pc, #124]	; (401698 <hsmci_select_device+0x9c>)
  40161c:	ebb3 0f41 	cmp.w	r3, r1, lsl #1
  401620:	d32d      	bcc.n	40167e <hsmci_select_device+0x82>
		div = (mck / speed) - 2;
  401622:	481e      	ldr	r0, [pc, #120]	; (40169c <hsmci_select_device+0xa0>)
  401624:	fbb0 f3f1 	udiv	r3, r0, r1
		if (mck % speed) {
  401628:	fb01 0113 	mls	r1, r1, r3, r0
  40162c:	b909      	cbnz	r1, 401632 <hsmci_select_device+0x36>
	// clock divider, represent (((clkdiv << 1) + clkodd) + 2)
	uint32_t div = 0;

	// Speed = MCK clock / (((clkdiv << 1) + clkodd) + 2)
	if ((speed * 2) < mck) {
		div = (mck / speed) - 2;
  40162e:	3b02      	subs	r3, #2
  401630:	e000      	b.n	401634 <hsmci_select_device+0x38>
		if (mck % speed) {
			// Ensure that the card speed not be higher than expected.
			div++;
  401632:	3b01      	subs	r3, #1
	} else {
		clkdiv = 0;
		clkodd = 0;
	}

	HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKDIV_Msk;
  401634:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401638:	6848      	ldr	r0, [r1, #4]
  40163a:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
  40163e:	6048      	str	r0, [r1, #4]
	HSMCI->HSMCI_MR |= HSMCI_MR_CLKDIV(clkdiv);
  401640:	6848      	ldr	r0, [r1, #4]
  401642:	f3c3 0447 	ubfx	r4, r3, #1, #8
  401646:	4320      	orrs	r0, r4
  401648:	6048      	str	r0, [r1, #4]
	if (clkodd) {
  40164a:	f013 0f01 	tst.w	r3, #1
  40164e:	d004      	beq.n	40165a <hsmci_select_device+0x5e>
		HSMCI->HSMCI_MR |= HSMCI_MR_CLKODD;
  401650:	684b      	ldr	r3, [r1, #4]
  401652:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  401656:	604b      	str	r3, [r1, #4]
  401658:	e005      	b.n	401666 <hsmci_select_device+0x6a>
	}
	else {
		HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKODD;
  40165a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  40165e:	684b      	ldr	r3, [r1, #4]
  401660:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  401664:	604b      	str	r3, [r1, #4]
#endif
	default:
		Assert(false); // Slot number wrong
	}

	switch (bus_width) {
  401666:	2a04      	cmp	r2, #4
  401668:	d004      	beq.n	401674 <hsmci_select_device+0x78>
}

void hsmci_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width, bool high_speed)
{
	uint32_t hsmci_slot = HSMCI_SDCR_SDCSEL_SLOTA;
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;
  40166a:	2a08      	cmp	r2, #8
  40166c:	bf0c      	ite	eq
  40166e:	22c0      	moveq	r2, #192	; 0xc0
  401670:	2200      	movne	r2, #0
  401672:	e000      	b.n	401676 <hsmci_select_device+0x7a>
	case 1:
		hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;
		break;

	case 4:
		hsmci_bus_width = HSMCI_SDCR_SDCBUS_4;
  401674:	2280      	movs	r2, #128	; 0x80
		break;

	default:
		Assert(false); // Bus width wrong
	}
	HSMCI->HSMCI_SDCR = hsmci_slot | hsmci_bus_width;
  401676:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40167a:	60da      	str	r2, [r3, #12]
}
  40167c:	e008      	b.n	401690 <hsmci_select_device+0x94>
	} else {
		clkdiv = 0;
		clkodd = 0;
	}

	HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKDIV_Msk;
  40167e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  401682:	6859      	ldr	r1, [r3, #4]
  401684:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
  401688:	6059      	str	r1, [r3, #4]
	HSMCI->HSMCI_MR |= HSMCI_MR_CLKDIV(clkdiv);
  40168a:	6859      	ldr	r1, [r3, #4]
  40168c:	6059      	str	r1, [r3, #4]
  40168e:	e7e4      	b.n	40165a <hsmci_select_device+0x5e>

	default:
		Assert(false); // Bus width wrong
	}
	HSMCI->HSMCI_SDCR = hsmci_slot | hsmci_bus_width;
}
  401690:	f85d 4b04 	ldr.w	r4, [sp], #4
  401694:	4770      	bx	lr
  401696:	bf00      	nop
  401698:	08f0d17f 	.word	0x08f0d17f
  40169c:	08f0d180 	.word	0x08f0d180

004016a0 <hsmci_deselect_device>:

void hsmci_deselect_device(uint8_t slot)
{
  4016a0:	4770      	bx	lr
  4016a2:	bf00      	nop

004016a4 <hsmci_send_clock>:
}

void hsmci_send_clock(void)
{
	// Configure command
	HSMCI->HSMCI_MR &= ~(HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
  4016a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4016a8:	685a      	ldr	r2, [r3, #4]
  4016aa:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
  4016ae:	605a      	str	r2, [r3, #4]
	// Write argument
	HSMCI->HSMCI_ARGR = 0;
  4016b0:	2200      	movs	r2, #0
  4016b2:	611a      	str	r2, [r3, #16]
	// Write and start initialization command
	HSMCI->HSMCI_CMDR = HSMCI_CMDR_RSPTYP_NORESP
  4016b4:	f44f 6210 	mov.w	r2, #2304	; 0x900
  4016b8:	615a      	str	r2, [r3, #20]
			| HSMCI_CMDR_SPCMD_INIT
			| HSMCI_CMDR_OPDCMD_OPENDRAIN;
	// Wait end of initialization command
	while (!(HSMCI->HSMCI_SR & HSMCI_SR_CMDRDY));
  4016ba:	461a      	mov	r2, r3
  4016bc:	6c13      	ldr	r3, [r2, #64]	; 0x40
  4016be:	f013 0f01 	tst.w	r3, #1
  4016c2:	d0fb      	beq.n	4016bc <hsmci_send_clock+0x18>
}
  4016c4:	4770      	bx	lr
  4016c6:	bf00      	nop

004016c8 <hsmci_send_cmd>:

bool hsmci_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
  4016c8:	b510      	push	{r4, lr}
	// Configure command
	HSMCI->HSMCI_MR &= ~(HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
  4016ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4016ce:	685a      	ldr	r2, [r3, #4]
  4016d0:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
  4016d4:	605a      	str	r2, [r3, #4]
	HSMCI->HSMCI_MR &= ~HSMCI_MR_PDCMODE;
#endif
#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
	// Disable DMA for HSMCI
	HSMCI->HSMCI_DMA = 0;
  4016d6:	2400      	movs	r4, #0
  4016d8:	651c      	str	r4, [r3, #80]	; 0x50
#endif
#endif
	HSMCI->HSMCI_BLKR = 0;
  4016da:	619c      	str	r4, [r3, #24]
	return hsmci_send_cmd_execute(0, cmd, arg);
  4016dc:	460a      	mov	r2, r1
  4016de:	4601      	mov	r1, r0
  4016e0:	4620      	mov	r0, r4
  4016e2:	4b01      	ldr	r3, [pc, #4]	; (4016e8 <hsmci_send_cmd+0x20>)
  4016e4:	4798      	blx	r3
}
  4016e6:	bd10      	pop	{r4, pc}
  4016e8:	00401521 	.word	0x00401521

004016ec <hsmci_get_response>:

uint32_t hsmci_get_response(void)
{
	return HSMCI->HSMCI_RSPR[0];
  4016ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4016f0:	6a18      	ldr	r0, [r3, #32]
}
  4016f2:	4770      	bx	lr

004016f4 <hsmci_get_response_128>:

void hsmci_get_response_128(uint8_t* response)
{
  4016f4:	b410      	push	{r4}
  4016f6:	1d03      	adds	r3, r0, #4
  4016f8:	3014      	adds	r0, #20
	uint32_t response_32;

	for (uint8_t i = 0; i < 4; i++) {
		response_32 = HSMCI->HSMCI_RSPR[0];
  4016fa:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  4016fe:	6a22      	ldr	r2, [r4, #32]
		*response = (response_32 >> 24) & 0xFF;
  401700:	0e11      	lsrs	r1, r2, #24
  401702:	f803 1c04 	strb.w	r1, [r3, #-4]
		response++;
		*response = (response_32 >> 16) & 0xFF;
  401706:	0c11      	lsrs	r1, r2, #16
  401708:	f803 1c03 	strb.w	r1, [r3, #-3]
		response++;
		*response = (response_32 >>  8) & 0xFF;
  40170c:	0a11      	lsrs	r1, r2, #8
  40170e:	f803 1c02 	strb.w	r1, [r3, #-2]
		response++;
		*response = (response_32 >>  0) & 0xFF;
  401712:	f803 2c01 	strb.w	r2, [r3, #-1]
  401716:	3304      	adds	r3, #4

void hsmci_get_response_128(uint8_t* response)
{
	uint32_t response_32;

	for (uint8_t i = 0; i < 4; i++) {
  401718:	4283      	cmp	r3, r0
  40171a:	d1f0      	bne.n	4016fe <hsmci_get_response_128+0xa>
		*response = (response_32 >>  8) & 0xFF;
		response++;
		*response = (response_32 >>  0) & 0xFF;
		response++;
	}
}
  40171c:	f85d 4b04 	ldr.w	r4, [sp], #4
  401720:	4770      	bx	lr
  401722:	bf00      	nop

00401724 <hsmci_adtc_start>:

bool hsmci_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg, uint16_t block_size, uint16_t nb_block, bool access_block)
{
  401724:	b570      	push	{r4, r5, r6, lr}
	}
#endif

#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
	if (access_block) {
  401726:	f89d 4010 	ldrb.w	r4, [sp, #16]
  40172a:	b12c      	cbz	r4, 401738 <hsmci_adtc_start+0x14>
		// Enable DMA for HSMCI
		HSMCI->HSMCI_DMA = HSMCI_DMA_DMAEN;
  40172c:	f44f 7580 	mov.w	r5, #256	; 0x100
  401730:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  401734:	6525      	str	r5, [r4, #80]	; 0x50
  401736:	e003      	b.n	401740 <hsmci_adtc_start+0x1c>
	} else {
		// Disable DMA for HSMCI
		HSMCI->HSMCI_DMA = 0;
  401738:	2500      	movs	r5, #0
  40173a:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  40173e:	6525      	str	r5, [r4, #80]	; 0x50
#endif
#endif
	// Enabling Read/Write Proof allows to stop the HSMCI Clock during
	// read/write  access if the internal FIFO is full.
	// This will guarantee data integrity, not bandwidth.
	HSMCI->HSMCI_MR |= HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF;
  401740:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  401744:	686c      	ldr	r4, [r5, #4]
  401746:	f444 54c0 	orr.w	r4, r4, #6144	; 0x1800
  40174a:	606c      	str	r4, [r5, #4]
	// Force byte transfer if needed
	if (block_size & 0x3) {
  40174c:	f012 0f03 	tst.w	r2, #3
  401750:	d004      	beq.n	40175c <hsmci_adtc_start+0x38>
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
  401752:	686c      	ldr	r4, [r5, #4]
  401754:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  401758:	606c      	str	r4, [r5, #4]
  40175a:	e005      	b.n	401768 <hsmci_adtc_start+0x44>
	} else {
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
  40175c:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  401760:	686c      	ldr	r4, [r5, #4]
  401762:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  401766:	606c      	str	r4, [r5, #4]
	}

	if (cmd & SDMMC_CMD_WRITE) {
  401768:	f400 4400 	and.w	r4, r0, #32768	; 0x8000
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_WRITE;
	} else {
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_READ;
  40176c:	2c00      	cmp	r4, #0
  40176e:	bf14      	ite	ne
  401770:	f44f 3480 	movne.w	r4, #65536	; 0x10000
  401774:	f44f 24a0 	moveq.w	r4, #327680	; 0x50000
	}

	if (cmd & SDMMC_CMD_SDIO_BYTE) {
  401778:	f410 3f80 	tst.w	r0, #65536	; 0x10000
  40177c:	d007      	beq.n	40178e <hsmci_adtc_start+0x6a>
			cmdr |= HSMCI_CMDR_TRTYP_BYTE;
  40177e:	f444 1400 	orr.w	r4, r4, #2097152	; 0x200000
			// Value 0 corresponds to a 512-byte transfer
			HSMCI->HSMCI_BLKR = ((block_size % 512) << HSMCI_BLKR_BCNT_Pos);
  401782:	f3c2 0508 	ubfx	r5, r2, #0, #9
  401786:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
  40178a:	61b5      	str	r5, [r6, #24]
  40178c:	e018      	b.n	4017c0 <hsmci_adtc_start+0x9c>
	} else {
		HSMCI->HSMCI_BLKR = (block_size << HSMCI_BLKR_BLKLEN_Pos) |
  40178e:	ea43 4502 	orr.w	r5, r3, r2, lsl #16
  401792:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
  401796:	61b5      	str	r5, [r6, #24]
				(nb_block << HSMCI_BLKR_BCNT_Pos);
		if (cmd & SDMMC_CMD_SDIO_BLOCK) {
  401798:	f410 3f00 	tst.w	r0, #131072	; 0x20000
  40179c:	d002      	beq.n	4017a4 <hsmci_adtc_start+0x80>
			cmdr |= HSMCI_CMDR_TRTYP_BLOCK;
  40179e:	f444 1420 	orr.w	r4, r4, #2621440	; 0x280000
  4017a2:	e00d      	b.n	4017c0 <hsmci_adtc_start+0x9c>
		} else if (cmd & SDMMC_CMD_STREAM) {
  4017a4:	f410 2f80 	tst.w	r0, #262144	; 0x40000
  4017a8:	d002      	beq.n	4017b0 <hsmci_adtc_start+0x8c>
			cmdr |= HSMCI_CMDR_TRTYP_STREAM;
  4017aa:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  4017ae:	e007      	b.n	4017c0 <hsmci_adtc_start+0x9c>
		} else if (cmd & SDMMC_CMD_SINGLE_BLOCK) {
  4017b0:	f410 2f00 	tst.w	r0, #524288	; 0x80000
  4017b4:	d104      	bne.n	4017c0 <hsmci_adtc_start+0x9c>
			cmdr |= HSMCI_CMDR_TRTYP_SINGLE;
		} else if (cmd & SDMMC_CMD_MULTI_BLOCK) {
  4017b6:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
			cmdr |= HSMCI_CMDR_TRTYP_MULTIPLE;
  4017ba:	bf18      	it	ne
  4017bc:	f444 2400 	orrne.w	r4, r4, #524288	; 0x80000
		} else {
			Assert(false); // Incorrect flags
		}
	}
	hsmci_transfert_pos = 0;
  4017c0:	2600      	movs	r6, #0
  4017c2:	4d06      	ldr	r5, [pc, #24]	; (4017dc <hsmci_adtc_start+0xb8>)
  4017c4:	602e      	str	r6, [r5, #0]
	hsmci_block_size = block_size;
  4017c6:	4d06      	ldr	r5, [pc, #24]	; (4017e0 <hsmci_adtc_start+0xbc>)
  4017c8:	802a      	strh	r2, [r5, #0]
	hsmci_nb_block = nb_block;
  4017ca:	4a06      	ldr	r2, [pc, #24]	; (4017e4 <hsmci_adtc_start+0xc0>)
  4017cc:	8013      	strh	r3, [r2, #0]

	return hsmci_send_cmd_execute(cmdr, cmd, arg);
  4017ce:	460a      	mov	r2, r1
  4017d0:	4601      	mov	r1, r0
  4017d2:	4620      	mov	r0, r4
  4017d4:	4b04      	ldr	r3, [pc, #16]	; (4017e8 <hsmci_adtc_start+0xc4>)
  4017d6:	4798      	blx	r3
}
  4017d8:	bd70      	pop	{r4, r5, r6, pc}
  4017da:	bf00      	nop
  4017dc:	204008cc 	.word	0x204008cc
  4017e0:	204008c6 	.word	0x204008c6
  4017e4:	204008c8 	.word	0x204008c8
  4017e8:	00401521 	.word	0x00401521

004017ec <hsmci_read_word>:
{
	return hsmci_send_cmd_execute(HSMCI_CMDR_TRCMD_STOP_DATA, cmd, arg);
}

bool hsmci_read_word(uint32_t* value)
{
  4017ec:	b508      	push	{r3, lr}

	Assert(((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos);

	// Wait data available
	do {
		sr = HSMCI->HSMCI_SR;
  4017ee:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  4017f2:	4a16      	ldr	r2, [pc, #88]	; (40184c <hsmci_read_word+0x60>)

	Assert(((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos);

	// Wait data available
	do {
		sr = HSMCI->HSMCI_SR;
  4017f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  4017f6:	4213      	tst	r3, r2
  4017f8:	d003      	beq.n	401802 <hsmci_read_word+0x16>
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
  4017fa:	4b15      	ldr	r3, [pc, #84]	; (401850 <hsmci_read_word+0x64>)
  4017fc:	4798      	blx	r3
			return false;
  4017fe:	2000      	movs	r0, #0
  401800:	bd08      	pop	{r3, pc}
		}
	} while (!(sr & HSMCI_SR_RXRDY));
  401802:	f013 0f02 	tst.w	r3, #2
  401806:	d0f5      	beq.n	4017f4 <hsmci_read_word+0x8>

	// Read data
	*value = HSMCI->HSMCI_RDR;
  401808:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40180e:	6003      	str	r3, [r0, #0]
	hsmci_transfert_pos += 4;
  401810:	4a10      	ldr	r2, [pc, #64]	; (401854 <hsmci_read_word+0x68>)
  401812:	6813      	ldr	r3, [r2, #0]
  401814:	3304      	adds	r3, #4
  401816:	6013      	str	r3, [r2, #0]
	if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  401818:	4a0f      	ldr	r2, [pc, #60]	; (401858 <hsmci_read_word+0x6c>)
  40181a:	8811      	ldrh	r1, [r2, #0]
  40181c:	4a0f      	ldr	r2, [pc, #60]	; (40185c <hsmci_read_word+0x70>)
  40181e:	8812      	ldrh	r2, [r2, #0]
  401820:	fb02 f201 	mul.w	r2, r2, r1
  401824:	4293      	cmp	r3, r2
  401826:	d30e      	bcc.n	401846 <hsmci_read_word+0x5a>
	}

	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
  401828:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  40182c:	4a07      	ldr	r2, [pc, #28]	; (40184c <hsmci_read_word+0x60>)
	}

	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
  40182e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  401830:	4213      	tst	r3, r2
  401832:	d003      	beq.n	40183c <hsmci_read_word+0x50>
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
  401834:	4b06      	ldr	r3, [pc, #24]	; (401850 <hsmci_read_word+0x64>)
  401836:	4798      	blx	r3
			return false;
  401838:	2000      	movs	r0, #0
  40183a:	bd08      	pop	{r3, pc}
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
  40183c:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
  401840:	d0f5      	beq.n	40182e <hsmci_read_word+0x42>
	return true;
  401842:	2001      	movs	r0, #1
  401844:	bd08      	pop	{r3, pc}

	// Read data
	*value = HSMCI->HSMCI_RDR;
	hsmci_transfert_pos += 4;
	if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
		return true;
  401846:	2001      	movs	r0, #1
			hsmci_reset();
			return false;
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
	return true;
}
  401848:	bd08      	pop	{r3, pc}
  40184a:	bf00      	nop
  40184c:	c0600000 	.word	0xc0600000
  401850:	004014f5 	.word	0x004014f5
  401854:	204008cc 	.word	0x204008cc
  401858:	204008c6 	.word	0x204008c6
  40185c:	204008c8 	.word	0x204008c8

00401860 <hsmci_start_read_blocks>:
#endif // HSMCI_MR_PDCMODE

#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
bool hsmci_start_read_blocks(void *dest, uint16_t nb_block)
{
  401860:	b5f0      	push	{r4, r5, r6, r7, lr}
  401862:	b089      	sub	sp, #36	; 0x24
  401864:	4604      	mov	r4, r0
  401866:	460d      	mov	r5, r1
	xdmac_channel_config_t p_cfg = {0, 0, 0, 0, 0, 0, 0, 0};
  401868:	2220      	movs	r2, #32
  40186a:	2100      	movs	r1, #0
  40186c:	4668      	mov	r0, sp
  40186e:	4b2b      	ldr	r3, [pc, #172]	; (40191c <hsmci_start_read_blocks+0xbc>)
  401870:	4798      	blx	r3
 */
static inline void xdmac_channel_disable(Xdmac *xdmac, uint32_t channel_num)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_GD =(XDMAC_GD_DI0 << channel_num);
  401872:	2201      	movs	r2, #1
  401874:	4b2a      	ldr	r3, [pc, #168]	; (401920 <hsmci_start_read_blocks+0xc0>)
  401876:	621a      	str	r2, [r3, #32]
	Assert(nb_block);
	Assert(dest);

	xdmac_channel_disable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);

	nb_data = nb_block * hsmci_block_size;
  401878:	4b2a      	ldr	r3, [pc, #168]	; (401924 <hsmci_start_read_blocks+0xc4>)
  40187a:	881b      	ldrh	r3, [r3, #0]
  40187c:	fb05 f503 	mul.w	r5, r5, r3

	if((uint32_t)dest & 3) {
  401880:	f014 0f03 	tst.w	r4, #3
  401884:	d009      	beq.n	40189a <hsmci_start_read_blocks+0x3a>
		p_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  401886:	4b28      	ldr	r3, [pc, #160]	; (401928 <hsmci_start_read_blocks+0xc8>)
  401888:	9303      	str	r3, [sp, #12]
						| XDMAC_CC_SIF_AHB_IF1
						| XDMAC_CC_DIF_AHB_IF0
						| XDMAC_CC_SAM_FIXED_AM
						| XDMAC_CC_DAM_INCREMENTED_AM
						| XDMAC_CC_PERID(CONF_HSMCI_XDMAC_CHANNEL);
		p_cfg.mbr_ubc = nb_data;
  40188a:	9500      	str	r5, [sp, #0]
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
  40188c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  401890:	6853      	ldr	r3, [r2, #4]
  401892:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  401896:	6053      	str	r3, [r2, #4]
  401898:	e009      	b.n	4018ae <hsmci_start_read_blocks+0x4e>
	} else {
		p_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  40189a:	4b24      	ldr	r3, [pc, #144]	; (40192c <hsmci_start_read_blocks+0xcc>)
  40189c:	9303      	str	r3, [sp, #12]
						| XDMAC_CC_SIF_AHB_IF1
						| XDMAC_CC_DIF_AHB_IF0
						| XDMAC_CC_SAM_FIXED_AM
						| XDMAC_CC_DAM_INCREMENTED_AM
						| XDMAC_CC_PERID(CONF_HSMCI_XDMAC_CHANNEL);
		p_cfg.mbr_ubc = nb_data / 4;
  40189e:	08ab      	lsrs	r3, r5, #2
  4018a0:	9300      	str	r3, [sp, #0]
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
  4018a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4018a6:	6853      	ldr	r3, [r2, #4]
  4018a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  4018ac:	6053      	str	r3, [r2, #4]
	}
	p_cfg.mbr_sa = (uint32_t)&(HSMCI->HSMCI_FIFO[0]);
  4018ae:	4b20      	ldr	r3, [pc, #128]	; (401930 <hsmci_start_read_blocks+0xd0>)
  4018b0:	9301      	str	r3, [sp, #4]
	p_cfg.mbr_da = (uint32_t)dest;
  4018b2:	9402      	str	r4, [sp, #8]
	xdmac_configure_transfer(XDMAC, CONF_HSMCI_XDMAC_CHANNEL, &p_cfg);
  4018b4:	466a      	mov	r2, sp
  4018b6:	2100      	movs	r1, #0
  4018b8:	4819      	ldr	r0, [pc, #100]	; (401920 <hsmci_start_read_blocks+0xc0>)
  4018ba:	4b1e      	ldr	r3, [pc, #120]	; (401934 <hsmci_start_read_blocks+0xd4>)
  4018bc:	4798      	blx	r3
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  4018be:	4b1e      	ldr	r3, [pc, #120]	; (401938 <hsmci_start_read_blocks+0xd8>)
  4018c0:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  4018c4:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  4018c8:	f007 0e07 	and.w	lr, r7, #7
  4018cc:	f10e 0e04 	add.w	lr, lr, #4
    ways    = CCSIDR_WAYS(ccsidr);
  4018d0:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  4018d4:	fab7 f087 	clz	r0, r7
    wshift  = __CLZ(ways) & 0x1f;
  4018d8:	f000 001f 	and.w	r0, r0, #31
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  4018dc:	f3bf 8f4f 	dsb	sy

    do {                                    // clean & invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCCISW = sw;
  4018e0:	461c      	mov	r4, r3
    wshift  = __CLZ(ways) & 0x1f;

    __DSB();

    do {                                    // clean & invalidate D-Cache
         int32_t tmpways = ways;
  4018e2:	463b      	mov	r3, r7
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
  4018e4:	fa06 f10e 	lsl.w	r1, r6, lr
  4018e8:	fa03 f200 	lsl.w	r2, r3, r0
  4018ec:	430a      	orrs	r2, r1
              SCB->DCCISW = sw;
  4018ee:	f8c4 2274 	str.w	r2, [r4, #628]	; 0x274
            } while(tmpways--);
  4018f2:	3b01      	subs	r3, #1
  4018f4:	f1b3 3fff 	cmp.w	r3, #4294967295
  4018f8:	d1f6      	bne.n	4018e8 <hsmci_start_read_blocks+0x88>
        } while(sets--);
  4018fa:	3e01      	subs	r6, #1
  4018fc:	f1b6 3fff 	cmp.w	r6, #4294967295
  401900:	d1ef      	bne.n	4018e2 <hsmci_start_read_blocks+0x82>
  401902:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  401906:	f3bf 8f6f 	isb	sy
	Assert(channel_num < XDMACCHID_NUMBER);
	
	/* Update DCache before DMA transmit */
	SCB_CleanInvalidateDCache();
	
	xdmac->XDMAC_GE = (XDMAC_GE_EN0 << channel_num);
  40190a:	2001      	movs	r0, #1
  40190c:	4b04      	ldr	r3, [pc, #16]	; (401920 <hsmci_start_read_blocks+0xc0>)
  40190e:	61d8      	str	r0, [r3, #28]
	xdmac_channel_enable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
	hsmci_transfert_pos += nb_data;
  401910:	4b0a      	ldr	r3, [pc, #40]	; (40193c <hsmci_start_read_blocks+0xdc>)
  401912:	681a      	ldr	r2, [r3, #0]
  401914:	4415      	add	r5, r2
  401916:	601d      	str	r5, [r3, #0]
	return true;
}
  401918:	b009      	add	sp, #36	; 0x24
  40191a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40191c:	004040b9 	.word	0x004040b9
  401920:	40078000 	.word	0x40078000
  401924:	204008c6 	.word	0x204008c6
  401928:	00042001 	.word	0x00042001
  40192c:	00043001 	.word	0x00043001
  401930:	40000200 	.word	0x40000200
  401934:	00401f61 	.word	0x00401f61
  401938:	e000ed00 	.word	0xe000ed00
  40193c:	204008cc 	.word	0x204008cc

00401940 <hsmci_wait_end_of_read_blocks>:

bool hsmci_wait_end_of_read_blocks(void)
{
  401940:	b570      	push	{r4, r5, r6, lr}
			hsmci_reset();
			// Disable XDMAC
			xdmac_channel_disable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			return false;
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  401942:	4b11      	ldr	r3, [pc, #68]	; (401988 <hsmci_wait_end_of_read_blocks+0x48>)
  401944:	881a      	ldrh	r2, [r3, #0]
  401946:	4b11      	ldr	r3, [pc, #68]	; (40198c <hsmci_wait_end_of_read_blocks+0x4c>)
  401948:	881b      	ldrh	r3, [r3, #0]
  40194a:	fb03 f202 	mul.w	r2, r3, r2
  40194e:	4b10      	ldr	r3, [pc, #64]	; (401990 <hsmci_wait_end_of_read_blocks+0x50>)
  401950:	681c      	ldr	r4, [r3, #0]
	uint32_t sr;
	uint32_t dma_sr;
	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
  401952:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  401956:	490f      	ldr	r1, [pc, #60]	; (401994 <hsmci_wait_end_of_read_blocks+0x54>)
 */
static inline uint32_t xdmac_channel_get_interrupt_status(Xdmac *xdmac, uint32_t channel_num)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  401958:	4e0f      	ldr	r6, [pc, #60]	; (401998 <hsmci_wait_end_of_read_blocks+0x58>)
	uint32_t sr;
	uint32_t dma_sr;
	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
  40195a:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  40195c:	420b      	tst	r3, r1
  40195e:	d006      	beq.n	40196e <hsmci_wait_end_of_read_blocks+0x2e>
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
  401960:	4b0e      	ldr	r3, [pc, #56]	; (40199c <hsmci_wait_end_of_read_blocks+0x5c>)
  401962:	4798      	blx	r3
 */
static inline void xdmac_channel_disable(Xdmac *xdmac, uint32_t channel_num)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_GD =(XDMAC_GD_DI0 << channel_num);
  401964:	2201      	movs	r2, #1
  401966:	4b0c      	ldr	r3, [pc, #48]	; (401998 <hsmci_wait_end_of_read_blocks+0x58>)
  401968:	621a      	str	r2, [r3, #32]
			// Disable XDMAC
			xdmac_channel_disable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			return false;
  40196a:	2000      	movs	r0, #0
  40196c:	bd70      	pop	{r4, r5, r6, pc}
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  40196e:	42a2      	cmp	r2, r4
  401970:	d903      	bls.n	40197a <hsmci_wait_end_of_read_blocks+0x3a>
 */
static inline uint32_t xdmac_channel_get_interrupt_status(Xdmac *xdmac, uint32_t channel_num)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  401972:	6df5      	ldr	r5, [r6, #92]	; 0x5c
			// It is not the end of all transfers
			// then just wait end of DMA
			dma_sr = xdmac_channel_get_interrupt_status(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			if (dma_sr & XDMAC_CIS_BIS) {
  401974:	f015 0f01 	tst.w	r5, #1
  401978:	d104      	bne.n	401984 <hsmci_wait_end_of_read_blocks+0x44>
				return true;
			}
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
  40197a:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
  40197e:	d0ec      	beq.n	40195a <hsmci_wait_end_of_read_blocks+0x1a>
	return true;
  401980:	2001      	movs	r0, #1
  401982:	bd70      	pop	{r4, r5, r6, pc}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
			// It is not the end of all transfers
			// then just wait end of DMA
			dma_sr = xdmac_channel_get_interrupt_status(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			if (dma_sr & XDMAC_CIS_BIS) {
				return true;
  401984:	2001      	movs	r0, #1
			}
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
	return true;
}
  401986:	bd70      	pop	{r4, r5, r6, pc}
  401988:	204008c6 	.word	0x204008c6
  40198c:	204008c8 	.word	0x204008c8
  401990:	204008cc 	.word	0x204008cc
  401994:	c0600000 	.word	0xc0600000
  401998:	40078000 	.word	0x40078000
  40199c:	004014f5 	.word	0x004014f5

004019a0 <hsmci_start_write_blocks>:

bool hsmci_start_write_blocks(const void *src, uint16_t nb_block)
{
  4019a0:	b5f0      	push	{r4, r5, r6, r7, lr}
  4019a2:	b089      	sub	sp, #36	; 0x24
  4019a4:	4604      	mov	r4, r0
  4019a6:	460d      	mov	r5, r1
	xdmac_channel_config_t p_cfg = {0, 0, 0, 0, 0, 0, 0, 0};
  4019a8:	2220      	movs	r2, #32
  4019aa:	2100      	movs	r1, #0
  4019ac:	4668      	mov	r0, sp
  4019ae:	4b2b      	ldr	r3, [pc, #172]	; (401a5c <hsmci_start_write_blocks+0xbc>)
  4019b0:	4798      	blx	r3
 */
static inline void xdmac_channel_disable(Xdmac *xdmac, uint32_t channel_num)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_GD =(XDMAC_GD_DI0 << channel_num);
  4019b2:	2201      	movs	r2, #1
  4019b4:	4b2a      	ldr	r3, [pc, #168]	; (401a60 <hsmci_start_write_blocks+0xc0>)
  4019b6:	621a      	str	r2, [r3, #32]
	Assert(nb_block);
	Assert(dest);

	xdmac_channel_disable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);

	nb_data = nb_block * hsmci_block_size;
  4019b8:	4b2a      	ldr	r3, [pc, #168]	; (401a64 <hsmci_start_write_blocks+0xc4>)
  4019ba:	881b      	ldrh	r3, [r3, #0]
  4019bc:	fb05 f503 	mul.w	r5, r5, r3

	if((uint32_t)src & 3) {
  4019c0:	f014 0f03 	tst.w	r4, #3
  4019c4:	d009      	beq.n	4019da <hsmci_start_write_blocks+0x3a>
		p_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  4019c6:	4b28      	ldr	r3, [pc, #160]	; (401a68 <hsmci_start_write_blocks+0xc8>)
  4019c8:	9303      	str	r3, [sp, #12]
						| XDMAC_CC_SIF_AHB_IF0
						| XDMAC_CC_DIF_AHB_IF1
						| XDMAC_CC_SAM_INCREMENTED_AM
						| XDMAC_CC_DAM_FIXED_AM
						| XDMAC_CC_PERID(CONF_HSMCI_XDMAC_CHANNEL);
		p_cfg.mbr_ubc = nb_data;
  4019ca:	9500      	str	r5, [sp, #0]
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
  4019cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4019d0:	6853      	ldr	r3, [r2, #4]
  4019d2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4019d6:	6053      	str	r3, [r2, #4]
  4019d8:	e009      	b.n	4019ee <hsmci_start_write_blocks+0x4e>
	} else {
		p_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  4019da:	4b24      	ldr	r3, [pc, #144]	; (401a6c <hsmci_start_write_blocks+0xcc>)
  4019dc:	9303      	str	r3, [sp, #12]
						| XDMAC_CC_SIF_AHB_IF0
						| XDMAC_CC_DIF_AHB_IF1
						| XDMAC_CC_SAM_INCREMENTED_AM
						| XDMAC_CC_DAM_FIXED_AM
						| XDMAC_CC_PERID(CONF_HSMCI_XDMAC_CHANNEL);
		p_cfg.mbr_ubc = nb_data / 4;
  4019de:	08ab      	lsrs	r3, r5, #2
  4019e0:	9300      	str	r3, [sp, #0]
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
  4019e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4019e6:	6853      	ldr	r3, [r2, #4]
  4019e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  4019ec:	6053      	str	r3, [r2, #4]
	}
	p_cfg.mbr_sa = (uint32_t)src;
  4019ee:	9401      	str	r4, [sp, #4]
	p_cfg.mbr_da = (uint32_t)&(HSMCI->HSMCI_FIFO[0]);
  4019f0:	4b1f      	ldr	r3, [pc, #124]	; (401a70 <hsmci_start_write_blocks+0xd0>)
  4019f2:	9302      	str	r3, [sp, #8]
	xdmac_configure_transfer(XDMAC, CONF_HSMCI_XDMAC_CHANNEL, &p_cfg);
  4019f4:	466a      	mov	r2, sp
  4019f6:	2100      	movs	r1, #0
  4019f8:	4819      	ldr	r0, [pc, #100]	; (401a60 <hsmci_start_write_blocks+0xc0>)
  4019fa:	4b1e      	ldr	r3, [pc, #120]	; (401a74 <hsmci_start_write_blocks+0xd4>)
  4019fc:	4798      	blx	r3
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  4019fe:	4b1e      	ldr	r3, [pc, #120]	; (401a78 <hsmci_start_write_blocks+0xd8>)
  401a00:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  401a04:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  401a08:	f007 0e07 	and.w	lr, r7, #7
  401a0c:	f10e 0e04 	add.w	lr, lr, #4
    ways    = CCSIDR_WAYS(ccsidr);
  401a10:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  401a14:	fab7 f087 	clz	r0, r7
    wshift  = __CLZ(ways) & 0x1f;
  401a18:	f000 001f 	and.w	r0, r0, #31
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  401a1c:	f3bf 8f4f 	dsb	sy

    do {                                    // clean & invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCCISW = sw;
  401a20:	461c      	mov	r4, r3
    wshift  = __CLZ(ways) & 0x1f;

    __DSB();

    do {                                    // clean & invalidate D-Cache
         int32_t tmpways = ways;
  401a22:	463b      	mov	r3, r7
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
  401a24:	fa06 f10e 	lsl.w	r1, r6, lr
  401a28:	fa03 f200 	lsl.w	r2, r3, r0
  401a2c:	430a      	orrs	r2, r1
              SCB->DCCISW = sw;
  401a2e:	f8c4 2274 	str.w	r2, [r4, #628]	; 0x274
            } while(tmpways--);
  401a32:	3b01      	subs	r3, #1
  401a34:	f1b3 3fff 	cmp.w	r3, #4294967295
  401a38:	d1f6      	bne.n	401a28 <hsmci_start_write_blocks+0x88>
        } while(sets--);
  401a3a:	3e01      	subs	r6, #1
  401a3c:	f1b6 3fff 	cmp.w	r6, #4294967295
  401a40:	d1ef      	bne.n	401a22 <hsmci_start_write_blocks+0x82>
  401a42:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  401a46:	f3bf 8f6f 	isb	sy
	Assert(channel_num < XDMACCHID_NUMBER);
	
	/* Update DCache before DMA transmit */
	SCB_CleanInvalidateDCache();
	
	xdmac->XDMAC_GE = (XDMAC_GE_EN0 << channel_num);
  401a4a:	2001      	movs	r0, #1
  401a4c:	4b04      	ldr	r3, [pc, #16]	; (401a60 <hsmci_start_write_blocks+0xc0>)
  401a4e:	61d8      	str	r0, [r3, #28]
	xdmac_channel_enable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
	hsmci_transfert_pos += nb_data;
  401a50:	4b0a      	ldr	r3, [pc, #40]	; (401a7c <hsmci_start_write_blocks+0xdc>)
  401a52:	681a      	ldr	r2, [r3, #0]
  401a54:	4415      	add	r5, r2
  401a56:	601d      	str	r5, [r3, #0]
	return true;
}
  401a58:	b009      	add	sp, #36	; 0x24
  401a5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401a5c:	004040b9 	.word	0x004040b9
  401a60:	40078000 	.word	0x40078000
  401a64:	204008c6 	.word	0x204008c6
  401a68:	00014011 	.word	0x00014011
  401a6c:	00015011 	.word	0x00015011
  401a70:	40000200 	.word	0x40000200
  401a74:	00401f61 	.word	0x00401f61
  401a78:	e000ed00 	.word	0xe000ed00
  401a7c:	204008cc 	.word	0x204008cc

00401a80 <hsmci_wait_end_of_write_blocks>:

bool hsmci_wait_end_of_write_blocks(void)
{
  401a80:	b570      	push	{r4, r5, r6, lr}
			hsmci_reset();
			// Disable XDMAC
			xdmac_channel_disable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			return false;
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  401a82:	4b11      	ldr	r3, [pc, #68]	; (401ac8 <hsmci_wait_end_of_write_blocks+0x48>)
  401a84:	881a      	ldrh	r2, [r3, #0]
  401a86:	4b11      	ldr	r3, [pc, #68]	; (401acc <hsmci_wait_end_of_write_blocks+0x4c>)
  401a88:	881b      	ldrh	r3, [r3, #0]
  401a8a:	fb03 f202 	mul.w	r2, r3, r2
  401a8e:	4b10      	ldr	r3, [pc, #64]	; (401ad0 <hsmci_wait_end_of_write_blocks+0x50>)
  401a90:	681c      	ldr	r4, [r3, #0]
	uint32_t sr;
	uint32_t dma_sr;
	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
  401a92:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  401a96:	490f      	ldr	r1, [pc, #60]	; (401ad4 <hsmci_wait_end_of_write_blocks+0x54>)
 */
static inline uint32_t xdmac_channel_get_interrupt_status(Xdmac *xdmac, uint32_t channel_num)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  401a98:	4e0f      	ldr	r6, [pc, #60]	; (401ad8 <hsmci_wait_end_of_write_blocks+0x58>)
	uint32_t sr;
	uint32_t dma_sr;
	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
  401a9a:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  401a9c:	420b      	tst	r3, r1
  401a9e:	d006      	beq.n	401aae <hsmci_wait_end_of_write_blocks+0x2e>
		HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
			__func__, sr);
			hsmci_reset();
  401aa0:	4b0e      	ldr	r3, [pc, #56]	; (401adc <hsmci_wait_end_of_write_blocks+0x5c>)
  401aa2:	4798      	blx	r3
 */
static inline void xdmac_channel_disable(Xdmac *xdmac, uint32_t channel_num)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_GD =(XDMAC_GD_DI0 << channel_num);
  401aa4:	2201      	movs	r2, #1
  401aa6:	4b0c      	ldr	r3, [pc, #48]	; (401ad8 <hsmci_wait_end_of_write_blocks+0x58>)
  401aa8:	621a      	str	r2, [r3, #32]
			// Disable XDMAC
			xdmac_channel_disable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			return false;
  401aaa:	2000      	movs	r0, #0
  401aac:	bd70      	pop	{r4, r5, r6, pc}
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  401aae:	42a2      	cmp	r2, r4
  401ab0:	d903      	bls.n	401aba <hsmci_wait_end_of_write_blocks+0x3a>
 */
static inline uint32_t xdmac_channel_get_interrupt_status(Xdmac *xdmac, uint32_t channel_num)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  401ab2:	6df5      	ldr	r5, [r6, #92]	; 0x5c
			// It is not the end of all transfers
			// then just wait end of DMA
			dma_sr = xdmac_channel_get_interrupt_status(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			if (dma_sr & XDMAC_CIS_BIS) {
  401ab4:	f015 0f01 	tst.w	r5, #1
  401ab8:	d104      	bne.n	401ac4 <hsmci_wait_end_of_write_blocks+0x44>
				return true;
			}
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
  401aba:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
  401abe:	d0ec      	beq.n	401a9a <hsmci_wait_end_of_write_blocks+0x1a>

	return true;
  401ac0:	2001      	movs	r0, #1
  401ac2:	bd70      	pop	{r4, r5, r6, pc}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
			// It is not the end of all transfers
			// then just wait end of DMA
			dma_sr = xdmac_channel_get_interrupt_status(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			if (dma_sr & XDMAC_CIS_BIS) {
				return true;
  401ac4:	2001      	movs	r0, #1
			}
		}
	} while (!(sr & HSMCI_SR_XFRDONE));

	return true;
}
  401ac6:	bd70      	pop	{r4, r5, r6, pc}
  401ac8:	204008c6 	.word	0x204008c6
  401acc:	204008c8 	.word	0x204008c8
  401ad0:	204008cc 	.word	0x204008cc
  401ad4:	c0600000 	.word	0xc0600000
  401ad8:	40078000 	.word	0x40078000
  401adc:	004014f5 	.word	0x004014f5

00401ae0 <mpu_enable>:
 *
 * \param dwMPUEnable  Enable/Disable the memory region.
 */
void mpu_enable(uint32_t dw_mpu_enable)
{
	MPU->CTRL = dw_mpu_enable ;
  401ae0:	4b01      	ldr	r3, [pc, #4]	; (401ae8 <mpu_enable+0x8>)
  401ae2:	6058      	str	r0, [r3, #4]
  401ae4:	4770      	bx	lr
  401ae6:	bf00      	nop
  401ae8:	e000ed90 	.word	0xe000ed90

00401aec <mpu_set_region>:
 * \param dwRegionBaseAddr  Memory region base address.
 * \param dwRegionAttr  Memory region attributes.
 */
void mpu_set_region(uint32_t dw_region_base_addr, uint32_t dw_region_attr)
{
	MPU->RBAR = dw_region_base_addr;
  401aec:	4b01      	ldr	r3, [pc, #4]	; (401af4 <mpu_set_region+0x8>)
  401aee:	60d8      	str	r0, [r3, #12]
	MPU->RASR = dw_region_attr;
  401af0:	6119      	str	r1, [r3, #16]
  401af2:	4770      	bx	lr
  401af4:	e000ed90 	.word	0xe000ed90

00401af8 <mpu_cal_mpu_region_size>:
{
	uint32_t dwRegionSize = 32;
	uint32_t dwReturnValue = 4;

	while( dwReturnValue < 31 ) {
		if( dw_actual_size_in_bytes <= dwRegionSize ) {
  401af8:	2820      	cmp	r0, #32
  401afa:	d908      	bls.n	401b0e <mpu_cal_mpu_region_size+0x16>
  401afc:	2304      	movs	r3, #4
  401afe:	2220      	movs	r2, #32
			break;
		} else {
			dwReturnValue++;
  401b00:	3301      	adds	r3, #1
		}
		dwRegionSize <<= 1;
  401b02:	0052      	lsls	r2, r2, #1
{
	uint32_t dwRegionSize = 32;
	uint32_t dwReturnValue = 4;

	while( dwReturnValue < 31 ) {
		if( dw_actual_size_in_bytes <= dwRegionSize ) {
  401b04:	4290      	cmp	r0, r2
  401b06:	d903      	bls.n	401b10 <mpu_cal_mpu_region_size+0x18>
  401b08:	2b1e      	cmp	r3, #30
  401b0a:	d9f9      	bls.n	401b00 <mpu_cal_mpu_region_size+0x8>
  401b0c:	e000      	b.n	401b10 <mpu_cal_mpu_region_size+0x18>
 * \brief Calculate region size for the RASR.
 */
uint32_t mpu_cal_mpu_region_size(uint32_t dw_actual_size_in_bytes)
{
	uint32_t dwRegionSize = 32;
	uint32_t dwReturnValue = 4;
  401b0e:	2304      	movs	r3, #4
		}
		dwRegionSize <<= 1;
	}

	return ( dwReturnValue << 1 );
}
  401b10:	0058      	lsls	r0, r3, #1
  401b12:	4770      	bx	lr

00401b14 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  401b14:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  401b16:	4770      	bx	lr

00401b18 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  401b18:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  401b1a:	4770      	bx	lr

00401b1c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  401b1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401b20:	4604      	mov	r4, r0
  401b22:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  401b24:	4b0e      	ldr	r3, [pc, #56]	; (401b60 <pio_handler_process+0x44>)
  401b26:	4798      	blx	r3
  401b28:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  401b2a:	4620      	mov	r0, r4
  401b2c:	4b0d      	ldr	r3, [pc, #52]	; (401b64 <pio_handler_process+0x48>)
  401b2e:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  401b30:	4005      	ands	r5, r0
  401b32:	d013      	beq.n	401b5c <pio_handler_process+0x40>
  401b34:	4c0c      	ldr	r4, [pc, #48]	; (401b68 <pio_handler_process+0x4c>)
  401b36:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  401b3a:	6823      	ldr	r3, [r4, #0]
  401b3c:	4543      	cmp	r3, r8
  401b3e:	d108      	bne.n	401b52 <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401b40:	6861      	ldr	r1, [r4, #4]
  401b42:	4229      	tst	r1, r5
  401b44:	d005      	beq.n	401b52 <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401b46:	68e3      	ldr	r3, [r4, #12]
  401b48:	4640      	mov	r0, r8
  401b4a:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  401b4c:	6863      	ldr	r3, [r4, #4]
  401b4e:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  401b52:	42b4      	cmp	r4, r6
  401b54:	d002      	beq.n	401b5c <pio_handler_process+0x40>
  401b56:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  401b58:	2d00      	cmp	r5, #0
  401b5a:	d1ee      	bne.n	401b3a <pio_handler_process+0x1e>
  401b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401b60:	00401b15 	.word	0x00401b15
  401b64:	00401b19 	.word	0x00401b19
  401b68:	204008d0 	.word	0x204008d0

00401b6c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  401b6c:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  401b6e:	210a      	movs	r1, #10
  401b70:	4801      	ldr	r0, [pc, #4]	; (401b78 <PIOA_Handler+0xc>)
  401b72:	4b02      	ldr	r3, [pc, #8]	; (401b7c <PIOA_Handler+0x10>)
  401b74:	4798      	blx	r3
  401b76:	bd08      	pop	{r3, pc}
  401b78:	400e0e00 	.word	0x400e0e00
  401b7c:	00401b1d 	.word	0x00401b1d

00401b80 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  401b80:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  401b82:	210b      	movs	r1, #11
  401b84:	4801      	ldr	r0, [pc, #4]	; (401b8c <PIOB_Handler+0xc>)
  401b86:	4b02      	ldr	r3, [pc, #8]	; (401b90 <PIOB_Handler+0x10>)
  401b88:	4798      	blx	r3
  401b8a:	bd08      	pop	{r3, pc}
  401b8c:	400e1000 	.word	0x400e1000
  401b90:	00401b1d 	.word	0x00401b1d

00401b94 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  401b94:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  401b96:	210c      	movs	r1, #12
  401b98:	4801      	ldr	r0, [pc, #4]	; (401ba0 <PIOC_Handler+0xc>)
  401b9a:	4b02      	ldr	r3, [pc, #8]	; (401ba4 <PIOC_Handler+0x10>)
  401b9c:	4798      	blx	r3
  401b9e:	bd08      	pop	{r3, pc}
  401ba0:	400e1200 	.word	0x400e1200
  401ba4:	00401b1d 	.word	0x00401b1d

00401ba8 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  401ba8:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  401baa:	2110      	movs	r1, #16
  401bac:	4801      	ldr	r0, [pc, #4]	; (401bb4 <PIOD_Handler+0xc>)
  401bae:	4b02      	ldr	r3, [pc, #8]	; (401bb8 <PIOD_Handler+0x10>)
  401bb0:	4798      	blx	r3
  401bb2:	bd08      	pop	{r3, pc}
  401bb4:	400e1400 	.word	0x400e1400
  401bb8:	00401b1d 	.word	0x00401b1d

00401bbc <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  401bbc:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  401bbe:	2111      	movs	r1, #17
  401bc0:	4801      	ldr	r0, [pc, #4]	; (401bc8 <PIOE_Handler+0xc>)
  401bc2:	4b02      	ldr	r3, [pc, #8]	; (401bcc <PIOE_Handler+0x10>)
  401bc4:	4798      	blx	r3
  401bc6:	bd08      	pop	{r3, pc}
  401bc8:	400e1600 	.word	0x400e1600
  401bcc:	00401b1d 	.word	0x00401b1d

00401bd0 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  401bd0:	2803      	cmp	r0, #3
  401bd2:	d007      	beq.n	401be4 <pmc_mck_set_division+0x14>
  401bd4:	2804      	cmp	r0, #4
  401bd6:	d008      	beq.n	401bea <pmc_mck_set_division+0x1a>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  401bd8:	2802      	cmp	r0, #2
  401bda:	bf0c      	ite	eq
  401bdc:	f44f 7280 	moveq.w	r2, #256	; 0x100
  401be0:	2200      	movne	r2, #0
  401be2:	e004      	b.n	401bee <pmc_mck_set_division+0x1e>
			break;
		case 2:
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
			break;
		case 3:
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  401be4:	f44f 7240 	mov.w	r2, #768	; 0x300
			break;
  401be8:	e001      	b.n	401bee <pmc_mck_set_division+0x1e>
		case 4:
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  401bea:	f44f 7200 	mov.w	r2, #512	; 0x200
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  401bee:	4906      	ldr	r1, [pc, #24]	; (401c08 <pmc_mck_set_division+0x38>)
  401bf0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  401bf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  401bf6:	4313      	orrs	r3, r2
			break;
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
  401bf8:	630b      	str	r3, [r1, #48]	; 0x30
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  401bfa:	460a      	mov	r2, r1
  401bfc:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401bfe:	f013 0f08 	tst.w	r3, #8
  401c02:	d0fb      	beq.n	401bfc <pmc_mck_set_division+0x2c>
}
  401c04:	4770      	bx	lr
  401c06:	bf00      	nop
  401c08:	400e0600 	.word	0x400e0600

00401c0c <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  401c0c:	4a18      	ldr	r2, [pc, #96]	; (401c70 <pmc_switch_mck_to_pllack+0x64>)
  401c0e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401c10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  401c14:	4318      	orrs	r0, r3
  401c16:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401c18:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401c1a:	f013 0f08 	tst.w	r3, #8
  401c1e:	d003      	beq.n	401c28 <pmc_switch_mck_to_pllack+0x1c>
  401c20:	e009      	b.n	401c36 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401c22:	3b01      	subs	r3, #1
  401c24:	d103      	bne.n	401c2e <pmc_switch_mck_to_pllack+0x22>
  401c26:	e01e      	b.n	401c66 <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401c28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401c2c:	4910      	ldr	r1, [pc, #64]	; (401c70 <pmc_switch_mck_to_pllack+0x64>)
  401c2e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401c30:	f012 0f08 	tst.w	r2, #8
  401c34:	d0f5      	beq.n	401c22 <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  401c36:	4a0e      	ldr	r2, [pc, #56]	; (401c70 <pmc_switch_mck_to_pllack+0x64>)
  401c38:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401c3a:	f023 0303 	bic.w	r3, r3, #3
  401c3e:	f043 0302 	orr.w	r3, r3, #2
  401c42:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401c44:	6e90      	ldr	r0, [r2, #104]	; 0x68
  401c46:	f010 0008 	ands.w	r0, r0, #8
  401c4a:	d004      	beq.n	401c56 <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  401c4c:	2000      	movs	r0, #0
  401c4e:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  401c50:	3b01      	subs	r3, #1
  401c52:	d103      	bne.n	401c5c <pmc_switch_mck_to_pllack+0x50>
  401c54:	e009      	b.n	401c6a <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401c56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401c5a:	4905      	ldr	r1, [pc, #20]	; (401c70 <pmc_switch_mck_to_pllack+0x64>)
  401c5c:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401c5e:	f012 0f08 	tst.w	r2, #8
  401c62:	d0f5      	beq.n	401c50 <pmc_switch_mck_to_pllack+0x44>
  401c64:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  401c66:	2001      	movs	r0, #1
  401c68:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  401c6a:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  401c6c:	4770      	bx	lr
  401c6e:	bf00      	nop
  401c70:	400e0600 	.word	0x400e0600

00401c74 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  401c74:	b138      	cbz	r0, 401c86 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401c76:	490e      	ldr	r1, [pc, #56]	; (401cb0 <pmc_switch_mainck_to_xtal+0x3c>)
  401c78:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  401c7a:	4a0e      	ldr	r2, [pc, #56]	; (401cb4 <pmc_switch_mainck_to_xtal+0x40>)
  401c7c:	401a      	ands	r2, r3
  401c7e:	4b0e      	ldr	r3, [pc, #56]	; (401cb8 <pmc_switch_mainck_to_xtal+0x44>)
  401c80:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401c82:	620b      	str	r3, [r1, #32]
  401c84:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401c86:	480a      	ldr	r0, [pc, #40]	; (401cb0 <pmc_switch_mainck_to_xtal+0x3c>)
  401c88:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401c8a:	0209      	lsls	r1, r1, #8
  401c8c:	b289      	uxth	r1, r1
  401c8e:	4a0b      	ldr	r2, [pc, #44]	; (401cbc <pmc_switch_mainck_to_xtal+0x48>)
  401c90:	401a      	ands	r2, r3
  401c92:	4b0b      	ldr	r3, [pc, #44]	; (401cc0 <pmc_switch_mainck_to_xtal+0x4c>)
  401c94:	4313      	orrs	r3, r2
  401c96:	4319      	orrs	r1, r3
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401c98:	6201      	str	r1, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  401c9a:	4602      	mov	r2, r0
  401c9c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401c9e:	f013 0f01 	tst.w	r3, #1
  401ca2:	d0fb      	beq.n	401c9c <pmc_switch_mainck_to_xtal+0x28>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  401ca4:	4a02      	ldr	r2, [pc, #8]	; (401cb0 <pmc_switch_mainck_to_xtal+0x3c>)
  401ca6:	6a11      	ldr	r1, [r2, #32]
  401ca8:	4b06      	ldr	r3, [pc, #24]	; (401cc4 <pmc_switch_mainck_to_xtal+0x50>)
  401caa:	430b      	orrs	r3, r1
  401cac:	6213      	str	r3, [r2, #32]
  401cae:	4770      	bx	lr
  401cb0:	400e0600 	.word	0x400e0600
  401cb4:	fec8fffc 	.word	0xfec8fffc
  401cb8:	01370002 	.word	0x01370002
  401cbc:	ffc8fffc 	.word	0xffc8fffc
  401cc0:	00370001 	.word	0x00370001
  401cc4:	01370000 	.word	0x01370000

00401cc8 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401cc8:	4b02      	ldr	r3, [pc, #8]	; (401cd4 <pmc_osc_is_ready_mainck+0xc>)
  401cca:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401ccc:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  401cd0:	4770      	bx	lr
  401cd2:	bf00      	nop
  401cd4:	400e0600 	.word	0x400e0600

00401cd8 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  401cd8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401cdc:	4b01      	ldr	r3, [pc, #4]	; (401ce4 <pmc_disable_pllack+0xc>)
  401cde:	629a      	str	r2, [r3, #40]	; 0x28
  401ce0:	4770      	bx	lr
  401ce2:	bf00      	nop
  401ce4:	400e0600 	.word	0x400e0600

00401ce8 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  401ce8:	4b02      	ldr	r3, [pc, #8]	; (401cf4 <pmc_is_locked_pllack+0xc>)
  401cea:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401cec:	f000 0002 	and.w	r0, r0, #2
  401cf0:	4770      	bx	lr
  401cf2:	bf00      	nop
  401cf4:	400e0600 	.word	0x400e0600

00401cf8 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  401cf8:	283f      	cmp	r0, #63	; 0x3f
  401cfa:	d81e      	bhi.n	401d3a <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  401cfc:	281f      	cmp	r0, #31
  401cfe:	d80c      	bhi.n	401d1a <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  401d00:	4b11      	ldr	r3, [pc, #68]	; (401d48 <pmc_enable_periph_clk+0x50>)
  401d02:	699a      	ldr	r2, [r3, #24]
  401d04:	2301      	movs	r3, #1
  401d06:	4083      	lsls	r3, r0
  401d08:	4393      	bics	r3, r2
  401d0a:	d018      	beq.n	401d3e <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  401d0c:	2301      	movs	r3, #1
  401d0e:	fa03 f000 	lsl.w	r0, r3, r0
  401d12:	4b0d      	ldr	r3, [pc, #52]	; (401d48 <pmc_enable_periph_clk+0x50>)
  401d14:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  401d16:	2000      	movs	r0, #0
  401d18:	4770      	bx	lr
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  401d1a:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  401d1c:	4b0a      	ldr	r3, [pc, #40]	; (401d48 <pmc_enable_periph_clk+0x50>)
  401d1e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  401d22:	2301      	movs	r3, #1
  401d24:	4083      	lsls	r3, r0
  401d26:	4393      	bics	r3, r2
  401d28:	d00b      	beq.n	401d42 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  401d2a:	2301      	movs	r3, #1
  401d2c:	fa03 f000 	lsl.w	r0, r3, r0
  401d30:	4b05      	ldr	r3, [pc, #20]	; (401d48 <pmc_enable_periph_clk+0x50>)
  401d32:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
  401d36:	2000      	movs	r0, #0
  401d38:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  401d3a:	2001      	movs	r0, #1
  401d3c:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  401d3e:	2000      	movs	r0, #0
  401d40:	4770      	bx	lr
  401d42:	2000      	movs	r0, #0
}
  401d44:	4770      	bx	lr
  401d46:	bf00      	nop
  401d48:	400e0600 	.word	0x400e0600

00401d4c <rtc_get_time>:
 * \param pul_minute Current minute.
 * \param pul_second Current second.
 */
void rtc_get_time(Rtc *p_rtc, uint32_t *pul_hour, uint32_t *pul_minute,
		uint32_t *pul_second)
{
  401d4c:	b430      	push	{r4, r5}
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
  401d4e:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  401d50:	6884      	ldr	r4, [r0, #8]
  401d52:	42a5      	cmp	r5, r4
  401d54:	d003      	beq.n	401d5e <rtc_get_time+0x12>
		ul_time = p_rtc->RTC_TIMR;
  401d56:	6884      	ldr	r4, [r0, #8]
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
	while (ul_time != p_rtc->RTC_TIMR) {
  401d58:	6885      	ldr	r5, [r0, #8]
  401d5a:	42a5      	cmp	r5, r4
  401d5c:	d1fb      	bne.n	401d56 <rtc_get_time+0xa>
		ul_time = p_rtc->RTC_TIMR;
	}

	/* Hour */
	if (pul_hour) {
  401d5e:	b161      	cbz	r1, 401d7a <rtc_get_time+0x2e>
		ul_temp = (ul_time & RTC_TIMR_HOUR_Msk) >> RTC_TIMR_HOUR_Pos;
		*pul_hour = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  401d60:	f3c4 5001 	ubfx	r0, r4, #20, #2
  401d64:	eb00 0580 	add.w	r5, r0, r0, lsl #2
  401d68:	f3c4 4003 	ubfx	r0, r4, #16, #4
  401d6c:	eb00 0045 	add.w	r0, r0, r5, lsl #1

		if ((ul_time & RTC_TIMR_AMPM) == RTC_TIMR_AMPM) {
  401d70:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
			*pul_hour += 12;
  401d74:	bf18      	it	ne
  401d76:	300c      	addne	r0, #12
  401d78:	6008      	str	r0, [r1, #0]
		}
	}

	/* Minute */
	if (pul_minute) {
  401d7a:	b142      	cbz	r2, 401d8e <rtc_get_time+0x42>
		ul_temp = (ul_time & RTC_TIMR_MIN_Msk) >> RTC_TIMR_MIN_Pos;
		*pul_minute = (ul_temp >> BCD_SHIFT) * BCD_FACTOR +  (ul_temp & BCD_MASK);
  401d7c:	f3c4 3102 	ubfx	r1, r4, #12, #3
  401d80:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  401d84:	f3c4 2003 	ubfx	r0, r4, #8, #4
  401d88:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  401d8c:	6011      	str	r1, [r2, #0]
	}

	/* Second */
	if (pul_second) {
  401d8e:	b143      	cbz	r3, 401da2 <rtc_get_time+0x56>
		ul_temp = (ul_time & RTC_TIMR_SEC_Msk) >> RTC_TIMR_SEC_Pos;
		*pul_second = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  401d90:	f3c4 1202 	ubfx	r2, r4, #4, #3
  401d94:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  401d98:	f004 040f 	and.w	r4, r4, #15
  401d9c:	eb04 0442 	add.w	r4, r4, r2, lsl #1
  401da0:	601c      	str	r4, [r3, #0]
	}
}
  401da2:	bc30      	pop	{r4, r5}
  401da4:	4770      	bx	lr
  401da6:	bf00      	nop

00401da8 <rtc_get_date>:
 * \param pul_day Current day.
 * \param pul_week Current day in current week.
 */
void rtc_get_date(Rtc *p_rtc, uint32_t *pul_year, uint32_t *pul_month,
		uint32_t *pul_day, uint32_t *pul_week)
{
  401da8:	b4f0      	push	{r4, r5, r6, r7}
  401daa:	9e04      	ldr	r6, [sp, #16]
	uint32_t ul_date;
	uint32_t ul_cent;
	uint32_t ul_temp;

	/* Get the current date (multiple reads are necessary to insure a stable value). */
	ul_date = p_rtc->RTC_CALR;
  401dac:	68c5      	ldr	r5, [r0, #12]
	while (ul_date != p_rtc->RTC_CALR) {
  401dae:	68c4      	ldr	r4, [r0, #12]
  401db0:	42a5      	cmp	r5, r4
  401db2:	d003      	beq.n	401dbc <rtc_get_date+0x14>
		ul_date = p_rtc->RTC_CALR;
  401db4:	68c4      	ldr	r4, [r0, #12]
	uint32_t ul_cent;
	uint32_t ul_temp;

	/* Get the current date (multiple reads are necessary to insure a stable value). */
	ul_date = p_rtc->RTC_CALR;
	while (ul_date != p_rtc->RTC_CALR) {
  401db6:	68c5      	ldr	r5, [r0, #12]
  401db8:	42a5      	cmp	r5, r4
  401dba:	d1fb      	bne.n	401db4 <rtc_get_date+0xc>
		ul_date = p_rtc->RTC_CALR;
	}

	/* Retrieve year */
	if (pul_year) {
  401dbc:	b199      	cbz	r1, 401de6 <rtc_get_date+0x3e>
		ul_temp = (ul_date & RTC_CALR_CENT_Msk) >> RTC_CALR_CENT_Pos;
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
		ul_temp = (ul_date & RTC_CALR_YEAR_Msk) >> RTC_CALR_YEAR_Pos;
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
  401dbe:	f3c4 1002 	ubfx	r0, r4, #4, #3
  401dc2:	eb00 0580 	add.w	r5, r0, r0, lsl #2
  401dc6:	f004 000f 	and.w	r0, r4, #15
  401dca:	eb00 0545 	add.w	r5, r0, r5, lsl #1
  401dce:	f3c4 3003 	ubfx	r0, r4, #12, #4
  401dd2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401dd6:	f3c4 2703 	ubfx	r7, r4, #8, #4
  401dda:	eb07 0040 	add.w	r0, r7, r0, lsl #1
  401dde:	2764      	movs	r7, #100	; 0x64
  401de0:	fb07 0005 	mla	r0, r7, r5, r0
  401de4:	6008      	str	r0, [r1, #0]
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
	}

	/* Retrieve month */
	if (pul_month) {
  401de6:	b142      	cbz	r2, 401dfa <rtc_get_date+0x52>
		ul_temp = (ul_date & RTC_CALR_MONTH_Msk) >> RTC_CALR_MONTH_Pos;
		*pul_month = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  401de8:	f3c4 5100 	ubfx	r1, r4, #20, #1
  401dec:	0088      	lsls	r0, r1, #2
  401dee:	4401      	add	r1, r0
  401df0:	f3c4 4003 	ubfx	r0, r4, #16, #4
  401df4:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  401df8:	6011      	str	r1, [r2, #0]
	}

	/* Retrieve day */
	if (pul_day) {
  401dfa:	b143      	cbz	r3, 401e0e <rtc_get_date+0x66>
		ul_temp = (ul_date & RTC_CALR_DATE_Msk) >> RTC_CALR_DATE_Pos;
		*pul_day = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  401dfc:	f3c4 7201 	ubfx	r2, r4, #28, #2
  401e00:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  401e04:	f3c4 6103 	ubfx	r1, r4, #24, #4
  401e08:	eb01 0242 	add.w	r2, r1, r2, lsl #1
  401e0c:	601a      	str	r2, [r3, #0]
	}

	/* Retrieve week */
	if (pul_week) {
  401e0e:	b116      	cbz	r6, 401e16 <rtc_get_date+0x6e>
		*pul_week = ((ul_date & RTC_CALR_DAY_Msk) >> RTC_CALR_DAY_Pos);
  401e10:	f3c4 5442 	ubfx	r4, r4, #21, #3
  401e14:	6034      	str	r4, [r6, #0]
	}
}
  401e16:	bcf0      	pop	{r4, r5, r6, r7}
  401e18:	4770      	bx	lr
  401e1a:	bf00      	nop

00401e1c <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  401e1c:	6943      	ldr	r3, [r0, #20]
  401e1e:	f013 0f02 	tst.w	r3, #2
  401e22:	d002      	beq.n	401e2a <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  401e24:	61c1      	str	r1, [r0, #28]
	return 0;
  401e26:	2000      	movs	r0, #0
  401e28:	4770      	bx	lr
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
  401e2a:	2001      	movs	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
  401e2c:	4770      	bx	lr
  401e2e:	bf00      	nop

00401e30 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  401e30:	6943      	ldr	r3, [r0, #20]
  401e32:	f013 0f01 	tst.w	r3, #1
  401e36:	d003      	beq.n	401e40 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  401e38:	6983      	ldr	r3, [r0, #24]
  401e3a:	700b      	strb	r3, [r1, #0]
	return 0;
  401e3c:	2000      	movs	r0, #0
  401e3e:	4770      	bx	lr
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
  401e40:	2001      	movs	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
  401e42:	4770      	bx	lr

00401e44 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  401e44:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  401e46:	010c      	lsls	r4, r1, #4
  401e48:	4294      	cmp	r4, r2
  401e4a:	d90f      	bls.n	401e6c <usart_set_async_baudrate+0x28>
  401e4c:	e01a      	b.n	401e84 <usart_set_async_baudrate+0x40>
		return 1;
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  401e4e:	6841      	ldr	r1, [r0, #4]
  401e50:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  401e54:	6041      	str	r1, [r0, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  401e56:	0412      	lsls	r2, r2, #16
  401e58:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  401e5c:	431a      	orrs	r2, r3
  401e5e:	6202      	str	r2, [r0, #32]

	return 0;
  401e60:	2000      	movs	r0, #0
  401e62:	e01c      	b.n	401e9e <usart_set_async_baudrate+0x5a>
	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
	cd = cd_fp >> 3;
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
		return 1;
  401e64:	2001      	movs	r0, #1
  401e66:	e01a      	b.n	401e9e <usart_set_async_baudrate+0x5a>
  401e68:	2001      	movs	r0, #1
  401e6a:	e018      	b.n	401e9e <usart_set_async_baudrate+0x5a>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  401e6c:	0863      	lsrs	r3, r4, #1
  401e6e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  401e72:	fbb2 f2f4 	udiv	r2, r2, r4
	cd = cd_fp >> 3;
  401e76:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  401e78:	1e5c      	subs	r4, r3, #1
  401e7a:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  401e7e:	428c      	cmp	r4, r1
  401e80:	d9e9      	bls.n	401e56 <usart_set_async_baudrate+0x12>
  401e82:	e7ef      	b.n	401e64 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  401e84:	00c9      	lsls	r1, r1, #3
  401e86:	084b      	lsrs	r3, r1, #1
  401e88:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  401e8c:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  401e90:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  401e92:	1e5c      	subs	r4, r3, #1
  401e94:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  401e98:	428c      	cmp	r4, r1
  401e9a:	d8e5      	bhi.n	401e68 <usart_set_async_baudrate+0x24>
  401e9c:	e7d7      	b.n	401e4e <usart_set_async_baudrate+0xa>

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);

	return 0;
}
  401e9e:	f85d 4b04 	ldr.w	r4, [sp], #4
  401ea2:	4770      	bx	lr

00401ea4 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  401ea4:	4b08      	ldr	r3, [pc, #32]	; (401ec8 <usart_reset+0x24>)
  401ea6:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
{
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  401eaa:	2300      	movs	r3, #0
  401eac:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  401eae:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  401eb0:	6283      	str	r3, [r0, #40]	; 0x28
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  401eb2:	2388      	movs	r3, #136	; 0x88
  401eb4:	6003      	str	r3, [r0, #0]
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  401eb6:	2324      	movs	r3, #36	; 0x24
  401eb8:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RSTSTA;
  401eba:	f44f 7380 	mov.w	r3, #256	; 0x100
  401ebe:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RTSDIS;
  401ec0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  401ec4:	6003      	str	r3, [r0, #0]
  401ec6:	4770      	bx	lr
  401ec8:	55534100 	.word	0x55534100

00401ecc <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  401ecc:	b570      	push	{r4, r5, r6, lr}
  401ece:	4605      	mov	r5, r0
  401ed0:	460c      	mov	r4, r1
  401ed2:	4616      	mov	r6, r2
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  401ed4:	4b0f      	ldr	r3, [pc, #60]	; (401f14 <usart_init_rs232+0x48>)
  401ed6:	4798      	blx	r3

	ul_reg_val = 0;
  401ed8:	2200      	movs	r2, #0
  401eda:	4b0f      	ldr	r3, [pc, #60]	; (401f18 <usart_init_rs232+0x4c>)
  401edc:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  401ede:	b19c      	cbz	r4, 401f08 <usart_init_rs232+0x3c>
  401ee0:	4632      	mov	r2, r6
  401ee2:	6821      	ldr	r1, [r4, #0]
  401ee4:	4628      	mov	r0, r5
  401ee6:	4b0d      	ldr	r3, [pc, #52]	; (401f1c <usart_init_rs232+0x50>)
  401ee8:	4798      	blx	r3
  401eea:	4602      	mov	r2, r0
  401eec:	b970      	cbnz	r0, 401f0c <usart_init_rs232+0x40>
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  401eee:	6861      	ldr	r1, [r4, #4]
  401ef0:	68a3      	ldr	r3, [r4, #8]
  401ef2:	4319      	orrs	r1, r3
  401ef4:	6923      	ldr	r3, [r4, #16]
  401ef6:	4319      	orrs	r1, r3
  401ef8:	68e3      	ldr	r3, [r4, #12]
  401efa:	430b      	orrs	r3, r1
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401efc:	4906      	ldr	r1, [pc, #24]	; (401f18 <usart_init_rs232+0x4c>)
  401efe:	600b      	str	r3, [r1, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;
  401f00:	6869      	ldr	r1, [r5, #4]
  401f02:	430b      	orrs	r3, r1
  401f04:	606b      	str	r3, [r5, #4]

	return 0;
  401f06:	e002      	b.n	401f0e <usart_init_rs232+0x42>

	ul_reg_val = 0;
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  401f08:	2201      	movs	r2, #1
  401f0a:	e000      	b.n	401f0e <usart_init_rs232+0x42>
  401f0c:	2201      	movs	r2, #1
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;

	return 0;
}
  401f0e:	4610      	mov	r0, r2
  401f10:	bd70      	pop	{r4, r5, r6, pc}
  401f12:	bf00      	nop
  401f14:	00401ea5 	.word	0x00401ea5
  401f18:	20400940 	.word	0x20400940
  401f1c:	00401e45 	.word	0x00401e45

00401f20 <usart_enable_tx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_TXEN;
  401f20:	2340      	movs	r3, #64	; 0x40
  401f22:	6003      	str	r3, [r0, #0]
  401f24:	4770      	bx	lr
  401f26:	bf00      	nop

00401f28 <usart_enable_rx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RXEN;
  401f28:	2310      	movs	r3, #16
  401f2a:	6003      	str	r3, [r0, #0]
  401f2c:	4770      	bx	lr
  401f2e:	bf00      	nop

00401f30 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  401f30:	6943      	ldr	r3, [r0, #20]
  401f32:	f013 0f02 	tst.w	r3, #2
  401f36:	d004      	beq.n	401f42 <usart_write+0x12>
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  401f38:	f3c1 0108 	ubfx	r1, r1, #0, #9
  401f3c:	61c1      	str	r1, [r0, #28]
	return 0;
  401f3e:	2000      	movs	r0, #0
  401f40:	4770      	bx	lr
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
  401f42:	2001      	movs	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
  401f44:	4770      	bx	lr
  401f46:	bf00      	nop

00401f48 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  401f48:	6943      	ldr	r3, [r0, #20]
  401f4a:	f013 0f01 	tst.w	r3, #1
  401f4e:	d005      	beq.n	401f5c <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  401f50:	6983      	ldr	r3, [r0, #24]
  401f52:	f3c3 0308 	ubfx	r3, r3, #0, #9
  401f56:	600b      	str	r3, [r1, #0]

	return 0;
  401f58:	2000      	movs	r0, #0
  401f5a:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
  401f5c:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
  401f5e:	4770      	bx	lr

00401f60 <xdmac_configure_transfer>:
  401f60:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  401f64:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	Assert(cfg);
	
	xdmac_channel_get_interrupt_status( xdmac, channel_num);
	xdmac_channel_set_source_addr(xdmac, channel_num, cfg->mbr_sa);
  401f66:	6853      	ldr	r3, [r2, #4]
 */
static inline void xdmac_channel_set_source_addr(Xdmac *xdmac, uint32_t channel_num, uint32_t src_addr)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CSA = src_addr;
  401f68:	660b      	str	r3, [r1, #96]	; 0x60
	xdmac_channel_set_destination_addr(xdmac, channel_num, cfg->mbr_da);
  401f6a:	6893      	ldr	r3, [r2, #8]
 */
static inline void xdmac_channel_set_destination_addr(Xdmac *xdmac, uint32_t channel_num, uint32_t dst_addr)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDA = dst_addr;
  401f6c:	664b      	str	r3, [r1, #100]	; 0x64
 */
static inline void xdmac_channel_set_microblock_control(Xdmac *xdmac, uint32_t channel_num, uint32_t ublen)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CUBC = XDMAC_CUBC_UBLEN(ublen);
  401f6e:	6813      	ldr	r3, [r2, #0]
  401f70:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  401f74:	670b      	str	r3, [r1, #112]	; 0x70
 */
static inline void xdmac_channel_set_block_control(Xdmac *xdmac, uint32_t channel_num, uint32_t blen)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CBC = XDMAC_CBC_BLEN(blen);
  401f76:	6913      	ldr	r3, [r2, #16]
  401f78:	f3c3 030b 	ubfx	r3, r3, #0, #12
  401f7c:	674b      	str	r3, [r1, #116]	; 0x74
	xdmac_channel_set_microblock_control(xdmac, channel_num, cfg->mbr_ubc);
	xdmac_channel_set_block_control(xdmac, channel_num, cfg->mbr_bc);
	xdmac_channel_set_datastride_mempattern(xdmac, channel_num, cfg->mbr_ds);
  401f7e:	6953      	ldr	r3, [r2, #20]
 */
static inline void xdmac_channel_set_datastride_mempattern(Xdmac *xdmac, uint32_t channel_num, uint32_t dds_msp)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDS_MSP = dds_msp;
  401f80:	67cb      	str	r3, [r1, #124]	; 0x7c
static inline void xdmac_channel_set_source_microblock_stride(Xdmac *xdmac,
		uint32_t channel_num, uint32_t subs)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CSUS = XDMAC_CSUS_SUBS(subs);
  401f82:	6993      	ldr	r3, [r2, #24]
  401f84:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  401f88:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
static inline void xdmac_channel_set_destination_microblock_stride(Xdmac *xdmac,
		uint32_t channel_num, uint32_t dubs)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDUS = XDMAC_CDUS_DUBS(dubs);
  401f8c:	69d3      	ldr	r3, [r2, #28]
  401f8e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  401f92:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
	xdmac_channel_set_source_microblock_stride(xdmac, channel_num, cfg->mbr_sus);
	xdmac_channel_set_destination_microblock_stride(xdmac, channel_num, cfg->mbr_dus);
	xdmac_channel_set_config(xdmac, channel_num, cfg->mbr_cfg );
  401f96:	68d3      	ldr	r3, [r2, #12]
 */
static inline void xdmac_channel_set_config(Xdmac *xdmac, uint32_t channel_num, uint32_t config)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CC = config;
  401f98:	678b      	str	r3, [r1, #120]	; 0x78
  401f9a:	4770      	bx	lr

00401f9c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401f9c:	e7fe      	b.n	401f9c <Dummy_Handler>
  401f9e:	bf00      	nop

00401fa0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  401fa0:	b500      	push	{lr}
  401fa2:	b083      	sub	sp, #12

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
  401fa4:	4b27      	ldr	r3, [pc, #156]	; (402044 <Reset_Handler+0xa4>)
  401fa6:	4a28      	ldr	r2, [pc, #160]	; (402048 <Reset_Handler+0xa8>)
  401fa8:	429a      	cmp	r2, r3
  401faa:	d003      	beq.n	401fb4 <Reset_Handler+0x14>
                for (; pDest < &_erelocate;) {
  401fac:	4b27      	ldr	r3, [pc, #156]	; (40204c <Reset_Handler+0xac>)
  401fae:	4a25      	ldr	r2, [pc, #148]	; (402044 <Reset_Handler+0xa4>)
  401fb0:	429a      	cmp	r2, r3
  401fb2:	d304      	bcc.n	401fbe <Reset_Handler+0x1e>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  401fb4:	4b26      	ldr	r3, [pc, #152]	; (402050 <Reset_Handler+0xb0>)
  401fb6:	4a27      	ldr	r2, [pc, #156]	; (402054 <Reset_Handler+0xb4>)
  401fb8:	429a      	cmp	r2, r3
  401fba:	d30f      	bcc.n	401fdc <Reset_Handler+0x3c>
  401fbc:	e01a      	b.n	401ff4 <Reset_Handler+0x54>
  401fbe:	4921      	ldr	r1, [pc, #132]	; (402044 <Reset_Handler+0xa4>)
  401fc0:	4b25      	ldr	r3, [pc, #148]	; (402058 <Reset_Handler+0xb8>)
  401fc2:	1a5b      	subs	r3, r3, r1
  401fc4:	f023 0303 	bic.w	r3, r3, #3
  401fc8:	3304      	adds	r3, #4
  401fca:	4a1f      	ldr	r2, [pc, #124]	; (402048 <Reset_Handler+0xa8>)
  401fcc:	4413      	add	r3, r2
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
                        *pDest++ = *pSrc++;
  401fce:	f852 0b04 	ldr.w	r0, [r2], #4
  401fd2:	f841 0b04 	str.w	r0, [r1], #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
  401fd6:	429a      	cmp	r2, r3
  401fd8:	d1f9      	bne.n	401fce <Reset_Handler+0x2e>
  401fda:	e7eb      	b.n	401fb4 <Reset_Handler+0x14>
  401fdc:	4b1f      	ldr	r3, [pc, #124]	; (40205c <Reset_Handler+0xbc>)
  401fde:	4a20      	ldr	r2, [pc, #128]	; (402060 <Reset_Handler+0xc0>)
  401fe0:	1ad2      	subs	r2, r2, r3
  401fe2:	f022 0203 	bic.w	r2, r2, #3
  401fe6:	441a      	add	r2, r3
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  401fe8:	3b04      	subs	r3, #4
                *pDest++ = 0;
  401fea:	2100      	movs	r1, #0
  401fec:	f843 1b04 	str.w	r1, [r3], #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  401ff0:	4293      	cmp	r3, r2
  401ff2:	d1fb      	bne.n	401fec <Reset_Handler+0x4c>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  401ff4:	4a1b      	ldr	r2, [pc, #108]	; (402064 <Reset_Handler+0xc4>)
  401ff6:	4b1c      	ldr	r3, [pc, #112]	; (402068 <Reset_Handler+0xc8>)
  401ff8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  401ffc:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401ffe:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  402002:	fab3 f383 	clz	r3, r3
  402006:	095b      	lsrs	r3, r3, #5
  402008:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  40200a:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  40200c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  402010:	2200      	movs	r2, #0
  402012:	4b16      	ldr	r3, [pc, #88]	; (40206c <Reset_Handler+0xcc>)
  402014:	701a      	strb	r2, [r3, #0]
	return flags;
  402016:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  402018:	4a15      	ldr	r2, [pc, #84]	; (402070 <Reset_Handler+0xd0>)
  40201a:	6813      	ldr	r3, [r2, #0]
  40201c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  402020:	6013      	str	r3, [r2, #0]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  402022:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  402026:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40202a:	b129      	cbz	r1, 402038 <Reset_Handler+0x98>
		cpu_irq_enable();
  40202c:	2201      	movs	r2, #1
  40202e:	4b0f      	ldr	r3, [pc, #60]	; (40206c <Reset_Handler+0xcc>)
  402030:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  402032:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  402036:	b662      	cpsie	i
#if __FPU_USED
	fpu_enable();
#endif

        /* Initialize the C library */
        __libc_init_array();
  402038:	4b0e      	ldr	r3, [pc, #56]	; (402074 <Reset_Handler+0xd4>)
  40203a:	4798      	blx	r3

        /* Branch to main function */
        main();
  40203c:	4b0e      	ldr	r3, [pc, #56]	; (402078 <Reset_Handler+0xd8>)
  40203e:	4798      	blx	r3
  402040:	e7fe      	b.n	402040 <Reset_Handler+0xa0>
  402042:	bf00      	nop
  402044:	20400000 	.word	0x20400000
  402048:	0040790c 	.word	0x0040790c
  40204c:	2040089c 	.word	0x2040089c
  402050:	204009b0 	.word	0x204009b0
  402054:	2040089c 	.word	0x2040089c
  402058:	2040089b 	.word	0x2040089b
  40205c:	204008a0 	.word	0x204008a0
  402060:	204009b3 	.word	0x204009b3
  402064:	e000ed00 	.word	0xe000ed00
  402068:	00400000 	.word	0x00400000
  40206c:	20400030 	.word	0x20400030
  402070:	e000ed88 	.word	0xe000ed88
  402074:	00404041 	.word	0x00404041
  402078:	00403e55 	.word	0x00403e55

0040207c <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  40207c:	4b3c      	ldr	r3, [pc, #240]	; (402170 <SystemCoreClockUpdate+0xf4>)
  40207e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402080:	f003 0303 	and.w	r3, r3, #3
  402084:	2b01      	cmp	r3, #1
  402086:	d00f      	beq.n	4020a8 <SystemCoreClockUpdate+0x2c>
  402088:	b113      	cbz	r3, 402090 <SystemCoreClockUpdate+0x14>
  40208a:	2b02      	cmp	r3, #2
  40208c:	d029      	beq.n	4020e2 <SystemCoreClockUpdate+0x66>
  40208e:	e057      	b.n	402140 <SystemCoreClockUpdate+0xc4>
  {
    case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  402090:	4b38      	ldr	r3, [pc, #224]	; (402174 <SystemCoreClockUpdate+0xf8>)
  402092:	695b      	ldr	r3, [r3, #20]
  402094:	f013 0f80 	tst.w	r3, #128	; 0x80
      {
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  402098:	bf14      	ite	ne
  40209a:	f44f 4200 	movne.w	r2, #32768	; 0x8000
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40209e:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4020a2:	4b35      	ldr	r3, [pc, #212]	; (402178 <SystemCoreClockUpdate+0xfc>)
  4020a4:	601a      	str	r2, [r3, #0]
  4020a6:	e04b      	b.n	402140 <SystemCoreClockUpdate+0xc4>
      }
    break;

    case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4020a8:	4b31      	ldr	r3, [pc, #196]	; (402170 <SystemCoreClockUpdate+0xf4>)
  4020aa:	6a1b      	ldr	r3, [r3, #32]
  4020ac:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4020b0:	d003      	beq.n	4020ba <SystemCoreClockUpdate+0x3e>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4020b2:	4a32      	ldr	r2, [pc, #200]	; (40217c <SystemCoreClockUpdate+0x100>)
  4020b4:	4b30      	ldr	r3, [pc, #192]	; (402178 <SystemCoreClockUpdate+0xfc>)
  4020b6:	601a      	str	r2, [r3, #0]
  4020b8:	e042      	b.n	402140 <SystemCoreClockUpdate+0xc4>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4020ba:	4a31      	ldr	r2, [pc, #196]	; (402180 <SystemCoreClockUpdate+0x104>)
  4020bc:	4b2e      	ldr	r3, [pc, #184]	; (402178 <SystemCoreClockUpdate+0xfc>)
  4020be:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4020c0:	4b2b      	ldr	r3, [pc, #172]	; (402170 <SystemCoreClockUpdate+0xf4>)
  4020c2:	6a1b      	ldr	r3, [r3, #32]
  4020c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4020c8:	2b10      	cmp	r3, #16
  4020ca:	d002      	beq.n	4020d2 <SystemCoreClockUpdate+0x56>
  4020cc:	2b20      	cmp	r3, #32
  4020ce:	d004      	beq.n	4020da <SystemCoreClockUpdate+0x5e>
  4020d0:	e036      	b.n	402140 <SystemCoreClockUpdate+0xc4>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  4020d2:	4a2c      	ldr	r2, [pc, #176]	; (402184 <SystemCoreClockUpdate+0x108>)
  4020d4:	4b28      	ldr	r3, [pc, #160]	; (402178 <SystemCoreClockUpdate+0xfc>)
  4020d6:	601a      	str	r2, [r3, #0]
          break;
  4020d8:	e032      	b.n	402140 <SystemCoreClockUpdate+0xc4>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  4020da:	4a28      	ldr	r2, [pc, #160]	; (40217c <SystemCoreClockUpdate+0x100>)
  4020dc:	4b26      	ldr	r3, [pc, #152]	; (402178 <SystemCoreClockUpdate+0xfc>)
  4020de:	601a      	str	r2, [r3, #0]
          break;
  4020e0:	e02e      	b.n	402140 <SystemCoreClockUpdate+0xc4>
        }
      }
    break;

    case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4020e2:	4b23      	ldr	r3, [pc, #140]	; (402170 <SystemCoreClockUpdate+0xf4>)
  4020e4:	6a1b      	ldr	r3, [r3, #32]
  4020e6:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4020ea:	d003      	beq.n	4020f4 <SystemCoreClockUpdate+0x78>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  4020ec:	4a23      	ldr	r2, [pc, #140]	; (40217c <SystemCoreClockUpdate+0x100>)
  4020ee:	4b22      	ldr	r3, [pc, #136]	; (402178 <SystemCoreClockUpdate+0xfc>)
  4020f0:	601a      	str	r2, [r3, #0]
  4020f2:	e012      	b.n	40211a <SystemCoreClockUpdate+0x9e>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4020f4:	4a22      	ldr	r2, [pc, #136]	; (402180 <SystemCoreClockUpdate+0x104>)
  4020f6:	4b20      	ldr	r3, [pc, #128]	; (402178 <SystemCoreClockUpdate+0xfc>)
  4020f8:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4020fa:	4b1d      	ldr	r3, [pc, #116]	; (402170 <SystemCoreClockUpdate+0xf4>)
  4020fc:	6a1b      	ldr	r3, [r3, #32]
  4020fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402102:	2b10      	cmp	r3, #16
  402104:	d002      	beq.n	40210c <SystemCoreClockUpdate+0x90>
  402106:	2b20      	cmp	r3, #32
  402108:	d004      	beq.n	402114 <SystemCoreClockUpdate+0x98>
  40210a:	e006      	b.n	40211a <SystemCoreClockUpdate+0x9e>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  40210c:	4a1d      	ldr	r2, [pc, #116]	; (402184 <SystemCoreClockUpdate+0x108>)
  40210e:	4b1a      	ldr	r3, [pc, #104]	; (402178 <SystemCoreClockUpdate+0xfc>)
  402110:	601a      	str	r2, [r3, #0]
          break;
  402112:	e002      	b.n	40211a <SystemCoreClockUpdate+0x9e>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  402114:	4a19      	ldr	r2, [pc, #100]	; (40217c <SystemCoreClockUpdate+0x100>)
  402116:	4b18      	ldr	r3, [pc, #96]	; (402178 <SystemCoreClockUpdate+0xfc>)
  402118:	601a      	str	r2, [r3, #0]
          default:
          break;
        }
      }

      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  40211a:	4b15      	ldr	r3, [pc, #84]	; (402170 <SystemCoreClockUpdate+0xf4>)
  40211c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40211e:	f003 0303 	and.w	r3, r3, #3
  402122:	2b02      	cmp	r3, #2
  402124:	d10c      	bne.n	402140 <SystemCoreClockUpdate+0xc4>
      {
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  402126:	4a12      	ldr	r2, [pc, #72]	; (402170 <SystemCoreClockUpdate+0xf4>)
  402128:	6a93      	ldr	r3, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  40212a:	6a92      	ldr	r2, [r2, #40]	; 0x28
  40212c:	4812      	ldr	r0, [pc, #72]	; (402178 <SystemCoreClockUpdate+0xfc>)
  40212e:	f3c3 410a 	ubfx	r1, r3, #16, #11
  402132:	6803      	ldr	r3, [r0, #0]
  402134:	fb01 3303 	mla	r3, r1, r3, r3
  402138:	b2d2      	uxtb	r2, r2
  40213a:	fbb3 f3f2 	udiv	r3, r3, r2
  40213e:	6003      	str	r3, [r0, #0]

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  402140:	4b0b      	ldr	r3, [pc, #44]	; (402170 <SystemCoreClockUpdate+0xf4>)
  402142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402144:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402148:	2b70      	cmp	r3, #112	; 0x70
  40214a:	d107      	bne.n	40215c <SystemCoreClockUpdate+0xe0>
  {
    SystemCoreClock /= 3U;
  40214c:	4a0a      	ldr	r2, [pc, #40]	; (402178 <SystemCoreClockUpdate+0xfc>)
  40214e:	6813      	ldr	r3, [r2, #0]
  402150:	490d      	ldr	r1, [pc, #52]	; (402188 <SystemCoreClockUpdate+0x10c>)
  402152:	fba1 1303 	umull	r1, r3, r1, r3
  402156:	085b      	lsrs	r3, r3, #1
  402158:	6013      	str	r3, [r2, #0]
  40215a:	4770      	bx	lr
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  40215c:	4b04      	ldr	r3, [pc, #16]	; (402170 <SystemCoreClockUpdate+0xf4>)
  40215e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402160:	4905      	ldr	r1, [pc, #20]	; (402178 <SystemCoreClockUpdate+0xfc>)
  402162:	f3c3 1202 	ubfx	r2, r3, #4, #3
  402166:	680b      	ldr	r3, [r1, #0]
  402168:	40d3      	lsrs	r3, r2
  40216a:	600b      	str	r3, [r1, #0]
  40216c:	4770      	bx	lr
  40216e:	bf00      	nop
  402170:	400e0600 	.word	0x400e0600
  402174:	400e1810 	.word	0x400e1810
  402178:	20400034 	.word	0x20400034
  40217c:	00b71b00 	.word	0x00b71b00
  402180:	003d0900 	.word	0x003d0900
  402184:	007a1200 	.word	0x007a1200
  402188:	aaaaaaab 	.word	0xaaaaaaab

0040218c <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  40218c:	4b16      	ldr	r3, [pc, #88]	; (4021e8 <system_init_flash+0x5c>)
  40218e:	4298      	cmp	r0, r3
  402190:	d804      	bhi.n	40219c <system_init_flash+0x10>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  402192:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  402196:	4b15      	ldr	r3, [pc, #84]	; (4021ec <system_init_flash+0x60>)
  402198:	601a      	str	r2, [r3, #0]
  40219a:	4770      	bx	lr
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  40219c:	4b14      	ldr	r3, [pc, #80]	; (4021f0 <system_init_flash+0x64>)
  40219e:	4298      	cmp	r0, r3
  4021a0:	d803      	bhi.n	4021aa <system_init_flash+0x1e>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4021a2:	4a14      	ldr	r2, [pc, #80]	; (4021f4 <system_init_flash+0x68>)
  4021a4:	4b11      	ldr	r3, [pc, #68]	; (4021ec <system_init_flash+0x60>)
  4021a6:	601a      	str	r2, [r3, #0]
  4021a8:	4770      	bx	lr
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  4021aa:	4b13      	ldr	r3, [pc, #76]	; (4021f8 <system_init_flash+0x6c>)
  4021ac:	4298      	cmp	r0, r3
  4021ae:	d803      	bhi.n	4021b8 <system_init_flash+0x2c>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4021b0:	4a12      	ldr	r2, [pc, #72]	; (4021fc <system_init_flash+0x70>)
  4021b2:	4b0e      	ldr	r3, [pc, #56]	; (4021ec <system_init_flash+0x60>)
  4021b4:	601a      	str	r2, [r3, #0]
  4021b6:	4770      	bx	lr
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  4021b8:	4b11      	ldr	r3, [pc, #68]	; (402200 <system_init_flash+0x74>)
  4021ba:	4298      	cmp	r0, r3
  4021bc:	d803      	bhi.n	4021c6 <system_init_flash+0x3a>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4021be:	4a11      	ldr	r2, [pc, #68]	; (402204 <system_init_flash+0x78>)
  4021c0:	4b0a      	ldr	r3, [pc, #40]	; (4021ec <system_init_flash+0x60>)
  4021c2:	601a      	str	r2, [r3, #0]
  4021c4:	4770      	bx	lr
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  4021c6:	4b10      	ldr	r3, [pc, #64]	; (402208 <system_init_flash+0x7c>)
  4021c8:	4298      	cmp	r0, r3
  4021ca:	d804      	bhi.n	4021d6 <system_init_flash+0x4a>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4021cc:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  4021d0:	4b06      	ldr	r3, [pc, #24]	; (4021ec <system_init_flash+0x60>)
  4021d2:	601a      	str	r2, [r3, #0]
  4021d4:	4770      	bx	lr
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  4021d6:	4b0d      	ldr	r3, [pc, #52]	; (40220c <system_init_flash+0x80>)
  4021d8:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4021da:	bf94      	ite	ls
  4021dc:	4a0c      	ldrls	r2, [pc, #48]	; (402210 <system_init_flash+0x84>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  4021de:	4a0d      	ldrhi	r2, [pc, #52]	; (402214 <system_init_flash+0x88>)
  4021e0:	4b02      	ldr	r3, [pc, #8]	; (4021ec <system_init_flash+0x60>)
  4021e2:	601a      	str	r2, [r3, #0]
  4021e4:	4770      	bx	lr
  4021e6:	bf00      	nop
  4021e8:	015ef3bf 	.word	0x015ef3bf
  4021ec:	400e0c00 	.word	0x400e0c00
  4021f0:	02bde77f 	.word	0x02bde77f
  4021f4:	04000100 	.word	0x04000100
  4021f8:	041cdb3f 	.word	0x041cdb3f
  4021fc:	04000200 	.word	0x04000200
  402200:	057bceff 	.word	0x057bceff
  402204:	04000300 	.word	0x04000300
  402208:	06dac2bf 	.word	0x06dac2bf
  40220c:	0839b67f 	.word	0x0839b67f
  402210:	04000500 	.word	0x04000500
  402214:	04000600 	.word	0x04000600

00402218 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  402218:	4b09      	ldr	r3, [pc, #36]	; (402240 <_sbrk+0x28>)
  40221a:	681b      	ldr	r3, [r3, #0]
  40221c:	b913      	cbnz	r3, 402224 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
  40221e:	4a09      	ldr	r2, [pc, #36]	; (402244 <_sbrk+0x2c>)
  402220:	4b07      	ldr	r3, [pc, #28]	; (402240 <_sbrk+0x28>)
  402222:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  402224:	4b06      	ldr	r3, [pc, #24]	; (402240 <_sbrk+0x28>)
  402226:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  402228:	181a      	adds	r2, r3, r0
  40222a:	4907      	ldr	r1, [pc, #28]	; (402248 <_sbrk+0x30>)
  40222c:	4291      	cmp	r1, r2
  40222e:	db04      	blt.n	40223a <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
  402230:	4610      	mov	r0, r2
  402232:	4a03      	ldr	r2, [pc, #12]	; (402240 <_sbrk+0x28>)
  402234:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  402236:	4618      	mov	r0, r3
  402238:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  40223a:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  40223e:	4770      	bx	lr
  402240:	20400944 	.word	0x20400944
  402244:	20402bb0 	.word	0x20402bb0
  402248:	2045fffc 	.word	0x2045fffc

0040224c <_close>:
}

extern int _close(int file)
{
	return -1;
}
  40224c:	f04f 30ff 	mov.w	r0, #4294967295
  402250:	4770      	bx	lr
  402252:	bf00      	nop

00402254 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  402254:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  402258:	604b      	str	r3, [r1, #4]

	return 0;
}
  40225a:	2000      	movs	r0, #0
  40225c:	4770      	bx	lr
  40225e:	bf00      	nop

00402260 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  402260:	2001      	movs	r0, #1
  402262:	4770      	bx	lr

00402264 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  402264:	2000      	movs	r0, #0
  402266:	4770      	bx	lr

00402268 <disk_initialize>:
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
  402268:	2801      	cmp	r0, #1
  40226a:	d813      	bhi.n	402294 <disk_initialize+0x2c>
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
  40226c:	b510      	push	{r4, lr}
  40226e:	4604      	mov	r4, r0
		return STA_NOINIT;
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
		mem_status = mem_test_unit_ready(drv);
  402270:	4b0b      	ldr	r3, [pc, #44]	; (4022a0 <disk_initialize+0x38>)
  402272:	4798      	blx	r3
		if (CTRL_BUSY != mem_status) {
  402274:	2803      	cmp	r0, #3
  402276:	d104      	bne.n	402282 <disk_initialize+0x1a>
		return STA_NOINIT;
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
		mem_status = mem_test_unit_ready(drv);
  402278:	4620      	mov	r0, r4
  40227a:	4b09      	ldr	r3, [pc, #36]	; (4022a0 <disk_initialize+0x38>)
  40227c:	4798      	blx	r3
		if (CTRL_BUSY != mem_status) {
  40227e:	2803      	cmp	r0, #3
  402280:	d00a      	beq.n	402298 <disk_initialize+0x30>
			break;
		}
	}
	if (mem_status != CTRL_GOOD) {
  402282:	b958      	cbnz	r0, 40229c <disk_initialize+0x34>
		return STA_NOINIT;
	}

	/* Check Write Protection Status */
	if (mem_wr_protect(drv)) {
  402284:	4620      	mov	r0, r4
  402286:	4b07      	ldr	r3, [pc, #28]	; (4022a4 <disk_initialize+0x3c>)
  402288:	4798      	blx	r3
  40228a:	2800      	cmp	r0, #0
		return STA_PROTECT;
	}

	/* The memory should already be initialized */
	return 0;
  40228c:	bf14      	ite	ne
  40228e:	2004      	movne	r0, #4
  402290:	2000      	moveq	r0, #0
  402292:	bd10      	pop	{r4, pc}
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
  402294:	2001      	movs	r0, #1
		return STA_PROTECT;
	}

	/* The memory should already be initialized */
	return 0;
}
  402296:	4770      	bx	lr
		if (CTRL_BUSY != mem_status) {
			break;
		}
	}
	if (mem_status != CTRL_GOOD) {
		return STA_NOINIT;
  402298:	2001      	movs	r0, #1
  40229a:	bd10      	pop	{r4, pc}
  40229c:	2001      	movs	r0, #1
		return STA_PROTECT;
	}

	/* The memory should already be initialized */
	return 0;
}
  40229e:	bd10      	pop	{r4, pc}
  4022a0:	00401075 	.word	0x00401075
  4022a4:	004010a5 	.word	0x004010a5

004022a8 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
  4022a8:	b508      	push	{r3, lr}
	switch (mem_test_unit_ready(drv)) {
  4022aa:	4b05      	ldr	r3, [pc, #20]	; (4022c0 <disk_status+0x18>)
  4022ac:	4798      	blx	r3
  4022ae:	b120      	cbz	r0, 4022ba <disk_status+0x12>
	case CTRL_GOOD:
		return 0;
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
	default:
		return STA_NOINIT;
  4022b0:	2802      	cmp	r0, #2
  4022b2:	bf0c      	ite	eq
  4022b4:	2003      	moveq	r0, #3
  4022b6:	2001      	movne	r0, #1
  4022b8:	bd08      	pop	{r3, pc}
 */
DSTATUS disk_status(BYTE drv)
{
	switch (mem_test_unit_ready(drv)) {
	case CTRL_GOOD:
		return 0;
  4022ba:	2000      	movs	r0, #0
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
	default:
		return STA_NOINIT;
	}
}
  4022bc:	bd08      	pop	{r3, pc}
  4022be:	bf00      	nop
  4022c0:	00401075 	.word	0x00401075

004022c4 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
  4022c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4022c8:	b083      	sub	sp, #12
  4022ca:	4683      	mov	fp, r0
  4022cc:	460d      	mov	r5, r1
  4022ce:	4614      	mov	r4, r2
  4022d0:	461f      	mov	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
  4022d2:	4b16      	ldr	r3, [pc, #88]	; (40232c <disk_read+0x68>)
  4022d4:	4798      	blx	r3
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
  4022d6:	b1f0      	cbz	r0, 402316 <disk_read+0x52>
  4022d8:	4606      	mov	r6, r0
		return RES_ERROR;
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
  4022da:	a901      	add	r1, sp, #4
  4022dc:	4658      	mov	r0, fp
  4022de:	4b14      	ldr	r3, [pc, #80]	; (402330 <disk_read+0x6c>)
  4022e0:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
			(ul_last_sector_num + 1) * uc_sector_size) {
  4022e2:	46b0      	mov	r8, r6
		return RES_ERROR;
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
	if ((sector + count * uc_sector_size) >
  4022e4:	fb06 4207 	mla	r2, r6, r7, r4
  4022e8:	9b01      	ldr	r3, [sp, #4]
  4022ea:	fb03 6306 	mla	r3, r3, r6, r6
  4022ee:	429a      	cmp	r2, r3
  4022f0:	d813      	bhi.n	40231a <disk_read+0x56>
			(ul_last_sector_num + 1) * uc_sector_size) {
		return RES_PARERR;
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
  4022f2:	46b9      	mov	r9, r7
  4022f4:	b19f      	cbz	r7, 40231e <disk_read+0x5a>
  4022f6:	0276      	lsls	r6, r6, #9
  4022f8:	f04f 0a00 	mov.w	sl, #0
		if (memory_2_ram(drv, sector + uc_sector_size * i,
  4022fc:	4f0d      	ldr	r7, [pc, #52]	; (402334 <disk_read+0x70>)
  4022fe:	462a      	mov	r2, r5
  402300:	4621      	mov	r1, r4
  402302:	4658      	mov	r0, fp
  402304:	47b8      	blx	r7
  402306:	b960      	cbnz	r0, 402322 <disk_read+0x5e>
			(ul_last_sector_num + 1) * uc_sector_size) {
		return RES_PARERR;
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
  402308:	f10a 0a01 	add.w	sl, sl, #1
  40230c:	4444      	add	r4, r8
  40230e:	4435      	add	r5, r6
  402310:	45ca      	cmp	sl, r9
  402312:	d1f4      	bne.n	4022fe <disk_read+0x3a>
  402314:	e006      	b.n	402324 <disk_read+0x60>
	uint8_t uc_sector_size = mem_sector_size(drv);
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
		return RES_ERROR;
  402316:	2001      	movs	r0, #1
  402318:	e004      	b.n	402324 <disk_read+0x60>

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
	if ((sector + count * uc_sector_size) >
			(ul_last_sector_num + 1) * uc_sector_size) {
		return RES_PARERR;
  40231a:	2004      	movs	r0, #4
  40231c:	e002      	b.n	402324 <disk_read+0x60>
				CTRL_GOOD) {
			return RES_ERROR;
		}
	}

	return RES_OK;
  40231e:	2000      	movs	r0, #0
  402320:	e000      	b.n	402324 <disk_read+0x60>
	/* Read the data */
	for (i = 0; i < count; i++) {
		if (memory_2_ram(drv, sector + uc_sector_size * i,
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
				CTRL_GOOD) {
			return RES_ERROR;
  402322:	2001      	movs	r0, #1
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
  402324:	b003      	add	sp, #12
  402326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40232a:	bf00      	nop
  40232c:	0040109d 	.word	0x0040109d
  402330:	00401089 	.word	0x00401089
  402334:	004010b9 	.word	0x004010b9

00402338 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
  402338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40233c:	b083      	sub	sp, #12
  40233e:	4683      	mov	fp, r0
  402340:	460d      	mov	r5, r1
  402342:	4614      	mov	r4, r2
  402344:	461f      	mov	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
  402346:	4b16      	ldr	r3, [pc, #88]	; (4023a0 <disk_write+0x68>)
  402348:	4798      	blx	r3
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
  40234a:	b1f0      	cbz	r0, 40238a <disk_write+0x52>
  40234c:	4606      	mov	r6, r0
		return RES_ERROR;
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
  40234e:	a901      	add	r1, sp, #4
  402350:	4658      	mov	r0, fp
  402352:	4b14      	ldr	r3, [pc, #80]	; (4023a4 <disk_write+0x6c>)
  402354:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
			(ul_last_sector_num + 1) * uc_sector_size) {
  402356:	46b0      	mov	r8, r6
		return RES_ERROR;
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
	if ((sector + count * uc_sector_size) >
  402358:	fb06 4207 	mla	r2, r6, r7, r4
  40235c:	9b01      	ldr	r3, [sp, #4]
  40235e:	fb03 6306 	mla	r3, r3, r6, r6
  402362:	429a      	cmp	r2, r3
  402364:	d813      	bhi.n	40238e <disk_write+0x56>
			(ul_last_sector_num + 1) * uc_sector_size) {
		return RES_PARERR;
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
  402366:	46b9      	mov	r9, r7
  402368:	b19f      	cbz	r7, 402392 <disk_write+0x5a>
  40236a:	0276      	lsls	r6, r6, #9
  40236c:	f04f 0a00 	mov.w	sl, #0
		if (ram_2_memory(drv, sector + uc_sector_size * i,
  402370:	4f0d      	ldr	r7, [pc, #52]	; (4023a8 <disk_write+0x70>)
  402372:	462a      	mov	r2, r5
  402374:	4621      	mov	r1, r4
  402376:	4658      	mov	r0, fp
  402378:	47b8      	blx	r7
  40237a:	b960      	cbnz	r0, 402396 <disk_write+0x5e>
			(ul_last_sector_num + 1) * uc_sector_size) {
		return RES_PARERR;
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
  40237c:	f10a 0a01 	add.w	sl, sl, #1
  402380:	4444      	add	r4, r8
  402382:	4435      	add	r5, r6
  402384:	45ca      	cmp	sl, r9
  402386:	d1f4      	bne.n	402372 <disk_write+0x3a>
  402388:	e006      	b.n	402398 <disk_write+0x60>
	uint8_t uc_sector_size = mem_sector_size(drv);
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
		return RES_ERROR;
  40238a:	2001      	movs	r0, #1
  40238c:	e004      	b.n	402398 <disk_write+0x60>

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
	if ((sector + count * uc_sector_size) >
			(ul_last_sector_num + 1) * uc_sector_size) {
		return RES_PARERR;
  40238e:	2004      	movs	r0, #4
  402390:	e002      	b.n	402398 <disk_write+0x60>
				CTRL_GOOD) {
			return RES_ERROR;
		}
	}

	return RES_OK;
  402392:	2000      	movs	r0, #0
  402394:	e000      	b.n	402398 <disk_write+0x60>
	/* Write the data */
	for (i = 0; i < count; i++) {
		if (ram_2_memory(drv, sector + uc_sector_size * i,
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
				CTRL_GOOD) {
			return RES_ERROR;
  402396:	2001      	movs	r0, #1
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
  402398:	b003      	add	sp, #12
  40239a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40239e:	bf00      	nop
  4023a0:	0040109d 	.word	0x0040109d
  4023a4:	00401089 	.word	0x00401089
  4023a8:	004010d1 	.word	0x004010d1

004023ac <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
  4023ac:	b510      	push	{r4, lr}
  4023ae:	b082      	sub	sp, #8
  4023b0:	4614      	mov	r4, r2
	DRESULT res = RES_PARERR;

	switch (ctrl) {
  4023b2:	2903      	cmp	r1, #3
  4023b4:	d824      	bhi.n	402400 <disk_ioctl+0x54>
  4023b6:	e8df f001 	tbb	[pc, r1]
  4023ba:	061c      	.short	0x061c
  4023bc:	020e      	.short	0x020e
	case GET_BLOCK_SIZE:
		*(DWORD *)buff = 1;
  4023be:	2301      	movs	r3, #1
  4023c0:	6013      	str	r3, [r2, #0]
		res = RES_OK;
  4023c2:	2000      	movs	r0, #0
		break;
  4023c4:	e021      	b.n	40240a <disk_ioctl+0x5e>
	case GET_SECTOR_COUNT:
	{
		uint32_t ul_last_sector_num;

		/* Check valid address */
		mem_read_capacity(drv, &ul_last_sector_num);
  4023c6:	a901      	add	r1, sp, #4
  4023c8:	4b11      	ldr	r3, [pc, #68]	; (402410 <disk_ioctl+0x64>)
  4023ca:	4798      	blx	r3

		*(DWORD *)buff = ul_last_sector_num + 1;
  4023cc:	9b01      	ldr	r3, [sp, #4]
  4023ce:	3301      	adds	r3, #1
  4023d0:	6023      	str	r3, [r4, #0]

		res = RES_OK;
  4023d2:	2000      	movs	r0, #0
	}
	break;
  4023d4:	e019      	b.n	40240a <disk_ioctl+0x5e>

	/* Get sectors on the disk (WORD) */
	case GET_SECTOR_SIZE:
	{
		uint8_t uc_sector_size = mem_sector_size(drv);
  4023d6:	4b0f      	ldr	r3, [pc, #60]	; (402414 <disk_ioctl+0x68>)
  4023d8:	4798      	blx	r3

		if ((uc_sector_size != SECTOR_SIZE_512) &&
  4023da:	2808      	cmp	r0, #8
  4023dc:	d812      	bhi.n	402404 <disk_ioctl+0x58>
				(uc_sector_size != SECTOR_SIZE_1024) &&
				(uc_sector_size != SECTOR_SIZE_2048) &&
  4023de:	f44f 738b 	mov.w	r3, #278	; 0x116
  4023e2:	fa23 f000 	lsr.w	r0, r3, r0
  4023e6:	f010 0f01 	tst.w	r0, #1
  4023ea:	d00d      	beq.n	402408 <disk_ioctl+0x5c>
				(uc_sector_size != SECTOR_SIZE_4096)) {
			/* The sector size is not supported by the FatFS */
			return RES_ERROR;
		}

		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
  4023ec:	2000      	movs	r0, #0
  4023ee:	7020      	strb	r0, [r4, #0]

		res = RES_OK;
	}
	break;
  4023f0:	e00b      	b.n	40240a <disk_ioctl+0x5e>

	/* Make sure that data has been written */
	case CTRL_SYNC:
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
  4023f2:	4b09      	ldr	r3, [pc, #36]	; (402418 <disk_ioctl+0x6c>)
  4023f4:	4798      	blx	r3
  4023f6:	2800      	cmp	r0, #0
			res = RES_OK;
		} else {
			res = RES_NOTRDY;
  4023f8:	bf0c      	ite	eq
  4023fa:	2000      	moveq	r0, #0
  4023fc:	2003      	movne	r0, #3
  4023fe:	e004      	b.n	40240a <disk_ioctl+0x5e>
		}
		break;

	default:
		res = RES_PARERR;
  402400:	2004      	movs	r0, #4
  402402:	e002      	b.n	40240a <disk_ioctl+0x5e>
		if ((uc_sector_size != SECTOR_SIZE_512) &&
				(uc_sector_size != SECTOR_SIZE_1024) &&
				(uc_sector_size != SECTOR_SIZE_2048) &&
				(uc_sector_size != SECTOR_SIZE_4096)) {
			/* The sector size is not supported by the FatFS */
			return RES_ERROR;
  402404:	2001      	movs	r0, #1
  402406:	e000      	b.n	40240a <disk_ioctl+0x5e>
  402408:	2001      	movs	r0, #1
	default:
		res = RES_PARERR;
	}

	return res;
}
  40240a:	b002      	add	sp, #8
  40240c:	bd10      	pop	{r4, pc}
  40240e:	bf00      	nop
  402410:	00401089 	.word	0x00401089
  402414:	0040109d 	.word	0x0040109d
  402418:	00401075 	.word	0x00401075

0040241c <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
  40241c:	b530      	push	{r4, r5, lr}
  40241e:	b08b      	sub	sp, #44	; 0x2c
	uint32_t ul_time;
	uint32_t ul_hour, ul_minute, ul_second;
	uint32_t ul_year, ul_month, ul_day, ul_week;

	/* Retrieve date and time */
	rtc_get_time(RTC, &ul_hour, &ul_minute, &ul_second);
  402420:	4c11      	ldr	r4, [pc, #68]	; (402468 <get_fattime+0x4c>)
  402422:	ab07      	add	r3, sp, #28
  402424:	aa08      	add	r2, sp, #32
  402426:	a909      	add	r1, sp, #36	; 0x24
  402428:	4620      	mov	r0, r4
  40242a:	4d10      	ldr	r5, [pc, #64]	; (40246c <get_fattime+0x50>)
  40242c:	47a8      	blx	r5
	rtc_get_date(RTC, &ul_year, &ul_month, &ul_day, &ul_week);
  40242e:	ab03      	add	r3, sp, #12
  402430:	9300      	str	r3, [sp, #0]
  402432:	ab04      	add	r3, sp, #16
  402434:	aa05      	add	r2, sp, #20
  402436:	a906      	add	r1, sp, #24
  402438:	4620      	mov	r0, r4
  40243a:	4c0d      	ldr	r4, [pc, #52]	; (402470 <get_fattime+0x54>)
  40243c:	47a0      	blx	r4

	ul_time = ((ul_year - 1980) << 25)
  40243e:	9b04      	ldr	r3, [sp, #16]
  402440:	041b      	lsls	r3, r3, #16
  402442:	9805      	ldr	r0, [sp, #20]
  402444:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
  402448:	9809      	ldr	r0, [sp, #36]	; 0x24
  40244a:	ea43 23c0 	orr.w	r3, r3, r0, lsl #11
  40244e:	9808      	ldr	r0, [sp, #32]
  402450:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
  402454:	9807      	ldr	r0, [sp, #28]
  402456:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
  40245a:	9806      	ldr	r0, [sp, #24]
  40245c:	f2a0 70bc 	subw	r0, r0, #1980	; 0x7bc
			| (ul_hour << 11)
			| (ul_minute << 5)
			| ((ul_second >> 1) << 0);

	return ul_time;
}
  402460:	ea43 6040 	orr.w	r0, r3, r0, lsl #25
  402464:	b00b      	add	sp, #44	; 0x2c
  402466:	bd30      	pop	{r4, r5, pc}
  402468:	400e1860 	.word	0x400e1860
  40246c:	00401d4d 	.word	0x00401d4d
  402470:	00401da9 	.word	0x00401da9

00402474 <mem_cpy>:
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
  402474:	b13a      	cbz	r2, 402486 <mem_cpy+0x12>
  402476:	3801      	subs	r0, #1
  402478:	188a      	adds	r2, r1, r2
		*d++ = *s++;
  40247a:	f811 3b01 	ldrb.w	r3, [r1], #1
  40247e:	f800 3f01 	strb.w	r3, [r0, #1]!
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
  402482:	4291      	cmp	r1, r2
  402484:	d1f9      	bne.n	40247a <mem_cpy+0x6>
  402486:	4770      	bx	lr

00402488 <mem_set>:
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
  402488:	b122      	cbz	r2, 402494 <mem_set+0xc>
  40248a:	1882      	adds	r2, r0, r2
		*d++ = (BYTE)val;
  40248c:	f800 1b01 	strb.w	r1, [r0], #1
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
  402490:	4282      	cmp	r2, r0
  402492:	d1fb      	bne.n	40248c <mem_set+0x4>
  402494:	4770      	bx	lr
  402496:	bf00      	nop

00402498 <clust2sect>:
static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
  402498:	3902      	subs	r1, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
  40249a:	6983      	ldr	r3, [r0, #24]
  40249c:	3b02      	subs	r3, #2
  40249e:	4299      	cmp	r1, r3
  4024a0:	d204      	bcs.n	4024ac <clust2sect+0x14>
	return clst * fs->csize + fs->database;
  4024a2:	7883      	ldrb	r3, [r0, #2]
  4024a4:	6a80      	ldr	r0, [r0, #40]	; 0x28
  4024a6:	fb01 0003 	mla	r0, r1, r3, r0
  4024aa:	4770      	bx	lr
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
  4024ac:	2000      	movs	r0, #0
	return clst * fs->csize + fs->database;
}
  4024ae:	4770      	bx	lr

004024b0 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
  4024b0:	f100 010b 	add.w	r1, r0, #11
	BYTE sum = 0;
  4024b4:	2300      	movs	r3, #0
	UINT n = 11;

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
  4024b6:	01da      	lsls	r2, r3, #7
  4024b8:	ea42 0353 	orr.w	r3, r2, r3, lsr #1
  4024bc:	f810 2b01 	ldrb.w	r2, [r0], #1
  4024c0:	fa52 f383 	uxtab	r3, r2, r3
  4024c4:	b2db      	uxtb	r3, r3
  4024c6:	4288      	cmp	r0, r1
  4024c8:	d1f5      	bne.n	4024b6 <sum_sfn+0x6>
	return sum;
}
  4024ca:	4618      	mov	r0, r3
  4024cc:	4770      	bx	lr
  4024ce:	bf00      	nop

004024d0 <validate>:
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
	if (!fs || !fs->fs_type || fs->id != id)
  4024d0:	b178      	cbz	r0, 4024f2 <validate+0x22>
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
  4024d2:	b508      	push	{r3, lr}
	if (!fs || !fs->fs_type || fs->id != id)
  4024d4:	7802      	ldrb	r2, [r0, #0]
  4024d6:	b172      	cbz	r2, 4024f6 <validate+0x26>
  4024d8:	88c2      	ldrh	r2, [r0, #6]
  4024da:	428a      	cmp	r2, r1
  4024dc:	d10d      	bne.n	4024fa <validate+0x2a>
		return FR_INVALID_OBJECT;

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
  4024de:	7840      	ldrb	r0, [r0, #1]
  4024e0:	4b07      	ldr	r3, [pc, #28]	; (402500 <validate+0x30>)
  4024e2:	4798      	blx	r3
  4024e4:	f000 0001 	and.w	r0, r0, #1
		return FR_NOT_READY;

	return FR_OK;
  4024e8:	2800      	cmp	r0, #0
  4024ea:	bf14      	ite	ne
  4024ec:	2003      	movne	r0, #3
  4024ee:	2000      	moveq	r0, #0
  4024f0:	bd08      	pop	{r3, pc}
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
	if (!fs || !fs->fs_type || fs->id != id)
		return FR_INVALID_OBJECT;
  4024f2:	2009      	movs	r0, #9

	if (disk_status(fs->drv) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
}
  4024f4:	4770      	bx	lr
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
	if (!fs || !fs->fs_type || fs->id != id)
		return FR_INVALID_OBJECT;
  4024f6:	2009      	movs	r0, #9
  4024f8:	bd08      	pop	{r3, pc}
  4024fa:	2009      	movs	r0, #9

	if (disk_status(fs->drv) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
}
  4024fc:	bd08      	pop	{r3, pc}
  4024fe:	bf00      	nop
  402500:	004022a9 	.word	0x004022a9

00402504 <check_fs>:
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Valid BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
  402504:	b538      	push	{r3, r4, r5, lr}
  402506:	4604      	mov	r4, r0
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
  402508:	2301      	movs	r3, #1
  40250a:	460a      	mov	r2, r1
  40250c:	f100 0130 	add.w	r1, r0, #48	; 0x30
  402510:	7840      	ldrb	r0, [r0, #1]
  402512:	4d1d      	ldr	r5, [pc, #116]	; (402588 <check_fs+0x84>)
  402514:	47a8      	blx	r5
  402516:	bb80      	cbnz	r0, 40257a <check_fs+0x76>
		return 3;
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
  402518:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
  40251c:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
  402520:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  402524:	b21b      	sxth	r3, r3
  402526:	4a19      	ldr	r2, [pc, #100]	; (40258c <check_fs+0x88>)
  402528:	4293      	cmp	r3, r2
  40252a:	d128      	bne.n	40257e <check_fs+0x7a>
		return 2;

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
  40252c:	f894 1069 	ldrb.w	r1, [r4, #105]	; 0x69
  402530:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
  402534:	0413      	lsls	r3, r2, #16
  402536:	ea43 6201 	orr.w	r2, r3, r1, lsl #24
  40253a:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
  40253e:	4313      	orrs	r3, r2
  402540:	f894 2067 	ldrb.w	r2, [r4, #103]	; 0x67
  402544:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  402548:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  40254c:	4a10      	ldr	r2, [pc, #64]	; (402590 <check_fs+0x8c>)
  40254e:	4293      	cmp	r3, r2
  402550:	d017      	beq.n	402582 <check_fs+0x7e>
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
		return 3;
  402552:	f894 0085 	ldrb.w	r0, [r4, #133]	; 0x85
  402556:	f894 3084 	ldrb.w	r3, [r4, #132]	; 0x84
  40255a:	041b      	lsls	r3, r3, #16
  40255c:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
  402560:	f894 3082 	ldrb.w	r3, [r4, #130]	; 0x82
  402564:	4303      	orrs	r3, r0
  402566:	f894 0083 	ldrb.w	r0, [r4, #131]	; 0x83
  40256a:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
  40256e:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
  402572:	1a98      	subs	r0, r3, r2
  402574:	bf18      	it	ne
  402576:	2001      	movne	r0, #1
  402578:	bd38      	pop	{r3, r4, r5, pc}
  40257a:	2003      	movs	r0, #3
  40257c:	bd38      	pop	{r3, r4, r5, pc}
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
		return 2;
  40257e:	2002      	movs	r0, #2
  402580:	bd38      	pop	{r3, r4, r5, pc}

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
		return 0;
  402582:	2000      	movs	r0, #0
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
		return 0;

	return 1;
}
  402584:	bd38      	pop	{r3, r4, r5, pc}
  402586:	bf00      	nop
  402588:	004022c5 	.word	0x004022c5
  40258c:	ffffaa55 	.word	0xffffaa55
  402590:	00544146 	.word	0x00544146

00402594 <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
  402594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BYTE fmt, b, pi, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
  402596:	6803      	ldr	r3, [r0, #0]
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
  402598:	781c      	ldrb	r4, [r3, #0]
  40259a:	3c30      	subs	r4, #48	; 0x30
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
  40259c:	2c09      	cmp	r4, #9
  40259e:	d808      	bhi.n	4025b2 <chk_mounted+0x1e>
  4025a0:	785d      	ldrb	r5, [r3, #1]
  4025a2:	2d3a      	cmp	r5, #58	; 0x3a
  4025a4:	d107      	bne.n	4025b6 <chk_mounted+0x22>
		p += 2; *path = p;				/* Return pointer to the path name */
  4025a6:	3302      	adds	r3, #2
  4025a8:	6003      	str	r3, [r0, #0]
		vol = 0;						/* Use drive 0 */
#endif
	}

	/* Check if the file system object is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
  4025aa:	2c07      	cmp	r4, #7
  4025ac:	f200 814a 	bhi.w	402844 <chk_mounted+0x2b0>
  4025b0:	e002      	b.n	4025b8 <chk_mounted+0x24>
  4025b2:	2400      	movs	r4, #0
  4025b4:	e000      	b.n	4025b8 <chk_mounted+0x24>
  4025b6:	2400      	movs	r4, #0
		return FR_INVALID_DRIVE;
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
  4025b8:	4bc1      	ldr	r3, [pc, #772]	; (4028c0 <chk_mounted+0x32c>)
  4025ba:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
  4025be:	600d      	str	r5, [r1, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
  4025c0:	2d00      	cmp	r5, #0
  4025c2:	f000 8141 	beq.w	402848 <chk_mounted+0x2b4>
  4025c6:	4616      	mov	r6, r2

	ENTER_FF(fs);						/* Lock file system */

	if (fs->fs_type) {					/* If the logical drive has been mounted */
  4025c8:	782b      	ldrb	r3, [r5, #0]
  4025ca:	b183      	cbz	r3, 4025ee <chk_mounted+0x5a>
		stat = disk_status(fs->drv);
  4025cc:	7868      	ldrb	r0, [r5, #1]
  4025ce:	4bbd      	ldr	r3, [pc, #756]	; (4028c4 <chk_mounted+0x330>)
  4025d0:	4798      	blx	r3
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
  4025d2:	f010 0f01 	tst.w	r0, #1
  4025d6:	d10a      	bne.n	4025ee <chk_mounted+0x5a>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
  4025d8:	2e00      	cmp	r6, #0
  4025da:	f000 8137 	beq.w	40284c <chk_mounted+0x2b8>
  4025de:	f000 0004 	and.w	r0, r0, #4
  4025e2:	b2c0      	uxtb	r0, r0
				return FR_WRITE_PROTECTED;
  4025e4:	2800      	cmp	r0, #0
  4025e6:	bf0c      	ite	eq
  4025e8:	2000      	moveq	r0, #0
  4025ea:	200a      	movne	r0, #10
  4025ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
  4025ee:	2300      	movs	r3, #0
  4025f0:	702b      	strb	r3, [r5, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
  4025f2:	b2e0      	uxtb	r0, r4
  4025f4:	7068      	strb	r0, [r5, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
  4025f6:	4bb4      	ldr	r3, [pc, #720]	; (4028c8 <chk_mounted+0x334>)
  4025f8:	4798      	blx	r3
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
  4025fa:	f010 0f01 	tst.w	r0, #1
  4025fe:	f040 8127 	bne.w	402850 <chk_mounted+0x2bc>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
  402602:	b11e      	cbz	r6, 40260c <chk_mounted+0x78>
  402604:	f010 0f04 	tst.w	r0, #4
  402608:	f040 8124 	bne.w	402854 <chk_mounted+0x2c0>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
  40260c:	2100      	movs	r1, #0
  40260e:	4628      	mov	r0, r5
  402610:	4bae      	ldr	r3, [pc, #696]	; (4028cc <chk_mounted+0x338>)
  402612:	4798      	blx	r3
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
  402614:	2801      	cmp	r0, #1
  402616:	d117      	bne.n	402648 <chk_mounted+0xb4>
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
		if (pi) pi--;
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
		if (tbl[4]) {						/* Is the partition existing? */
  402618:	f895 31f2 	ldrb.w	r3, [r5, #498]	; 0x1f2
  40261c:	2b00      	cmp	r3, #0
  40261e:	f000 811b 	beq.w	402858 <chk_mounted+0x2c4>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
  402622:	f895 21f9 	ldrb.w	r2, [r5, #505]	; 0x1f9
  402626:	f895 31f8 	ldrb.w	r3, [r5, #504]	; 0x1f8
  40262a:	041b      	lsls	r3, r3, #16
  40262c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  402630:	f895 41f6 	ldrb.w	r4, [r5, #502]	; 0x1f6
  402634:	4323      	orrs	r3, r4
  402636:	f895 41f7 	ldrb.w	r4, [r5, #503]	; 0x1f7
  40263a:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
			fmt = check_fs(fs, bsect);		/* Check the partition */
  40263e:	4621      	mov	r1, r4
  402640:	4628      	mov	r0, r5
  402642:	4ba2      	ldr	r3, [pc, #648]	; (4028cc <chk_mounted+0x338>)
  402644:	4798      	blx	r3
  402646:	e000      	b.n	40264a <chk_mounted+0xb6>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
  402648:	2400      	movs	r4, #0
		if (tbl[4]) {						/* Is the partition existing? */
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
			fmt = check_fs(fs, bsect);		/* Check the partition */
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
  40264a:	2803      	cmp	r0, #3
  40264c:	f000 8106 	beq.w	40285c <chk_mounted+0x2c8>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
  402650:	2800      	cmp	r0, #0
  402652:	f040 8105 	bne.w	402860 <chk_mounted+0x2cc>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
  402656:	f895 203c 	ldrb.w	r2, [r5, #60]	; 0x3c
  40265a:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
  40265e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  402662:	b21b      	sxth	r3, r3
  402664:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  402668:	f040 80fc 	bne.w	402864 <chk_mounted+0x2d0>
		return FR_NO_FILESYSTEM;

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
  40266c:	f895 1047 	ldrb.w	r1, [r5, #71]	; 0x47
  402670:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
  402674:	ea53 2101 	orrs.w	r1, r3, r1, lsl #8
  402678:	d10d      	bne.n	402696 <chk_mounted+0x102>
  40267a:	f895 2057 	ldrb.w	r2, [r5, #87]	; 0x57
  40267e:	f895 3056 	ldrb.w	r3, [r5, #86]	; 0x56
  402682:	041b      	lsls	r3, r3, #16
  402684:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  402688:	f895 1054 	ldrb.w	r1, [r5, #84]	; 0x54
  40268c:	430b      	orrs	r3, r1
  40268e:	f895 1055 	ldrb.w	r1, [r5, #85]	; 0x55
  402692:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
	fs->fsize = fasize;
  402696:	61e9      	str	r1, [r5, #28]

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
  402698:	f895 e040 	ldrb.w	lr, [r5, #64]	; 0x40
  40269c:	f885 e003 	strb.w	lr, [r5, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
  4026a0:	f10e 33ff 	add.w	r3, lr, #4294967295
  4026a4:	b2db      	uxtb	r3, r3
  4026a6:	2b01      	cmp	r3, #1
  4026a8:	f200 80de 	bhi.w	402868 <chk_mounted+0x2d4>
	fasize *= b;										/* Number of sectors for FAT area */

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
  4026ac:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
  4026b0:	70ab      	strb	r3, [r5, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
  4026b2:	2b00      	cmp	r3, #0
  4026b4:	f000 80da 	beq.w	40286c <chk_mounted+0x2d8>
  4026b8:	1e5a      	subs	r2, r3, #1
  4026ba:	421a      	tst	r2, r3
  4026bc:	f040 80d8 	bne.w	402870 <chk_mounted+0x2dc>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
  4026c0:	f895 7042 	ldrb.w	r7, [r5, #66]	; 0x42
  4026c4:	f895 2041 	ldrb.w	r2, [r5, #65]	; 0x41
  4026c8:	ea42 2707 	orr.w	r7, r2, r7, lsl #8
  4026cc:	812f      	strh	r7, [r5, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
  4026ce:	f017 0f0f 	tst.w	r7, #15
  4026d2:	f040 80cf 	bne.w	402874 <chk_mounted+0x2e0>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
  4026d6:	f895 0044 	ldrb.w	r0, [r5, #68]	; 0x44
  4026da:	f895 2043 	ldrb.w	r2, [r5, #67]	; 0x43
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
  4026de:	ea52 2200 	orrs.w	r2, r2, r0, lsl #8
  4026e2:	d10d      	bne.n	402700 <chk_mounted+0x16c>
  4026e4:	f895 6053 	ldrb.w	r6, [r5, #83]	; 0x53
  4026e8:	f895 2052 	ldrb.w	r2, [r5, #82]	; 0x52
  4026ec:	0412      	lsls	r2, r2, #16
  4026ee:	ea42 6606 	orr.w	r6, r2, r6, lsl #24
  4026f2:	f895 2050 	ldrb.w	r2, [r5, #80]	; 0x50
  4026f6:	4332      	orrs	r2, r6
  4026f8:	f895 0051 	ldrb.w	r0, [r5, #81]	; 0x51
  4026fc:	ea42 2200 	orr.w	r2, r2, r0, lsl #8

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
  402700:	f895 603f 	ldrb.w	r6, [r5, #63]	; 0x3f
  402704:	f895 003e 	ldrb.w	r0, [r5, #62]	; 0x3e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
  402708:	ea50 2006 	orrs.w	r0, r0, r6, lsl #8
  40270c:	f000 80b4 	beq.w	402878 <chk_mounted+0x2e4>
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
	fs->fsize = fasize;

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
	fasize *= b;										/* Number of sectors for FAT area */
  402710:	fb01 fe0e 	mul.w	lr, r1, lr

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
  402714:	eb00 1617 	add.w	r6, r0, r7, lsr #4
  402718:	4476      	add	r6, lr
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
  40271a:	42b2      	cmp	r2, r6
  40271c:	f0c0 80ae 	bcc.w	40287c <chk_mounted+0x2e8>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
  402720:	1b92      	subs	r2, r2, r6
  402722:	fbb2 f3f3 	udiv	r3, r2, r3
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
  402726:	2b00      	cmp	r3, #0
  402728:	f000 80aa 	beq.w	402880 <chk_mounted+0x2ec>
	fmt = FS_FAT12;
  40272c:	f640 72f5 	movw	r2, #4085	; 0xff5
  402730:	4293      	cmp	r3, r2
  402732:	bf8c      	ite	hi
  402734:	2202      	movhi	r2, #2
  402736:	2201      	movls	r2, #1
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
  402738:	f64f 7cf5 	movw	ip, #65525	; 0xfff5
  40273c:	4563      	cmp	r3, ip
  40273e:	f200 80a9 	bhi.w	402894 <chk_mounted+0x300>
  402742:	e0e6      	b.n	402912 <chk_mounted+0x37e>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
	fs->database = bsect + sysect;						/* Data start sector */
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
	if (fmt == FS_FAT32) {
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
  402744:	f895 005f 	ldrb.w	r0, [r5, #95]	; 0x5f
  402748:	f895 205e 	ldrb.w	r2, [r5, #94]	; 0x5e
  40274c:	0412      	lsls	r2, r2, #16
  40274e:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
  402752:	f895 205c 	ldrb.w	r2, [r5, #92]	; 0x5c
  402756:	4302      	orrs	r2, r0
  402758:	f895 005d 	ldrb.w	r0, [r5, #93]	; 0x5d
  40275c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  402760:	626a      	str	r2, [r5, #36]	; 0x24
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
  402762:	009b      	lsls	r3, r3, #2
  402764:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
  402768:	ebb1 2f53 	cmp.w	r1, r3, lsr #9
  40276c:	f0c0 808a 	bcc.w	402884 <chk_mounted+0x2f0>
  402770:	e0b6      	b.n	4028e0 <chk_mounted+0x34c>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
  402772:	4470      	add	r0, lr
  402774:	6268      	str	r0, [r5, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
  402776:	2a02      	cmp	r2, #2
  402778:	d101      	bne.n	40277e <chk_mounted+0x1ea>
  40277a:	005b      	lsls	r3, r3, #1
  40277c:	e099      	b.n	4028b2 <chk_mounted+0x31e>
  40277e:	eb03 0043 	add.w	r0, r3, r3, lsl #1
  402782:	f003 0301 	and.w	r3, r3, #1
  402786:	eb03 0350 	add.w	r3, r3, r0, lsr #1
  40278a:	e092      	b.n	4028b2 <chk_mounted+0x31e>

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
  40278c:	f895 222f 	ldrb.w	r2, [r5, #559]	; 0x22f
  402790:	f895 322e 	ldrb.w	r3, [r5, #558]	; 0x22e
  402794:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  402798:	b21b      	sxth	r3, r3
  40279a:	4a4d      	ldr	r2, [pc, #308]	; (4028d0 <chk_mounted+0x33c>)
  40279c:	4293      	cmp	r3, r2
  40279e:	d141      	bne.n	402824 <chk_mounted+0x290>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
  4027a0:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
  4027a4:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
  4027a8:	041b      	lsls	r3, r3, #16
  4027aa:	ea43 6202 	orr.w	r2, r3, r2, lsl #24
  4027ae:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
  4027b2:	4313      	orrs	r3, r2
  4027b4:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
  4027b8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  4027bc:	4a45      	ldr	r2, [pc, #276]	; (4028d4 <chk_mounted+0x340>)
  4027be:	4293      	cmp	r3, r2
  4027c0:	d132      	bne.n	402828 <chk_mounted+0x294>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
  4027c2:	f895 2217 	ldrb.w	r2, [r5, #535]	; 0x217
  4027c6:	f895 3216 	ldrb.w	r3, [r5, #534]	; 0x216
  4027ca:	041b      	lsls	r3, r3, #16
  4027cc:	ea43 6202 	orr.w	r2, r3, r2, lsl #24
  4027d0:	f895 3214 	ldrb.w	r3, [r5, #532]	; 0x214
  4027d4:	4313      	orrs	r3, r2
  4027d6:	f895 2215 	ldrb.w	r2, [r5, #533]	; 0x215
  4027da:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  4027de:	4a3e      	ldr	r2, [pc, #248]	; (4028d8 <chk_mounted+0x344>)
  4027e0:	4293      	cmp	r3, r2
  4027e2:	d123      	bne.n	40282c <chk_mounted+0x298>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
  4027e4:	f895 221f 	ldrb.w	r2, [r5, #543]	; 0x21f
  4027e8:	f895 321e 	ldrb.w	r3, [r5, #542]	; 0x21e
  4027ec:	041b      	lsls	r3, r3, #16
  4027ee:	ea43 6202 	orr.w	r2, r3, r2, lsl #24
  4027f2:	f895 321c 	ldrb.w	r3, [r5, #540]	; 0x21c
  4027f6:	4313      	orrs	r3, r2
  4027f8:	f895 221d 	ldrb.w	r2, [r5, #541]	; 0x21d
  4027fc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  402800:	60eb      	str	r3, [r5, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
  402802:	f895 221b 	ldrb.w	r2, [r5, #539]	; 0x21b
  402806:	f895 321a 	ldrb.w	r3, [r5, #538]	; 0x21a
  40280a:	041b      	lsls	r3, r3, #16
  40280c:	ea43 6202 	orr.w	r2, r3, r2, lsl #24
  402810:	f895 3218 	ldrb.w	r3, [r5, #536]	; 0x218
  402814:	4313      	orrs	r3, r2
  402816:	f895 2219 	ldrb.w	r2, [r5, #537]	; 0x219
  40281a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  40281e:	612b      	str	r3, [r5, #16]
  402820:	2203      	movs	r2, #3
  402822:	e004      	b.n	40282e <chk_mounted+0x29a>
  402824:	2203      	movs	r2, #3
  402826:	e002      	b.n	40282e <chk_mounted+0x29a>
  402828:	2203      	movs	r2, #3
  40282a:	e000      	b.n	40282e <chk_mounted+0x29a>
  40282c:	2203      	movs	r2, #3
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
  40282e:	702a      	strb	r2, [r5, #0]
	fs->id = ++Fsid;		/* File system mount ID */
  402830:	4a2a      	ldr	r2, [pc, #168]	; (4028dc <chk_mounted+0x348>)
  402832:	8813      	ldrh	r3, [r2, #0]
  402834:	3301      	adds	r3, #1
  402836:	b29b      	uxth	r3, r3
  402838:	8013      	strh	r3, [r2, #0]
  40283a:	80eb      	strh	r3, [r5, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
  40283c:	2000      	movs	r0, #0
  40283e:	62e8      	str	r0, [r5, #44]	; 0x2c
	fs->wflag = 0;
  402840:	7128      	strb	r0, [r5, #4]
#endif
#if _FS_SHARE				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
  402842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
#endif
	}

	/* Check if the file system object is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
		return FR_INVALID_DRIVE;
  402844:	200b      	movs	r0, #11
  402846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
  402848:	200c      	movs	r0, #12
  40284a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (fs->fs_type) {					/* If the logical drive has been mounted */
		stat = disk_status(fs->drv);
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
				return FR_WRITE_PROTECTED;
			return FR_OK;				/* The file system object is valid */
  40284c:	2000      	movs	r0, #0
  40284e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	fs->fs_type = 0;					/* Clear the file system object */
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
  402850:	2003      	movs	r0, #3
  402852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
		return FR_WRITE_PROTECTED;
  402854:	200a      	movs	r0, #10
  402856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
			fmt = check_fs(fs, bsect);		/* Check the partition */
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
  402858:	200d      	movs	r0, #13
  40285a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (tbl[4]) {						/* Is the partition existing? */
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
			fmt = check_fs(fs, bsect);		/* Check the partition */
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
  40285c:	2001      	movs	r0, #1
  40285e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
  402860:	200d      	movs	r0, #13
  402862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
		return FR_NO_FILESYSTEM;
  402864:	200d      	movs	r0, #13
  402866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
	fs->fsize = fasize;

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
  402868:	200d      	movs	r0, #13
  40286a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fasize *= b;										/* Number of sectors for FAT area */

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
  40286c:	200d      	movs	r0, #13
  40286e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402870:	200d      	movs	r0, #13
  402872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
  402874:	200d      	movs	r0, #13
  402876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
  402878:	200d      	movs	r0, #13
  40287a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
  40287c:	200d      	movs	r0, #13
  40287e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
  402880:	200d      	movs	r0, #13
  402882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
		return FR_NO_FILESYSTEM;
  402884:	200d      	movs	r0, #13
  402886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
	fs->database = bsect + sysect;						/* Data start sector */
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
	if (fmt == FS_FAT32) {
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
  402888:	200d      	movs	r0, #13
  40288a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
		return FR_NO_FILESYSTEM;
  40288c:	200d      	movs	r0, #13
  40288e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (fmt == FS_FAT32) {
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
  402890:	200d      	movs	r0, #13
  402892:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
  402894:	3302      	adds	r3, #2
  402896:	61ab      	str	r3, [r5, #24]
	fs->database = bsect + sysect;						/* Data start sector */
  402898:	4426      	add	r6, r4
  40289a:	62ae      	str	r6, [r5, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
  40289c:	4420      	add	r0, r4
  40289e:	6228      	str	r0, [r5, #32]
	if (fmt == FS_FAT32) {
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
  4028a0:	2f00      	cmp	r7, #0
  4028a2:	d1f1      	bne.n	402888 <chk_mounted+0x2f4>
  4028a4:	e74e      	b.n	402744 <chk_mounted+0x1b0>
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
		return FR_NO_FILESYSTEM;

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
  4028a6:	f04f 33ff 	mov.w	r3, #4294967295
  4028aa:	612b      	str	r3, [r5, #16]
	fs->last_clust = 0;
  4028ac:	2300      	movs	r3, #0
  4028ae:	60eb      	str	r3, [r5, #12]
  4028b0:	e7bd      	b.n	40282e <chk_mounted+0x29a>
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
  4028b2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
  4028b6:	ebb1 2f53 	cmp.w	r1, r3, lsr #9
  4028ba:	d3e7      	bcc.n	40288c <chk_mounted+0x2f8>
  4028bc:	e7f3      	b.n	4028a6 <chk_mounted+0x312>
  4028be:	bf00      	nop
  4028c0:	2040094c 	.word	0x2040094c
  4028c4:	004022a9 	.word	0x004022a9
  4028c8:	00402269 	.word	0x00402269
  4028cc:	00402505 	.word	0x00402505
  4028d0:	ffffaa55 	.word	0xffffaa55
  4028d4:	41615252 	.word	0x41615252
  4028d8:	61417272 	.word	0x61417272
  4028dc:	20400948 	.word	0x20400948
		return FR_NO_FILESYSTEM;

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
  4028e0:	f04f 33ff 	mov.w	r3, #4294967295
  4028e4:	612b      	str	r3, [r5, #16]
	fs->last_clust = 0;
  4028e6:	2300      	movs	r3, #0
  4028e8:	60eb      	str	r3, [r5, #12]

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
  4028ea:	716b      	strb	r3, [r5, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
  4028ec:	f895 2061 	ldrb.w	r2, [r5, #97]	; 0x61
  4028f0:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
  4028f4:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
  4028f8:	4422      	add	r2, r4
  4028fa:	616a      	str	r2, [r5, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
  4028fc:	2301      	movs	r3, #1
  4028fe:	f105 0130 	add.w	r1, r5, #48	; 0x30
  402902:	7868      	ldrb	r0, [r5, #1]
  402904:	4c07      	ldr	r4, [pc, #28]	; (402924 <chk_mounted+0x390>)
  402906:	47a0      	blx	r4
  402908:	2800      	cmp	r0, #0
  40290a:	f43f af3f 	beq.w	40278c <chk_mounted+0x1f8>
  40290e:	2203      	movs	r2, #3
  402910:	e78d      	b.n	40282e <chk_mounted+0x29a>
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
  402912:	3302      	adds	r3, #2
  402914:	61ab      	str	r3, [r5, #24]
	fs->database = bsect + sysect;						/* Data start sector */
  402916:	4426      	add	r6, r4
  402918:	62ae      	str	r6, [r5, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
  40291a:	4420      	add	r0, r4
  40291c:	6228      	str	r0, [r5, #32]
	if (fmt == FS_FAT32) {
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
  40291e:	2f00      	cmp	r7, #0
  402920:	d0b6      	beq.n	402890 <chk_mounted+0x2fc>
  402922:	e726      	b.n	402772 <chk_mounted+0x1de>
  402924:	004022c5 	.word	0x004022c5

00402928 <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
  402928:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	DWORD wsect;


	wsect = fs->winsect;
  40292c:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
	if (wsect != sector) {	/* Changed current window */
  40292e:	428f      	cmp	r7, r1
  402930:	d031      	beq.n	402996 <move_window+0x6e>
  402932:	460e      	mov	r6, r1
  402934:	4604      	mov	r4, r0
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
  402936:	7903      	ldrb	r3, [r0, #4]
  402938:	b30b      	cbz	r3, 40297e <move_window+0x56>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
  40293a:	f100 0830 	add.w	r8, r0, #48	; 0x30
  40293e:	2301      	movs	r3, #1
  402940:	463a      	mov	r2, r7
  402942:	4641      	mov	r1, r8
  402944:	7840      	ldrb	r0, [r0, #1]
  402946:	4d1a      	ldr	r5, [pc, #104]	; (4029b0 <move_window+0x88>)
  402948:	47a8      	blx	r5
  40294a:	bb38      	cbnz	r0, 40299c <move_window+0x74>
				return FR_DISK_ERR;
			fs->wflag = 0;
  40294c:	2300      	movs	r3, #0
  40294e:	7123      	strb	r3, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
  402950:	6a22      	ldr	r2, [r4, #32]
  402952:	69e3      	ldr	r3, [r4, #28]
  402954:	4413      	add	r3, r2
  402956:	429f      	cmp	r7, r3
  402958:	d211      	bcs.n	40297e <move_window+0x56>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
  40295a:	78e5      	ldrb	r5, [r4, #3]
  40295c:	2d01      	cmp	r5, #1
  40295e:	d90e      	bls.n	40297e <move_window+0x56>
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
  402960:	f04f 0a01 	mov.w	sl, #1
  402964:	f8df 9048 	ldr.w	r9, [pc, #72]	; 4029b0 <move_window+0x88>
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
					wsect += fs->fsize;
  402968:	69e3      	ldr	r3, [r4, #28]
  40296a:	441f      	add	r7, r3
					disk_write(fs->drv, fs->win, wsect, 1);
  40296c:	4653      	mov	r3, sl
  40296e:	463a      	mov	r2, r7
  402970:	4641      	mov	r1, r8
  402972:	7860      	ldrb	r0, [r4, #1]
  402974:	47c8      	blx	r9
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
  402976:	3d01      	subs	r5, #1
  402978:	b2ed      	uxtb	r5, r5
  40297a:	2d01      	cmp	r5, #1
  40297c:	d1f4      	bne.n	402968 <move_window+0x40>
					disk_write(fs->drv, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
  40297e:	b186      	cbz	r6, 4029a2 <move_window+0x7a>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
  402980:	2301      	movs	r3, #1
  402982:	4632      	mov	r2, r6
  402984:	f104 0130 	add.w	r1, r4, #48	; 0x30
  402988:	7860      	ldrb	r0, [r4, #1]
  40298a:	4d0a      	ldr	r5, [pc, #40]	; (4029b4 <move_window+0x8c>)
  40298c:	47a8      	blx	r5
  40298e:	b958      	cbnz	r0, 4029a8 <move_window+0x80>
				return FR_DISK_ERR;
			fs->winsect = sector;
  402990:	62e6      	str	r6, [r4, #44]	; 0x2c
  402992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		}
	}

	return FR_OK;
  402996:	2000      	movs	r0, #0
  402998:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	wsect = fs->winsect;
	if (wsect != sector) {	/* Changed current window */
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
  40299c:	2001      	movs	r0, #1
  40299e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				return FR_DISK_ERR;
			fs->winsect = sector;
		}
	}

	return FR_OK;
  4029a2:	2000      	movs	r0, #0
  4029a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			}
		}
#endif
		if (sector) {
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
				return FR_DISK_ERR;
  4029a8:	2001      	movs	r0, #1
			fs->winsect = sector;
		}
	}

	return FR_OK;
}
  4029aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4029ae:	bf00      	nop
  4029b0:	00402339 	.word	0x00402339
  4029b4:	004022c5 	.word	0x004022c5

004029b8 <get_fat>:
{
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
  4029b8:	2901      	cmp	r1, #1
  4029ba:	d95d      	bls.n	402a78 <get_fat+0xc0>

static DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
  4029bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
  4029be:	6983      	ldr	r3, [r0, #24]
  4029c0:	4299      	cmp	r1, r3
  4029c2:	d25b      	bcs.n	402a7c <get_fat+0xc4>
  4029c4:	460c      	mov	r4, r1
  4029c6:	4605      	mov	r5, r0
		return 1;

	switch (fs->fs_type) {
  4029c8:	7803      	ldrb	r3, [r0, #0]
  4029ca:	2b02      	cmp	r3, #2
  4029cc:	d028      	beq.n	402a20 <get_fat+0x68>
  4029ce:	2b03      	cmp	r3, #3
  4029d0:	d037      	beq.n	402a42 <get_fat+0x8a>
  4029d2:	2b01      	cmp	r3, #1
  4029d4:	d154      	bne.n	402a80 <get_fat+0xc8>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
  4029d6:	eb01 0751 	add.w	r7, r1, r1, lsr #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
  4029da:	6a01      	ldr	r1, [r0, #32]
  4029dc:	eb01 2157 	add.w	r1, r1, r7, lsr #9
  4029e0:	4b2f      	ldr	r3, [pc, #188]	; (402aa0 <get_fat+0xe8>)
  4029e2:	4798      	blx	r3
  4029e4:	2800      	cmp	r0, #0
  4029e6:	d14e      	bne.n	402a86 <get_fat+0xce>
		wc = fs->win[bc % SS(fs)]; bc++;
  4029e8:	f3c7 0308 	ubfx	r3, r7, #0, #9
  4029ec:	442b      	add	r3, r5
  4029ee:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
  4029f2:	3701      	adds	r7, #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
  4029f4:	6a29      	ldr	r1, [r5, #32]
  4029f6:	eb01 2157 	add.w	r1, r1, r7, lsr #9
  4029fa:	4628      	mov	r0, r5
  4029fc:	4b28      	ldr	r3, [pc, #160]	; (402aa0 <get_fat+0xe8>)
  4029fe:	4798      	blx	r3
  402a00:	2800      	cmp	r0, #0
  402a02:	d143      	bne.n	402a8c <get_fat+0xd4>
		wc |= fs->win[bc % SS(fs)] << 8;
  402a04:	f3c7 0708 	ubfx	r7, r7, #0, #9
  402a08:	19e8      	adds	r0, r5, r7
  402a0a:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
  402a0e:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
  402a12:	f014 0f01 	tst.w	r4, #1
  402a16:	bf14      	ite	ne
  402a18:	0900      	lsrne	r0, r0, #4
  402a1a:	f3c0 000b 	ubfxeq	r0, r0, #0, #12
  402a1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
  402a20:	6a01      	ldr	r1, [r0, #32]
  402a22:	eb01 2114 	add.w	r1, r1, r4, lsr #8
  402a26:	4b1e      	ldr	r3, [pc, #120]	; (402aa0 <get_fat+0xe8>)
  402a28:	4798      	blx	r3
  402a2a:	bb90      	cbnz	r0, 402a92 <get_fat+0xda>
		p = &fs->win[clst * 2 % SS(fs)];
  402a2c:	0061      	lsls	r1, r4, #1
  402a2e:	f401 71ff 	and.w	r1, r1, #510	; 0x1fe
		return LD_WORD(p);
  402a32:	186b      	adds	r3, r5, r1
  402a34:	f893 0031 	ldrb.w	r0, [r3, #49]	; 0x31
  402a38:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
  402a3c:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
  402a40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
  402a42:	6a01      	ldr	r1, [r0, #32]
  402a44:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
  402a48:	4b15      	ldr	r3, [pc, #84]	; (402aa0 <get_fat+0xe8>)
  402a4a:	4798      	blx	r3
  402a4c:	bb20      	cbnz	r0, 402a98 <get_fat+0xe0>
		p = &fs->win[clst * 4 % SS(fs)];
  402a4e:	00a1      	lsls	r1, r4, #2
  402a50:	f401 71fe 	and.w	r1, r1, #508	; 0x1fc
  402a54:	f101 0230 	add.w	r2, r1, #48	; 0x30
  402a58:	442a      	add	r2, r5
		return LD_DWORD(p) & 0x0FFFFFFF;
  402a5a:	78d0      	ldrb	r0, [r2, #3]
  402a5c:	7893      	ldrb	r3, [r2, #2]
  402a5e:	041b      	lsls	r3, r3, #16
  402a60:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
  402a64:	7850      	ldrb	r0, [r2, #1]
  402a66:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
  402a6a:	440d      	add	r5, r1
  402a6c:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
  402a70:	4318      	orrs	r0, r3
  402a72:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
  402a76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
		return 1;
  402a78:	2001      	movs	r0, #1
		p = &fs->win[clst * 4 % SS(fs)];
		return LD_DWORD(p) & 0x0FFFFFFF;
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
}
  402a7a:	4770      	bx	lr
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
		return 1;
  402a7c:	2001      	movs	r0, #1
  402a7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
		p = &fs->win[clst * 4 % SS(fs)];
		return LD_DWORD(p) & 0x0FFFFFFF;
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  402a80:	f04f 30ff 	mov.w	r0, #4294967295
  402a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402a86:	f04f 30ff 	mov.w	r0, #4294967295
  402a8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402a8c:	f04f 30ff 	mov.w	r0, #4294967295
  402a90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402a92:	f04f 30ff 	mov.w	r0, #4294967295
  402a96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402a98:	f04f 30ff 	mov.w	r0, #4294967295
}
  402a9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402a9e:	bf00      	nop
  402aa0:	00402929 	.word	0x00402929

00402aa4 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
  402aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402aa6:	4605      	mov	r5, r0
  402aa8:	460c      	mov	r4, r1
	DWORD clst;
	WORD ic;


	dj->index = idx;
  402aaa:	80c1      	strh	r1, [r0, #6]
	clst = dj->sclust;
  402aac:	6881      	ldr	r1, [r0, #8]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
  402aae:	2901      	cmp	r1, #1
  402ab0:	d038      	beq.n	402b24 <dir_sdi+0x80>
  402ab2:	6803      	ldr	r3, [r0, #0]
  402ab4:	699a      	ldr	r2, [r3, #24]
  402ab6:	4291      	cmp	r1, r2
  402ab8:	d236      	bcs.n	402b28 <dir_sdi+0x84>
		return FR_INT_ERR;
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
  402aba:	b971      	cbnz	r1, 402ada <dir_sdi+0x36>
  402abc:	781a      	ldrb	r2, [r3, #0]
  402abe:	2a03      	cmp	r2, #3
  402ac0:	d101      	bne.n	402ac6 <dir_sdi+0x22>
		clst = dj->fs->dirbase;
  402ac2:	6a59      	ldr	r1, [r3, #36]	; 0x24

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
  402ac4:	b949      	cbnz	r1, 402ada <dir_sdi+0x36>
		dj->clust = clst;
  402ac6:	2200      	movs	r2, #0
  402ac8:	60ea      	str	r2, [r5, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
  402aca:	891a      	ldrh	r2, [r3, #8]
  402acc:	42a2      	cmp	r2, r4
  402ace:	d92d      	bls.n	402b2c <dir_sdi+0x88>
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
  402ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  402ad2:	eb03 1314 	add.w	r3, r3, r4, lsr #4
  402ad6:	612b      	str	r3, [r5, #16]
  402ad8:	e01b      	b.n	402b12 <dir_sdi+0x6e>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
  402ada:	789e      	ldrb	r6, [r3, #2]
  402adc:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
  402ade:	42b4      	cmp	r4, r6
  402ae0:	d310      	bcc.n	402b04 <dir_sdi+0x60>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
  402ae2:	4f16      	ldr	r7, [pc, #88]	; (402b3c <dir_sdi+0x98>)
  402ae4:	6828      	ldr	r0, [r5, #0]
  402ae6:	47b8      	blx	r7
  402ae8:	4601      	mov	r1, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
  402aea:	f1b0 3fff 	cmp.w	r0, #4294967295
  402aee:	d01f      	beq.n	402b30 <dir_sdi+0x8c>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
  402af0:	2801      	cmp	r0, #1
  402af2:	d91f      	bls.n	402b34 <dir_sdi+0x90>
  402af4:	682b      	ldr	r3, [r5, #0]
  402af6:	699b      	ldr	r3, [r3, #24]
  402af8:	4298      	cmp	r0, r3
  402afa:	d21d      	bcs.n	402b38 <dir_sdi+0x94>
				return FR_INT_ERR;
			idx -= ic;
  402afc:	1ba4      	subs	r4, r4, r6
  402afe:	b2a4      	uxth	r4, r4
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
  402b00:	42a6      	cmp	r6, r4
  402b02:	d9ef      	bls.n	402ae4 <dir_sdi+0x40>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
  402b04:	60e9      	str	r1, [r5, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
  402b06:	6828      	ldr	r0, [r5, #0]
  402b08:	4b0d      	ldr	r3, [pc, #52]	; (402b40 <dir_sdi+0x9c>)
  402b0a:	4798      	blx	r3
  402b0c:	eb00 1014 	add.w	r0, r0, r4, lsr #4
  402b10:	6128      	str	r0, [r5, #16]
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
  402b12:	682b      	ldr	r3, [r5, #0]
  402b14:	3330      	adds	r3, #48	; 0x30
  402b16:	f004 040f 	and.w	r4, r4, #15
  402b1a:	eb03 1444 	add.w	r4, r3, r4, lsl #5
  402b1e:	616c      	str	r4, [r5, #20]

	return FR_OK;	/* Seek succeeded */
  402b20:	2000      	movs	r0, #0
  402b22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}


	dj->index = idx;
	clst = dj->sclust;
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
		return FR_INT_ERR;
  402b24:	2002      	movs	r0, #2
  402b26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402b28:	2002      	movs	r0, #2
  402b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		clst = dj->fs->dirbase;

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
		dj->clust = clst;
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
			return FR_INT_ERR;
  402b2c:	2002      	movs	r0, #2
  402b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
  402b30:	2001      	movs	r0, #1
  402b32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
				return FR_INT_ERR;
  402b34:	2002      	movs	r0, #2
  402b36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402b38:	2002      	movs	r0, #2
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */

	return FR_OK;	/* Seek succeeded */
}
  402b3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402b3c:	004029b9 	.word	0x004029b9
  402b40:	00402499 	.word	0x00402499

00402b44 <put_fat>:
static FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
  402b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
  402b48:	2901      	cmp	r1, #1
  402b4a:	d979      	bls.n	402c40 <put_fat+0xfc>
  402b4c:	6983      	ldr	r3, [r0, #24]
  402b4e:	4299      	cmp	r1, r3
  402b50:	d278      	bcs.n	402c44 <put_fat+0x100>
  402b52:	4615      	mov	r5, r2
  402b54:	460c      	mov	r4, r1
  402b56:	4606      	mov	r6, r0
		res = FR_INT_ERR;

	} else {
		switch (fs->fs_type) {
  402b58:	7803      	ldrb	r3, [r0, #0]
  402b5a:	2b02      	cmp	r3, #2
  402b5c:	d03b      	beq.n	402bd6 <put_fat+0x92>
  402b5e:	2b03      	cmp	r3, #3
  402b60:	d04a      	beq.n	402bf8 <put_fat+0xb4>
  402b62:	2b01      	cmp	r3, #1
  402b64:	d164      	bne.n	402c30 <put_fat+0xec>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
  402b66:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  402b6a:	6a01      	ldr	r1, [r0, #32]
  402b6c:	eb01 2158 	add.w	r1, r1, r8, lsr #9
  402b70:	4b3f      	ldr	r3, [pc, #252]	; (402c70 <put_fat+0x12c>)
  402b72:	4798      	blx	r3
			if (res != FR_OK) break;
  402b74:	4607      	mov	r7, r0
  402b76:	2800      	cmp	r0, #0
  402b78:	d15f      	bne.n	402c3a <put_fat+0xf6>
			p = &fs->win[bc % SS(fs)];
  402b7a:	f3c8 0308 	ubfx	r3, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
  402b7e:	f014 0f01 	tst.w	r4, #1
  402b82:	d015      	beq.n	402bb0 <put_fat+0x6c>
  402b84:	4433      	add	r3, r6
  402b86:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
  402b8a:	f002 020f 	and.w	r2, r2, #15
  402b8e:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  402b92:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			bc++;
  402b96:	f108 0801 	add.w	r8, r8, #1
			fs->wflag = 1;
  402b9a:	2301      	movs	r3, #1
  402b9c:	7133      	strb	r3, [r6, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  402b9e:	6a31      	ldr	r1, [r6, #32]
  402ba0:	eb01 2158 	add.w	r1, r1, r8, lsr #9
  402ba4:	4630      	mov	r0, r6
  402ba6:	4b32      	ldr	r3, [pc, #200]	; (402c70 <put_fat+0x12c>)
  402ba8:	4798      	blx	r3
			if (res != FR_OK) break;
  402baa:	2800      	cmp	r0, #0
  402bac:	d142      	bne.n	402c34 <put_fat+0xf0>
  402bae:	e04b      	b.n	402c48 <put_fat+0x104>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
			if (res != FR_OK) break;
			p = &fs->win[bc % SS(fs)];
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
  402bb0:	4433      	add	r3, r6
  402bb2:	f883 5030 	strb.w	r5, [r3, #48]	; 0x30
			bc++;
  402bb6:	f108 0801 	add.w	r8, r8, #1
			fs->wflag = 1;
  402bba:	2301      	movs	r3, #1
  402bbc:	7133      	strb	r3, [r6, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  402bbe:	6a31      	ldr	r1, [r6, #32]
  402bc0:	eb01 2158 	add.w	r1, r1, r8, lsr #9
  402bc4:	4630      	mov	r0, r6
  402bc6:	4b2a      	ldr	r3, [pc, #168]	; (402c70 <put_fat+0x12c>)
  402bc8:	4798      	blx	r3
			if (res != FR_OK) break;
  402bca:	bba8      	cbnz	r0, 402c38 <put_fat+0xf4>
  402bcc:	e041      	b.n	402c52 <put_fat+0x10e>
			p = &fs->win[bc % SS(fs)];
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
  402bce:	44b0      	add	r8, r6
  402bd0:	f888 2030 	strb.w	r2, [r8, #48]	; 0x30
			break;
  402bd4:	e031      	b.n	402c3a <put_fat+0xf6>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
  402bd6:	6a01      	ldr	r1, [r0, #32]
  402bd8:	eb01 2114 	add.w	r1, r1, r4, lsr #8
  402bdc:	4b24      	ldr	r3, [pc, #144]	; (402c70 <put_fat+0x12c>)
  402bde:	4798      	blx	r3
			if (res != FR_OK) break;
  402be0:	4607      	mov	r7, r0
  402be2:	bb50      	cbnz	r0, 402c3a <put_fat+0xf6>
			p = &fs->win[clst * 2 % SS(fs)];
  402be4:	0061      	lsls	r1, r4, #1
  402be6:	f401 71ff 	and.w	r1, r1, #510	; 0x1fe
			ST_WORD(p, (WORD)val);
  402bea:	1873      	adds	r3, r6, r1
  402bec:	f883 5030 	strb.w	r5, [r3, #48]	; 0x30
  402bf0:	122a      	asrs	r2, r5, #8
  402bf2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			break;
  402bf6:	e020      	b.n	402c3a <put_fat+0xf6>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
  402bf8:	6a01      	ldr	r1, [r0, #32]
  402bfa:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
  402bfe:	4b1c      	ldr	r3, [pc, #112]	; (402c70 <put_fat+0x12c>)
  402c00:	4798      	blx	r3
			if (res != FR_OK) break;
  402c02:	4607      	mov	r7, r0
  402c04:	b9c8      	cbnz	r0, 402c3a <put_fat+0xf6>
			p = &fs->win[clst * 4 % SS(fs)];
  402c06:	00a1      	lsls	r1, r4, #2
  402c08:	f401 71fe 	and.w	r1, r1, #508	; 0x1fc
  402c0c:	f101 0330 	add.w	r3, r1, #48	; 0x30
  402c10:	4433      	add	r3, r6
			val |= LD_DWORD(p) & 0xF0000000;
  402c12:	78da      	ldrb	r2, [r3, #3]
  402c14:	0612      	lsls	r2, r2, #24
  402c16:	4431      	add	r1, r6
  402c18:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
  402c1c:	432a      	orrs	r2, r5
			ST_DWORD(p, val);
  402c1e:	f881 2030 	strb.w	r2, [r1, #48]	; 0x30
  402c22:	1211      	asrs	r1, r2, #8
  402c24:	7059      	strb	r1, [r3, #1]
  402c26:	0c11      	lsrs	r1, r2, #16
  402c28:	7099      	strb	r1, [r3, #2]
  402c2a:	0e12      	lsrs	r2, r2, #24
  402c2c:	70da      	strb	r2, [r3, #3]
			break;
  402c2e:	e004      	b.n	402c3a <put_fat+0xf6>

		default :
			res = FR_INT_ERR;
  402c30:	2702      	movs	r7, #2
  402c32:	e002      	b.n	402c3a <put_fat+0xf6>
			if (res != FR_OK) break;
			p = &fs->win[bc % SS(fs)];
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
			bc++;
			fs->wflag = 1;
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  402c34:	4607      	mov	r7, r0
  402c36:	e000      	b.n	402c3a <put_fat+0xf6>
  402c38:	4607      	mov	r7, r0
			break;

		default :
			res = FR_INT_ERR;
		}
		fs->wflag = 1;
  402c3a:	2301      	movs	r3, #1
  402c3c:	7133      	strb	r3, [r6, #4]
  402c3e:	e014      	b.n	402c6a <put_fat+0x126>
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;
  402c40:	2702      	movs	r7, #2
  402c42:	e012      	b.n	402c6a <put_fat+0x126>
  402c44:	2702      	movs	r7, #2
			res = FR_INT_ERR;
		}
		fs->wflag = 1;
	}

	return res;
  402c46:	e010      	b.n	402c6a <put_fat+0x126>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
			bc++;
			fs->wflag = 1;
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
			if (res != FR_OK) break;
			p = &fs->win[bc % SS(fs)];
  402c48:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
  402c4c:	f3c5 1207 	ubfx	r2, r5, #4, #8
  402c50:	e7bd      	b.n	402bce <put_fat+0x8a>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
			bc++;
			fs->wflag = 1;
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
			if (res != FR_OK) break;
			p = &fs->win[bc % SS(fs)];
  402c52:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
  402c56:	eb06 0308 	add.w	r3, r6, r8
  402c5a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
  402c5e:	f023 030f 	bic.w	r3, r3, #15
  402c62:	f3c5 2203 	ubfx	r2, r5, #8, #4
  402c66:	431a      	orrs	r2, r3
  402c68:	e7b1      	b.n	402bce <put_fat+0x8a>
		}
		fs->wflag = 1;
	}

	return res;
}
  402c6a:	4638      	mov	r0, r7
  402c6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402c70:	00402929 	.word	0x00402929

00402c74 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
  402c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402c78:	4605      	mov	r5, r0
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
  402c7a:	4688      	mov	r8, r1
  402c7c:	b931      	cbnz	r1, 402c8c <create_chain+0x18>
		scl = fs->last_clust;			/* Get suggested start point */
  402c7e:	68c6      	ldr	r6, [r0, #12]
		if (!scl || scl >= fs->n_fatent) scl = 1;
  402c80:	b16e      	cbz	r6, 402c9e <create_chain+0x2a>
  402c82:	6983      	ldr	r3, [r0, #24]
  402c84:	429e      	cmp	r6, r3
  402c86:	bf28      	it	cs
  402c88:	2601      	movcs	r6, #1
  402c8a:	e009      	b.n	402ca0 <create_chain+0x2c>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
  402c8c:	4b29      	ldr	r3, [pc, #164]	; (402d34 <create_chain+0xc0>)
  402c8e:	4798      	blx	r3
		if (cs < 2) return 1;			/* It is an invalid cluster */
  402c90:	2801      	cmp	r0, #1
  402c92:	d940      	bls.n	402d16 <create_chain+0xa2>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
  402c94:	69ab      	ldr	r3, [r5, #24]
  402c96:	4298      	cmp	r0, r3
  402c98:	d34a      	bcc.n	402d30 <create_chain+0xbc>
		scl = clst;
  402c9a:	4646      	mov	r6, r8
  402c9c:	e000      	b.n	402ca0 <create_chain+0x2c>
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
		scl = fs->last_clust;			/* Get suggested start point */
		if (!scl || scl >= fs->n_fatent) scl = 1;
  402c9e:	2601      	movs	r6, #1
		if (cs < 2) return 1;			/* It is an invalid cluster */
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
  402ca0:	4634      	mov	r4, r6
		ncl++;							/* Next cluster */
		if (ncl >= fs->n_fatent) {		/* Wrap around */
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
  402ca2:	4f24      	ldr	r7, [pc, #144]	; (402d34 <create_chain+0xc0>)
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
  402ca4:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
  402ca6:	69ab      	ldr	r3, [r5, #24]
  402ca8:	429c      	cmp	r4, r3
  402caa:	d302      	bcc.n	402cb2 <create_chain+0x3e>
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
  402cac:	2e01      	cmp	r6, #1
  402cae:	d935      	bls.n	402d1c <create_chain+0xa8>

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= fs->n_fatent) {		/* Wrap around */
			ncl = 2;
  402cb0:	2402      	movs	r4, #2
			if (ncl > scl) return 0;	/* No free cluster */
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
  402cb2:	4621      	mov	r1, r4
  402cb4:	4628      	mov	r0, r5
  402cb6:	47b8      	blx	r7
		if (cs == 0) break;				/* Found a free cluster */
  402cb8:	4603      	mov	r3, r0
  402cba:	b138      	cbz	r0, 402ccc <create_chain+0x58>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
  402cbc:	f1b0 3fff 	cmp.w	r0, #4294967295
  402cc0:	d02f      	beq.n	402d22 <create_chain+0xae>
  402cc2:	2801      	cmp	r0, #1
  402cc4:	d02d      	beq.n	402d22 <create_chain+0xae>
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
  402cc6:	42b4      	cmp	r4, r6
  402cc8:	d1ec      	bne.n	402ca4 <create_chain+0x30>
  402cca:	e02d      	b.n	402d28 <create_chain+0xb4>
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
  402ccc:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
  402cd0:	4621      	mov	r1, r4
  402cd2:	4628      	mov	r0, r5
  402cd4:	4b18      	ldr	r3, [pc, #96]	; (402d38 <create_chain+0xc4>)
  402cd6:	4798      	blx	r3
	if (res == FR_OK && clst != 0) {
  402cd8:	4603      	mov	r3, r0
  402cda:	b940      	cbnz	r0, 402cee <create_chain+0x7a>
  402cdc:	f1b8 0f00 	cmp.w	r8, #0
  402ce0:	d005      	beq.n	402cee <create_chain+0x7a>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
  402ce2:	4622      	mov	r2, r4
  402ce4:	4641      	mov	r1, r8
  402ce6:	4628      	mov	r0, r5
  402ce8:	4b13      	ldr	r3, [pc, #76]	; (402d38 <create_chain+0xc4>)
  402cea:	4798      	blx	r3
  402cec:	4603      	mov	r3, r0
	}
	if (res == FR_OK) {
  402cee:	b95b      	cbnz	r3, 402d08 <create_chain+0x94>
		fs->last_clust = ncl;			/* Update FSINFO */
  402cf0:	60ec      	str	r4, [r5, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
  402cf2:	692b      	ldr	r3, [r5, #16]
  402cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
  402cf8:	d019      	beq.n	402d2e <create_chain+0xba>
			fs->free_clust--;
  402cfa:	3b01      	subs	r3, #1
  402cfc:	612b      	str	r3, [r5, #16]
			fs->fsi_flag = 1;
  402cfe:	2301      	movs	r3, #1
  402d00:	716b      	strb	r3, [r5, #5]
  402d02:	4620      	mov	r0, r4
  402d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
  402d08:	2b01      	cmp	r3, #1
  402d0a:	bf0c      	ite	eq
  402d0c:	f04f 30ff 	moveq.w	r0, #4294967295
  402d10:	2001      	movne	r0, #1
  402d12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		scl = fs->last_clust;			/* Get suggested start point */
		if (!scl || scl >= fs->n_fatent) scl = 1;
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
		if (cs < 2) return 1;			/* It is an invalid cluster */
  402d16:	2001      	movs	r0, #1
  402d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= fs->n_fatent) {		/* Wrap around */
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
  402d1c:	2000      	movs	r0, #0
  402d1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
  402d22:	4618      	mov	r0, r3
  402d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cs == 0) break;				/* Found a free cluster */
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
  402d28:	2000      	movs	r0, #0
  402d2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402d2e:	4620      	mov	r0, r4
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
	}

	return ncl;		/* Return new cluster number or error code */
}
  402d30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402d34:	004029b9 	.word	0x004029b9
  402d38:	00402b45 	.word	0x00402b45

00402d3c <remove_chain>:
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
  402d3c:	2901      	cmp	r1, #1
  402d3e:	d928      	bls.n	402d92 <remove_chain+0x56>
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
  402d40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402d44:	4604      	mov	r4, r0
  402d46:	460e      	mov	r6, r1
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
  402d48:	6983      	ldr	r3, [r0, #24]
  402d4a:	4299      	cmp	r1, r3
  402d4c:	d224      	bcs.n	402d98 <remove_chain+0x5c>
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
  402d4e:	4f17      	ldr	r7, [pc, #92]	; (402dac <remove_chain+0x70>)
			if (nxt == 0) break;				/* Empty cluster? */
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
  402d50:	f04f 0900 	mov.w	r9, #0
  402d54:	f8df 8058 	ldr.w	r8, [pc, #88]	; 402db0 <remove_chain+0x74>
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
  402d58:	4631      	mov	r1, r6
  402d5a:	4620      	mov	r0, r4
  402d5c:	47b8      	blx	r7
			if (nxt == 0) break;				/* Empty cluster? */
  402d5e:	4605      	mov	r5, r0
  402d60:	b1e0      	cbz	r0, 402d9c <remove_chain+0x60>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
  402d62:	2801      	cmp	r0, #1
  402d64:	d01c      	beq.n	402da0 <remove_chain+0x64>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
  402d66:	f1b0 3fff 	cmp.w	r0, #4294967295
  402d6a:	d01b      	beq.n	402da4 <remove_chain+0x68>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
  402d6c:	464a      	mov	r2, r9
  402d6e:	4631      	mov	r1, r6
  402d70:	4620      	mov	r0, r4
  402d72:	47c0      	blx	r8
			if (res != FR_OK) break;
  402d74:	4602      	mov	r2, r0
  402d76:	b9b0      	cbnz	r0, 402da6 <remove_chain+0x6a>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
  402d78:	6923      	ldr	r3, [r4, #16]
  402d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
  402d7e:	d003      	beq.n	402d88 <remove_chain+0x4c>
				fs->free_clust++;
  402d80:	3301      	adds	r3, #1
  402d82:	6123      	str	r3, [r4, #16]
				fs->fsi_flag = 1;
  402d84:	2301      	movs	r3, #1
  402d86:	7163      	strb	r3, [r4, #5]
  402d88:	462e      	mov	r6, r5
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
  402d8a:	69a3      	ldr	r3, [r4, #24]
  402d8c:	42ab      	cmp	r3, r5
  402d8e:	d8e3      	bhi.n	402d58 <remove_chain+0x1c>
  402d90:	e009      	b.n	402da6 <remove_chain+0x6a>
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;
  402d92:	2202      	movs	r2, #2
			clst = nxt;	/* Next cluster */
		}
	}

	return res;
}
  402d94:	4610      	mov	r0, r2
  402d96:	4770      	bx	lr
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;
  402d98:	2202      	movs	r2, #2
  402d9a:	e004      	b.n	402da6 <remove_chain+0x6a>
  402d9c:	2200      	movs	r2, #0
  402d9e:	e002      	b.n	402da6 <remove_chain+0x6a>
	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
			if (nxt == 0) break;				/* Empty cluster? */
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
  402da0:	2202      	movs	r2, #2
  402da2:	e000      	b.n	402da6 <remove_chain+0x6a>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
  402da4:	2201      	movs	r2, #1
			clst = nxt;	/* Next cluster */
		}
	}

	return res;
}
  402da6:	4610      	mov	r0, r2
  402da8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402dac:	004029b9 	.word	0x004029b9
  402db0:	00402b45 	.word	0x00402b45

00402db4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
  402db4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
  402db8:	88c4      	ldrh	r4, [r0, #6]
  402dba:	3401      	adds	r4, #1
  402dbc:	b2a4      	uxth	r4, r4
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
  402dbe:	2c00      	cmp	r4, #0
  402dc0:	d06e      	beq.n	402ea0 <dir_next+0xec>
  402dc2:	6903      	ldr	r3, [r0, #16]
  402dc4:	2b00      	cmp	r3, #0
  402dc6:	d06e      	beq.n	402ea6 <dir_next+0xf2>
  402dc8:	460e      	mov	r6, r1
  402dca:	4605      	mov	r5, r0
		return FR_NO_FILE;

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
  402dcc:	f014 070f 	ands.w	r7, r4, #15
  402dd0:	d15d      	bne.n	402e8e <dir_next+0xda>
		dj->sect++;					/* Next sector */
  402dd2:	3301      	adds	r3, #1
  402dd4:	6103      	str	r3, [r0, #16]

		if (dj->clust == 0) {	/* Static table */
  402dd6:	68c1      	ldr	r1, [r0, #12]
  402dd8:	b921      	cbnz	r1, 402de4 <dir_next+0x30>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
  402dda:	6803      	ldr	r3, [r0, #0]
  402ddc:	891b      	ldrh	r3, [r3, #8]
  402dde:	42a3      	cmp	r3, r4
  402de0:	d964      	bls.n	402eac <dir_next+0xf8>
  402de2:	e054      	b.n	402e8e <dir_next+0xda>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
  402de4:	6800      	ldr	r0, [r0, #0]
  402de6:	7883      	ldrb	r3, [r0, #2]
  402de8:	3b01      	subs	r3, #1
  402dea:	ea13 1314 	ands.w	r3, r3, r4, lsr #4
  402dee:	d14e      	bne.n	402e8e <dir_next+0xda>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
  402df0:	4b3c      	ldr	r3, [pc, #240]	; (402ee4 <dir_next+0x130>)
  402df2:	4798      	blx	r3
  402df4:	4680      	mov	r8, r0
				if (clst <= 1) return FR_INT_ERR;
  402df6:	2801      	cmp	r0, #1
  402df8:	d95b      	bls.n	402eb2 <dir_next+0xfe>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  402dfa:	f1b0 3fff 	cmp.w	r0, #4294967295
  402dfe:	d05b      	beq.n	402eb8 <dir_next+0x104>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
  402e00:	6828      	ldr	r0, [r5, #0]
  402e02:	6983      	ldr	r3, [r0, #24]
  402e04:	4598      	cmp	r8, r3
  402e06:	d33b      	bcc.n	402e80 <dir_next+0xcc>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
  402e08:	2e00      	cmp	r6, #0
  402e0a:	d058      	beq.n	402ebe <dir_next+0x10a>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
  402e0c:	68e9      	ldr	r1, [r5, #12]
  402e0e:	4b36      	ldr	r3, [pc, #216]	; (402ee8 <dir_next+0x134>)
  402e10:	4798      	blx	r3
					if (clst == 0) return FR_DENIED;			/* No free cluster */
  402e12:	4680      	mov	r8, r0
  402e14:	2800      	cmp	r0, #0
  402e16:	d055      	beq.n	402ec4 <dir_next+0x110>
					if (clst == 1) return FR_INT_ERR;
  402e18:	2801      	cmp	r0, #1
  402e1a:	d056      	beq.n	402eca <dir_next+0x116>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  402e1c:	f1b0 3fff 	cmp.w	r0, #4294967295
  402e20:	d056      	beq.n	402ed0 <dir_next+0x11c>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
  402e22:	2100      	movs	r1, #0
  402e24:	6828      	ldr	r0, [r5, #0]
  402e26:	4b31      	ldr	r3, [pc, #196]	; (402eec <dir_next+0x138>)
  402e28:	4798      	blx	r3
  402e2a:	2800      	cmp	r0, #0
  402e2c:	d153      	bne.n	402ed6 <dir_next+0x122>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
  402e2e:	6828      	ldr	r0, [r5, #0]
  402e30:	f44f 7200 	mov.w	r2, #512	; 0x200
  402e34:	2100      	movs	r1, #0
  402e36:	3030      	adds	r0, #48	; 0x30
  402e38:	4b2d      	ldr	r3, [pc, #180]	; (402ef0 <dir_next+0x13c>)
  402e3a:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
  402e3c:	682e      	ldr	r6, [r5, #0]
  402e3e:	4641      	mov	r1, r8
  402e40:	4630      	mov	r0, r6
  402e42:	4b2c      	ldr	r3, [pc, #176]	; (402ef4 <dir_next+0x140>)
  402e44:	4798      	blx	r3
  402e46:	62f0      	str	r0, [r6, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
  402e48:	2600      	movs	r6, #0
						dj->fs->wflag = 1;
  402e4a:	f04f 0b01 	mov.w	fp, #1
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
  402e4e:	46b2      	mov	sl, r6
  402e50:	f8df 9098 	ldr.w	r9, [pc, #152]	; 402eec <dir_next+0x138>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
  402e54:	e00b      	b.n	402e6e <dir_next+0xba>
						dj->fs->wflag = 1;
  402e56:	f883 b004 	strb.w	fp, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
  402e5a:	4651      	mov	r1, sl
  402e5c:	6828      	ldr	r0, [r5, #0]
  402e5e:	47c8      	blx	r9
  402e60:	3601      	adds	r6, #1
  402e62:	2800      	cmp	r0, #0
  402e64:	d13a      	bne.n	402edc <dir_next+0x128>
						dj->fs->winsect++;
  402e66:	682a      	ldr	r2, [r5, #0]
  402e68:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  402e6a:	3301      	adds	r3, #1
  402e6c:	62d3      	str	r3, [r2, #44]	; 0x2c
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
  402e6e:	682b      	ldr	r3, [r5, #0]
  402e70:	7899      	ldrb	r1, [r3, #2]
  402e72:	b2f2      	uxtb	r2, r6
  402e74:	4291      	cmp	r1, r2
  402e76:	d8ee      	bhi.n	402e56 <dir_next+0xa2>
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
						dj->fs->winsect++;
					}
					dj->fs->winsect -= c;						/* Rewind window address */
  402e78:	4616      	mov	r6, r2
  402e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  402e7c:	1b96      	subs	r6, r2, r6
  402e7e:	62de      	str	r6, [r3, #44]	; 0x2c
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
  402e80:	f8c5 800c 	str.w	r8, [r5, #12]
				dj->sect = clust2sect(dj->fs, clst);
  402e84:	4641      	mov	r1, r8
  402e86:	6828      	ldr	r0, [r5, #0]
  402e88:	4b1a      	ldr	r3, [pc, #104]	; (402ef4 <dir_next+0x140>)
  402e8a:	4798      	blx	r3
  402e8c:	6128      	str	r0, [r5, #16]
			}
		}
	}

	dj->index = i;
  402e8e:	80ec      	strh	r4, [r5, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
  402e90:	682b      	ldr	r3, [r5, #0]
  402e92:	3330      	adds	r3, #48	; 0x30
  402e94:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  402e98:	616b      	str	r3, [r5, #20]

	return FR_OK;
  402e9a:	2000      	movs	r0, #0
  402e9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
		return FR_NO_FILE;
  402ea0:	2004      	movs	r0, #4
  402ea2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402ea6:	2004      	movs	r0, #4
  402ea8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
		dj->sect++;					/* Next sector */

		if (dj->clust == 0) {	/* Static table */
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
				return FR_NO_FILE;
  402eac:	2004      	movs	r0, #4
  402eae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
				if (clst <= 1) return FR_INT_ERR;
  402eb2:	2002      	movs	r0, #2
  402eb4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  402eb8:	2001      	movs	r0, #1
  402eba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
  402ebe:	2004      	movs	r0, #4
  402ec0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
					if (clst == 0) return FR_DENIED;			/* No free cluster */
  402ec4:	2007      	movs	r0, #7
  402ec6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (clst == 1) return FR_INT_ERR;
  402eca:	2002      	movs	r0, #2
  402ecc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  402ed0:	2001      	movs	r0, #1
  402ed2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
  402ed6:	2001      	movs	r0, #1
  402ed8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
  402edc:	2001      	movs	r0, #1

	dj->index = i;
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;

	return FR_OK;
}
  402ede:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402ee2:	bf00      	nop
  402ee4:	004029b9 	.word	0x004029b9
  402ee8:	00402c75 	.word	0x00402c75
  402eec:	00402929 	.word	0x00402929
  402ef0:	00402489 	.word	0x00402489
  402ef4:	00402499 	.word	0x00402499

00402ef8 <dir_find>:

static
FRESULT dir_find (
	DIR *dj			/* Pointer to the directory object linked to the file name */
)
{
  402ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402efc:	b085      	sub	sp, #20
  402efe:	4605      	mov	r5, r0
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
  402f00:	2100      	movs	r1, #0
  402f02:	4b64      	ldr	r3, [pc, #400]	; (403094 <dir_find+0x19c>)
  402f04:	4798      	blx	r3
	if (res != FR_OK) return res;
  402f06:	2800      	cmp	r0, #0
  402f08:	f040 80a4 	bne.w	403054 <dir_find+0x15c>
  402f0c:	f04f 0bff 	mov.w	fp, #255	; 0xff
  402f10:	46d9      	mov	r9, fp

#if _USE_LFN
	ord = sum = 0xFF;
#endif
	do {
		res = move_window(dj->fs, dj->sect);
  402f12:	4f61      	ldr	r7, [pc, #388]	; (403098 <dir_find+0x1a0>)
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
		if (wc) {	/* Last char has not been processed */
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
  402f14:	46da      	mov	sl, fp

#if _USE_LFN
	ord = sum = 0xFF;
#endif
	do {
		res = move_window(dj->fs, dj->sect);
  402f16:	6929      	ldr	r1, [r5, #16]
  402f18:	6828      	ldr	r0, [r5, #0]
  402f1a:	47b8      	blx	r7
		if (res != FR_OK) break;
  402f1c:	2800      	cmp	r0, #0
  402f1e:	f040 809a 	bne.w	403056 <dir_find+0x15e>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
  402f22:	696c      	ldr	r4, [r5, #20]
		c = dir[DIR_Name];
  402f24:	7826      	ldrb	r6, [r4, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
  402f26:	2e00      	cmp	r6, #0
  402f28:	f000 8096 	beq.w	403058 <dir_find+0x160>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
  402f2c:	7ae3      	ldrb	r3, [r4, #11]
  402f2e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
  402f32:	2ee5      	cmp	r6, #229	; 0xe5
  402f34:	d078      	beq.n	403028 <dir_find+0x130>
  402f36:	f013 0f08 	tst.w	r3, #8
  402f3a:	d001      	beq.n	402f40 <dir_find+0x48>
  402f3c:	2a0f      	cmp	r2, #15
  402f3e:	d176      	bne.n	40302e <dir_find+0x136>
			ord = 0xFF;
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
  402f40:	2a0f      	cmp	r2, #15
  402f42:	d153      	bne.n	402fec <dir_find+0xf4>
				if (dj->lfn) {
  402f44:	f8d5 801c 	ldr.w	r8, [r5, #28]
  402f48:	f1b8 0f00 	cmp.w	r8, #0
  402f4c:	d07a      	beq.n	403044 <dir_find+0x14c>
					if (c & LLE) {		/* Is it start of LFN sequence? */
  402f4e:	f016 0f40 	tst.w	r6, #64	; 0x40
  402f52:	d006      	beq.n	402f62 <dir_find+0x6a>
						sum = dir[LDIR_Chksum];
  402f54:	f894 a00d 	ldrb.w	sl, [r4, #13]
						c &= ~LLE; ord = c;	/* LFN start order */
  402f58:	f006 06bf 	and.w	r6, r6, #191	; 0xbf
						dj->lfn_idx = dj->index;
  402f5c:	88eb      	ldrh	r3, [r5, #6]
  402f5e:	842b      	strh	r3, [r5, #32]
  402f60:	e001      	b.n	402f66 <dir_find+0x6e>
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
  402f62:	45b1      	cmp	r9, r6
  402f64:	d166      	bne.n	403034 <dir_find+0x13c>
  402f66:	f894 b00d 	ldrb.w	fp, [r4, #13]
  402f6a:	45d3      	cmp	fp, sl
  402f6c:	d165      	bne.n	40303a <dir_find+0x142>
{
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
  402f6e:	7823      	ldrb	r3, [r4, #0]
  402f70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  402f74:	3b01      	subs	r3, #1
  402f76:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
  402f7a:	eb03 038a 	add.w	r3, r3, sl, lsl #2
  402f7e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 4030a8 <dir_find+0x1b0>
  402f82:	f109 0a0d 	add.w	sl, r9, #13
	s = 0; wc = 1;
  402f86:	2001      	movs	r0, #1
		if (wc) {	/* Last char has not been processed */
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
				return 0;				/* Not matched */
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
  402f88:	9603      	str	r6, [sp, #12]
  402f8a:	f8cd b004 	str.w	fp, [sp, #4]
  402f8e:	461e      	mov	r6, r3
  402f90:	9502      	str	r5, [sp, #8]


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
  402f92:	f819 2b01 	ldrb.w	r2, [r9], #1
  402f96:	18a3      	adds	r3, r4, r2
  402f98:	7859      	ldrb	r1, [r3, #1]
  402f9a:	5ca3      	ldrb	r3, [r4, r2]
  402f9c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
		if (wc) {	/* Last char has not been processed */
  402fa0:	b170      	cbz	r0, 402fc0 <dir_find+0xc8>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
  402fa2:	4618      	mov	r0, r3
  402fa4:	4b3d      	ldr	r3, [pc, #244]	; (40309c <dir_find+0x1a4>)
  402fa6:	4798      	blx	r3
  402fa8:	4683      	mov	fp, r0
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
  402faa:	2efe      	cmp	r6, #254	; 0xfe
  402fac:	d85f      	bhi.n	40306e <dir_find+0x176>
  402fae:	1c75      	adds	r5, r6, #1
  402fb0:	f838 0016 	ldrh.w	r0, [r8, r6, lsl #1]
  402fb4:	4b39      	ldr	r3, [pc, #228]	; (40309c <dir_find+0x1a4>)
  402fb6:	4798      	blx	r3
  402fb8:	4583      	cmp	fp, r0
  402fba:	d15c      	bne.n	403076 <dir_find+0x17e>
  402fbc:	462e      	mov	r6, r5
  402fbe:	e003      	b.n	402fc8 <dir_find+0xd0>
				return 0;				/* Not matched */
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
  402fc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
  402fc4:	4293      	cmp	r3, r2
  402fc6:	d15a      	bne.n	40307e <dir_find+0x186>
		}
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
  402fc8:	45d1      	cmp	r9, sl
  402fca:	d1e2      	bne.n	402f92 <dir_find+0x9a>
  402fcc:	f8dd b004 	ldr.w	fp, [sp, #4]
  402fd0:	4632      	mov	r2, r6
  402fd2:	9e03      	ldr	r6, [sp, #12]
  402fd4:	9d02      	ldr	r5, [sp, #8]

	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
  402fd6:	7823      	ldrb	r3, [r4, #0]
  402fd8:	f013 0f40 	tst.w	r3, #64	; 0x40
  402fdc:	d042      	beq.n	403064 <dir_find+0x16c>
  402fde:	2800      	cmp	r0, #0
  402fe0:	d040      	beq.n	403064 <dir_find+0x16c>
  402fe2:	f838 3012 	ldrh.w	r3, [r8, r2, lsl #1]
  402fe6:	2b00      	cmp	r3, #0
  402fe8:	d03c      	beq.n	403064 <dir_find+0x16c>
  402fea:	e04b      	b.n	403084 <dir_find+0x18c>
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
  402fec:	f1b9 0f00 	cmp.w	r9, #0
  402ff0:	d104      	bne.n	402ffc <dir_find+0x104>
  402ff2:	4620      	mov	r0, r4
  402ff4:	4b2a      	ldr	r3, [pc, #168]	; (4030a0 <dir_find+0x1a8>)
  402ff6:	4798      	blx	r3
  402ff8:	4582      	cmp	sl, r0
  402ffa:	d02f      	beq.n	40305c <dir_find+0x164>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
  402ffc:	f64f 73ff 	movw	r3, #65535	; 0xffff
  403000:	842b      	strh	r3, [r5, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
  403002:	69ab      	ldr	r3, [r5, #24]
  403004:	7ada      	ldrb	r2, [r3, #11]
  403006:	f012 0f01 	tst.w	r2, #1
  40300a:	d119      	bne.n	403040 <dir_find+0x148>
  40300c:	f104 000b 	add.w	r0, r4, #11
  403010:	e001      	b.n	403016 <dir_find+0x11e>
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	while (cnt-- && (r = *d++ - *s++) == 0) ;
  403012:	42a0      	cmp	r0, r4
  403014:	d024      	beq.n	403060 <dir_find+0x168>
  403016:	f814 1b01 	ldrb.w	r1, [r4], #1
  40301a:	f813 2b01 	ldrb.w	r2, [r3], #1
  40301e:	4291      	cmp	r1, r2
  403020:	d0f7      	beq.n	403012 <dir_find+0x11a>
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
  403022:	f04f 09ff 	mov.w	r9, #255	; 0xff
  403026:	e00d      	b.n	403044 <dir_find+0x14c>
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
			ord = 0xFF;
  403028:	f04f 09ff 	mov.w	r9, #255	; 0xff
  40302c:	e00a      	b.n	403044 <dir_find+0x14c>
  40302e:	f04f 09ff 	mov.w	r9, #255	; 0xff
  403032:	e007      	b.n	403044 <dir_find+0x14c>
						sum = dir[LDIR_Chksum];
						c &= ~LLE; ord = c;	/* LFN start order */
						dj->lfn_idx = dj->index;
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
  403034:	f04f 09ff 	mov.w	r9, #255	; 0xff
  403038:	e004      	b.n	403044 <dir_find+0x14c>
  40303a:	f04f 09ff 	mov.w	r9, #255	; 0xff
  40303e:	e001      	b.n	403044 <dir_find+0x14c>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
  403040:	f04f 09ff 	mov.w	r9, #255	; 0xff
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
  403044:	2100      	movs	r1, #0
  403046:	4628      	mov	r0, r5
  403048:	4b16      	ldr	r3, [pc, #88]	; (4030a4 <dir_find+0x1ac>)
  40304a:	4798      	blx	r3
	} while (res == FR_OK);
  40304c:	2800      	cmp	r0, #0
  40304e:	f43f af62 	beq.w	402f16 <dir_find+0x1e>
  403052:	e01b      	b.n	40308c <dir_find+0x194>
  403054:	e01a      	b.n	40308c <dir_find+0x194>
  403056:	e019      	b.n	40308c <dir_find+0x194>
	do {
		res = move_window(dj->fs, dj->sect);
		if (res != FR_OK) break;
		dir = dj->dir;					/* Ptr to the directory entry of current index */
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
  403058:	2004      	movs	r0, #4
  40305a:	e017      	b.n	40308c <dir_find+0x194>

#if _USE_LFN
	ord = sum = 0xFF;
#endif
	do {
		res = move_window(dj->fs, dj->sect);
  40305c:	2000      	movs	r0, #0
  40305e:	e015      	b.n	40308c <dir_find+0x194>
  403060:	2000      	movs	r0, #0
  403062:	e013      	b.n	40308c <dir_find+0x194>
						sum = dir[LDIR_Chksum];
						c &= ~LLE; ord = c;	/* LFN start order */
						dj->lfn_idx = dj->index;
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
  403064:	3e01      	subs	r6, #1
  403066:	fa5f f986 	uxtb.w	r9, r6
  40306a:	46da      	mov	sl, fp
  40306c:	e7ea      	b.n	403044 <dir_find+0x14c>
  40306e:	f8dd b004 	ldr.w	fp, [sp, #4]
  403072:	9d02      	ldr	r5, [sp, #8]
  403074:	e006      	b.n	403084 <dir_find+0x18c>
  403076:	f8dd b004 	ldr.w	fp, [sp, #4]
  40307a:	9d02      	ldr	r5, [sp, #8]
  40307c:	e002      	b.n	403084 <dir_find+0x18c>
  40307e:	f8dd b004 	ldr.w	fp, [sp, #4]
  403082:	9d02      	ldr	r5, [sp, #8]
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
  403084:	46da      	mov	sl, fp
						sum = dir[LDIR_Chksum];
						c &= ~LLE; ord = c;	/* LFN start order */
						dj->lfn_idx = dj->index;
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
  403086:	f04f 09ff 	mov.w	r9, #255	; 0xff
  40308a:	e7db      	b.n	403044 <dir_find+0x14c>
#endif
		res = dir_next(dj, 0);		/* Next entry */
	} while (res == FR_OK);

	return res;
}
  40308c:	b005      	add	sp, #20
  40308e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403092:	bf00      	nop
  403094:	00402aa5 	.word	0x00402aa5
  403098:	00402929 	.word	0x00402929
  40309c:	00403c7d 	.word	0x00403c7d
  4030a0:	004024b1 	.word	0x004024b1
  4030a4:	00402db5 	.word	0x00402db5
  4030a8:	00407210 	.word	0x00407210

004030ac <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
  4030ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4030b0:	b089      	sub	sp, #36	; 0x24
  4030b2:	4604      	mov	r4, r0
	WORD n, ne, is;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dj->fn; lfn = dj->lfn;
  4030b4:	6987      	ldr	r7, [r0, #24]
  4030b6:	f8d0 a01c 	ldr.w	sl, [r0, #28]
	mem_cpy(sn, fn, 12);
  4030ba:	220c      	movs	r2, #12
  4030bc:	4639      	mov	r1, r7
  4030be:	a805      	add	r0, sp, #20
  4030c0:	4ba6      	ldr	r3, [pc, #664]	; (40335c <dir_register+0x2b0>)
  4030c2:	4798      	blx	r3

	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
  4030c4:	f89d 301f 	ldrb.w	r3, [sp, #31]
  4030c8:	f013 0f01 	tst.w	r3, #1
  4030cc:	d06f      	beq.n	4031ae <dir_register+0x102>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
  4030ce:	2300      	movs	r3, #0
  4030d0:	72fb      	strb	r3, [r7, #11]
  4030d2:	61e3      	str	r3, [r4, #28]
{
	BYTE ns[8], c;
	UINT i, j;


	mem_cpy(dst, src, 11);
  4030d4:	220b      	movs	r2, #11
  4030d6:	a905      	add	r1, sp, #20
  4030d8:	4638      	mov	r0, r7
  4030da:	4ba0      	ldr	r3, [pc, #640]	; (40335c <dir_register+0x2b0>)
  4030dc:	4798      	blx	r3
	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
		for (n = 1; n < 100; n++) {
  4030de:	2501      	movs	r5, #1
  4030e0:	462b      	mov	r3, r5
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  4030e2:	2620      	movs	r6, #32

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
		for (n = 1; n < 100; n++) {
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
  4030e4:	f8df 8294 	ldr.w	r8, [pc, #660]	; 40337c <dir_register+0x2d0>
{
	BYTE ns[8], c;
	UINT i, j;


	mem_cpy(dst, src, 11);
  4030e8:	f8df 9270 	ldr.w	r9, [pc, #624]	; 40335c <dir_register+0x2b0>
  4030ec:	e014      	b.n	403118 <dir_register+0x6c>
  4030ee:	220b      	movs	r2, #11
  4030f0:	a905      	add	r1, sp, #20
  4030f2:	4638      	mov	r0, r7
  4030f4:	47c8      	blx	r9

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
  4030f6:	2d05      	cmp	r5, #5
  4030f8:	d90d      	bls.n	403116 <dir_register+0x6a>
  4030fa:	462b      	mov	r3, r5
  4030fc:	4651      	mov	r1, sl
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
  4030fe:	03da      	lsls	r2, r3, #15
  403100:	ea42 0353 	orr.w	r3, r2, r3, lsr #1
  403104:	f831 2b02 	ldrh.w	r2, [r1], #2
  403108:	fa12 f383 	uxtah	r3, r2, r3
  40310c:	b29b      	uxth	r3, r3
  40310e:	880a      	ldrh	r2, [r1, #0]
  403110:	2a00      	cmp	r2, #0
  403112:	d1f4      	bne.n	4030fe <dir_register+0x52>
  403114:	e000      	b.n	403118 <dir_register+0x6c>
	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
		for (n = 1; n < 100; n++) {
  403116:	462b      	mov	r3, r5
  403118:	f10d 0e14 	add.w	lr, sp, #20
  40311c:	2207      	movs	r2, #7
	}

	/* itoa (hexdecimal) */
	i = 7;
	do {
		c = (seq % 16) + '0';
  40311e:	f003 000f 	and.w	r0, r3, #15
  403122:	f100 0130 	add.w	r1, r0, #48	; 0x30
		if (c > '9') c += 7;
  403126:	2939      	cmp	r1, #57	; 0x39
  403128:	bf88      	it	hi
  40312a:	f100 0137 	addhi.w	r1, r0, #55	; 0x37
		ns[i--] = c;
  40312e:	3a01      	subs	r2, #1
  403130:	f80e 1d01 	strb.w	r1, [lr, #-1]!
		seq /= 16;
  403134:	f3c3 130f 	ubfx	r3, r3, #4, #16
	} while (seq);
  403138:	2b00      	cmp	r3, #0
  40313a:	d1f0      	bne.n	40311e <dir_register+0x72>
	ns[i] = '~';
  40313c:	217e      	movs	r1, #126	; 0x7e
  40313e:	ab08      	add	r3, sp, #32
  403140:	4413      	add	r3, r2
  403142:	f803 1c14 	strb.w	r1, [r3, #-20]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
  403146:	b162      	cbz	r2, 403162 <dir_register+0xb6>
  403148:	783b      	ldrb	r3, [r7, #0]
  40314a:	2b20      	cmp	r3, #32
  40314c:	d00b      	beq.n	403166 <dir_register+0xba>
  40314e:	4639      	mov	r1, r7
  403150:	2300      	movs	r3, #0
  403152:	3301      	adds	r3, #1
  403154:	429a      	cmp	r2, r3
  403156:	d007      	beq.n	403168 <dir_register+0xbc>
  403158:	f811 0f01 	ldrb.w	r0, [r1, #1]!
  40315c:	2820      	cmp	r0, #32
  40315e:	d1f8      	bne.n	403152 <dir_register+0xa6>
  403160:	e002      	b.n	403168 <dir_register+0xbc>
  403162:	2300      	movs	r3, #0
  403164:	e000      	b.n	403168 <dir_register+0xbc>
  403166:	2300      	movs	r3, #0
  403168:	18f9      	adds	r1, r7, r3
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  40316a:	3301      	adds	r3, #1
  40316c:	2a07      	cmp	r2, #7
  40316e:	d805      	bhi.n	40317c <dir_register+0xd0>
  403170:	a808      	add	r0, sp, #32
  403172:	4410      	add	r0, r2
  403174:	f810 0c14 	ldrb.w	r0, [r0, #-20]
  403178:	3201      	adds	r2, #1
  40317a:	e000      	b.n	40317e <dir_register+0xd2>
  40317c:	4630      	mov	r0, r6
  40317e:	f801 0b01 	strb.w	r0, [r1], #1
	} while (j < 8);
  403182:	2b07      	cmp	r3, #7
  403184:	d9f1      	bls.n	40316a <dir_register+0xbe>

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
		for (n = 1; n < 100; n++) {
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
  403186:	4620      	mov	r0, r4
  403188:	47c0      	blx	r8
			if (res != FR_OK) break;
  40318a:	b928      	cbnz	r0, 403198 <dir_register+0xec>
	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
		for (n = 1; n < 100; n++) {
  40318c:	3501      	adds	r5, #1
  40318e:	b2ad      	uxth	r5, r5
  403190:	2d64      	cmp	r5, #100	; 0x64
  403192:	d1ac      	bne.n	4030ee <dir_register+0x42>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
			if (res != FR_OK) break;
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
  403194:	2007      	movs	r0, #7
  403196:	e0dd      	b.n	403354 <dir_register+0x2a8>
  403198:	2d64      	cmp	r5, #100	; 0x64
  40319a:	f000 80c7 	beq.w	40332c <dir_register+0x280>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
  40319e:	2804      	cmp	r0, #4
  4031a0:	f040 80c6 	bne.w	403330 <dir_register+0x284>
		fn[NS] = sn[NS]; dj->lfn = lfn;
  4031a4:	f89d 301f 	ldrb.w	r3, [sp, #31]
  4031a8:	72fb      	strb	r3, [r7, #11]
  4031aa:	f8c4 a01c 	str.w	sl, [r4, #28]
	}

	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
  4031ae:	f89d 301f 	ldrb.w	r3, [sp, #31]
  4031b2:	f013 0f02 	tst.w	r3, #2
  4031b6:	d014      	beq.n	4031e2 <dir_register+0x136>
		for (ne = 0; lfn[ne]; ne++) ;
  4031b8:	f8ba 3000 	ldrh.w	r3, [sl]
  4031bc:	b13b      	cbz	r3, 4031ce <dir_register+0x122>
  4031be:	2300      	movs	r3, #0
  4031c0:	3301      	adds	r3, #1
  4031c2:	b29b      	uxth	r3, r3
  4031c4:	f83a 2013 	ldrh.w	r2, [sl, r3, lsl #1]
  4031c8:	2a00      	cmp	r2, #0
  4031ca:	d1f9      	bne.n	4031c0 <dir_register+0x114>
  4031cc:	e000      	b.n	4031d0 <dir_register+0x124>
  4031ce:	2300      	movs	r3, #0
		ne = (ne + 25) / 13;
  4031d0:	3319      	adds	r3, #25
  4031d2:	4e63      	ldr	r6, [pc, #396]	; (403360 <dir_register+0x2b4>)
  4031d4:	fb86 2603 	smull	r2, r6, r6, r3
  4031d8:	17db      	asrs	r3, r3, #31
  4031da:	ebc3 06a6 	rsb	r6, r3, r6, asr #2
  4031de:	b2b6      	uxth	r6, r6
  4031e0:	e000      	b.n	4031e4 <dir_register+0x138>
	} else {						/* Otherwise reserve only an SFN entry. */
		ne = 1;
  4031e2:	2601      	movs	r6, #1
	}

	/* Reserve contiguous entries */
	res = dir_sdi(dj, 0);
  4031e4:	2100      	movs	r1, #0
  4031e6:	4620      	mov	r0, r4
  4031e8:	4b5e      	ldr	r3, [pc, #376]	; (403364 <dir_register+0x2b8>)
  4031ea:	4798      	blx	r3
	if (res != FR_OK) return res;
  4031ec:	2800      	cmp	r0, #0
  4031ee:	f040 80a0 	bne.w	403332 <dir_register+0x286>
  4031f2:	f04f 0900 	mov.w	r9, #0
  4031f6:	464d      	mov	r5, r9
	n = is = 0;
	do {
		res = move_window(dj->fs, dj->sect);
  4031f8:	4f5b      	ldr	r7, [pc, #364]	; (403368 <dir_register+0x2bc>)
		c = *dj->dir;				/* Check the entry status */
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
			if (++n == ne) break;	/* A contiguous entry that required count is found */
		} else {
			n = 0;					/* Not a blank entry. Restart to search */
  4031fa:	46ca      	mov	sl, r9
		}
		res = dir_next(dj, 1);		/* Next entry with table stretch */
  4031fc:	f8df 8174 	ldr.w	r8, [pc, #372]	; 403374 <dir_register+0x2c8>
	/* Reserve contiguous entries */
	res = dir_sdi(dj, 0);
	if (res != FR_OK) return res;
	n = is = 0;
	do {
		res = move_window(dj->fs, dj->sect);
  403200:	6921      	ldr	r1, [r4, #16]
  403202:	6820      	ldr	r0, [r4, #0]
  403204:	47b8      	blx	r7
		if (res != FR_OK) break;
  403206:	4603      	mov	r3, r0
  403208:	2800      	cmp	r0, #0
  40320a:	f040 80a2 	bne.w	403352 <dir_register+0x2a6>
		c = *dj->dir;				/* Check the entry status */
  40320e:	6963      	ldr	r3, [r4, #20]
  403210:	781b      	ldrb	r3, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
  403212:	2be5      	cmp	r3, #229	; 0xe5
  403214:	d000      	beq.n	403218 <dir_register+0x16c>
  403216:	b93b      	cbnz	r3, 403228 <dir_register+0x17c>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
  403218:	b90d      	cbnz	r5, 40321e <dir_register+0x172>
  40321a:	f8b4 9006 	ldrh.w	r9, [r4, #6]
			if (++n == ne) break;	/* A contiguous entry that required count is found */
  40321e:	3501      	adds	r5, #1
  403220:	b2ad      	uxth	r5, r5
  403222:	42ae      	cmp	r6, r5
  403224:	d101      	bne.n	40322a <dir_register+0x17e>
  403226:	e086      	b.n	403336 <dir_register+0x28a>
		} else {
			n = 0;					/* Not a blank entry. Restart to search */
  403228:	4655      	mov	r5, sl
		}
		res = dir_next(dj, 1);		/* Next entry with table stretch */
  40322a:	2101      	movs	r1, #1
  40322c:	4620      	mov	r0, r4
  40322e:	47c0      	blx	r8
	} while (res == FR_OK);
  403230:	4603      	mov	r3, r0
  403232:	2800      	cmp	r0, #0
  403234:	d0e4      	beq.n	403200 <dir_register+0x154>
  403236:	e08c      	b.n	403352 <dir_register+0x2a6>

	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
		res = dir_sdi(dj, is);
  403238:	4649      	mov	r1, r9
  40323a:	4620      	mov	r0, r4
  40323c:	4b49      	ldr	r3, [pc, #292]	; (403364 <dir_register+0x2b8>)
  40323e:	4798      	blx	r3
		if (res == FR_OK) {
  403240:	4603      	mov	r3, r0
  403242:	2800      	cmp	r0, #0
  403244:	f040 8083 	bne.w	40334e <dir_register+0x2a2>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
  403248:	69a0      	ldr	r0, [r4, #24]
  40324a:	4b48      	ldr	r3, [pc, #288]	; (40336c <dir_register+0x2c0>)
  40324c:	4798      	blx	r3
  40324e:	9000      	str	r0, [sp, #0]
			ne--;
  403250:	1e75      	subs	r5, r6, #1
  403252:	b2ad      	uxth	r5, r5
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
	dir[LDIR_Type] = 0;
  403254:	2700      	movs	r7, #0
	ST_WORD(dir+LDIR_FstClusLO, 0);

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
	s = wc = 0;
  403256:	9701      	str	r7, [sp, #4]
		res = dir_sdi(dj, is);
		if (res == FR_OK) {
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
			ne--;
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
  403258:	6921      	ldr	r1, [r4, #16]
  40325a:	6820      	ldr	r0, [r4, #0]
  40325c:	4b42      	ldr	r3, [pc, #264]	; (403368 <dir_register+0x2bc>)
  40325e:	4798      	blx	r3
				if (res != FR_OK) break;
  403260:	4603      	mov	r3, r0
  403262:	2800      	cmp	r0, #0
  403264:	d173      	bne.n	40334e <dir_register+0x2a2>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
  403266:	f8d4 901c 	ldr.w	r9, [r4, #28]
  40326a:	6960      	ldr	r0, [r4, #20]
  40326c:	fa5f fb85 	uxtb.w	fp, r5
{
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
  403270:	f89d 3000 	ldrb.w	r3, [sp]
  403274:	7343      	strb	r3, [r0, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
  403276:	230f      	movs	r3, #15
  403278:	72c3      	strb	r3, [r0, #11]
	dir[LDIR_Type] = 0;
  40327a:	7307      	strb	r7, [r0, #12]
	ST_WORD(dir+LDIR_FstClusLO, 0);
  40327c:	7687      	strb	r7, [r0, #26]
  40327e:	76c7      	strb	r7, [r0, #27]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
  403280:	f10b 33ff 	add.w	r3, fp, #4294967295
  403284:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  403288:	eb03 0181 	add.w	r1, r3, r1, lsl #2
  40328c:	4a38      	ldr	r2, [pc, #224]	; (403370 <dir_register+0x2c4>)
  40328e:	f102 080d 	add.w	r8, r2, #13
	s = wc = 0;
  403292:	9b01      	ldr	r3, [sp, #4]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
  403294:	f64f 76ff 	movw	r6, #65535	; 0xffff
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
  403298:	f04f 0aff 	mov.w	sl, #255	; 0xff
	ST_WORD(dir+LDIR_FstClusLO, 0);

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
	s = wc = 0;
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
  40329c:	42b3      	cmp	r3, r6
  40329e:	d04e      	beq.n	40333e <dir_register+0x292>
  4032a0:	f101 0e01 	add.w	lr, r1, #1
  4032a4:	f839 3011 	ldrh.w	r3, [r9, r1, lsl #1]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
  4032a8:	7811      	ldrb	r1, [r2, #0]
  4032aa:	5443      	strb	r3, [r0, r1]
  4032ac:	4401      	add	r1, r0
  4032ae:	ea4f 2c13 	mov.w	ip, r3, lsr #8
  4032b2:	f881 c001 	strb.w	ip, [r1, #1]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
  4032b6:	b913      	cbnz	r3, 4032be <dir_register+0x212>
	ST_WORD(dir+LDIR_FstClusLO, 0);

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
	s = wc = 0;
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
  4032b8:	4671      	mov	r1, lr
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
  4032ba:	4633      	mov	r3, r6
  4032bc:	e000      	b.n	4032c0 <dir_register+0x214>
	ST_WORD(dir+LDIR_FstClusLO, 0);

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
	s = wc = 0;
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
  4032be:	4671      	mov	r1, lr
  4032c0:	3201      	adds	r2, #1
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
	} while (++s < 13);
  4032c2:	4542      	cmp	r2, r8
  4032c4:	d1ea      	bne.n	40329c <dir_register+0x1f0>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
  4032c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
  4032ca:	4293      	cmp	r3, r2
  4032cc:	d002      	beq.n	4032d4 <dir_register+0x228>
  4032ce:	f839 3011 	ldrh.w	r3, [r9, r1, lsl #1]
  4032d2:	b90b      	cbnz	r3, 4032d8 <dir_register+0x22c>
  4032d4:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
  4032d8:	f880 b000 	strb.w	fp, [r0]
			ne--;
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
				if (res != FR_OK) break;
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
				dj->fs->wflag = 1;
  4032dc:	6823      	ldr	r3, [r4, #0]
  4032de:	2201      	movs	r2, #1
  4032e0:	711a      	strb	r2, [r3, #4]
				res = dir_next(dj, 0);	/* Next entry */
  4032e2:	4639      	mov	r1, r7
  4032e4:	4620      	mov	r0, r4
  4032e6:	4b23      	ldr	r3, [pc, #140]	; (403374 <dir_register+0x2c8>)
  4032e8:	4798      	blx	r3
			} while (res == FR_OK && --ne);
  4032ea:	4603      	mov	r3, r0
  4032ec:	bb78      	cbnz	r0, 40334e <dir_register+0x2a2>
  4032ee:	3d01      	subs	r5, #1
  4032f0:	b2ad      	uxth	r5, r5
  4032f2:	2d00      	cmp	r5, #0
  4032f4:	d1b0      	bne.n	403258 <dir_register+0x1ac>
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
  4032f6:	6921      	ldr	r1, [r4, #16]
  4032f8:	6820      	ldr	r0, [r4, #0]
  4032fa:	4b1b      	ldr	r3, [pc, #108]	; (403368 <dir_register+0x2bc>)
  4032fc:	4798      	blx	r3
		if (res == FR_OK) {
  4032fe:	4605      	mov	r5, r0
  403300:	b9c0      	cbnz	r0, 403334 <dir_register+0x288>
			dir = dj->dir;
  403302:	6966      	ldr	r6, [r4, #20]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
  403304:	2220      	movs	r2, #32
  403306:	2100      	movs	r1, #0
  403308:	4630      	mov	r0, r6
  40330a:	4b1b      	ldr	r3, [pc, #108]	; (403378 <dir_register+0x2cc>)
  40330c:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
  40330e:	220b      	movs	r2, #11
  403310:	69a1      	ldr	r1, [r4, #24]
  403312:	4630      	mov	r0, r6
  403314:	4b11      	ldr	r3, [pc, #68]	; (40335c <dir_register+0x2b0>)
  403316:	4798      	blx	r3
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
  403318:	69a3      	ldr	r3, [r4, #24]
  40331a:	7adb      	ldrb	r3, [r3, #11]
  40331c:	f003 0318 	and.w	r3, r3, #24
  403320:	7333      	strb	r3, [r6, #12]
#endif
			dj->fs->wflag = 1;
  403322:	6823      	ldr	r3, [r4, #0]
  403324:	2201      	movs	r2, #1
  403326:	711a      	strb	r2, [r3, #4]
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
  403328:	4628      	mov	r0, r5
  40332a:	e013      	b.n	403354 <dir_register+0x2a8>
		for (n = 1; n < 100; n++) {
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
			if (res != FR_OK) break;
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
  40332c:	2007      	movs	r0, #7
  40332e:	e011      	b.n	403354 <dir_register+0x2a8>
  403330:	e010      	b.n	403354 <dir_register+0x2a8>
  403332:	e00f      	b.n	403354 <dir_register+0x2a8>
  403334:	e00e      	b.n	403354 <dir_register+0x2a8>
			n = 0;					/* Not a blank entry. Restart to search */
		}
		res = dir_next(dj, 1);		/* Next entry with table stretch */
	} while (res == FR_OK);

	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
  403336:	2e01      	cmp	r6, #1
  403338:	f63f af7e 	bhi.w	403238 <dir_register+0x18c>
  40333c:	e7db      	b.n	4032f6 <dir_register+0x24a>

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
	s = wc = 0;
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
  40333e:	f892 e000 	ldrb.w	lr, [r2]
  403342:	f800 a00e 	strb.w	sl, [r0, lr]
  403346:	4486      	add	lr, r0
  403348:	f88e a001 	strb.w	sl, [lr, #1]
  40334c:	e7b8      	b.n	4032c0 <dir_register+0x214>
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
  40334e:	4618      	mov	r0, r3
  403350:	e000      	b.n	403354 <dir_register+0x2a8>
		ne = 1;
	}

	/* Reserve contiguous entries */
	res = dir_sdi(dj, 0);
	if (res != FR_OK) return res;
  403352:	4618      	mov	r0, r3
			dj->fs->wflag = 1;
		}
	}

	return res;
}
  403354:	b009      	add	sp, #36	; 0x24
  403356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40335a:	bf00      	nop
  40335c:	00402475 	.word	0x00402475
  403360:	4ec4ec4f 	.word	0x4ec4ec4f
  403364:	00402aa5 	.word	0x00402aa5
  403368:	00402929 	.word	0x00402929
  40336c:	004024b1 	.word	0x004024b1
  403370:	00407210 	.word	0x00407210
  403374:	00402db5 	.word	0x00402db5
  403378:	00402489 	.word	0x00402489
  40337c:	00402ef9 	.word	0x00402ef9

00403380 <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
  403380:	b570      	push	{r4, r5, r6, lr}
  403382:	4604      	mov	r4, r0
	FRESULT res;


	res = move_window(fs, 0);
  403384:	2100      	movs	r1, #0
  403386:	4b2c      	ldr	r3, [pc, #176]	; (403438 <sync+0xb8>)
  403388:	4798      	blx	r3
	if (res == FR_OK) {
  40338a:	4603      	mov	r3, r0
  40338c:	2800      	cmp	r0, #0
  40338e:	d150      	bne.n	403432 <sync+0xb2>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
  403390:	7823      	ldrb	r3, [r4, #0]
  403392:	2b03      	cmp	r3, #3
  403394:	d145      	bne.n	403422 <sync+0xa2>
  403396:	7963      	ldrb	r3, [r4, #5]
  403398:	2b00      	cmp	r3, #0
  40339a:	d042      	beq.n	403422 <sync+0xa2>
			fs->winsect = 0;
  40339c:	2600      	movs	r6, #0
  40339e:	62e6      	str	r6, [r4, #44]	; 0x2c
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
  4033a0:	f104 0530 	add.w	r5, r4, #48	; 0x30
  4033a4:	f44f 7200 	mov.w	r2, #512	; 0x200
  4033a8:	4631      	mov	r1, r6
  4033aa:	4628      	mov	r0, r5
  4033ac:	4b23      	ldr	r3, [pc, #140]	; (40343c <sync+0xbc>)
  4033ae:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
  4033b0:	2355      	movs	r3, #85	; 0x55
  4033b2:	f884 322e 	strb.w	r3, [r4, #558]	; 0x22e
  4033b6:	23aa      	movs	r3, #170	; 0xaa
  4033b8:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
  4033bc:	2352      	movs	r3, #82	; 0x52
  4033be:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  4033c2:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  4033c6:	2361      	movs	r3, #97	; 0x61
  4033c8:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
  4033cc:	2241      	movs	r2, #65	; 0x41
  4033ce:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
  4033d2:	2172      	movs	r1, #114	; 0x72
  4033d4:	f884 1214 	strb.w	r1, [r4, #532]	; 0x214
  4033d8:	f884 1215 	strb.w	r1, [r4, #533]	; 0x215
  4033dc:	f884 2216 	strb.w	r2, [r4, #534]	; 0x216
  4033e0:	f884 3217 	strb.w	r3, [r4, #535]	; 0x217
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
  4033e4:	6923      	ldr	r3, [r4, #16]
  4033e6:	f884 3218 	strb.w	r3, [r4, #536]	; 0x218
  4033ea:	121a      	asrs	r2, r3, #8
  4033ec:	f884 2219 	strb.w	r2, [r4, #537]	; 0x219
  4033f0:	0c1a      	lsrs	r2, r3, #16
  4033f2:	f884 221a 	strb.w	r2, [r4, #538]	; 0x21a
  4033f6:	0e1b      	lsrs	r3, r3, #24
  4033f8:	f884 321b 	strb.w	r3, [r4, #539]	; 0x21b
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
  4033fc:	68e3      	ldr	r3, [r4, #12]
  4033fe:	f884 321c 	strb.w	r3, [r4, #540]	; 0x21c
  403402:	121a      	asrs	r2, r3, #8
  403404:	f884 221d 	strb.w	r2, [r4, #541]	; 0x21d
  403408:	0c1a      	lsrs	r2, r3, #16
  40340a:	f884 221e 	strb.w	r2, [r4, #542]	; 0x21e
  40340e:	0e1b      	lsrs	r3, r3, #24
  403410:	f884 321f 	strb.w	r3, [r4, #543]	; 0x21f
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
  403414:	2301      	movs	r3, #1
  403416:	6962      	ldr	r2, [r4, #20]
  403418:	4629      	mov	r1, r5
  40341a:	7860      	ldrb	r0, [r4, #1]
  40341c:	4d08      	ldr	r5, [pc, #32]	; (403440 <sync+0xc0>)
  40341e:	47a8      	blx	r5
			fs->fsi_flag = 0;
  403420:	7166      	strb	r6, [r4, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
  403422:	2200      	movs	r2, #0
  403424:	4611      	mov	r1, r2
  403426:	7860      	ldrb	r0, [r4, #1]
  403428:	4b06      	ldr	r3, [pc, #24]	; (403444 <sync+0xc4>)
  40342a:	4798      	blx	r3
)
{
	FRESULT res;


	res = move_window(fs, 0);
  40342c:	1c03      	adds	r3, r0, #0
  40342e:	bf18      	it	ne
  403430:	2301      	movne	r3, #1
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
			res = FR_DISK_ERR;
	}

	return res;
}
  403432:	4618      	mov	r0, r3
  403434:	bd70      	pop	{r4, r5, r6, pc}
  403436:	bf00      	nop
  403438:	00402929 	.word	0x00402929
  40343c:	00402489 	.word	0x00402489
  403440:	00402339 	.word	0x00402339
  403444:	004023ad 	.word	0x004023ad

00403448 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
  403448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40344c:	b083      	sub	sp, #12
  40344e:	4683      	mov	fp, r0
  403450:	460d      	mov	r5, r1
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
  403452:	780b      	ldrb	r3, [r1, #0]
  403454:	2b2f      	cmp	r3, #47	; 0x2f
  403456:	d001      	beq.n	40345c <follow_path+0x14>
  403458:	2b5c      	cmp	r3, #92	; 0x5c
  40345a:	d100      	bne.n	40345e <follow_path+0x16>
		path++;
  40345c:	3501      	adds	r5, #1
	dj->sclust = 0;						/* Start from the root dir */
  40345e:	2300      	movs	r3, #0
  403460:	f8cb 3008 	str.w	r3, [fp, #8]
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
  403464:	782b      	ldrb	r3, [r5, #0]
  403466:	2b1f      	cmp	r3, #31
  403468:	d808      	bhi.n	40347c <follow_path+0x34>
		res = dir_sdi(dj, 0);
  40346a:	2100      	movs	r1, #0
  40346c:	4658      	mov	r0, fp
  40346e:	4bb9      	ldr	r3, [pc, #740]	; (403754 <follow_path+0x30c>)
  403470:	4798      	blx	r3
  403472:	4603      	mov	r3, r0
		dj->dir = 0;
  403474:	2200      	movs	r2, #0
  403476:	f8cb 2014 	str.w	r2, [fp, #20]
  40347a:	e166      	b.n	40374a <follow_path+0x302>
			b = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
  40347c:	f8df a2ec 	ldr.w	sl, [pc, #748]	; 40376c <follow_path+0x324>
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
  403480:	782b      	ldrb	r3, [r5, #0]
  403482:	2b2f      	cmp	r3, #47	; 0x2f
  403484:	d001      	beq.n	40348a <follow_path+0x42>
  403486:	2b5c      	cmp	r3, #92	; 0x5c
  403488:	d105      	bne.n	403496 <follow_path+0x4e>
  40348a:	f815 3f01 	ldrb.w	r3, [r5, #1]!
  40348e:	2b2f      	cmp	r3, #47	; 0x2f
  403490:	d0fb      	beq.n	40348a <follow_path+0x42>
  403492:	2b5c      	cmp	r3, #92	; 0x5c
  403494:	d0f9      	beq.n	40348a <follow_path+0x42>
	lfn = dj->lfn;
  403496:	f8db 601c 	ldr.w	r6, [fp, #28]
	si = di = 0;
	for (;;) {
		w = p[si++];					/* Get a character */
  40349a:	7828      	ldrb	r0, [r5, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
  40349c:	282f      	cmp	r0, #47	; 0x2f
  40349e:	bf18      	it	ne
  4034a0:	281f      	cmpne	r0, #31
  4034a2:	f240 8149 	bls.w	403738 <follow_path+0x2f0>
  4034a6:	285c      	cmp	r0, #92	; 0x5c
  4034a8:	f000 8146 	beq.w	403738 <follow_path+0x2f0>
  4034ac:	f1a6 0802 	sub.w	r8, r6, #2
  4034b0:	462f      	mov	r7, r5
  4034b2:	2401      	movs	r4, #1
			b = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
  4034b4:	46a1      	mov	r9, r4
  4034b6:	e004      	b.n	4034c2 <follow_path+0x7a>
	lfn = dj->lfn;
	si = di = 0;
	for (;;) {
		w = p[si++];					/* Get a character */
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
		if (di >= _MAX_LFN)				/* Reject too long name */
  4034b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  4034bc:	f000 813a 	beq.w	403734 <follow_path+0x2ec>
	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
	lfn = dj->lfn;
	si = di = 0;
	for (;;) {
		w = p[si++];					/* Get a character */
  4034c0:	461c      	mov	r4, r3
			b = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
  4034c2:	4649      	mov	r1, r9
  4034c4:	47d0      	blx	sl
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
  4034c6:	4601      	mov	r1, r0
  4034c8:	2800      	cmp	r0, #0
  4034ca:	f000 8133 	beq.w	403734 <follow_path+0x2ec>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
  4034ce:	287f      	cmp	r0, #127	; 0x7f
  4034d0:	d809      	bhi.n	4034e6 <follow_path+0x9e>
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
  4034d2:	2822      	cmp	r0, #34	; 0x22
  4034d4:	f000 80ed 	beq.w	4036b2 <follow_path+0x26a>
  4034d8:	4a9f      	ldr	r2, [pc, #636]	; (403758 <follow_path+0x310>)
  4034da:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  4034de:	b113      	cbz	r3, 4034e6 <follow_path+0x9e>
  4034e0:	4298      	cmp	r0, r3
  4034e2:	d1fa      	bne.n	4034da <follow_path+0x92>
  4034e4:	e0e5      	b.n	4036b2 <follow_path+0x26a>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
			return FR_INVALID_NAME;
		lfn[di++] = w;					/* Store the Unicode char */
  4034e6:	f828 1f02 	strh.w	r1, [r8, #2]!
	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
	lfn = dj->lfn;
	si = di = 0;
	for (;;) {
		w = p[si++];					/* Get a character */
  4034ea:	1c63      	adds	r3, r4, #1
  4034ec:	f817 0f01 	ldrb.w	r0, [r7, #1]!
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
  4034f0:	282f      	cmp	r0, #47	; 0x2f
  4034f2:	bf18      	it	ne
  4034f4:	281f      	cmpne	r0, #31
  4034f6:	d901      	bls.n	4034fc <follow_path+0xb4>
  4034f8:	285c      	cmp	r0, #92	; 0x5c
  4034fa:	d1dd      	bne.n	4034b8 <follow_path+0x70>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
			return FR_INVALID_NAME;
		lfn[di++] = w;					/* Store the Unicode char */
	}
	*path = &p[si];						/* Return pointer to the next segment */
  4034fc:	441d      	add	r5, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
  4034fe:	2820      	cmp	r0, #32
  403500:	bf34      	ite	cc
  403502:	2704      	movcc	r7, #4
  403504:	2700      	movcs	r7, #0
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
  403506:	2c00      	cmp	r4, #0
  403508:	f000 80d3 	beq.w	4036b2 <follow_path+0x26a>
		w = lfn[di-1];
  40350c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  403510:	4423      	add	r3, r4
  403512:	eb06 0243 	add.w	r2, r6, r3, lsl #1
  403516:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
		if (w != ' ' && w != '.') break;
  40351a:	2b20      	cmp	r3, #32
  40351c:	d00a      	beq.n	403534 <follow_path+0xec>
  40351e:	2b2e      	cmp	r3, #46	; 0x2e
  403520:	f040 80eb 	bne.w	4036fa <follow_path+0x2b2>
  403524:	e006      	b.n	403534 <follow_path+0xec>
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
		w = lfn[di-1];
  403526:	f832 3d02 	ldrh.w	r3, [r2, #-2]!
		if (w != ' ' && w != '.') break;
  40352a:	2b20      	cmp	r3, #32
  40352c:	d002      	beq.n	403534 <follow_path+0xec>
  40352e:	2b2e      	cmp	r3, #46	; 0x2e
  403530:	f040 80e3 	bne.w	4036fa <follow_path+0x2b2>
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
  403534:	3c01      	subs	r4, #1
  403536:	d1f6      	bne.n	403526 <follow_path+0xde>
  403538:	e0bb      	b.n	4036b2 <follow_path+0x26a>

	lfn[di] = 0;						/* LFN is created */

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
  40353a:	3301      	adds	r3, #1
  40353c:	f831 2f02 	ldrh.w	r2, [r1, #2]!
  403540:	2a20      	cmp	r2, #32
  403542:	d0fa      	beq.n	40353a <follow_path+0xf2>
  403544:	2a2e      	cmp	r2, #46	; 0x2e
  403546:	d0f8      	beq.n	40353a <follow_path+0xf2>
	if (si) cf |= NS_LOSS | NS_LFN;
  403548:	b11b      	cbz	r3, 403552 <follow_path+0x10a>
  40354a:	f047 0703 	orr.w	r7, r7, #3
  40354e:	e000      	b.n	403552 <follow_path+0x10a>

	lfn[di] = 0;						/* LFN is created */

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
  403550:	2300      	movs	r3, #0
	if (si) cf |= NS_LOSS | NS_LFN;
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
  403552:	f1a8 0802 	sub.w	r8, r8, #2
  403556:	eb06 0208 	add.w	r2, r6, r8
  40355a:	f836 1008 	ldrh.w	r1, [r6, r8]
  40355e:	292e      	cmp	r1, #46	; 0x2e
  403560:	d001      	beq.n	403566 <follow_path+0x11e>
  403562:	3c01      	subs	r4, #1
  403564:	d106      	bne.n	403574 <follow_path+0x12c>

	b = i = 0; ni = 8;
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
  403566:	2208      	movs	r2, #8
  403568:	9200      	str	r2, [sp, #0]
  40356a:	f04f 0900 	mov.w	r9, #0
  40356e:	f8cd 9004 	str.w	r9, [sp, #4]
  403572:	e004      	b.n	40357e <follow_path+0x136>

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
	if (si) cf |= NS_LOSS | NS_LFN;
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
  403574:	f832 1d02 	ldrh.w	r1, [r2, #-2]!
  403578:	292e      	cmp	r1, #46	; 0x2e
  40357a:	d1f2      	bne.n	403562 <follow_path+0x11a>
  40357c:	e7f3      	b.n	403566 <follow_path+0x11e>

	b = i = 0; ni = 8;
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
  40357e:	f103 0801 	add.w	r8, r3, #1
  403582:	f836 0013 	ldrh.w	r0, [r6, r3, lsl #1]
		if (!w) break;					/* Break on end of the LFN */
  403586:	2800      	cmp	r0, #0
  403588:	d060      	beq.n	40364c <follow_path+0x204>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
  40358a:	2820      	cmp	r0, #32
  40358c:	d003      	beq.n	403596 <follow_path+0x14e>
  40358e:	282e      	cmp	r0, #46	; 0x2e
  403590:	d105      	bne.n	40359e <follow_path+0x156>
  403592:	45a0      	cmp	r8, r4
  403594:	d003      	beq.n	40359e <follow_path+0x156>
			cf |= NS_LOSS | NS_LFN; continue;
  403596:	f047 0703 	orr.w	r7, r7, #3
	if (si) cf |= NS_LOSS | NS_LFN;
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */

	b = i = 0; ni = 8;
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
  40359a:	4643      	mov	r3, r8
  40359c:	e7ef      	b.n	40357e <follow_path+0x136>
		if (!w) break;					/* Break on end of the LFN */
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
			cf |= NS_LOSS | NS_LFN; continue;
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
  40359e:	9b00      	ldr	r3, [sp, #0]
  4035a0:	4599      	cmp	r9, r3
  4035a2:	d201      	bcs.n	4035a8 <follow_path+0x160>
  4035a4:	45a0      	cmp	r8, r4
  4035a6:	d11a      	bne.n	4035de <follow_path+0x196>
			if (ni == 11) {				/* Long extension */
  4035a8:	9b00      	ldr	r3, [sp, #0]
  4035aa:	2b0b      	cmp	r3, #11
  4035ac:	d107      	bne.n	4035be <follow_path+0x176>
				cf |= NS_LOSS | NS_LFN; break;
  4035ae:	f047 0703 	orr.w	r7, r7, #3
			}
		}
		dj->fn[i++] = (BYTE)w;
	}

	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
  4035b2:	f8db 3018 	ldr.w	r3, [fp, #24]
  4035b6:	781a      	ldrb	r2, [r3, #0]
  4035b8:	2ae5      	cmp	r2, #229	; 0xe5
  4035ba:	d155      	bne.n	403668 <follow_path+0x220>
  4035bc:	e04b      	b.n	403656 <follow_path+0x20e>

		if (i >= ni || si == di) {		/* Extension or end of SFN */
			if (ni == 11) {				/* Long extension */
				cf |= NS_LOSS | NS_LFN; break;
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
  4035be:	45a0      	cmp	r8, r4
  4035c0:	bf18      	it	ne
  4035c2:	f047 0703 	orrne.w	r7, r7, #3
			if (si > di) break;			/* No extension */
  4035c6:	45a0      	cmp	r8, r4
  4035c8:	d840      	bhi.n	40364c <follow_path+0x204>
			si = di; i = 8; ni = 11;	/* Enter extension section */
			b <<= 2; continue;
  4035ca:	9b01      	ldr	r3, [sp, #4]
  4035cc:	009b      	lsls	r3, r3, #2
  4035ce:	b2db      	uxtb	r3, r3
  4035d0:	9301      	str	r3, [sp, #4]
  4035d2:	4623      	mov	r3, r4
			if (ni == 11) {				/* Long extension */
				cf |= NS_LOSS | NS_LFN; break;
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
			if (si > di) break;			/* No extension */
			si = di; i = 8; ni = 11;	/* Enter extension section */
  4035d4:	220b      	movs	r2, #11
  4035d6:	9200      	str	r2, [sp, #0]
  4035d8:	f04f 0908 	mov.w	r9, #8
  4035dc:	e7cf      	b.n	40357e <follow_path+0x136>
			b <<= 2; continue;
		}

		if (w >= 0x80) {				/* Non ASCII char */
  4035de:	287f      	cmp	r0, #127	; 0x7f
  4035e0:	f240 809f 	bls.w	403722 <follow_path+0x2da>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
  4035e4:	2100      	movs	r1, #0
  4035e6:	47d0      	blx	sl
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
  4035e8:	4603      	mov	r3, r0
  4035ea:	2800      	cmp	r0, #0
  4035ec:	f000 80aa 	beq.w	403744 <follow_path+0x2fc>
  4035f0:	4a5a      	ldr	r2, [pc, #360]	; (40375c <follow_path+0x314>)
  4035f2:	4413      	add	r3, r2
  4035f4:	f813 1c80 	ldrb.w	r1, [r3, #-128]
  4035f8:	b288      	uxth	r0, r1
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
  4035fa:	f047 0702 	orr.w	r7, r7, #2
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dj->fn[i++] = (BYTE)(w >> 8);
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
  4035fe:	b148      	cbz	r0, 403614 <follow_path+0x1cc>
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
  403600:	292b      	cmp	r1, #43	; 0x2b
  403602:	d007      	beq.n	403614 <follow_path+0x1cc>
  403604:	4a56      	ldr	r2, [pc, #344]	; (403760 <follow_path+0x318>)
  403606:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  40360a:	2b00      	cmp	r3, #0
  40360c:	f000 808b 	beq.w	403726 <follow_path+0x2de>
  403610:	428b      	cmp	r3, r1
  403612:	d1f8      	bne.n	403606 <follow_path+0x1be>
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dj->fn[i++] = (BYTE)(w >> 8);
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
  403614:	f047 0703 	orr.w	r7, r7, #3
  403618:	205f      	movs	r0, #95	; 0x5f
  40361a:	e00f      	b.n	40363c <follow_path+0x1f4>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
					b |= 2;
  40361c:	9b01      	ldr	r3, [sp, #4]
  40361e:	f043 0302 	orr.w	r3, r3, #2
  403622:	9301      	str	r3, [sp, #4]
  403624:	e00a      	b.n	40363c <follow_path+0x1f4>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
  403626:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
  40362a:	b29b      	uxth	r3, r3
  40362c:	2b19      	cmp	r3, #25
  40362e:	d805      	bhi.n	40363c <follow_path+0x1f4>
						b |= 1; w -= 0x20;
  403630:	9b01      	ldr	r3, [sp, #4]
  403632:	f043 0301 	orr.w	r3, r3, #1
  403636:	9301      	str	r3, [sp, #4]
  403638:	3820      	subs	r0, #32
  40363a:	b280      	uxth	r0, r0
					}
				}
			}
		}
		dj->fn[i++] = (BYTE)w;
  40363c:	f8db 3018 	ldr.w	r3, [fp, #24]
  403640:	f803 0009 	strb.w	r0, [r3, r9]
	if (si) cf |= NS_LOSS | NS_LFN;
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */

	b = i = 0; ni = 8;
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
  403644:	4643      	mov	r3, r8
						b |= 1; w -= 0x20;
					}
				}
			}
		}
		dj->fn[i++] = (BYTE)w;
  403646:	f109 0901 	add.w	r9, r9, #1
  40364a:	e798      	b.n	40357e <follow_path+0x136>
	}

	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
  40364c:	f8db 3018 	ldr.w	r3, [fp, #24]
  403650:	781a      	ldrb	r2, [r3, #0]
  403652:	2ae5      	cmp	r2, #229	; 0xe5
  403654:	d101      	bne.n	40365a <follow_path+0x212>
  403656:	2205      	movs	r2, #5
  403658:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
  40365a:	9b00      	ldr	r3, [sp, #0]
  40365c:	2b08      	cmp	r3, #8
  40365e:	d103      	bne.n	403668 <follow_path+0x220>
  403660:	9b01      	ldr	r3, [sp, #4]
  403662:	009b      	lsls	r3, r3, #2
  403664:	b2db      	uxtb	r3, r3
  403666:	9301      	str	r3, [sp, #4]
  403668:	9901      	ldr	r1, [sp, #4]
  40366a:	f001 020c 	and.w	r2, r1, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
  40366e:	2a0c      	cmp	r2, #12
  403670:	d003      	beq.n	40367a <follow_path+0x232>
  403672:	f001 0303 	and.w	r3, r1, #3
  403676:	2b03      	cmp	r3, #3
  403678:	d101      	bne.n	40367e <follow_path+0x236>
		cf |= NS_LFN;
  40367a:	f047 0702 	orr.w	r7, r7, #2
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
  40367e:	f017 0f02 	tst.w	r7, #2
  403682:	d10a      	bne.n	40369a <follow_path+0x252>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
  403684:	9b01      	ldr	r3, [sp, #4]
  403686:	f003 0303 	and.w	r3, r3, #3
  40368a:	2b01      	cmp	r3, #1
  40368c:	bf08      	it	eq
  40368e:	f047 0710 	orreq.w	r7, r7, #16
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
  403692:	2a04      	cmp	r2, #4
  403694:	bf08      	it	eq
  403696:	f047 0708 	orreq.w	r7, r7, #8
	}

	dj->fn[NS] = cf;	/* SFN is created */
  40369a:	f8db 3018 	ldr.w	r3, [fp, #24]
  40369e:	72df      	strb	r7, [r3, #11]

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
  4036a0:	4658      	mov	r0, fp
  4036a2:	4b30      	ldr	r3, [pc, #192]	; (403764 <follow_path+0x31c>)
  4036a4:	4798      	blx	r3
			ns = *(dj->fn+NS);
  4036a6:	f8db 3018 	ldr.w	r3, [fp, #24]
  4036aa:	7ada      	ldrb	r2, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
  4036ac:	4603      	mov	r3, r0
  4036ae:	b160      	cbz	r0, 4036ca <follow_path+0x282>
  4036b0:	e001      	b.n	4036b6 <follow_path+0x26e>
  4036b2:	2306      	movs	r3, #6
  4036b4:	e049      	b.n	40374a <follow_path+0x302>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
  4036b6:	2804      	cmp	r0, #4
  4036b8:	d147      	bne.n	40374a <follow_path+0x302>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
  4036ba:	f002 0204 	and.w	r2, r2, #4
  4036be:	b2d2      	uxtb	r2, r2
  4036c0:	2a00      	cmp	r2, #0
  4036c2:	bf14      	ite	ne
  4036c4:	4603      	movne	r3, r0
  4036c6:	2305      	moveq	r3, #5
  4036c8:	e03f      	b.n	40374a <follow_path+0x302>
				}
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
  4036ca:	f012 0f04 	tst.w	r2, #4
  4036ce:	d13c      	bne.n	40374a <follow_path+0x302>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
  4036d0:	f8db 3014 	ldr.w	r3, [fp, #20]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
  4036d4:	7ada      	ldrb	r2, [r3, #11]
  4036d6:	f012 0f10 	tst.w	r2, #16
  4036da:	d00c      	beq.n	4036f6 <follow_path+0x2ae>
				res = FR_NO_PATH; break;
			}
			dj->sclust = LD_CLUST(dir);
  4036dc:	7d59      	ldrb	r1, [r3, #21]
  4036de:	7d1a      	ldrb	r2, [r3, #20]
  4036e0:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
  4036e4:	7ed8      	ldrb	r0, [r3, #27]
  4036e6:	7e9a      	ldrb	r2, [r3, #26]
  4036e8:	ea42 2300 	orr.w	r3, r2, r0, lsl #8
  4036ec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  4036f0:	f8cb 3008 	str.w	r3, [fp, #8]
		}
  4036f4:	e6c4      	b.n	403480 <follow_path+0x38>
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
  4036f6:	2305      	movs	r3, #5
  4036f8:	e027      	b.n	40374a <follow_path+0x302>
		if (w != ' ' && w != '.') break;
		di--;
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */

	lfn[di] = 0;						/* LFN is created */
  4036fa:	ea4f 0844 	mov.w	r8, r4, lsl #1
  4036fe:	2300      	movs	r3, #0
  403700:	f826 3014 	strh.w	r3, [r6, r4, lsl #1]

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
  403704:	220b      	movs	r2, #11
  403706:	2120      	movs	r1, #32
  403708:	f8db 0018 	ldr.w	r0, [fp, #24]
  40370c:	4b16      	ldr	r3, [pc, #88]	; (403768 <follow_path+0x320>)
  40370e:	4798      	blx	r3
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
  403710:	8833      	ldrh	r3, [r6, #0]
  403712:	2b20      	cmp	r3, #32
  403714:	d002      	beq.n	40371c <follow_path+0x2d4>
  403716:	2b2e      	cmp	r3, #46	; 0x2e
  403718:	f47f af1a 	bne.w	403550 <follow_path+0x108>
  40371c:	4631      	mov	r1, r6
  40371e:	2300      	movs	r3, #0
  403720:	e70b      	b.n	40353a <follow_path+0xf2>
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dj->fn[i++] = (BYTE)(w >> 8);
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
  403722:	4601      	mov	r1, r0
  403724:	e76c      	b.n	403600 <follow_path+0x1b8>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
  403726:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
  40372a:	b29b      	uxth	r3, r3
  40372c:	2b19      	cmp	r3, #25
  40372e:	f67f af75 	bls.w	40361c <follow_path+0x1d4>
  403732:	e778      	b.n	403626 <follow_path+0x1de>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
  403734:	2306      	movs	r3, #6
			}
			dj->sclust = LD_CLUST(dir);
		}
	}

	return res;
  403736:	e008      	b.n	40374a <follow_path+0x302>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
			return FR_INVALID_NAME;
		lfn[di++] = w;					/* Store the Unicode char */
	}
	*path = &p[si];						/* Return pointer to the next segment */
  403738:	3501      	adds	r5, #1
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
  40373a:	281f      	cmp	r0, #31
  40373c:	d9b9      	bls.n	4036b2 <follow_path+0x26a>
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
	lfn = dj->lfn;
	si = di = 0;
  40373e:	2400      	movs	r4, #0
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
			return FR_INVALID_NAME;
		lfn[di++] = w;					/* Store the Unicode char */
	}
	*path = &p[si];						/* Return pointer to the next segment */
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
  403740:	4627      	mov	r7, r4
  403742:	e6e0      	b.n	403506 <follow_path+0xbe>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
  403744:	f047 0702 	orr.w	r7, r7, #2
  403748:	e764      	b.n	403614 <follow_path+0x1cc>
			dj->sclust = LD_CLUST(dir);
		}
	}

	return res;
}
  40374a:	4618      	mov	r0, r3
  40374c:	b003      	add	sp, #12
  40374e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403752:	bf00      	nop
  403754:	00402aa5 	.word	0x00402aa5
  403758:	004071c8 	.word	0x004071c8
  40375c:	00407148 	.word	0x00407148
  403760:	004071d4 	.word	0x004071d4
  403764:	00402ef9 	.word	0x00402ef9
  403768:	00402489 	.word	0x00402489
  40376c:	00403c39 	.word	0x00403c39

00403770 <f_mount>:
)
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
  403770:	2807      	cmp	r0, #7
  403772:	d80d      	bhi.n	403790 <f_mount+0x20>
		return FR_INVALID_DRIVE;
	rfs = FatFs[vol];			/* Get current fs object */
  403774:	4b07      	ldr	r3, [pc, #28]	; (403794 <f_mount+0x24>)
  403776:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]

	if (rfs) {
  40377a:	b10b      	cbz	r3, 403780 <f_mount+0x10>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;		/* Clear old fs object */
  40377c:	2200      	movs	r2, #0
  40377e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
  403780:	b109      	cbz	r1, 403786 <f_mount+0x16>
		fs->fs_type = 0;		/* Clear new fs object */
  403782:	2300      	movs	r3, #0
  403784:	700b      	strb	r3, [r1, #0]
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */
  403786:	4b03      	ldr	r3, [pc, #12]	; (403794 <f_mount+0x24>)
  403788:	f843 1020 	str.w	r1, [r3, r0, lsl #2]

	return FR_OK;
  40378c:	2000      	movs	r0, #0
  40378e:	4770      	bx	lr
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
		return FR_INVALID_DRIVE;
  403790:	200b      	movs	r0, #11
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */

	return FR_OK;
}
  403792:	4770      	bx	lr
  403794:	2040094c 	.word	0x2040094c

00403798 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
  403798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40379c:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
  4037a0:	4605      	mov	r5, r0
  4037a2:	9101      	str	r1, [sp, #4]
  4037a4:	4616      	mov	r6, r2
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
  4037a6:	2300      	movs	r3, #0
  4037a8:	6003      	str	r3, [r0, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
  4037aa:	f002 071f 	and.w	r7, r2, #31
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
  4037ae:	f002 021e 	and.w	r2, r2, #30
  4037b2:	a985      	add	r1, sp, #532	; 0x214
  4037b4:	a801      	add	r0, sp, #4
  4037b6:	4b58      	ldr	r3, [pc, #352]	; (403918 <f_open+0x180>)
  4037b8:	4798      	blx	r3
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
  4037ba:	ab82      	add	r3, sp, #520	; 0x208
  4037bc:	938b      	str	r3, [sp, #556]	; 0x22c
  4037be:	ab02      	add	r3, sp, #8
  4037c0:	938c      	str	r3, [sp, #560]	; 0x230
	if (res == FR_OK)
  4037c2:	2800      	cmp	r0, #0
  4037c4:	f040 808a 	bne.w	4038dc <f_open+0x144>
		res = follow_path(&dj, path);	/* Follow the file path */
  4037c8:	9901      	ldr	r1, [sp, #4]
  4037ca:	a885      	add	r0, sp, #532	; 0x214
  4037cc:	4b53      	ldr	r3, [pc, #332]	; (40391c <f_open+0x184>)
  4037ce:	4798      	blx	r3
  4037d0:	4603      	mov	r3, r0
	dir = dj.dir;
  4037d2:	9c8a      	ldr	r4, [sp, #552]	; 0x228

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
		if (!dir)	/* Current dir itself */
  4037d4:	b914      	cbnz	r4, 4037dc <f_open+0x44>
  4037d6:	2800      	cmp	r0, #0
  4037d8:	f000 8086 	beq.w	4038e8 <f_open+0x150>
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
  4037dc:	f016 0f1c 	tst.w	r6, #28
  4037e0:	d048      	beq.n	403874 <f_open+0xdc>
		DWORD dw, cl;

		if (res != FR_OK) {					/* No file, create new */
  4037e2:	b15b      	cbz	r3, 4037fc <f_open+0x64>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
  4037e4:	2b04      	cmp	r3, #4
  4037e6:	f040 8087 	bne.w	4038f8 <f_open+0x160>
#if _FS_SHARE
				res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
  4037ea:	a885      	add	r0, sp, #532	; 0x214
  4037ec:	4b4c      	ldr	r3, [pc, #304]	; (403920 <f_open+0x188>)
  4037ee:	4798      	blx	r3
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
  4037f0:	f047 0708 	orr.w	r7, r7, #8
			dir = dj.dir;					/* New entry */
  4037f4:	9c8a      	ldr	r4, [sp, #552]	; 0x228
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
					res = FR_EXIST;
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
  4037f6:	4603      	mov	r3, r0
  4037f8:	b138      	cbz	r0, 40380a <f_open+0x72>
  4037fa:	e088      	b.n	40390e <f_open+0x176>
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
			dir = dj.dir;					/* New entry */
		}
		else {								/* Any object is already existing */
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
  4037fc:	7ae3      	ldrb	r3, [r4, #11]
  4037fe:	f013 0f11 	tst.w	r3, #17
  403802:	d17d      	bne.n	403900 <f_open+0x168>
				res = FR_DENIED;
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
  403804:	f016 0f04 	tst.w	r6, #4
  403808:	d17c      	bne.n	403904 <f_open+0x16c>
					res = FR_EXIST;
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
  40380a:	f017 0f08 	tst.w	r7, #8
  40380e:	d042      	beq.n	403896 <f_open+0xfe>
			dw = get_fattime();					/* Created time */
  403810:	4b44      	ldr	r3, [pc, #272]	; (403924 <f_open+0x18c>)
  403812:	4798      	blx	r3
			ST_DWORD(dir+DIR_CrtTime, dw);
  403814:	73a0      	strb	r0, [r4, #14]
  403816:	1203      	asrs	r3, r0, #8
  403818:	73e3      	strb	r3, [r4, #15]
  40381a:	0c03      	lsrs	r3, r0, #16
  40381c:	7423      	strb	r3, [r4, #16]
  40381e:	0e00      	lsrs	r0, r0, #24
  403820:	7460      	strb	r0, [r4, #17]
			dir[DIR_Attr] = 0;					/* Reset attribute */
  403822:	2300      	movs	r3, #0
  403824:	72e3      	strb	r3, [r4, #11]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
  403826:	7723      	strb	r3, [r4, #28]
  403828:	7763      	strb	r3, [r4, #29]
  40382a:	77a3      	strb	r3, [r4, #30]
  40382c:	77e3      	strb	r3, [r4, #31]
			cl = LD_CLUST(dir);					/* Get start cluster */
  40382e:	7d66      	ldrb	r6, [r4, #21]
  403830:	7d22      	ldrb	r2, [r4, #20]
  403832:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
  403836:	7ee2      	ldrb	r2, [r4, #27]
  403838:	7ea1      	ldrb	r1, [r4, #26]
  40383a:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
			ST_CLUST(dir, 0);					/* cluster = 0 */
  40383e:	76a3      	strb	r3, [r4, #26]
  403840:	76e3      	strb	r3, [r4, #27]
  403842:	7523      	strb	r3, [r4, #20]
  403844:	7563      	strb	r3, [r4, #21]
			dj.fs->wflag = 1;
  403846:	9885      	ldr	r0, [sp, #532]	; 0x214
  403848:	2301      	movs	r3, #1
  40384a:	7103      	strb	r3, [r0, #4]
			if (cl) {							/* Remove the cluster chain if exist */
  40384c:	ea52 4606 	orrs.w	r6, r2, r6, lsl #16
  403850:	d01f      	beq.n	403892 <f_open+0xfa>
				dw = dj.fs->winsect;
  403852:	f8d0 802c 	ldr.w	r8, [r0, #44]	; 0x2c
				res = remove_chain(dj.fs, cl);
  403856:	4631      	mov	r1, r6
  403858:	4b33      	ldr	r3, [pc, #204]	; (403928 <f_open+0x190>)
  40385a:	4798      	blx	r3
				if (res == FR_OK) {
  40385c:	4603      	mov	r3, r0
  40385e:	2800      	cmp	r0, #0
  403860:	d155      	bne.n	40390e <f_open+0x176>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
  403862:	9885      	ldr	r0, [sp, #532]	; 0x214
  403864:	1e72      	subs	r2, r6, #1
  403866:	60c2      	str	r2, [r0, #12]
					res = move_window(dj.fs, dw);
  403868:	4641      	mov	r1, r8
  40386a:	4b30      	ldr	r3, [pc, #192]	; (40392c <f_open+0x194>)
  40386c:	4798      	blx	r3
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
					res = FR_DENIED;
			}
		}
	}
	if (res == FR_OK) {
  40386e:	4603      	mov	r3, r0
  403870:	b178      	cbz	r0, 403892 <f_open+0xfa>
  403872:	e04c      	b.n	40390e <f_open+0x176>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
  403874:	2b00      	cmp	r3, #0
  403876:	d14a      	bne.n	40390e <f_open+0x176>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
  403878:	7ae3      	ldrb	r3, [r4, #11]
  40387a:	f013 0f10 	tst.w	r3, #16
  40387e:	d143      	bne.n	403908 <f_open+0x170>
				res = FR_NO_FILE;
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
  403880:	f016 0f02 	tst.w	r6, #2
  403884:	d002      	beq.n	40388c <f_open+0xf4>
  403886:	f013 0f01 	tst.w	r3, #1
  40388a:	d13f      	bne.n	40390c <f_open+0x174>
					res = FR_DENIED;
			}
		}
	}
	if (res == FR_OK) {
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
  40388c:	f016 0f08 	tst.w	r6, #8
  403890:	d001      	beq.n	403896 <f_open+0xfe>
			mode |= FA__WRITTEN;
  403892:	f047 0720 	orr.w	r7, r7, #32
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
  403896:	9b85      	ldr	r3, [sp, #532]	; 0x214
  403898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40389a:	61eb      	str	r3, [r5, #28]
		fp->dir_ptr = dir;
  40389c:	622c      	str	r4, [r5, #32]
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
		fp->flag = mode;					/* File access mode */
  40389e:	71af      	strb	r7, [r5, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
  4038a0:	7d61      	ldrb	r1, [r4, #21]
  4038a2:	7d23      	ldrb	r3, [r4, #20]
  4038a4:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
  4038a8:	7ee3      	ldrb	r3, [r4, #27]
  4038aa:	7ea2      	ldrb	r2, [r4, #26]
  4038ac:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
  4038b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  4038b4:	612b      	str	r3, [r5, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
  4038b6:	7fe2      	ldrb	r2, [r4, #31]
  4038b8:	7fa3      	ldrb	r3, [r4, #30]
  4038ba:	041b      	lsls	r3, r3, #16
  4038bc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  4038c0:	7f22      	ldrb	r2, [r4, #28]
  4038c2:	4313      	orrs	r3, r2
  4038c4:	7f62      	ldrb	r2, [r4, #29]
  4038c6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  4038ca:	60eb      	str	r3, [r5, #12]
		fp->fptr = 0;						/* File pointer */
  4038cc:	2300      	movs	r3, #0
  4038ce:	60ab      	str	r3, [r5, #8]
		fp->dsect = 0;
  4038d0:	61ab      	str	r3, [r5, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
  4038d2:	9a85      	ldr	r2, [sp, #532]	; 0x214
  4038d4:	602a      	str	r2, [r5, #0]
  4038d6:	88d2      	ldrh	r2, [r2, #6]
  4038d8:	80aa      	strh	r2, [r5, #4]
  4038da:	e018      	b.n	40390e <f_open+0x176>
  4038dc:	4603      	mov	r3, r0
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
	if (res == FR_OK)
		res = follow_path(&dj, path);	/* Follow the file path */
	dir = dj.dir;
  4038de:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
  4038e0:	f016 0f1c 	tst.w	r6, #28
  4038e4:	d0c6      	beq.n	403874 <f_open+0xdc>
  4038e6:	e77d      	b.n	4037e4 <f_open+0x4c>
  4038e8:	f016 0f1c 	tst.w	r6, #28
  4038ec:	d103      	bne.n	4038f6 <f_open+0x15e>
	dir = dj.dir;

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
		if (!dir)	/* Current dir itself */
			res = FR_INVALID_NAME;
  4038ee:	2306      	movs	r3, #6
		}
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
  4038f0:	2b00      	cmp	r3, #0
  4038f2:	d0d4      	beq.n	40389e <f_open+0x106>
  4038f4:	e00b      	b.n	40390e <f_open+0x176>
	dir = dj.dir;

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
		if (!dir)	/* Current dir itself */
			res = FR_INVALID_NAME;
  4038f6:	2306      	movs	r3, #6
#if _FS_SHARE
				res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
  4038f8:	f047 0708 	orr.w	r7, r7, #8
			dir = dj.dir;					/* New entry */
  4038fc:	9c8a      	ldr	r4, [sp, #552]	; 0x228
  4038fe:	e7f7      	b.n	4038f0 <f_open+0x158>
		}
		else {								/* Any object is already existing */
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
				res = FR_DENIED;
  403900:	2307      	movs	r3, #7
  403902:	e004      	b.n	40390e <f_open+0x176>
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
					res = FR_EXIST;
  403904:	2308      	movs	r3, #8
  403906:	e002      	b.n	40390e <f_open+0x176>
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
				res = FR_NO_FILE;
  403908:	2304      	movs	r3, #4
  40390a:	e000      	b.n	40390e <f_open+0x176>
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
					res = FR_DENIED;
  40390c:	2307      	movs	r3, #7
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
	}

	LEAVE_FF(dj.fs, res);
}
  40390e:	4618      	mov	r0, r3
  403910:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
  403914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403918:	00402595 	.word	0x00402595
  40391c:	00403449 	.word	0x00403449
  403920:	004030ad 	.word	0x004030ad
  403924:	0040241d 	.word	0x0040241d
  403928:	00402d3d 	.word	0x00402d3d
  40392c:	00402929 	.word	0x00402929

00403930 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
  403930:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403934:	4604      	mov	r4, r0
  403936:	4689      	mov	r9, r1
  403938:	4616      	mov	r6, r2
  40393a:	4698      	mov	r8, r3
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
  40393c:	2300      	movs	r3, #0
  40393e:	f8c8 3000 	str.w	r3, [r8]

	res = validate(fp->fs, fp->id);			/* Check validity */
  403942:	8881      	ldrh	r1, [r0, #4]
  403944:	6800      	ldr	r0, [r0, #0]
  403946:	4b74      	ldr	r3, [pc, #464]	; (403b18 <f_write+0x1e8>)
  403948:	4798      	blx	r3
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
  40394a:	2800      	cmp	r0, #0
  40394c:	f040 80db 	bne.w	403b06 <f_write+0x1d6>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
  403950:	79a3      	ldrb	r3, [r4, #6]
  403952:	f013 0f80 	tst.w	r3, #128	; 0x80
  403956:	f040 80d8 	bne.w	403b0a <f_write+0x1da>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
  40395a:	f013 0f02 	tst.w	r3, #2
  40395e:	f000 80d7 	beq.w	403b10 <f_write+0x1e0>
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
  403962:	68e3      	ldr	r3, [r4, #12]
  403964:	42f3      	cmn	r3, r6
  403966:	f080 80c2 	bcs.w	403aee <f_write+0x1be>

	for ( ;  btw;							/* Repeat until all data written */
  40396a:	2e00      	cmp	r6, #0
  40396c:	f000 80bf 	beq.w	403aee <f_write+0x1be>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
  403970:	68a2      	ldr	r2, [r4, #8]
  403972:	f3c2 0308 	ubfx	r3, r2, #0, #9
  403976:	2b00      	cmp	r3, #0
  403978:	f040 808c 	bne.w	403a94 <f_write+0x164>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
  40397c:	6820      	ldr	r0, [r4, #0]
  40397e:	7883      	ldrb	r3, [r0, #2]
  403980:	3b01      	subs	r3, #1
  403982:	ea03 2352 	and.w	r3, r3, r2, lsr #9
			if (!csect) {					/* On the cluster boundary? */
  403986:	f013 07ff 	ands.w	r7, r3, #255	; 0xff
  40398a:	d123      	bne.n	4039d4 <f_write+0xa4>
				if (fp->fptr == 0) {		/* On the top of the file? */
  40398c:	b93a      	cbnz	r2, 40399e <f_write+0x6e>
					clst = fp->sclust;		/* Follow from the origin */
  40398e:	6923      	ldr	r3, [r4, #16]
					if (clst == 0)			/* When no cluster is allocated, */
  403990:	b963      	cbnz	r3, 4039ac <f_write+0x7c>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
  403992:	2100      	movs	r1, #0
  403994:	4b61      	ldr	r3, [pc, #388]	; (403b1c <f_write+0x1ec>)
  403996:	4798      	blx	r3
  403998:	4603      	mov	r3, r0
  40399a:	6120      	str	r0, [r4, #16]
  40399c:	e003      	b.n	4039a6 <f_write+0x76>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
  40399e:	6961      	ldr	r1, [r4, #20]
  4039a0:	4b5e      	ldr	r3, [pc, #376]	; (403b1c <f_write+0x1ec>)
  4039a2:	4798      	blx	r3
  4039a4:	4603      	mov	r3, r0
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
  4039a6:	2b00      	cmp	r3, #0
  4039a8:	f000 80a1 	beq.w	403aee <f_write+0x1be>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
  4039ac:	2b01      	cmp	r3, #1
  4039ae:	d106      	bne.n	4039be <f_write+0x8e>
  4039b0:	79a3      	ldrb	r3, [r4, #6]
  4039b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
  4039b6:	71a3      	strb	r3, [r4, #6]
  4039b8:	2002      	movs	r0, #2
  4039ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
  4039be:	f1b3 3fff 	cmp.w	r3, #4294967295
  4039c2:	d106      	bne.n	4039d2 <f_write+0xa2>
  4039c4:	79a3      	ldrb	r3, [r4, #6]
  4039c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
  4039ca:	71a3      	strb	r3, [r4, #6]
  4039cc:	2001      	movs	r0, #1
  4039ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				fp->clust = clst;			/* Update current cluster */
  4039d2:	6163      	str	r3, [r4, #20]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
  4039d4:	6820      	ldr	r0, [r4, #0]
  4039d6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  4039d8:	69a3      	ldr	r3, [r4, #24]
  4039da:	429a      	cmp	r2, r3
  4039dc:	d10a      	bne.n	4039f4 <f_write+0xc4>
  4039de:	2100      	movs	r1, #0
  4039e0:	4b4f      	ldr	r3, [pc, #316]	; (403b20 <f_write+0x1f0>)
  4039e2:	4798      	blx	r3
  4039e4:	b130      	cbz	r0, 4039f4 <f_write+0xc4>
				ABORT(fp->fs, FR_DISK_ERR);
  4039e6:	79a3      	ldrb	r3, [r4, #6]
  4039e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
  4039ec:	71a3      	strb	r3, [r4, #6]
  4039ee:	2001      	movs	r0, #1
  4039f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
  4039f4:	f8d4 a000 	ldr.w	sl, [r4]
  4039f8:	6961      	ldr	r1, [r4, #20]
  4039fa:	4650      	mov	r0, sl
  4039fc:	4b49      	ldr	r3, [pc, #292]	; (403b24 <f_write+0x1f4>)
  4039fe:	4798      	blx	r3
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
  403a00:	4605      	mov	r5, r0
  403a02:	b930      	cbnz	r0, 403a12 <f_write+0xe2>
  403a04:	79a3      	ldrb	r3, [r4, #6]
  403a06:	f063 037f 	orn	r3, r3, #127	; 0x7f
  403a0a:	71a3      	strb	r3, [r4, #6]
  403a0c:	2002      	movs	r0, #2
  403a0e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			sect += csect;
  403a12:	443d      	add	r5, r7
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
			if (cc) {						/* Write maximum contiguous sectors directly */
  403a14:	ea5f 2b56 	movs.w	fp, r6, lsr #9
  403a18:	d029      	beq.n	403a6e <f_write+0x13e>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
  403a1a:	f89a 3002 	ldrb.w	r3, [sl, #2]
  403a1e:	eb07 020b 	add.w	r2, r7, fp
  403a22:	429a      	cmp	r2, r3
					cc = fp->fs->csize - csect;
  403a24:	bf88      	it	hi
  403a26:	ebc7 0b03 	rsbhi	fp, r7, r3
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
  403a2a:	fa5f f38b 	uxtb.w	r3, fp
  403a2e:	462a      	mov	r2, r5
  403a30:	4649      	mov	r1, r9
  403a32:	f89a 0001 	ldrb.w	r0, [sl, #1]
  403a36:	4f3c      	ldr	r7, [pc, #240]	; (403b28 <f_write+0x1f8>)
  403a38:	47b8      	blx	r7
  403a3a:	b130      	cbz	r0, 403a4a <f_write+0x11a>
					ABORT(fp->fs, FR_DISK_ERR);
  403a3c:	79a3      	ldrb	r3, [r4, #6]
  403a3e:	f063 037f 	orn	r3, r3, #127	; 0x7f
  403a42:	71a3      	strb	r3, [r4, #6]
  403a44:	2001      	movs	r0, #1
  403a46:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
  403a4a:	6820      	ldr	r0, [r4, #0]
  403a4c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  403a4e:	1b49      	subs	r1, r1, r5
  403a50:	458b      	cmp	fp, r1
  403a52:	d909      	bls.n	403a68 <f_write+0x138>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
  403a54:	f44f 7200 	mov.w	r2, #512	; 0x200
  403a58:	eb09 2141 	add.w	r1, r9, r1, lsl #9
  403a5c:	3030      	adds	r0, #48	; 0x30
  403a5e:	4b33      	ldr	r3, [pc, #204]	; (403b2c <f_write+0x1fc>)
  403a60:	4798      	blx	r3
					fp->fs->wflag = 0;
  403a62:	6823      	ldr	r3, [r4, #0]
  403a64:	2200      	movs	r2, #0
  403a66:	711a      	strb	r2, [r3, #4]
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
  403a68:	ea4f 254b 	mov.w	r5, fp, lsl #9
				continue;
  403a6c:	e033      	b.n	403ad6 <f_write+0x1a6>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
  403a6e:	68a2      	ldr	r2, [r4, #8]
  403a70:	68e3      	ldr	r3, [r4, #12]
  403a72:	429a      	cmp	r2, r3
  403a74:	d30d      	bcc.n	403a92 <f_write+0x162>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
  403a76:	2100      	movs	r1, #0
  403a78:	4650      	mov	r0, sl
  403a7a:	4b29      	ldr	r3, [pc, #164]	; (403b20 <f_write+0x1f0>)
  403a7c:	4798      	blx	r3
  403a7e:	b130      	cbz	r0, 403a8e <f_write+0x15e>
  403a80:	79a3      	ldrb	r3, [r4, #6]
  403a82:	f063 037f 	orn	r3, r3, #127	; 0x7f
  403a86:	71a3      	strb	r3, [r4, #6]
  403a88:	2001      	movs	r0, #1
  403a8a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				fp->fs->winsect = sect;
  403a8e:	6823      	ldr	r3, [r4, #0]
  403a90:	62dd      	str	r5, [r3, #44]	; 0x2c
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
  403a92:	61a5      	str	r5, [r4, #24]
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
  403a94:	68a5      	ldr	r5, [r4, #8]
  403a96:	f3c5 0508 	ubfx	r5, r5, #0, #9
  403a9a:	f5c5 7500 	rsb	r5, r5, #512	; 0x200
  403a9e:	42b5      	cmp	r5, r6
  403aa0:	bf28      	it	cs
  403aa2:	4635      	movcs	r5, r6
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
  403aa4:	69a1      	ldr	r1, [r4, #24]
  403aa6:	6820      	ldr	r0, [r4, #0]
  403aa8:	4b1d      	ldr	r3, [pc, #116]	; (403b20 <f_write+0x1f0>)
  403aaa:	4798      	blx	r3
  403aac:	b130      	cbz	r0, 403abc <f_write+0x18c>
			ABORT(fp->fs, FR_DISK_ERR);
  403aae:	79a3      	ldrb	r3, [r4, #6]
  403ab0:	f063 037f 	orn	r3, r3, #127	; 0x7f
  403ab4:	71a3      	strb	r3, [r4, #6]
  403ab6:	2001      	movs	r0, #1
  403ab8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
  403abc:	68a0      	ldr	r0, [r4, #8]
  403abe:	f3c0 0008 	ubfx	r0, r0, #0, #9
  403ac2:	3030      	adds	r0, #48	; 0x30
  403ac4:	6823      	ldr	r3, [r4, #0]
  403ac6:	462a      	mov	r2, r5
  403ac8:	4649      	mov	r1, r9
  403aca:	4418      	add	r0, r3
  403acc:	4b17      	ldr	r3, [pc, #92]	; (403b2c <f_write+0x1fc>)
  403ace:	4798      	blx	r3
		fp->fs->wflag = 1;
  403ad0:	6823      	ldr	r3, [r4, #0]
  403ad2:	2201      	movs	r2, #1
  403ad4:	711a      	strb	r2, [r3, #4]
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
  403ad6:	44a9      	add	r9, r5
  403ad8:	68a3      	ldr	r3, [r4, #8]
  403ada:	442b      	add	r3, r5
  403adc:	60a3      	str	r3, [r4, #8]
  403ade:	f8d8 3000 	ldr.w	r3, [r8]
  403ae2:	442b      	add	r3, r5
  403ae4:	f8c8 3000 	str.w	r3, [r8]
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
  403ae8:	1b76      	subs	r6, r6, r5
  403aea:	f47f af41 	bne.w	403970 <f_write+0x40>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
  403aee:	68a3      	ldr	r3, [r4, #8]
  403af0:	68e2      	ldr	r2, [r4, #12]
  403af2:	4293      	cmp	r3, r2
  403af4:	bf88      	it	hi
  403af6:	60e3      	strhi	r3, [r4, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
  403af8:	79a3      	ldrb	r3, [r4, #6]
  403afa:	f043 0320 	orr.w	r3, r3, #32
  403afe:	71a3      	strb	r3, [r4, #6]

	LEAVE_FF(fp->fs, FR_OK);
  403b00:	2000      	movs	r0, #0
  403b02:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403b06:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	*bw = 0;	/* Initialize byte counter */

	res = validate(fp->fs, fp->id);			/* Check validity */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)				/* Aborted file? */
		LEAVE_FF(fp->fs, FR_INT_ERR);
  403b0a:	2002      	movs	r0, #2
  403b0c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
  403b10:	2007      	movs	r0, #7

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
	fp->flag |= FA__WRITTEN;						/* Set file change flag */

	LEAVE_FF(fp->fs, FR_OK);
}
  403b12:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403b16:	bf00      	nop
  403b18:	004024d1 	.word	0x004024d1
  403b1c:	00402c75 	.word	0x00402c75
  403b20:	00402929 	.word	0x00402929
  403b24:	00402499 	.word	0x00402499
  403b28:	00402339 	.word	0x00402339
  403b2c:	00402475 	.word	0x00402475

00403b30 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
  403b30:	b538      	push	{r3, r4, r5, lr}
  403b32:	4604      	mov	r4, r0
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
  403b34:	8881      	ldrh	r1, [r0, #4]
  403b36:	6800      	ldr	r0, [r0, #0]
  403b38:	4b1e      	ldr	r3, [pc, #120]	; (403bb4 <f_sync+0x84>)
  403b3a:	4798      	blx	r3
	if (res == FR_OK) {
  403b3c:	4603      	mov	r3, r0
  403b3e:	2800      	cmp	r0, #0
  403b40:	d135      	bne.n	403bae <f_sync+0x7e>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
  403b42:	79a2      	ldrb	r2, [r4, #6]
  403b44:	f012 0f20 	tst.w	r2, #32
  403b48:	d031      	beq.n	403bae <f_sync+0x7e>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
  403b4a:	69e1      	ldr	r1, [r4, #28]
  403b4c:	6820      	ldr	r0, [r4, #0]
  403b4e:	4b1a      	ldr	r3, [pc, #104]	; (403bb8 <f_sync+0x88>)
  403b50:	4798      	blx	r3
			if (res == FR_OK) {
  403b52:	4603      	mov	r3, r0
  403b54:	bb58      	cbnz	r0, 403bae <f_sync+0x7e>
				dir = fp->dir_ptr;
  403b56:	6a25      	ldr	r5, [r4, #32]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
  403b58:	7aeb      	ldrb	r3, [r5, #11]
  403b5a:	f043 0320 	orr.w	r3, r3, #32
  403b5e:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
  403b60:	68e3      	ldr	r3, [r4, #12]
  403b62:	772b      	strb	r3, [r5, #28]
  403b64:	68e3      	ldr	r3, [r4, #12]
  403b66:	121b      	asrs	r3, r3, #8
  403b68:	776b      	strb	r3, [r5, #29]
  403b6a:	89e3      	ldrh	r3, [r4, #14]
  403b6c:	77ab      	strb	r3, [r5, #30]
  403b6e:	7be3      	ldrb	r3, [r4, #15]
  403b70:	77eb      	strb	r3, [r5, #31]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
  403b72:	6923      	ldr	r3, [r4, #16]
  403b74:	76ab      	strb	r3, [r5, #26]
  403b76:	6923      	ldr	r3, [r4, #16]
  403b78:	121b      	asrs	r3, r3, #8
  403b7a:	76eb      	strb	r3, [r5, #27]
  403b7c:	8a63      	ldrh	r3, [r4, #18]
  403b7e:	752b      	strb	r3, [r5, #20]
  403b80:	8a63      	ldrh	r3, [r4, #18]
  403b82:	121b      	asrs	r3, r3, #8
  403b84:	756b      	strb	r3, [r5, #21]
				tim = get_fattime();						/* Update updated time */
  403b86:	4b0d      	ldr	r3, [pc, #52]	; (403bbc <f_sync+0x8c>)
  403b88:	4798      	blx	r3
				ST_DWORD(dir+DIR_WrtTime, tim);
  403b8a:	75a8      	strb	r0, [r5, #22]
  403b8c:	1203      	asrs	r3, r0, #8
  403b8e:	75eb      	strb	r3, [r5, #23]
  403b90:	0c03      	lsrs	r3, r0, #16
  403b92:	762b      	strb	r3, [r5, #24]
  403b94:	0e00      	lsrs	r0, r0, #24
  403b96:	7668      	strb	r0, [r5, #25]
				fp->flag &= ~FA__WRITTEN;
  403b98:	79a3      	ldrb	r3, [r4, #6]
  403b9a:	f023 0320 	bic.w	r3, r3, #32
  403b9e:	71a3      	strb	r3, [r4, #6]
				fp->fs->wflag = 1;
  403ba0:	6823      	ldr	r3, [r4, #0]
  403ba2:	2201      	movs	r2, #1
  403ba4:	711a      	strb	r2, [r3, #4]
				res = sync(fp->fs);
  403ba6:	6820      	ldr	r0, [r4, #0]
  403ba8:	4b05      	ldr	r3, [pc, #20]	; (403bc0 <f_sync+0x90>)
  403baa:	4798      	blx	r3
  403bac:	4603      	mov	r3, r0
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
  403bae:	4618      	mov	r0, r3
  403bb0:	bd38      	pop	{r3, r4, r5, pc}
  403bb2:	bf00      	nop
  403bb4:	004024d1 	.word	0x004024d1
  403bb8:	00402929 	.word	0x00402929
  403bbc:	0040241d 	.word	0x0040241d
  403bc0:	00403381 	.word	0x00403381

00403bc4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
  403bc4:	b510      	push	{r4, lr}
  403bc6:	4604      	mov	r4, r0
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
  403bc8:	4b03      	ldr	r3, [pc, #12]	; (403bd8 <f_close+0x14>)
  403bca:	4798      	blx	r3
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
  403bcc:	4603      	mov	r3, r0
  403bce:	b908      	cbnz	r0, 403bd4 <f_close+0x10>
  403bd0:	2200      	movs	r2, #0
  403bd2:	6022      	str	r2, [r4, #0]
	return res;
#endif
}
  403bd4:	4618      	mov	r0, r3
  403bd6:	bd10      	pop	{r4, pc}
  403bd8:	00403b31 	.word	0x00403b31

00403bdc <f_putc>:
/*-----------------------------------------------------------------------*/
int f_putc (
	TCHAR c,	/* A character to be output */
	FIL* fil	/* Pointer to the file object */
)
{
  403bdc:	b510      	push	{r4, lr}
  403bde:	b082      	sub	sp, #8
  403be0:	460c      	mov	r4, r1
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
  403be2:	f88d 0000 	strb.w	r0, [sp]
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
  403be6:	ab01      	add	r3, sp, #4
  403be8:	2201      	movs	r2, #1
  403bea:	4669      	mov	r1, sp
  403bec:	4620      	mov	r0, r4
  403bee:	4c05      	ldr	r4, [pc, #20]	; (403c04 <f_putc+0x28>)
  403bf0:	47a0      	blx	r4
	return (bw == btw) ? 1 : EOF;	/* Return the result */
  403bf2:	9b01      	ldr	r3, [sp, #4]
  403bf4:	2b01      	cmp	r3, #1
}
  403bf6:	bf0c      	ite	eq
  403bf8:	2001      	moveq	r0, #1
  403bfa:	f04f 30ff 	movne.w	r0, #4294967295
  403bfe:	b002      	add	sp, #8
  403c00:	bd10      	pop	{r4, pc}
  403c02:	bf00      	nop
  403c04:	00403931 	.word	0x00403931

00403c08 <f_puts>:
/*-----------------------------------------------------------------------*/
int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fil			/* Pointer to the file object */
)
{
  403c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int n;


	for (n = 0; *str; str++, n++) {
  403c0a:	7803      	ldrb	r3, [r0, #0]
  403c0c:	b17b      	cbz	r3, 403c2e <f_puts+0x26>
  403c0e:	460e      	mov	r6, r1
  403c10:	4605      	mov	r5, r0
  403c12:	1c44      	adds	r4, r0, #1
		if (f_putc(*str, fil) == EOF) return EOF;
  403c14:	4f07      	ldr	r7, [pc, #28]	; (403c34 <f_puts+0x2c>)
  403c16:	4631      	mov	r1, r6
  403c18:	4618      	mov	r0, r3
  403c1a:	47b8      	blx	r7
  403c1c:	f1b0 3fff 	cmp.w	r0, #4294967295
  403c20:	d006      	beq.n	403c30 <f_puts+0x28>
  403c22:	1b60      	subs	r0, r4, r5
)
{
	int n;


	for (n = 0; *str; str++, n++) {
  403c24:	f814 3b01 	ldrb.w	r3, [r4], #1
  403c28:	2b00      	cmp	r3, #0
  403c2a:	d1f4      	bne.n	403c16 <f_puts+0xe>
  403c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403c2e:	2000      	movs	r0, #0
		if (f_putc(*str, fil) == EOF) return EOF;
	}
	return n;
}
  403c30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403c32:	bf00      	nop
  403c34:	00403bdd 	.word	0x00403bdd

00403c38 <ff_convert>:
)
{
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
  403c38:	287f      	cmp	r0, #127	; 0x7f
  403c3a:	d91b      	bls.n	403c74 <ff_convert+0x3c>
		c = src;

	} else {
		if (dir) {		/* OEMCP to Unicode */
  403c3c:	b911      	cbnz	r1, 403c44 <ff_convert+0xc>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
				if (src == Tbl[c]) break;
  403c3e:	28c7      	cmp	r0, #199	; 0xc7
  403c40:	d108      	bne.n	403c54 <ff_convert+0x1c>
  403c42:	e012      	b.n	403c6a <ff_convert+0x32>
	if (src < 0x80) {	/* ASCII */
		c = src;

	} else {
		if (dir) {		/* OEMCP to Unicode */
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
  403c44:	28ff      	cmp	r0, #255	; 0xff
  403c46:	d814      	bhi.n	403c72 <ff_convert+0x3a>
  403c48:	f1a0 0380 	sub.w	r3, r0, #128	; 0x80
  403c4c:	4a0a      	ldr	r2, [pc, #40]	; (403c78 <ff_convert+0x40>)
  403c4e:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
  403c52:	4770      	bx	lr
  403c54:	4a08      	ldr	r2, [pc, #32]	; (403c78 <ff_convert+0x40>)

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
  403c56:	2301      	movs	r3, #1
				if (src == Tbl[c]) break;
  403c58:	f832 1f02 	ldrh.w	r1, [r2, #2]!
  403c5c:	4281      	cmp	r1, r0
  403c5e:	d005      	beq.n	403c6c <ff_convert+0x34>
	} else {
		if (dir) {		/* OEMCP to Unicode */
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
  403c60:	3301      	adds	r3, #1
  403c62:	b29b      	uxth	r3, r3
  403c64:	2b80      	cmp	r3, #128	; 0x80
  403c66:	d1f7      	bne.n	403c58 <ff_convert+0x20>
  403c68:	e000      	b.n	403c6c <ff_convert+0x34>
				if (src == Tbl[c]) break;
  403c6a:	2300      	movs	r3, #0
			}
			c = (c + 0x80) & 0xFF;
  403c6c:	3380      	adds	r3, #128	; 0x80
  403c6e:	b2d8      	uxtb	r0, r3
  403c70:	4770      	bx	lr
	if (src < 0x80) {	/* ASCII */
		c = src;

	} else {
		if (dir) {		/* OEMCP to Unicode */
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
  403c72:	2000      	movs	r0, #0
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
  403c74:	4770      	bx	lr
  403c76:	bf00      	nop
  403c78:	00407220 	.word	0x00407220

00403c7c <ff_wtoupper>:
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
  403c7c:	2861      	cmp	r0, #97	; 0x61
  403c7e:	d00a      	beq.n	403c96 <ff_wtoupper+0x1a>
  403c80:	4907      	ldr	r1, [pc, #28]	; (403ca0 <ff_wtoupper+0x24>)
  403c82:	2200      	movs	r2, #0
  403c84:	3201      	adds	r2, #1
  403c86:	f831 3f02 	ldrh.w	r3, [r1, #2]!
  403c8a:	4283      	cmp	r3, r0
  403c8c:	d001      	beq.n	403c92 <ff_wtoupper+0x16>
  403c8e:	2b00      	cmp	r3, #0
  403c90:	d1f8      	bne.n	403c84 <ff_wtoupper+0x8>

	return tbl_lower[i] ? tbl_upper[i] : chr;
  403c92:	b90b      	cbnz	r3, 403c98 <ff_wtoupper+0x1c>
  403c94:	4770      	bx	lr
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
  403c96:	2200      	movs	r2, #0

	return tbl_lower[i] ? tbl_upper[i] : chr;
  403c98:	4b02      	ldr	r3, [pc, #8]	; (403ca4 <ff_wtoupper+0x28>)
  403c9a:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
}
  403c9e:	4770      	bx	lr
  403ca0:	00407500 	.word	0x00407500
  403ca4:	00407320 	.word	0x00407320

00403ca8 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  403ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
  403caa:	b083      	sub	sp, #12
  403cac:	4605      	mov	r5, r0
  403cae:	460c      	mov	r4, r1
	uint32_t val = 0;
  403cb0:	2300      	movs	r3, #0
  403cb2:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  403cb4:	4b29      	ldr	r3, [pc, #164]	; (403d5c <usart_serial_getchar+0xb4>)
  403cb6:	4298      	cmp	r0, r3
  403cb8:	d107      	bne.n	403cca <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
  403cba:	461f      	mov	r7, r3
  403cbc:	4e28      	ldr	r6, [pc, #160]	; (403d60 <usart_serial_getchar+0xb8>)
  403cbe:	4621      	mov	r1, r4
  403cc0:	4638      	mov	r0, r7
  403cc2:	47b0      	blx	r6
  403cc4:	2800      	cmp	r0, #0
  403cc6:	d1fa      	bne.n	403cbe <usart_serial_getchar+0x16>
  403cc8:	e015      	b.n	403cf6 <usart_serial_getchar+0x4e>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  403cca:	4b26      	ldr	r3, [pc, #152]	; (403d64 <usart_serial_getchar+0xbc>)
  403ccc:	4298      	cmp	r0, r3
  403cce:	d107      	bne.n	403ce0 <usart_serial_getchar+0x38>
		while (uart_read((Uart*)p_usart, data));
  403cd0:	461f      	mov	r7, r3
  403cd2:	4e23      	ldr	r6, [pc, #140]	; (403d60 <usart_serial_getchar+0xb8>)
  403cd4:	4621      	mov	r1, r4
  403cd6:	4638      	mov	r0, r7
  403cd8:	47b0      	blx	r6
  403cda:	2800      	cmp	r0, #0
  403cdc:	d1fa      	bne.n	403cd4 <usart_serial_getchar+0x2c>
  403cde:	e015      	b.n	403d0c <usart_serial_getchar+0x64>
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  403ce0:	4b21      	ldr	r3, [pc, #132]	; (403d68 <usart_serial_getchar+0xc0>)
  403ce2:	4298      	cmp	r0, r3
  403ce4:	d107      	bne.n	403cf6 <usart_serial_getchar+0x4e>
		while (uart_read((Uart*)p_usart, data));
  403ce6:	461f      	mov	r7, r3
  403ce8:	4e1d      	ldr	r6, [pc, #116]	; (403d60 <usart_serial_getchar+0xb8>)
  403cea:	4621      	mov	r1, r4
  403cec:	4638      	mov	r0, r7
  403cee:	47b0      	blx	r6
  403cf0:	2800      	cmp	r0, #0
  403cf2:	d1fa      	bne.n	403cea <usart_serial_getchar+0x42>
  403cf4:	e017      	b.n	403d26 <usart_serial_getchar+0x7e>
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  403cf6:	4b1d      	ldr	r3, [pc, #116]	; (403d6c <usart_serial_getchar+0xc4>)
  403cf8:	429d      	cmp	r5, r3
  403cfa:	d107      	bne.n	403d0c <usart_serial_getchar+0x64>
		while (uart_read((Uart*)p_usart, data));
  403cfc:	461f      	mov	r7, r3
  403cfe:	4e18      	ldr	r6, [pc, #96]	; (403d60 <usart_serial_getchar+0xb8>)
  403d00:	4621      	mov	r1, r4
  403d02:	4638      	mov	r0, r7
  403d04:	47b0      	blx	r6
  403d06:	2800      	cmp	r0, #0
  403d08:	d1fa      	bne.n	403d00 <usart_serial_getchar+0x58>
  403d0a:	e019      	b.n	403d40 <usart_serial_getchar+0x98>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  403d0c:	4b18      	ldr	r3, [pc, #96]	; (403d70 <usart_serial_getchar+0xc8>)
  403d0e:	429d      	cmp	r5, r3
  403d10:	d109      	bne.n	403d26 <usart_serial_getchar+0x7e>
		while (usart_read(p_usart, &val));
  403d12:	461e      	mov	r6, r3
  403d14:	4d17      	ldr	r5, [pc, #92]	; (403d74 <usart_serial_getchar+0xcc>)
  403d16:	a901      	add	r1, sp, #4
  403d18:	4630      	mov	r0, r6
  403d1a:	47a8      	blx	r5
  403d1c:	2800      	cmp	r0, #0
  403d1e:	d1fa      	bne.n	403d16 <usart_serial_getchar+0x6e>
		*data = (uint8_t)(val & 0xFF);
  403d20:	9b01      	ldr	r3, [sp, #4]
  403d22:	7023      	strb	r3, [r4, #0]
  403d24:	e018      	b.n	403d58 <usart_serial_getchar+0xb0>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  403d26:	4b14      	ldr	r3, [pc, #80]	; (403d78 <usart_serial_getchar+0xd0>)
  403d28:	429d      	cmp	r5, r3
  403d2a:	d109      	bne.n	403d40 <usart_serial_getchar+0x98>
		while (usart_read(p_usart, &val));
  403d2c:	461e      	mov	r6, r3
  403d2e:	4d11      	ldr	r5, [pc, #68]	; (403d74 <usart_serial_getchar+0xcc>)
  403d30:	a901      	add	r1, sp, #4
  403d32:	4630      	mov	r0, r6
  403d34:	47a8      	blx	r5
  403d36:	2800      	cmp	r0, #0
  403d38:	d1fa      	bne.n	403d30 <usart_serial_getchar+0x88>
		*data = (uint8_t)(val & 0xFF);
  403d3a:	9b01      	ldr	r3, [sp, #4]
  403d3c:	7023      	strb	r3, [r4, #0]
  403d3e:	e00b      	b.n	403d58 <usart_serial_getchar+0xb0>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  403d40:	4b0e      	ldr	r3, [pc, #56]	; (403d7c <usart_serial_getchar+0xd4>)
  403d42:	429d      	cmp	r5, r3
  403d44:	d108      	bne.n	403d58 <usart_serial_getchar+0xb0>
		while (usart_read(p_usart, &val));
  403d46:	461e      	mov	r6, r3
  403d48:	4d0a      	ldr	r5, [pc, #40]	; (403d74 <usart_serial_getchar+0xcc>)
  403d4a:	a901      	add	r1, sp, #4
  403d4c:	4630      	mov	r0, r6
  403d4e:	47a8      	blx	r5
  403d50:	2800      	cmp	r0, #0
  403d52:	d1fa      	bne.n	403d4a <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
  403d54:	9b01      	ldr	r3, [sp, #4]
  403d56:	7023      	strb	r3, [r4, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  403d58:	b003      	add	sp, #12
  403d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403d5c:	400e0800 	.word	0x400e0800
  403d60:	00401e31 	.word	0x00401e31
  403d64:	400e0a00 	.word	0x400e0a00
  403d68:	400e1a00 	.word	0x400e1a00
  403d6c:	400e1c00 	.word	0x400e1c00
  403d70:	40024000 	.word	0x40024000
  403d74:	00401f49 	.word	0x00401f49
  403d78:	40028000 	.word	0x40028000
  403d7c:	4002c000 	.word	0x4002c000

00403d80 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  403d80:	b570      	push	{r4, r5, r6, lr}
  403d82:	460c      	mov	r4, r1
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  403d84:	4b2a      	ldr	r3, [pc, #168]	; (403e30 <usart_serial_putchar+0xb0>)
  403d86:	4298      	cmp	r0, r3
  403d88:	d108      	bne.n	403d9c <usart_serial_putchar+0x1c>
		while (uart_write((Uart*)p_usart, c)!=0);
  403d8a:	461e      	mov	r6, r3
  403d8c:	4d29      	ldr	r5, [pc, #164]	; (403e34 <usart_serial_putchar+0xb4>)
  403d8e:	4621      	mov	r1, r4
  403d90:	4630      	mov	r0, r6
  403d92:	47a8      	blx	r5
  403d94:	2800      	cmp	r0, #0
  403d96:	d1fa      	bne.n	403d8e <usart_serial_putchar+0xe>
		return 1;
  403d98:	2001      	movs	r0, #1
  403d9a:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  403d9c:	4b26      	ldr	r3, [pc, #152]	; (403e38 <usart_serial_putchar+0xb8>)
  403d9e:	4298      	cmp	r0, r3
  403da0:	d108      	bne.n	403db4 <usart_serial_putchar+0x34>
		while (uart_write((Uart*)p_usart, c)!=0);
  403da2:	461e      	mov	r6, r3
  403da4:	4d23      	ldr	r5, [pc, #140]	; (403e34 <usart_serial_putchar+0xb4>)
  403da6:	4621      	mov	r1, r4
  403da8:	4630      	mov	r0, r6
  403daa:	47a8      	blx	r5
  403dac:	2800      	cmp	r0, #0
  403dae:	d1fa      	bne.n	403da6 <usart_serial_putchar+0x26>
		return 1;
  403db0:	2001      	movs	r0, #1
  403db2:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  403db4:	4b21      	ldr	r3, [pc, #132]	; (403e3c <usart_serial_putchar+0xbc>)
  403db6:	4298      	cmp	r0, r3
  403db8:	d108      	bne.n	403dcc <usart_serial_putchar+0x4c>
		while (uart_write((Uart*)p_usart, c)!=0);
  403dba:	461e      	mov	r6, r3
  403dbc:	4d1d      	ldr	r5, [pc, #116]	; (403e34 <usart_serial_putchar+0xb4>)
  403dbe:	4621      	mov	r1, r4
  403dc0:	4630      	mov	r0, r6
  403dc2:	47a8      	blx	r5
  403dc4:	2800      	cmp	r0, #0
  403dc6:	d1fa      	bne.n	403dbe <usart_serial_putchar+0x3e>
		return 1;
  403dc8:	2001      	movs	r0, #1
  403dca:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  403dcc:	4b1c      	ldr	r3, [pc, #112]	; (403e40 <usart_serial_putchar+0xc0>)
  403dce:	4298      	cmp	r0, r3
  403dd0:	d108      	bne.n	403de4 <usart_serial_putchar+0x64>
		while (uart_write((Uart*)p_usart, c)!=0);
  403dd2:	461e      	mov	r6, r3
  403dd4:	4d17      	ldr	r5, [pc, #92]	; (403e34 <usart_serial_putchar+0xb4>)
  403dd6:	4621      	mov	r1, r4
  403dd8:	4630      	mov	r0, r6
  403dda:	47a8      	blx	r5
  403ddc:	2800      	cmp	r0, #0
  403dde:	d1fa      	bne.n	403dd6 <usart_serial_putchar+0x56>
		return 1;
  403de0:	2001      	movs	r0, #1
  403de2:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  403de4:	4b17      	ldr	r3, [pc, #92]	; (403e44 <usart_serial_putchar+0xc4>)
  403de6:	4298      	cmp	r0, r3
  403de8:	d108      	bne.n	403dfc <usart_serial_putchar+0x7c>
		while (usart_write(p_usart, c)!=0);
  403dea:	461e      	mov	r6, r3
  403dec:	4d16      	ldr	r5, [pc, #88]	; (403e48 <usart_serial_putchar+0xc8>)
  403dee:	4621      	mov	r1, r4
  403df0:	4630      	mov	r0, r6
  403df2:	47a8      	blx	r5
  403df4:	2800      	cmp	r0, #0
  403df6:	d1fa      	bne.n	403dee <usart_serial_putchar+0x6e>
		return 1;
  403df8:	2001      	movs	r0, #1
  403dfa:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  403dfc:	4b13      	ldr	r3, [pc, #76]	; (403e4c <usart_serial_putchar+0xcc>)
  403dfe:	4298      	cmp	r0, r3
  403e00:	d108      	bne.n	403e14 <usart_serial_putchar+0x94>
		while (usart_write(p_usart, c)!=0);
  403e02:	461e      	mov	r6, r3
  403e04:	4d10      	ldr	r5, [pc, #64]	; (403e48 <usart_serial_putchar+0xc8>)
  403e06:	4621      	mov	r1, r4
  403e08:	4630      	mov	r0, r6
  403e0a:	47a8      	blx	r5
  403e0c:	2800      	cmp	r0, #0
  403e0e:	d1fa      	bne.n	403e06 <usart_serial_putchar+0x86>
		return 1;
  403e10:	2001      	movs	r0, #1
  403e12:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  403e14:	4b0e      	ldr	r3, [pc, #56]	; (403e50 <usart_serial_putchar+0xd0>)
  403e16:	4298      	cmp	r0, r3
  403e18:	d108      	bne.n	403e2c <usart_serial_putchar+0xac>
		while (usart_write(p_usart, c)!=0);
  403e1a:	461e      	mov	r6, r3
  403e1c:	4d0a      	ldr	r5, [pc, #40]	; (403e48 <usart_serial_putchar+0xc8>)
  403e1e:	4621      	mov	r1, r4
  403e20:	4630      	mov	r0, r6
  403e22:	47a8      	blx	r5
  403e24:	2800      	cmp	r0, #0
  403e26:	d1fa      	bne.n	403e1e <usart_serial_putchar+0x9e>
		return 1;
  403e28:	2001      	movs	r0, #1
  403e2a:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  403e2c:	2000      	movs	r0, #0
}
  403e2e:	bd70      	pop	{r4, r5, r6, pc}
  403e30:	400e0800 	.word	0x400e0800
  403e34:	00401e1d 	.word	0x00401e1d
  403e38:	400e0a00 	.word	0x400e0a00
  403e3c:	400e1a00 	.word	0x400e1a00
  403e40:	400e1c00 	.word	0x400e1c00
  403e44:	40024000 	.word	0x40024000
  403e48:	00401f31 	.word	0x00401f31
  403e4c:	40028000 	.word	0x40028000
  403e50:	4002c000 	.word	0x4002c000

00403e54 <main>:
 * \brief Application entry point.
 *
 * \return Unused (ANSI-C compatibility).
 */
int main(void)
{
  403e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403e58:	f5ad 7d20 	sub.w	sp, sp, #640	; 0x280
	char test_file_name[] = "0:sd_mmc_test.txt";
  403e5c:	ac9b      	add	r4, sp, #620	; 0x26c
  403e5e:	4d4e      	ldr	r5, [pc, #312]	; (403f98 <main+0x144>)
  403e60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  403e62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  403e64:	682b      	ldr	r3, [r5, #0]
  403e66:	8023      	strh	r3, [r4, #0]
		.paritytype = CONF_TEST_PARITY,
		.stopbits   = CONF_TEST_STOPBITS,
	};

	irq_initialize_vectors();
	cpu_irq_enable();
  403e68:	2201      	movs	r2, #1
  403e6a:	4b4c      	ldr	r3, [pc, #304]	; (403f9c <main+0x148>)
  403e6c:	701a      	strb	r2, [r3, #0]
  403e6e:	f3bf 8f5f 	dmb	sy
  403e72:	b662      	cpsie	i

	sysclk_init();
  403e74:	4b4a      	ldr	r3, [pc, #296]	; (403fa0 <main+0x14c>)
  403e76:	4798      	blx	r3
	board_init();
  403e78:	4b4a      	ldr	r3, [pc, #296]	; (403fa4 <main+0x150>)
  403e7a:	4798      	blx	r3
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  403e7c:	4d4a      	ldr	r5, [pc, #296]	; (403fa8 <main+0x154>)
  403e7e:	4b4b      	ldr	r3, [pc, #300]	; (403fac <main+0x158>)
  403e80:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  403e82:	4a4b      	ldr	r2, [pc, #300]	; (403fb0 <main+0x15c>)
  403e84:	4b4b      	ldr	r3, [pc, #300]	; (403fb4 <main+0x160>)
  403e86:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  403e88:	4a4b      	ldr	r2, [pc, #300]	; (403fb8 <main+0x164>)
  403e8a:	4b4c      	ldr	r3, [pc, #304]	; (403fbc <main+0x168>)
  403e8c:	601a      	str	r2, [r3, #0]
	uart_settings.ul_baudrate = opt->baudrate;
	uart_settings.ul_mode = opt->paritytype;
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
  403e8e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  403e92:	9300      	str	r3, [sp, #0]
	usart_settings.char_length = opt->charlength;
  403e94:	23c0      	movs	r3, #192	; 0xc0
  403e96:	9301      	str	r3, [sp, #4]
	usart_settings.parity_type = opt->paritytype;
  403e98:	f44f 6300 	mov.w	r3, #2048	; 0x800
  403e9c:	9302      	str	r3, [sp, #8]
	usart_settings.stop_bits= opt->stopbits;
  403e9e:	2400      	movs	r4, #0
  403ea0:	9403      	str	r4, [sp, #12]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  403ea2:	9404      	str	r4, [sp, #16]
  403ea4:	200e      	movs	r0, #14
  403ea6:	4b46      	ldr	r3, [pc, #280]	; (403fc0 <main+0x16c>)
  403ea8:	4798      	blx	r3
		flexcom_set_opmode(FLEXCOM1, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART1);
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  403eaa:	4a46      	ldr	r2, [pc, #280]	; (403fc4 <main+0x170>)
  403eac:	4669      	mov	r1, sp
  403eae:	4628      	mov	r0, r5
  403eb0:	4b45      	ldr	r3, [pc, #276]	; (403fc8 <main+0x174>)
  403eb2:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  403eb4:	4628      	mov	r0, r5
  403eb6:	4b45      	ldr	r3, [pc, #276]	; (403fcc <main+0x178>)
  403eb8:	4798      	blx	r3
		usart_enable_rx(p_usart);
  403eba:	4628      	mov	r0, r5
  403ebc:	4b44      	ldr	r3, [pc, #272]	; (403fd0 <main+0x17c>)
  403ebe:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  403ec0:	4e44      	ldr	r6, [pc, #272]	; (403fd4 <main+0x180>)
  403ec2:	6833      	ldr	r3, [r6, #0]
  403ec4:	4621      	mov	r1, r4
  403ec6:	6898      	ldr	r0, [r3, #8]
  403ec8:	4d43      	ldr	r5, [pc, #268]	; (403fd8 <main+0x184>)
  403eca:	47a8      	blx	r5
	setbuf(stdin, NULL);
  403ecc:	6833      	ldr	r3, [r6, #0]
  403ece:	4621      	mov	r1, r4
  403ed0:	6858      	ldr	r0, [r3, #4]
  403ed2:	47a8      	blx	r5
	stdio_serial_init(CONF_TEST_USART, &usart_serial_options);

	/* Initialize SD MMC stack */
	sd_mmc_init();
  403ed4:	4b41      	ldr	r3, [pc, #260]	; (403fdc <main+0x188>)
  403ed6:	4798      	blx	r3

	printf("\x0C\n\r-- SD/MMC/SDIO Card Example on FatFs --\n\r");
  403ed8:	4841      	ldr	r0, [pc, #260]	; (403fe0 <main+0x18c>)
  403eda:	4c42      	ldr	r4, [pc, #264]	; (403fe4 <main+0x190>)
  403edc:	47a0      	blx	r4
	printf("-- Compiled: %s %s --\n\r", __DATE__, __TIME__);
  403ede:	4a42      	ldr	r2, [pc, #264]	; (403fe8 <main+0x194>)
  403ee0:	4942      	ldr	r1, [pc, #264]	; (403fec <main+0x198>)
  403ee2:	4843      	ldr	r0, [pc, #268]	; (403ff0 <main+0x19c>)
  403ee4:	47a0      	blx	r4
	while (1) {
		printf("Please plug an SD, MMC or SDIO card in slot.\n\r");
  403ee6:	f8df 8154 	ldr.w	r8, [pc, #340]	; 40403c <main+0x1e8>
  403eea:	4627      	mov	r7, r4

		/* Wait card present and ready */
		do {
			status = sd_mmc_test_unit_ready(0);
  403eec:	4e41      	ldr	r6, [pc, #260]	; (403ff4 <main+0x1a0>)
			if (CTRL_FAIL == status) {
				printf("Card install FAIL\n\r");
				printf("Please unplug and re-plug the card.\n\r");
				while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
  403eee:	4c42      	ldr	r4, [pc, #264]	; (403ff8 <main+0x1a4>)
	sd_mmc_init();

	printf("\x0C\n\r-- SD/MMC/SDIO Card Example on FatFs --\n\r");
	printf("-- Compiled: %s %s --\n\r", __DATE__, __TIME__);
	while (1) {
		printf("Please plug an SD, MMC or SDIO card in slot.\n\r");
  403ef0:	4640      	mov	r0, r8
  403ef2:	47b8      	blx	r7

		/* Wait card present and ready */
		do {
			status = sd_mmc_test_unit_ready(0);
  403ef4:	2000      	movs	r0, #0
  403ef6:	47b0      	blx	r6
			if (CTRL_FAIL == status) {
  403ef8:	2801      	cmp	r0, #1
  403efa:	d109      	bne.n	403f10 <main+0xbc>
				printf("Card install FAIL\n\r");
  403efc:	483f      	ldr	r0, [pc, #252]	; (403ffc <main+0x1a8>)
  403efe:	47b8      	blx	r7
				printf("Please unplug and re-plug the card.\n\r");
  403f00:	483f      	ldr	r0, [pc, #252]	; (404000 <main+0x1ac>)
  403f02:	47b8      	blx	r7
				while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
  403f04:	2500      	movs	r5, #0
  403f06:	4628      	mov	r0, r5
  403f08:	47a0      	blx	r4
  403f0a:	2802      	cmp	r0, #2
  403f0c:	d1fb      	bne.n	403f06 <main+0xb2>
  403f0e:	e7f1      	b.n	403ef4 <main+0xa0>
				}
			}
		} while (CTRL_GOOD != status);
  403f10:	2800      	cmp	r0, #0
  403f12:	d1ef      	bne.n	403ef4 <main+0xa0>

		printf("Mount disk (f_mount)...\r\n");
  403f14:	483b      	ldr	r0, [pc, #236]	; (404004 <main+0x1b0>)
  403f16:	47b8      	blx	r7
		memset(&fs, 0, sizeof(FATFS));
  403f18:	f44f 720c 	mov.w	r2, #560	; 0x230
  403f1c:	2100      	movs	r1, #0
  403f1e:	a80f      	add	r0, sp, #60	; 0x3c
  403f20:	4b39      	ldr	r3, [pc, #228]	; (404008 <main+0x1b4>)
  403f22:	4798      	blx	r3
		res = f_mount(LUN_ID_SD_MMC_0_MEM, &fs);
  403f24:	a90f      	add	r1, sp, #60	; 0x3c
  403f26:	2000      	movs	r0, #0
  403f28:	4b38      	ldr	r3, [pc, #224]	; (40400c <main+0x1b8>)
  403f2a:	4798      	blx	r3
		if (FR_INVALID_DRIVE == res) {
  403f2c:	280b      	cmp	r0, #11
  403f2e:	d103      	bne.n	403f38 <main+0xe4>
			printf("[FAIL] res %d\r\n", res);
  403f30:	210b      	movs	r1, #11
  403f32:	4837      	ldr	r0, [pc, #220]	; (404010 <main+0x1bc>)
  403f34:	47b8      	blx	r7
			goto main_end_of_test;
  403f36:	e026      	b.n	403f86 <main+0x132>
		}
		printf("[OK]\r\n");
  403f38:	4836      	ldr	r0, [pc, #216]	; (404014 <main+0x1c0>)
  403f3a:	47b8      	blx	r7

		printf("Create a file (f_open)...\r\n");
  403f3c:	4836      	ldr	r0, [pc, #216]	; (404018 <main+0x1c4>)
  403f3e:	47b8      	blx	r7
		test_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
  403f40:	a9a0      	add	r1, sp, #640	; 0x280
  403f42:	2330      	movs	r3, #48	; 0x30
  403f44:	f801 3d14 	strb.w	r3, [r1, #-20]!
		res = f_open(&file_object,
  403f48:	220a      	movs	r2, #10
  403f4a:	a806      	add	r0, sp, #24
  403f4c:	4b33      	ldr	r3, [pc, #204]	; (40401c <main+0x1c8>)
  403f4e:	4798      	blx	r3
				(char const *)test_file_name,
				FA_CREATE_ALWAYS | FA_WRITE);
		if (res != FR_OK) {
  403f50:	4601      	mov	r1, r0
  403f52:	b110      	cbz	r0, 403f5a <main+0x106>
			printf("[FAIL] res %d\r\n", res);
  403f54:	482e      	ldr	r0, [pc, #184]	; (404010 <main+0x1bc>)
  403f56:	47b8      	blx	r7
			goto main_end_of_test;
  403f58:	e015      	b.n	403f86 <main+0x132>
		}
		printf("[OK]\r\n");
  403f5a:	482e      	ldr	r0, [pc, #184]	; (404014 <main+0x1c0>)
  403f5c:	47b8      	blx	r7

		printf("Write to test file (f_puts)...\r\n");
  403f5e:	4830      	ldr	r0, [pc, #192]	; (404020 <main+0x1cc>)
  403f60:	47b8      	blx	r7
		if (0 == f_puts("Test SD/MMC stack\n", &file_object)) {
  403f62:	a906      	add	r1, sp, #24
  403f64:	482f      	ldr	r0, [pc, #188]	; (404024 <main+0x1d0>)
  403f66:	4b30      	ldr	r3, [pc, #192]	; (404028 <main+0x1d4>)
  403f68:	4798      	blx	r3
  403f6a:	b928      	cbnz	r0, 403f78 <main+0x124>
			f_close(&file_object);
  403f6c:	a806      	add	r0, sp, #24
  403f6e:	4b2f      	ldr	r3, [pc, #188]	; (40402c <main+0x1d8>)
  403f70:	4798      	blx	r3
			printf("[FAIL]\r\n");
  403f72:	482f      	ldr	r0, [pc, #188]	; (404030 <main+0x1dc>)
  403f74:	47b8      	blx	r7
			goto main_end_of_test;
  403f76:	e006      	b.n	403f86 <main+0x132>
		}
		printf("[OK]\r\n");
  403f78:	4826      	ldr	r0, [pc, #152]	; (404014 <main+0x1c0>)
  403f7a:	47b8      	blx	r7
		f_close(&file_object);
  403f7c:	a806      	add	r0, sp, #24
  403f7e:	4b2b      	ldr	r3, [pc, #172]	; (40402c <main+0x1d8>)
  403f80:	4798      	blx	r3
		printf("Test is successful.\n\r");
  403f82:	482c      	ldr	r0, [pc, #176]	; (404034 <main+0x1e0>)
  403f84:	47b8      	blx	r7

main_end_of_test:
		printf("Please unplug the card.\n\r");
  403f86:	482c      	ldr	r0, [pc, #176]	; (404038 <main+0x1e4>)
  403f88:	47b8      	blx	r7
		while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
  403f8a:	2500      	movs	r5, #0
  403f8c:	4628      	mov	r0, r5
  403f8e:	47a0      	blx	r4
  403f90:	2802      	cmp	r0, #2
  403f92:	d1fb      	bne.n	403f8c <main+0x138>
  403f94:	e7ac      	b.n	403ef0 <main+0x9c>
  403f96:	bf00      	nop
  403f98:	00407874 	.word	0x00407874
  403f9c:	20400030 	.word	0x20400030
  403fa0:	00401005 	.word	0x00401005
  403fa4:	00401175 	.word	0x00401175
  403fa8:	40028000 	.word	0x40028000
  403fac:	204009a8 	.word	0x204009a8
  403fb0:	00403d81 	.word	0x00403d81
  403fb4:	204009a4 	.word	0x204009a4
  403fb8:	00403ca9 	.word	0x00403ca9
  403fbc:	204009a0 	.word	0x204009a0
  403fc0:	00401cf9 	.word	0x00401cf9
  403fc4:	08f0d180 	.word	0x08f0d180
  403fc8:	00401ecd 	.word	0x00401ecd
  403fcc:	00401f21 	.word	0x00401f21
  403fd0:	00401f29 	.word	0x00401f29
  403fd4:	20400460 	.word	0x20400460
  403fd8:	00404155 	.word	0x00404155
  403fdc:	00400345 	.word	0x00400345
  403fe0:	004076e0 	.word	0x004076e0
  403fe4:	00404091 	.word	0x00404091
  403fe8:	00407710 	.word	0x00407710
  403fec:	0040771c 	.word	0x0040771c
  403ff0:	00407728 	.word	0x00407728
  403ff4:	00400ec5 	.word	0x00400ec5
  403ff8:	00400371 	.word	0x00400371
  403ffc:	00407770 	.word	0x00407770
  404000:	00407784 	.word	0x00407784
  404004:	004077ac 	.word	0x004077ac
  404008:	004040b9 	.word	0x004040b9
  40400c:	00403771 	.word	0x00403771
  404010:	004077c8 	.word	0x004077c8
  404014:	004077d8 	.word	0x004077d8
  404018:	004077e0 	.word	0x004077e0
  40401c:	00403799 	.word	0x00403799
  404020:	004077fc 	.word	0x004077fc
  404024:	00407820 	.word	0x00407820
  404028:	00403c09 	.word	0x00403c09
  40402c:	00403bc5 	.word	0x00403bc5
  404030:	00407834 	.word	0x00407834
  404034:	00407840 	.word	0x00407840
  404038:	00407858 	.word	0x00407858
  40403c:	00407740 	.word	0x00407740

00404040 <__libc_init_array>:
  404040:	b570      	push	{r4, r5, r6, lr}
  404042:	4e0f      	ldr	r6, [pc, #60]	; (404080 <__libc_init_array+0x40>)
  404044:	4d0f      	ldr	r5, [pc, #60]	; (404084 <__libc_init_array+0x44>)
  404046:	1b76      	subs	r6, r6, r5
  404048:	10b6      	asrs	r6, r6, #2
  40404a:	bf18      	it	ne
  40404c:	2400      	movne	r4, #0
  40404e:	d005      	beq.n	40405c <__libc_init_array+0x1c>
  404050:	3401      	adds	r4, #1
  404052:	f855 3b04 	ldr.w	r3, [r5], #4
  404056:	4798      	blx	r3
  404058:	42a6      	cmp	r6, r4
  40405a:	d1f9      	bne.n	404050 <__libc_init_array+0x10>
  40405c:	4e0a      	ldr	r6, [pc, #40]	; (404088 <__libc_init_array+0x48>)
  40405e:	4d0b      	ldr	r5, [pc, #44]	; (40408c <__libc_init_array+0x4c>)
  404060:	1b76      	subs	r6, r6, r5
  404062:	f003 fc3d 	bl	4078e0 <_init>
  404066:	10b6      	asrs	r6, r6, #2
  404068:	bf18      	it	ne
  40406a:	2400      	movne	r4, #0
  40406c:	d006      	beq.n	40407c <__libc_init_array+0x3c>
  40406e:	3401      	adds	r4, #1
  404070:	f855 3b04 	ldr.w	r3, [r5], #4
  404074:	4798      	blx	r3
  404076:	42a6      	cmp	r6, r4
  404078:	d1f9      	bne.n	40406e <__libc_init_array+0x2e>
  40407a:	bd70      	pop	{r4, r5, r6, pc}
  40407c:	bd70      	pop	{r4, r5, r6, pc}
  40407e:	bf00      	nop
  404080:	004078ec 	.word	0x004078ec
  404084:	004078ec 	.word	0x004078ec
  404088:	004078f4 	.word	0x004078f4
  40408c:	004078ec 	.word	0x004078ec

00404090 <iprintf>:
  404090:	b40f      	push	{r0, r1, r2, r3}
  404092:	b500      	push	{lr}
  404094:	4907      	ldr	r1, [pc, #28]	; (4040b4 <iprintf+0x24>)
  404096:	b083      	sub	sp, #12
  404098:	ab04      	add	r3, sp, #16
  40409a:	6808      	ldr	r0, [r1, #0]
  40409c:	f853 2b04 	ldr.w	r2, [r3], #4
  4040a0:	6881      	ldr	r1, [r0, #8]
  4040a2:	9301      	str	r3, [sp, #4]
  4040a4:	f000 f942 	bl	40432c <_vfiprintf_r>
  4040a8:	b003      	add	sp, #12
  4040aa:	f85d eb04 	ldr.w	lr, [sp], #4
  4040ae:	b004      	add	sp, #16
  4040b0:	4770      	bx	lr
  4040b2:	bf00      	nop
  4040b4:	20400460 	.word	0x20400460

004040b8 <memset>:
  4040b8:	b470      	push	{r4, r5, r6}
  4040ba:	0784      	lsls	r4, r0, #30
  4040bc:	d046      	beq.n	40414c <memset+0x94>
  4040be:	1e54      	subs	r4, r2, #1
  4040c0:	2a00      	cmp	r2, #0
  4040c2:	d041      	beq.n	404148 <memset+0x90>
  4040c4:	b2cd      	uxtb	r5, r1
  4040c6:	4603      	mov	r3, r0
  4040c8:	e002      	b.n	4040d0 <memset+0x18>
  4040ca:	1e62      	subs	r2, r4, #1
  4040cc:	b3e4      	cbz	r4, 404148 <memset+0x90>
  4040ce:	4614      	mov	r4, r2
  4040d0:	f803 5b01 	strb.w	r5, [r3], #1
  4040d4:	079a      	lsls	r2, r3, #30
  4040d6:	d1f8      	bne.n	4040ca <memset+0x12>
  4040d8:	2c03      	cmp	r4, #3
  4040da:	d92e      	bls.n	40413a <memset+0x82>
  4040dc:	b2cd      	uxtb	r5, r1
  4040de:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  4040e2:	2c0f      	cmp	r4, #15
  4040e4:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  4040e8:	d919      	bls.n	40411e <memset+0x66>
  4040ea:	f103 0210 	add.w	r2, r3, #16
  4040ee:	4626      	mov	r6, r4
  4040f0:	3e10      	subs	r6, #16
  4040f2:	2e0f      	cmp	r6, #15
  4040f4:	f842 5c10 	str.w	r5, [r2, #-16]
  4040f8:	f842 5c0c 	str.w	r5, [r2, #-12]
  4040fc:	f842 5c08 	str.w	r5, [r2, #-8]
  404100:	f842 5c04 	str.w	r5, [r2, #-4]
  404104:	f102 0210 	add.w	r2, r2, #16
  404108:	d8f2      	bhi.n	4040f0 <memset+0x38>
  40410a:	f1a4 0210 	sub.w	r2, r4, #16
  40410e:	f022 020f 	bic.w	r2, r2, #15
  404112:	f004 040f 	and.w	r4, r4, #15
  404116:	3210      	adds	r2, #16
  404118:	2c03      	cmp	r4, #3
  40411a:	4413      	add	r3, r2
  40411c:	d90d      	bls.n	40413a <memset+0x82>
  40411e:	461e      	mov	r6, r3
  404120:	4622      	mov	r2, r4
  404122:	3a04      	subs	r2, #4
  404124:	2a03      	cmp	r2, #3
  404126:	f846 5b04 	str.w	r5, [r6], #4
  40412a:	d8fa      	bhi.n	404122 <memset+0x6a>
  40412c:	1f22      	subs	r2, r4, #4
  40412e:	f022 0203 	bic.w	r2, r2, #3
  404132:	3204      	adds	r2, #4
  404134:	4413      	add	r3, r2
  404136:	f004 0403 	and.w	r4, r4, #3
  40413a:	b12c      	cbz	r4, 404148 <memset+0x90>
  40413c:	b2c9      	uxtb	r1, r1
  40413e:	441c      	add	r4, r3
  404140:	f803 1b01 	strb.w	r1, [r3], #1
  404144:	42a3      	cmp	r3, r4
  404146:	d1fb      	bne.n	404140 <memset+0x88>
  404148:	bc70      	pop	{r4, r5, r6}
  40414a:	4770      	bx	lr
  40414c:	4614      	mov	r4, r2
  40414e:	4603      	mov	r3, r0
  404150:	e7c2      	b.n	4040d8 <memset+0x20>
  404152:	bf00      	nop

00404154 <setbuf>:
  404154:	2900      	cmp	r1, #0
  404156:	bf0c      	ite	eq
  404158:	2202      	moveq	r2, #2
  40415a:	2200      	movne	r2, #0
  40415c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  404160:	f000 b800 	b.w	404164 <setvbuf>

00404164 <setvbuf>:
  404164:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  404168:	4c51      	ldr	r4, [pc, #324]	; (4042b0 <setvbuf+0x14c>)
  40416a:	6825      	ldr	r5, [r4, #0]
  40416c:	b083      	sub	sp, #12
  40416e:	4604      	mov	r4, r0
  404170:	460f      	mov	r7, r1
  404172:	4690      	mov	r8, r2
  404174:	461e      	mov	r6, r3
  404176:	b115      	cbz	r5, 40417e <setvbuf+0x1a>
  404178:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40417a:	2b00      	cmp	r3, #0
  40417c:	d079      	beq.n	404272 <setvbuf+0x10e>
  40417e:	f1b8 0f02 	cmp.w	r8, #2
  404182:	d004      	beq.n	40418e <setvbuf+0x2a>
  404184:	f1b8 0f01 	cmp.w	r8, #1
  404188:	d87f      	bhi.n	40428a <setvbuf+0x126>
  40418a:	2e00      	cmp	r6, #0
  40418c:	db7d      	blt.n	40428a <setvbuf+0x126>
  40418e:	4621      	mov	r1, r4
  404190:	4628      	mov	r0, r5
  404192:	f001 f917 	bl	4053c4 <_fflush_r>
  404196:	6b21      	ldr	r1, [r4, #48]	; 0x30
  404198:	b141      	cbz	r1, 4041ac <setvbuf+0x48>
  40419a:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40419e:	4299      	cmp	r1, r3
  4041a0:	d002      	beq.n	4041a8 <setvbuf+0x44>
  4041a2:	4628      	mov	r0, r5
  4041a4:	f001 fa6c 	bl	405680 <_free_r>
  4041a8:	2300      	movs	r3, #0
  4041aa:	6323      	str	r3, [r4, #48]	; 0x30
  4041ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4041b0:	2200      	movs	r2, #0
  4041b2:	61a2      	str	r2, [r4, #24]
  4041b4:	6062      	str	r2, [r4, #4]
  4041b6:	061a      	lsls	r2, r3, #24
  4041b8:	d454      	bmi.n	404264 <setvbuf+0x100>
  4041ba:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  4041be:	f023 0303 	bic.w	r3, r3, #3
  4041c2:	f1b8 0f02 	cmp.w	r8, #2
  4041c6:	81a3      	strh	r3, [r4, #12]
  4041c8:	d039      	beq.n	40423e <setvbuf+0xda>
  4041ca:	ab01      	add	r3, sp, #4
  4041cc:	466a      	mov	r2, sp
  4041ce:	4621      	mov	r1, r4
  4041d0:	4628      	mov	r0, r5
  4041d2:	f001 fcf3 	bl	405bbc <__swhatbuf_r>
  4041d6:	89a3      	ldrh	r3, [r4, #12]
  4041d8:	4318      	orrs	r0, r3
  4041da:	81a0      	strh	r0, [r4, #12]
  4041dc:	b326      	cbz	r6, 404228 <setvbuf+0xc4>
  4041de:	b327      	cbz	r7, 40422a <setvbuf+0xc6>
  4041e0:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4041e2:	2b00      	cmp	r3, #0
  4041e4:	d04d      	beq.n	404282 <setvbuf+0x11e>
  4041e6:	9b00      	ldr	r3, [sp, #0]
  4041e8:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
  4041ec:	6027      	str	r7, [r4, #0]
  4041ee:	429e      	cmp	r6, r3
  4041f0:	bf1c      	itt	ne
  4041f2:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
  4041f6:	81a0      	strhne	r0, [r4, #12]
  4041f8:	f1b8 0f01 	cmp.w	r8, #1
  4041fc:	bf08      	it	eq
  4041fe:	f040 0001 	orreq.w	r0, r0, #1
  404202:	b283      	uxth	r3, r0
  404204:	bf08      	it	eq
  404206:	81a0      	strheq	r0, [r4, #12]
  404208:	f003 0008 	and.w	r0, r3, #8
  40420c:	b280      	uxth	r0, r0
  40420e:	6127      	str	r7, [r4, #16]
  404210:	6166      	str	r6, [r4, #20]
  404212:	b318      	cbz	r0, 40425c <setvbuf+0xf8>
  404214:	f013 0001 	ands.w	r0, r3, #1
  404218:	d02f      	beq.n	40427a <setvbuf+0x116>
  40421a:	2000      	movs	r0, #0
  40421c:	4276      	negs	r6, r6
  40421e:	61a6      	str	r6, [r4, #24]
  404220:	60a0      	str	r0, [r4, #8]
  404222:	b003      	add	sp, #12
  404224:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404228:	9e00      	ldr	r6, [sp, #0]
  40422a:	4630      	mov	r0, r6
  40422c:	f001 fd3a 	bl	405ca4 <malloc>
  404230:	4607      	mov	r7, r0
  404232:	b368      	cbz	r0, 404290 <setvbuf+0x12c>
  404234:	89a3      	ldrh	r3, [r4, #12]
  404236:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40423a:	81a3      	strh	r3, [r4, #12]
  40423c:	e7d0      	b.n	4041e0 <setvbuf+0x7c>
  40423e:	2000      	movs	r0, #0
  404240:	f104 0243 	add.w	r2, r4, #67	; 0x43
  404244:	f043 0302 	orr.w	r3, r3, #2
  404248:	2500      	movs	r5, #0
  40424a:	2101      	movs	r1, #1
  40424c:	81a3      	strh	r3, [r4, #12]
  40424e:	60a5      	str	r5, [r4, #8]
  404250:	6022      	str	r2, [r4, #0]
  404252:	6122      	str	r2, [r4, #16]
  404254:	6161      	str	r1, [r4, #20]
  404256:	b003      	add	sp, #12
  404258:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40425c:	60a0      	str	r0, [r4, #8]
  40425e:	b003      	add	sp, #12
  404260:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404264:	6921      	ldr	r1, [r4, #16]
  404266:	4628      	mov	r0, r5
  404268:	f001 fa0a 	bl	405680 <_free_r>
  40426c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404270:	e7a3      	b.n	4041ba <setvbuf+0x56>
  404272:	4628      	mov	r0, r5
  404274:	f001 f93a 	bl	4054ec <__sinit>
  404278:	e781      	b.n	40417e <setvbuf+0x1a>
  40427a:	60a6      	str	r6, [r4, #8]
  40427c:	b003      	add	sp, #12
  40427e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404282:	4628      	mov	r0, r5
  404284:	f001 f932 	bl	4054ec <__sinit>
  404288:	e7ad      	b.n	4041e6 <setvbuf+0x82>
  40428a:	f04f 30ff 	mov.w	r0, #4294967295
  40428e:	e7e2      	b.n	404256 <setvbuf+0xf2>
  404290:	f8dd 9000 	ldr.w	r9, [sp]
  404294:	45b1      	cmp	r9, r6
  404296:	d006      	beq.n	4042a6 <setvbuf+0x142>
  404298:	4648      	mov	r0, r9
  40429a:	f001 fd03 	bl	405ca4 <malloc>
  40429e:	4607      	mov	r7, r0
  4042a0:	b108      	cbz	r0, 4042a6 <setvbuf+0x142>
  4042a2:	464e      	mov	r6, r9
  4042a4:	e7c6      	b.n	404234 <setvbuf+0xd0>
  4042a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4042aa:	f04f 30ff 	mov.w	r0, #4294967295
  4042ae:	e7c7      	b.n	404240 <setvbuf+0xdc>
  4042b0:	20400460 	.word	0x20400460

004042b4 <__sprint_r.part.0>:
  4042b4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  4042b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4042ba:	049c      	lsls	r4, r3, #18
  4042bc:	4692      	mov	sl, r2
  4042be:	d52c      	bpl.n	40431a <__sprint_r.part.0+0x66>
  4042c0:	6893      	ldr	r3, [r2, #8]
  4042c2:	6812      	ldr	r2, [r2, #0]
  4042c4:	b33b      	cbz	r3, 404316 <__sprint_r.part.0+0x62>
  4042c6:	460f      	mov	r7, r1
  4042c8:	4680      	mov	r8, r0
  4042ca:	f102 0908 	add.w	r9, r2, #8
  4042ce:	e919 0060 	ldmdb	r9, {r5, r6}
  4042d2:	08b6      	lsrs	r6, r6, #2
  4042d4:	d017      	beq.n	404306 <__sprint_r.part.0+0x52>
  4042d6:	3d04      	subs	r5, #4
  4042d8:	2400      	movs	r4, #0
  4042da:	e001      	b.n	4042e0 <__sprint_r.part.0+0x2c>
  4042dc:	42a6      	cmp	r6, r4
  4042de:	d010      	beq.n	404302 <__sprint_r.part.0+0x4e>
  4042e0:	463a      	mov	r2, r7
  4042e2:	f855 1f04 	ldr.w	r1, [r5, #4]!
  4042e6:	4640      	mov	r0, r8
  4042e8:	f001 f96a 	bl	4055c0 <_fputwc_r>
  4042ec:	1c43      	adds	r3, r0, #1
  4042ee:	f104 0401 	add.w	r4, r4, #1
  4042f2:	d1f3      	bne.n	4042dc <__sprint_r.part.0+0x28>
  4042f4:	2300      	movs	r3, #0
  4042f6:	f8ca 3008 	str.w	r3, [sl, #8]
  4042fa:	f8ca 3004 	str.w	r3, [sl, #4]
  4042fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404302:	f8da 3008 	ldr.w	r3, [sl, #8]
  404306:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
  40430a:	f8ca 3008 	str.w	r3, [sl, #8]
  40430e:	f109 0908 	add.w	r9, r9, #8
  404312:	2b00      	cmp	r3, #0
  404314:	d1db      	bne.n	4042ce <__sprint_r.part.0+0x1a>
  404316:	2000      	movs	r0, #0
  404318:	e7ec      	b.n	4042f4 <__sprint_r.part.0+0x40>
  40431a:	f001 fa99 	bl	405850 <__sfvwrite_r>
  40431e:	2300      	movs	r3, #0
  404320:	f8ca 3008 	str.w	r3, [sl, #8]
  404324:	f8ca 3004 	str.w	r3, [sl, #4]
  404328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0040432c <_vfiprintf_r>:
  40432c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404330:	b0ab      	sub	sp, #172	; 0xac
  404332:	461c      	mov	r4, r3
  404334:	9100      	str	r1, [sp, #0]
  404336:	4690      	mov	r8, r2
  404338:	9304      	str	r3, [sp, #16]
  40433a:	9005      	str	r0, [sp, #20]
  40433c:	b118      	cbz	r0, 404346 <_vfiprintf_r+0x1a>
  40433e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  404340:	2b00      	cmp	r3, #0
  404342:	f000 80de 	beq.w	404502 <_vfiprintf_r+0x1d6>
  404346:	9800      	ldr	r0, [sp, #0]
  404348:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
  40434c:	b28a      	uxth	r2, r1
  40434e:	0495      	lsls	r5, r2, #18
  404350:	d407      	bmi.n	404362 <_vfiprintf_r+0x36>
  404352:	6e43      	ldr	r3, [r0, #100]	; 0x64
  404354:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
  404358:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  40435c:	8182      	strh	r2, [r0, #12]
  40435e:	6643      	str	r3, [r0, #100]	; 0x64
  404360:	b292      	uxth	r2, r2
  404362:	0711      	lsls	r1, r2, #28
  404364:	f140 80b1 	bpl.w	4044ca <_vfiprintf_r+0x19e>
  404368:	9b00      	ldr	r3, [sp, #0]
  40436a:	691b      	ldr	r3, [r3, #16]
  40436c:	2b00      	cmp	r3, #0
  40436e:	f000 80ac 	beq.w	4044ca <_vfiprintf_r+0x19e>
  404372:	f002 021a 	and.w	r2, r2, #26
  404376:	2a0a      	cmp	r2, #10
  404378:	f000 80b5 	beq.w	4044e6 <_vfiprintf_r+0x1ba>
  40437c:	2300      	movs	r3, #0
  40437e:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
  404382:	9302      	str	r3, [sp, #8]
  404384:	930f      	str	r3, [sp, #60]	; 0x3c
  404386:	930e      	str	r3, [sp, #56]	; 0x38
  404388:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  40438c:	46da      	mov	sl, fp
  40438e:	f898 3000 	ldrb.w	r3, [r8]
  404392:	4644      	mov	r4, r8
  404394:	b1fb      	cbz	r3, 4043d6 <_vfiprintf_r+0xaa>
  404396:	2b25      	cmp	r3, #37	; 0x25
  404398:	d102      	bne.n	4043a0 <_vfiprintf_r+0x74>
  40439a:	e01c      	b.n	4043d6 <_vfiprintf_r+0xaa>
  40439c:	2b25      	cmp	r3, #37	; 0x25
  40439e:	d003      	beq.n	4043a8 <_vfiprintf_r+0x7c>
  4043a0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  4043a4:	2b00      	cmp	r3, #0
  4043a6:	d1f9      	bne.n	40439c <_vfiprintf_r+0x70>
  4043a8:	ebc8 0504 	rsb	r5, r8, r4
  4043ac:	b19d      	cbz	r5, 4043d6 <_vfiprintf_r+0xaa>
  4043ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4043b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4043b2:	f8ca 8000 	str.w	r8, [sl]
  4043b6:	3301      	adds	r3, #1
  4043b8:	442a      	add	r2, r5
  4043ba:	2b07      	cmp	r3, #7
  4043bc:	f8ca 5004 	str.w	r5, [sl, #4]
  4043c0:	920f      	str	r2, [sp, #60]	; 0x3c
  4043c2:	930e      	str	r3, [sp, #56]	; 0x38
  4043c4:	dd7b      	ble.n	4044be <_vfiprintf_r+0x192>
  4043c6:	2a00      	cmp	r2, #0
  4043c8:	f040 8528 	bne.w	404e1c <_vfiprintf_r+0xaf0>
  4043cc:	9b02      	ldr	r3, [sp, #8]
  4043ce:	920e      	str	r2, [sp, #56]	; 0x38
  4043d0:	442b      	add	r3, r5
  4043d2:	46da      	mov	sl, fp
  4043d4:	9302      	str	r3, [sp, #8]
  4043d6:	7823      	ldrb	r3, [r4, #0]
  4043d8:	2b00      	cmp	r3, #0
  4043da:	f000 843e 	beq.w	404c5a <_vfiprintf_r+0x92e>
  4043de:	2100      	movs	r1, #0
  4043e0:	f04f 0300 	mov.w	r3, #0
  4043e4:	f04f 32ff 	mov.w	r2, #4294967295
  4043e8:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  4043ec:	f104 0801 	add.w	r8, r4, #1
  4043f0:	7863      	ldrb	r3, [r4, #1]
  4043f2:	9201      	str	r2, [sp, #4]
  4043f4:	4608      	mov	r0, r1
  4043f6:	460e      	mov	r6, r1
  4043f8:	460c      	mov	r4, r1
  4043fa:	f108 0801 	add.w	r8, r8, #1
  4043fe:	f1a3 0220 	sub.w	r2, r3, #32
  404402:	2a58      	cmp	r2, #88	; 0x58
  404404:	f200 8393 	bhi.w	404b2e <_vfiprintf_r+0x802>
  404408:	e8df f012 	tbh	[pc, r2, lsl #1]
  40440c:	03910346 	.word	0x03910346
  404410:	034e0391 	.word	0x034e0391
  404414:	03910391 	.word	0x03910391
  404418:	03910391 	.word	0x03910391
  40441c:	03910391 	.word	0x03910391
  404420:	02670289 	.word	0x02670289
  404424:	00800391 	.word	0x00800391
  404428:	0391026c 	.word	0x0391026c
  40442c:	025901c6 	.word	0x025901c6
  404430:	02590259 	.word	0x02590259
  404434:	02590259 	.word	0x02590259
  404438:	02590259 	.word	0x02590259
  40443c:	02590259 	.word	0x02590259
  404440:	03910391 	.word	0x03910391
  404444:	03910391 	.word	0x03910391
  404448:	03910391 	.word	0x03910391
  40444c:	03910391 	.word	0x03910391
  404450:	03910391 	.word	0x03910391
  404454:	039101cb 	.word	0x039101cb
  404458:	03910391 	.word	0x03910391
  40445c:	03910391 	.word	0x03910391
  404460:	03910391 	.word	0x03910391
  404464:	03910391 	.word	0x03910391
  404468:	02140391 	.word	0x02140391
  40446c:	03910391 	.word	0x03910391
  404470:	03910391 	.word	0x03910391
  404474:	02ee0391 	.word	0x02ee0391
  404478:	03910391 	.word	0x03910391
  40447c:	03910311 	.word	0x03910311
  404480:	03910391 	.word	0x03910391
  404484:	03910391 	.word	0x03910391
  404488:	03910391 	.word	0x03910391
  40448c:	03910391 	.word	0x03910391
  404490:	03340391 	.word	0x03340391
  404494:	0391038a 	.word	0x0391038a
  404498:	03910391 	.word	0x03910391
  40449c:	038a0367 	.word	0x038a0367
  4044a0:	03910391 	.word	0x03910391
  4044a4:	0391036c 	.word	0x0391036c
  4044a8:	02950379 	.word	0x02950379
  4044ac:	02e90085 	.word	0x02e90085
  4044b0:	029b0391 	.word	0x029b0391
  4044b4:	02ba0391 	.word	0x02ba0391
  4044b8:	03910391 	.word	0x03910391
  4044bc:	0353      	.short	0x0353
  4044be:	f10a 0a08 	add.w	sl, sl, #8
  4044c2:	9b02      	ldr	r3, [sp, #8]
  4044c4:	442b      	add	r3, r5
  4044c6:	9302      	str	r3, [sp, #8]
  4044c8:	e785      	b.n	4043d6 <_vfiprintf_r+0xaa>
  4044ca:	9900      	ldr	r1, [sp, #0]
  4044cc:	9805      	ldr	r0, [sp, #20]
  4044ce:	f000 fe61 	bl	405194 <__swsetup_r>
  4044d2:	2800      	cmp	r0, #0
  4044d4:	f040 8558 	bne.w	404f88 <_vfiprintf_r+0xc5c>
  4044d8:	9b00      	ldr	r3, [sp, #0]
  4044da:	899a      	ldrh	r2, [r3, #12]
  4044dc:	f002 021a 	and.w	r2, r2, #26
  4044e0:	2a0a      	cmp	r2, #10
  4044e2:	f47f af4b 	bne.w	40437c <_vfiprintf_r+0x50>
  4044e6:	9900      	ldr	r1, [sp, #0]
  4044e8:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
  4044ec:	2b00      	cmp	r3, #0
  4044ee:	f6ff af45 	blt.w	40437c <_vfiprintf_r+0x50>
  4044f2:	4623      	mov	r3, r4
  4044f4:	4642      	mov	r2, r8
  4044f6:	9805      	ldr	r0, [sp, #20]
  4044f8:	f000 fe16 	bl	405128 <__sbprintf>
  4044fc:	b02b      	add	sp, #172	; 0xac
  4044fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404502:	f000 fff3 	bl	4054ec <__sinit>
  404506:	e71e      	b.n	404346 <_vfiprintf_r+0x1a>
  404508:	4264      	negs	r4, r4
  40450a:	9304      	str	r3, [sp, #16]
  40450c:	f046 0604 	orr.w	r6, r6, #4
  404510:	f898 3000 	ldrb.w	r3, [r8]
  404514:	e771      	b.n	4043fa <_vfiprintf_r+0xce>
  404516:	2130      	movs	r1, #48	; 0x30
  404518:	9804      	ldr	r0, [sp, #16]
  40451a:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
  40451e:	9901      	ldr	r1, [sp, #4]
  404520:	9406      	str	r4, [sp, #24]
  404522:	f04f 0300 	mov.w	r3, #0
  404526:	2278      	movs	r2, #120	; 0x78
  404528:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  40452c:	2900      	cmp	r1, #0
  40452e:	4603      	mov	r3, r0
  404530:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
  404534:	6804      	ldr	r4, [r0, #0]
  404536:	f103 0304 	add.w	r3, r3, #4
  40453a:	f04f 0500 	mov.w	r5, #0
  40453e:	f046 0202 	orr.w	r2, r6, #2
  404542:	f2c0 8525 	blt.w	404f90 <_vfiprintf_r+0xc64>
  404546:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40454a:	ea54 0205 	orrs.w	r2, r4, r5
  40454e:	f046 0602 	orr.w	r6, r6, #2
  404552:	9304      	str	r3, [sp, #16]
  404554:	f040 84bf 	bne.w	404ed6 <_vfiprintf_r+0xbaa>
  404558:	48b3      	ldr	r0, [pc, #716]	; (404828 <_vfiprintf_r+0x4fc>)
  40455a:	9b01      	ldr	r3, [sp, #4]
  40455c:	2b00      	cmp	r3, #0
  40455e:	f040 841c 	bne.w	404d9a <_vfiprintf_r+0xa6e>
  404562:	4699      	mov	r9, r3
  404564:	2300      	movs	r3, #0
  404566:	9301      	str	r3, [sp, #4]
  404568:	9303      	str	r3, [sp, #12]
  40456a:	465f      	mov	r7, fp
  40456c:	9b01      	ldr	r3, [sp, #4]
  40456e:	9a03      	ldr	r2, [sp, #12]
  404570:	4293      	cmp	r3, r2
  404572:	bfb8      	it	lt
  404574:	4613      	movlt	r3, r2
  404576:	461d      	mov	r5, r3
  404578:	f1b9 0f00 	cmp.w	r9, #0
  40457c:	d000      	beq.n	404580 <_vfiprintf_r+0x254>
  40457e:	3501      	adds	r5, #1
  404580:	f016 0302 	ands.w	r3, r6, #2
  404584:	9307      	str	r3, [sp, #28]
  404586:	bf18      	it	ne
  404588:	3502      	addne	r5, #2
  40458a:	f016 0384 	ands.w	r3, r6, #132	; 0x84
  40458e:	9308      	str	r3, [sp, #32]
  404590:	f040 82f1 	bne.w	404b76 <_vfiprintf_r+0x84a>
  404594:	9b06      	ldr	r3, [sp, #24]
  404596:	1b5c      	subs	r4, r3, r5
  404598:	2c00      	cmp	r4, #0
  40459a:	f340 82ec 	ble.w	404b76 <_vfiprintf_r+0x84a>
  40459e:	2c10      	cmp	r4, #16
  4045a0:	f340 8556 	ble.w	405050 <_vfiprintf_r+0xd24>
  4045a4:	f8df 9284 	ldr.w	r9, [pc, #644]	; 40482c <_vfiprintf_r+0x500>
  4045a8:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
  4045ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4045ae:	46d4      	mov	ip, sl
  4045b0:	2310      	movs	r3, #16
  4045b2:	46c2      	mov	sl, r8
  4045b4:	4670      	mov	r0, lr
  4045b6:	46a8      	mov	r8, r5
  4045b8:	464d      	mov	r5, r9
  4045ba:	f8dd 9014 	ldr.w	r9, [sp, #20]
  4045be:	e007      	b.n	4045d0 <_vfiprintf_r+0x2a4>
  4045c0:	f100 0e02 	add.w	lr, r0, #2
  4045c4:	f10c 0c08 	add.w	ip, ip, #8
  4045c8:	4608      	mov	r0, r1
  4045ca:	3c10      	subs	r4, #16
  4045cc:	2c10      	cmp	r4, #16
  4045ce:	dd13      	ble.n	4045f8 <_vfiprintf_r+0x2cc>
  4045d0:	1c41      	adds	r1, r0, #1
  4045d2:	3210      	adds	r2, #16
  4045d4:	2907      	cmp	r1, #7
  4045d6:	920f      	str	r2, [sp, #60]	; 0x3c
  4045d8:	f8cc 5000 	str.w	r5, [ip]
  4045dc:	f8cc 3004 	str.w	r3, [ip, #4]
  4045e0:	910e      	str	r1, [sp, #56]	; 0x38
  4045e2:	dded      	ble.n	4045c0 <_vfiprintf_r+0x294>
  4045e4:	2a00      	cmp	r2, #0
  4045e6:	f040 82b7 	bne.w	404b58 <_vfiprintf_r+0x82c>
  4045ea:	3c10      	subs	r4, #16
  4045ec:	2c10      	cmp	r4, #16
  4045ee:	4610      	mov	r0, r2
  4045f0:	f04f 0e01 	mov.w	lr, #1
  4045f4:	46dc      	mov	ip, fp
  4045f6:	dceb      	bgt.n	4045d0 <_vfiprintf_r+0x2a4>
  4045f8:	46a9      	mov	r9, r5
  4045fa:	4670      	mov	r0, lr
  4045fc:	4645      	mov	r5, r8
  4045fe:	46d0      	mov	r8, sl
  404600:	46e2      	mov	sl, ip
  404602:	4422      	add	r2, r4
  404604:	2807      	cmp	r0, #7
  404606:	920f      	str	r2, [sp, #60]	; 0x3c
  404608:	f8ca 9000 	str.w	r9, [sl]
  40460c:	f8ca 4004 	str.w	r4, [sl, #4]
  404610:	900e      	str	r0, [sp, #56]	; 0x38
  404612:	f300 8375 	bgt.w	404d00 <_vfiprintf_r+0x9d4>
  404616:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  40461a:	f10a 0a08 	add.w	sl, sl, #8
  40461e:	f100 0e01 	add.w	lr, r0, #1
  404622:	2b00      	cmp	r3, #0
  404624:	f040 82b0 	bne.w	404b88 <_vfiprintf_r+0x85c>
  404628:	9b07      	ldr	r3, [sp, #28]
  40462a:	2b00      	cmp	r3, #0
  40462c:	f000 82c3 	beq.w	404bb6 <_vfiprintf_r+0x88a>
  404630:	3202      	adds	r2, #2
  404632:	a90c      	add	r1, sp, #48	; 0x30
  404634:	2302      	movs	r3, #2
  404636:	f1be 0f07 	cmp.w	lr, #7
  40463a:	920f      	str	r2, [sp, #60]	; 0x3c
  40463c:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  404640:	e88a 000a 	stmia.w	sl, {r1, r3}
  404644:	f340 8378 	ble.w	404d38 <_vfiprintf_r+0xa0c>
  404648:	2a00      	cmp	r2, #0
  40464a:	f040 840a 	bne.w	404e62 <_vfiprintf_r+0xb36>
  40464e:	9b08      	ldr	r3, [sp, #32]
  404650:	2b80      	cmp	r3, #128	; 0x80
  404652:	f04f 0e01 	mov.w	lr, #1
  404656:	4610      	mov	r0, r2
  404658:	46da      	mov	sl, fp
  40465a:	f040 82b0 	bne.w	404bbe <_vfiprintf_r+0x892>
  40465e:	9b06      	ldr	r3, [sp, #24]
  404660:	1b5c      	subs	r4, r3, r5
  404662:	2c00      	cmp	r4, #0
  404664:	f340 82ab 	ble.w	404bbe <_vfiprintf_r+0x892>
  404668:	2c10      	cmp	r4, #16
  40466a:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 404830 <_vfiprintf_r+0x504>
  40466e:	f340 850b 	ble.w	405088 <_vfiprintf_r+0xd5c>
  404672:	46d6      	mov	lr, sl
  404674:	2310      	movs	r3, #16
  404676:	46c2      	mov	sl, r8
  404678:	46a8      	mov	r8, r5
  40467a:	464d      	mov	r5, r9
  40467c:	f8dd 9014 	ldr.w	r9, [sp, #20]
  404680:	e007      	b.n	404692 <_vfiprintf_r+0x366>
  404682:	f100 0c02 	add.w	ip, r0, #2
  404686:	f10e 0e08 	add.w	lr, lr, #8
  40468a:	4608      	mov	r0, r1
  40468c:	3c10      	subs	r4, #16
  40468e:	2c10      	cmp	r4, #16
  404690:	dd13      	ble.n	4046ba <_vfiprintf_r+0x38e>
  404692:	1c41      	adds	r1, r0, #1
  404694:	3210      	adds	r2, #16
  404696:	2907      	cmp	r1, #7
  404698:	920f      	str	r2, [sp, #60]	; 0x3c
  40469a:	f8ce 5000 	str.w	r5, [lr]
  40469e:	f8ce 3004 	str.w	r3, [lr, #4]
  4046a2:	910e      	str	r1, [sp, #56]	; 0x38
  4046a4:	dded      	ble.n	404682 <_vfiprintf_r+0x356>
  4046a6:	2a00      	cmp	r2, #0
  4046a8:	f040 8315 	bne.w	404cd6 <_vfiprintf_r+0x9aa>
  4046ac:	3c10      	subs	r4, #16
  4046ae:	2c10      	cmp	r4, #16
  4046b0:	f04f 0c01 	mov.w	ip, #1
  4046b4:	4610      	mov	r0, r2
  4046b6:	46de      	mov	lr, fp
  4046b8:	dceb      	bgt.n	404692 <_vfiprintf_r+0x366>
  4046ba:	46a9      	mov	r9, r5
  4046bc:	4645      	mov	r5, r8
  4046be:	46d0      	mov	r8, sl
  4046c0:	46f2      	mov	sl, lr
  4046c2:	4422      	add	r2, r4
  4046c4:	f1bc 0f07 	cmp.w	ip, #7
  4046c8:	920f      	str	r2, [sp, #60]	; 0x3c
  4046ca:	f8ca 9000 	str.w	r9, [sl]
  4046ce:	f8ca 4004 	str.w	r4, [sl, #4]
  4046d2:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
  4046d6:	f300 83d2 	bgt.w	404e7e <_vfiprintf_r+0xb52>
  4046da:	9b01      	ldr	r3, [sp, #4]
  4046dc:	9903      	ldr	r1, [sp, #12]
  4046de:	1a5c      	subs	r4, r3, r1
  4046e0:	2c00      	cmp	r4, #0
  4046e2:	f10a 0a08 	add.w	sl, sl, #8
  4046e6:	f10c 0e01 	add.w	lr, ip, #1
  4046ea:	4660      	mov	r0, ip
  4046ec:	f300 826d 	bgt.w	404bca <_vfiprintf_r+0x89e>
  4046f0:	9903      	ldr	r1, [sp, #12]
  4046f2:	f8ca 7000 	str.w	r7, [sl]
  4046f6:	440a      	add	r2, r1
  4046f8:	f1be 0f07 	cmp.w	lr, #7
  4046fc:	920f      	str	r2, [sp, #60]	; 0x3c
  4046fe:	f8ca 1004 	str.w	r1, [sl, #4]
  404702:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  404706:	f340 82ce 	ble.w	404ca6 <_vfiprintf_r+0x97a>
  40470a:	2a00      	cmp	r2, #0
  40470c:	f040 833a 	bne.w	404d84 <_vfiprintf_r+0xa58>
  404710:	0770      	lsls	r0, r6, #29
  404712:	920e      	str	r2, [sp, #56]	; 0x38
  404714:	d538      	bpl.n	404788 <_vfiprintf_r+0x45c>
  404716:	9b06      	ldr	r3, [sp, #24]
  404718:	1b5c      	subs	r4, r3, r5
  40471a:	2c00      	cmp	r4, #0
  40471c:	dd34      	ble.n	404788 <_vfiprintf_r+0x45c>
  40471e:	46da      	mov	sl, fp
  404720:	2c10      	cmp	r4, #16
  404722:	f340 84ab 	ble.w	40507c <_vfiprintf_r+0xd50>
  404726:	f8df 9104 	ldr.w	r9, [pc, #260]	; 40482c <_vfiprintf_r+0x500>
  40472a:	990e      	ldr	r1, [sp, #56]	; 0x38
  40472c:	464f      	mov	r7, r9
  40472e:	2610      	movs	r6, #16
  404730:	f8dd 9014 	ldr.w	r9, [sp, #20]
  404734:	e006      	b.n	404744 <_vfiprintf_r+0x418>
  404736:	1c88      	adds	r0, r1, #2
  404738:	f10a 0a08 	add.w	sl, sl, #8
  40473c:	4619      	mov	r1, r3
  40473e:	3c10      	subs	r4, #16
  404740:	2c10      	cmp	r4, #16
  404742:	dd13      	ble.n	40476c <_vfiprintf_r+0x440>
  404744:	1c4b      	adds	r3, r1, #1
  404746:	3210      	adds	r2, #16
  404748:	2b07      	cmp	r3, #7
  40474a:	920f      	str	r2, [sp, #60]	; 0x3c
  40474c:	f8ca 7000 	str.w	r7, [sl]
  404750:	f8ca 6004 	str.w	r6, [sl, #4]
  404754:	930e      	str	r3, [sp, #56]	; 0x38
  404756:	ddee      	ble.n	404736 <_vfiprintf_r+0x40a>
  404758:	2a00      	cmp	r2, #0
  40475a:	f040 828e 	bne.w	404c7a <_vfiprintf_r+0x94e>
  40475e:	3c10      	subs	r4, #16
  404760:	2c10      	cmp	r4, #16
  404762:	f04f 0001 	mov.w	r0, #1
  404766:	4611      	mov	r1, r2
  404768:	46da      	mov	sl, fp
  40476a:	dceb      	bgt.n	404744 <_vfiprintf_r+0x418>
  40476c:	46b9      	mov	r9, r7
  40476e:	4422      	add	r2, r4
  404770:	2807      	cmp	r0, #7
  404772:	920f      	str	r2, [sp, #60]	; 0x3c
  404774:	f8ca 9000 	str.w	r9, [sl]
  404778:	f8ca 4004 	str.w	r4, [sl, #4]
  40477c:	900e      	str	r0, [sp, #56]	; 0x38
  40477e:	f340 829b 	ble.w	404cb8 <_vfiprintf_r+0x98c>
  404782:	2a00      	cmp	r2, #0
  404784:	f040 8425 	bne.w	404fd2 <_vfiprintf_r+0xca6>
  404788:	9b02      	ldr	r3, [sp, #8]
  40478a:	9a06      	ldr	r2, [sp, #24]
  40478c:	42aa      	cmp	r2, r5
  40478e:	bfac      	ite	ge
  404790:	189b      	addge	r3, r3, r2
  404792:	195b      	addlt	r3, r3, r5
  404794:	9302      	str	r3, [sp, #8]
  404796:	e299      	b.n	404ccc <_vfiprintf_r+0x9a0>
  404798:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  40479c:	f898 3000 	ldrb.w	r3, [r8]
  4047a0:	e62b      	b.n	4043fa <_vfiprintf_r+0xce>
  4047a2:	9406      	str	r4, [sp, #24]
  4047a4:	2900      	cmp	r1, #0
  4047a6:	f040 84af 	bne.w	405108 <_vfiprintf_r+0xddc>
  4047aa:	f046 0610 	orr.w	r6, r6, #16
  4047ae:	06b3      	lsls	r3, r6, #26
  4047b0:	f140 8312 	bpl.w	404dd8 <_vfiprintf_r+0xaac>
  4047b4:	9904      	ldr	r1, [sp, #16]
  4047b6:	3107      	adds	r1, #7
  4047b8:	f021 0107 	bic.w	r1, r1, #7
  4047bc:	e9d1 2300 	ldrd	r2, r3, [r1]
  4047c0:	3108      	adds	r1, #8
  4047c2:	9104      	str	r1, [sp, #16]
  4047c4:	4614      	mov	r4, r2
  4047c6:	461d      	mov	r5, r3
  4047c8:	2a00      	cmp	r2, #0
  4047ca:	f173 0300 	sbcs.w	r3, r3, #0
  4047ce:	f2c0 8386 	blt.w	404ede <_vfiprintf_r+0xbb2>
  4047d2:	9b01      	ldr	r3, [sp, #4]
  4047d4:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  4047d8:	2b00      	cmp	r3, #0
  4047da:	f2c0 831a 	blt.w	404e12 <_vfiprintf_r+0xae6>
  4047de:	ea54 0305 	orrs.w	r3, r4, r5
  4047e2:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4047e6:	f000 80ed 	beq.w	4049c4 <_vfiprintf_r+0x698>
  4047ea:	2d00      	cmp	r5, #0
  4047ec:	bf08      	it	eq
  4047ee:	2c0a      	cmpeq	r4, #10
  4047f0:	f0c0 80ed 	bcc.w	4049ce <_vfiprintf_r+0x6a2>
  4047f4:	465f      	mov	r7, fp
  4047f6:	4620      	mov	r0, r4
  4047f8:	4629      	mov	r1, r5
  4047fa:	220a      	movs	r2, #10
  4047fc:	2300      	movs	r3, #0
  4047fe:	f002 fac9 	bl	406d94 <__aeabi_uldivmod>
  404802:	3230      	adds	r2, #48	; 0x30
  404804:	f807 2d01 	strb.w	r2, [r7, #-1]!
  404808:	4620      	mov	r0, r4
  40480a:	4629      	mov	r1, r5
  40480c:	2300      	movs	r3, #0
  40480e:	220a      	movs	r2, #10
  404810:	f002 fac0 	bl	406d94 <__aeabi_uldivmod>
  404814:	4604      	mov	r4, r0
  404816:	460d      	mov	r5, r1
  404818:	ea54 0305 	orrs.w	r3, r4, r5
  40481c:	d1eb      	bne.n	4047f6 <_vfiprintf_r+0x4ca>
  40481e:	ebc7 030b 	rsb	r3, r7, fp
  404822:	9303      	str	r3, [sp, #12]
  404824:	e6a2      	b.n	40456c <_vfiprintf_r+0x240>
  404826:	bf00      	nop
  404828:	004078b4 	.word	0x004078b4
  40482c:	004078d0 	.word	0x004078d0
  404830:	00407890 	.word	0x00407890
  404834:	9406      	str	r4, [sp, #24]
  404836:	2900      	cmp	r1, #0
  404838:	f040 8462 	bne.w	405100 <_vfiprintf_r+0xdd4>
  40483c:	f046 0610 	orr.w	r6, r6, #16
  404840:	f016 0320 	ands.w	r3, r6, #32
  404844:	f000 82ae 	beq.w	404da4 <_vfiprintf_r+0xa78>
  404848:	9b04      	ldr	r3, [sp, #16]
  40484a:	3307      	adds	r3, #7
  40484c:	f023 0307 	bic.w	r3, r3, #7
  404850:	f04f 0200 	mov.w	r2, #0
  404854:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  404858:	e9d3 4500 	ldrd	r4, r5, [r3]
  40485c:	f103 0208 	add.w	r2, r3, #8
  404860:	9b01      	ldr	r3, [sp, #4]
  404862:	9204      	str	r2, [sp, #16]
  404864:	2b00      	cmp	r3, #0
  404866:	f2c0 8174 	blt.w	404b52 <_vfiprintf_r+0x826>
  40486a:	ea54 0305 	orrs.w	r3, r4, r5
  40486e:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  404872:	f040 816e 	bne.w	404b52 <_vfiprintf_r+0x826>
  404876:	9b01      	ldr	r3, [sp, #4]
  404878:	2b00      	cmp	r3, #0
  40487a:	f000 8430 	beq.w	4050de <_vfiprintf_r+0xdb2>
  40487e:	f04f 0900 	mov.w	r9, #0
  404882:	2400      	movs	r4, #0
  404884:	2500      	movs	r5, #0
  404886:	465f      	mov	r7, fp
  404888:	08e2      	lsrs	r2, r4, #3
  40488a:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  40488e:	08e9      	lsrs	r1, r5, #3
  404890:	f004 0307 	and.w	r3, r4, #7
  404894:	460d      	mov	r5, r1
  404896:	4614      	mov	r4, r2
  404898:	3330      	adds	r3, #48	; 0x30
  40489a:	ea54 0205 	orrs.w	r2, r4, r5
  40489e:	f807 3d01 	strb.w	r3, [r7, #-1]!
  4048a2:	d1f1      	bne.n	404888 <_vfiprintf_r+0x55c>
  4048a4:	07f4      	lsls	r4, r6, #31
  4048a6:	d5ba      	bpl.n	40481e <_vfiprintf_r+0x4f2>
  4048a8:	2b30      	cmp	r3, #48	; 0x30
  4048aa:	d0b8      	beq.n	40481e <_vfiprintf_r+0x4f2>
  4048ac:	2230      	movs	r2, #48	; 0x30
  4048ae:	1e7b      	subs	r3, r7, #1
  4048b0:	f807 2c01 	strb.w	r2, [r7, #-1]
  4048b4:	ebc3 020b 	rsb	r2, r3, fp
  4048b8:	9203      	str	r2, [sp, #12]
  4048ba:	461f      	mov	r7, r3
  4048bc:	e656      	b.n	40456c <_vfiprintf_r+0x240>
  4048be:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  4048c2:	2400      	movs	r4, #0
  4048c4:	f818 3b01 	ldrb.w	r3, [r8], #1
  4048c8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4048cc:	eb02 0444 	add.w	r4, r2, r4, lsl #1
  4048d0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  4048d4:	2a09      	cmp	r2, #9
  4048d6:	d9f5      	bls.n	4048c4 <_vfiprintf_r+0x598>
  4048d8:	e591      	b.n	4043fe <_vfiprintf_r+0xd2>
  4048da:	f898 3000 	ldrb.w	r3, [r8]
  4048de:	2101      	movs	r1, #1
  4048e0:	202b      	movs	r0, #43	; 0x2b
  4048e2:	e58a      	b.n	4043fa <_vfiprintf_r+0xce>
  4048e4:	f898 3000 	ldrb.w	r3, [r8]
  4048e8:	2b2a      	cmp	r3, #42	; 0x2a
  4048ea:	f108 0501 	add.w	r5, r8, #1
  4048ee:	f000 83dd 	beq.w	4050ac <_vfiprintf_r+0xd80>
  4048f2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  4048f6:	2a09      	cmp	r2, #9
  4048f8:	46a8      	mov	r8, r5
  4048fa:	bf98      	it	ls
  4048fc:	2500      	movls	r5, #0
  4048fe:	f200 83ce 	bhi.w	40509e <_vfiprintf_r+0xd72>
  404902:	f818 3b01 	ldrb.w	r3, [r8], #1
  404906:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  40490a:	eb02 0545 	add.w	r5, r2, r5, lsl #1
  40490e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  404912:	2a09      	cmp	r2, #9
  404914:	d9f5      	bls.n	404902 <_vfiprintf_r+0x5d6>
  404916:	ea45 72e5 	orr.w	r2, r5, r5, asr #31
  40491a:	9201      	str	r2, [sp, #4]
  40491c:	e56f      	b.n	4043fe <_vfiprintf_r+0xd2>
  40491e:	9a04      	ldr	r2, [sp, #16]
  404920:	6814      	ldr	r4, [r2, #0]
  404922:	4613      	mov	r3, r2
  404924:	2c00      	cmp	r4, #0
  404926:	f103 0304 	add.w	r3, r3, #4
  40492a:	f6ff aded 	blt.w	404508 <_vfiprintf_r+0x1dc>
  40492e:	9304      	str	r3, [sp, #16]
  404930:	f898 3000 	ldrb.w	r3, [r8]
  404934:	e561      	b.n	4043fa <_vfiprintf_r+0xce>
  404936:	9406      	str	r4, [sp, #24]
  404938:	2900      	cmp	r1, #0
  40493a:	d081      	beq.n	404840 <_vfiprintf_r+0x514>
  40493c:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  404940:	e77e      	b.n	404840 <_vfiprintf_r+0x514>
  404942:	9a04      	ldr	r2, [sp, #16]
  404944:	9406      	str	r4, [sp, #24]
  404946:	6817      	ldr	r7, [r2, #0]
  404948:	f04f 0300 	mov.w	r3, #0
  40494c:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  404950:	1d14      	adds	r4, r2, #4
  404952:	9b01      	ldr	r3, [sp, #4]
  404954:	2f00      	cmp	r7, #0
  404956:	f000 8386 	beq.w	405066 <_vfiprintf_r+0xd3a>
  40495a:	2b00      	cmp	r3, #0
  40495c:	f2c0 835f 	blt.w	40501e <_vfiprintf_r+0xcf2>
  404960:	461a      	mov	r2, r3
  404962:	2100      	movs	r1, #0
  404964:	4638      	mov	r0, r7
  404966:	f001 fc63 	bl	406230 <memchr>
  40496a:	2800      	cmp	r0, #0
  40496c:	f000 838f 	beq.w	40508e <_vfiprintf_r+0xd62>
  404970:	1bc3      	subs	r3, r0, r7
  404972:	9303      	str	r3, [sp, #12]
  404974:	2300      	movs	r3, #0
  404976:	9404      	str	r4, [sp, #16]
  404978:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  40497c:	9301      	str	r3, [sp, #4]
  40497e:	e5f5      	b.n	40456c <_vfiprintf_r+0x240>
  404980:	9406      	str	r4, [sp, #24]
  404982:	2900      	cmp	r1, #0
  404984:	f040 83b9 	bne.w	4050fa <_vfiprintf_r+0xdce>
  404988:	f016 0920 	ands.w	r9, r6, #32
  40498c:	d135      	bne.n	4049fa <_vfiprintf_r+0x6ce>
  40498e:	f016 0310 	ands.w	r3, r6, #16
  404992:	d103      	bne.n	40499c <_vfiprintf_r+0x670>
  404994:	f016 0940 	ands.w	r9, r6, #64	; 0x40
  404998:	f040 832a 	bne.w	404ff0 <_vfiprintf_r+0xcc4>
  40499c:	9a04      	ldr	r2, [sp, #16]
  40499e:	4613      	mov	r3, r2
  4049a0:	6814      	ldr	r4, [r2, #0]
  4049a2:	9a01      	ldr	r2, [sp, #4]
  4049a4:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  4049a8:	2a00      	cmp	r2, #0
  4049aa:	f103 0304 	add.w	r3, r3, #4
  4049ae:	f04f 0500 	mov.w	r5, #0
  4049b2:	f2c0 8332 	blt.w	40501a <_vfiprintf_r+0xcee>
  4049b6:	ea54 0205 	orrs.w	r2, r4, r5
  4049ba:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4049be:	9304      	str	r3, [sp, #16]
  4049c0:	f47f af13 	bne.w	4047ea <_vfiprintf_r+0x4be>
  4049c4:	9b01      	ldr	r3, [sp, #4]
  4049c6:	2b00      	cmp	r3, #0
  4049c8:	f43f adcc 	beq.w	404564 <_vfiprintf_r+0x238>
  4049cc:	2400      	movs	r4, #0
  4049ce:	af2a      	add	r7, sp, #168	; 0xa8
  4049d0:	3430      	adds	r4, #48	; 0x30
  4049d2:	f807 4d41 	strb.w	r4, [r7, #-65]!
  4049d6:	ebc7 030b 	rsb	r3, r7, fp
  4049da:	9303      	str	r3, [sp, #12]
  4049dc:	e5c6      	b.n	40456c <_vfiprintf_r+0x240>
  4049de:	f046 0620 	orr.w	r6, r6, #32
  4049e2:	f898 3000 	ldrb.w	r3, [r8]
  4049e6:	e508      	b.n	4043fa <_vfiprintf_r+0xce>
  4049e8:	9406      	str	r4, [sp, #24]
  4049ea:	2900      	cmp	r1, #0
  4049ec:	f040 836e 	bne.w	4050cc <_vfiprintf_r+0xda0>
  4049f0:	f046 0610 	orr.w	r6, r6, #16
  4049f4:	f016 0920 	ands.w	r9, r6, #32
  4049f8:	d0c9      	beq.n	40498e <_vfiprintf_r+0x662>
  4049fa:	9b04      	ldr	r3, [sp, #16]
  4049fc:	3307      	adds	r3, #7
  4049fe:	f023 0307 	bic.w	r3, r3, #7
  404a02:	f04f 0200 	mov.w	r2, #0
  404a06:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  404a0a:	e9d3 4500 	ldrd	r4, r5, [r3]
  404a0e:	f103 0208 	add.w	r2, r3, #8
  404a12:	9b01      	ldr	r3, [sp, #4]
  404a14:	9204      	str	r2, [sp, #16]
  404a16:	2b00      	cmp	r3, #0
  404a18:	f2c0 81f9 	blt.w	404e0e <_vfiprintf_r+0xae2>
  404a1c:	ea54 0305 	orrs.w	r3, r4, r5
  404a20:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  404a24:	f04f 0900 	mov.w	r9, #0
  404a28:	f47f aedf 	bne.w	4047ea <_vfiprintf_r+0x4be>
  404a2c:	e7ca      	b.n	4049c4 <_vfiprintf_r+0x698>
  404a2e:	9406      	str	r4, [sp, #24]
  404a30:	2900      	cmp	r1, #0
  404a32:	f040 8351 	bne.w	4050d8 <_vfiprintf_r+0xdac>
  404a36:	06b2      	lsls	r2, r6, #26
  404a38:	48ae      	ldr	r0, [pc, #696]	; (404cf4 <_vfiprintf_r+0x9c8>)
  404a3a:	d541      	bpl.n	404ac0 <_vfiprintf_r+0x794>
  404a3c:	9a04      	ldr	r2, [sp, #16]
  404a3e:	3207      	adds	r2, #7
  404a40:	f022 0207 	bic.w	r2, r2, #7
  404a44:	e9d2 4500 	ldrd	r4, r5, [r2]
  404a48:	f102 0108 	add.w	r1, r2, #8
  404a4c:	9104      	str	r1, [sp, #16]
  404a4e:	f016 0901 	ands.w	r9, r6, #1
  404a52:	f000 8177 	beq.w	404d44 <_vfiprintf_r+0xa18>
  404a56:	ea54 0205 	orrs.w	r2, r4, r5
  404a5a:	f040 8226 	bne.w	404eaa <_vfiprintf_r+0xb7e>
  404a5e:	f04f 0300 	mov.w	r3, #0
  404a62:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  404a66:	9b01      	ldr	r3, [sp, #4]
  404a68:	2b00      	cmp	r3, #0
  404a6a:	f2c0 8196 	blt.w	404d9a <_vfiprintf_r+0xa6e>
  404a6e:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  404a72:	e572      	b.n	40455a <_vfiprintf_r+0x22e>
  404a74:	9a04      	ldr	r2, [sp, #16]
  404a76:	9406      	str	r4, [sp, #24]
  404a78:	6813      	ldr	r3, [r2, #0]
  404a7a:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  404a7e:	4613      	mov	r3, r2
  404a80:	f04f 0100 	mov.w	r1, #0
  404a84:	2501      	movs	r5, #1
  404a86:	3304      	adds	r3, #4
  404a88:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  404a8c:	9304      	str	r3, [sp, #16]
  404a8e:	9503      	str	r5, [sp, #12]
  404a90:	af10      	add	r7, sp, #64	; 0x40
  404a92:	2300      	movs	r3, #0
  404a94:	9301      	str	r3, [sp, #4]
  404a96:	e573      	b.n	404580 <_vfiprintf_r+0x254>
  404a98:	f898 3000 	ldrb.w	r3, [r8]
  404a9c:	2800      	cmp	r0, #0
  404a9e:	f47f acac 	bne.w	4043fa <_vfiprintf_r+0xce>
  404aa2:	2101      	movs	r1, #1
  404aa4:	2020      	movs	r0, #32
  404aa6:	e4a8      	b.n	4043fa <_vfiprintf_r+0xce>
  404aa8:	f046 0601 	orr.w	r6, r6, #1
  404aac:	f898 3000 	ldrb.w	r3, [r8]
  404ab0:	e4a3      	b.n	4043fa <_vfiprintf_r+0xce>
  404ab2:	9406      	str	r4, [sp, #24]
  404ab4:	2900      	cmp	r1, #0
  404ab6:	f040 830c 	bne.w	4050d2 <_vfiprintf_r+0xda6>
  404aba:	06b2      	lsls	r2, r6, #26
  404abc:	488e      	ldr	r0, [pc, #568]	; (404cf8 <_vfiprintf_r+0x9cc>)
  404abe:	d4bd      	bmi.n	404a3c <_vfiprintf_r+0x710>
  404ac0:	9904      	ldr	r1, [sp, #16]
  404ac2:	06f7      	lsls	r7, r6, #27
  404ac4:	460a      	mov	r2, r1
  404ac6:	f100 819d 	bmi.w	404e04 <_vfiprintf_r+0xad8>
  404aca:	0675      	lsls	r5, r6, #25
  404acc:	f140 819a 	bpl.w	404e04 <_vfiprintf_r+0xad8>
  404ad0:	3204      	adds	r2, #4
  404ad2:	880c      	ldrh	r4, [r1, #0]
  404ad4:	9204      	str	r2, [sp, #16]
  404ad6:	2500      	movs	r5, #0
  404ad8:	e7b9      	b.n	404a4e <_vfiprintf_r+0x722>
  404ada:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  404ade:	f898 3000 	ldrb.w	r3, [r8]
  404ae2:	e48a      	b.n	4043fa <_vfiprintf_r+0xce>
  404ae4:	f898 3000 	ldrb.w	r3, [r8]
  404ae8:	2b6c      	cmp	r3, #108	; 0x6c
  404aea:	bf03      	ittte	eq
  404aec:	f898 3001 	ldrbeq.w	r3, [r8, #1]
  404af0:	f046 0620 	orreq.w	r6, r6, #32
  404af4:	f108 0801 	addeq.w	r8, r8, #1
  404af8:	f046 0610 	orrne.w	r6, r6, #16
  404afc:	e47d      	b.n	4043fa <_vfiprintf_r+0xce>
  404afe:	2900      	cmp	r1, #0
  404b00:	f040 8309 	bne.w	405116 <_vfiprintf_r+0xdea>
  404b04:	06b4      	lsls	r4, r6, #26
  404b06:	f140 821c 	bpl.w	404f42 <_vfiprintf_r+0xc16>
  404b0a:	9a04      	ldr	r2, [sp, #16]
  404b0c:	9902      	ldr	r1, [sp, #8]
  404b0e:	6813      	ldr	r3, [r2, #0]
  404b10:	17cd      	asrs	r5, r1, #31
  404b12:	4608      	mov	r0, r1
  404b14:	3204      	adds	r2, #4
  404b16:	4629      	mov	r1, r5
  404b18:	9204      	str	r2, [sp, #16]
  404b1a:	e9c3 0100 	strd	r0, r1, [r3]
  404b1e:	e436      	b.n	40438e <_vfiprintf_r+0x62>
  404b20:	9406      	str	r4, [sp, #24]
  404b22:	2900      	cmp	r1, #0
  404b24:	f43f ae43 	beq.w	4047ae <_vfiprintf_r+0x482>
  404b28:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  404b2c:	e63f      	b.n	4047ae <_vfiprintf_r+0x482>
  404b2e:	9406      	str	r4, [sp, #24]
  404b30:	2900      	cmp	r1, #0
  404b32:	f040 82ed 	bne.w	405110 <_vfiprintf_r+0xde4>
  404b36:	2b00      	cmp	r3, #0
  404b38:	f000 808f 	beq.w	404c5a <_vfiprintf_r+0x92e>
  404b3c:	2501      	movs	r5, #1
  404b3e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  404b42:	f04f 0300 	mov.w	r3, #0
  404b46:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  404b4a:	9503      	str	r5, [sp, #12]
  404b4c:	af10      	add	r7, sp, #64	; 0x40
  404b4e:	e7a0      	b.n	404a92 <_vfiprintf_r+0x766>
  404b50:	9304      	str	r3, [sp, #16]
  404b52:	f04f 0900 	mov.w	r9, #0
  404b56:	e696      	b.n	404886 <_vfiprintf_r+0x55a>
  404b58:	aa0d      	add	r2, sp, #52	; 0x34
  404b5a:	9900      	ldr	r1, [sp, #0]
  404b5c:	9309      	str	r3, [sp, #36]	; 0x24
  404b5e:	4648      	mov	r0, r9
  404b60:	f7ff fba8 	bl	4042b4 <__sprint_r.part.0>
  404b64:	2800      	cmp	r0, #0
  404b66:	d17f      	bne.n	404c68 <_vfiprintf_r+0x93c>
  404b68:	980e      	ldr	r0, [sp, #56]	; 0x38
  404b6a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404b6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404b6e:	f100 0e01 	add.w	lr, r0, #1
  404b72:	46dc      	mov	ip, fp
  404b74:	e529      	b.n	4045ca <_vfiprintf_r+0x29e>
  404b76:	980e      	ldr	r0, [sp, #56]	; 0x38
  404b78:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404b7a:	f100 0e01 	add.w	lr, r0, #1
  404b7e:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  404b82:	2b00      	cmp	r3, #0
  404b84:	f43f ad50 	beq.w	404628 <_vfiprintf_r+0x2fc>
  404b88:	3201      	adds	r2, #1
  404b8a:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
  404b8e:	2301      	movs	r3, #1
  404b90:	f1be 0f07 	cmp.w	lr, #7
  404b94:	920f      	str	r2, [sp, #60]	; 0x3c
  404b96:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  404b9a:	e88a 000a 	stmia.w	sl, {r1, r3}
  404b9e:	f340 80bf 	ble.w	404d20 <_vfiprintf_r+0x9f4>
  404ba2:	2a00      	cmp	r2, #0
  404ba4:	f040 814e 	bne.w	404e44 <_vfiprintf_r+0xb18>
  404ba8:	9907      	ldr	r1, [sp, #28]
  404baa:	2900      	cmp	r1, #0
  404bac:	f040 80be 	bne.w	404d2c <_vfiprintf_r+0xa00>
  404bb0:	469e      	mov	lr, r3
  404bb2:	4610      	mov	r0, r2
  404bb4:	46da      	mov	sl, fp
  404bb6:	9b08      	ldr	r3, [sp, #32]
  404bb8:	2b80      	cmp	r3, #128	; 0x80
  404bba:	f43f ad50 	beq.w	40465e <_vfiprintf_r+0x332>
  404bbe:	9b01      	ldr	r3, [sp, #4]
  404bc0:	9903      	ldr	r1, [sp, #12]
  404bc2:	1a5c      	subs	r4, r3, r1
  404bc4:	2c00      	cmp	r4, #0
  404bc6:	f77f ad93 	ble.w	4046f0 <_vfiprintf_r+0x3c4>
  404bca:	2c10      	cmp	r4, #16
  404bcc:	f8df 912c 	ldr.w	r9, [pc, #300]	; 404cfc <_vfiprintf_r+0x9d0>
  404bd0:	dd25      	ble.n	404c1e <_vfiprintf_r+0x8f2>
  404bd2:	46d4      	mov	ip, sl
  404bd4:	2310      	movs	r3, #16
  404bd6:	46c2      	mov	sl, r8
  404bd8:	46a8      	mov	r8, r5
  404bda:	464d      	mov	r5, r9
  404bdc:	f8dd 9014 	ldr.w	r9, [sp, #20]
  404be0:	e007      	b.n	404bf2 <_vfiprintf_r+0x8c6>
  404be2:	f100 0e02 	add.w	lr, r0, #2
  404be6:	f10c 0c08 	add.w	ip, ip, #8
  404bea:	4608      	mov	r0, r1
  404bec:	3c10      	subs	r4, #16
  404bee:	2c10      	cmp	r4, #16
  404bf0:	dd11      	ble.n	404c16 <_vfiprintf_r+0x8ea>
  404bf2:	1c41      	adds	r1, r0, #1
  404bf4:	3210      	adds	r2, #16
  404bf6:	2907      	cmp	r1, #7
  404bf8:	920f      	str	r2, [sp, #60]	; 0x3c
  404bfa:	f8cc 5000 	str.w	r5, [ip]
  404bfe:	f8cc 3004 	str.w	r3, [ip, #4]
  404c02:	910e      	str	r1, [sp, #56]	; 0x38
  404c04:	dded      	ble.n	404be2 <_vfiprintf_r+0x8b6>
  404c06:	b9d2      	cbnz	r2, 404c3e <_vfiprintf_r+0x912>
  404c08:	3c10      	subs	r4, #16
  404c0a:	2c10      	cmp	r4, #16
  404c0c:	f04f 0e01 	mov.w	lr, #1
  404c10:	4610      	mov	r0, r2
  404c12:	46dc      	mov	ip, fp
  404c14:	dced      	bgt.n	404bf2 <_vfiprintf_r+0x8c6>
  404c16:	46a9      	mov	r9, r5
  404c18:	4645      	mov	r5, r8
  404c1a:	46d0      	mov	r8, sl
  404c1c:	46e2      	mov	sl, ip
  404c1e:	4422      	add	r2, r4
  404c20:	f1be 0f07 	cmp.w	lr, #7
  404c24:	920f      	str	r2, [sp, #60]	; 0x3c
  404c26:	f8ca 9000 	str.w	r9, [sl]
  404c2a:	f8ca 4004 	str.w	r4, [sl, #4]
  404c2e:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  404c32:	dc2e      	bgt.n	404c92 <_vfiprintf_r+0x966>
  404c34:	f10a 0a08 	add.w	sl, sl, #8
  404c38:	f10e 0e01 	add.w	lr, lr, #1
  404c3c:	e558      	b.n	4046f0 <_vfiprintf_r+0x3c4>
  404c3e:	aa0d      	add	r2, sp, #52	; 0x34
  404c40:	9900      	ldr	r1, [sp, #0]
  404c42:	9301      	str	r3, [sp, #4]
  404c44:	4648      	mov	r0, r9
  404c46:	f7ff fb35 	bl	4042b4 <__sprint_r.part.0>
  404c4a:	b968      	cbnz	r0, 404c68 <_vfiprintf_r+0x93c>
  404c4c:	980e      	ldr	r0, [sp, #56]	; 0x38
  404c4e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404c50:	9b01      	ldr	r3, [sp, #4]
  404c52:	f100 0e01 	add.w	lr, r0, #1
  404c56:	46dc      	mov	ip, fp
  404c58:	e7c8      	b.n	404bec <_vfiprintf_r+0x8c0>
  404c5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  404c5c:	b123      	cbz	r3, 404c68 <_vfiprintf_r+0x93c>
  404c5e:	9805      	ldr	r0, [sp, #20]
  404c60:	9900      	ldr	r1, [sp, #0]
  404c62:	aa0d      	add	r2, sp, #52	; 0x34
  404c64:	f7ff fb26 	bl	4042b4 <__sprint_r.part.0>
  404c68:	9b00      	ldr	r3, [sp, #0]
  404c6a:	899b      	ldrh	r3, [r3, #12]
  404c6c:	065a      	lsls	r2, r3, #25
  404c6e:	f100 818b 	bmi.w	404f88 <_vfiprintf_r+0xc5c>
  404c72:	9802      	ldr	r0, [sp, #8]
  404c74:	b02b      	add	sp, #172	; 0xac
  404c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404c7a:	aa0d      	add	r2, sp, #52	; 0x34
  404c7c:	9900      	ldr	r1, [sp, #0]
  404c7e:	4648      	mov	r0, r9
  404c80:	f7ff fb18 	bl	4042b4 <__sprint_r.part.0>
  404c84:	2800      	cmp	r0, #0
  404c86:	d1ef      	bne.n	404c68 <_vfiprintf_r+0x93c>
  404c88:	990e      	ldr	r1, [sp, #56]	; 0x38
  404c8a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404c8c:	1c48      	adds	r0, r1, #1
  404c8e:	46da      	mov	sl, fp
  404c90:	e555      	b.n	40473e <_vfiprintf_r+0x412>
  404c92:	2a00      	cmp	r2, #0
  404c94:	f040 80fb 	bne.w	404e8e <_vfiprintf_r+0xb62>
  404c98:	9a03      	ldr	r2, [sp, #12]
  404c9a:	921b      	str	r2, [sp, #108]	; 0x6c
  404c9c:	2301      	movs	r3, #1
  404c9e:	920f      	str	r2, [sp, #60]	; 0x3c
  404ca0:	971a      	str	r7, [sp, #104]	; 0x68
  404ca2:	930e      	str	r3, [sp, #56]	; 0x38
  404ca4:	46da      	mov	sl, fp
  404ca6:	f10a 0a08 	add.w	sl, sl, #8
  404caa:	0771      	lsls	r1, r6, #29
  404cac:	d504      	bpl.n	404cb8 <_vfiprintf_r+0x98c>
  404cae:	9b06      	ldr	r3, [sp, #24]
  404cb0:	1b5c      	subs	r4, r3, r5
  404cb2:	2c00      	cmp	r4, #0
  404cb4:	f73f ad34 	bgt.w	404720 <_vfiprintf_r+0x3f4>
  404cb8:	9b02      	ldr	r3, [sp, #8]
  404cba:	9906      	ldr	r1, [sp, #24]
  404cbc:	42a9      	cmp	r1, r5
  404cbe:	bfac      	ite	ge
  404cc0:	185b      	addge	r3, r3, r1
  404cc2:	195b      	addlt	r3, r3, r5
  404cc4:	9302      	str	r3, [sp, #8]
  404cc6:	2a00      	cmp	r2, #0
  404cc8:	f040 80b3 	bne.w	404e32 <_vfiprintf_r+0xb06>
  404ccc:	2300      	movs	r3, #0
  404cce:	930e      	str	r3, [sp, #56]	; 0x38
  404cd0:	46da      	mov	sl, fp
  404cd2:	f7ff bb5c 	b.w	40438e <_vfiprintf_r+0x62>
  404cd6:	aa0d      	add	r2, sp, #52	; 0x34
  404cd8:	9900      	ldr	r1, [sp, #0]
  404cda:	9307      	str	r3, [sp, #28]
  404cdc:	4648      	mov	r0, r9
  404cde:	f7ff fae9 	bl	4042b4 <__sprint_r.part.0>
  404ce2:	2800      	cmp	r0, #0
  404ce4:	d1c0      	bne.n	404c68 <_vfiprintf_r+0x93c>
  404ce6:	980e      	ldr	r0, [sp, #56]	; 0x38
  404ce8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404cea:	9b07      	ldr	r3, [sp, #28]
  404cec:	f100 0c01 	add.w	ip, r0, #1
  404cf0:	46de      	mov	lr, fp
  404cf2:	e4cb      	b.n	40468c <_vfiprintf_r+0x360>
  404cf4:	004078a0 	.word	0x004078a0
  404cf8:	004078b4 	.word	0x004078b4
  404cfc:	00407890 	.word	0x00407890
  404d00:	2a00      	cmp	r2, #0
  404d02:	f040 8133 	bne.w	404f6c <_vfiprintf_r+0xc40>
  404d06:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  404d0a:	2b00      	cmp	r3, #0
  404d0c:	f000 80f5 	beq.w	404efa <_vfiprintf_r+0xbce>
  404d10:	2301      	movs	r3, #1
  404d12:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
  404d16:	461a      	mov	r2, r3
  404d18:	931b      	str	r3, [sp, #108]	; 0x6c
  404d1a:	469e      	mov	lr, r3
  404d1c:	911a      	str	r1, [sp, #104]	; 0x68
  404d1e:	46da      	mov	sl, fp
  404d20:	4670      	mov	r0, lr
  404d22:	f10a 0a08 	add.w	sl, sl, #8
  404d26:	f10e 0e01 	add.w	lr, lr, #1
  404d2a:	e47d      	b.n	404628 <_vfiprintf_r+0x2fc>
  404d2c:	a90c      	add	r1, sp, #48	; 0x30
  404d2e:	2202      	movs	r2, #2
  404d30:	469e      	mov	lr, r3
  404d32:	911a      	str	r1, [sp, #104]	; 0x68
  404d34:	921b      	str	r2, [sp, #108]	; 0x6c
  404d36:	46da      	mov	sl, fp
  404d38:	4670      	mov	r0, lr
  404d3a:	f10a 0a08 	add.w	sl, sl, #8
  404d3e:	f10e 0e01 	add.w	lr, lr, #1
  404d42:	e738      	b.n	404bb6 <_vfiprintf_r+0x88a>
  404d44:	9b01      	ldr	r3, [sp, #4]
  404d46:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  404d4a:	2b00      	cmp	r3, #0
  404d4c:	f2c0 812a 	blt.w	404fa4 <_vfiprintf_r+0xc78>
  404d50:	ea54 0305 	orrs.w	r3, r4, r5
  404d54:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  404d58:	f43f abff 	beq.w	40455a <_vfiprintf_r+0x22e>
  404d5c:	465f      	mov	r7, fp
  404d5e:	0923      	lsrs	r3, r4, #4
  404d60:	f004 010f 	and.w	r1, r4, #15
  404d64:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  404d68:	092a      	lsrs	r2, r5, #4
  404d6a:	461c      	mov	r4, r3
  404d6c:	4615      	mov	r5, r2
  404d6e:	5c43      	ldrb	r3, [r0, r1]
  404d70:	f807 3d01 	strb.w	r3, [r7, #-1]!
  404d74:	ea54 0305 	orrs.w	r3, r4, r5
  404d78:	d1f1      	bne.n	404d5e <_vfiprintf_r+0xa32>
  404d7a:	ebc7 030b 	rsb	r3, r7, fp
  404d7e:	9303      	str	r3, [sp, #12]
  404d80:	f7ff bbf4 	b.w	40456c <_vfiprintf_r+0x240>
  404d84:	aa0d      	add	r2, sp, #52	; 0x34
  404d86:	9900      	ldr	r1, [sp, #0]
  404d88:	9805      	ldr	r0, [sp, #20]
  404d8a:	f7ff fa93 	bl	4042b4 <__sprint_r.part.0>
  404d8e:	2800      	cmp	r0, #0
  404d90:	f47f af6a 	bne.w	404c68 <_vfiprintf_r+0x93c>
  404d94:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404d96:	46da      	mov	sl, fp
  404d98:	e787      	b.n	404caa <_vfiprintf_r+0x97e>
  404d9a:	f04f 0900 	mov.w	r9, #0
  404d9e:	2400      	movs	r4, #0
  404da0:	2500      	movs	r5, #0
  404da2:	e7db      	b.n	404d5c <_vfiprintf_r+0xa30>
  404da4:	f016 0210 	ands.w	r2, r6, #16
  404da8:	f000 80b2 	beq.w	404f10 <_vfiprintf_r+0xbe4>
  404dac:	9904      	ldr	r1, [sp, #16]
  404dae:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  404db2:	460a      	mov	r2, r1
  404db4:	680c      	ldr	r4, [r1, #0]
  404db6:	9901      	ldr	r1, [sp, #4]
  404db8:	2900      	cmp	r1, #0
  404dba:	f102 0204 	add.w	r2, r2, #4
  404dbe:	f04f 0500 	mov.w	r5, #0
  404dc2:	f2c0 8159 	blt.w	405078 <_vfiprintf_r+0xd4c>
  404dc6:	ea54 0105 	orrs.w	r1, r4, r5
  404dca:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  404dce:	9204      	str	r2, [sp, #16]
  404dd0:	f43f ad51 	beq.w	404876 <_vfiprintf_r+0x54a>
  404dd4:	4699      	mov	r9, r3
  404dd6:	e556      	b.n	404886 <_vfiprintf_r+0x55a>
  404dd8:	06f7      	lsls	r7, r6, #27
  404dda:	d40a      	bmi.n	404df2 <_vfiprintf_r+0xac6>
  404ddc:	0675      	lsls	r5, r6, #25
  404dde:	d508      	bpl.n	404df2 <_vfiprintf_r+0xac6>
  404de0:	9904      	ldr	r1, [sp, #16]
  404de2:	f9b1 4000 	ldrsh.w	r4, [r1]
  404de6:	3104      	adds	r1, #4
  404de8:	17e5      	asrs	r5, r4, #31
  404dea:	4622      	mov	r2, r4
  404dec:	462b      	mov	r3, r5
  404dee:	9104      	str	r1, [sp, #16]
  404df0:	e4ea      	b.n	4047c8 <_vfiprintf_r+0x49c>
  404df2:	9a04      	ldr	r2, [sp, #16]
  404df4:	6814      	ldr	r4, [r2, #0]
  404df6:	4613      	mov	r3, r2
  404df8:	3304      	adds	r3, #4
  404dfa:	17e5      	asrs	r5, r4, #31
  404dfc:	9304      	str	r3, [sp, #16]
  404dfe:	4622      	mov	r2, r4
  404e00:	462b      	mov	r3, r5
  404e02:	e4e1      	b.n	4047c8 <_vfiprintf_r+0x49c>
  404e04:	6814      	ldr	r4, [r2, #0]
  404e06:	3204      	adds	r2, #4
  404e08:	9204      	str	r2, [sp, #16]
  404e0a:	2500      	movs	r5, #0
  404e0c:	e61f      	b.n	404a4e <_vfiprintf_r+0x722>
  404e0e:	f04f 0900 	mov.w	r9, #0
  404e12:	ea54 0305 	orrs.w	r3, r4, r5
  404e16:	f47f ace8 	bne.w	4047ea <_vfiprintf_r+0x4be>
  404e1a:	e5d8      	b.n	4049ce <_vfiprintf_r+0x6a2>
  404e1c:	aa0d      	add	r2, sp, #52	; 0x34
  404e1e:	9900      	ldr	r1, [sp, #0]
  404e20:	9805      	ldr	r0, [sp, #20]
  404e22:	f7ff fa47 	bl	4042b4 <__sprint_r.part.0>
  404e26:	2800      	cmp	r0, #0
  404e28:	f47f af1e 	bne.w	404c68 <_vfiprintf_r+0x93c>
  404e2c:	46da      	mov	sl, fp
  404e2e:	f7ff bb48 	b.w	4044c2 <_vfiprintf_r+0x196>
  404e32:	aa0d      	add	r2, sp, #52	; 0x34
  404e34:	9900      	ldr	r1, [sp, #0]
  404e36:	9805      	ldr	r0, [sp, #20]
  404e38:	f7ff fa3c 	bl	4042b4 <__sprint_r.part.0>
  404e3c:	2800      	cmp	r0, #0
  404e3e:	f43f af45 	beq.w	404ccc <_vfiprintf_r+0x9a0>
  404e42:	e711      	b.n	404c68 <_vfiprintf_r+0x93c>
  404e44:	aa0d      	add	r2, sp, #52	; 0x34
  404e46:	9900      	ldr	r1, [sp, #0]
  404e48:	9805      	ldr	r0, [sp, #20]
  404e4a:	f7ff fa33 	bl	4042b4 <__sprint_r.part.0>
  404e4e:	2800      	cmp	r0, #0
  404e50:	f47f af0a 	bne.w	404c68 <_vfiprintf_r+0x93c>
  404e54:	980e      	ldr	r0, [sp, #56]	; 0x38
  404e56:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404e58:	f100 0e01 	add.w	lr, r0, #1
  404e5c:	46da      	mov	sl, fp
  404e5e:	f7ff bbe3 	b.w	404628 <_vfiprintf_r+0x2fc>
  404e62:	aa0d      	add	r2, sp, #52	; 0x34
  404e64:	9900      	ldr	r1, [sp, #0]
  404e66:	9805      	ldr	r0, [sp, #20]
  404e68:	f7ff fa24 	bl	4042b4 <__sprint_r.part.0>
  404e6c:	2800      	cmp	r0, #0
  404e6e:	f47f aefb 	bne.w	404c68 <_vfiprintf_r+0x93c>
  404e72:	980e      	ldr	r0, [sp, #56]	; 0x38
  404e74:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404e76:	f100 0e01 	add.w	lr, r0, #1
  404e7a:	46da      	mov	sl, fp
  404e7c:	e69b      	b.n	404bb6 <_vfiprintf_r+0x88a>
  404e7e:	2a00      	cmp	r2, #0
  404e80:	f040 80d8 	bne.w	405034 <_vfiprintf_r+0xd08>
  404e84:	f04f 0e01 	mov.w	lr, #1
  404e88:	4610      	mov	r0, r2
  404e8a:	46da      	mov	sl, fp
  404e8c:	e697      	b.n	404bbe <_vfiprintf_r+0x892>
  404e8e:	aa0d      	add	r2, sp, #52	; 0x34
  404e90:	9900      	ldr	r1, [sp, #0]
  404e92:	9805      	ldr	r0, [sp, #20]
  404e94:	f7ff fa0e 	bl	4042b4 <__sprint_r.part.0>
  404e98:	2800      	cmp	r0, #0
  404e9a:	f47f aee5 	bne.w	404c68 <_vfiprintf_r+0x93c>
  404e9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404ea0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404ea2:	f103 0e01 	add.w	lr, r3, #1
  404ea6:	46da      	mov	sl, fp
  404ea8:	e422      	b.n	4046f0 <_vfiprintf_r+0x3c4>
  404eaa:	2230      	movs	r2, #48	; 0x30
  404eac:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
  404eb0:	9a01      	ldr	r2, [sp, #4]
  404eb2:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  404eb6:	2a00      	cmp	r2, #0
  404eb8:	f04f 0300 	mov.w	r3, #0
  404ebc:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  404ec0:	f046 0302 	orr.w	r3, r6, #2
  404ec4:	f2c0 80cb 	blt.w	40505e <_vfiprintf_r+0xd32>
  404ec8:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  404ecc:	f046 0602 	orr.w	r6, r6, #2
  404ed0:	f04f 0900 	mov.w	r9, #0
  404ed4:	e742      	b.n	404d5c <_vfiprintf_r+0xa30>
  404ed6:	f04f 0900 	mov.w	r9, #0
  404eda:	4890      	ldr	r0, [pc, #576]	; (40511c <_vfiprintf_r+0xdf0>)
  404edc:	e73e      	b.n	404d5c <_vfiprintf_r+0xa30>
  404ede:	9b01      	ldr	r3, [sp, #4]
  404ee0:	4264      	negs	r4, r4
  404ee2:	f04f 092d 	mov.w	r9, #45	; 0x2d
  404ee6:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  404eea:	2b00      	cmp	r3, #0
  404eec:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  404ef0:	f6ff ac7b 	blt.w	4047ea <_vfiprintf_r+0x4be>
  404ef4:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  404ef8:	e477      	b.n	4047ea <_vfiprintf_r+0x4be>
  404efa:	9b07      	ldr	r3, [sp, #28]
  404efc:	2b00      	cmp	r3, #0
  404efe:	d072      	beq.n	404fe6 <_vfiprintf_r+0xcba>
  404f00:	ab0c      	add	r3, sp, #48	; 0x30
  404f02:	2202      	movs	r2, #2
  404f04:	931a      	str	r3, [sp, #104]	; 0x68
  404f06:	921b      	str	r2, [sp, #108]	; 0x6c
  404f08:	f04f 0e01 	mov.w	lr, #1
  404f0c:	46da      	mov	sl, fp
  404f0e:	e713      	b.n	404d38 <_vfiprintf_r+0xa0c>
  404f10:	f016 0940 	ands.w	r9, r6, #64	; 0x40
  404f14:	d048      	beq.n	404fa8 <_vfiprintf_r+0xc7c>
  404f16:	9904      	ldr	r1, [sp, #16]
  404f18:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  404f1c:	460b      	mov	r3, r1
  404f1e:	880c      	ldrh	r4, [r1, #0]
  404f20:	9901      	ldr	r1, [sp, #4]
  404f22:	2900      	cmp	r1, #0
  404f24:	f103 0304 	add.w	r3, r3, #4
  404f28:	f04f 0500 	mov.w	r5, #0
  404f2c:	f6ff ae10 	blt.w	404b50 <_vfiprintf_r+0x824>
  404f30:	ea54 0105 	orrs.w	r1, r4, r5
  404f34:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  404f38:	9304      	str	r3, [sp, #16]
  404f3a:	f43f ac9c 	beq.w	404876 <_vfiprintf_r+0x54a>
  404f3e:	4691      	mov	r9, r2
  404f40:	e4a1      	b.n	404886 <_vfiprintf_r+0x55a>
  404f42:	06f0      	lsls	r0, r6, #27
  404f44:	d40a      	bmi.n	404f5c <_vfiprintf_r+0xc30>
  404f46:	0671      	lsls	r1, r6, #25
  404f48:	d508      	bpl.n	404f5c <_vfiprintf_r+0xc30>
  404f4a:	9a04      	ldr	r2, [sp, #16]
  404f4c:	6813      	ldr	r3, [r2, #0]
  404f4e:	3204      	adds	r2, #4
  404f50:	9204      	str	r2, [sp, #16]
  404f52:	f8bd 2008 	ldrh.w	r2, [sp, #8]
  404f56:	801a      	strh	r2, [r3, #0]
  404f58:	f7ff ba19 	b.w	40438e <_vfiprintf_r+0x62>
  404f5c:	9a04      	ldr	r2, [sp, #16]
  404f5e:	6813      	ldr	r3, [r2, #0]
  404f60:	3204      	adds	r2, #4
  404f62:	9204      	str	r2, [sp, #16]
  404f64:	9a02      	ldr	r2, [sp, #8]
  404f66:	601a      	str	r2, [r3, #0]
  404f68:	f7ff ba11 	b.w	40438e <_vfiprintf_r+0x62>
  404f6c:	aa0d      	add	r2, sp, #52	; 0x34
  404f6e:	9900      	ldr	r1, [sp, #0]
  404f70:	9805      	ldr	r0, [sp, #20]
  404f72:	f7ff f99f 	bl	4042b4 <__sprint_r.part.0>
  404f76:	2800      	cmp	r0, #0
  404f78:	f47f ae76 	bne.w	404c68 <_vfiprintf_r+0x93c>
  404f7c:	980e      	ldr	r0, [sp, #56]	; 0x38
  404f7e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404f80:	f100 0e01 	add.w	lr, r0, #1
  404f84:	46da      	mov	sl, fp
  404f86:	e5fa      	b.n	404b7e <_vfiprintf_r+0x852>
  404f88:	f04f 30ff 	mov.w	r0, #4294967295
  404f8c:	f7ff bab6 	b.w	4044fc <_vfiprintf_r+0x1d0>
  404f90:	4862      	ldr	r0, [pc, #392]	; (40511c <_vfiprintf_r+0xdf0>)
  404f92:	4616      	mov	r6, r2
  404f94:	ea54 0205 	orrs.w	r2, r4, r5
  404f98:	9304      	str	r3, [sp, #16]
  404f9a:	f04f 0900 	mov.w	r9, #0
  404f9e:	f47f aedd 	bne.w	404d5c <_vfiprintf_r+0xa30>
  404fa2:	e6fc      	b.n	404d9e <_vfiprintf_r+0xa72>
  404fa4:	9b04      	ldr	r3, [sp, #16]
  404fa6:	e7f5      	b.n	404f94 <_vfiprintf_r+0xc68>
  404fa8:	9a04      	ldr	r2, [sp, #16]
  404faa:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  404fae:	4613      	mov	r3, r2
  404fb0:	6814      	ldr	r4, [r2, #0]
  404fb2:	9a01      	ldr	r2, [sp, #4]
  404fb4:	2a00      	cmp	r2, #0
  404fb6:	f103 0304 	add.w	r3, r3, #4
  404fba:	f04f 0500 	mov.w	r5, #0
  404fbe:	f6ff adc7 	blt.w	404b50 <_vfiprintf_r+0x824>
  404fc2:	ea54 0205 	orrs.w	r2, r4, r5
  404fc6:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  404fca:	9304      	str	r3, [sp, #16]
  404fcc:	f47f ac5b 	bne.w	404886 <_vfiprintf_r+0x55a>
  404fd0:	e451      	b.n	404876 <_vfiprintf_r+0x54a>
  404fd2:	aa0d      	add	r2, sp, #52	; 0x34
  404fd4:	9900      	ldr	r1, [sp, #0]
  404fd6:	9805      	ldr	r0, [sp, #20]
  404fd8:	f7ff f96c 	bl	4042b4 <__sprint_r.part.0>
  404fdc:	2800      	cmp	r0, #0
  404fde:	f47f ae43 	bne.w	404c68 <_vfiprintf_r+0x93c>
  404fe2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404fe4:	e668      	b.n	404cb8 <_vfiprintf_r+0x98c>
  404fe6:	4610      	mov	r0, r2
  404fe8:	f04f 0e01 	mov.w	lr, #1
  404fec:	46da      	mov	sl, fp
  404fee:	e5e6      	b.n	404bbe <_vfiprintf_r+0x892>
  404ff0:	9904      	ldr	r1, [sp, #16]
  404ff2:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  404ff6:	460a      	mov	r2, r1
  404ff8:	880c      	ldrh	r4, [r1, #0]
  404ffa:	9901      	ldr	r1, [sp, #4]
  404ffc:	2900      	cmp	r1, #0
  404ffe:	f102 0204 	add.w	r2, r2, #4
  405002:	f04f 0500 	mov.w	r5, #0
  405006:	db4e      	blt.n	4050a6 <_vfiprintf_r+0xd7a>
  405008:	ea54 0105 	orrs.w	r1, r4, r5
  40500c:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  405010:	9204      	str	r2, [sp, #16]
  405012:	4699      	mov	r9, r3
  405014:	f47f abe9 	bne.w	4047ea <_vfiprintf_r+0x4be>
  405018:	e4d4      	b.n	4049c4 <_vfiprintf_r+0x698>
  40501a:	9304      	str	r3, [sp, #16]
  40501c:	e6f9      	b.n	404e12 <_vfiprintf_r+0xae6>
  40501e:	4638      	mov	r0, r7
  405020:	9404      	str	r4, [sp, #16]
  405022:	f001 fcad 	bl	406980 <strlen>
  405026:	2300      	movs	r3, #0
  405028:	9003      	str	r0, [sp, #12]
  40502a:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  40502e:	9301      	str	r3, [sp, #4]
  405030:	f7ff ba9c 	b.w	40456c <_vfiprintf_r+0x240>
  405034:	aa0d      	add	r2, sp, #52	; 0x34
  405036:	9900      	ldr	r1, [sp, #0]
  405038:	9805      	ldr	r0, [sp, #20]
  40503a:	f7ff f93b 	bl	4042b4 <__sprint_r.part.0>
  40503e:	2800      	cmp	r0, #0
  405040:	f47f ae12 	bne.w	404c68 <_vfiprintf_r+0x93c>
  405044:	980e      	ldr	r0, [sp, #56]	; 0x38
  405046:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405048:	f100 0e01 	add.w	lr, r0, #1
  40504c:	46da      	mov	sl, fp
  40504e:	e5b6      	b.n	404bbe <_vfiprintf_r+0x892>
  405050:	980e      	ldr	r0, [sp, #56]	; 0x38
  405052:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405054:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 405124 <_vfiprintf_r+0xdf8>
  405058:	3001      	adds	r0, #1
  40505a:	f7ff bad2 	b.w	404602 <_vfiprintf_r+0x2d6>
  40505e:	461e      	mov	r6, r3
  405060:	f04f 0900 	mov.w	r9, #0
  405064:	e67a      	b.n	404d5c <_vfiprintf_r+0xa30>
  405066:	2b06      	cmp	r3, #6
  405068:	bf28      	it	cs
  40506a:	2306      	movcs	r3, #6
  40506c:	9303      	str	r3, [sp, #12]
  40506e:	9404      	str	r4, [sp, #16]
  405070:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
  405074:	4f2a      	ldr	r7, [pc, #168]	; (405120 <_vfiprintf_r+0xdf4>)
  405076:	e50c      	b.n	404a92 <_vfiprintf_r+0x766>
  405078:	9204      	str	r2, [sp, #16]
  40507a:	e56a      	b.n	404b52 <_vfiprintf_r+0x826>
  40507c:	980e      	ldr	r0, [sp, #56]	; 0x38
  40507e:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 405124 <_vfiprintf_r+0xdf8>
  405082:	3001      	adds	r0, #1
  405084:	f7ff bb73 	b.w	40476e <_vfiprintf_r+0x442>
  405088:	46f4      	mov	ip, lr
  40508a:	f7ff bb1a 	b.w	4046c2 <_vfiprintf_r+0x396>
  40508e:	9b01      	ldr	r3, [sp, #4]
  405090:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  405094:	9303      	str	r3, [sp, #12]
  405096:	9404      	str	r4, [sp, #16]
  405098:	9001      	str	r0, [sp, #4]
  40509a:	f7ff ba67 	b.w	40456c <_vfiprintf_r+0x240>
  40509e:	2200      	movs	r2, #0
  4050a0:	9201      	str	r2, [sp, #4]
  4050a2:	f7ff b9ac 	b.w	4043fe <_vfiprintf_r+0xd2>
  4050a6:	9204      	str	r2, [sp, #16]
  4050a8:	4699      	mov	r9, r3
  4050aa:	e6b2      	b.n	404e12 <_vfiprintf_r+0xae6>
  4050ac:	9a04      	ldr	r2, [sp, #16]
  4050ae:	6813      	ldr	r3, [r2, #0]
  4050b0:	9301      	str	r3, [sp, #4]
  4050b2:	3204      	adds	r2, #4
  4050b4:	2b00      	cmp	r3, #0
  4050b6:	9204      	str	r2, [sp, #16]
  4050b8:	f898 3001 	ldrb.w	r3, [r8, #1]
  4050bc:	46a8      	mov	r8, r5
  4050be:	f6bf a99c 	bge.w	4043fa <_vfiprintf_r+0xce>
  4050c2:	f04f 32ff 	mov.w	r2, #4294967295
  4050c6:	9201      	str	r2, [sp, #4]
  4050c8:	f7ff b997 	b.w	4043fa <_vfiprintf_r+0xce>
  4050cc:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4050d0:	e48e      	b.n	4049f0 <_vfiprintf_r+0x6c4>
  4050d2:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4050d6:	e4f0      	b.n	404aba <_vfiprintf_r+0x78e>
  4050d8:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4050dc:	e4ab      	b.n	404a36 <_vfiprintf_r+0x70a>
  4050de:	4699      	mov	r9, r3
  4050e0:	07f3      	lsls	r3, r6, #31
  4050e2:	d505      	bpl.n	4050f0 <_vfiprintf_r+0xdc4>
  4050e4:	af2a      	add	r7, sp, #168	; 0xa8
  4050e6:	2330      	movs	r3, #48	; 0x30
  4050e8:	f807 3d41 	strb.w	r3, [r7, #-65]!
  4050ec:	f7ff bb97 	b.w	40481e <_vfiprintf_r+0x4f2>
  4050f0:	9b01      	ldr	r3, [sp, #4]
  4050f2:	9303      	str	r3, [sp, #12]
  4050f4:	465f      	mov	r7, fp
  4050f6:	f7ff ba39 	b.w	40456c <_vfiprintf_r+0x240>
  4050fa:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4050fe:	e443      	b.n	404988 <_vfiprintf_r+0x65c>
  405100:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  405104:	f7ff bb9a 	b.w	40483c <_vfiprintf_r+0x510>
  405108:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  40510c:	f7ff bb4d 	b.w	4047aa <_vfiprintf_r+0x47e>
  405110:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  405114:	e50f      	b.n	404b36 <_vfiprintf_r+0x80a>
  405116:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  40511a:	e4f3      	b.n	404b04 <_vfiprintf_r+0x7d8>
  40511c:	004078b4 	.word	0x004078b4
  405120:	004078c8 	.word	0x004078c8
  405124:	004078d0 	.word	0x004078d0

00405128 <__sbprintf>:
  405128:	b5f0      	push	{r4, r5, r6, r7, lr}
  40512a:	460c      	mov	r4, r1
  40512c:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
  405130:	8989      	ldrh	r1, [r1, #12]
  405132:	6e66      	ldr	r6, [r4, #100]	; 0x64
  405134:	89e5      	ldrh	r5, [r4, #14]
  405136:	9619      	str	r6, [sp, #100]	; 0x64
  405138:	f021 0102 	bic.w	r1, r1, #2
  40513c:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40513e:	f8ad 500e 	strh.w	r5, [sp, #14]
  405142:	2500      	movs	r5, #0
  405144:	69e7      	ldr	r7, [r4, #28]
  405146:	f8ad 100c 	strh.w	r1, [sp, #12]
  40514a:	9609      	str	r6, [sp, #36]	; 0x24
  40514c:	9506      	str	r5, [sp, #24]
  40514e:	ae1a      	add	r6, sp, #104	; 0x68
  405150:	f44f 6580 	mov.w	r5, #1024	; 0x400
  405154:	4669      	mov	r1, sp
  405156:	9600      	str	r6, [sp, #0]
  405158:	9604      	str	r6, [sp, #16]
  40515a:	9502      	str	r5, [sp, #8]
  40515c:	9505      	str	r5, [sp, #20]
  40515e:	9707      	str	r7, [sp, #28]
  405160:	4606      	mov	r6, r0
  405162:	f7ff f8e3 	bl	40432c <_vfiprintf_r>
  405166:	1e05      	subs	r5, r0, #0
  405168:	db07      	blt.n	40517a <__sbprintf+0x52>
  40516a:	4630      	mov	r0, r6
  40516c:	4669      	mov	r1, sp
  40516e:	f000 f929 	bl	4053c4 <_fflush_r>
  405172:	2800      	cmp	r0, #0
  405174:	bf18      	it	ne
  405176:	f04f 35ff 	movne.w	r5, #4294967295
  40517a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  40517e:	065b      	lsls	r3, r3, #25
  405180:	d503      	bpl.n	40518a <__sbprintf+0x62>
  405182:	89a3      	ldrh	r3, [r4, #12]
  405184:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405188:	81a3      	strh	r3, [r4, #12]
  40518a:	4628      	mov	r0, r5
  40518c:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
  405190:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405192:	bf00      	nop

00405194 <__swsetup_r>:
  405194:	b538      	push	{r3, r4, r5, lr}
  405196:	4b30      	ldr	r3, [pc, #192]	; (405258 <__swsetup_r+0xc4>)
  405198:	681b      	ldr	r3, [r3, #0]
  40519a:	4605      	mov	r5, r0
  40519c:	460c      	mov	r4, r1
  40519e:	b113      	cbz	r3, 4051a6 <__swsetup_r+0x12>
  4051a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  4051a2:	2a00      	cmp	r2, #0
  4051a4:	d038      	beq.n	405218 <__swsetup_r+0x84>
  4051a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4051aa:	b293      	uxth	r3, r2
  4051ac:	0718      	lsls	r0, r3, #28
  4051ae:	d50c      	bpl.n	4051ca <__swsetup_r+0x36>
  4051b0:	6920      	ldr	r0, [r4, #16]
  4051b2:	b1a8      	cbz	r0, 4051e0 <__swsetup_r+0x4c>
  4051b4:	f013 0201 	ands.w	r2, r3, #1
  4051b8:	d01e      	beq.n	4051f8 <__swsetup_r+0x64>
  4051ba:	6963      	ldr	r3, [r4, #20]
  4051bc:	2200      	movs	r2, #0
  4051be:	425b      	negs	r3, r3
  4051c0:	61a3      	str	r3, [r4, #24]
  4051c2:	60a2      	str	r2, [r4, #8]
  4051c4:	b1f0      	cbz	r0, 405204 <__swsetup_r+0x70>
  4051c6:	2000      	movs	r0, #0
  4051c8:	bd38      	pop	{r3, r4, r5, pc}
  4051ca:	06d9      	lsls	r1, r3, #27
  4051cc:	d53c      	bpl.n	405248 <__swsetup_r+0xb4>
  4051ce:	0758      	lsls	r0, r3, #29
  4051d0:	d426      	bmi.n	405220 <__swsetup_r+0x8c>
  4051d2:	6920      	ldr	r0, [r4, #16]
  4051d4:	f042 0308 	orr.w	r3, r2, #8
  4051d8:	81a3      	strh	r3, [r4, #12]
  4051da:	b29b      	uxth	r3, r3
  4051dc:	2800      	cmp	r0, #0
  4051de:	d1e9      	bne.n	4051b4 <__swsetup_r+0x20>
  4051e0:	f403 7220 	and.w	r2, r3, #640	; 0x280
  4051e4:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  4051e8:	d0e4      	beq.n	4051b4 <__swsetup_r+0x20>
  4051ea:	4628      	mov	r0, r5
  4051ec:	4621      	mov	r1, r4
  4051ee:	f000 fd15 	bl	405c1c <__smakebuf_r>
  4051f2:	89a3      	ldrh	r3, [r4, #12]
  4051f4:	6920      	ldr	r0, [r4, #16]
  4051f6:	e7dd      	b.n	4051b4 <__swsetup_r+0x20>
  4051f8:	0799      	lsls	r1, r3, #30
  4051fa:	bf58      	it	pl
  4051fc:	6962      	ldrpl	r2, [r4, #20]
  4051fe:	60a2      	str	r2, [r4, #8]
  405200:	2800      	cmp	r0, #0
  405202:	d1e0      	bne.n	4051c6 <__swsetup_r+0x32>
  405204:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405208:	061a      	lsls	r2, r3, #24
  40520a:	d5dd      	bpl.n	4051c8 <__swsetup_r+0x34>
  40520c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405210:	81a3      	strh	r3, [r4, #12]
  405212:	f04f 30ff 	mov.w	r0, #4294967295
  405216:	bd38      	pop	{r3, r4, r5, pc}
  405218:	4618      	mov	r0, r3
  40521a:	f000 f967 	bl	4054ec <__sinit>
  40521e:	e7c2      	b.n	4051a6 <__swsetup_r+0x12>
  405220:	6b21      	ldr	r1, [r4, #48]	; 0x30
  405222:	b151      	cbz	r1, 40523a <__swsetup_r+0xa6>
  405224:	f104 0340 	add.w	r3, r4, #64	; 0x40
  405228:	4299      	cmp	r1, r3
  40522a:	d004      	beq.n	405236 <__swsetup_r+0xa2>
  40522c:	4628      	mov	r0, r5
  40522e:	f000 fa27 	bl	405680 <_free_r>
  405232:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  405236:	2300      	movs	r3, #0
  405238:	6323      	str	r3, [r4, #48]	; 0x30
  40523a:	2300      	movs	r3, #0
  40523c:	6920      	ldr	r0, [r4, #16]
  40523e:	6063      	str	r3, [r4, #4]
  405240:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  405244:	6020      	str	r0, [r4, #0]
  405246:	e7c5      	b.n	4051d4 <__swsetup_r+0x40>
  405248:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  40524c:	2309      	movs	r3, #9
  40524e:	602b      	str	r3, [r5, #0]
  405250:	f04f 30ff 	mov.w	r0, #4294967295
  405254:	81a2      	strh	r2, [r4, #12]
  405256:	bd38      	pop	{r3, r4, r5, pc}
  405258:	20400460 	.word	0x20400460

0040525c <register_fini>:
  40525c:	4b02      	ldr	r3, [pc, #8]	; (405268 <register_fini+0xc>)
  40525e:	b113      	cbz	r3, 405266 <register_fini+0xa>
  405260:	4802      	ldr	r0, [pc, #8]	; (40526c <register_fini+0x10>)
  405262:	f000 b805 	b.w	405270 <atexit>
  405266:	4770      	bx	lr
  405268:	00000000 	.word	0x00000000
  40526c:	00405501 	.word	0x00405501

00405270 <atexit>:
  405270:	2300      	movs	r3, #0
  405272:	4601      	mov	r1, r0
  405274:	461a      	mov	r2, r3
  405276:	4618      	mov	r0, r3
  405278:	f001 bc94 	b.w	406ba4 <__register_exitproc>

0040527c <__sflush_r>:
  40527c:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  405280:	b29a      	uxth	r2, r3
  405282:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405286:	460d      	mov	r5, r1
  405288:	0711      	lsls	r1, r2, #28
  40528a:	4680      	mov	r8, r0
  40528c:	d43c      	bmi.n	405308 <__sflush_r+0x8c>
  40528e:	686a      	ldr	r2, [r5, #4]
  405290:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  405294:	2a00      	cmp	r2, #0
  405296:	81ab      	strh	r3, [r5, #12]
  405298:	dd73      	ble.n	405382 <__sflush_r+0x106>
  40529a:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40529c:	2c00      	cmp	r4, #0
  40529e:	d04b      	beq.n	405338 <__sflush_r+0xbc>
  4052a0:	b29b      	uxth	r3, r3
  4052a2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  4052a6:	2100      	movs	r1, #0
  4052a8:	b292      	uxth	r2, r2
  4052aa:	f8d8 6000 	ldr.w	r6, [r8]
  4052ae:	f8c8 1000 	str.w	r1, [r8]
  4052b2:	2a00      	cmp	r2, #0
  4052b4:	d069      	beq.n	40538a <__sflush_r+0x10e>
  4052b6:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  4052b8:	075f      	lsls	r7, r3, #29
  4052ba:	d505      	bpl.n	4052c8 <__sflush_r+0x4c>
  4052bc:	6869      	ldr	r1, [r5, #4]
  4052be:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  4052c0:	1a52      	subs	r2, r2, r1
  4052c2:	b10b      	cbz	r3, 4052c8 <__sflush_r+0x4c>
  4052c4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  4052c6:	1ad2      	subs	r2, r2, r3
  4052c8:	2300      	movs	r3, #0
  4052ca:	69e9      	ldr	r1, [r5, #28]
  4052cc:	4640      	mov	r0, r8
  4052ce:	47a0      	blx	r4
  4052d0:	1c44      	adds	r4, r0, #1
  4052d2:	d03c      	beq.n	40534e <__sflush_r+0xd2>
  4052d4:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  4052d8:	692a      	ldr	r2, [r5, #16]
  4052da:	602a      	str	r2, [r5, #0]
  4052dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4052e0:	2200      	movs	r2, #0
  4052e2:	81ab      	strh	r3, [r5, #12]
  4052e4:	04db      	lsls	r3, r3, #19
  4052e6:	606a      	str	r2, [r5, #4]
  4052e8:	d449      	bmi.n	40537e <__sflush_r+0x102>
  4052ea:	6b29      	ldr	r1, [r5, #48]	; 0x30
  4052ec:	f8c8 6000 	str.w	r6, [r8]
  4052f0:	b311      	cbz	r1, 405338 <__sflush_r+0xbc>
  4052f2:	f105 0340 	add.w	r3, r5, #64	; 0x40
  4052f6:	4299      	cmp	r1, r3
  4052f8:	d002      	beq.n	405300 <__sflush_r+0x84>
  4052fa:	4640      	mov	r0, r8
  4052fc:	f000 f9c0 	bl	405680 <_free_r>
  405300:	2000      	movs	r0, #0
  405302:	6328      	str	r0, [r5, #48]	; 0x30
  405304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405308:	692e      	ldr	r6, [r5, #16]
  40530a:	b1ae      	cbz	r6, 405338 <__sflush_r+0xbc>
  40530c:	682c      	ldr	r4, [r5, #0]
  40530e:	602e      	str	r6, [r5, #0]
  405310:	0790      	lsls	r0, r2, #30
  405312:	bf0c      	ite	eq
  405314:	696b      	ldreq	r3, [r5, #20]
  405316:	2300      	movne	r3, #0
  405318:	1ba4      	subs	r4, r4, r6
  40531a:	60ab      	str	r3, [r5, #8]
  40531c:	e00a      	b.n	405334 <__sflush_r+0xb8>
  40531e:	4623      	mov	r3, r4
  405320:	4632      	mov	r2, r6
  405322:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  405324:	69e9      	ldr	r1, [r5, #28]
  405326:	4640      	mov	r0, r8
  405328:	47b8      	blx	r7
  40532a:	2800      	cmp	r0, #0
  40532c:	eba4 0400 	sub.w	r4, r4, r0
  405330:	4406      	add	r6, r0
  405332:	dd04      	ble.n	40533e <__sflush_r+0xc2>
  405334:	2c00      	cmp	r4, #0
  405336:	dcf2      	bgt.n	40531e <__sflush_r+0xa2>
  405338:	2000      	movs	r0, #0
  40533a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40533e:	89ab      	ldrh	r3, [r5, #12]
  405340:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405344:	81ab      	strh	r3, [r5, #12]
  405346:	f04f 30ff 	mov.w	r0, #4294967295
  40534a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40534e:	f8d8 2000 	ldr.w	r2, [r8]
  405352:	2a1d      	cmp	r2, #29
  405354:	d8f3      	bhi.n	40533e <__sflush_r+0xc2>
  405356:	4b1a      	ldr	r3, [pc, #104]	; (4053c0 <__sflush_r+0x144>)
  405358:	40d3      	lsrs	r3, r2
  40535a:	f003 0301 	and.w	r3, r3, #1
  40535e:	f083 0401 	eor.w	r4, r3, #1
  405362:	2b00      	cmp	r3, #0
  405364:	d0eb      	beq.n	40533e <__sflush_r+0xc2>
  405366:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  40536a:	6929      	ldr	r1, [r5, #16]
  40536c:	6029      	str	r1, [r5, #0]
  40536e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  405372:	04d9      	lsls	r1, r3, #19
  405374:	606c      	str	r4, [r5, #4]
  405376:	81ab      	strh	r3, [r5, #12]
  405378:	d5b7      	bpl.n	4052ea <__sflush_r+0x6e>
  40537a:	2a00      	cmp	r2, #0
  40537c:	d1b5      	bne.n	4052ea <__sflush_r+0x6e>
  40537e:	6528      	str	r0, [r5, #80]	; 0x50
  405380:	e7b3      	b.n	4052ea <__sflush_r+0x6e>
  405382:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  405384:	2a00      	cmp	r2, #0
  405386:	dc88      	bgt.n	40529a <__sflush_r+0x1e>
  405388:	e7d6      	b.n	405338 <__sflush_r+0xbc>
  40538a:	2301      	movs	r3, #1
  40538c:	69e9      	ldr	r1, [r5, #28]
  40538e:	4640      	mov	r0, r8
  405390:	47a0      	blx	r4
  405392:	1c43      	adds	r3, r0, #1
  405394:	4602      	mov	r2, r0
  405396:	d002      	beq.n	40539e <__sflush_r+0x122>
  405398:	89ab      	ldrh	r3, [r5, #12]
  40539a:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40539c:	e78c      	b.n	4052b8 <__sflush_r+0x3c>
  40539e:	f8d8 3000 	ldr.w	r3, [r8]
  4053a2:	2b00      	cmp	r3, #0
  4053a4:	d0f8      	beq.n	405398 <__sflush_r+0x11c>
  4053a6:	2b1d      	cmp	r3, #29
  4053a8:	d001      	beq.n	4053ae <__sflush_r+0x132>
  4053aa:	2b16      	cmp	r3, #22
  4053ac:	d102      	bne.n	4053b4 <__sflush_r+0x138>
  4053ae:	f8c8 6000 	str.w	r6, [r8]
  4053b2:	e7c1      	b.n	405338 <__sflush_r+0xbc>
  4053b4:	89ab      	ldrh	r3, [r5, #12]
  4053b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4053ba:	81ab      	strh	r3, [r5, #12]
  4053bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4053c0:	20400001 	.word	0x20400001

004053c4 <_fflush_r>:
  4053c4:	b510      	push	{r4, lr}
  4053c6:	4604      	mov	r4, r0
  4053c8:	b082      	sub	sp, #8
  4053ca:	b108      	cbz	r0, 4053d0 <_fflush_r+0xc>
  4053cc:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4053ce:	b153      	cbz	r3, 4053e6 <_fflush_r+0x22>
  4053d0:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  4053d4:	b908      	cbnz	r0, 4053da <_fflush_r+0x16>
  4053d6:	b002      	add	sp, #8
  4053d8:	bd10      	pop	{r4, pc}
  4053da:	4620      	mov	r0, r4
  4053dc:	b002      	add	sp, #8
  4053de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4053e2:	f7ff bf4b 	b.w	40527c <__sflush_r>
  4053e6:	9101      	str	r1, [sp, #4]
  4053e8:	f000 f880 	bl	4054ec <__sinit>
  4053ec:	9901      	ldr	r1, [sp, #4]
  4053ee:	e7ef      	b.n	4053d0 <_fflush_r+0xc>

004053f0 <_cleanup_r>:
  4053f0:	4901      	ldr	r1, [pc, #4]	; (4053f8 <_cleanup_r+0x8>)
  4053f2:	f000 bbaf 	b.w	405b54 <_fwalk_reent>
  4053f6:	bf00      	nop
  4053f8:	00406c6d 	.word	0x00406c6d

004053fc <__sinit.part.1>:
  4053fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405400:	4b35      	ldr	r3, [pc, #212]	; (4054d8 <__sinit.part.1+0xdc>)
  405402:	6845      	ldr	r5, [r0, #4]
  405404:	63c3      	str	r3, [r0, #60]	; 0x3c
  405406:	2400      	movs	r4, #0
  405408:	4607      	mov	r7, r0
  40540a:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
  40540e:	2304      	movs	r3, #4
  405410:	2103      	movs	r1, #3
  405412:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
  405416:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
  40541a:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
  40541e:	b083      	sub	sp, #12
  405420:	602c      	str	r4, [r5, #0]
  405422:	606c      	str	r4, [r5, #4]
  405424:	60ac      	str	r4, [r5, #8]
  405426:	666c      	str	r4, [r5, #100]	; 0x64
  405428:	81ec      	strh	r4, [r5, #14]
  40542a:	612c      	str	r4, [r5, #16]
  40542c:	616c      	str	r4, [r5, #20]
  40542e:	61ac      	str	r4, [r5, #24]
  405430:	81ab      	strh	r3, [r5, #12]
  405432:	4621      	mov	r1, r4
  405434:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  405438:	2208      	movs	r2, #8
  40543a:	f7fe fe3d 	bl	4040b8 <memset>
  40543e:	68be      	ldr	r6, [r7, #8]
  405440:	f8df b098 	ldr.w	fp, [pc, #152]	; 4054dc <__sinit.part.1+0xe0>
  405444:	f8df a098 	ldr.w	sl, [pc, #152]	; 4054e0 <__sinit.part.1+0xe4>
  405448:	f8df 9098 	ldr.w	r9, [pc, #152]	; 4054e4 <__sinit.part.1+0xe8>
  40544c:	f8df 8098 	ldr.w	r8, [pc, #152]	; 4054e8 <__sinit.part.1+0xec>
  405450:	f8c5 b020 	str.w	fp, [r5, #32]
  405454:	2301      	movs	r3, #1
  405456:	2209      	movs	r2, #9
  405458:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  40545c:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  405460:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  405464:	61ed      	str	r5, [r5, #28]
  405466:	4621      	mov	r1, r4
  405468:	81f3      	strh	r3, [r6, #14]
  40546a:	81b2      	strh	r2, [r6, #12]
  40546c:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  405470:	6034      	str	r4, [r6, #0]
  405472:	6074      	str	r4, [r6, #4]
  405474:	60b4      	str	r4, [r6, #8]
  405476:	6674      	str	r4, [r6, #100]	; 0x64
  405478:	6134      	str	r4, [r6, #16]
  40547a:	6174      	str	r4, [r6, #20]
  40547c:	61b4      	str	r4, [r6, #24]
  40547e:	2208      	movs	r2, #8
  405480:	9301      	str	r3, [sp, #4]
  405482:	f7fe fe19 	bl	4040b8 <memset>
  405486:	68fd      	ldr	r5, [r7, #12]
  405488:	61f6      	str	r6, [r6, #28]
  40548a:	2012      	movs	r0, #18
  40548c:	2202      	movs	r2, #2
  40548e:	f8c6 b020 	str.w	fp, [r6, #32]
  405492:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
  405496:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
  40549a:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
  40549e:	4621      	mov	r1, r4
  4054a0:	81a8      	strh	r0, [r5, #12]
  4054a2:	81ea      	strh	r2, [r5, #14]
  4054a4:	602c      	str	r4, [r5, #0]
  4054a6:	606c      	str	r4, [r5, #4]
  4054a8:	60ac      	str	r4, [r5, #8]
  4054aa:	666c      	str	r4, [r5, #100]	; 0x64
  4054ac:	612c      	str	r4, [r5, #16]
  4054ae:	616c      	str	r4, [r5, #20]
  4054b0:	61ac      	str	r4, [r5, #24]
  4054b2:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  4054b6:	2208      	movs	r2, #8
  4054b8:	f7fe fdfe 	bl	4040b8 <memset>
  4054bc:	9b01      	ldr	r3, [sp, #4]
  4054be:	61ed      	str	r5, [r5, #28]
  4054c0:	f8c5 b020 	str.w	fp, [r5, #32]
  4054c4:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  4054c8:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  4054cc:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  4054d0:	63bb      	str	r3, [r7, #56]	; 0x38
  4054d2:	b003      	add	sp, #12
  4054d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4054d8:	004053f1 	.word	0x004053f1
  4054dc:	004068d9 	.word	0x004068d9
  4054e0:	004068fd 	.word	0x004068fd
  4054e4:	00406939 	.word	0x00406939
  4054e8:	00406959 	.word	0x00406959

004054ec <__sinit>:
  4054ec:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4054ee:	b103      	cbz	r3, 4054f2 <__sinit+0x6>
  4054f0:	4770      	bx	lr
  4054f2:	f7ff bf83 	b.w	4053fc <__sinit.part.1>
  4054f6:	bf00      	nop

004054f8 <__sfp_lock_acquire>:
  4054f8:	4770      	bx	lr
  4054fa:	bf00      	nop

004054fc <__sfp_lock_release>:
  4054fc:	4770      	bx	lr
  4054fe:	bf00      	nop

00405500 <__libc_fini_array>:
  405500:	b538      	push	{r3, r4, r5, lr}
  405502:	4d07      	ldr	r5, [pc, #28]	; (405520 <__libc_fini_array+0x20>)
  405504:	4c07      	ldr	r4, [pc, #28]	; (405524 <__libc_fini_array+0x24>)
  405506:	1b2c      	subs	r4, r5, r4
  405508:	10a4      	asrs	r4, r4, #2
  40550a:	d005      	beq.n	405518 <__libc_fini_array+0x18>
  40550c:	3c01      	subs	r4, #1
  40550e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  405512:	4798      	blx	r3
  405514:	2c00      	cmp	r4, #0
  405516:	d1f9      	bne.n	40550c <__libc_fini_array+0xc>
  405518:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40551c:	f002 b9ea 	b.w	4078f4 <_fini>
  405520:	00407904 	.word	0x00407904
  405524:	00407900 	.word	0x00407900

00405528 <__fputwc>:
  405528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40552c:	b082      	sub	sp, #8
  40552e:	4680      	mov	r8, r0
  405530:	4689      	mov	r9, r1
  405532:	4614      	mov	r4, r2
  405534:	f000 fb3c 	bl	405bb0 <__locale_mb_cur_max>
  405538:	2801      	cmp	r0, #1
  40553a:	d033      	beq.n	4055a4 <__fputwc+0x7c>
  40553c:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  405540:	464a      	mov	r2, r9
  405542:	a901      	add	r1, sp, #4
  405544:	4640      	mov	r0, r8
  405546:	f001 fadf 	bl	406b08 <_wcrtomb_r>
  40554a:	f1b0 3fff 	cmp.w	r0, #4294967295
  40554e:	4682      	mov	sl, r0
  405550:	d021      	beq.n	405596 <__fputwc+0x6e>
  405552:	b388      	cbz	r0, 4055b8 <__fputwc+0x90>
  405554:	f89d 6004 	ldrb.w	r6, [sp, #4]
  405558:	2500      	movs	r5, #0
  40555a:	e008      	b.n	40556e <__fputwc+0x46>
  40555c:	6823      	ldr	r3, [r4, #0]
  40555e:	1c5a      	adds	r2, r3, #1
  405560:	6022      	str	r2, [r4, #0]
  405562:	701e      	strb	r6, [r3, #0]
  405564:	3501      	adds	r5, #1
  405566:	4555      	cmp	r5, sl
  405568:	d226      	bcs.n	4055b8 <__fputwc+0x90>
  40556a:	ab01      	add	r3, sp, #4
  40556c:	5d5e      	ldrb	r6, [r3, r5]
  40556e:	68a3      	ldr	r3, [r4, #8]
  405570:	3b01      	subs	r3, #1
  405572:	2b00      	cmp	r3, #0
  405574:	60a3      	str	r3, [r4, #8]
  405576:	daf1      	bge.n	40555c <__fputwc+0x34>
  405578:	69a7      	ldr	r7, [r4, #24]
  40557a:	42bb      	cmp	r3, r7
  40557c:	4631      	mov	r1, r6
  40557e:	4622      	mov	r2, r4
  405580:	4640      	mov	r0, r8
  405582:	db01      	blt.n	405588 <__fputwc+0x60>
  405584:	2e0a      	cmp	r6, #10
  405586:	d1e9      	bne.n	40555c <__fputwc+0x34>
  405588:	f001 fa68 	bl	406a5c <__swbuf_r>
  40558c:	1c43      	adds	r3, r0, #1
  40558e:	d1e9      	bne.n	405564 <__fputwc+0x3c>
  405590:	b002      	add	sp, #8
  405592:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405596:	89a3      	ldrh	r3, [r4, #12]
  405598:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40559c:	81a3      	strh	r3, [r4, #12]
  40559e:	b002      	add	sp, #8
  4055a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4055a4:	f109 33ff 	add.w	r3, r9, #4294967295
  4055a8:	2bfe      	cmp	r3, #254	; 0xfe
  4055aa:	d8c7      	bhi.n	40553c <__fputwc+0x14>
  4055ac:	fa5f f689 	uxtb.w	r6, r9
  4055b0:	4682      	mov	sl, r0
  4055b2:	f88d 6004 	strb.w	r6, [sp, #4]
  4055b6:	e7cf      	b.n	405558 <__fputwc+0x30>
  4055b8:	4648      	mov	r0, r9
  4055ba:	b002      	add	sp, #8
  4055bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

004055c0 <_fputwc_r>:
  4055c0:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  4055c4:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  4055c8:	d10a      	bne.n	4055e0 <_fputwc_r+0x20>
  4055ca:	b410      	push	{r4}
  4055cc:	6e54      	ldr	r4, [r2, #100]	; 0x64
  4055ce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4055d2:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  4055d6:	6654      	str	r4, [r2, #100]	; 0x64
  4055d8:	8193      	strh	r3, [r2, #12]
  4055da:	bc10      	pop	{r4}
  4055dc:	f7ff bfa4 	b.w	405528 <__fputwc>
  4055e0:	f7ff bfa2 	b.w	405528 <__fputwc>

004055e4 <_malloc_trim_r>:
  4055e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4055e6:	4f23      	ldr	r7, [pc, #140]	; (405674 <_malloc_trim_r+0x90>)
  4055e8:	460c      	mov	r4, r1
  4055ea:	4606      	mov	r6, r0
  4055ec:	f000 ff6e 	bl	4064cc <__malloc_lock>
  4055f0:	68bb      	ldr	r3, [r7, #8]
  4055f2:	685d      	ldr	r5, [r3, #4]
  4055f4:	f025 0503 	bic.w	r5, r5, #3
  4055f8:	1b29      	subs	r1, r5, r4
  4055fa:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
  4055fe:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  405602:	f021 010f 	bic.w	r1, r1, #15
  405606:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  40560a:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  40560e:	db07      	blt.n	405620 <_malloc_trim_r+0x3c>
  405610:	2100      	movs	r1, #0
  405612:	4630      	mov	r0, r6
  405614:	f001 f94e 	bl	4068b4 <_sbrk_r>
  405618:	68bb      	ldr	r3, [r7, #8]
  40561a:	442b      	add	r3, r5
  40561c:	4298      	cmp	r0, r3
  40561e:	d004      	beq.n	40562a <_malloc_trim_r+0x46>
  405620:	4630      	mov	r0, r6
  405622:	f000 ff55 	bl	4064d0 <__malloc_unlock>
  405626:	2000      	movs	r0, #0
  405628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40562a:	4261      	negs	r1, r4
  40562c:	4630      	mov	r0, r6
  40562e:	f001 f941 	bl	4068b4 <_sbrk_r>
  405632:	3001      	adds	r0, #1
  405634:	d00d      	beq.n	405652 <_malloc_trim_r+0x6e>
  405636:	4b10      	ldr	r3, [pc, #64]	; (405678 <_malloc_trim_r+0x94>)
  405638:	68ba      	ldr	r2, [r7, #8]
  40563a:	6819      	ldr	r1, [r3, #0]
  40563c:	1b2d      	subs	r5, r5, r4
  40563e:	f045 0501 	orr.w	r5, r5, #1
  405642:	4630      	mov	r0, r6
  405644:	1b09      	subs	r1, r1, r4
  405646:	6055      	str	r5, [r2, #4]
  405648:	6019      	str	r1, [r3, #0]
  40564a:	f000 ff41 	bl	4064d0 <__malloc_unlock>
  40564e:	2001      	movs	r0, #1
  405650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405652:	2100      	movs	r1, #0
  405654:	4630      	mov	r0, r6
  405656:	f001 f92d 	bl	4068b4 <_sbrk_r>
  40565a:	68ba      	ldr	r2, [r7, #8]
  40565c:	1a83      	subs	r3, r0, r2
  40565e:	2b0f      	cmp	r3, #15
  405660:	ddde      	ble.n	405620 <_malloc_trim_r+0x3c>
  405662:	4c06      	ldr	r4, [pc, #24]	; (40567c <_malloc_trim_r+0x98>)
  405664:	4904      	ldr	r1, [pc, #16]	; (405678 <_malloc_trim_r+0x94>)
  405666:	6824      	ldr	r4, [r4, #0]
  405668:	f043 0301 	orr.w	r3, r3, #1
  40566c:	1b00      	subs	r0, r0, r4
  40566e:	6053      	str	r3, [r2, #4]
  405670:	6008      	str	r0, [r1, #0]
  405672:	e7d5      	b.n	405620 <_malloc_trim_r+0x3c>
  405674:	20400488 	.word	0x20400488
  405678:	20400978 	.word	0x20400978
  40567c:	20400894 	.word	0x20400894

00405680 <_free_r>:
  405680:	2900      	cmp	r1, #0
  405682:	d045      	beq.n	405710 <_free_r+0x90>
  405684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405688:	460d      	mov	r5, r1
  40568a:	4680      	mov	r8, r0
  40568c:	f000 ff1e 	bl	4064cc <__malloc_lock>
  405690:	f855 7c04 	ldr.w	r7, [r5, #-4]
  405694:	496a      	ldr	r1, [pc, #424]	; (405840 <_free_r+0x1c0>)
  405696:	f027 0301 	bic.w	r3, r7, #1
  40569a:	f1a5 0408 	sub.w	r4, r5, #8
  40569e:	18e2      	adds	r2, r4, r3
  4056a0:	688e      	ldr	r6, [r1, #8]
  4056a2:	6850      	ldr	r0, [r2, #4]
  4056a4:	42b2      	cmp	r2, r6
  4056a6:	f020 0003 	bic.w	r0, r0, #3
  4056aa:	d062      	beq.n	405772 <_free_r+0xf2>
  4056ac:	07fe      	lsls	r6, r7, #31
  4056ae:	6050      	str	r0, [r2, #4]
  4056b0:	d40b      	bmi.n	4056ca <_free_r+0x4a>
  4056b2:	f855 7c08 	ldr.w	r7, [r5, #-8]
  4056b6:	1be4      	subs	r4, r4, r7
  4056b8:	f101 0e08 	add.w	lr, r1, #8
  4056bc:	68a5      	ldr	r5, [r4, #8]
  4056be:	4575      	cmp	r5, lr
  4056c0:	443b      	add	r3, r7
  4056c2:	d06f      	beq.n	4057a4 <_free_r+0x124>
  4056c4:	68e7      	ldr	r7, [r4, #12]
  4056c6:	60ef      	str	r7, [r5, #12]
  4056c8:	60bd      	str	r5, [r7, #8]
  4056ca:	1815      	adds	r5, r2, r0
  4056cc:	686d      	ldr	r5, [r5, #4]
  4056ce:	07ed      	lsls	r5, r5, #31
  4056d0:	d542      	bpl.n	405758 <_free_r+0xd8>
  4056d2:	f043 0201 	orr.w	r2, r3, #1
  4056d6:	6062      	str	r2, [r4, #4]
  4056d8:	50e3      	str	r3, [r4, r3]
  4056da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4056de:	d218      	bcs.n	405712 <_free_r+0x92>
  4056e0:	08db      	lsrs	r3, r3, #3
  4056e2:	1c5a      	adds	r2, r3, #1
  4056e4:	684d      	ldr	r5, [r1, #4]
  4056e6:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
  4056ea:	60a7      	str	r7, [r4, #8]
  4056ec:	2001      	movs	r0, #1
  4056ee:	109b      	asrs	r3, r3, #2
  4056f0:	fa00 f303 	lsl.w	r3, r0, r3
  4056f4:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
  4056f8:	431d      	orrs	r5, r3
  4056fa:	3808      	subs	r0, #8
  4056fc:	60e0      	str	r0, [r4, #12]
  4056fe:	604d      	str	r5, [r1, #4]
  405700:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
  405704:	60fc      	str	r4, [r7, #12]
  405706:	4640      	mov	r0, r8
  405708:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40570c:	f000 bee0 	b.w	4064d0 <__malloc_unlock>
  405710:	4770      	bx	lr
  405712:	0a5a      	lsrs	r2, r3, #9
  405714:	2a04      	cmp	r2, #4
  405716:	d853      	bhi.n	4057c0 <_free_r+0x140>
  405718:	099a      	lsrs	r2, r3, #6
  40571a:	f102 0739 	add.w	r7, r2, #57	; 0x39
  40571e:	007f      	lsls	r7, r7, #1
  405720:	f102 0538 	add.w	r5, r2, #56	; 0x38
  405724:	eb01 0087 	add.w	r0, r1, r7, lsl #2
  405728:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
  40572c:	4944      	ldr	r1, [pc, #272]	; (405840 <_free_r+0x1c0>)
  40572e:	3808      	subs	r0, #8
  405730:	4290      	cmp	r0, r2
  405732:	d04d      	beq.n	4057d0 <_free_r+0x150>
  405734:	6851      	ldr	r1, [r2, #4]
  405736:	f021 0103 	bic.w	r1, r1, #3
  40573a:	428b      	cmp	r3, r1
  40573c:	d202      	bcs.n	405744 <_free_r+0xc4>
  40573e:	6892      	ldr	r2, [r2, #8]
  405740:	4290      	cmp	r0, r2
  405742:	d1f7      	bne.n	405734 <_free_r+0xb4>
  405744:	68d0      	ldr	r0, [r2, #12]
  405746:	60e0      	str	r0, [r4, #12]
  405748:	60a2      	str	r2, [r4, #8]
  40574a:	6084      	str	r4, [r0, #8]
  40574c:	60d4      	str	r4, [r2, #12]
  40574e:	4640      	mov	r0, r8
  405750:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  405754:	f000 bebc 	b.w	4064d0 <__malloc_unlock>
  405758:	6895      	ldr	r5, [r2, #8]
  40575a:	4f3a      	ldr	r7, [pc, #232]	; (405844 <_free_r+0x1c4>)
  40575c:	42bd      	cmp	r5, r7
  40575e:	4403      	add	r3, r0
  405760:	d03f      	beq.n	4057e2 <_free_r+0x162>
  405762:	68d0      	ldr	r0, [r2, #12]
  405764:	60e8      	str	r0, [r5, #12]
  405766:	f043 0201 	orr.w	r2, r3, #1
  40576a:	6085      	str	r5, [r0, #8]
  40576c:	6062      	str	r2, [r4, #4]
  40576e:	50e3      	str	r3, [r4, r3]
  405770:	e7b3      	b.n	4056da <_free_r+0x5a>
  405772:	07ff      	lsls	r7, r7, #31
  405774:	4403      	add	r3, r0
  405776:	d407      	bmi.n	405788 <_free_r+0x108>
  405778:	f855 2c08 	ldr.w	r2, [r5, #-8]
  40577c:	1aa4      	subs	r4, r4, r2
  40577e:	4413      	add	r3, r2
  405780:	68a0      	ldr	r0, [r4, #8]
  405782:	68e2      	ldr	r2, [r4, #12]
  405784:	60c2      	str	r2, [r0, #12]
  405786:	6090      	str	r0, [r2, #8]
  405788:	4a2f      	ldr	r2, [pc, #188]	; (405848 <_free_r+0x1c8>)
  40578a:	6812      	ldr	r2, [r2, #0]
  40578c:	f043 0001 	orr.w	r0, r3, #1
  405790:	4293      	cmp	r3, r2
  405792:	6060      	str	r0, [r4, #4]
  405794:	608c      	str	r4, [r1, #8]
  405796:	d3b6      	bcc.n	405706 <_free_r+0x86>
  405798:	4b2c      	ldr	r3, [pc, #176]	; (40584c <_free_r+0x1cc>)
  40579a:	4640      	mov	r0, r8
  40579c:	6819      	ldr	r1, [r3, #0]
  40579e:	f7ff ff21 	bl	4055e4 <_malloc_trim_r>
  4057a2:	e7b0      	b.n	405706 <_free_r+0x86>
  4057a4:	1811      	adds	r1, r2, r0
  4057a6:	6849      	ldr	r1, [r1, #4]
  4057a8:	07c9      	lsls	r1, r1, #31
  4057aa:	d444      	bmi.n	405836 <_free_r+0x1b6>
  4057ac:	6891      	ldr	r1, [r2, #8]
  4057ae:	68d2      	ldr	r2, [r2, #12]
  4057b0:	60ca      	str	r2, [r1, #12]
  4057b2:	4403      	add	r3, r0
  4057b4:	f043 0001 	orr.w	r0, r3, #1
  4057b8:	6091      	str	r1, [r2, #8]
  4057ba:	6060      	str	r0, [r4, #4]
  4057bc:	50e3      	str	r3, [r4, r3]
  4057be:	e7a2      	b.n	405706 <_free_r+0x86>
  4057c0:	2a14      	cmp	r2, #20
  4057c2:	d817      	bhi.n	4057f4 <_free_r+0x174>
  4057c4:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  4057c8:	007f      	lsls	r7, r7, #1
  4057ca:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  4057ce:	e7a9      	b.n	405724 <_free_r+0xa4>
  4057d0:	10aa      	asrs	r2, r5, #2
  4057d2:	684b      	ldr	r3, [r1, #4]
  4057d4:	2501      	movs	r5, #1
  4057d6:	fa05 f202 	lsl.w	r2, r5, r2
  4057da:	4313      	orrs	r3, r2
  4057dc:	604b      	str	r3, [r1, #4]
  4057de:	4602      	mov	r2, r0
  4057e0:	e7b1      	b.n	405746 <_free_r+0xc6>
  4057e2:	f043 0201 	orr.w	r2, r3, #1
  4057e6:	614c      	str	r4, [r1, #20]
  4057e8:	610c      	str	r4, [r1, #16]
  4057ea:	60e5      	str	r5, [r4, #12]
  4057ec:	60a5      	str	r5, [r4, #8]
  4057ee:	6062      	str	r2, [r4, #4]
  4057f0:	50e3      	str	r3, [r4, r3]
  4057f2:	e788      	b.n	405706 <_free_r+0x86>
  4057f4:	2a54      	cmp	r2, #84	; 0x54
  4057f6:	d806      	bhi.n	405806 <_free_r+0x186>
  4057f8:	0b1a      	lsrs	r2, r3, #12
  4057fa:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  4057fe:	007f      	lsls	r7, r7, #1
  405800:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  405804:	e78e      	b.n	405724 <_free_r+0xa4>
  405806:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40580a:	d806      	bhi.n	40581a <_free_r+0x19a>
  40580c:	0bda      	lsrs	r2, r3, #15
  40580e:	f102 0778 	add.w	r7, r2, #120	; 0x78
  405812:	007f      	lsls	r7, r7, #1
  405814:	f102 0577 	add.w	r5, r2, #119	; 0x77
  405818:	e784      	b.n	405724 <_free_r+0xa4>
  40581a:	f240 5054 	movw	r0, #1364	; 0x554
  40581e:	4282      	cmp	r2, r0
  405820:	d806      	bhi.n	405830 <_free_r+0x1b0>
  405822:	0c9a      	lsrs	r2, r3, #18
  405824:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  405828:	007f      	lsls	r7, r7, #1
  40582a:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  40582e:	e779      	b.n	405724 <_free_r+0xa4>
  405830:	27fe      	movs	r7, #254	; 0xfe
  405832:	257e      	movs	r5, #126	; 0x7e
  405834:	e776      	b.n	405724 <_free_r+0xa4>
  405836:	f043 0201 	orr.w	r2, r3, #1
  40583a:	6062      	str	r2, [r4, #4]
  40583c:	50e3      	str	r3, [r4, r3]
  40583e:	e762      	b.n	405706 <_free_r+0x86>
  405840:	20400488 	.word	0x20400488
  405844:	20400490 	.word	0x20400490
  405848:	20400890 	.word	0x20400890
  40584c:	20400974 	.word	0x20400974

00405850 <__sfvwrite_r>:
  405850:	6893      	ldr	r3, [r2, #8]
  405852:	2b00      	cmp	r3, #0
  405854:	d076      	beq.n	405944 <__sfvwrite_r+0xf4>
  405856:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40585a:	898b      	ldrh	r3, [r1, #12]
  40585c:	b085      	sub	sp, #20
  40585e:	460c      	mov	r4, r1
  405860:	0719      	lsls	r1, r3, #28
  405862:	9001      	str	r0, [sp, #4]
  405864:	4616      	mov	r6, r2
  405866:	d529      	bpl.n	4058bc <__sfvwrite_r+0x6c>
  405868:	6922      	ldr	r2, [r4, #16]
  40586a:	b33a      	cbz	r2, 4058bc <__sfvwrite_r+0x6c>
  40586c:	f003 0802 	and.w	r8, r3, #2
  405870:	fa1f f088 	uxth.w	r0, r8
  405874:	6835      	ldr	r5, [r6, #0]
  405876:	2800      	cmp	r0, #0
  405878:	d02f      	beq.n	4058da <__sfvwrite_r+0x8a>
  40587a:	f04f 0900 	mov.w	r9, #0
  40587e:	4fb4      	ldr	r7, [pc, #720]	; (405b50 <__sfvwrite_r+0x300>)
  405880:	46c8      	mov	r8, r9
  405882:	46b2      	mov	sl, r6
  405884:	45b8      	cmp	r8, r7
  405886:	4643      	mov	r3, r8
  405888:	464a      	mov	r2, r9
  40588a:	bf28      	it	cs
  40588c:	463b      	movcs	r3, r7
  40588e:	9801      	ldr	r0, [sp, #4]
  405890:	f1b8 0f00 	cmp.w	r8, #0
  405894:	d050      	beq.n	405938 <__sfvwrite_r+0xe8>
  405896:	69e1      	ldr	r1, [r4, #28]
  405898:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40589a:	47b0      	blx	r6
  40589c:	2800      	cmp	r0, #0
  40589e:	dd71      	ble.n	405984 <__sfvwrite_r+0x134>
  4058a0:	f8da 3008 	ldr.w	r3, [sl, #8]
  4058a4:	1a1b      	subs	r3, r3, r0
  4058a6:	4481      	add	r9, r0
  4058a8:	ebc0 0808 	rsb	r8, r0, r8
  4058ac:	f8ca 3008 	str.w	r3, [sl, #8]
  4058b0:	2b00      	cmp	r3, #0
  4058b2:	d1e7      	bne.n	405884 <__sfvwrite_r+0x34>
  4058b4:	2000      	movs	r0, #0
  4058b6:	b005      	add	sp, #20
  4058b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4058bc:	4621      	mov	r1, r4
  4058be:	9801      	ldr	r0, [sp, #4]
  4058c0:	f7ff fc68 	bl	405194 <__swsetup_r>
  4058c4:	2800      	cmp	r0, #0
  4058c6:	f040 813a 	bne.w	405b3e <__sfvwrite_r+0x2ee>
  4058ca:	89a3      	ldrh	r3, [r4, #12]
  4058cc:	6835      	ldr	r5, [r6, #0]
  4058ce:	f003 0802 	and.w	r8, r3, #2
  4058d2:	fa1f f088 	uxth.w	r0, r8
  4058d6:	2800      	cmp	r0, #0
  4058d8:	d1cf      	bne.n	40587a <__sfvwrite_r+0x2a>
  4058da:	f013 0901 	ands.w	r9, r3, #1
  4058de:	d15b      	bne.n	405998 <__sfvwrite_r+0x148>
  4058e0:	464f      	mov	r7, r9
  4058e2:	9602      	str	r6, [sp, #8]
  4058e4:	b31f      	cbz	r7, 40592e <__sfvwrite_r+0xde>
  4058e6:	059a      	lsls	r2, r3, #22
  4058e8:	f8d4 8008 	ldr.w	r8, [r4, #8]
  4058ec:	d52c      	bpl.n	405948 <__sfvwrite_r+0xf8>
  4058ee:	4547      	cmp	r7, r8
  4058f0:	46c2      	mov	sl, r8
  4058f2:	f0c0 80a4 	bcc.w	405a3e <__sfvwrite_r+0x1ee>
  4058f6:	f413 6f90 	tst.w	r3, #1152	; 0x480
  4058fa:	f040 80b1 	bne.w	405a60 <__sfvwrite_r+0x210>
  4058fe:	6820      	ldr	r0, [r4, #0]
  405900:	4652      	mov	r2, sl
  405902:	4649      	mov	r1, r9
  405904:	f000 fd7e 	bl	406404 <memmove>
  405908:	68a0      	ldr	r0, [r4, #8]
  40590a:	6823      	ldr	r3, [r4, #0]
  40590c:	ebc8 0000 	rsb	r0, r8, r0
  405910:	4453      	add	r3, sl
  405912:	60a0      	str	r0, [r4, #8]
  405914:	6023      	str	r3, [r4, #0]
  405916:	4638      	mov	r0, r7
  405918:	9a02      	ldr	r2, [sp, #8]
  40591a:	6893      	ldr	r3, [r2, #8]
  40591c:	1a1b      	subs	r3, r3, r0
  40591e:	4481      	add	r9, r0
  405920:	1a3f      	subs	r7, r7, r0
  405922:	6093      	str	r3, [r2, #8]
  405924:	2b00      	cmp	r3, #0
  405926:	d0c5      	beq.n	4058b4 <__sfvwrite_r+0x64>
  405928:	89a3      	ldrh	r3, [r4, #12]
  40592a:	2f00      	cmp	r7, #0
  40592c:	d1db      	bne.n	4058e6 <__sfvwrite_r+0x96>
  40592e:	f8d5 9000 	ldr.w	r9, [r5]
  405932:	686f      	ldr	r7, [r5, #4]
  405934:	3508      	adds	r5, #8
  405936:	e7d5      	b.n	4058e4 <__sfvwrite_r+0x94>
  405938:	f8d5 9000 	ldr.w	r9, [r5]
  40593c:	f8d5 8004 	ldr.w	r8, [r5, #4]
  405940:	3508      	adds	r5, #8
  405942:	e79f      	b.n	405884 <__sfvwrite_r+0x34>
  405944:	2000      	movs	r0, #0
  405946:	4770      	bx	lr
  405948:	6820      	ldr	r0, [r4, #0]
  40594a:	6923      	ldr	r3, [r4, #16]
  40594c:	4298      	cmp	r0, r3
  40594e:	d803      	bhi.n	405958 <__sfvwrite_r+0x108>
  405950:	6961      	ldr	r1, [r4, #20]
  405952:	428f      	cmp	r7, r1
  405954:	f080 80b7 	bcs.w	405ac6 <__sfvwrite_r+0x276>
  405958:	45b8      	cmp	r8, r7
  40595a:	bf28      	it	cs
  40595c:	46b8      	movcs	r8, r7
  40595e:	4642      	mov	r2, r8
  405960:	4649      	mov	r1, r9
  405962:	f000 fd4f 	bl	406404 <memmove>
  405966:	68a3      	ldr	r3, [r4, #8]
  405968:	6822      	ldr	r2, [r4, #0]
  40596a:	ebc8 0303 	rsb	r3, r8, r3
  40596e:	4442      	add	r2, r8
  405970:	60a3      	str	r3, [r4, #8]
  405972:	6022      	str	r2, [r4, #0]
  405974:	2b00      	cmp	r3, #0
  405976:	d149      	bne.n	405a0c <__sfvwrite_r+0x1bc>
  405978:	4621      	mov	r1, r4
  40597a:	9801      	ldr	r0, [sp, #4]
  40597c:	f7ff fd22 	bl	4053c4 <_fflush_r>
  405980:	2800      	cmp	r0, #0
  405982:	d043      	beq.n	405a0c <__sfvwrite_r+0x1bc>
  405984:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405988:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40598c:	f04f 30ff 	mov.w	r0, #4294967295
  405990:	81a3      	strh	r3, [r4, #12]
  405992:	b005      	add	sp, #20
  405994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405998:	4680      	mov	r8, r0
  40599a:	9002      	str	r0, [sp, #8]
  40599c:	4682      	mov	sl, r0
  40599e:	4681      	mov	r9, r0
  4059a0:	f1b9 0f00 	cmp.w	r9, #0
  4059a4:	d02a      	beq.n	4059fc <__sfvwrite_r+0x1ac>
  4059a6:	9b02      	ldr	r3, [sp, #8]
  4059a8:	2b00      	cmp	r3, #0
  4059aa:	d04c      	beq.n	405a46 <__sfvwrite_r+0x1f6>
  4059ac:	6820      	ldr	r0, [r4, #0]
  4059ae:	6923      	ldr	r3, [r4, #16]
  4059b0:	6962      	ldr	r2, [r4, #20]
  4059b2:	45c8      	cmp	r8, r9
  4059b4:	46c3      	mov	fp, r8
  4059b6:	bf28      	it	cs
  4059b8:	46cb      	movcs	fp, r9
  4059ba:	4298      	cmp	r0, r3
  4059bc:	465f      	mov	r7, fp
  4059be:	d904      	bls.n	4059ca <__sfvwrite_r+0x17a>
  4059c0:	68a3      	ldr	r3, [r4, #8]
  4059c2:	4413      	add	r3, r2
  4059c4:	459b      	cmp	fp, r3
  4059c6:	f300 8090 	bgt.w	405aea <__sfvwrite_r+0x29a>
  4059ca:	4593      	cmp	fp, r2
  4059cc:	db20      	blt.n	405a10 <__sfvwrite_r+0x1c0>
  4059ce:	4613      	mov	r3, r2
  4059d0:	6a67      	ldr	r7, [r4, #36]	; 0x24
  4059d2:	69e1      	ldr	r1, [r4, #28]
  4059d4:	9801      	ldr	r0, [sp, #4]
  4059d6:	4652      	mov	r2, sl
  4059d8:	47b8      	blx	r7
  4059da:	1e07      	subs	r7, r0, #0
  4059dc:	ddd2      	ble.n	405984 <__sfvwrite_r+0x134>
  4059de:	ebb8 0807 	subs.w	r8, r8, r7
  4059e2:	d023      	beq.n	405a2c <__sfvwrite_r+0x1dc>
  4059e4:	68b3      	ldr	r3, [r6, #8]
  4059e6:	1bdb      	subs	r3, r3, r7
  4059e8:	44ba      	add	sl, r7
  4059ea:	ebc7 0909 	rsb	r9, r7, r9
  4059ee:	60b3      	str	r3, [r6, #8]
  4059f0:	2b00      	cmp	r3, #0
  4059f2:	f43f af5f 	beq.w	4058b4 <__sfvwrite_r+0x64>
  4059f6:	f1b9 0f00 	cmp.w	r9, #0
  4059fa:	d1d4      	bne.n	4059a6 <__sfvwrite_r+0x156>
  4059fc:	2300      	movs	r3, #0
  4059fe:	f8d5 a000 	ldr.w	sl, [r5]
  405a02:	f8d5 9004 	ldr.w	r9, [r5, #4]
  405a06:	9302      	str	r3, [sp, #8]
  405a08:	3508      	adds	r5, #8
  405a0a:	e7c9      	b.n	4059a0 <__sfvwrite_r+0x150>
  405a0c:	4640      	mov	r0, r8
  405a0e:	e783      	b.n	405918 <__sfvwrite_r+0xc8>
  405a10:	465a      	mov	r2, fp
  405a12:	4651      	mov	r1, sl
  405a14:	f000 fcf6 	bl	406404 <memmove>
  405a18:	68a2      	ldr	r2, [r4, #8]
  405a1a:	6823      	ldr	r3, [r4, #0]
  405a1c:	ebcb 0202 	rsb	r2, fp, r2
  405a20:	445b      	add	r3, fp
  405a22:	ebb8 0807 	subs.w	r8, r8, r7
  405a26:	60a2      	str	r2, [r4, #8]
  405a28:	6023      	str	r3, [r4, #0]
  405a2a:	d1db      	bne.n	4059e4 <__sfvwrite_r+0x194>
  405a2c:	4621      	mov	r1, r4
  405a2e:	9801      	ldr	r0, [sp, #4]
  405a30:	f7ff fcc8 	bl	4053c4 <_fflush_r>
  405a34:	2800      	cmp	r0, #0
  405a36:	d1a5      	bne.n	405984 <__sfvwrite_r+0x134>
  405a38:	f8cd 8008 	str.w	r8, [sp, #8]
  405a3c:	e7d2      	b.n	4059e4 <__sfvwrite_r+0x194>
  405a3e:	6820      	ldr	r0, [r4, #0]
  405a40:	46b8      	mov	r8, r7
  405a42:	46ba      	mov	sl, r7
  405a44:	e75c      	b.n	405900 <__sfvwrite_r+0xb0>
  405a46:	464a      	mov	r2, r9
  405a48:	210a      	movs	r1, #10
  405a4a:	4650      	mov	r0, sl
  405a4c:	f000 fbf0 	bl	406230 <memchr>
  405a50:	2800      	cmp	r0, #0
  405a52:	d06f      	beq.n	405b34 <__sfvwrite_r+0x2e4>
  405a54:	3001      	adds	r0, #1
  405a56:	2301      	movs	r3, #1
  405a58:	ebca 0800 	rsb	r8, sl, r0
  405a5c:	9302      	str	r3, [sp, #8]
  405a5e:	e7a5      	b.n	4059ac <__sfvwrite_r+0x15c>
  405a60:	6962      	ldr	r2, [r4, #20]
  405a62:	6820      	ldr	r0, [r4, #0]
  405a64:	6921      	ldr	r1, [r4, #16]
  405a66:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  405a6a:	ebc1 0a00 	rsb	sl, r1, r0
  405a6e:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  405a72:	f10a 0001 	add.w	r0, sl, #1
  405a76:	ea4f 0868 	mov.w	r8, r8, asr #1
  405a7a:	4438      	add	r0, r7
  405a7c:	4540      	cmp	r0, r8
  405a7e:	4642      	mov	r2, r8
  405a80:	bf84      	itt	hi
  405a82:	4680      	movhi	r8, r0
  405a84:	4642      	movhi	r2, r8
  405a86:	055b      	lsls	r3, r3, #21
  405a88:	d542      	bpl.n	405b10 <__sfvwrite_r+0x2c0>
  405a8a:	4611      	mov	r1, r2
  405a8c:	9801      	ldr	r0, [sp, #4]
  405a8e:	f000 f911 	bl	405cb4 <_malloc_r>
  405a92:	4683      	mov	fp, r0
  405a94:	2800      	cmp	r0, #0
  405a96:	d055      	beq.n	405b44 <__sfvwrite_r+0x2f4>
  405a98:	4652      	mov	r2, sl
  405a9a:	6921      	ldr	r1, [r4, #16]
  405a9c:	f000 fc18 	bl	4062d0 <memcpy>
  405aa0:	89a3      	ldrh	r3, [r4, #12]
  405aa2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  405aa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  405aaa:	81a3      	strh	r3, [r4, #12]
  405aac:	ebca 0308 	rsb	r3, sl, r8
  405ab0:	eb0b 000a 	add.w	r0, fp, sl
  405ab4:	f8c4 8014 	str.w	r8, [r4, #20]
  405ab8:	f8c4 b010 	str.w	fp, [r4, #16]
  405abc:	6020      	str	r0, [r4, #0]
  405abe:	60a3      	str	r3, [r4, #8]
  405ac0:	46b8      	mov	r8, r7
  405ac2:	46ba      	mov	sl, r7
  405ac4:	e71c      	b.n	405900 <__sfvwrite_r+0xb0>
  405ac6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  405aca:	42bb      	cmp	r3, r7
  405acc:	bf28      	it	cs
  405ace:	463b      	movcs	r3, r7
  405ad0:	464a      	mov	r2, r9
  405ad2:	fb93 f3f1 	sdiv	r3, r3, r1
  405ad6:	9801      	ldr	r0, [sp, #4]
  405ad8:	6a66      	ldr	r6, [r4, #36]	; 0x24
  405ada:	fb01 f303 	mul.w	r3, r1, r3
  405ade:	69e1      	ldr	r1, [r4, #28]
  405ae0:	47b0      	blx	r6
  405ae2:	2800      	cmp	r0, #0
  405ae4:	f73f af18 	bgt.w	405918 <__sfvwrite_r+0xc8>
  405ae8:	e74c      	b.n	405984 <__sfvwrite_r+0x134>
  405aea:	461a      	mov	r2, r3
  405aec:	4651      	mov	r1, sl
  405aee:	9303      	str	r3, [sp, #12]
  405af0:	f000 fc88 	bl	406404 <memmove>
  405af4:	6822      	ldr	r2, [r4, #0]
  405af6:	9b03      	ldr	r3, [sp, #12]
  405af8:	9801      	ldr	r0, [sp, #4]
  405afa:	441a      	add	r2, r3
  405afc:	6022      	str	r2, [r4, #0]
  405afe:	4621      	mov	r1, r4
  405b00:	f7ff fc60 	bl	4053c4 <_fflush_r>
  405b04:	9b03      	ldr	r3, [sp, #12]
  405b06:	2800      	cmp	r0, #0
  405b08:	f47f af3c 	bne.w	405984 <__sfvwrite_r+0x134>
  405b0c:	461f      	mov	r7, r3
  405b0e:	e766      	b.n	4059de <__sfvwrite_r+0x18e>
  405b10:	9801      	ldr	r0, [sp, #4]
  405b12:	f000 fcdf 	bl	4064d4 <_realloc_r>
  405b16:	4683      	mov	fp, r0
  405b18:	2800      	cmp	r0, #0
  405b1a:	d1c7      	bne.n	405aac <__sfvwrite_r+0x25c>
  405b1c:	9d01      	ldr	r5, [sp, #4]
  405b1e:	6921      	ldr	r1, [r4, #16]
  405b20:	4628      	mov	r0, r5
  405b22:	f7ff fdad 	bl	405680 <_free_r>
  405b26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405b2a:	220c      	movs	r2, #12
  405b2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  405b30:	602a      	str	r2, [r5, #0]
  405b32:	e729      	b.n	405988 <__sfvwrite_r+0x138>
  405b34:	2301      	movs	r3, #1
  405b36:	f109 0801 	add.w	r8, r9, #1
  405b3a:	9302      	str	r3, [sp, #8]
  405b3c:	e736      	b.n	4059ac <__sfvwrite_r+0x15c>
  405b3e:	f04f 30ff 	mov.w	r0, #4294967295
  405b42:	e6b8      	b.n	4058b6 <__sfvwrite_r+0x66>
  405b44:	9a01      	ldr	r2, [sp, #4]
  405b46:	230c      	movs	r3, #12
  405b48:	6013      	str	r3, [r2, #0]
  405b4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405b4e:	e71b      	b.n	405988 <__sfvwrite_r+0x138>
  405b50:	7ffffc00 	.word	0x7ffffc00

00405b54 <_fwalk_reent>:
  405b54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  405b58:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  405b5c:	d01f      	beq.n	405b9e <_fwalk_reent+0x4a>
  405b5e:	4688      	mov	r8, r1
  405b60:	4606      	mov	r6, r0
  405b62:	f04f 0900 	mov.w	r9, #0
  405b66:	687d      	ldr	r5, [r7, #4]
  405b68:	68bc      	ldr	r4, [r7, #8]
  405b6a:	3d01      	subs	r5, #1
  405b6c:	d411      	bmi.n	405b92 <_fwalk_reent+0x3e>
  405b6e:	89a3      	ldrh	r3, [r4, #12]
  405b70:	2b01      	cmp	r3, #1
  405b72:	f105 35ff 	add.w	r5, r5, #4294967295
  405b76:	d908      	bls.n	405b8a <_fwalk_reent+0x36>
  405b78:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  405b7c:	3301      	adds	r3, #1
  405b7e:	4621      	mov	r1, r4
  405b80:	4630      	mov	r0, r6
  405b82:	d002      	beq.n	405b8a <_fwalk_reent+0x36>
  405b84:	47c0      	blx	r8
  405b86:	ea49 0900 	orr.w	r9, r9, r0
  405b8a:	1c6b      	adds	r3, r5, #1
  405b8c:	f104 0468 	add.w	r4, r4, #104	; 0x68
  405b90:	d1ed      	bne.n	405b6e <_fwalk_reent+0x1a>
  405b92:	683f      	ldr	r7, [r7, #0]
  405b94:	2f00      	cmp	r7, #0
  405b96:	d1e6      	bne.n	405b66 <_fwalk_reent+0x12>
  405b98:	4648      	mov	r0, r9
  405b9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405b9e:	46b9      	mov	r9, r7
  405ba0:	4648      	mov	r0, r9
  405ba2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405ba6:	bf00      	nop

00405ba8 <__locale_charset>:
  405ba8:	4800      	ldr	r0, [pc, #0]	; (405bac <__locale_charset+0x4>)
  405baa:	4770      	bx	lr
  405bac:	20400464 	.word	0x20400464

00405bb0 <__locale_mb_cur_max>:
  405bb0:	4b01      	ldr	r3, [pc, #4]	; (405bb8 <__locale_mb_cur_max+0x8>)
  405bb2:	6818      	ldr	r0, [r3, #0]
  405bb4:	4770      	bx	lr
  405bb6:	bf00      	nop
  405bb8:	20400484 	.word	0x20400484

00405bbc <__swhatbuf_r>:
  405bbc:	b570      	push	{r4, r5, r6, lr}
  405bbe:	460d      	mov	r5, r1
  405bc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405bc4:	2900      	cmp	r1, #0
  405bc6:	b090      	sub	sp, #64	; 0x40
  405bc8:	4614      	mov	r4, r2
  405bca:	461e      	mov	r6, r3
  405bcc:	db14      	blt.n	405bf8 <__swhatbuf_r+0x3c>
  405bce:	aa01      	add	r2, sp, #4
  405bd0:	f001 f88e 	bl	406cf0 <_fstat_r>
  405bd4:	2800      	cmp	r0, #0
  405bd6:	db0f      	blt.n	405bf8 <__swhatbuf_r+0x3c>
  405bd8:	9a02      	ldr	r2, [sp, #8]
  405bda:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  405bde:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  405be2:	fab2 f282 	clz	r2, r2
  405be6:	0952      	lsrs	r2, r2, #5
  405be8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  405bec:	f44f 6000 	mov.w	r0, #2048	; 0x800
  405bf0:	6032      	str	r2, [r6, #0]
  405bf2:	6023      	str	r3, [r4, #0]
  405bf4:	b010      	add	sp, #64	; 0x40
  405bf6:	bd70      	pop	{r4, r5, r6, pc}
  405bf8:	89a8      	ldrh	r0, [r5, #12]
  405bfa:	f000 0080 	and.w	r0, r0, #128	; 0x80
  405bfe:	b282      	uxth	r2, r0
  405c00:	2000      	movs	r0, #0
  405c02:	6030      	str	r0, [r6, #0]
  405c04:	b11a      	cbz	r2, 405c0e <__swhatbuf_r+0x52>
  405c06:	2340      	movs	r3, #64	; 0x40
  405c08:	6023      	str	r3, [r4, #0]
  405c0a:	b010      	add	sp, #64	; 0x40
  405c0c:	bd70      	pop	{r4, r5, r6, pc}
  405c0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  405c12:	4610      	mov	r0, r2
  405c14:	6023      	str	r3, [r4, #0]
  405c16:	b010      	add	sp, #64	; 0x40
  405c18:	bd70      	pop	{r4, r5, r6, pc}
  405c1a:	bf00      	nop

00405c1c <__smakebuf_r>:
  405c1c:	898a      	ldrh	r2, [r1, #12]
  405c1e:	0792      	lsls	r2, r2, #30
  405c20:	460b      	mov	r3, r1
  405c22:	d506      	bpl.n	405c32 <__smakebuf_r+0x16>
  405c24:	f101 0243 	add.w	r2, r1, #67	; 0x43
  405c28:	2101      	movs	r1, #1
  405c2a:	601a      	str	r2, [r3, #0]
  405c2c:	611a      	str	r2, [r3, #16]
  405c2e:	6159      	str	r1, [r3, #20]
  405c30:	4770      	bx	lr
  405c32:	b5f0      	push	{r4, r5, r6, r7, lr}
  405c34:	b083      	sub	sp, #12
  405c36:	ab01      	add	r3, sp, #4
  405c38:	466a      	mov	r2, sp
  405c3a:	460c      	mov	r4, r1
  405c3c:	4605      	mov	r5, r0
  405c3e:	f7ff ffbd 	bl	405bbc <__swhatbuf_r>
  405c42:	9900      	ldr	r1, [sp, #0]
  405c44:	4606      	mov	r6, r0
  405c46:	4628      	mov	r0, r5
  405c48:	f000 f834 	bl	405cb4 <_malloc_r>
  405c4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405c50:	b1d0      	cbz	r0, 405c88 <__smakebuf_r+0x6c>
  405c52:	9a01      	ldr	r2, [sp, #4]
  405c54:	4f12      	ldr	r7, [pc, #72]	; (405ca0 <__smakebuf_r+0x84>)
  405c56:	9900      	ldr	r1, [sp, #0]
  405c58:	63ef      	str	r7, [r5, #60]	; 0x3c
  405c5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  405c5e:	81a3      	strh	r3, [r4, #12]
  405c60:	6020      	str	r0, [r4, #0]
  405c62:	6120      	str	r0, [r4, #16]
  405c64:	6161      	str	r1, [r4, #20]
  405c66:	b91a      	cbnz	r2, 405c70 <__smakebuf_r+0x54>
  405c68:	4333      	orrs	r3, r6
  405c6a:	81a3      	strh	r3, [r4, #12]
  405c6c:	b003      	add	sp, #12
  405c6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405c70:	4628      	mov	r0, r5
  405c72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  405c76:	f001 f84f 	bl	406d18 <_isatty_r>
  405c7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405c7e:	2800      	cmp	r0, #0
  405c80:	d0f2      	beq.n	405c68 <__smakebuf_r+0x4c>
  405c82:	f043 0301 	orr.w	r3, r3, #1
  405c86:	e7ef      	b.n	405c68 <__smakebuf_r+0x4c>
  405c88:	059a      	lsls	r2, r3, #22
  405c8a:	d4ef      	bmi.n	405c6c <__smakebuf_r+0x50>
  405c8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
  405c90:	f043 0302 	orr.w	r3, r3, #2
  405c94:	2101      	movs	r1, #1
  405c96:	81a3      	strh	r3, [r4, #12]
  405c98:	6022      	str	r2, [r4, #0]
  405c9a:	6122      	str	r2, [r4, #16]
  405c9c:	6161      	str	r1, [r4, #20]
  405c9e:	e7e5      	b.n	405c6c <__smakebuf_r+0x50>
  405ca0:	004053f1 	.word	0x004053f1

00405ca4 <malloc>:
  405ca4:	4b02      	ldr	r3, [pc, #8]	; (405cb0 <malloc+0xc>)
  405ca6:	4601      	mov	r1, r0
  405ca8:	6818      	ldr	r0, [r3, #0]
  405caa:	f000 b803 	b.w	405cb4 <_malloc_r>
  405cae:	bf00      	nop
  405cb0:	20400460 	.word	0x20400460

00405cb4 <_malloc_r>:
  405cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405cb8:	f101 050b 	add.w	r5, r1, #11
  405cbc:	2d16      	cmp	r5, #22
  405cbe:	b083      	sub	sp, #12
  405cc0:	4606      	mov	r6, r0
  405cc2:	f240 809f 	bls.w	405e04 <_malloc_r+0x150>
  405cc6:	f035 0507 	bics.w	r5, r5, #7
  405cca:	f100 80bf 	bmi.w	405e4c <_malloc_r+0x198>
  405cce:	42a9      	cmp	r1, r5
  405cd0:	f200 80bc 	bhi.w	405e4c <_malloc_r+0x198>
  405cd4:	f000 fbfa 	bl	4064cc <__malloc_lock>
  405cd8:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
  405cdc:	f0c0 829c 	bcc.w	406218 <_malloc_r+0x564>
  405ce0:	0a6b      	lsrs	r3, r5, #9
  405ce2:	f000 80ba 	beq.w	405e5a <_malloc_r+0x1a6>
  405ce6:	2b04      	cmp	r3, #4
  405ce8:	f200 8183 	bhi.w	405ff2 <_malloc_r+0x33e>
  405cec:	09a8      	lsrs	r0, r5, #6
  405cee:	f100 0e39 	add.w	lr, r0, #57	; 0x39
  405cf2:	ea4f 034e 	mov.w	r3, lr, lsl #1
  405cf6:	3038      	adds	r0, #56	; 0x38
  405cf8:	4fc4      	ldr	r7, [pc, #784]	; (40600c <_malloc_r+0x358>)
  405cfa:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  405cfe:	f1a3 0108 	sub.w	r1, r3, #8
  405d02:	685c      	ldr	r4, [r3, #4]
  405d04:	42a1      	cmp	r1, r4
  405d06:	d107      	bne.n	405d18 <_malloc_r+0x64>
  405d08:	e0ac      	b.n	405e64 <_malloc_r+0x1b0>
  405d0a:	2a00      	cmp	r2, #0
  405d0c:	f280 80ac 	bge.w	405e68 <_malloc_r+0x1b4>
  405d10:	68e4      	ldr	r4, [r4, #12]
  405d12:	42a1      	cmp	r1, r4
  405d14:	f000 80a6 	beq.w	405e64 <_malloc_r+0x1b0>
  405d18:	6863      	ldr	r3, [r4, #4]
  405d1a:	f023 0303 	bic.w	r3, r3, #3
  405d1e:	1b5a      	subs	r2, r3, r5
  405d20:	2a0f      	cmp	r2, #15
  405d22:	ddf2      	ble.n	405d0a <_malloc_r+0x56>
  405d24:	49b9      	ldr	r1, [pc, #740]	; (40600c <_malloc_r+0x358>)
  405d26:	693c      	ldr	r4, [r7, #16]
  405d28:	f101 0e08 	add.w	lr, r1, #8
  405d2c:	4574      	cmp	r4, lr
  405d2e:	f000 81b3 	beq.w	406098 <_malloc_r+0x3e4>
  405d32:	6863      	ldr	r3, [r4, #4]
  405d34:	f023 0303 	bic.w	r3, r3, #3
  405d38:	1b5a      	subs	r2, r3, r5
  405d3a:	2a0f      	cmp	r2, #15
  405d3c:	f300 8199 	bgt.w	406072 <_malloc_r+0x3be>
  405d40:	2a00      	cmp	r2, #0
  405d42:	f8c1 e014 	str.w	lr, [r1, #20]
  405d46:	f8c1 e010 	str.w	lr, [r1, #16]
  405d4a:	f280 809e 	bge.w	405e8a <_malloc_r+0x1d6>
  405d4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405d52:	f080 8167 	bcs.w	406024 <_malloc_r+0x370>
  405d56:	08db      	lsrs	r3, r3, #3
  405d58:	f103 0c01 	add.w	ip, r3, #1
  405d5c:	2201      	movs	r2, #1
  405d5e:	109b      	asrs	r3, r3, #2
  405d60:	fa02 f303 	lsl.w	r3, r2, r3
  405d64:	684a      	ldr	r2, [r1, #4]
  405d66:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
  405d6a:	f8c4 8008 	str.w	r8, [r4, #8]
  405d6e:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
  405d72:	431a      	orrs	r2, r3
  405d74:	f1a9 0308 	sub.w	r3, r9, #8
  405d78:	60e3      	str	r3, [r4, #12]
  405d7a:	604a      	str	r2, [r1, #4]
  405d7c:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
  405d80:	f8c8 400c 	str.w	r4, [r8, #12]
  405d84:	1083      	asrs	r3, r0, #2
  405d86:	2401      	movs	r4, #1
  405d88:	409c      	lsls	r4, r3
  405d8a:	4294      	cmp	r4, r2
  405d8c:	f200 808a 	bhi.w	405ea4 <_malloc_r+0x1f0>
  405d90:	4214      	tst	r4, r2
  405d92:	d106      	bne.n	405da2 <_malloc_r+0xee>
  405d94:	f020 0003 	bic.w	r0, r0, #3
  405d98:	0064      	lsls	r4, r4, #1
  405d9a:	4214      	tst	r4, r2
  405d9c:	f100 0004 	add.w	r0, r0, #4
  405da0:	d0fa      	beq.n	405d98 <_malloc_r+0xe4>
  405da2:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  405da6:	46cc      	mov	ip, r9
  405da8:	4680      	mov	r8, r0
  405daa:	f8dc 100c 	ldr.w	r1, [ip, #12]
  405dae:	458c      	cmp	ip, r1
  405db0:	d107      	bne.n	405dc2 <_malloc_r+0x10e>
  405db2:	e173      	b.n	40609c <_malloc_r+0x3e8>
  405db4:	2a00      	cmp	r2, #0
  405db6:	f280 8181 	bge.w	4060bc <_malloc_r+0x408>
  405dba:	68c9      	ldr	r1, [r1, #12]
  405dbc:	458c      	cmp	ip, r1
  405dbe:	f000 816d 	beq.w	40609c <_malloc_r+0x3e8>
  405dc2:	684b      	ldr	r3, [r1, #4]
  405dc4:	f023 0303 	bic.w	r3, r3, #3
  405dc8:	1b5a      	subs	r2, r3, r5
  405dca:	2a0f      	cmp	r2, #15
  405dcc:	ddf2      	ble.n	405db4 <_malloc_r+0x100>
  405dce:	460c      	mov	r4, r1
  405dd0:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  405dd4:	f854 8f08 	ldr.w	r8, [r4, #8]!
  405dd8:	194b      	adds	r3, r1, r5
  405dda:	f045 0501 	orr.w	r5, r5, #1
  405dde:	604d      	str	r5, [r1, #4]
  405de0:	f042 0101 	orr.w	r1, r2, #1
  405de4:	f8c8 c00c 	str.w	ip, [r8, #12]
  405de8:	4630      	mov	r0, r6
  405dea:	f8cc 8008 	str.w	r8, [ip, #8]
  405dee:	617b      	str	r3, [r7, #20]
  405df0:	613b      	str	r3, [r7, #16]
  405df2:	f8c3 e00c 	str.w	lr, [r3, #12]
  405df6:	f8c3 e008 	str.w	lr, [r3, #8]
  405dfa:	6059      	str	r1, [r3, #4]
  405dfc:	509a      	str	r2, [r3, r2]
  405dfe:	f000 fb67 	bl	4064d0 <__malloc_unlock>
  405e02:	e01f      	b.n	405e44 <_malloc_r+0x190>
  405e04:	2910      	cmp	r1, #16
  405e06:	d821      	bhi.n	405e4c <_malloc_r+0x198>
  405e08:	f000 fb60 	bl	4064cc <__malloc_lock>
  405e0c:	2510      	movs	r5, #16
  405e0e:	2306      	movs	r3, #6
  405e10:	2002      	movs	r0, #2
  405e12:	4f7e      	ldr	r7, [pc, #504]	; (40600c <_malloc_r+0x358>)
  405e14:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  405e18:	f1a3 0208 	sub.w	r2, r3, #8
  405e1c:	685c      	ldr	r4, [r3, #4]
  405e1e:	4294      	cmp	r4, r2
  405e20:	f000 8145 	beq.w	4060ae <_malloc_r+0x3fa>
  405e24:	6863      	ldr	r3, [r4, #4]
  405e26:	68e1      	ldr	r1, [r4, #12]
  405e28:	68a5      	ldr	r5, [r4, #8]
  405e2a:	f023 0303 	bic.w	r3, r3, #3
  405e2e:	4423      	add	r3, r4
  405e30:	4630      	mov	r0, r6
  405e32:	685a      	ldr	r2, [r3, #4]
  405e34:	60e9      	str	r1, [r5, #12]
  405e36:	f042 0201 	orr.w	r2, r2, #1
  405e3a:	608d      	str	r5, [r1, #8]
  405e3c:	605a      	str	r2, [r3, #4]
  405e3e:	f000 fb47 	bl	4064d0 <__malloc_unlock>
  405e42:	3408      	adds	r4, #8
  405e44:	4620      	mov	r0, r4
  405e46:	b003      	add	sp, #12
  405e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405e4c:	2400      	movs	r4, #0
  405e4e:	230c      	movs	r3, #12
  405e50:	4620      	mov	r0, r4
  405e52:	6033      	str	r3, [r6, #0]
  405e54:	b003      	add	sp, #12
  405e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405e5a:	2380      	movs	r3, #128	; 0x80
  405e5c:	f04f 0e40 	mov.w	lr, #64	; 0x40
  405e60:	203f      	movs	r0, #63	; 0x3f
  405e62:	e749      	b.n	405cf8 <_malloc_r+0x44>
  405e64:	4670      	mov	r0, lr
  405e66:	e75d      	b.n	405d24 <_malloc_r+0x70>
  405e68:	4423      	add	r3, r4
  405e6a:	68e1      	ldr	r1, [r4, #12]
  405e6c:	685a      	ldr	r2, [r3, #4]
  405e6e:	68a5      	ldr	r5, [r4, #8]
  405e70:	f042 0201 	orr.w	r2, r2, #1
  405e74:	60e9      	str	r1, [r5, #12]
  405e76:	4630      	mov	r0, r6
  405e78:	608d      	str	r5, [r1, #8]
  405e7a:	605a      	str	r2, [r3, #4]
  405e7c:	f000 fb28 	bl	4064d0 <__malloc_unlock>
  405e80:	3408      	adds	r4, #8
  405e82:	4620      	mov	r0, r4
  405e84:	b003      	add	sp, #12
  405e86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405e8a:	4423      	add	r3, r4
  405e8c:	4630      	mov	r0, r6
  405e8e:	685a      	ldr	r2, [r3, #4]
  405e90:	f042 0201 	orr.w	r2, r2, #1
  405e94:	605a      	str	r2, [r3, #4]
  405e96:	f000 fb1b 	bl	4064d0 <__malloc_unlock>
  405e9a:	3408      	adds	r4, #8
  405e9c:	4620      	mov	r0, r4
  405e9e:	b003      	add	sp, #12
  405ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405ea4:	68bc      	ldr	r4, [r7, #8]
  405ea6:	6863      	ldr	r3, [r4, #4]
  405ea8:	f023 0803 	bic.w	r8, r3, #3
  405eac:	45a8      	cmp	r8, r5
  405eae:	d304      	bcc.n	405eba <_malloc_r+0x206>
  405eb0:	ebc5 0308 	rsb	r3, r5, r8
  405eb4:	2b0f      	cmp	r3, #15
  405eb6:	f300 808c 	bgt.w	405fd2 <_malloc_r+0x31e>
  405eba:	4b55      	ldr	r3, [pc, #340]	; (406010 <_malloc_r+0x35c>)
  405ebc:	f8df 9160 	ldr.w	r9, [pc, #352]	; 406020 <_malloc_r+0x36c>
  405ec0:	681a      	ldr	r2, [r3, #0]
  405ec2:	f8d9 3000 	ldr.w	r3, [r9]
  405ec6:	3301      	adds	r3, #1
  405ec8:	442a      	add	r2, r5
  405eca:	eb04 0a08 	add.w	sl, r4, r8
  405ece:	f000 8160 	beq.w	406192 <_malloc_r+0x4de>
  405ed2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
  405ed6:	320f      	adds	r2, #15
  405ed8:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  405edc:	f022 020f 	bic.w	r2, r2, #15
  405ee0:	4611      	mov	r1, r2
  405ee2:	4630      	mov	r0, r6
  405ee4:	9201      	str	r2, [sp, #4]
  405ee6:	f000 fce5 	bl	4068b4 <_sbrk_r>
  405eea:	f1b0 3fff 	cmp.w	r0, #4294967295
  405eee:	4683      	mov	fp, r0
  405ef0:	9a01      	ldr	r2, [sp, #4]
  405ef2:	f000 8158 	beq.w	4061a6 <_malloc_r+0x4f2>
  405ef6:	4582      	cmp	sl, r0
  405ef8:	f200 80fc 	bhi.w	4060f4 <_malloc_r+0x440>
  405efc:	4b45      	ldr	r3, [pc, #276]	; (406014 <_malloc_r+0x360>)
  405efe:	6819      	ldr	r1, [r3, #0]
  405f00:	45da      	cmp	sl, fp
  405f02:	4411      	add	r1, r2
  405f04:	6019      	str	r1, [r3, #0]
  405f06:	f000 8153 	beq.w	4061b0 <_malloc_r+0x4fc>
  405f0a:	f8d9 0000 	ldr.w	r0, [r9]
  405f0e:	f8df e110 	ldr.w	lr, [pc, #272]	; 406020 <_malloc_r+0x36c>
  405f12:	3001      	adds	r0, #1
  405f14:	bf1b      	ittet	ne
  405f16:	ebca 0a0b 	rsbne	sl, sl, fp
  405f1a:	4451      	addne	r1, sl
  405f1c:	f8ce b000 	streq.w	fp, [lr]
  405f20:	6019      	strne	r1, [r3, #0]
  405f22:	f01b 0107 	ands.w	r1, fp, #7
  405f26:	f000 8117 	beq.w	406158 <_malloc_r+0x4a4>
  405f2a:	f1c1 0008 	rsb	r0, r1, #8
  405f2e:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  405f32:	4483      	add	fp, r0
  405f34:	3108      	adds	r1, #8
  405f36:	445a      	add	r2, fp
  405f38:	f3c2 020b 	ubfx	r2, r2, #0, #12
  405f3c:	ebc2 0901 	rsb	r9, r2, r1
  405f40:	4649      	mov	r1, r9
  405f42:	4630      	mov	r0, r6
  405f44:	9301      	str	r3, [sp, #4]
  405f46:	f000 fcb5 	bl	4068b4 <_sbrk_r>
  405f4a:	1c43      	adds	r3, r0, #1
  405f4c:	9b01      	ldr	r3, [sp, #4]
  405f4e:	f000 813f 	beq.w	4061d0 <_malloc_r+0x51c>
  405f52:	ebcb 0200 	rsb	r2, fp, r0
  405f56:	444a      	add	r2, r9
  405f58:	f042 0201 	orr.w	r2, r2, #1
  405f5c:	6819      	ldr	r1, [r3, #0]
  405f5e:	f8c7 b008 	str.w	fp, [r7, #8]
  405f62:	4449      	add	r1, r9
  405f64:	42bc      	cmp	r4, r7
  405f66:	f8cb 2004 	str.w	r2, [fp, #4]
  405f6a:	6019      	str	r1, [r3, #0]
  405f6c:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 406014 <_malloc_r+0x360>
  405f70:	d016      	beq.n	405fa0 <_malloc_r+0x2ec>
  405f72:	f1b8 0f0f 	cmp.w	r8, #15
  405f76:	f240 80fd 	bls.w	406174 <_malloc_r+0x4c0>
  405f7a:	6862      	ldr	r2, [r4, #4]
  405f7c:	f1a8 030c 	sub.w	r3, r8, #12
  405f80:	f023 0307 	bic.w	r3, r3, #7
  405f84:	18e0      	adds	r0, r4, r3
  405f86:	f002 0201 	and.w	r2, r2, #1
  405f8a:	f04f 0e05 	mov.w	lr, #5
  405f8e:	431a      	orrs	r2, r3
  405f90:	2b0f      	cmp	r3, #15
  405f92:	6062      	str	r2, [r4, #4]
  405f94:	f8c0 e004 	str.w	lr, [r0, #4]
  405f98:	f8c0 e008 	str.w	lr, [r0, #8]
  405f9c:	f200 811c 	bhi.w	4061d8 <_malloc_r+0x524>
  405fa0:	4b1d      	ldr	r3, [pc, #116]	; (406018 <_malloc_r+0x364>)
  405fa2:	68bc      	ldr	r4, [r7, #8]
  405fa4:	681a      	ldr	r2, [r3, #0]
  405fa6:	4291      	cmp	r1, r2
  405fa8:	bf88      	it	hi
  405faa:	6019      	strhi	r1, [r3, #0]
  405fac:	4b1b      	ldr	r3, [pc, #108]	; (40601c <_malloc_r+0x368>)
  405fae:	681a      	ldr	r2, [r3, #0]
  405fb0:	4291      	cmp	r1, r2
  405fb2:	6862      	ldr	r2, [r4, #4]
  405fb4:	bf88      	it	hi
  405fb6:	6019      	strhi	r1, [r3, #0]
  405fb8:	f022 0203 	bic.w	r2, r2, #3
  405fbc:	4295      	cmp	r5, r2
  405fbe:	eba2 0305 	sub.w	r3, r2, r5
  405fc2:	d801      	bhi.n	405fc8 <_malloc_r+0x314>
  405fc4:	2b0f      	cmp	r3, #15
  405fc6:	dc04      	bgt.n	405fd2 <_malloc_r+0x31e>
  405fc8:	4630      	mov	r0, r6
  405fca:	f000 fa81 	bl	4064d0 <__malloc_unlock>
  405fce:	2400      	movs	r4, #0
  405fd0:	e738      	b.n	405e44 <_malloc_r+0x190>
  405fd2:	1962      	adds	r2, r4, r5
  405fd4:	f043 0301 	orr.w	r3, r3, #1
  405fd8:	f045 0501 	orr.w	r5, r5, #1
  405fdc:	6065      	str	r5, [r4, #4]
  405fde:	4630      	mov	r0, r6
  405fe0:	60ba      	str	r2, [r7, #8]
  405fe2:	6053      	str	r3, [r2, #4]
  405fe4:	f000 fa74 	bl	4064d0 <__malloc_unlock>
  405fe8:	3408      	adds	r4, #8
  405fea:	4620      	mov	r0, r4
  405fec:	b003      	add	sp, #12
  405fee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405ff2:	2b14      	cmp	r3, #20
  405ff4:	d971      	bls.n	4060da <_malloc_r+0x426>
  405ff6:	2b54      	cmp	r3, #84	; 0x54
  405ff8:	f200 80a4 	bhi.w	406144 <_malloc_r+0x490>
  405ffc:	0b28      	lsrs	r0, r5, #12
  405ffe:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
  406002:	ea4f 034e 	mov.w	r3, lr, lsl #1
  406006:	306e      	adds	r0, #110	; 0x6e
  406008:	e676      	b.n	405cf8 <_malloc_r+0x44>
  40600a:	bf00      	nop
  40600c:	20400488 	.word	0x20400488
  406010:	20400974 	.word	0x20400974
  406014:	20400978 	.word	0x20400978
  406018:	20400970 	.word	0x20400970
  40601c:	2040096c 	.word	0x2040096c
  406020:	20400894 	.word	0x20400894
  406024:	0a5a      	lsrs	r2, r3, #9
  406026:	2a04      	cmp	r2, #4
  406028:	d95e      	bls.n	4060e8 <_malloc_r+0x434>
  40602a:	2a14      	cmp	r2, #20
  40602c:	f200 80b3 	bhi.w	406196 <_malloc_r+0x4e2>
  406030:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  406034:	0049      	lsls	r1, r1, #1
  406036:	325b      	adds	r2, #91	; 0x5b
  406038:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
  40603c:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
  406040:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 406220 <_malloc_r+0x56c>
  406044:	f1ac 0c08 	sub.w	ip, ip, #8
  406048:	458c      	cmp	ip, r1
  40604a:	f000 8088 	beq.w	40615e <_malloc_r+0x4aa>
  40604e:	684a      	ldr	r2, [r1, #4]
  406050:	f022 0203 	bic.w	r2, r2, #3
  406054:	4293      	cmp	r3, r2
  406056:	d202      	bcs.n	40605e <_malloc_r+0x3aa>
  406058:	6889      	ldr	r1, [r1, #8]
  40605a:	458c      	cmp	ip, r1
  40605c:	d1f7      	bne.n	40604e <_malloc_r+0x39a>
  40605e:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  406062:	687a      	ldr	r2, [r7, #4]
  406064:	f8c4 c00c 	str.w	ip, [r4, #12]
  406068:	60a1      	str	r1, [r4, #8]
  40606a:	f8cc 4008 	str.w	r4, [ip, #8]
  40606e:	60cc      	str	r4, [r1, #12]
  406070:	e688      	b.n	405d84 <_malloc_r+0xd0>
  406072:	1963      	adds	r3, r4, r5
  406074:	f042 0701 	orr.w	r7, r2, #1
  406078:	f045 0501 	orr.w	r5, r5, #1
  40607c:	6065      	str	r5, [r4, #4]
  40607e:	4630      	mov	r0, r6
  406080:	614b      	str	r3, [r1, #20]
  406082:	610b      	str	r3, [r1, #16]
  406084:	f8c3 e00c 	str.w	lr, [r3, #12]
  406088:	f8c3 e008 	str.w	lr, [r3, #8]
  40608c:	605f      	str	r7, [r3, #4]
  40608e:	509a      	str	r2, [r3, r2]
  406090:	3408      	adds	r4, #8
  406092:	f000 fa1d 	bl	4064d0 <__malloc_unlock>
  406096:	e6d5      	b.n	405e44 <_malloc_r+0x190>
  406098:	684a      	ldr	r2, [r1, #4]
  40609a:	e673      	b.n	405d84 <_malloc_r+0xd0>
  40609c:	f108 0801 	add.w	r8, r8, #1
  4060a0:	f018 0f03 	tst.w	r8, #3
  4060a4:	f10c 0c08 	add.w	ip, ip, #8
  4060a8:	f47f ae7f 	bne.w	405daa <_malloc_r+0xf6>
  4060ac:	e030      	b.n	406110 <_malloc_r+0x45c>
  4060ae:	68dc      	ldr	r4, [r3, #12]
  4060b0:	42a3      	cmp	r3, r4
  4060b2:	bf08      	it	eq
  4060b4:	3002      	addeq	r0, #2
  4060b6:	f43f ae35 	beq.w	405d24 <_malloc_r+0x70>
  4060ba:	e6b3      	b.n	405e24 <_malloc_r+0x170>
  4060bc:	440b      	add	r3, r1
  4060be:	460c      	mov	r4, r1
  4060c0:	685a      	ldr	r2, [r3, #4]
  4060c2:	68c9      	ldr	r1, [r1, #12]
  4060c4:	f854 5f08 	ldr.w	r5, [r4, #8]!
  4060c8:	f042 0201 	orr.w	r2, r2, #1
  4060cc:	605a      	str	r2, [r3, #4]
  4060ce:	4630      	mov	r0, r6
  4060d0:	60e9      	str	r1, [r5, #12]
  4060d2:	608d      	str	r5, [r1, #8]
  4060d4:	f000 f9fc 	bl	4064d0 <__malloc_unlock>
  4060d8:	e6b4      	b.n	405e44 <_malloc_r+0x190>
  4060da:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
  4060de:	f103 005b 	add.w	r0, r3, #91	; 0x5b
  4060e2:	ea4f 034e 	mov.w	r3, lr, lsl #1
  4060e6:	e607      	b.n	405cf8 <_malloc_r+0x44>
  4060e8:	099a      	lsrs	r2, r3, #6
  4060ea:	f102 0139 	add.w	r1, r2, #57	; 0x39
  4060ee:	0049      	lsls	r1, r1, #1
  4060f0:	3238      	adds	r2, #56	; 0x38
  4060f2:	e7a1      	b.n	406038 <_malloc_r+0x384>
  4060f4:	42bc      	cmp	r4, r7
  4060f6:	4b4a      	ldr	r3, [pc, #296]	; (406220 <_malloc_r+0x56c>)
  4060f8:	f43f af00 	beq.w	405efc <_malloc_r+0x248>
  4060fc:	689c      	ldr	r4, [r3, #8]
  4060fe:	6862      	ldr	r2, [r4, #4]
  406100:	f022 0203 	bic.w	r2, r2, #3
  406104:	e75a      	b.n	405fbc <_malloc_r+0x308>
  406106:	f859 3908 	ldr.w	r3, [r9], #-8
  40610a:	4599      	cmp	r9, r3
  40610c:	f040 8082 	bne.w	406214 <_malloc_r+0x560>
  406110:	f010 0f03 	tst.w	r0, #3
  406114:	f100 30ff 	add.w	r0, r0, #4294967295
  406118:	d1f5      	bne.n	406106 <_malloc_r+0x452>
  40611a:	687b      	ldr	r3, [r7, #4]
  40611c:	ea23 0304 	bic.w	r3, r3, r4
  406120:	607b      	str	r3, [r7, #4]
  406122:	0064      	lsls	r4, r4, #1
  406124:	429c      	cmp	r4, r3
  406126:	f63f aebd 	bhi.w	405ea4 <_malloc_r+0x1f0>
  40612a:	2c00      	cmp	r4, #0
  40612c:	f43f aeba 	beq.w	405ea4 <_malloc_r+0x1f0>
  406130:	421c      	tst	r4, r3
  406132:	4640      	mov	r0, r8
  406134:	f47f ae35 	bne.w	405da2 <_malloc_r+0xee>
  406138:	0064      	lsls	r4, r4, #1
  40613a:	421c      	tst	r4, r3
  40613c:	f100 0004 	add.w	r0, r0, #4
  406140:	d0fa      	beq.n	406138 <_malloc_r+0x484>
  406142:	e62e      	b.n	405da2 <_malloc_r+0xee>
  406144:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  406148:	d818      	bhi.n	40617c <_malloc_r+0x4c8>
  40614a:	0be8      	lsrs	r0, r5, #15
  40614c:	f100 0e78 	add.w	lr, r0, #120	; 0x78
  406150:	ea4f 034e 	mov.w	r3, lr, lsl #1
  406154:	3077      	adds	r0, #119	; 0x77
  406156:	e5cf      	b.n	405cf8 <_malloc_r+0x44>
  406158:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40615c:	e6eb      	b.n	405f36 <_malloc_r+0x282>
  40615e:	2101      	movs	r1, #1
  406160:	f8d8 3004 	ldr.w	r3, [r8, #4]
  406164:	1092      	asrs	r2, r2, #2
  406166:	fa01 f202 	lsl.w	r2, r1, r2
  40616a:	431a      	orrs	r2, r3
  40616c:	f8c8 2004 	str.w	r2, [r8, #4]
  406170:	4661      	mov	r1, ip
  406172:	e777      	b.n	406064 <_malloc_r+0x3b0>
  406174:	2301      	movs	r3, #1
  406176:	f8cb 3004 	str.w	r3, [fp, #4]
  40617a:	e725      	b.n	405fc8 <_malloc_r+0x314>
  40617c:	f240 5254 	movw	r2, #1364	; 0x554
  406180:	4293      	cmp	r3, r2
  406182:	d820      	bhi.n	4061c6 <_malloc_r+0x512>
  406184:	0ca8      	lsrs	r0, r5, #18
  406186:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
  40618a:	ea4f 034e 	mov.w	r3, lr, lsl #1
  40618e:	307c      	adds	r0, #124	; 0x7c
  406190:	e5b2      	b.n	405cf8 <_malloc_r+0x44>
  406192:	3210      	adds	r2, #16
  406194:	e6a4      	b.n	405ee0 <_malloc_r+0x22c>
  406196:	2a54      	cmp	r2, #84	; 0x54
  406198:	d826      	bhi.n	4061e8 <_malloc_r+0x534>
  40619a:	0b1a      	lsrs	r2, r3, #12
  40619c:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  4061a0:	0049      	lsls	r1, r1, #1
  4061a2:	326e      	adds	r2, #110	; 0x6e
  4061a4:	e748      	b.n	406038 <_malloc_r+0x384>
  4061a6:	68bc      	ldr	r4, [r7, #8]
  4061a8:	6862      	ldr	r2, [r4, #4]
  4061aa:	f022 0203 	bic.w	r2, r2, #3
  4061ae:	e705      	b.n	405fbc <_malloc_r+0x308>
  4061b0:	f3ca 000b 	ubfx	r0, sl, #0, #12
  4061b4:	2800      	cmp	r0, #0
  4061b6:	f47f aea8 	bne.w	405f0a <_malloc_r+0x256>
  4061ba:	4442      	add	r2, r8
  4061bc:	68bb      	ldr	r3, [r7, #8]
  4061be:	f042 0201 	orr.w	r2, r2, #1
  4061c2:	605a      	str	r2, [r3, #4]
  4061c4:	e6ec      	b.n	405fa0 <_malloc_r+0x2ec>
  4061c6:	23fe      	movs	r3, #254	; 0xfe
  4061c8:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
  4061cc:	207e      	movs	r0, #126	; 0x7e
  4061ce:	e593      	b.n	405cf8 <_malloc_r+0x44>
  4061d0:	2201      	movs	r2, #1
  4061d2:	f04f 0900 	mov.w	r9, #0
  4061d6:	e6c1      	b.n	405f5c <_malloc_r+0x2a8>
  4061d8:	f104 0108 	add.w	r1, r4, #8
  4061dc:	4630      	mov	r0, r6
  4061de:	f7ff fa4f 	bl	405680 <_free_r>
  4061e2:	f8d9 1000 	ldr.w	r1, [r9]
  4061e6:	e6db      	b.n	405fa0 <_malloc_r+0x2ec>
  4061e8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4061ec:	d805      	bhi.n	4061fa <_malloc_r+0x546>
  4061ee:	0bda      	lsrs	r2, r3, #15
  4061f0:	f102 0178 	add.w	r1, r2, #120	; 0x78
  4061f4:	0049      	lsls	r1, r1, #1
  4061f6:	3277      	adds	r2, #119	; 0x77
  4061f8:	e71e      	b.n	406038 <_malloc_r+0x384>
  4061fa:	f240 5154 	movw	r1, #1364	; 0x554
  4061fe:	428a      	cmp	r2, r1
  406200:	d805      	bhi.n	40620e <_malloc_r+0x55a>
  406202:	0c9a      	lsrs	r2, r3, #18
  406204:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  406208:	0049      	lsls	r1, r1, #1
  40620a:	327c      	adds	r2, #124	; 0x7c
  40620c:	e714      	b.n	406038 <_malloc_r+0x384>
  40620e:	21fe      	movs	r1, #254	; 0xfe
  406210:	227e      	movs	r2, #126	; 0x7e
  406212:	e711      	b.n	406038 <_malloc_r+0x384>
  406214:	687b      	ldr	r3, [r7, #4]
  406216:	e784      	b.n	406122 <_malloc_r+0x46e>
  406218:	08e8      	lsrs	r0, r5, #3
  40621a:	1c43      	adds	r3, r0, #1
  40621c:	005b      	lsls	r3, r3, #1
  40621e:	e5f8      	b.n	405e12 <_malloc_r+0x15e>
  406220:	20400488 	.word	0x20400488
	...

00406230 <memchr>:
  406230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  406234:	2a10      	cmp	r2, #16
  406236:	db2b      	blt.n	406290 <memchr+0x60>
  406238:	f010 0f07 	tst.w	r0, #7
  40623c:	d008      	beq.n	406250 <memchr+0x20>
  40623e:	f810 3b01 	ldrb.w	r3, [r0], #1
  406242:	3a01      	subs	r2, #1
  406244:	428b      	cmp	r3, r1
  406246:	d02d      	beq.n	4062a4 <memchr+0x74>
  406248:	f010 0f07 	tst.w	r0, #7
  40624c:	b342      	cbz	r2, 4062a0 <memchr+0x70>
  40624e:	d1f6      	bne.n	40623e <memchr+0xe>
  406250:	b4f0      	push	{r4, r5, r6, r7}
  406252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  406256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40625a:	f022 0407 	bic.w	r4, r2, #7
  40625e:	f07f 0700 	mvns.w	r7, #0
  406262:	2300      	movs	r3, #0
  406264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  406268:	3c08      	subs	r4, #8
  40626a:	ea85 0501 	eor.w	r5, r5, r1
  40626e:	ea86 0601 	eor.w	r6, r6, r1
  406272:	fa85 f547 	uadd8	r5, r5, r7
  406276:	faa3 f587 	sel	r5, r3, r7
  40627a:	fa86 f647 	uadd8	r6, r6, r7
  40627e:	faa5 f687 	sel	r6, r5, r7
  406282:	b98e      	cbnz	r6, 4062a8 <memchr+0x78>
  406284:	d1ee      	bne.n	406264 <memchr+0x34>
  406286:	bcf0      	pop	{r4, r5, r6, r7}
  406288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40628c:	f002 0207 	and.w	r2, r2, #7
  406290:	b132      	cbz	r2, 4062a0 <memchr+0x70>
  406292:	f810 3b01 	ldrb.w	r3, [r0], #1
  406296:	3a01      	subs	r2, #1
  406298:	ea83 0301 	eor.w	r3, r3, r1
  40629c:	b113      	cbz	r3, 4062a4 <memchr+0x74>
  40629e:	d1f8      	bne.n	406292 <memchr+0x62>
  4062a0:	2000      	movs	r0, #0
  4062a2:	4770      	bx	lr
  4062a4:	3801      	subs	r0, #1
  4062a6:	4770      	bx	lr
  4062a8:	2d00      	cmp	r5, #0
  4062aa:	bf06      	itte	eq
  4062ac:	4635      	moveq	r5, r6
  4062ae:	3803      	subeq	r0, #3
  4062b0:	3807      	subne	r0, #7
  4062b2:	f015 0f01 	tst.w	r5, #1
  4062b6:	d107      	bne.n	4062c8 <memchr+0x98>
  4062b8:	3001      	adds	r0, #1
  4062ba:	f415 7f80 	tst.w	r5, #256	; 0x100
  4062be:	bf02      	ittt	eq
  4062c0:	3001      	addeq	r0, #1
  4062c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  4062c6:	3001      	addeq	r0, #1
  4062c8:	bcf0      	pop	{r4, r5, r6, r7}
  4062ca:	3801      	subs	r0, #1
  4062cc:	4770      	bx	lr
  4062ce:	bf00      	nop

004062d0 <memcpy>:
  4062d0:	4684      	mov	ip, r0
  4062d2:	ea41 0300 	orr.w	r3, r1, r0
  4062d6:	f013 0303 	ands.w	r3, r3, #3
  4062da:	d16d      	bne.n	4063b8 <memcpy+0xe8>
  4062dc:	3a40      	subs	r2, #64	; 0x40
  4062de:	d341      	bcc.n	406364 <memcpy+0x94>
  4062e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4062e4:	f840 3b04 	str.w	r3, [r0], #4
  4062e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4062ec:	f840 3b04 	str.w	r3, [r0], #4
  4062f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4062f4:	f840 3b04 	str.w	r3, [r0], #4
  4062f8:	f851 3b04 	ldr.w	r3, [r1], #4
  4062fc:	f840 3b04 	str.w	r3, [r0], #4
  406300:	f851 3b04 	ldr.w	r3, [r1], #4
  406304:	f840 3b04 	str.w	r3, [r0], #4
  406308:	f851 3b04 	ldr.w	r3, [r1], #4
  40630c:	f840 3b04 	str.w	r3, [r0], #4
  406310:	f851 3b04 	ldr.w	r3, [r1], #4
  406314:	f840 3b04 	str.w	r3, [r0], #4
  406318:	f851 3b04 	ldr.w	r3, [r1], #4
  40631c:	f840 3b04 	str.w	r3, [r0], #4
  406320:	f851 3b04 	ldr.w	r3, [r1], #4
  406324:	f840 3b04 	str.w	r3, [r0], #4
  406328:	f851 3b04 	ldr.w	r3, [r1], #4
  40632c:	f840 3b04 	str.w	r3, [r0], #4
  406330:	f851 3b04 	ldr.w	r3, [r1], #4
  406334:	f840 3b04 	str.w	r3, [r0], #4
  406338:	f851 3b04 	ldr.w	r3, [r1], #4
  40633c:	f840 3b04 	str.w	r3, [r0], #4
  406340:	f851 3b04 	ldr.w	r3, [r1], #4
  406344:	f840 3b04 	str.w	r3, [r0], #4
  406348:	f851 3b04 	ldr.w	r3, [r1], #4
  40634c:	f840 3b04 	str.w	r3, [r0], #4
  406350:	f851 3b04 	ldr.w	r3, [r1], #4
  406354:	f840 3b04 	str.w	r3, [r0], #4
  406358:	f851 3b04 	ldr.w	r3, [r1], #4
  40635c:	f840 3b04 	str.w	r3, [r0], #4
  406360:	3a40      	subs	r2, #64	; 0x40
  406362:	d2bd      	bcs.n	4062e0 <memcpy+0x10>
  406364:	3230      	adds	r2, #48	; 0x30
  406366:	d311      	bcc.n	40638c <memcpy+0xbc>
  406368:	f851 3b04 	ldr.w	r3, [r1], #4
  40636c:	f840 3b04 	str.w	r3, [r0], #4
  406370:	f851 3b04 	ldr.w	r3, [r1], #4
  406374:	f840 3b04 	str.w	r3, [r0], #4
  406378:	f851 3b04 	ldr.w	r3, [r1], #4
  40637c:	f840 3b04 	str.w	r3, [r0], #4
  406380:	f851 3b04 	ldr.w	r3, [r1], #4
  406384:	f840 3b04 	str.w	r3, [r0], #4
  406388:	3a10      	subs	r2, #16
  40638a:	d2ed      	bcs.n	406368 <memcpy+0x98>
  40638c:	320c      	adds	r2, #12
  40638e:	d305      	bcc.n	40639c <memcpy+0xcc>
  406390:	f851 3b04 	ldr.w	r3, [r1], #4
  406394:	f840 3b04 	str.w	r3, [r0], #4
  406398:	3a04      	subs	r2, #4
  40639a:	d2f9      	bcs.n	406390 <memcpy+0xc0>
  40639c:	3204      	adds	r2, #4
  40639e:	d008      	beq.n	4063b2 <memcpy+0xe2>
  4063a0:	07d2      	lsls	r2, r2, #31
  4063a2:	bf1c      	itt	ne
  4063a4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4063a8:	f800 3b01 	strbne.w	r3, [r0], #1
  4063ac:	d301      	bcc.n	4063b2 <memcpy+0xe2>
  4063ae:	880b      	ldrh	r3, [r1, #0]
  4063b0:	8003      	strh	r3, [r0, #0]
  4063b2:	4660      	mov	r0, ip
  4063b4:	4770      	bx	lr
  4063b6:	bf00      	nop
  4063b8:	2a08      	cmp	r2, #8
  4063ba:	d313      	bcc.n	4063e4 <memcpy+0x114>
  4063bc:	078b      	lsls	r3, r1, #30
  4063be:	d08d      	beq.n	4062dc <memcpy+0xc>
  4063c0:	f010 0303 	ands.w	r3, r0, #3
  4063c4:	d08a      	beq.n	4062dc <memcpy+0xc>
  4063c6:	f1c3 0304 	rsb	r3, r3, #4
  4063ca:	1ad2      	subs	r2, r2, r3
  4063cc:	07db      	lsls	r3, r3, #31
  4063ce:	bf1c      	itt	ne
  4063d0:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4063d4:	f800 3b01 	strbne.w	r3, [r0], #1
  4063d8:	d380      	bcc.n	4062dc <memcpy+0xc>
  4063da:	f831 3b02 	ldrh.w	r3, [r1], #2
  4063de:	f820 3b02 	strh.w	r3, [r0], #2
  4063e2:	e77b      	b.n	4062dc <memcpy+0xc>
  4063e4:	3a04      	subs	r2, #4
  4063e6:	d3d9      	bcc.n	40639c <memcpy+0xcc>
  4063e8:	3a01      	subs	r2, #1
  4063ea:	f811 3b01 	ldrb.w	r3, [r1], #1
  4063ee:	f800 3b01 	strb.w	r3, [r0], #1
  4063f2:	d2f9      	bcs.n	4063e8 <memcpy+0x118>
  4063f4:	780b      	ldrb	r3, [r1, #0]
  4063f6:	7003      	strb	r3, [r0, #0]
  4063f8:	784b      	ldrb	r3, [r1, #1]
  4063fa:	7043      	strb	r3, [r0, #1]
  4063fc:	788b      	ldrb	r3, [r1, #2]
  4063fe:	7083      	strb	r3, [r0, #2]
  406400:	4660      	mov	r0, ip
  406402:	4770      	bx	lr

00406404 <memmove>:
  406404:	4288      	cmp	r0, r1
  406406:	b5f0      	push	{r4, r5, r6, r7, lr}
  406408:	d90d      	bls.n	406426 <memmove+0x22>
  40640a:	188b      	adds	r3, r1, r2
  40640c:	4298      	cmp	r0, r3
  40640e:	d20a      	bcs.n	406426 <memmove+0x22>
  406410:	1881      	adds	r1, r0, r2
  406412:	2a00      	cmp	r2, #0
  406414:	d051      	beq.n	4064ba <memmove+0xb6>
  406416:	1a9a      	subs	r2, r3, r2
  406418:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40641c:	f801 4d01 	strb.w	r4, [r1, #-1]!
  406420:	4293      	cmp	r3, r2
  406422:	d1f9      	bne.n	406418 <memmove+0x14>
  406424:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406426:	2a0f      	cmp	r2, #15
  406428:	d948      	bls.n	4064bc <memmove+0xb8>
  40642a:	ea41 0300 	orr.w	r3, r1, r0
  40642e:	079b      	lsls	r3, r3, #30
  406430:	d146      	bne.n	4064c0 <memmove+0xbc>
  406432:	f100 0410 	add.w	r4, r0, #16
  406436:	f101 0310 	add.w	r3, r1, #16
  40643a:	4615      	mov	r5, r2
  40643c:	f853 6c10 	ldr.w	r6, [r3, #-16]
  406440:	f844 6c10 	str.w	r6, [r4, #-16]
  406444:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  406448:	f844 6c0c 	str.w	r6, [r4, #-12]
  40644c:	f853 6c08 	ldr.w	r6, [r3, #-8]
  406450:	f844 6c08 	str.w	r6, [r4, #-8]
  406454:	3d10      	subs	r5, #16
  406456:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40645a:	f844 6c04 	str.w	r6, [r4, #-4]
  40645e:	2d0f      	cmp	r5, #15
  406460:	f103 0310 	add.w	r3, r3, #16
  406464:	f104 0410 	add.w	r4, r4, #16
  406468:	d8e8      	bhi.n	40643c <memmove+0x38>
  40646a:	f1a2 0310 	sub.w	r3, r2, #16
  40646e:	f023 030f 	bic.w	r3, r3, #15
  406472:	f002 0e0f 	and.w	lr, r2, #15
  406476:	3310      	adds	r3, #16
  406478:	f1be 0f03 	cmp.w	lr, #3
  40647c:	4419      	add	r1, r3
  40647e:	4403      	add	r3, r0
  406480:	d921      	bls.n	4064c6 <memmove+0xc2>
  406482:	1f1e      	subs	r6, r3, #4
  406484:	460d      	mov	r5, r1
  406486:	4674      	mov	r4, lr
  406488:	3c04      	subs	r4, #4
  40648a:	f855 7b04 	ldr.w	r7, [r5], #4
  40648e:	f846 7f04 	str.w	r7, [r6, #4]!
  406492:	2c03      	cmp	r4, #3
  406494:	d8f8      	bhi.n	406488 <memmove+0x84>
  406496:	f1ae 0404 	sub.w	r4, lr, #4
  40649a:	f024 0403 	bic.w	r4, r4, #3
  40649e:	3404      	adds	r4, #4
  4064a0:	4423      	add	r3, r4
  4064a2:	4421      	add	r1, r4
  4064a4:	f002 0203 	and.w	r2, r2, #3
  4064a8:	b162      	cbz	r2, 4064c4 <memmove+0xc0>
  4064aa:	3b01      	subs	r3, #1
  4064ac:	440a      	add	r2, r1
  4064ae:	f811 4b01 	ldrb.w	r4, [r1], #1
  4064b2:	f803 4f01 	strb.w	r4, [r3, #1]!
  4064b6:	428a      	cmp	r2, r1
  4064b8:	d1f9      	bne.n	4064ae <memmove+0xaa>
  4064ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4064bc:	4603      	mov	r3, r0
  4064be:	e7f3      	b.n	4064a8 <memmove+0xa4>
  4064c0:	4603      	mov	r3, r0
  4064c2:	e7f2      	b.n	4064aa <memmove+0xa6>
  4064c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4064c6:	4672      	mov	r2, lr
  4064c8:	e7ee      	b.n	4064a8 <memmove+0xa4>
  4064ca:	bf00      	nop

004064cc <__malloc_lock>:
  4064cc:	4770      	bx	lr
  4064ce:	bf00      	nop

004064d0 <__malloc_unlock>:
  4064d0:	4770      	bx	lr
  4064d2:	bf00      	nop

004064d4 <_realloc_r>:
  4064d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4064d8:	4617      	mov	r7, r2
  4064da:	b083      	sub	sp, #12
  4064dc:	2900      	cmp	r1, #0
  4064de:	f000 80c1 	beq.w	406664 <_realloc_r+0x190>
  4064e2:	460e      	mov	r6, r1
  4064e4:	4681      	mov	r9, r0
  4064e6:	f107 050b 	add.w	r5, r7, #11
  4064ea:	f7ff ffef 	bl	4064cc <__malloc_lock>
  4064ee:	f856 ec04 	ldr.w	lr, [r6, #-4]
  4064f2:	2d16      	cmp	r5, #22
  4064f4:	f02e 0403 	bic.w	r4, lr, #3
  4064f8:	f1a6 0808 	sub.w	r8, r6, #8
  4064fc:	d840      	bhi.n	406580 <_realloc_r+0xac>
  4064fe:	2210      	movs	r2, #16
  406500:	4615      	mov	r5, r2
  406502:	42af      	cmp	r7, r5
  406504:	d841      	bhi.n	40658a <_realloc_r+0xb6>
  406506:	4294      	cmp	r4, r2
  406508:	da75      	bge.n	4065f6 <_realloc_r+0x122>
  40650a:	4bc9      	ldr	r3, [pc, #804]	; (406830 <_realloc_r+0x35c>)
  40650c:	6899      	ldr	r1, [r3, #8]
  40650e:	eb08 0004 	add.w	r0, r8, r4
  406512:	4288      	cmp	r0, r1
  406514:	6841      	ldr	r1, [r0, #4]
  406516:	f000 80d9 	beq.w	4066cc <_realloc_r+0x1f8>
  40651a:	f021 0301 	bic.w	r3, r1, #1
  40651e:	4403      	add	r3, r0
  406520:	685b      	ldr	r3, [r3, #4]
  406522:	07db      	lsls	r3, r3, #31
  406524:	d57d      	bpl.n	406622 <_realloc_r+0x14e>
  406526:	f01e 0f01 	tst.w	lr, #1
  40652a:	d035      	beq.n	406598 <_realloc_r+0xc4>
  40652c:	4639      	mov	r1, r7
  40652e:	4648      	mov	r0, r9
  406530:	f7ff fbc0 	bl	405cb4 <_malloc_r>
  406534:	4607      	mov	r7, r0
  406536:	b1e0      	cbz	r0, 406572 <_realloc_r+0x9e>
  406538:	f856 3c04 	ldr.w	r3, [r6, #-4]
  40653c:	f023 0301 	bic.w	r3, r3, #1
  406540:	4443      	add	r3, r8
  406542:	f1a0 0208 	sub.w	r2, r0, #8
  406546:	429a      	cmp	r2, r3
  406548:	f000 8144 	beq.w	4067d4 <_realloc_r+0x300>
  40654c:	1f22      	subs	r2, r4, #4
  40654e:	2a24      	cmp	r2, #36	; 0x24
  406550:	f200 8131 	bhi.w	4067b6 <_realloc_r+0x2e2>
  406554:	2a13      	cmp	r2, #19
  406556:	f200 8104 	bhi.w	406762 <_realloc_r+0x28e>
  40655a:	4603      	mov	r3, r0
  40655c:	4632      	mov	r2, r6
  40655e:	6811      	ldr	r1, [r2, #0]
  406560:	6019      	str	r1, [r3, #0]
  406562:	6851      	ldr	r1, [r2, #4]
  406564:	6059      	str	r1, [r3, #4]
  406566:	6892      	ldr	r2, [r2, #8]
  406568:	609a      	str	r2, [r3, #8]
  40656a:	4631      	mov	r1, r6
  40656c:	4648      	mov	r0, r9
  40656e:	f7ff f887 	bl	405680 <_free_r>
  406572:	4648      	mov	r0, r9
  406574:	f7ff ffac 	bl	4064d0 <__malloc_unlock>
  406578:	4638      	mov	r0, r7
  40657a:	b003      	add	sp, #12
  40657c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406580:	f025 0507 	bic.w	r5, r5, #7
  406584:	2d00      	cmp	r5, #0
  406586:	462a      	mov	r2, r5
  406588:	dabb      	bge.n	406502 <_realloc_r+0x2e>
  40658a:	230c      	movs	r3, #12
  40658c:	2000      	movs	r0, #0
  40658e:	f8c9 3000 	str.w	r3, [r9]
  406592:	b003      	add	sp, #12
  406594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406598:	f856 3c08 	ldr.w	r3, [r6, #-8]
  40659c:	ebc3 0a08 	rsb	sl, r3, r8
  4065a0:	f8da 3004 	ldr.w	r3, [sl, #4]
  4065a4:	f023 0c03 	bic.w	ip, r3, #3
  4065a8:	eb04 030c 	add.w	r3, r4, ip
  4065ac:	4293      	cmp	r3, r2
  4065ae:	dbbd      	blt.n	40652c <_realloc_r+0x58>
  4065b0:	4657      	mov	r7, sl
  4065b2:	f8da 100c 	ldr.w	r1, [sl, #12]
  4065b6:	f857 0f08 	ldr.w	r0, [r7, #8]!
  4065ba:	1f22      	subs	r2, r4, #4
  4065bc:	2a24      	cmp	r2, #36	; 0x24
  4065be:	60c1      	str	r1, [r0, #12]
  4065c0:	6088      	str	r0, [r1, #8]
  4065c2:	f200 8117 	bhi.w	4067f4 <_realloc_r+0x320>
  4065c6:	2a13      	cmp	r2, #19
  4065c8:	f240 8112 	bls.w	4067f0 <_realloc_r+0x31c>
  4065cc:	6831      	ldr	r1, [r6, #0]
  4065ce:	f8ca 1008 	str.w	r1, [sl, #8]
  4065d2:	6871      	ldr	r1, [r6, #4]
  4065d4:	f8ca 100c 	str.w	r1, [sl, #12]
  4065d8:	2a1b      	cmp	r2, #27
  4065da:	f200 812b 	bhi.w	406834 <_realloc_r+0x360>
  4065de:	3608      	adds	r6, #8
  4065e0:	f10a 0210 	add.w	r2, sl, #16
  4065e4:	6831      	ldr	r1, [r6, #0]
  4065e6:	6011      	str	r1, [r2, #0]
  4065e8:	6871      	ldr	r1, [r6, #4]
  4065ea:	6051      	str	r1, [r2, #4]
  4065ec:	68b1      	ldr	r1, [r6, #8]
  4065ee:	6091      	str	r1, [r2, #8]
  4065f0:	463e      	mov	r6, r7
  4065f2:	461c      	mov	r4, r3
  4065f4:	46d0      	mov	r8, sl
  4065f6:	1b63      	subs	r3, r4, r5
  4065f8:	2b0f      	cmp	r3, #15
  4065fa:	d81d      	bhi.n	406638 <_realloc_r+0x164>
  4065fc:	f8d8 3004 	ldr.w	r3, [r8, #4]
  406600:	f003 0301 	and.w	r3, r3, #1
  406604:	4323      	orrs	r3, r4
  406606:	4444      	add	r4, r8
  406608:	f8c8 3004 	str.w	r3, [r8, #4]
  40660c:	6863      	ldr	r3, [r4, #4]
  40660e:	f043 0301 	orr.w	r3, r3, #1
  406612:	6063      	str	r3, [r4, #4]
  406614:	4648      	mov	r0, r9
  406616:	f7ff ff5b 	bl	4064d0 <__malloc_unlock>
  40661a:	4630      	mov	r0, r6
  40661c:	b003      	add	sp, #12
  40661e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406622:	f021 0103 	bic.w	r1, r1, #3
  406626:	4421      	add	r1, r4
  406628:	4291      	cmp	r1, r2
  40662a:	db21      	blt.n	406670 <_realloc_r+0x19c>
  40662c:	68c3      	ldr	r3, [r0, #12]
  40662e:	6882      	ldr	r2, [r0, #8]
  406630:	460c      	mov	r4, r1
  406632:	60d3      	str	r3, [r2, #12]
  406634:	609a      	str	r2, [r3, #8]
  406636:	e7de      	b.n	4065f6 <_realloc_r+0x122>
  406638:	f8d8 2004 	ldr.w	r2, [r8, #4]
  40663c:	eb08 0105 	add.w	r1, r8, r5
  406640:	f002 0201 	and.w	r2, r2, #1
  406644:	4315      	orrs	r5, r2
  406646:	f043 0201 	orr.w	r2, r3, #1
  40664a:	440b      	add	r3, r1
  40664c:	f8c8 5004 	str.w	r5, [r8, #4]
  406650:	604a      	str	r2, [r1, #4]
  406652:	685a      	ldr	r2, [r3, #4]
  406654:	f042 0201 	orr.w	r2, r2, #1
  406658:	3108      	adds	r1, #8
  40665a:	605a      	str	r2, [r3, #4]
  40665c:	4648      	mov	r0, r9
  40665e:	f7ff f80f 	bl	405680 <_free_r>
  406662:	e7d7      	b.n	406614 <_realloc_r+0x140>
  406664:	4611      	mov	r1, r2
  406666:	b003      	add	sp, #12
  406668:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40666c:	f7ff bb22 	b.w	405cb4 <_malloc_r>
  406670:	f01e 0f01 	tst.w	lr, #1
  406674:	f47f af5a 	bne.w	40652c <_realloc_r+0x58>
  406678:	f856 3c08 	ldr.w	r3, [r6, #-8]
  40667c:	ebc3 0a08 	rsb	sl, r3, r8
  406680:	f8da 3004 	ldr.w	r3, [sl, #4]
  406684:	f023 0c03 	bic.w	ip, r3, #3
  406688:	eb01 0e0c 	add.w	lr, r1, ip
  40668c:	4596      	cmp	lr, r2
  40668e:	db8b      	blt.n	4065a8 <_realloc_r+0xd4>
  406690:	68c3      	ldr	r3, [r0, #12]
  406692:	6882      	ldr	r2, [r0, #8]
  406694:	4657      	mov	r7, sl
  406696:	60d3      	str	r3, [r2, #12]
  406698:	609a      	str	r2, [r3, #8]
  40669a:	f857 1f08 	ldr.w	r1, [r7, #8]!
  40669e:	f8da 300c 	ldr.w	r3, [sl, #12]
  4066a2:	60cb      	str	r3, [r1, #12]
  4066a4:	1f22      	subs	r2, r4, #4
  4066a6:	2a24      	cmp	r2, #36	; 0x24
  4066a8:	6099      	str	r1, [r3, #8]
  4066aa:	f200 8099 	bhi.w	4067e0 <_realloc_r+0x30c>
  4066ae:	2a13      	cmp	r2, #19
  4066b0:	d962      	bls.n	406778 <_realloc_r+0x2a4>
  4066b2:	6833      	ldr	r3, [r6, #0]
  4066b4:	f8ca 3008 	str.w	r3, [sl, #8]
  4066b8:	6873      	ldr	r3, [r6, #4]
  4066ba:	f8ca 300c 	str.w	r3, [sl, #12]
  4066be:	2a1b      	cmp	r2, #27
  4066c0:	f200 80a0 	bhi.w	406804 <_realloc_r+0x330>
  4066c4:	3608      	adds	r6, #8
  4066c6:	f10a 0310 	add.w	r3, sl, #16
  4066ca:	e056      	b.n	40677a <_realloc_r+0x2a6>
  4066cc:	f021 0b03 	bic.w	fp, r1, #3
  4066d0:	44a3      	add	fp, r4
  4066d2:	f105 0010 	add.w	r0, r5, #16
  4066d6:	4583      	cmp	fp, r0
  4066d8:	da59      	bge.n	40678e <_realloc_r+0x2ba>
  4066da:	f01e 0f01 	tst.w	lr, #1
  4066de:	f47f af25 	bne.w	40652c <_realloc_r+0x58>
  4066e2:	f856 1c08 	ldr.w	r1, [r6, #-8]
  4066e6:	ebc1 0a08 	rsb	sl, r1, r8
  4066ea:	f8da 1004 	ldr.w	r1, [sl, #4]
  4066ee:	f021 0c03 	bic.w	ip, r1, #3
  4066f2:	44e3      	add	fp, ip
  4066f4:	4558      	cmp	r0, fp
  4066f6:	f73f af57 	bgt.w	4065a8 <_realloc_r+0xd4>
  4066fa:	4657      	mov	r7, sl
  4066fc:	f8da 100c 	ldr.w	r1, [sl, #12]
  406700:	f857 0f08 	ldr.w	r0, [r7, #8]!
  406704:	1f22      	subs	r2, r4, #4
  406706:	2a24      	cmp	r2, #36	; 0x24
  406708:	60c1      	str	r1, [r0, #12]
  40670a:	6088      	str	r0, [r1, #8]
  40670c:	f200 80b4 	bhi.w	406878 <_realloc_r+0x3a4>
  406710:	2a13      	cmp	r2, #19
  406712:	f240 80a5 	bls.w	406860 <_realloc_r+0x38c>
  406716:	6831      	ldr	r1, [r6, #0]
  406718:	f8ca 1008 	str.w	r1, [sl, #8]
  40671c:	6871      	ldr	r1, [r6, #4]
  40671e:	f8ca 100c 	str.w	r1, [sl, #12]
  406722:	2a1b      	cmp	r2, #27
  406724:	f200 80af 	bhi.w	406886 <_realloc_r+0x3b2>
  406728:	3608      	adds	r6, #8
  40672a:	f10a 0210 	add.w	r2, sl, #16
  40672e:	6831      	ldr	r1, [r6, #0]
  406730:	6011      	str	r1, [r2, #0]
  406732:	6871      	ldr	r1, [r6, #4]
  406734:	6051      	str	r1, [r2, #4]
  406736:	68b1      	ldr	r1, [r6, #8]
  406738:	6091      	str	r1, [r2, #8]
  40673a:	eb0a 0105 	add.w	r1, sl, r5
  40673e:	ebc5 020b 	rsb	r2, r5, fp
  406742:	f042 0201 	orr.w	r2, r2, #1
  406746:	6099      	str	r1, [r3, #8]
  406748:	604a      	str	r2, [r1, #4]
  40674a:	f8da 3004 	ldr.w	r3, [sl, #4]
  40674e:	f003 0301 	and.w	r3, r3, #1
  406752:	431d      	orrs	r5, r3
  406754:	4648      	mov	r0, r9
  406756:	f8ca 5004 	str.w	r5, [sl, #4]
  40675a:	f7ff feb9 	bl	4064d0 <__malloc_unlock>
  40675e:	4638      	mov	r0, r7
  406760:	e75c      	b.n	40661c <_realloc_r+0x148>
  406762:	6833      	ldr	r3, [r6, #0]
  406764:	6003      	str	r3, [r0, #0]
  406766:	6873      	ldr	r3, [r6, #4]
  406768:	6043      	str	r3, [r0, #4]
  40676a:	2a1b      	cmp	r2, #27
  40676c:	d827      	bhi.n	4067be <_realloc_r+0x2ea>
  40676e:	f100 0308 	add.w	r3, r0, #8
  406772:	f106 0208 	add.w	r2, r6, #8
  406776:	e6f2      	b.n	40655e <_realloc_r+0x8a>
  406778:	463b      	mov	r3, r7
  40677a:	6832      	ldr	r2, [r6, #0]
  40677c:	601a      	str	r2, [r3, #0]
  40677e:	6872      	ldr	r2, [r6, #4]
  406780:	605a      	str	r2, [r3, #4]
  406782:	68b2      	ldr	r2, [r6, #8]
  406784:	609a      	str	r2, [r3, #8]
  406786:	463e      	mov	r6, r7
  406788:	4674      	mov	r4, lr
  40678a:	46d0      	mov	r8, sl
  40678c:	e733      	b.n	4065f6 <_realloc_r+0x122>
  40678e:	eb08 0105 	add.w	r1, r8, r5
  406792:	ebc5 0b0b 	rsb	fp, r5, fp
  406796:	f04b 0201 	orr.w	r2, fp, #1
  40679a:	6099      	str	r1, [r3, #8]
  40679c:	604a      	str	r2, [r1, #4]
  40679e:	f856 3c04 	ldr.w	r3, [r6, #-4]
  4067a2:	f003 0301 	and.w	r3, r3, #1
  4067a6:	431d      	orrs	r5, r3
  4067a8:	4648      	mov	r0, r9
  4067aa:	f846 5c04 	str.w	r5, [r6, #-4]
  4067ae:	f7ff fe8f 	bl	4064d0 <__malloc_unlock>
  4067b2:	4630      	mov	r0, r6
  4067b4:	e732      	b.n	40661c <_realloc_r+0x148>
  4067b6:	4631      	mov	r1, r6
  4067b8:	f7ff fe24 	bl	406404 <memmove>
  4067bc:	e6d5      	b.n	40656a <_realloc_r+0x96>
  4067be:	68b3      	ldr	r3, [r6, #8]
  4067c0:	6083      	str	r3, [r0, #8]
  4067c2:	68f3      	ldr	r3, [r6, #12]
  4067c4:	60c3      	str	r3, [r0, #12]
  4067c6:	2a24      	cmp	r2, #36	; 0x24
  4067c8:	d028      	beq.n	40681c <_realloc_r+0x348>
  4067ca:	f100 0310 	add.w	r3, r0, #16
  4067ce:	f106 0210 	add.w	r2, r6, #16
  4067d2:	e6c4      	b.n	40655e <_realloc_r+0x8a>
  4067d4:	f850 3c04 	ldr.w	r3, [r0, #-4]
  4067d8:	f023 0303 	bic.w	r3, r3, #3
  4067dc:	441c      	add	r4, r3
  4067de:	e70a      	b.n	4065f6 <_realloc_r+0x122>
  4067e0:	4631      	mov	r1, r6
  4067e2:	4638      	mov	r0, r7
  4067e4:	4674      	mov	r4, lr
  4067e6:	46d0      	mov	r8, sl
  4067e8:	f7ff fe0c 	bl	406404 <memmove>
  4067ec:	463e      	mov	r6, r7
  4067ee:	e702      	b.n	4065f6 <_realloc_r+0x122>
  4067f0:	463a      	mov	r2, r7
  4067f2:	e6f7      	b.n	4065e4 <_realloc_r+0x110>
  4067f4:	4631      	mov	r1, r6
  4067f6:	4638      	mov	r0, r7
  4067f8:	461c      	mov	r4, r3
  4067fa:	46d0      	mov	r8, sl
  4067fc:	f7ff fe02 	bl	406404 <memmove>
  406800:	463e      	mov	r6, r7
  406802:	e6f8      	b.n	4065f6 <_realloc_r+0x122>
  406804:	68b3      	ldr	r3, [r6, #8]
  406806:	f8ca 3010 	str.w	r3, [sl, #16]
  40680a:	68f3      	ldr	r3, [r6, #12]
  40680c:	f8ca 3014 	str.w	r3, [sl, #20]
  406810:	2a24      	cmp	r2, #36	; 0x24
  406812:	d01b      	beq.n	40684c <_realloc_r+0x378>
  406814:	3610      	adds	r6, #16
  406816:	f10a 0318 	add.w	r3, sl, #24
  40681a:	e7ae      	b.n	40677a <_realloc_r+0x2a6>
  40681c:	6933      	ldr	r3, [r6, #16]
  40681e:	6103      	str	r3, [r0, #16]
  406820:	6973      	ldr	r3, [r6, #20]
  406822:	6143      	str	r3, [r0, #20]
  406824:	f106 0218 	add.w	r2, r6, #24
  406828:	f100 0318 	add.w	r3, r0, #24
  40682c:	e697      	b.n	40655e <_realloc_r+0x8a>
  40682e:	bf00      	nop
  406830:	20400488 	.word	0x20400488
  406834:	68b1      	ldr	r1, [r6, #8]
  406836:	f8ca 1010 	str.w	r1, [sl, #16]
  40683a:	68f1      	ldr	r1, [r6, #12]
  40683c:	f8ca 1014 	str.w	r1, [sl, #20]
  406840:	2a24      	cmp	r2, #36	; 0x24
  406842:	d00f      	beq.n	406864 <_realloc_r+0x390>
  406844:	3610      	adds	r6, #16
  406846:	f10a 0218 	add.w	r2, sl, #24
  40684a:	e6cb      	b.n	4065e4 <_realloc_r+0x110>
  40684c:	6933      	ldr	r3, [r6, #16]
  40684e:	f8ca 3018 	str.w	r3, [sl, #24]
  406852:	6973      	ldr	r3, [r6, #20]
  406854:	f8ca 301c 	str.w	r3, [sl, #28]
  406858:	3618      	adds	r6, #24
  40685a:	f10a 0320 	add.w	r3, sl, #32
  40685e:	e78c      	b.n	40677a <_realloc_r+0x2a6>
  406860:	463a      	mov	r2, r7
  406862:	e764      	b.n	40672e <_realloc_r+0x25a>
  406864:	6932      	ldr	r2, [r6, #16]
  406866:	f8ca 2018 	str.w	r2, [sl, #24]
  40686a:	6972      	ldr	r2, [r6, #20]
  40686c:	f8ca 201c 	str.w	r2, [sl, #28]
  406870:	3618      	adds	r6, #24
  406872:	f10a 0220 	add.w	r2, sl, #32
  406876:	e6b5      	b.n	4065e4 <_realloc_r+0x110>
  406878:	4631      	mov	r1, r6
  40687a:	4638      	mov	r0, r7
  40687c:	9301      	str	r3, [sp, #4]
  40687e:	f7ff fdc1 	bl	406404 <memmove>
  406882:	9b01      	ldr	r3, [sp, #4]
  406884:	e759      	b.n	40673a <_realloc_r+0x266>
  406886:	68b1      	ldr	r1, [r6, #8]
  406888:	f8ca 1010 	str.w	r1, [sl, #16]
  40688c:	68f1      	ldr	r1, [r6, #12]
  40688e:	f8ca 1014 	str.w	r1, [sl, #20]
  406892:	2a24      	cmp	r2, #36	; 0x24
  406894:	d003      	beq.n	40689e <_realloc_r+0x3ca>
  406896:	3610      	adds	r6, #16
  406898:	f10a 0218 	add.w	r2, sl, #24
  40689c:	e747      	b.n	40672e <_realloc_r+0x25a>
  40689e:	6932      	ldr	r2, [r6, #16]
  4068a0:	f8ca 2018 	str.w	r2, [sl, #24]
  4068a4:	6972      	ldr	r2, [r6, #20]
  4068a6:	f8ca 201c 	str.w	r2, [sl, #28]
  4068aa:	3618      	adds	r6, #24
  4068ac:	f10a 0220 	add.w	r2, sl, #32
  4068b0:	e73d      	b.n	40672e <_realloc_r+0x25a>
  4068b2:	bf00      	nop

004068b4 <_sbrk_r>:
  4068b4:	b538      	push	{r3, r4, r5, lr}
  4068b6:	4c07      	ldr	r4, [pc, #28]	; (4068d4 <_sbrk_r+0x20>)
  4068b8:	2300      	movs	r3, #0
  4068ba:	4605      	mov	r5, r0
  4068bc:	4608      	mov	r0, r1
  4068be:	6023      	str	r3, [r4, #0]
  4068c0:	f7fb fcaa 	bl	402218 <_sbrk>
  4068c4:	1c43      	adds	r3, r0, #1
  4068c6:	d000      	beq.n	4068ca <_sbrk_r+0x16>
  4068c8:	bd38      	pop	{r3, r4, r5, pc}
  4068ca:	6823      	ldr	r3, [r4, #0]
  4068cc:	2b00      	cmp	r3, #0
  4068ce:	d0fb      	beq.n	4068c8 <_sbrk_r+0x14>
  4068d0:	602b      	str	r3, [r5, #0]
  4068d2:	bd38      	pop	{r3, r4, r5, pc}
  4068d4:	204009ac 	.word	0x204009ac

004068d8 <__sread>:
  4068d8:	b510      	push	{r4, lr}
  4068da:	460c      	mov	r4, r1
  4068dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4068e0:	f000 fa42 	bl	406d68 <_read_r>
  4068e4:	2800      	cmp	r0, #0
  4068e6:	db03      	blt.n	4068f0 <__sread+0x18>
  4068e8:	6d23      	ldr	r3, [r4, #80]	; 0x50
  4068ea:	4403      	add	r3, r0
  4068ec:	6523      	str	r3, [r4, #80]	; 0x50
  4068ee:	bd10      	pop	{r4, pc}
  4068f0:	89a3      	ldrh	r3, [r4, #12]
  4068f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  4068f6:	81a3      	strh	r3, [r4, #12]
  4068f8:	bd10      	pop	{r4, pc}
  4068fa:	bf00      	nop

004068fc <__swrite>:
  4068fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406900:	4616      	mov	r6, r2
  406902:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  406906:	461f      	mov	r7, r3
  406908:	05d3      	lsls	r3, r2, #23
  40690a:	460c      	mov	r4, r1
  40690c:	4605      	mov	r5, r0
  40690e:	d507      	bpl.n	406920 <__swrite+0x24>
  406910:	2200      	movs	r2, #0
  406912:	2302      	movs	r3, #2
  406914:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406918:	f000 fa10 	bl	406d3c <_lseek_r>
  40691c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  406920:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  406924:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  406928:	81a2      	strh	r2, [r4, #12]
  40692a:	463b      	mov	r3, r7
  40692c:	4632      	mov	r2, r6
  40692e:	4628      	mov	r0, r5
  406930:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406934:	f000 b920 	b.w	406b78 <_write_r>

00406938 <__sseek>:
  406938:	b510      	push	{r4, lr}
  40693a:	460c      	mov	r4, r1
  40693c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406940:	f000 f9fc 	bl	406d3c <_lseek_r>
  406944:	89a3      	ldrh	r3, [r4, #12]
  406946:	1c42      	adds	r2, r0, #1
  406948:	bf0e      	itee	eq
  40694a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40694e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  406952:	6520      	strne	r0, [r4, #80]	; 0x50
  406954:	81a3      	strh	r3, [r4, #12]
  406956:	bd10      	pop	{r4, pc}

00406958 <__sclose>:
  406958:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40695c:	f000 b974 	b.w	406c48 <_close_r>
	...

00406980 <strlen>:
  406980:	f890 f000 	pld	[r0]
  406984:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  406988:	f020 0107 	bic.w	r1, r0, #7
  40698c:	f06f 0c00 	mvn.w	ip, #0
  406990:	f010 0407 	ands.w	r4, r0, #7
  406994:	f891 f020 	pld	[r1, #32]
  406998:	f040 8049 	bne.w	406a2e <strlen+0xae>
  40699c:	f04f 0400 	mov.w	r4, #0
  4069a0:	f06f 0007 	mvn.w	r0, #7
  4069a4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4069a8:	f891 f040 	pld	[r1, #64]	; 0x40
  4069ac:	f100 0008 	add.w	r0, r0, #8
  4069b0:	fa82 f24c 	uadd8	r2, r2, ip
  4069b4:	faa4 f28c 	sel	r2, r4, ip
  4069b8:	fa83 f34c 	uadd8	r3, r3, ip
  4069bc:	faa2 f38c 	sel	r3, r2, ip
  4069c0:	bb4b      	cbnz	r3, 406a16 <strlen+0x96>
  4069c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  4069c6:	fa82 f24c 	uadd8	r2, r2, ip
  4069ca:	f100 0008 	add.w	r0, r0, #8
  4069ce:	faa4 f28c 	sel	r2, r4, ip
  4069d2:	fa83 f34c 	uadd8	r3, r3, ip
  4069d6:	faa2 f38c 	sel	r3, r2, ip
  4069da:	b9e3      	cbnz	r3, 406a16 <strlen+0x96>
  4069dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4069e0:	fa82 f24c 	uadd8	r2, r2, ip
  4069e4:	f100 0008 	add.w	r0, r0, #8
  4069e8:	faa4 f28c 	sel	r2, r4, ip
  4069ec:	fa83 f34c 	uadd8	r3, r3, ip
  4069f0:	faa2 f38c 	sel	r3, r2, ip
  4069f4:	b97b      	cbnz	r3, 406a16 <strlen+0x96>
  4069f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4069fa:	f101 0120 	add.w	r1, r1, #32
  4069fe:	fa82 f24c 	uadd8	r2, r2, ip
  406a02:	f100 0008 	add.w	r0, r0, #8
  406a06:	faa4 f28c 	sel	r2, r4, ip
  406a0a:	fa83 f34c 	uadd8	r3, r3, ip
  406a0e:	faa2 f38c 	sel	r3, r2, ip
  406a12:	2b00      	cmp	r3, #0
  406a14:	d0c6      	beq.n	4069a4 <strlen+0x24>
  406a16:	2a00      	cmp	r2, #0
  406a18:	bf04      	itt	eq
  406a1a:	3004      	addeq	r0, #4
  406a1c:	461a      	moveq	r2, r3
  406a1e:	ba12      	rev	r2, r2
  406a20:	fab2 f282 	clz	r2, r2
  406a24:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  406a28:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  406a2c:	4770      	bx	lr
  406a2e:	e9d1 2300 	ldrd	r2, r3, [r1]
  406a32:	f004 0503 	and.w	r5, r4, #3
  406a36:	f1c4 0000 	rsb	r0, r4, #0
  406a3a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  406a3e:	f014 0f04 	tst.w	r4, #4
  406a42:	f891 f040 	pld	[r1, #64]	; 0x40
  406a46:	fa0c f505 	lsl.w	r5, ip, r5
  406a4a:	ea62 0205 	orn	r2, r2, r5
  406a4e:	bf1c      	itt	ne
  406a50:	ea63 0305 	ornne	r3, r3, r5
  406a54:	4662      	movne	r2, ip
  406a56:	f04f 0400 	mov.w	r4, #0
  406a5a:	e7a9      	b.n	4069b0 <strlen+0x30>

00406a5c <__swbuf_r>:
  406a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406a5e:	460e      	mov	r6, r1
  406a60:	4614      	mov	r4, r2
  406a62:	4607      	mov	r7, r0
  406a64:	b110      	cbz	r0, 406a6c <__swbuf_r+0x10>
  406a66:	6b83      	ldr	r3, [r0, #56]	; 0x38
  406a68:	2b00      	cmp	r3, #0
  406a6a:	d04a      	beq.n	406b02 <__swbuf_r+0xa6>
  406a6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  406a70:	69a3      	ldr	r3, [r4, #24]
  406a72:	60a3      	str	r3, [r4, #8]
  406a74:	b291      	uxth	r1, r2
  406a76:	0708      	lsls	r0, r1, #28
  406a78:	d538      	bpl.n	406aec <__swbuf_r+0x90>
  406a7a:	6923      	ldr	r3, [r4, #16]
  406a7c:	2b00      	cmp	r3, #0
  406a7e:	d035      	beq.n	406aec <__swbuf_r+0x90>
  406a80:	0489      	lsls	r1, r1, #18
  406a82:	b2f5      	uxtb	r5, r6
  406a84:	d515      	bpl.n	406ab2 <__swbuf_r+0x56>
  406a86:	6822      	ldr	r2, [r4, #0]
  406a88:	6961      	ldr	r1, [r4, #20]
  406a8a:	1ad3      	subs	r3, r2, r3
  406a8c:	428b      	cmp	r3, r1
  406a8e:	da1c      	bge.n	406aca <__swbuf_r+0x6e>
  406a90:	3301      	adds	r3, #1
  406a92:	68a1      	ldr	r1, [r4, #8]
  406a94:	1c50      	adds	r0, r2, #1
  406a96:	3901      	subs	r1, #1
  406a98:	60a1      	str	r1, [r4, #8]
  406a9a:	6020      	str	r0, [r4, #0]
  406a9c:	7016      	strb	r6, [r2, #0]
  406a9e:	6962      	ldr	r2, [r4, #20]
  406aa0:	429a      	cmp	r2, r3
  406aa2:	d01a      	beq.n	406ada <__swbuf_r+0x7e>
  406aa4:	89a3      	ldrh	r3, [r4, #12]
  406aa6:	07db      	lsls	r3, r3, #31
  406aa8:	d501      	bpl.n	406aae <__swbuf_r+0x52>
  406aaa:	2d0a      	cmp	r5, #10
  406aac:	d015      	beq.n	406ada <__swbuf_r+0x7e>
  406aae:	4628      	mov	r0, r5
  406ab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406ab2:	6e61      	ldr	r1, [r4, #100]	; 0x64
  406ab4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  406ab8:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  406abc:	81a2      	strh	r2, [r4, #12]
  406abe:	6822      	ldr	r2, [r4, #0]
  406ac0:	6661      	str	r1, [r4, #100]	; 0x64
  406ac2:	6961      	ldr	r1, [r4, #20]
  406ac4:	1ad3      	subs	r3, r2, r3
  406ac6:	428b      	cmp	r3, r1
  406ac8:	dbe2      	blt.n	406a90 <__swbuf_r+0x34>
  406aca:	4621      	mov	r1, r4
  406acc:	4638      	mov	r0, r7
  406ace:	f7fe fc79 	bl	4053c4 <_fflush_r>
  406ad2:	b940      	cbnz	r0, 406ae6 <__swbuf_r+0x8a>
  406ad4:	6822      	ldr	r2, [r4, #0]
  406ad6:	2301      	movs	r3, #1
  406ad8:	e7db      	b.n	406a92 <__swbuf_r+0x36>
  406ada:	4621      	mov	r1, r4
  406adc:	4638      	mov	r0, r7
  406ade:	f7fe fc71 	bl	4053c4 <_fflush_r>
  406ae2:	2800      	cmp	r0, #0
  406ae4:	d0e3      	beq.n	406aae <__swbuf_r+0x52>
  406ae6:	f04f 30ff 	mov.w	r0, #4294967295
  406aea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406aec:	4621      	mov	r1, r4
  406aee:	4638      	mov	r0, r7
  406af0:	f7fe fb50 	bl	405194 <__swsetup_r>
  406af4:	2800      	cmp	r0, #0
  406af6:	d1f6      	bne.n	406ae6 <__swbuf_r+0x8a>
  406af8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  406afc:	6923      	ldr	r3, [r4, #16]
  406afe:	b291      	uxth	r1, r2
  406b00:	e7be      	b.n	406a80 <__swbuf_r+0x24>
  406b02:	f7fe fcf3 	bl	4054ec <__sinit>
  406b06:	e7b1      	b.n	406a6c <__swbuf_r+0x10>

00406b08 <_wcrtomb_r>:
  406b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406b0c:	4605      	mov	r5, r0
  406b0e:	b086      	sub	sp, #24
  406b10:	461e      	mov	r6, r3
  406b12:	460c      	mov	r4, r1
  406b14:	b1a1      	cbz	r1, 406b40 <_wcrtomb_r+0x38>
  406b16:	4b10      	ldr	r3, [pc, #64]	; (406b58 <_wcrtomb_r+0x50>)
  406b18:	4617      	mov	r7, r2
  406b1a:	f8d3 8000 	ldr.w	r8, [r3]
  406b1e:	f7ff f843 	bl	405ba8 <__locale_charset>
  406b22:	9600      	str	r6, [sp, #0]
  406b24:	4603      	mov	r3, r0
  406b26:	463a      	mov	r2, r7
  406b28:	4621      	mov	r1, r4
  406b2a:	4628      	mov	r0, r5
  406b2c:	47c0      	blx	r8
  406b2e:	1c43      	adds	r3, r0, #1
  406b30:	d103      	bne.n	406b3a <_wcrtomb_r+0x32>
  406b32:	2200      	movs	r2, #0
  406b34:	238a      	movs	r3, #138	; 0x8a
  406b36:	6032      	str	r2, [r6, #0]
  406b38:	602b      	str	r3, [r5, #0]
  406b3a:	b006      	add	sp, #24
  406b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406b40:	4b05      	ldr	r3, [pc, #20]	; (406b58 <_wcrtomb_r+0x50>)
  406b42:	681f      	ldr	r7, [r3, #0]
  406b44:	f7ff f830 	bl	405ba8 <__locale_charset>
  406b48:	9600      	str	r6, [sp, #0]
  406b4a:	4603      	mov	r3, r0
  406b4c:	4622      	mov	r2, r4
  406b4e:	a903      	add	r1, sp, #12
  406b50:	4628      	mov	r0, r5
  406b52:	47b8      	blx	r7
  406b54:	e7eb      	b.n	406b2e <_wcrtomb_r+0x26>
  406b56:	bf00      	nop
  406b58:	20400898 	.word	0x20400898

00406b5c <__ascii_wctomb>:
  406b5c:	b121      	cbz	r1, 406b68 <__ascii_wctomb+0xc>
  406b5e:	2aff      	cmp	r2, #255	; 0xff
  406b60:	d804      	bhi.n	406b6c <__ascii_wctomb+0x10>
  406b62:	700a      	strb	r2, [r1, #0]
  406b64:	2001      	movs	r0, #1
  406b66:	4770      	bx	lr
  406b68:	4608      	mov	r0, r1
  406b6a:	4770      	bx	lr
  406b6c:	238a      	movs	r3, #138	; 0x8a
  406b6e:	6003      	str	r3, [r0, #0]
  406b70:	f04f 30ff 	mov.w	r0, #4294967295
  406b74:	4770      	bx	lr
  406b76:	bf00      	nop

00406b78 <_write_r>:
  406b78:	b570      	push	{r4, r5, r6, lr}
  406b7a:	460d      	mov	r5, r1
  406b7c:	4c08      	ldr	r4, [pc, #32]	; (406ba0 <_write_r+0x28>)
  406b7e:	4611      	mov	r1, r2
  406b80:	4606      	mov	r6, r0
  406b82:	461a      	mov	r2, r3
  406b84:	4628      	mov	r0, r5
  406b86:	2300      	movs	r3, #0
  406b88:	6023      	str	r3, [r4, #0]
  406b8a:	f7fa facb 	bl	401124 <_write>
  406b8e:	1c43      	adds	r3, r0, #1
  406b90:	d000      	beq.n	406b94 <_write_r+0x1c>
  406b92:	bd70      	pop	{r4, r5, r6, pc}
  406b94:	6823      	ldr	r3, [r4, #0]
  406b96:	2b00      	cmp	r3, #0
  406b98:	d0fb      	beq.n	406b92 <_write_r+0x1a>
  406b9a:	6033      	str	r3, [r6, #0]
  406b9c:	bd70      	pop	{r4, r5, r6, pc}
  406b9e:	bf00      	nop
  406ba0:	204009ac 	.word	0x204009ac

00406ba4 <__register_exitproc>:
  406ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  406ba8:	4c25      	ldr	r4, [pc, #148]	; (406c40 <__register_exitproc+0x9c>)
  406baa:	6825      	ldr	r5, [r4, #0]
  406bac:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  406bb0:	4606      	mov	r6, r0
  406bb2:	4688      	mov	r8, r1
  406bb4:	4692      	mov	sl, r2
  406bb6:	4699      	mov	r9, r3
  406bb8:	b3c4      	cbz	r4, 406c2c <__register_exitproc+0x88>
  406bba:	6860      	ldr	r0, [r4, #4]
  406bbc:	281f      	cmp	r0, #31
  406bbe:	dc17      	bgt.n	406bf0 <__register_exitproc+0x4c>
  406bc0:	1c43      	adds	r3, r0, #1
  406bc2:	b176      	cbz	r6, 406be2 <__register_exitproc+0x3e>
  406bc4:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  406bc8:	2201      	movs	r2, #1
  406bca:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  406bce:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  406bd2:	4082      	lsls	r2, r0
  406bd4:	4311      	orrs	r1, r2
  406bd6:	2e02      	cmp	r6, #2
  406bd8:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  406bdc:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  406be0:	d01e      	beq.n	406c20 <__register_exitproc+0x7c>
  406be2:	3002      	adds	r0, #2
  406be4:	6063      	str	r3, [r4, #4]
  406be6:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  406bea:	2000      	movs	r0, #0
  406bec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406bf0:	4b14      	ldr	r3, [pc, #80]	; (406c44 <__register_exitproc+0xa0>)
  406bf2:	b303      	cbz	r3, 406c36 <__register_exitproc+0x92>
  406bf4:	f44f 70c8 	mov.w	r0, #400	; 0x190
  406bf8:	f7ff f854 	bl	405ca4 <malloc>
  406bfc:	4604      	mov	r4, r0
  406bfe:	b1d0      	cbz	r0, 406c36 <__register_exitproc+0x92>
  406c00:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  406c04:	2700      	movs	r7, #0
  406c06:	e880 0088 	stmia.w	r0, {r3, r7}
  406c0a:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  406c0e:	4638      	mov	r0, r7
  406c10:	2301      	movs	r3, #1
  406c12:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  406c16:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  406c1a:	2e00      	cmp	r6, #0
  406c1c:	d0e1      	beq.n	406be2 <__register_exitproc+0x3e>
  406c1e:	e7d1      	b.n	406bc4 <__register_exitproc+0x20>
  406c20:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  406c24:	430a      	orrs	r2, r1
  406c26:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  406c2a:	e7da      	b.n	406be2 <__register_exitproc+0x3e>
  406c2c:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  406c30:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  406c34:	e7c1      	b.n	406bba <__register_exitproc+0x16>
  406c36:	f04f 30ff 	mov.w	r0, #4294967295
  406c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406c3e:	bf00      	nop
  406c40:	0040788c 	.word	0x0040788c
  406c44:	00405ca5 	.word	0x00405ca5

00406c48 <_close_r>:
  406c48:	b538      	push	{r3, r4, r5, lr}
  406c4a:	4c07      	ldr	r4, [pc, #28]	; (406c68 <_close_r+0x20>)
  406c4c:	2300      	movs	r3, #0
  406c4e:	4605      	mov	r5, r0
  406c50:	4608      	mov	r0, r1
  406c52:	6023      	str	r3, [r4, #0]
  406c54:	f7fb fafa 	bl	40224c <_close>
  406c58:	1c43      	adds	r3, r0, #1
  406c5a:	d000      	beq.n	406c5e <_close_r+0x16>
  406c5c:	bd38      	pop	{r3, r4, r5, pc}
  406c5e:	6823      	ldr	r3, [r4, #0]
  406c60:	2b00      	cmp	r3, #0
  406c62:	d0fb      	beq.n	406c5c <_close_r+0x14>
  406c64:	602b      	str	r3, [r5, #0]
  406c66:	bd38      	pop	{r3, r4, r5, pc}
  406c68:	204009ac 	.word	0x204009ac

00406c6c <_fclose_r>:
  406c6c:	2900      	cmp	r1, #0
  406c6e:	d03d      	beq.n	406cec <_fclose_r+0x80>
  406c70:	b570      	push	{r4, r5, r6, lr}
  406c72:	4605      	mov	r5, r0
  406c74:	460c      	mov	r4, r1
  406c76:	b108      	cbz	r0, 406c7c <_fclose_r+0x10>
  406c78:	6b83      	ldr	r3, [r0, #56]	; 0x38
  406c7a:	b37b      	cbz	r3, 406cdc <_fclose_r+0x70>
  406c7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406c80:	b90b      	cbnz	r3, 406c86 <_fclose_r+0x1a>
  406c82:	2000      	movs	r0, #0
  406c84:	bd70      	pop	{r4, r5, r6, pc}
  406c86:	4621      	mov	r1, r4
  406c88:	4628      	mov	r0, r5
  406c8a:	f7fe faf7 	bl	40527c <__sflush_r>
  406c8e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  406c90:	4606      	mov	r6, r0
  406c92:	b133      	cbz	r3, 406ca2 <_fclose_r+0x36>
  406c94:	69e1      	ldr	r1, [r4, #28]
  406c96:	4628      	mov	r0, r5
  406c98:	4798      	blx	r3
  406c9a:	2800      	cmp	r0, #0
  406c9c:	bfb8      	it	lt
  406c9e:	f04f 36ff 	movlt.w	r6, #4294967295
  406ca2:	89a3      	ldrh	r3, [r4, #12]
  406ca4:	061b      	lsls	r3, r3, #24
  406ca6:	d41c      	bmi.n	406ce2 <_fclose_r+0x76>
  406ca8:	6b21      	ldr	r1, [r4, #48]	; 0x30
  406caa:	b141      	cbz	r1, 406cbe <_fclose_r+0x52>
  406cac:	f104 0340 	add.w	r3, r4, #64	; 0x40
  406cb0:	4299      	cmp	r1, r3
  406cb2:	d002      	beq.n	406cba <_fclose_r+0x4e>
  406cb4:	4628      	mov	r0, r5
  406cb6:	f7fe fce3 	bl	405680 <_free_r>
  406cba:	2300      	movs	r3, #0
  406cbc:	6323      	str	r3, [r4, #48]	; 0x30
  406cbe:	6c61      	ldr	r1, [r4, #68]	; 0x44
  406cc0:	b121      	cbz	r1, 406ccc <_fclose_r+0x60>
  406cc2:	4628      	mov	r0, r5
  406cc4:	f7fe fcdc 	bl	405680 <_free_r>
  406cc8:	2300      	movs	r3, #0
  406cca:	6463      	str	r3, [r4, #68]	; 0x44
  406ccc:	f7fe fc14 	bl	4054f8 <__sfp_lock_acquire>
  406cd0:	2300      	movs	r3, #0
  406cd2:	81a3      	strh	r3, [r4, #12]
  406cd4:	f7fe fc12 	bl	4054fc <__sfp_lock_release>
  406cd8:	4630      	mov	r0, r6
  406cda:	bd70      	pop	{r4, r5, r6, pc}
  406cdc:	f7fe fc06 	bl	4054ec <__sinit>
  406ce0:	e7cc      	b.n	406c7c <_fclose_r+0x10>
  406ce2:	6921      	ldr	r1, [r4, #16]
  406ce4:	4628      	mov	r0, r5
  406ce6:	f7fe fccb 	bl	405680 <_free_r>
  406cea:	e7dd      	b.n	406ca8 <_fclose_r+0x3c>
  406cec:	2000      	movs	r0, #0
  406cee:	4770      	bx	lr

00406cf0 <_fstat_r>:
  406cf0:	b538      	push	{r3, r4, r5, lr}
  406cf2:	460b      	mov	r3, r1
  406cf4:	4c07      	ldr	r4, [pc, #28]	; (406d14 <_fstat_r+0x24>)
  406cf6:	4605      	mov	r5, r0
  406cf8:	4611      	mov	r1, r2
  406cfa:	4618      	mov	r0, r3
  406cfc:	2300      	movs	r3, #0
  406cfe:	6023      	str	r3, [r4, #0]
  406d00:	f7fb faa8 	bl	402254 <_fstat>
  406d04:	1c43      	adds	r3, r0, #1
  406d06:	d000      	beq.n	406d0a <_fstat_r+0x1a>
  406d08:	bd38      	pop	{r3, r4, r5, pc}
  406d0a:	6823      	ldr	r3, [r4, #0]
  406d0c:	2b00      	cmp	r3, #0
  406d0e:	d0fb      	beq.n	406d08 <_fstat_r+0x18>
  406d10:	602b      	str	r3, [r5, #0]
  406d12:	bd38      	pop	{r3, r4, r5, pc}
  406d14:	204009ac 	.word	0x204009ac

00406d18 <_isatty_r>:
  406d18:	b538      	push	{r3, r4, r5, lr}
  406d1a:	4c07      	ldr	r4, [pc, #28]	; (406d38 <_isatty_r+0x20>)
  406d1c:	2300      	movs	r3, #0
  406d1e:	4605      	mov	r5, r0
  406d20:	4608      	mov	r0, r1
  406d22:	6023      	str	r3, [r4, #0]
  406d24:	f7fb fa9c 	bl	402260 <_isatty>
  406d28:	1c43      	adds	r3, r0, #1
  406d2a:	d000      	beq.n	406d2e <_isatty_r+0x16>
  406d2c:	bd38      	pop	{r3, r4, r5, pc}
  406d2e:	6823      	ldr	r3, [r4, #0]
  406d30:	2b00      	cmp	r3, #0
  406d32:	d0fb      	beq.n	406d2c <_isatty_r+0x14>
  406d34:	602b      	str	r3, [r5, #0]
  406d36:	bd38      	pop	{r3, r4, r5, pc}
  406d38:	204009ac 	.word	0x204009ac

00406d3c <_lseek_r>:
  406d3c:	b570      	push	{r4, r5, r6, lr}
  406d3e:	460d      	mov	r5, r1
  406d40:	4c08      	ldr	r4, [pc, #32]	; (406d64 <_lseek_r+0x28>)
  406d42:	4611      	mov	r1, r2
  406d44:	4606      	mov	r6, r0
  406d46:	461a      	mov	r2, r3
  406d48:	4628      	mov	r0, r5
  406d4a:	2300      	movs	r3, #0
  406d4c:	6023      	str	r3, [r4, #0]
  406d4e:	f7fb fa89 	bl	402264 <_lseek>
  406d52:	1c43      	adds	r3, r0, #1
  406d54:	d000      	beq.n	406d58 <_lseek_r+0x1c>
  406d56:	bd70      	pop	{r4, r5, r6, pc}
  406d58:	6823      	ldr	r3, [r4, #0]
  406d5a:	2b00      	cmp	r3, #0
  406d5c:	d0fb      	beq.n	406d56 <_lseek_r+0x1a>
  406d5e:	6033      	str	r3, [r6, #0]
  406d60:	bd70      	pop	{r4, r5, r6, pc}
  406d62:	bf00      	nop
  406d64:	204009ac 	.word	0x204009ac

00406d68 <_read_r>:
  406d68:	b570      	push	{r4, r5, r6, lr}
  406d6a:	460d      	mov	r5, r1
  406d6c:	4c08      	ldr	r4, [pc, #32]	; (406d90 <_read_r+0x28>)
  406d6e:	4611      	mov	r1, r2
  406d70:	4606      	mov	r6, r0
  406d72:	461a      	mov	r2, r3
  406d74:	4628      	mov	r0, r5
  406d76:	2300      	movs	r3, #0
  406d78:	6023      	str	r3, [r4, #0]
  406d7a:	f7fa f9b5 	bl	4010e8 <_read>
  406d7e:	1c43      	adds	r3, r0, #1
  406d80:	d000      	beq.n	406d84 <_read_r+0x1c>
  406d82:	bd70      	pop	{r4, r5, r6, pc}
  406d84:	6823      	ldr	r3, [r4, #0]
  406d86:	2b00      	cmp	r3, #0
  406d88:	d0fb      	beq.n	406d82 <_read_r+0x1a>
  406d8a:	6033      	str	r3, [r6, #0]
  406d8c:	bd70      	pop	{r4, r5, r6, pc}
  406d8e:	bf00      	nop
  406d90:	204009ac 	.word	0x204009ac

00406d94 <__aeabi_uldivmod>:
  406d94:	b953      	cbnz	r3, 406dac <__aeabi_uldivmod+0x18>
  406d96:	b94a      	cbnz	r2, 406dac <__aeabi_uldivmod+0x18>
  406d98:	2900      	cmp	r1, #0
  406d9a:	bf08      	it	eq
  406d9c:	2800      	cmpeq	r0, #0
  406d9e:	bf1c      	itt	ne
  406da0:	f04f 31ff 	movne.w	r1, #4294967295
  406da4:	f04f 30ff 	movne.w	r0, #4294967295
  406da8:	f000 b97e 	b.w	4070a8 <__aeabi_idiv0>
  406dac:	f1ad 0c08 	sub.w	ip, sp, #8
  406db0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  406db4:	f000 f806 	bl	406dc4 <__udivmoddi4>
  406db8:	f8dd e004 	ldr.w	lr, [sp, #4]
  406dbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  406dc0:	b004      	add	sp, #16
  406dc2:	4770      	bx	lr

00406dc4 <__udivmoddi4>:
  406dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  406dc8:	468c      	mov	ip, r1
  406dca:	460e      	mov	r6, r1
  406dcc:	4604      	mov	r4, r0
  406dce:	9d08      	ldr	r5, [sp, #32]
  406dd0:	2b00      	cmp	r3, #0
  406dd2:	d150      	bne.n	406e76 <__udivmoddi4+0xb2>
  406dd4:	428a      	cmp	r2, r1
  406dd6:	4617      	mov	r7, r2
  406dd8:	d96c      	bls.n	406eb4 <__udivmoddi4+0xf0>
  406dda:	fab2 fe82 	clz	lr, r2
  406dde:	f1be 0f00 	cmp.w	lr, #0
  406de2:	d00b      	beq.n	406dfc <__udivmoddi4+0x38>
  406de4:	f1ce 0420 	rsb	r4, lr, #32
  406de8:	fa20 f404 	lsr.w	r4, r0, r4
  406dec:	fa01 f60e 	lsl.w	r6, r1, lr
  406df0:	ea44 0c06 	orr.w	ip, r4, r6
  406df4:	fa02 f70e 	lsl.w	r7, r2, lr
  406df8:	fa00 f40e 	lsl.w	r4, r0, lr
  406dfc:	ea4f 4917 	mov.w	r9, r7, lsr #16
  406e00:	0c22      	lsrs	r2, r4, #16
  406e02:	fbbc f0f9 	udiv	r0, ip, r9
  406e06:	fa1f f887 	uxth.w	r8, r7
  406e0a:	fb09 c610 	mls	r6, r9, r0, ip
  406e0e:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  406e12:	fb00 f308 	mul.w	r3, r0, r8
  406e16:	42b3      	cmp	r3, r6
  406e18:	d909      	bls.n	406e2e <__udivmoddi4+0x6a>
  406e1a:	19f6      	adds	r6, r6, r7
  406e1c:	f100 32ff 	add.w	r2, r0, #4294967295
  406e20:	f080 8122 	bcs.w	407068 <__udivmoddi4+0x2a4>
  406e24:	42b3      	cmp	r3, r6
  406e26:	f240 811f 	bls.w	407068 <__udivmoddi4+0x2a4>
  406e2a:	3802      	subs	r0, #2
  406e2c:	443e      	add	r6, r7
  406e2e:	1af6      	subs	r6, r6, r3
  406e30:	b2a2      	uxth	r2, r4
  406e32:	fbb6 f3f9 	udiv	r3, r6, r9
  406e36:	fb09 6613 	mls	r6, r9, r3, r6
  406e3a:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  406e3e:	fb03 f808 	mul.w	r8, r3, r8
  406e42:	45a0      	cmp	r8, r4
  406e44:	d909      	bls.n	406e5a <__udivmoddi4+0x96>
  406e46:	19e4      	adds	r4, r4, r7
  406e48:	f103 32ff 	add.w	r2, r3, #4294967295
  406e4c:	f080 810a 	bcs.w	407064 <__udivmoddi4+0x2a0>
  406e50:	45a0      	cmp	r8, r4
  406e52:	f240 8107 	bls.w	407064 <__udivmoddi4+0x2a0>
  406e56:	3b02      	subs	r3, #2
  406e58:	443c      	add	r4, r7
  406e5a:	ebc8 0404 	rsb	r4, r8, r4
  406e5e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  406e62:	2100      	movs	r1, #0
  406e64:	2d00      	cmp	r5, #0
  406e66:	d062      	beq.n	406f2e <__udivmoddi4+0x16a>
  406e68:	fa24 f40e 	lsr.w	r4, r4, lr
  406e6c:	2300      	movs	r3, #0
  406e6e:	602c      	str	r4, [r5, #0]
  406e70:	606b      	str	r3, [r5, #4]
  406e72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406e76:	428b      	cmp	r3, r1
  406e78:	d907      	bls.n	406e8a <__udivmoddi4+0xc6>
  406e7a:	2d00      	cmp	r5, #0
  406e7c:	d055      	beq.n	406f2a <__udivmoddi4+0x166>
  406e7e:	2100      	movs	r1, #0
  406e80:	e885 0041 	stmia.w	r5, {r0, r6}
  406e84:	4608      	mov	r0, r1
  406e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406e8a:	fab3 f183 	clz	r1, r3
  406e8e:	2900      	cmp	r1, #0
  406e90:	f040 8090 	bne.w	406fb4 <__udivmoddi4+0x1f0>
  406e94:	42b3      	cmp	r3, r6
  406e96:	d302      	bcc.n	406e9e <__udivmoddi4+0xda>
  406e98:	4282      	cmp	r2, r0
  406e9a:	f200 80f8 	bhi.w	40708e <__udivmoddi4+0x2ca>
  406e9e:	1a84      	subs	r4, r0, r2
  406ea0:	eb66 0603 	sbc.w	r6, r6, r3
  406ea4:	2001      	movs	r0, #1
  406ea6:	46b4      	mov	ip, r6
  406ea8:	2d00      	cmp	r5, #0
  406eaa:	d040      	beq.n	406f2e <__udivmoddi4+0x16a>
  406eac:	e885 1010 	stmia.w	r5, {r4, ip}
  406eb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406eb4:	b912      	cbnz	r2, 406ebc <__udivmoddi4+0xf8>
  406eb6:	2701      	movs	r7, #1
  406eb8:	fbb7 f7f2 	udiv	r7, r7, r2
  406ebc:	fab7 fe87 	clz	lr, r7
  406ec0:	f1be 0f00 	cmp.w	lr, #0
  406ec4:	d135      	bne.n	406f32 <__udivmoddi4+0x16e>
  406ec6:	1bf3      	subs	r3, r6, r7
  406ec8:	ea4f 4817 	mov.w	r8, r7, lsr #16
  406ecc:	fa1f fc87 	uxth.w	ip, r7
  406ed0:	2101      	movs	r1, #1
  406ed2:	fbb3 f0f8 	udiv	r0, r3, r8
  406ed6:	0c22      	lsrs	r2, r4, #16
  406ed8:	fb08 3610 	mls	r6, r8, r0, r3
  406edc:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  406ee0:	fb0c f300 	mul.w	r3, ip, r0
  406ee4:	42b3      	cmp	r3, r6
  406ee6:	d907      	bls.n	406ef8 <__udivmoddi4+0x134>
  406ee8:	19f6      	adds	r6, r6, r7
  406eea:	f100 32ff 	add.w	r2, r0, #4294967295
  406eee:	d202      	bcs.n	406ef6 <__udivmoddi4+0x132>
  406ef0:	42b3      	cmp	r3, r6
  406ef2:	f200 80ce 	bhi.w	407092 <__udivmoddi4+0x2ce>
  406ef6:	4610      	mov	r0, r2
  406ef8:	1af6      	subs	r6, r6, r3
  406efa:	b2a2      	uxth	r2, r4
  406efc:	fbb6 f3f8 	udiv	r3, r6, r8
  406f00:	fb08 6613 	mls	r6, r8, r3, r6
  406f04:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  406f08:	fb0c fc03 	mul.w	ip, ip, r3
  406f0c:	45a4      	cmp	ip, r4
  406f0e:	d907      	bls.n	406f20 <__udivmoddi4+0x15c>
  406f10:	19e4      	adds	r4, r4, r7
  406f12:	f103 32ff 	add.w	r2, r3, #4294967295
  406f16:	d202      	bcs.n	406f1e <__udivmoddi4+0x15a>
  406f18:	45a4      	cmp	ip, r4
  406f1a:	f200 80b5 	bhi.w	407088 <__udivmoddi4+0x2c4>
  406f1e:	4613      	mov	r3, r2
  406f20:	ebcc 0404 	rsb	r4, ip, r4
  406f24:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  406f28:	e79c      	b.n	406e64 <__udivmoddi4+0xa0>
  406f2a:	4629      	mov	r1, r5
  406f2c:	4628      	mov	r0, r5
  406f2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406f32:	f1ce 0120 	rsb	r1, lr, #32
  406f36:	fa06 f30e 	lsl.w	r3, r6, lr
  406f3a:	fa07 f70e 	lsl.w	r7, r7, lr
  406f3e:	fa20 f901 	lsr.w	r9, r0, r1
  406f42:	ea4f 4817 	mov.w	r8, r7, lsr #16
  406f46:	40ce      	lsrs	r6, r1
  406f48:	ea49 0903 	orr.w	r9, r9, r3
  406f4c:	fbb6 faf8 	udiv	sl, r6, r8
  406f50:	ea4f 4419 	mov.w	r4, r9, lsr #16
  406f54:	fb08 661a 	mls	r6, r8, sl, r6
  406f58:	fa1f fc87 	uxth.w	ip, r7
  406f5c:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
  406f60:	fb0a f20c 	mul.w	r2, sl, ip
  406f64:	429a      	cmp	r2, r3
  406f66:	fa00 f40e 	lsl.w	r4, r0, lr
  406f6a:	d90a      	bls.n	406f82 <__udivmoddi4+0x1be>
  406f6c:	19db      	adds	r3, r3, r7
  406f6e:	f10a 31ff 	add.w	r1, sl, #4294967295
  406f72:	f080 8087 	bcs.w	407084 <__udivmoddi4+0x2c0>
  406f76:	429a      	cmp	r2, r3
  406f78:	f240 8084 	bls.w	407084 <__udivmoddi4+0x2c0>
  406f7c:	f1aa 0a02 	sub.w	sl, sl, #2
  406f80:	443b      	add	r3, r7
  406f82:	1a9b      	subs	r3, r3, r2
  406f84:	fa1f f989 	uxth.w	r9, r9
  406f88:	fbb3 f1f8 	udiv	r1, r3, r8
  406f8c:	fb08 3311 	mls	r3, r8, r1, r3
  406f90:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
  406f94:	fb01 f60c 	mul.w	r6, r1, ip
  406f98:	429e      	cmp	r6, r3
  406f9a:	d907      	bls.n	406fac <__udivmoddi4+0x1e8>
  406f9c:	19db      	adds	r3, r3, r7
  406f9e:	f101 32ff 	add.w	r2, r1, #4294967295
  406fa2:	d26b      	bcs.n	40707c <__udivmoddi4+0x2b8>
  406fa4:	429e      	cmp	r6, r3
  406fa6:	d969      	bls.n	40707c <__udivmoddi4+0x2b8>
  406fa8:	3902      	subs	r1, #2
  406faa:	443b      	add	r3, r7
  406fac:	1b9b      	subs	r3, r3, r6
  406fae:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
  406fb2:	e78e      	b.n	406ed2 <__udivmoddi4+0x10e>
  406fb4:	f1c1 0e20 	rsb	lr, r1, #32
  406fb8:	fa22 f40e 	lsr.w	r4, r2, lr
  406fbc:	408b      	lsls	r3, r1
  406fbe:	4323      	orrs	r3, r4
  406fc0:	fa20 f70e 	lsr.w	r7, r0, lr
  406fc4:	fa06 f401 	lsl.w	r4, r6, r1
  406fc8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  406fcc:	fa26 f60e 	lsr.w	r6, r6, lr
  406fd0:	433c      	orrs	r4, r7
  406fd2:	fbb6 f9fc 	udiv	r9, r6, ip
  406fd6:	0c27      	lsrs	r7, r4, #16
  406fd8:	fb0c 6619 	mls	r6, ip, r9, r6
  406fdc:	fa1f f883 	uxth.w	r8, r3
  406fe0:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
  406fe4:	fb09 f708 	mul.w	r7, r9, r8
  406fe8:	42b7      	cmp	r7, r6
  406fea:	fa02 f201 	lsl.w	r2, r2, r1
  406fee:	fa00 fa01 	lsl.w	sl, r0, r1
  406ff2:	d908      	bls.n	407006 <__udivmoddi4+0x242>
  406ff4:	18f6      	adds	r6, r6, r3
  406ff6:	f109 30ff 	add.w	r0, r9, #4294967295
  406ffa:	d241      	bcs.n	407080 <__udivmoddi4+0x2bc>
  406ffc:	42b7      	cmp	r7, r6
  406ffe:	d93f      	bls.n	407080 <__udivmoddi4+0x2bc>
  407000:	f1a9 0902 	sub.w	r9, r9, #2
  407004:	441e      	add	r6, r3
  407006:	1bf6      	subs	r6, r6, r7
  407008:	b2a0      	uxth	r0, r4
  40700a:	fbb6 f4fc 	udiv	r4, r6, ip
  40700e:	fb0c 6614 	mls	r6, ip, r4, r6
  407012:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
  407016:	fb04 f808 	mul.w	r8, r4, r8
  40701a:	45b8      	cmp	r8, r7
  40701c:	d907      	bls.n	40702e <__udivmoddi4+0x26a>
  40701e:	18ff      	adds	r7, r7, r3
  407020:	f104 30ff 	add.w	r0, r4, #4294967295
  407024:	d228      	bcs.n	407078 <__udivmoddi4+0x2b4>
  407026:	45b8      	cmp	r8, r7
  407028:	d926      	bls.n	407078 <__udivmoddi4+0x2b4>
  40702a:	3c02      	subs	r4, #2
  40702c:	441f      	add	r7, r3
  40702e:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
  407032:	ebc8 0707 	rsb	r7, r8, r7
  407036:	fba0 8902 	umull	r8, r9, r0, r2
  40703a:	454f      	cmp	r7, r9
  40703c:	4644      	mov	r4, r8
  40703e:	464e      	mov	r6, r9
  407040:	d314      	bcc.n	40706c <__udivmoddi4+0x2a8>
  407042:	d029      	beq.n	407098 <__udivmoddi4+0x2d4>
  407044:	b365      	cbz	r5, 4070a0 <__udivmoddi4+0x2dc>
  407046:	ebba 0304 	subs.w	r3, sl, r4
  40704a:	eb67 0706 	sbc.w	r7, r7, r6
  40704e:	fa07 fe0e 	lsl.w	lr, r7, lr
  407052:	40cb      	lsrs	r3, r1
  407054:	40cf      	lsrs	r7, r1
  407056:	ea4e 0303 	orr.w	r3, lr, r3
  40705a:	e885 0088 	stmia.w	r5, {r3, r7}
  40705e:	2100      	movs	r1, #0
  407060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407064:	4613      	mov	r3, r2
  407066:	e6f8      	b.n	406e5a <__udivmoddi4+0x96>
  407068:	4610      	mov	r0, r2
  40706a:	e6e0      	b.n	406e2e <__udivmoddi4+0x6a>
  40706c:	ebb8 0402 	subs.w	r4, r8, r2
  407070:	eb69 0603 	sbc.w	r6, r9, r3
  407074:	3801      	subs	r0, #1
  407076:	e7e5      	b.n	407044 <__udivmoddi4+0x280>
  407078:	4604      	mov	r4, r0
  40707a:	e7d8      	b.n	40702e <__udivmoddi4+0x26a>
  40707c:	4611      	mov	r1, r2
  40707e:	e795      	b.n	406fac <__udivmoddi4+0x1e8>
  407080:	4681      	mov	r9, r0
  407082:	e7c0      	b.n	407006 <__udivmoddi4+0x242>
  407084:	468a      	mov	sl, r1
  407086:	e77c      	b.n	406f82 <__udivmoddi4+0x1be>
  407088:	3b02      	subs	r3, #2
  40708a:	443c      	add	r4, r7
  40708c:	e748      	b.n	406f20 <__udivmoddi4+0x15c>
  40708e:	4608      	mov	r0, r1
  407090:	e70a      	b.n	406ea8 <__udivmoddi4+0xe4>
  407092:	3802      	subs	r0, #2
  407094:	443e      	add	r6, r7
  407096:	e72f      	b.n	406ef8 <__udivmoddi4+0x134>
  407098:	45c2      	cmp	sl, r8
  40709a:	d3e7      	bcc.n	40706c <__udivmoddi4+0x2a8>
  40709c:	463e      	mov	r6, r7
  40709e:	e7d1      	b.n	407044 <__udivmoddi4+0x280>
  4070a0:	4629      	mov	r1, r5
  4070a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4070a6:	bf00      	nop

004070a8 <__aeabi_idiv0>:
  4070a8:	4770      	bx	lr
  4070aa:	bf00      	nop

004070ac <sd_trans_multipliers>:
  4070ac:	0000 0000 000a 0000 000c 0000 000d 0000     ................
  4070bc:	000f 0000 0014 0000 0019 0000 001e 0000     ................
  4070cc:	0023 0000 0028 0000 002d 0000 0032 0000     #...(...-...2...
  4070dc:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

004070ec <sd_mmc_trans_units>:
  4070ec:	000a 0000 0064 0000 03e8 0000 2710 0000     ....d........'..
	...

00407108 <mmc_trans_multipliers>:
  407108:	0000 0000 000a 0000 000c 0000 000d 0000     ................
  407118:	000f 0000 0014 0000 001a 0000 001e 0000     ................
  407128:	0023 0000 0028 0000 002d 0000 0034 0000     #...(...-...4...
  407138:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

00407148 <excvt.4611>:
  407148:	9a80 b690 b78e 808f d3d2 d8d4 ded7 8f8e     ................
  407158:	9290 e292 e399 ebea 9959 9d9a 9d9c 9f9e     ........Y.......
  407168:	d6b5 e9e0 a5a5 a7a6 a9a8 abaa 21ac afae     .............!..
  407178:	b1b0 b3b2 b5b4 b7b6 b9b8 bbba bdbc bfbe     ................
  407188:	c1c0 c3c2 c5c4 c7c7 c9c8 cbca cdcc cfce     ................
  407198:	d1d0 d3d2 d5d4 d7d6 d9d8 dbda dddc dfde     ................
  4071a8:	e1e0 e3e2 e5e5 e7e6 e9e7 ebea eded efee     ................
  4071b8:	f1f0 f3f2 f5f4 f7f6 f9f8 fbfa fdfc fffe     ................
  4071c8:	2a22 3c3a 3f3e 7f7c 0000 0000 2c2b 3d3b     "*:<>?|.....+,;=
  4071d8:	5d5b 0000 feeb 4d90 4453 534f 2e35 0030     [].....MSDOS5.0.
  4071e8:	4f4e 4e20 4d41 2045 2020 4620 5441 3233     NO NAME    FAT32
  4071f8:	2020 0020 4f4e 4e20 4d41 2045 2020 4620        .NO NAME    F
  407208:	5441 2020 2020 0020                         AT     .

00407210 <LfnOfs>:
  407210:	0301 0705 0e09 1210 1614 1c18 001e 0000     ................

00407220 <Tbl>:
  407220:	00c7 00fc 00e9 00e2 00e4 00e0 00e5 00e7     ................
  407230:	00ea 00eb 00e8 00ef 00ee 00ec 00c4 00c5     ................
  407240:	00c9 00e6 00c6 00f4 00f6 00f2 00fb 00f9     ................
  407250:	00ff 00d6 00dc 00f8 00a3 00d8 00d7 0192     ................
  407260:	00e1 00ed 00f3 00fa 00f1 00d1 00aa 00ba     ................
  407270:	00bf 00ae 00ac 00bd 00bc 00a1 00ab 00bb     ................
  407280:	2591 2592 2593 2502 2524 00c1 00c2 00c0     .%.%.%.%$%......
  407290:	00a9 2563 2551 2557 255d 00a2 00a5 2510     ..c%Q%W%]%.....%
  4072a0:	2514 2534 252c 251c 2500 253c 00e3 00c3     .%4%,%.%.%<%....
  4072b0:	255a 2554 2569 2566 2560 2550 256c 00a4     Z%T%i%f%`%P%l%..
  4072c0:	00f0 00d0 00ca 00cb 00c8 0131 00cd 00ce     ..........1.....
  4072d0:	00cf 2518 250c 2588 2584 00a6 00cc 2580     ...%.%.%.%.....%
  4072e0:	00d3 00df 00d4 00d2 00f5 00d5 00b5 00fe     ................
  4072f0:	00de 00da 00db 00d9 00fd 00dd 00af 00b4     ................
  407300:	00ad 00b1 2017 00be 00b6 00a7 00f7 00b8     ..... ..........
  407310:	00b0 00a8 00b7 00b9 00b3 00b2 25a0 00a0     .............%..

00407320 <tbl_upper.4362>:
  407320:	0041 0042 0043 0044 0045 0046 0047 0048     A.B.C.D.E.F.G.H.
  407330:	0049 004a 004b 004c 004d 004e 004f 0050     I.J.K.L.M.N.O.P.
  407340:	0051 0052 0053 0054 0055 0056 0057 0058     Q.R.S.T.U.V.W.X.
  407350:	0059 005a 0021 ffe0 ffe1 ffe5 ffe2 ffe3     Y.Z.!...........
  407360:	00c0 00c1 00c2 00c3 00c4 00c5 00c6 00c7     ................
  407370:	00c8 00c9 00ca 00cb 00cc 00cd 00ce 00cf     ................
  407380:	00d0 00d1 00d2 00d3 00d4 00d5 00d6 00d8     ................
  407390:	00d9 00da 00db 00dc 00dd 00de 0178 0100     ............x...
  4073a0:	0102 0104 0106 0108 010a 010c 010e 0110     ................
  4073b0:	0112 0114 0116 0118 011a 011c 011e 0120     .............. .
  4073c0:	0122 0124 0126 0128 012a 012c 012e 0130     ".$.&.(.*.,...0.
  4073d0:	0132 0134 0136 0139 013b 013d 013f 0141     2.4.6.9.;.=.?.A.
  4073e0:	0143 0145 0147 014a 014c 014e 0150 0152     C.E.G.J.L.N.P.R.
  4073f0:	0154 0156 0158 015a 015c 015e 0160 0162     T.V.X.Z.\.^.`.b.
  407400:	0164 0166 0168 016a 016c 016e 0170 0172     d.f.h.j.l.n.p.r.
  407410:	0174 0176 0179 017b 017d 0191 0391 0392     t.v.y.{.}.......
  407420:	0393 0394 0395 0396 0397 0398 0399 039a     ................
  407430:	039b 039c 039d 039e 039f 03a0 03a1 03a3     ................
  407440:	03a4 03a5 03a6 03a7 03a8 03a9 03aa 0410     ................
  407450:	0411 0412 0413 0414 0415 0416 0417 0418     ................
  407460:	0419 041a 041b 041c 041d 041e 041f 0420     .............. .
  407470:	0421 0422 0423 0424 0425 0426 0427 0428     !.".#.$.%.&.'.(.
  407480:	0429 042a 042b 042c 042d 042e 042f 0401     ).*.+.,.-.../...
  407490:	0402 0403 0404 0405 0406 0407 0408 0409     ................
  4074a0:	040a 040b 040c 040e 040f 2160 2161 2162     ..........`!a!b!
  4074b0:	2163 2164 2165 2166 2167 2168 2169 216a     c!d!e!f!g!h!i!j!
  4074c0:	216b 216c 216d 216e 216f ff21 ff22 ff23     k!l!m!n!o!!.".#.
  4074d0:	ff24 ff25 ff26 ff27 ff28 ff29 ff2a ff2b     $.%.&.'.(.).*.+.
  4074e0:	ff2c ff2d ff2e ff2f ff30 ff31 ff32 ff33     ,.-.../.0.1.2.3.
  4074f0:	ff34 ff35 ff36 ff37 ff38 ff39 ff3a 0000     4.5.6.7.8.9.:...

00407500 <tbl_lower.4361>:
  407500:	0061 0062 0063 0064 0065 0066 0067 0068     a.b.c.d.e.f.g.h.
  407510:	0069 006a 006b 006c 006d 006e 006f 0070     i.j.k.l.m.n.o.p.
  407520:	0071 0072 0073 0074 0075 0076 0077 0078     q.r.s.t.u.v.w.x.
  407530:	0079 007a 00a1 00a2 00a3 00a5 00ac 00af     y.z.............
  407540:	00e0 00e1 00e2 00e3 00e4 00e5 00e6 00e7     ................
  407550:	00e8 00e9 00ea 00eb 00ec 00ed 00ee 00ef     ................
  407560:	00f0 00f1 00f2 00f3 00f4 00f5 00f6 00f8     ................
  407570:	00f9 00fa 00fb 00fc 00fd 00fe 00ff 0101     ................
  407580:	0103 0105 0107 0109 010b 010d 010f 0111     ................
  407590:	0113 0115 0117 0119 011b 011d 011f 0121     ..............!.
  4075a0:	0123 0125 0127 0129 012b 012d 012f 0131     #.%.'.).+.-./.1.
  4075b0:	0133 0135 0137 013a 013c 013e 0140 0142     3.5.7.:.<.>.@.B.
  4075c0:	0144 0146 0148 014b 014d 014f 0151 0153     D.F.H.K.M.O.Q.S.
  4075d0:	0155 0157 0159 015b 015d 015f 0161 0163     U.W.Y.[.]._.a.c.
  4075e0:	0165 0167 0169 016b 016d 016f 0171 0173     e.g.i.k.m.o.q.s.
  4075f0:	0175 0177 017a 017c 017e 0192 03b1 03b2     u.w.z.|.~.......
  407600:	03b3 03b4 03b5 03b6 03b7 03b8 03b9 03ba     ................
  407610:	03bb 03bc 03bd 03be 03bf 03c0 03c1 03c3     ................
  407620:	03c4 03c5 03c6 03c7 03c8 03c9 03ca 0430     ..............0.
  407630:	0431 0432 0433 0434 0435 0436 0437 0438     1.2.3.4.5.6.7.8.
  407640:	0439 043a 043b 043c 043d 043e 043f 0440     9.:.;.<.=.>.?.@.
  407650:	0441 0442 0443 0444 0445 0446 0447 0448     A.B.C.D.E.F.G.H.
  407660:	0449 044a 044b 044c 044d 044e 044f 0451     I.J.K.L.M.N.O.Q.
  407670:	0452 0453 0454 0455 0456 0457 0458 0459     R.S.T.U.V.W.X.Y.
  407680:	045a 045b 045c 045e 045f 2170 2171 2172     Z.[.\.^._.p!q!r!
  407690:	2173 2174 2175 2176 2177 2178 2179 217a     s!t!u!v!w!x!y!z!
  4076a0:	217b 217c 217d 217e 217f ff41 ff42 ff43     {!|!}!~!.!A.B.C.
  4076b0:	ff44 ff45 ff46 ff47 ff48 ff49 ff4a ff4b     D.E.F.G.H.I.J.K.
  4076c0:	ff4c ff4d ff4e ff4f ff50 ff51 ff52 ff53     L.M.N.O.P.Q.R.S.
  4076d0:	ff54 ff55 ff56 ff57 ff58 ff59 ff5a 0000     T.U.V.W.X.Y.Z...
  4076e0:	0a0c 2d0d 202d 4453 4d2f 434d 532f 4944     ...-- SD/MMC/SDI
  4076f0:	204f 6143 6472 4520 6178 706d 656c 6f20     O Card Example o
  407700:	206e 6146 4674 2073 2d2d 0d0a 0000 0000     n FatFs --......
  407710:	3830 303a 3a32 3032 0000 0000 7041 2072     08:02:20....Apr 
  407720:	3820 3220 3130 0037 2d2d 4320 6d6f 6970      8 2017.-- Compi
  407730:	656c 3a64 2520 2073 7325 2d20 0a2d 000d     led: %s %s --...
  407740:	6c50 6165 6573 7020 756c 2067 6e61 5320     Please plug an S
  407750:	2c44 4d20 434d 6f20 2072 4453 4f49 6320     D, MMC or SDIO c
  407760:	7261 2064 6e69 7320 6f6c 2e74 0d0a 0000     ard in slot.....
  407770:	6143 6472 6920 736e 6174 6c6c 4620 4941     Card install FAI
  407780:	0a4c 000d 6c50 6165 6573 7520 706e 756c     L...Please unplu
  407790:	2067 6e61 2064 6572 702d 756c 2067 6874     g and re-plug th
  4077a0:	2065 6163 6472 0a2e 000d 0000 6f4d 6e75     e card......Moun
  4077b0:	2074 6964 6b73 2820 5f66 6f6d 6e75 2974     t disk (f_mount)
  4077c0:	2e2e 0d2e 000a 0000 465b 4941 5d4c 7220     ........[FAIL] r
  4077d0:	7365 2520 0d64 000a 4f5b 5d4b 0a0d 0000     es %d...[OK]....
  4077e0:	7243 6165 6574 6120 6620 6c69 2065 6628     Create a file (f
  4077f0:	6f5f 6570 296e 2e2e 0d2e 000a 7257 7469     _open)......Writ
  407800:	2065 6f74 7420 7365 2074 6966 656c 2820     e to test file (
  407810:	5f66 7570 7374 2e29 2e2e 0a0d 0000 0000     f_puts).........
  407820:	6554 7473 5320 2f44 4d4d 2043 7473 6361     Test SD/MMC stac
  407830:	0a6b 0000 465b 4941 5d4c 0a0d 0000 0000     k...[FAIL]......
  407840:	6554 7473 6920 2073 7573 6363 7365 6673     Test is successf
  407850:	6c75 0a2e 000d 0000 6c50 6165 6573 7520     ul......Please u
  407860:	706e 756c 2067 6874 2065 6163 6472 0a2e     nplug the card..
  407870:	000d 0000 3a30 6473 6d5f 636d 745f 7365     ....0:sd_mmc_tes
  407880:	2e74 7874 0074 0000 0043 0000               t.txt...C...

0040788c <_global_impure_ptr>:
  40788c:	0038 2040                                   8.@ 

00407890 <zeroes.6993>:
  407890:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
  4078a0:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
  4078b0:	0000 0000 3130 3332 3534 3736 3938 6261     ....0123456789ab
  4078c0:	6463 6665 0000 0000 6e28 6c75 296c 0000     cdef....(null)..

004078d0 <blanks.6992>:
  4078d0:	2020 2020 2020 2020 2020 2020 2020 2020                     

004078e0 <_init>:
  4078e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4078e2:	bf00      	nop
  4078e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4078e6:	bc08      	pop	{r3}
  4078e8:	469e      	mov	lr, r3
  4078ea:	4770      	bx	lr

004078ec <__init_array_start>:
  4078ec:	0040525d 	.word	0x0040525d

004078f0 <__frame_dummy_init_array_entry>:
  4078f0:	00400165                                e.@.

004078f4 <_fini>:
  4078f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4078f6:	bf00      	nop
  4078f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4078fa:	bc08      	pop	{r3}
  4078fc:	469e      	mov	lr, r3
  4078fe:	4770      	bx	lr

00407900 <__fini_array_start>:
  407900:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
2040000a:	bf00      	nop

2040000c <sd_mmc_cards>:
	...
20400014:	0050 0000 0000 0000 0000 0000 0000 0000     P...............
	...

20400030 <g_interrupt_enabled>:
20400030:	0001 0000                                   ....

20400034 <SystemCoreClock>:
20400034:	0900 003d                                   ..=.

20400038 <impure_data>:
20400038:	0000 0000 0324 2040 038c 2040 03f4 2040     ....$.@ ..@ ..@ 
	...
2040006c:	7888 0040 0000 0000 0000 0000 0000 0000     .x@.............
	...
204000e0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000f0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400460 <_impure_ptr>:
20400460:	0038 2040                                   8.@ 

20400464 <lc_ctype_charset>:
20400464:	5341 4943 0049 0000 0000 0000 0000 0000     ASCII...........
	...

20400484 <__mb_cur_max>:
20400484:	0001 0000                                   ....

20400488 <__malloc_av_>:
	...
20400490:	0488 2040 0488 2040 0490 2040 0490 2040     ..@ ..@ ..@ ..@ 
204004a0:	0498 2040 0498 2040 04a0 2040 04a0 2040     ..@ ..@ ..@ ..@ 
204004b0:	04a8 2040 04a8 2040 04b0 2040 04b0 2040     ..@ ..@ ..@ ..@ 
204004c0:	04b8 2040 04b8 2040 04c0 2040 04c0 2040     ..@ ..@ ..@ ..@ 
204004d0:	04c8 2040 04c8 2040 04d0 2040 04d0 2040     ..@ ..@ ..@ ..@ 
204004e0:	04d8 2040 04d8 2040 04e0 2040 04e0 2040     ..@ ..@ ..@ ..@ 
204004f0:	04e8 2040 04e8 2040 04f0 2040 04f0 2040     ..@ ..@ ..@ ..@ 
20400500:	04f8 2040 04f8 2040 0500 2040 0500 2040     ..@ ..@ ..@ ..@ 
20400510:	0508 2040 0508 2040 0510 2040 0510 2040     ..@ ..@ ..@ ..@ 
20400520:	0518 2040 0518 2040 0520 2040 0520 2040     ..@ ..@  .@  .@ 
20400530:	0528 2040 0528 2040 0530 2040 0530 2040     (.@ (.@ 0.@ 0.@ 
20400540:	0538 2040 0538 2040 0540 2040 0540 2040     8.@ 8.@ @.@ @.@ 
20400550:	0548 2040 0548 2040 0550 2040 0550 2040     H.@ H.@ P.@ P.@ 
20400560:	0558 2040 0558 2040 0560 2040 0560 2040     X.@ X.@ `.@ `.@ 
20400570:	0568 2040 0568 2040 0570 2040 0570 2040     h.@ h.@ p.@ p.@ 
20400580:	0578 2040 0578 2040 0580 2040 0580 2040     x.@ x.@ ..@ ..@ 
20400590:	0588 2040 0588 2040 0590 2040 0590 2040     ..@ ..@ ..@ ..@ 
204005a0:	0598 2040 0598 2040 05a0 2040 05a0 2040     ..@ ..@ ..@ ..@ 
204005b0:	05a8 2040 05a8 2040 05b0 2040 05b0 2040     ..@ ..@ ..@ ..@ 
204005c0:	05b8 2040 05b8 2040 05c0 2040 05c0 2040     ..@ ..@ ..@ ..@ 
204005d0:	05c8 2040 05c8 2040 05d0 2040 05d0 2040     ..@ ..@ ..@ ..@ 
204005e0:	05d8 2040 05d8 2040 05e0 2040 05e0 2040     ..@ ..@ ..@ ..@ 
204005f0:	05e8 2040 05e8 2040 05f0 2040 05f0 2040     ..@ ..@ ..@ ..@ 
20400600:	05f8 2040 05f8 2040 0600 2040 0600 2040     ..@ ..@ ..@ ..@ 
20400610:	0608 2040 0608 2040 0610 2040 0610 2040     ..@ ..@ ..@ ..@ 
20400620:	0618 2040 0618 2040 0620 2040 0620 2040     ..@ ..@  .@  .@ 
20400630:	0628 2040 0628 2040 0630 2040 0630 2040     (.@ (.@ 0.@ 0.@ 
20400640:	0638 2040 0638 2040 0640 2040 0640 2040     8.@ 8.@ @.@ @.@ 
20400650:	0648 2040 0648 2040 0650 2040 0650 2040     H.@ H.@ P.@ P.@ 
20400660:	0658 2040 0658 2040 0660 2040 0660 2040     X.@ X.@ `.@ `.@ 
20400670:	0668 2040 0668 2040 0670 2040 0670 2040     h.@ h.@ p.@ p.@ 
20400680:	0678 2040 0678 2040 0680 2040 0680 2040     x.@ x.@ ..@ ..@ 
20400690:	0688 2040 0688 2040 0690 2040 0690 2040     ..@ ..@ ..@ ..@ 
204006a0:	0698 2040 0698 2040 06a0 2040 06a0 2040     ..@ ..@ ..@ ..@ 
204006b0:	06a8 2040 06a8 2040 06b0 2040 06b0 2040     ..@ ..@ ..@ ..@ 
204006c0:	06b8 2040 06b8 2040 06c0 2040 06c0 2040     ..@ ..@ ..@ ..@ 
204006d0:	06c8 2040 06c8 2040 06d0 2040 06d0 2040     ..@ ..@ ..@ ..@ 
204006e0:	06d8 2040 06d8 2040 06e0 2040 06e0 2040     ..@ ..@ ..@ ..@ 
204006f0:	06e8 2040 06e8 2040 06f0 2040 06f0 2040     ..@ ..@ ..@ ..@ 
20400700:	06f8 2040 06f8 2040 0700 2040 0700 2040     ..@ ..@ ..@ ..@ 
20400710:	0708 2040 0708 2040 0710 2040 0710 2040     ..@ ..@ ..@ ..@ 
20400720:	0718 2040 0718 2040 0720 2040 0720 2040     ..@ ..@  .@  .@ 
20400730:	0728 2040 0728 2040 0730 2040 0730 2040     (.@ (.@ 0.@ 0.@ 
20400740:	0738 2040 0738 2040 0740 2040 0740 2040     8.@ 8.@ @.@ @.@ 
20400750:	0748 2040 0748 2040 0750 2040 0750 2040     H.@ H.@ P.@ P.@ 
20400760:	0758 2040 0758 2040 0760 2040 0760 2040     X.@ X.@ `.@ `.@ 
20400770:	0768 2040 0768 2040 0770 2040 0770 2040     h.@ h.@ p.@ p.@ 
20400780:	0778 2040 0778 2040 0780 2040 0780 2040     x.@ x.@ ..@ ..@ 
20400790:	0788 2040 0788 2040 0790 2040 0790 2040     ..@ ..@ ..@ ..@ 
204007a0:	0798 2040 0798 2040 07a0 2040 07a0 2040     ..@ ..@ ..@ ..@ 
204007b0:	07a8 2040 07a8 2040 07b0 2040 07b0 2040     ..@ ..@ ..@ ..@ 
204007c0:	07b8 2040 07b8 2040 07c0 2040 07c0 2040     ..@ ..@ ..@ ..@ 
204007d0:	07c8 2040 07c8 2040 07d0 2040 07d0 2040     ..@ ..@ ..@ ..@ 
204007e0:	07d8 2040 07d8 2040 07e0 2040 07e0 2040     ..@ ..@ ..@ ..@ 
204007f0:	07e8 2040 07e8 2040 07f0 2040 07f0 2040     ..@ ..@ ..@ ..@ 
20400800:	07f8 2040 07f8 2040 0800 2040 0800 2040     ..@ ..@ ..@ ..@ 
20400810:	0808 2040 0808 2040 0810 2040 0810 2040     ..@ ..@ ..@ ..@ 
20400820:	0818 2040 0818 2040 0820 2040 0820 2040     ..@ ..@  .@  .@ 
20400830:	0828 2040 0828 2040 0830 2040 0830 2040     (.@ (.@ 0.@ 0.@ 
20400840:	0838 2040 0838 2040 0840 2040 0840 2040     8.@ 8.@ @.@ @.@ 
20400850:	0848 2040 0848 2040 0850 2040 0850 2040     H.@ H.@ P.@ P.@ 
20400860:	0858 2040 0858 2040 0860 2040 0860 2040     X.@ X.@ `.@ `.@ 
20400870:	0868 2040 0868 2040 0870 2040 0870 2040     h.@ h.@ p.@ p.@ 
20400880:	0878 2040 0878 2040 0880 2040 0880 2040     x.@ x.@ ..@ ..@ 

20400890 <__malloc_trim_threshold>:
20400890:	0000 0002                                   ....

20400894 <__malloc_sbrk_base>:
20400894:	ffff ffff                                   ....

20400898 <__wctomb>:
20400898:	6b5d 0040                                   ]k@.
